// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loginproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "loginproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace login {

namespace {

const ::google::protobuf::Descriptor* ReqLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLogout_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTableAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTableAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqHeatBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHeatBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllLookOnUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllLookOnUserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqEmotion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEmotion_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckLoginSuccessUc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLoginSuccessUc_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckLoginSuccessBc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLoginSuccessBc_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckLoginError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLoginError_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGPS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGPS_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagPlayers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagPlayers_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckTableInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckTableInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckLogoutBc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLogoutBc_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpTableSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpTableSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpTableErrorUc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpTableErrorUc_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckAheadDownTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckAheadDownTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckDownTableSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckDownTableSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpTableInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpTableInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpTableInfo_UC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpTableInfo_UC_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpTableInfo_BC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpTableInfo_BC_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckAllLookOnUserResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckAllLookOnUserResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckHeatBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckHeatBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPrereadyBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPrereadyBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckEmotionBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckEmotionBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckChatBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckChatBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckStrsip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckStrsip_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_loginproto_2eproto() {
  protobuf_AddDesc_loginproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "loginproto.proto");
  GOOGLE_CHECK(file != NULL);
  ReqLogin_descriptor_ = file->message_type(0);
  static const int ReqLogin_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, skey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, base_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, stand_money_),
  };
  ReqLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLogin_descriptor_,
      ReqLogin::default_instance_,
      ReqLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLogin));
  ReqLogout_descriptor_ = file->message_type(1);
  static const int ReqLogout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogout, uid_),
  };
  ReqLogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLogout_descriptor_,
      ReqLogout::default_instance_,
      ReqLogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLogout));
  ReqReady_descriptor_ = file->message_type(2);
  static const int ReqReady_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReady, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReady, seatid_),
  };
  ReqReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqReady_descriptor_,
      ReqReady::default_instance_,
      ReqReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqReady));
  ReqTableAction_descriptor_ = file->message_type(3);
  static const int ReqTableAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTableAction, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTableAction, roomid_),
  };
  ReqTableAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqTableAction_descriptor_,
      ReqTableAction::default_instance_,
      ReqTableAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTableAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTableAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqTableAction));
  ReqHeatBeat_descriptor_ = file->message_type(4);
  static const int ReqHeatBeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeatBeat, state_),
  };
  ReqHeatBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqHeatBeat_descriptor_,
      ReqHeatBeat::default_instance_,
      ReqHeatBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeatBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeatBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqHeatBeat));
  AllLookOnUserReq_descriptor_ = file->message_type(5);
  static const int AllLookOnUserReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllLookOnUserReq, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllLookOnUserReq, end_index_),
  };
  AllLookOnUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllLookOnUserReq_descriptor_,
      AllLookOnUserReq::default_instance_,
      AllLookOnUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllLookOnUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllLookOnUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllLookOnUserReq));
  ReqEmotion_descriptor_ = file->message_type(6);
  static const int ReqEmotion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEmotion, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEmotion, target_seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEmotion, target_seat_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEmotion, type_),
  };
  ReqEmotion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqEmotion_descriptor_,
      ReqEmotion::default_instance_,
      ReqEmotion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEmotion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEmotion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqEmotion));
  AckLoginSuccessUc_descriptor_ = file->message_type(7);
  static const int AckLoginSuccessUc_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessUc, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessUc, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessUc, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessUc, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessUc, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessUc, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessUc, ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessUc, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessUc, see_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessUc, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessUc, total_board_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessUc, total_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessUc, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessUc, vlevel_),
  };
  AckLoginSuccessUc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckLoginSuccessUc_descriptor_,
      AckLoginSuccessUc::default_instance_,
      AckLoginSuccessUc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessUc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessUc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckLoginSuccessUc));
  AckLoginSuccessBc_descriptor_ = file->message_type(8);
  static const int AckLoginSuccessBc_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessBc, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessBc, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessBc, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessBc, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessBc, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessBc, sex_),
  };
  AckLoginSuccessBc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckLoginSuccessBc_descriptor_,
      AckLoginSuccessBc::default_instance_,
      AckLoginSuccessBc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessBc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginSuccessBc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckLoginSuccessBc));
  AckLoginError_descriptor_ = file->message_type(9);
  static const int AckLoginError_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginError, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginError, code_),
  };
  AckLoginError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckLoginError_descriptor_,
      AckLoginError::default_instance_,
      AckLoginError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLoginError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckLoginError));
  AckGPS_descriptor_ = file->message_type(10);
  static const int AckGPS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGPS, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGPS, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGPS, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGPS, city_),
  };
  AckGPS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGPS_descriptor_,
      AckGPS::default_instance_,
      AckGPS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGPS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGPS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGPS));
  tagPlayers_descriptor_ = file->message_type(11);
  static const int tagPlayers_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, gps_),
  };
  tagPlayers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagPlayers_descriptor_,
      tagPlayers::default_instance_,
      tagPlayers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagPlayers));
  AckTableInfo_descriptor_ = file->message_type(12);
  static const int AckTableInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, stand_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, base_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, roomgolden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, cardpoolnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, touziinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, gcrdfrmlstnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, game_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, isclubroom_),
  };
  AckTableInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckTableInfo_descriptor_,
      AckTableInfo::default_instance_,
      AckTableInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTableInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckTableInfo));
  AckLogoutBc_descriptor_ = file->message_type(13);
  static const int AckLogoutBc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogoutBc, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogoutBc, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogoutBc, type_),
  };
  AckLogoutBc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckLogoutBc_descriptor_,
      AckLogoutBc::default_instance_,
      AckLogoutBc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogoutBc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogoutBc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckLogoutBc));
  AckUpTableSuccess_descriptor_ = file->message_type(14);
  static const int AckUpTableSuccess_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableSuccess, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableSuccess, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableSuccess, ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableSuccess, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableSuccess, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableSuccess, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableSuccess, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableSuccess, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableSuccess, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableSuccess, pcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableSuccess, vlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableSuccess, ps_),
  };
  AckUpTableSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpTableSuccess_descriptor_,
      AckUpTableSuccess::default_instance_,
      AckUpTableSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpTableSuccess));
  AckUpTableErrorUc_descriptor_ = file->message_type(15);
  static const int AckUpTableErrorUc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableErrorUc, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableErrorUc, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableErrorUc, code_),
  };
  AckUpTableErrorUc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpTableErrorUc_descriptor_,
      AckUpTableErrorUc::default_instance_,
      AckUpTableErrorUc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableErrorUc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableErrorUc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpTableErrorUc));
  AckAheadDownTable_descriptor_ = file->message_type(16);
  static const int AckAheadDownTable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAheadDownTable, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAheadDownTable, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAheadDownTable, down_tag_),
  };
  AckAheadDownTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckAheadDownTable_descriptor_,
      AckAheadDownTable::default_instance_,
      AckAheadDownTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAheadDownTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAheadDownTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckAheadDownTable));
  AckDownTableSuccess_descriptor_ = file->message_type(17);
  static const int AckDownTableSuccess_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDownTableSuccess, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDownTableSuccess, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDownTableSuccess, money_),
  };
  AckDownTableSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckDownTableSuccess_descriptor_,
      AckDownTableSuccess::default_instance_,
      AckDownTableSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDownTableSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDownTableSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckDownTableSuccess));
  AckUpTableInfoReq_descriptor_ = file->message_type(18);
  static const int AckUpTableInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableInfoReq, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableInfoReq, end_index_),
  };
  AckUpTableInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpTableInfoReq_descriptor_,
      AckUpTableInfoReq::default_instance_,
      AckUpTableInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpTableInfoReq));
  AckUpTableInfo_UC_descriptor_ = file->message_type(19);
  static const int AckUpTableInfo_UC_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableInfo_UC, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableInfo_UC, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableInfo_UC, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableInfo_UC, down_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableInfo_UC, limit_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableInfo_UC, stand_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableInfo_UC, base_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableInfo_UC, left_len_),
  };
  AckUpTableInfo_UC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpTableInfo_UC_descriptor_,
      AckUpTableInfo_UC::default_instance_,
      AckUpTableInfo_UC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableInfo_UC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableInfo_UC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpTableInfo_UC));
  AckUpTableInfo_BC_descriptor_ = file->message_type(20);
  static const int AckUpTableInfo_BC_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableInfo_BC, players_),
  };
  AckUpTableInfo_BC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpTableInfo_BC_descriptor_,
      AckUpTableInfo_BC::default_instance_,
      AckUpTableInfo_BC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableInfo_BC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpTableInfo_BC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpTableInfo_BC));
  AckAllLookOnUserResp_descriptor_ = file->message_type(21);
  static const int AckAllLookOnUserResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAllLookOnUserResp, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAllLookOnUserResp, left_len_),
  };
  AckAllLookOnUserResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckAllLookOnUserResp_descriptor_,
      AckAllLookOnUserResp::default_instance_,
      AckAllLookOnUserResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAllLookOnUserResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckAllLookOnUserResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckAllLookOnUserResp));
  AckHeatBeat_descriptor_ = file->message_type(22);
  static const int AckHeatBeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHeatBeat, state_),
  };
  AckHeatBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckHeatBeat_descriptor_,
      AckHeatBeat::default_instance_,
      AckHeatBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHeatBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHeatBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckHeatBeat));
  AckPrereadyBC_descriptor_ = file->message_type(23);
  static const int AckPrereadyBC_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPrereadyBC, roomid_),
  };
  AckPrereadyBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPrereadyBC_descriptor_,
      AckPrereadyBC::default_instance_,
      AckPrereadyBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPrereadyBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPrereadyBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPrereadyBC));
  AckEmotionBC_descriptor_ = file->message_type(24);
  static const int AckEmotionBC_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEmotionBC, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEmotionBC, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEmotionBC, target_seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEmotionBC, target_seat_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEmotionBC, type_),
  };
  AckEmotionBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckEmotionBC_descriptor_,
      AckEmotionBC::default_instance_,
      AckEmotionBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEmotionBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckEmotionBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckEmotionBC));
  AckChatBC_descriptor_ = file->message_type(25);
  static const int AckChatBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChatBC, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChatBC, charmsg_),
  };
  AckChatBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckChatBC_descriptor_,
      AckChatBC::default_instance_,
      AckChatBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChatBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChatBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckChatBC));
  AckStrsip_descriptor_ = file->message_type(26);
  static const int AckStrsip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStrsip, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStrsip, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStrsip, handle_type_),
  };
  AckStrsip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckStrsip_descriptor_,
      AckStrsip::default_instance_,
      AckStrsip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStrsip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStrsip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckStrsip));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_loginproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLogin_descriptor_, &ReqLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLogout_descriptor_, &ReqLogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqReady_descriptor_, &ReqReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqTableAction_descriptor_, &ReqTableAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqHeatBeat_descriptor_, &ReqHeatBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllLookOnUserReq_descriptor_, &AllLookOnUserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqEmotion_descriptor_, &ReqEmotion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckLoginSuccessUc_descriptor_, &AckLoginSuccessUc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckLoginSuccessBc_descriptor_, &AckLoginSuccessBc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckLoginError_descriptor_, &AckLoginError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGPS_descriptor_, &AckGPS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagPlayers_descriptor_, &tagPlayers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckTableInfo_descriptor_, &AckTableInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckLogoutBc_descriptor_, &AckLogoutBc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpTableSuccess_descriptor_, &AckUpTableSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpTableErrorUc_descriptor_, &AckUpTableErrorUc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckAheadDownTable_descriptor_, &AckAheadDownTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckDownTableSuccess_descriptor_, &AckDownTableSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpTableInfoReq_descriptor_, &AckUpTableInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpTableInfo_UC_descriptor_, &AckUpTableInfo_UC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpTableInfo_BC_descriptor_, &AckUpTableInfo_BC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckAllLookOnUserResp_descriptor_, &AckAllLookOnUserResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckHeatBeat_descriptor_, &AckHeatBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPrereadyBC_descriptor_, &AckPrereadyBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckEmotionBC_descriptor_, &AckEmotionBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckChatBC_descriptor_, &AckChatBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckStrsip_descriptor_, &AckStrsip::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_loginproto_2eproto() {
  delete ReqLogin::default_instance_;
  delete ReqLogin_reflection_;
  delete ReqLogout::default_instance_;
  delete ReqLogout_reflection_;
  delete ReqReady::default_instance_;
  delete ReqReady_reflection_;
  delete ReqTableAction::default_instance_;
  delete ReqTableAction_reflection_;
  delete ReqHeatBeat::default_instance_;
  delete ReqHeatBeat_reflection_;
  delete AllLookOnUserReq::default_instance_;
  delete AllLookOnUserReq_reflection_;
  delete ReqEmotion::default_instance_;
  delete ReqEmotion_reflection_;
  delete AckLoginSuccessUc::default_instance_;
  delete AckLoginSuccessUc_reflection_;
  delete AckLoginSuccessBc::default_instance_;
  delete AckLoginSuccessBc_reflection_;
  delete AckLoginError::default_instance_;
  delete AckLoginError_reflection_;
  delete AckGPS::default_instance_;
  delete AckGPS_reflection_;
  delete tagPlayers::default_instance_;
  delete tagPlayers_reflection_;
  delete AckTableInfo::default_instance_;
  delete AckTableInfo_reflection_;
  delete AckLogoutBc::default_instance_;
  delete AckLogoutBc_reflection_;
  delete AckUpTableSuccess::default_instance_;
  delete AckUpTableSuccess_reflection_;
  delete AckUpTableErrorUc::default_instance_;
  delete AckUpTableErrorUc_reflection_;
  delete AckAheadDownTable::default_instance_;
  delete AckAheadDownTable_reflection_;
  delete AckDownTableSuccess::default_instance_;
  delete AckDownTableSuccess_reflection_;
  delete AckUpTableInfoReq::default_instance_;
  delete AckUpTableInfoReq_reflection_;
  delete AckUpTableInfo_UC::default_instance_;
  delete AckUpTableInfo_UC_reflection_;
  delete AckUpTableInfo_BC::default_instance_;
  delete AckUpTableInfo_BC_reflection_;
  delete AckAllLookOnUserResp::default_instance_;
  delete AckAllLookOnUserResp_reflection_;
  delete AckHeatBeat::default_instance_;
  delete AckHeatBeat_reflection_;
  delete AckPrereadyBC::default_instance_;
  delete AckPrereadyBC_reflection_;
  delete AckEmotionBC::default_instance_;
  delete AckEmotionBC_reflection_;
  delete AckChatBC::default_instance_;
  delete AckChatBC_reflection_;
  delete AckStrsip::default_instance_;
  delete AckStrsip_reflection_;
}

void protobuf_AddDesc_loginproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020loginproto.proto\022\013proto.login\"p\n\010ReqLo"
    "gin\022\013\n\003uid\030\001 \002(\005\022\014\n\004skey\030\004 \001(\t\022\016\n\006roomid"
    "\030\005 \001(\005\022\020\n\010deviceId\030\006 \001(\t\022\022\n\nbase_money\030\007"
    " \001(\005\022\023\n\013stand_money\030\010 \001(\005\"\030\n\tReqLogout\022\013"
    "\n\003uid\030\001 \002(\005\"\'\n\010ReqReady\022\013\n\003uid\030\001 \002(\005\022\016\n\006"
    "seatid\030\002 \001(\005\"-\n\016ReqTableAction\022\013\n\003uid\030\001 "
    "\002(\005\022\016\n\006roomid\030\002 \001(\005\"\034\n\013ReqHeatBeat\022\r\n\005st"
    "ate\030\001 \002(\005\":\n\020AllLookOnUserReq\022\023\n\013start_i"
    "ndex\030\001 \002(\005\022\021\n\tend_index\030\002 \001(\005\"Z\n\nReqEmot"
    "ion\022\016\n\006seatid\030\001 \002(\005\022\025\n\rtarget_seatid\030\002 \001"
    "(\005\022\027\n\017target_seat_num\030\003 \001(\005\022\014\n\004type\030\004 \001("
    "\005\"\346\001\n\021AckLoginSuccessUc\022\016\n\006seatid\030\001 \002(\005\022"
    "\016\n\006avatar\030\002 \001(\t\022\014\n\004coin\030\003 \001(\005\022\013\n\003exp\030\004 \001"
    "(\005\022\r\n\005money\030\005 \001(\005\022\014\n\004name\030\006 \001(\t\022\r\n\005ready"
    "\030\007 \001(\005\022\013\n\003rmb\030\010 \001(\005\022\013\n\003see\030\t \001(\005\022\013\n\003sex\030"
    "\n \001(\005\022\023\n\013total_board\030\013 \001(\005\022\021\n\ttotal_win\030"
    "\014 \001(\005\022\013\n\003uid\030\r \001(\005\022\016\n\006vlevel\030\016 \001(\005\"j\n\021Ac"
    "kLoginSuccessBc\022\016\n\006seatid\030\001 \002(\005\022\013\n\003uid\030\002"
    " \001(\005\022\r\n\005money\030\003 \001(\005\022\014\n\004name\030\004 \001(\t\022\016\n\006ava"
    "tar\030\005 \001(\t\022\013\n\003sex\030\006 \001(\005\"*\n\rAckLoginError\022"
    "\013\n\003uid\030\001 \002(\005\022\014\n\004code\030\002 \001(\005\"H\n\006AckGPS\022\013\n\003"
    "uid\030\001 \001(\005\022\020\n\010latitude\030\002 \001(\001\022\021\n\tlongitude"
    "\030\003 \001(\001\022\014\n\004city\030\004 \001(\t\"\224\001\n\ntagPlayers\022\013\n\003u"
    "id\030\001 \002(\005\022\016\n\006seatid\030\002 \001(\005\022\r\n\005ready\030\003 \001(\005\022"
    "\r\n\005money\030\004 \001(\005\022\014\n\004name\030\005 \001(\t\022\013\n\003sex\030\006 \001("
    "\005\022\016\n\006avatar\030\007 \001(\t\022 \n\003GPS\030\010 \001(\0132\023.proto.l"
    "ogin.AckGPS\"\375\001\n\014AckTableInfo\022\016\n\006seatid\030\001"
    " \002(\005\022\r\n\005state\030\002 \001(\005\022\023\n\013stand_money\030\003 \001(\005"
    "\022\022\n\nbase_money\030\004 \001(\005\022(\n\007players\030\005 \003(\0132\027."
    "proto.login.tagPlayers\022\022\n\nroomGolden\030\006 \001"
    "(\005\022\024\n\014cardPoolNums\030\007 \001(\005\022\021\n\tTouZiInfo\030\010 "
    "\003(\005\022\025\n\rGCrdFrmLstNum\030\t \001(\005\022\023\n\013game_playe"
    "r\030\n \001(\005\022\022\n\nisClubRoom\030\013 \001(\005\"8\n\013AckLogout"
    "Bc\022\016\n\006seatid\030\001 \002(\005\022\013\n\003uid\030\002 \001(\005\022\014\n\004type\030"
    "\003 \001(\005\"\300\001\n\021AckUpTableSuccess\022\013\n\003uid\030\001 \002(\005"
    "\022\016\n\006seatid\030\002 \001(\005\022\r\n\005ready\030\003 \001(\005\022\014\n\004name\030"
    "\004 \001(\t\022\013\n\003sex\030\005 \001(\005\022\016\n\006avatar\030\006 \001(\t\022\r\n\005mo"
    "ney\030\007 \001(\005\022\014\n\004coin\030\010 \001(\005\022\013\n\003exp\030\t \001(\005\022\016\n\006"
    "pcount\030\n \001(\005\022\016\n\006vlevel\030\013 \001(\005\022\n\n\002ps\030\014 \001(\t"
    "\"=\n\021AckUpTableErrorUc\022\013\n\003uid\030\001 \002(\005\022\r\n\005mo"
    "ney\030\002 \001(\005\022\014\n\004code\030\003 \001(\005\"B\n\021AckAheadDownT"
    "able\022\013\n\003uid\030\001 \002(\005\022\016\n\006seatid\030\002 \001(\005\022\020\n\010dow"
    "n_tag\030\003 \001(\005\"A\n\023AckDownTableSuccess\022\013\n\003ui"
    "d\030\001 \002(\005\022\016\n\006seatid\030\002 \001(\005\022\r\n\005money\030\003 \001(\005\";"
    "\n\021AckUpTableInfoReq\022\023\n\013start_index\030\001 \002(\005"
    "\022\021\n\tend_index\030\002 \001(\005\"\275\001\n\021AckUpTableInfo_U"
    "C\022(\n\007players\030\001 \003(\0132\027.proto.login.tagPlay"
    "ers\022\014\n\004rank\030\002 \001(\005\022\016\n\006number\030\003 \001(\005\022\020\n\010dow"
    "n_tag\030\004 \001(\005\022\023\n\013limit_money\030\005 \001(\005\022\023\n\013stan"
    "d_money\030\006 \001(\005\022\022\n\nbase_money\030\007 \001(\005\022\020\n\010lef"
    "t_len\030\010 \001(\005\"=\n\021AckUpTableInfo_BC\022(\n\007play"
    "ers\030\001 \003(\0132\027.proto.login.tagPlayers\"R\n\024Ac"
    "kAllLookOnUserResp\022(\n\007players\030\001 \003(\0132\027.pr"
    "oto.login.tagPlayers\022\020\n\010left_len\030\002 \001(\005\"\034"
    "\n\013AckHeatBeat\022\r\n\005state\030\001 \002(\005\"\037\n\rAckPrere"
    "adyBC\022\016\n\006roomid\030\001 \002(\005\"k\n\014AckEmotionBC\022\016\n"
    "\006seatid\030\001 \002(\005\022\r\n\005money\030\002 \001(\005\022\025\n\rtarget_s"
    "eatid\030\003 \001(\005\022\027\n\017target_seat_num\030\004 \001(\005\022\014\n\004"
    "type\030\005 \001(\005\",\n\tAckChatBC\022\016\n\006seatid\030\001 \002(\005\022"
    "\017\n\007charmsg\030\002 \001(\t\">\n\tAckStrsip\022\013\n\003uid\030\001 \001"
    "(\005\022\017\n\007chairid\030\002 \001(\005\022\023\n\013handle_type\030\003 \001(\005", 2440);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "loginproto.proto", &protobuf_RegisterTypes);
  ReqLogin::default_instance_ = new ReqLogin();
  ReqLogout::default_instance_ = new ReqLogout();
  ReqReady::default_instance_ = new ReqReady();
  ReqTableAction::default_instance_ = new ReqTableAction();
  ReqHeatBeat::default_instance_ = new ReqHeatBeat();
  AllLookOnUserReq::default_instance_ = new AllLookOnUserReq();
  ReqEmotion::default_instance_ = new ReqEmotion();
  AckLoginSuccessUc::default_instance_ = new AckLoginSuccessUc();
  AckLoginSuccessBc::default_instance_ = new AckLoginSuccessBc();
  AckLoginError::default_instance_ = new AckLoginError();
  AckGPS::default_instance_ = new AckGPS();
  tagPlayers::default_instance_ = new tagPlayers();
  AckTableInfo::default_instance_ = new AckTableInfo();
  AckLogoutBc::default_instance_ = new AckLogoutBc();
  AckUpTableSuccess::default_instance_ = new AckUpTableSuccess();
  AckUpTableErrorUc::default_instance_ = new AckUpTableErrorUc();
  AckAheadDownTable::default_instance_ = new AckAheadDownTable();
  AckDownTableSuccess::default_instance_ = new AckDownTableSuccess();
  AckUpTableInfoReq::default_instance_ = new AckUpTableInfoReq();
  AckUpTableInfo_UC::default_instance_ = new AckUpTableInfo_UC();
  AckUpTableInfo_BC::default_instance_ = new AckUpTableInfo_BC();
  AckAllLookOnUserResp::default_instance_ = new AckAllLookOnUserResp();
  AckHeatBeat::default_instance_ = new AckHeatBeat();
  AckPrereadyBC::default_instance_ = new AckPrereadyBC();
  AckEmotionBC::default_instance_ = new AckEmotionBC();
  AckChatBC::default_instance_ = new AckChatBC();
  AckStrsip::default_instance_ = new AckStrsip();
  ReqLogin::default_instance_->InitAsDefaultInstance();
  ReqLogout::default_instance_->InitAsDefaultInstance();
  ReqReady::default_instance_->InitAsDefaultInstance();
  ReqTableAction::default_instance_->InitAsDefaultInstance();
  ReqHeatBeat::default_instance_->InitAsDefaultInstance();
  AllLookOnUserReq::default_instance_->InitAsDefaultInstance();
  ReqEmotion::default_instance_->InitAsDefaultInstance();
  AckLoginSuccessUc::default_instance_->InitAsDefaultInstance();
  AckLoginSuccessBc::default_instance_->InitAsDefaultInstance();
  AckLoginError::default_instance_->InitAsDefaultInstance();
  AckGPS::default_instance_->InitAsDefaultInstance();
  tagPlayers::default_instance_->InitAsDefaultInstance();
  AckTableInfo::default_instance_->InitAsDefaultInstance();
  AckLogoutBc::default_instance_->InitAsDefaultInstance();
  AckUpTableSuccess::default_instance_->InitAsDefaultInstance();
  AckUpTableErrorUc::default_instance_->InitAsDefaultInstance();
  AckAheadDownTable::default_instance_->InitAsDefaultInstance();
  AckDownTableSuccess::default_instance_->InitAsDefaultInstance();
  AckUpTableInfoReq::default_instance_->InitAsDefaultInstance();
  AckUpTableInfo_UC::default_instance_->InitAsDefaultInstance();
  AckUpTableInfo_BC::default_instance_->InitAsDefaultInstance();
  AckAllLookOnUserResp::default_instance_->InitAsDefaultInstance();
  AckHeatBeat::default_instance_->InitAsDefaultInstance();
  AckPrereadyBC::default_instance_->InitAsDefaultInstance();
  AckEmotionBC::default_instance_->InitAsDefaultInstance();
  AckChatBC::default_instance_->InitAsDefaultInstance();
  AckStrsip::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_loginproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_loginproto_2eproto {
  StaticDescriptorInitializer_loginproto_2eproto() {
    protobuf_AddDesc_loginproto_2eproto();
  }
} static_descriptor_initializer_loginproto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReqLogin::kUidFieldNumber;
const int ReqLogin::kSkeyFieldNumber;
const int ReqLogin::kRoomidFieldNumber;
const int ReqLogin::kDeviceIdFieldNumber;
const int ReqLogin::kBaseMoneyFieldNumber;
const int ReqLogin::kStandMoneyFieldNumber;
#endif  // !_MSC_VER

ReqLogin::ReqLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.ReqLogin)
}

void ReqLogin::InitAsDefaultInstance() {
}

ReqLogin::ReqLogin(const ReqLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.ReqLogin)
}

void ReqLogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0;
  skey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_ = 0;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  base_money_ = 0;
  stand_money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLogin::~ReqLogin() {
  // @@protoc_insertion_point(destructor:proto.login.ReqLogin)
  SharedDtor();
}

void ReqLogin::SharedDtor() {
  if (skey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skey_;
  }
  if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deviceid_;
  }
  if (this != default_instance_) {
  }
}

void ReqLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLogin_descriptor_;
}

const ReqLogin& ReqLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

ReqLogin* ReqLogin::default_instance_ = NULL;

ReqLogin* ReqLogin::New() const {
  return new ReqLogin;
}

void ReqLogin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqLogin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(uid_, roomid_);
    ZR_(base_money_, stand_money_);
    if (has_skey()) {
      if (skey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        skey_->clear();
      }
    }
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deviceid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.ReqLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_skey;
        break;
      }

      // optional string skey = 4;
      case 4: {
        if (tag == 34) {
         parse_skey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->skey().data(), this->skey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "skey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_roomid;
        break;
      }

      // optional int32 roomid = 5;
      case 5: {
        if (tag == 40) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_deviceId;
        break;
      }

      // optional string deviceId = 6;
      case 6: {
        if (tag == 50) {
         parse_deviceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deviceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_base_money;
        break;
      }

      // optional int32 base_money = 7;
      case 7: {
        if (tag == 56) {
         parse_base_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_money_)));
          set_has_base_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_stand_money;
        break;
      }

      // optional int32 stand_money = 8;
      case 8: {
        if (tag == 64) {
         parse_stand_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stand_money_)));
          set_has_stand_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.ReqLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.ReqLogin)
  return false;
#undef DO_
}

void ReqLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.ReqLogin)
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional string skey = 4;
  if (has_skey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skey().data(), this->skey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->skey(), output);
  }

  // optional int32 roomid = 5;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->roomid(), output);
  }

  // optional string deviceId = 6;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->deviceid(), output);
  }

  // optional int32 base_money = 7;
  if (has_base_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->base_money(), output);
  }

  // optional int32 stand_money = 8;
  if (has_stand_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->stand_money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.ReqLogin)
}

::google::protobuf::uint8* ReqLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.ReqLogin)
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional string skey = 4;
  if (has_skey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skey().data(), this->skey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->skey(), target);
  }

  // optional int32 roomid = 5;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->roomid(), target);
  }

  // optional string deviceId = 6;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deviceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->deviceid(), target);
  }

  // optional int32 base_money = 7;
  if (has_base_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->base_money(), target);
  }

  // optional int32 stand_money = 8;
  if (has_stand_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->stand_money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.ReqLogin)
  return target;
}

int ReqLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional string skey = 4;
    if (has_skey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skey());
    }

    // optional int32 roomid = 5;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional string deviceId = 6;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional int32 base_money = 7;
    if (has_base_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_money());
    }

    // optional int32 stand_money = 8;
    if (has_stand_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stand_money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLogin::MergeFrom(const ReqLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_skey()) {
      set_skey(from.skey());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_base_money()) {
      set_base_money(from.base_money());
    }
    if (from.has_stand_money()) {
      set_stand_money(from.stand_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLogin::CopyFrom(const ReqLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqLogin::Swap(ReqLogin* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(skey_, other->skey_);
    std::swap(roomid_, other->roomid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(base_money_, other->base_money_);
    std::swap(stand_money_, other->stand_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLogin_descriptor_;
  metadata.reflection = ReqLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLogout::kUidFieldNumber;
#endif  // !_MSC_VER

ReqLogout::ReqLogout()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.ReqLogout)
}

void ReqLogout::InitAsDefaultInstance() {
}

ReqLogout::ReqLogout(const ReqLogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.ReqLogout)
}

void ReqLogout::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLogout::~ReqLogout() {
  // @@protoc_insertion_point(destructor:proto.login.ReqLogout)
  SharedDtor();
}

void ReqLogout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLogout_descriptor_;
}

const ReqLogout& ReqLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

ReqLogout* ReqLogout::default_instance_ = NULL;

ReqLogout* ReqLogout::New() const {
  return new ReqLogout;
}

void ReqLogout::Clear() {
  uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.ReqLogout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.ReqLogout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.ReqLogout)
  return false;
#undef DO_
}

void ReqLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.ReqLogout)
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.ReqLogout)
}

::google::protobuf::uint8* ReqLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.ReqLogout)
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.ReqLogout)
  return target;
}

int ReqLogout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLogout::MergeFrom(const ReqLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLogout::CopyFrom(const ReqLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLogout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqLogout::Swap(ReqLogout* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLogout_descriptor_;
  metadata.reflection = ReqLogout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqReady::kUidFieldNumber;
const int ReqReady::kSeatidFieldNumber;
#endif  // !_MSC_VER

ReqReady::ReqReady()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.ReqReady)
}

void ReqReady::InitAsDefaultInstance() {
}

ReqReady::ReqReady(const ReqReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.ReqReady)
}

void ReqReady::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqReady::~ReqReady() {
  // @@protoc_insertion_point(destructor:proto.login.ReqReady)
  SharedDtor();
}

void ReqReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqReady_descriptor_;
}

const ReqReady& ReqReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

ReqReady* ReqReady::default_instance_ = NULL;

ReqReady* ReqReady::New() const {
  return new ReqReady;
}

void ReqReady::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqReady*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, seatid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.ReqReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 2;
      case 2: {
        if (tag == 16) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.ReqReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.ReqReady)
  return false;
#undef DO_
}

void ReqReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.ReqReady)
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.ReqReady)
}

::google::protobuf::uint8* ReqReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.ReqReady)
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.ReqReady)
  return target;
}

int ReqReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqReady::MergeFrom(const ReqReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqReady::CopyFrom(const ReqReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqReady::Swap(ReqReady* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqReady_descriptor_;
  metadata.reflection = ReqReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqTableAction::kUidFieldNumber;
const int ReqTableAction::kRoomidFieldNumber;
#endif  // !_MSC_VER

ReqTableAction::ReqTableAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.ReqTableAction)
}

void ReqTableAction::InitAsDefaultInstance() {
}

ReqTableAction::ReqTableAction(const ReqTableAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.ReqTableAction)
}

void ReqTableAction::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqTableAction::~ReqTableAction() {
  // @@protoc_insertion_point(destructor:proto.login.ReqTableAction)
  SharedDtor();
}

void ReqTableAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqTableAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTableAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTableAction_descriptor_;
}

const ReqTableAction& ReqTableAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

ReqTableAction* ReqTableAction::default_instance_ = NULL;

ReqTableAction* ReqTableAction::New() const {
  return new ReqTableAction;
}

void ReqTableAction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqTableAction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, roomid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqTableAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.ReqTableAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional int32 roomid = 2;
      case 2: {
        if (tag == 16) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.ReqTableAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.ReqTableAction)
  return false;
#undef DO_
}

void ReqTableAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.ReqTableAction)
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.ReqTableAction)
}

::google::protobuf::uint8* ReqTableAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.ReqTableAction)
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.ReqTableAction)
  return target;
}

int ReqTableAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTableAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqTableAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqTableAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqTableAction::MergeFrom(const ReqTableAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqTableAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTableAction::CopyFrom(const ReqTableAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTableAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqTableAction::Swap(ReqTableAction* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqTableAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTableAction_descriptor_;
  metadata.reflection = ReqTableAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqHeatBeat::kStateFieldNumber;
#endif  // !_MSC_VER

ReqHeatBeat::ReqHeatBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.ReqHeatBeat)
}

void ReqHeatBeat::InitAsDefaultInstance() {
}

ReqHeatBeat::ReqHeatBeat(const ReqHeatBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.ReqHeatBeat)
}

void ReqHeatBeat::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHeatBeat::~ReqHeatBeat() {
  // @@protoc_insertion_point(destructor:proto.login.ReqHeatBeat)
  SharedDtor();
}

void ReqHeatBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqHeatBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHeatBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHeatBeat_descriptor_;
}

const ReqHeatBeat& ReqHeatBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

ReqHeatBeat* ReqHeatBeat::default_instance_ = NULL;

ReqHeatBeat* ReqHeatBeat::New() const {
  return new ReqHeatBeat;
}

void ReqHeatBeat::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqHeatBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.ReqHeatBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.ReqHeatBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.ReqHeatBeat)
  return false;
#undef DO_
}

void ReqHeatBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.ReqHeatBeat)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.ReqHeatBeat)
}

::google::protobuf::uint8* ReqHeatBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.ReqHeatBeat)
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.ReqHeatBeat)
  return target;
}

int ReqHeatBeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHeatBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqHeatBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqHeatBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqHeatBeat::MergeFrom(const ReqHeatBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqHeatBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHeatBeat::CopyFrom(const ReqHeatBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHeatBeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqHeatBeat::Swap(ReqHeatBeat* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqHeatBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHeatBeat_descriptor_;
  metadata.reflection = ReqHeatBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllLookOnUserReq::kStartIndexFieldNumber;
const int AllLookOnUserReq::kEndIndexFieldNumber;
#endif  // !_MSC_VER

AllLookOnUserReq::AllLookOnUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.AllLookOnUserReq)
}

void AllLookOnUserReq::InitAsDefaultInstance() {
}

AllLookOnUserReq::AllLookOnUserReq(const AllLookOnUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.AllLookOnUserReq)
}

void AllLookOnUserReq::SharedCtor() {
  _cached_size_ = 0;
  start_index_ = 0;
  end_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllLookOnUserReq::~AllLookOnUserReq() {
  // @@protoc_insertion_point(destructor:proto.login.AllLookOnUserReq)
  SharedDtor();
}

void AllLookOnUserReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllLookOnUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllLookOnUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllLookOnUserReq_descriptor_;
}

const AllLookOnUserReq& AllLookOnUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

AllLookOnUserReq* AllLookOnUserReq::default_instance_ = NULL;

AllLookOnUserReq* AllLookOnUserReq::New() const {
  return new AllLookOnUserReq;
}

void AllLookOnUserReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AllLookOnUserReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(start_index_, end_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllLookOnUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.AllLookOnUserReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 start_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_index;
        break;
      }

      // optional int32 end_index = 2;
      case 2: {
        if (tag == 16) {
         parse_end_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_index_)));
          set_has_end_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.AllLookOnUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.AllLookOnUserReq)
  return false;
#undef DO_
}

void AllLookOnUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.AllLookOnUserReq)
  // required int32 start_index = 1;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->start_index(), output);
  }

  // optional int32 end_index = 2;
  if (has_end_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.AllLookOnUserReq)
}

::google::protobuf::uint8* AllLookOnUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.AllLookOnUserReq)
  // required int32 start_index = 1;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->start_index(), target);
  }

  // optional int32 end_index = 2;
  if (has_end_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.AllLookOnUserReq)
  return target;
}

int AllLookOnUserReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 start_index = 1;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_index());
    }

    // optional int32 end_index = 2;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllLookOnUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllLookOnUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllLookOnUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllLookOnUserReq::MergeFrom(const AllLookOnUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_end_index()) {
      set_end_index(from.end_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllLookOnUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllLookOnUserReq::CopyFrom(const AllLookOnUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllLookOnUserReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AllLookOnUserReq::Swap(AllLookOnUserReq* other) {
  if (other != this) {
    std::swap(start_index_, other->start_index_);
    std::swap(end_index_, other->end_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllLookOnUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllLookOnUserReq_descriptor_;
  metadata.reflection = AllLookOnUserReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqEmotion::kSeatidFieldNumber;
const int ReqEmotion::kTargetSeatidFieldNumber;
const int ReqEmotion::kTargetSeatNumFieldNumber;
const int ReqEmotion::kTypeFieldNumber;
#endif  // !_MSC_VER

ReqEmotion::ReqEmotion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.ReqEmotion)
}

void ReqEmotion::InitAsDefaultInstance() {
}

ReqEmotion::ReqEmotion(const ReqEmotion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.ReqEmotion)
}

void ReqEmotion::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  target_seatid_ = 0;
  target_seat_num_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqEmotion::~ReqEmotion() {
  // @@protoc_insertion_point(destructor:proto.login.ReqEmotion)
  SharedDtor();
}

void ReqEmotion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqEmotion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEmotion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEmotion_descriptor_;
}

const ReqEmotion& ReqEmotion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

ReqEmotion* ReqEmotion::default_instance_ = NULL;

ReqEmotion* ReqEmotion::New() const {
  return new ReqEmotion;
}

void ReqEmotion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqEmotion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(seatid_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqEmotion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.ReqEmotion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_target_seatid;
        break;
      }

      // optional int32 target_seatid = 2;
      case 2: {
        if (tag == 16) {
         parse_target_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_seatid_)));
          set_has_target_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target_seat_num;
        break;
      }

      // optional int32 target_seat_num = 3;
      case 3: {
        if (tag == 24) {
         parse_target_seat_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_seat_num_)));
          set_has_target_seat_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.ReqEmotion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.ReqEmotion)
  return false;
#undef DO_
}

void ReqEmotion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.ReqEmotion)
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 target_seatid = 2;
  if (has_target_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target_seatid(), output);
  }

  // optional int32 target_seat_num = 3;
  if (has_target_seat_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target_seat_num(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.ReqEmotion)
}

::google::protobuf::uint8* ReqEmotion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.ReqEmotion)
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 target_seatid = 2;
  if (has_target_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->target_seatid(), target);
  }

  // optional int32 target_seat_num = 3;
  if (has_target_seat_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->target_seat_num(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.ReqEmotion)
  return target;
}

int ReqEmotion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 target_seatid = 2;
    if (has_target_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_seatid());
    }

    // optional int32 target_seat_num = 3;
    if (has_target_seat_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_seat_num());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEmotion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqEmotion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqEmotion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqEmotion::MergeFrom(const ReqEmotion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_target_seatid()) {
      set_target_seatid(from.target_seatid());
    }
    if (from.has_target_seat_num()) {
      set_target_seat_num(from.target_seat_num());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqEmotion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEmotion::CopyFrom(const ReqEmotion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEmotion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqEmotion::Swap(ReqEmotion* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(target_seatid_, other->target_seatid_);
    std::swap(target_seat_num_, other->target_seat_num_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqEmotion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEmotion_descriptor_;
  metadata.reflection = ReqEmotion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckLoginSuccessUc::kSeatidFieldNumber;
const int AckLoginSuccessUc::kAvatarFieldNumber;
const int AckLoginSuccessUc::kCoinFieldNumber;
const int AckLoginSuccessUc::kExpFieldNumber;
const int AckLoginSuccessUc::kMoneyFieldNumber;
const int AckLoginSuccessUc::kNameFieldNumber;
const int AckLoginSuccessUc::kReadyFieldNumber;
const int AckLoginSuccessUc::kRmbFieldNumber;
const int AckLoginSuccessUc::kSeeFieldNumber;
const int AckLoginSuccessUc::kSexFieldNumber;
const int AckLoginSuccessUc::kTotalBoardFieldNumber;
const int AckLoginSuccessUc::kTotalWinFieldNumber;
const int AckLoginSuccessUc::kUidFieldNumber;
const int AckLoginSuccessUc::kVlevelFieldNumber;
#endif  // !_MSC_VER

AckLoginSuccessUc::AckLoginSuccessUc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.AckLoginSuccessUc)
}

void AckLoginSuccessUc::InitAsDefaultInstance() {
}

AckLoginSuccessUc::AckLoginSuccessUc(const AckLoginSuccessUc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.AckLoginSuccessUc)
}

void AckLoginSuccessUc::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  seatid_ = 0;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coin_ = 0;
  exp_ = 0;
  money_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ready_ = 0;
  rmb_ = 0;
  see_ = 0;
  sex_ = 0;
  total_board_ = 0;
  total_win_ = 0;
  uid_ = 0;
  vlevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLoginSuccessUc::~AckLoginSuccessUc() {
  // @@protoc_insertion_point(destructor:proto.login.AckLoginSuccessUc)
  SharedDtor();
}

void AckLoginSuccessUc::SharedDtor() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AckLoginSuccessUc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLoginSuccessUc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLoginSuccessUc_descriptor_;
}

const AckLoginSuccessUc& AckLoginSuccessUc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

AckLoginSuccessUc* AckLoginSuccessUc::default_instance_ = NULL;

AckLoginSuccessUc* AckLoginSuccessUc::New() const {
  return new AckLoginSuccessUc;
}

void AckLoginSuccessUc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckLoginSuccessUc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(seatid_, money_);
    ZR_(ready_, rmb_);
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(see_, vlevel_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckLoginSuccessUc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.AckLoginSuccessUc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_avatar;
        break;
      }

      // optional string avatar = 2;
      case 2: {
        if (tag == 18) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_coin;
        break;
      }

      // optional int32 coin = 3;
      case 3: {
        if (tag == 24) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional int32 exp = 4;
      case 4: {
        if (tag == 32) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_money;
        break;
      }

      // optional int32 money = 5;
      case 5: {
        if (tag == 40) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ready;
        break;
      }

      // optional int32 ready = 7;
      case 7: {
        if (tag == 56) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rmb;
        break;
      }

      // optional int32 rmb = 8;
      case 8: {
        if (tag == 64) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_see;
        break;
      }

      // optional int32 see = 9;
      case 9: {
        if (tag == 72) {
         parse_see:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &see_)));
          set_has_see();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_sex;
        break;
      }

      // optional int32 sex = 10;
      case 10: {
        if (tag == 80) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_total_board;
        break;
      }

      // optional int32 total_board = 11;
      case 11: {
        if (tag == 88) {
         parse_total_board:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_board_)));
          set_has_total_board();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_total_win;
        break;
      }

      // optional int32 total_win = 12;
      case 12: {
        if (tag == 96) {
         parse_total_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_win_)));
          set_has_total_win();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_uid;
        break;
      }

      // optional int32 uid = 13;
      case 13: {
        if (tag == 104) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_vlevel;
        break;
      }

      // optional int32 vlevel = 14;
      case 14: {
        if (tag == 112) {
         parse_vlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vlevel_)));
          set_has_vlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.AckLoginSuccessUc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.AckLoginSuccessUc)
  return false;
#undef DO_
}

void AckLoginSuccessUc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.AckLoginSuccessUc)
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional string avatar = 2;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->avatar(), output);
  }

  // optional int32 coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->coin(), output);
  }

  // optional int32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }

  // optional int32 money = 5;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->money(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional int32 ready = 7;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ready(), output);
  }

  // optional int32 rmb = 8;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rmb(), output);
  }

  // optional int32 see = 9;
  if (has_see()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->see(), output);
  }

  // optional int32 sex = 10;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sex(), output);
  }

  // optional int32 total_board = 11;
  if (has_total_board()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->total_board(), output);
  }

  // optional int32 total_win = 12;
  if (has_total_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->total_win(), output);
  }

  // optional int32 uid = 13;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->uid(), output);
  }

  // optional int32 vlevel = 14;
  if (has_vlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->vlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.AckLoginSuccessUc)
}

::google::protobuf::uint8* AckLoginSuccessUc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.AckLoginSuccessUc)
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional string avatar = 2;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->avatar(), target);
  }

  // optional int32 coin = 3;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->coin(), target);
  }

  // optional int32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }

  // optional int32 money = 5;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->money(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional int32 ready = 7;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ready(), target);
  }

  // optional int32 rmb = 8;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rmb(), target);
  }

  // optional int32 see = 9;
  if (has_see()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->see(), target);
  }

  // optional int32 sex = 10;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sex(), target);
  }

  // optional int32 total_board = 11;
  if (has_total_board()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->total_board(), target);
  }

  // optional int32 total_win = 12;
  if (has_total_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->total_win(), target);
  }

  // optional int32 uid = 13;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->uid(), target);
  }

  // optional int32 vlevel = 14;
  if (has_vlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->vlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.AckLoginSuccessUc)
  return target;
}

int AckLoginSuccessUc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional string avatar = 2;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // optional int32 coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

    // optional int32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 money = 5;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 ready = 7;
    if (has_ready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ready());
    }

    // optional int32 rmb = 8;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 see = 9;
    if (has_see()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->see());
    }

    // optional int32 sex = 10;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 total_board = 11;
    if (has_total_board()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_board());
    }

    // optional int32 total_win = 12;
    if (has_total_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_win());
    }

    // optional int32 uid = 13;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 vlevel = 14;
    if (has_vlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLoginSuccessUc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckLoginSuccessUc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckLoginSuccessUc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckLoginSuccessUc::MergeFrom(const AckLoginSuccessUc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_see()) {
      set_see(from.see());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_total_board()) {
      set_total_board(from.total_board());
    }
    if (from.has_total_win()) {
      set_total_win(from.total_win());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_vlevel()) {
      set_vlevel(from.vlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckLoginSuccessUc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLoginSuccessUc::CopyFrom(const AckLoginSuccessUc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLoginSuccessUc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckLoginSuccessUc::Swap(AckLoginSuccessUc* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(avatar_, other->avatar_);
    std::swap(coin_, other->coin_);
    std::swap(exp_, other->exp_);
    std::swap(money_, other->money_);
    std::swap(name_, other->name_);
    std::swap(ready_, other->ready_);
    std::swap(rmb_, other->rmb_);
    std::swap(see_, other->see_);
    std::swap(sex_, other->sex_);
    std::swap(total_board_, other->total_board_);
    std::swap(total_win_, other->total_win_);
    std::swap(uid_, other->uid_);
    std::swap(vlevel_, other->vlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckLoginSuccessUc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLoginSuccessUc_descriptor_;
  metadata.reflection = AckLoginSuccessUc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckLoginSuccessBc::kSeatidFieldNumber;
const int AckLoginSuccessBc::kUidFieldNumber;
const int AckLoginSuccessBc::kMoneyFieldNumber;
const int AckLoginSuccessBc::kNameFieldNumber;
const int AckLoginSuccessBc::kAvatarFieldNumber;
const int AckLoginSuccessBc::kSexFieldNumber;
#endif  // !_MSC_VER

AckLoginSuccessBc::AckLoginSuccessBc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.AckLoginSuccessBc)
}

void AckLoginSuccessBc::InitAsDefaultInstance() {
}

AckLoginSuccessBc::AckLoginSuccessBc(const AckLoginSuccessBc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.AckLoginSuccessBc)
}

void AckLoginSuccessBc::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  seatid_ = 0;
  uid_ = 0;
  money_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLoginSuccessBc::~AckLoginSuccessBc() {
  // @@protoc_insertion_point(destructor:proto.login.AckLoginSuccessBc)
  SharedDtor();
}

void AckLoginSuccessBc::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (this != default_instance_) {
  }
}

void AckLoginSuccessBc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLoginSuccessBc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLoginSuccessBc_descriptor_;
}

const AckLoginSuccessBc& AckLoginSuccessBc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

AckLoginSuccessBc* AckLoginSuccessBc::default_instance_ = NULL;

AckLoginSuccessBc* AckLoginSuccessBc::New() const {
  return new AckLoginSuccessBc;
}

void AckLoginSuccessBc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckLoginSuccessBc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(seatid_, uid_);
    ZR_(money_, sex_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckLoginSuccessBc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.AckLoginSuccessBc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional int32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional int32 money = 3;
      case 3: {
        if (tag == 24) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_avatar;
        break;
      }

      // optional string avatar = 5;
      case 5: {
        if (tag == 42) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional int32 sex = 6;
      case 6: {
        if (tag == 48) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.AckLoginSuccessBc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.AckLoginSuccessBc)
  return false;
#undef DO_
}

void AckLoginSuccessBc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.AckLoginSuccessBc)
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }

  // optional int32 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->money(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->avatar(), output);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.AckLoginSuccessBc)
}

::google::protobuf::uint8* AckLoginSuccessBc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.AckLoginSuccessBc)
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uid(), target);
  }

  // optional int32 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->money(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->avatar(), target);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.AckLoginSuccessBc)
  return target;
}

int AckLoginSuccessBc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string avatar = 5;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // optional int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLoginSuccessBc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckLoginSuccessBc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckLoginSuccessBc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckLoginSuccessBc::MergeFrom(const AckLoginSuccessBc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckLoginSuccessBc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLoginSuccessBc::CopyFrom(const AckLoginSuccessBc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLoginSuccessBc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckLoginSuccessBc::Swap(AckLoginSuccessBc* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(uid_, other->uid_);
    std::swap(money_, other->money_);
    std::swap(name_, other->name_);
    std::swap(avatar_, other->avatar_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckLoginSuccessBc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLoginSuccessBc_descriptor_;
  metadata.reflection = AckLoginSuccessBc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckLoginError::kUidFieldNumber;
const int AckLoginError::kCodeFieldNumber;
#endif  // !_MSC_VER

AckLoginError::AckLoginError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.AckLoginError)
}

void AckLoginError::InitAsDefaultInstance() {
}

AckLoginError::AckLoginError(const AckLoginError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.AckLoginError)
}

void AckLoginError::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLoginError::~AckLoginError() {
  // @@protoc_insertion_point(destructor:proto.login.AckLoginError)
  SharedDtor();
}

void AckLoginError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckLoginError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLoginError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLoginError_descriptor_;
}

const AckLoginError& AckLoginError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

AckLoginError* AckLoginError::default_instance_ = NULL;

AckLoginError* AckLoginError::New() const {
  return new AckLoginError;
}

void AckLoginError::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckLoginError*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, code_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckLoginError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.AckLoginError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional int32 code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.AckLoginError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.AckLoginError)
  return false;
#undef DO_
}

void AckLoginError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.AckLoginError)
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.AckLoginError)
}

::google::protobuf::uint8* AckLoginError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.AckLoginError)
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.AckLoginError)
  return target;
}

int AckLoginError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLoginError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckLoginError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckLoginError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckLoginError::MergeFrom(const AckLoginError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckLoginError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLoginError::CopyFrom(const AckLoginError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLoginError::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckLoginError::Swap(AckLoginError* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckLoginError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLoginError_descriptor_;
  metadata.reflection = AckLoginError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGPS::kUidFieldNumber;
const int AckGPS::kLatitudeFieldNumber;
const int AckGPS::kLongitudeFieldNumber;
const int AckGPS::kCityFieldNumber;
#endif  // !_MSC_VER

AckGPS::AckGPS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.AckGPS)
}

void AckGPS::InitAsDefaultInstance() {
}

AckGPS::AckGPS(const AckGPS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.AckGPS)
}

void AckGPS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGPS::~AckGPS() {
  // @@protoc_insertion_point(destructor:proto.login.AckGPS)
  SharedDtor();
}

void AckGPS::SharedDtor() {
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (this != default_instance_) {
  }
}

void AckGPS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGPS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGPS_descriptor_;
}

const AckGPS& AckGPS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

AckGPS* AckGPS::default_instance_ = NULL;

AckGPS* AckGPS::New() const {
  return new AckGPS;
}

void AckGPS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckGPS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(latitude_, longitude_);
    uid_ = 0;
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGPS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.AckGPS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_latitude;
        break;
      }

      // optional double latitude = 2;
      case 2: {
        if (tag == 17) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_longitude;
        break;
      }

      // optional double longitude = 3;
      case 3: {
        if (tag == 25) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_city;
        break;
      }

      // optional string city = 4;
      case 4: {
        if (tag == 34) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.AckGPS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.AckGPS)
  return false;
#undef DO_
}

void AckGPS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.AckGPS)
  // optional int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional double latitude = 2;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // optional double longitude = 3;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
  }

  // optional string city = 4;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->city(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.AckGPS)
}

::google::protobuf::uint8* AckGPS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.AckGPS)
  // optional int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional double latitude = 2;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // optional double longitude = 3;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitude(), target);
  }

  // optional string city = 4;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->city(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.AckGPS)
  return target;
}

int AckGPS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional double latitude = 2;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 3;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional string city = 4;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGPS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGPS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGPS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGPS::MergeFrom(const AckGPS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGPS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGPS::CopyFrom(const AckGPS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGPS::IsInitialized() const {

  return true;
}

void AckGPS::Swap(AckGPS* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(city_, other->city_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGPS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGPS_descriptor_;
  metadata.reflection = AckGPS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagPlayers::kUidFieldNumber;
const int tagPlayers::kSeatidFieldNumber;
const int tagPlayers::kReadyFieldNumber;
const int tagPlayers::kMoneyFieldNumber;
const int tagPlayers::kNameFieldNumber;
const int tagPlayers::kSexFieldNumber;
const int tagPlayers::kAvatarFieldNumber;
const int tagPlayers::kGPSFieldNumber;
#endif  // !_MSC_VER

tagPlayers::tagPlayers()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.tagPlayers)
}

void tagPlayers::InitAsDefaultInstance() {
  gps_ = const_cast< ::proto::login::AckGPS*>(&::proto::login::AckGPS::default_instance());
}

tagPlayers::tagPlayers(const tagPlayers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.tagPlayers)
}

void tagPlayers::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0;
  seatid_ = 0;
  ready_ = 0;
  money_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gps_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagPlayers::~tagPlayers() {
  // @@protoc_insertion_point(destructor:proto.login.tagPlayers)
  SharedDtor();
}

void tagPlayers::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (this != default_instance_) {
    delete gps_;
  }
}

void tagPlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPlayers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagPlayers_descriptor_;
}

const tagPlayers& tagPlayers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

tagPlayers* tagPlayers::default_instance_ = NULL;

tagPlayers* tagPlayers::New() const {
  return new tagPlayers;
}

void tagPlayers::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<tagPlayers*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, money_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    sex_ = 0;
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_gps()) {
      if (gps_ != NULL) gps_->::proto::login::AckGPS::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagPlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.tagPlayers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 2;
      case 2: {
        if (tag == 16) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ready;
        break;
      }

      // optional int32 ready = 3;
      case 3: {
        if (tag == 24) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // optional int32 money = 4;
      case 4: {
        if (tag == 32) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional int32 sex = 6;
      case 6: {
        if (tag == 48) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_avatar;
        break;
      }

      // optional string avatar = 7;
      case 7: {
        if (tag == 58) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_GPS;
        break;
      }

      // optional .proto.login.AckGPS GPS = 8;
      case 8: {
        if (tag == 66) {
         parse_GPS:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.tagPlayers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.tagPlayers)
  return false;
#undef DO_
}

void tagPlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.tagPlayers)
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // optional int32 ready = 3;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ready(), output);
  }

  // optional int32 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->money(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }

  // optional string avatar = 7;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->avatar(), output);
  }

  // optional .proto.login.AckGPS GPS = 8;
  if (has_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->gps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.tagPlayers)
}

::google::protobuf::uint8* tagPlayers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.tagPlayers)
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // optional int32 ready = 3;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ready(), target);
  }

  // optional int32 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->money(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }

  // optional string avatar = 7;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->avatar(), target);
  }

  // optional .proto.login.AckGPS GPS = 8;
  if (has_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->gps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.tagPlayers)
  return target;
}

int tagPlayers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 ready = 3;
    if (has_ready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ready());
    }

    // optional int32 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional string avatar = 7;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // optional .proto.login.AckGPS GPS = 8;
    if (has_gps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gps());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPlayers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagPlayers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagPlayers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagPlayers::MergeFrom(const tagPlayers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_gps()) {
      mutable_gps()->::proto::login::AckGPS::MergeFrom(from.gps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagPlayers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPlayers::CopyFrom(const tagPlayers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPlayers::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagPlayers::Swap(tagPlayers* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(ready_, other->ready_);
    std::swap(money_, other->money_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(avatar_, other->avatar_);
    std::swap(gps_, other->gps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagPlayers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagPlayers_descriptor_;
  metadata.reflection = tagPlayers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckTableInfo::kSeatidFieldNumber;
const int AckTableInfo::kStateFieldNumber;
const int AckTableInfo::kStandMoneyFieldNumber;
const int AckTableInfo::kBaseMoneyFieldNumber;
const int AckTableInfo::kPlayersFieldNumber;
const int AckTableInfo::kRoomGoldenFieldNumber;
const int AckTableInfo::kCardPoolNumsFieldNumber;
const int AckTableInfo::kTouZiInfoFieldNumber;
const int AckTableInfo::kGCrdFrmLstNumFieldNumber;
const int AckTableInfo::kGamePlayerFieldNumber;
const int AckTableInfo::kIsClubRoomFieldNumber;
#endif  // !_MSC_VER

AckTableInfo::AckTableInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.AckTableInfo)
}

void AckTableInfo::InitAsDefaultInstance() {
}

AckTableInfo::AckTableInfo(const AckTableInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.AckTableInfo)
}

void AckTableInfo::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  state_ = 0;
  stand_money_ = 0;
  base_money_ = 0;
  roomgolden_ = 0;
  cardpoolnums_ = 0;
  gcrdfrmlstnum_ = 0;
  game_player_ = 0;
  isclubroom_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckTableInfo::~AckTableInfo() {
  // @@protoc_insertion_point(destructor:proto.login.AckTableInfo)
  SharedDtor();
}

void AckTableInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckTableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckTableInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckTableInfo_descriptor_;
}

const AckTableInfo& AckTableInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

AckTableInfo* AckTableInfo::default_instance_ = NULL;

AckTableInfo* AckTableInfo::New() const {
  return new AckTableInfo;
}

void AckTableInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckTableInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(seatid_, base_money_);
    ZR_(roomgolden_, cardpoolnums_);
  }
  ZR_(gcrdfrmlstnum_, isclubroom_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  players_.Clear();
  touziinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckTableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.AckTableInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stand_money;
        break;
      }

      // optional int32 stand_money = 3;
      case 3: {
        if (tag == 24) {
         parse_stand_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stand_money_)));
          set_has_stand_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_base_money;
        break;
      }

      // optional int32 base_money = 4;
      case 4: {
        if (tag == 32) {
         parse_base_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_money_)));
          set_has_base_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_players;
        break;
      }

      // repeated .proto.login.tagPlayers players = 5;
      case 5: {
        if (tag == 42) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_players;
        if (input->ExpectTag(48)) goto parse_roomGolden;
        break;
      }

      // optional int32 roomGolden = 6;
      case 6: {
        if (tag == 48) {
         parse_roomGolden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomgolden_)));
          set_has_roomgolden();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cardPoolNums;
        break;
      }

      // optional int32 cardPoolNums = 7;
      case 7: {
        if (tag == 56) {
         parse_cardPoolNums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardpoolnums_)));
          set_has_cardpoolnums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_TouZiInfo;
        break;
      }

      // repeated int32 TouZiInfo = 8;
      case 8: {
        if (tag == 64) {
         parse_TouZiInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_touziinfo())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_touziinfo())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_TouZiInfo;
        if (input->ExpectTag(72)) goto parse_GCrdFrmLstNum;
        break;
      }

      // optional int32 GCrdFrmLstNum = 9;
      case 9: {
        if (tag == 72) {
         parse_GCrdFrmLstNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gcrdfrmlstnum_)));
          set_has_gcrdfrmlstnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_game_player;
        break;
      }

      // optional int32 game_player = 10;
      case 10: {
        if (tag == 80) {
         parse_game_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_player_)));
          set_has_game_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_isClubRoom;
        break;
      }

      // optional int32 isClubRoom = 11;
      case 11: {
        if (tag == 88) {
         parse_isClubRoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isclubroom_)));
          set_has_isclubroom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.AckTableInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.AckTableInfo)
  return false;
#undef DO_
}

void AckTableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.AckTableInfo)
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int32 stand_money = 3;
  if (has_stand_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stand_money(), output);
  }

  // optional int32 base_money = 4;
  if (has_base_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->base_money(), output);
  }

  // repeated .proto.login.tagPlayers players = 5;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->players(i), output);
  }

  // optional int32 roomGolden = 6;
  if (has_roomgolden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->roomgolden(), output);
  }

  // optional int32 cardPoolNums = 7;
  if (has_cardpoolnums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cardpoolnums(), output);
  }

  // repeated int32 TouZiInfo = 8;
  for (int i = 0; i < this->touziinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->touziinfo(i), output);
  }

  // optional int32 GCrdFrmLstNum = 9;
  if (has_gcrdfrmlstnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gcrdfrmlstnum(), output);
  }

  // optional int32 game_player = 10;
  if (has_game_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->game_player(), output);
  }

  // optional int32 isClubRoom = 11;
  if (has_isclubroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->isclubroom(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.AckTableInfo)
}

::google::protobuf::uint8* AckTableInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.AckTableInfo)
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int32 stand_money = 3;
  if (has_stand_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stand_money(), target);
  }

  // optional int32 base_money = 4;
  if (has_base_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->base_money(), target);
  }

  // repeated .proto.login.tagPlayers players = 5;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->players(i), target);
  }

  // optional int32 roomGolden = 6;
  if (has_roomgolden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->roomgolden(), target);
  }

  // optional int32 cardPoolNums = 7;
  if (has_cardpoolnums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cardpoolnums(), target);
  }

  // repeated int32 TouZiInfo = 8;
  for (int i = 0; i < this->touziinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->touziinfo(i), target);
  }

  // optional int32 GCrdFrmLstNum = 9;
  if (has_gcrdfrmlstnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gcrdfrmlstnum(), target);
  }

  // optional int32 game_player = 10;
  if (has_game_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->game_player(), target);
  }

  // optional int32 isClubRoom = 11;
  if (has_isclubroom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->isclubroom(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.AckTableInfo)
  return target;
}

int AckTableInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 stand_money = 3;
    if (has_stand_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stand_money());
    }

    // optional int32 base_money = 4;
    if (has_base_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_money());
    }

    // optional int32 roomGolden = 6;
    if (has_roomgolden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomgolden());
    }

    // optional int32 cardPoolNums = 7;
    if (has_cardpoolnums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardpoolnums());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 GCrdFrmLstNum = 9;
    if (has_gcrdfrmlstnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gcrdfrmlstnum());
    }

    // optional int32 game_player = 10;
    if (has_game_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_player());
    }

    // optional int32 isClubRoom = 11;
    if (has_isclubroom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isclubroom());
    }

  }
  // repeated .proto.login.tagPlayers players = 5;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  // repeated int32 TouZiInfo = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->touziinfo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->touziinfo(i));
    }
    total_size += 1 * this->touziinfo_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckTableInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckTableInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckTableInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckTableInfo::MergeFrom(const AckTableInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  touziinfo_.MergeFrom(from.touziinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_stand_money()) {
      set_stand_money(from.stand_money());
    }
    if (from.has_base_money()) {
      set_base_money(from.base_money());
    }
    if (from.has_roomgolden()) {
      set_roomgolden(from.roomgolden());
    }
    if (from.has_cardpoolnums()) {
      set_cardpoolnums(from.cardpoolnums());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gcrdfrmlstnum()) {
      set_gcrdfrmlstnum(from.gcrdfrmlstnum());
    }
    if (from.has_game_player()) {
      set_game_player(from.game_player());
    }
    if (from.has_isclubroom()) {
      set_isclubroom(from.isclubroom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckTableInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckTableInfo::CopyFrom(const AckTableInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckTableInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->players())) return false;
  return true;
}

void AckTableInfo::Swap(AckTableInfo* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(state_, other->state_);
    std::swap(stand_money_, other->stand_money_);
    std::swap(base_money_, other->base_money_);
    players_.Swap(&other->players_);
    std::swap(roomgolden_, other->roomgolden_);
    std::swap(cardpoolnums_, other->cardpoolnums_);
    touziinfo_.Swap(&other->touziinfo_);
    std::swap(gcrdfrmlstnum_, other->gcrdfrmlstnum_);
    std::swap(game_player_, other->game_player_);
    std::swap(isclubroom_, other->isclubroom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckTableInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckTableInfo_descriptor_;
  metadata.reflection = AckTableInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckLogoutBc::kSeatidFieldNumber;
const int AckLogoutBc::kUidFieldNumber;
const int AckLogoutBc::kTypeFieldNumber;
#endif  // !_MSC_VER

AckLogoutBc::AckLogoutBc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.AckLogoutBc)
}

void AckLogoutBc::InitAsDefaultInstance() {
}

AckLogoutBc::AckLogoutBc(const AckLogoutBc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.AckLogoutBc)
}

void AckLogoutBc::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  uid_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLogoutBc::~AckLogoutBc() {
  // @@protoc_insertion_point(destructor:proto.login.AckLogoutBc)
  SharedDtor();
}

void AckLogoutBc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckLogoutBc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLogoutBc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLogoutBc_descriptor_;
}

const AckLogoutBc& AckLogoutBc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

AckLogoutBc* AckLogoutBc::default_instance_ = NULL;

AckLogoutBc* AckLogoutBc::New() const {
  return new AckLogoutBc;
}

void AckLogoutBc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckLogoutBc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(seatid_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckLogoutBc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.AckLogoutBc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional int32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.AckLogoutBc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.AckLogoutBc)
  return false;
#undef DO_
}

void AckLogoutBc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.AckLogoutBc)
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.AckLogoutBc)
}

::google::protobuf::uint8* AckLogoutBc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.AckLogoutBc)
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uid(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.AckLogoutBc)
  return target;
}

int AckLogoutBc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLogoutBc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckLogoutBc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckLogoutBc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckLogoutBc::MergeFrom(const AckLogoutBc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckLogoutBc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLogoutBc::CopyFrom(const AckLogoutBc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLogoutBc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckLogoutBc::Swap(AckLogoutBc* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(uid_, other->uid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckLogoutBc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLogoutBc_descriptor_;
  metadata.reflection = AckLogoutBc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpTableSuccess::kUidFieldNumber;
const int AckUpTableSuccess::kSeatidFieldNumber;
const int AckUpTableSuccess::kReadyFieldNumber;
const int AckUpTableSuccess::kNameFieldNumber;
const int AckUpTableSuccess::kSexFieldNumber;
const int AckUpTableSuccess::kAvatarFieldNumber;
const int AckUpTableSuccess::kMoneyFieldNumber;
const int AckUpTableSuccess::kCoinFieldNumber;
const int AckUpTableSuccess::kExpFieldNumber;
const int AckUpTableSuccess::kPcountFieldNumber;
const int AckUpTableSuccess::kVlevelFieldNumber;
const int AckUpTableSuccess::kPsFieldNumber;
#endif  // !_MSC_VER

AckUpTableSuccess::AckUpTableSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.AckUpTableSuccess)
}

void AckUpTableSuccess::InitAsDefaultInstance() {
}

AckUpTableSuccess::AckUpTableSuccess(const AckUpTableSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.AckUpTableSuccess)
}

void AckUpTableSuccess::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0;
  seatid_ = 0;
  ready_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  money_ = 0;
  coin_ = 0;
  exp_ = 0;
  pcount_ = 0;
  vlevel_ = 0;
  ps_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpTableSuccess::~AckUpTableSuccess() {
  // @@protoc_insertion_point(destructor:proto.login.AckUpTableSuccess)
  SharedDtor();
}

void AckUpTableSuccess::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (ps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ps_;
  }
  if (this != default_instance_) {
  }
}

void AckUpTableSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpTableSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpTableSuccess_descriptor_;
}

const AckUpTableSuccess& AckUpTableSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

AckUpTableSuccess* AckUpTableSuccess::default_instance_ = NULL;

AckUpTableSuccess* AckUpTableSuccess::New() const {
  return new AckUpTableSuccess;
}

void AckUpTableSuccess::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckUpTableSuccess*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, seatid_);
    ZR_(ready_, sex_);
    ZR_(money_, coin_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(exp_, pcount_);
    vlevel_ = 0;
    if (has_ps()) {
      if (ps_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ps_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpTableSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.AckUpTableSuccess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 2;
      case 2: {
        if (tag == 16) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ready;
        break;
      }

      // optional int32 ready = 3;
      case 3: {
        if (tag == 24) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional int32 sex = 5;
      case 5: {
        if (tag == 40) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_avatar;
        break;
      }

      // optional string avatar = 6;
      case 6: {
        if (tag == 50) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_money;
        break;
      }

      // optional int32 money = 7;
      case 7: {
        if (tag == 56) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_coin;
        break;
      }

      // optional int32 coin = 8;
      case 8: {
        if (tag == 64) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_exp;
        break;
      }

      // optional int32 exp = 9;
      case 9: {
        if (tag == 72) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_pcount;
        break;
      }

      // optional int32 pcount = 10;
      case 10: {
        if (tag == 80) {
         parse_pcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pcount_)));
          set_has_pcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_vlevel;
        break;
      }

      // optional int32 vlevel = 11;
      case 11: {
        if (tag == 88) {
         parse_vlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vlevel_)));
          set_has_vlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ps;
        break;
      }

      // optional string ps = 12;
      case 12: {
        if (tag == 98) {
         parse_ps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ps()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ps().data(), this->ps().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ps");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.AckUpTableSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.AckUpTableSuccess)
  return false;
#undef DO_
}

void AckUpTableSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.AckUpTableSuccess)
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // optional int32 ready = 3;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ready(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // optional string avatar = 6;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->avatar(), output);
  }

  // optional int32 money = 7;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->money(), output);
  }

  // optional int32 coin = 8;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->coin(), output);
  }

  // optional int32 exp = 9;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->exp(), output);
  }

  // optional int32 pcount = 10;
  if (has_pcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pcount(), output);
  }

  // optional int32 vlevel = 11;
  if (has_vlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->vlevel(), output);
  }

  // optional string ps = 12;
  if (has_ps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ps().data(), this->ps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ps");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->ps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.AckUpTableSuccess)
}

::google::protobuf::uint8* AckUpTableSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.AckUpTableSuccess)
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // optional int32 ready = 3;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ready(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // optional string avatar = 6;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->avatar(), target);
  }

  // optional int32 money = 7;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->money(), target);
  }

  // optional int32 coin = 8;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->coin(), target);
  }

  // optional int32 exp = 9;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->exp(), target);
  }

  // optional int32 pcount = 10;
  if (has_pcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pcount(), target);
  }

  // optional int32 vlevel = 11;
  if (has_vlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->vlevel(), target);
  }

  // optional string ps = 12;
  if (has_ps()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ps().data(), this->ps().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ps");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->ps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.AckUpTableSuccess)
  return target;
}

int AckUpTableSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 ready = 3;
    if (has_ready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ready());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional string avatar = 6;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // optional int32 money = 7;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 coin = 8;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 exp = 9;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 pcount = 10;
    if (has_pcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pcount());
    }

    // optional int32 vlevel = 11;
    if (has_vlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vlevel());
    }

    // optional string ps = 12;
    if (has_ps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ps());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpTableSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpTableSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpTableSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpTableSuccess::MergeFrom(const AckUpTableSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_pcount()) {
      set_pcount(from.pcount());
    }
    if (from.has_vlevel()) {
      set_vlevel(from.vlevel());
    }
    if (from.has_ps()) {
      set_ps(from.ps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpTableSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpTableSuccess::CopyFrom(const AckUpTableSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpTableSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckUpTableSuccess::Swap(AckUpTableSuccess* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(ready_, other->ready_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(avatar_, other->avatar_);
    std::swap(money_, other->money_);
    std::swap(coin_, other->coin_);
    std::swap(exp_, other->exp_);
    std::swap(pcount_, other->pcount_);
    std::swap(vlevel_, other->vlevel_);
    std::swap(ps_, other->ps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpTableSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpTableSuccess_descriptor_;
  metadata.reflection = AckUpTableSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpTableErrorUc::kUidFieldNumber;
const int AckUpTableErrorUc::kMoneyFieldNumber;
const int AckUpTableErrorUc::kCodeFieldNumber;
#endif  // !_MSC_VER

AckUpTableErrorUc::AckUpTableErrorUc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.AckUpTableErrorUc)
}

void AckUpTableErrorUc::InitAsDefaultInstance() {
}

AckUpTableErrorUc::AckUpTableErrorUc(const AckUpTableErrorUc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.AckUpTableErrorUc)
}

void AckUpTableErrorUc::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  money_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpTableErrorUc::~AckUpTableErrorUc() {
  // @@protoc_insertion_point(destructor:proto.login.AckUpTableErrorUc)
  SharedDtor();
}

void AckUpTableErrorUc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUpTableErrorUc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpTableErrorUc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpTableErrorUc_descriptor_;
}

const AckUpTableErrorUc& AckUpTableErrorUc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

AckUpTableErrorUc* AckUpTableErrorUc::default_instance_ = NULL;

AckUpTableErrorUc* AckUpTableErrorUc::New() const {
  return new AckUpTableErrorUc;
}

void AckUpTableErrorUc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckUpTableErrorUc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, code_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpTableErrorUc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.AckUpTableErrorUc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional int32 money = 2;
      case 2: {
        if (tag == 16) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }

      // optional int32 code = 3;
      case 3: {
        if (tag == 24) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.AckUpTableErrorUc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.AckUpTableErrorUc)
  return false;
#undef DO_
}

void AckUpTableErrorUc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.AckUpTableErrorUc)
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }

  // optional int32 code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.AckUpTableErrorUc)
}

::google::protobuf::uint8* AckUpTableErrorUc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.AckUpTableErrorUc)
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money(), target);
  }

  // optional int32 code = 3;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.AckUpTableErrorUc)
  return target;
}

int AckUpTableErrorUc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpTableErrorUc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpTableErrorUc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpTableErrorUc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpTableErrorUc::MergeFrom(const AckUpTableErrorUc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpTableErrorUc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpTableErrorUc::CopyFrom(const AckUpTableErrorUc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpTableErrorUc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckUpTableErrorUc::Swap(AckUpTableErrorUc* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(money_, other->money_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpTableErrorUc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpTableErrorUc_descriptor_;
  metadata.reflection = AckUpTableErrorUc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckAheadDownTable::kUidFieldNumber;
const int AckAheadDownTable::kSeatidFieldNumber;
const int AckAheadDownTable::kDownTagFieldNumber;
#endif  // !_MSC_VER

AckAheadDownTable::AckAheadDownTable()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.AckAheadDownTable)
}

void AckAheadDownTable::InitAsDefaultInstance() {
}

AckAheadDownTable::AckAheadDownTable(const AckAheadDownTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.AckAheadDownTable)
}

void AckAheadDownTable::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  seatid_ = 0;
  down_tag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckAheadDownTable::~AckAheadDownTable() {
  // @@protoc_insertion_point(destructor:proto.login.AckAheadDownTable)
  SharedDtor();
}

void AckAheadDownTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckAheadDownTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckAheadDownTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckAheadDownTable_descriptor_;
}

const AckAheadDownTable& AckAheadDownTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

AckAheadDownTable* AckAheadDownTable::default_instance_ = NULL;

AckAheadDownTable* AckAheadDownTable::New() const {
  return new AckAheadDownTable;
}

void AckAheadDownTable::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckAheadDownTable*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, down_tag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckAheadDownTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.AckAheadDownTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 2;
      case 2: {
        if (tag == 16) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_down_tag;
        break;
      }

      // optional int32 down_tag = 3;
      case 3: {
        if (tag == 24) {
         parse_down_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &down_tag_)));
          set_has_down_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.AckAheadDownTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.AckAheadDownTable)
  return false;
#undef DO_
}

void AckAheadDownTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.AckAheadDownTable)
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // optional int32 down_tag = 3;
  if (has_down_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->down_tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.AckAheadDownTable)
}

::google::protobuf::uint8* AckAheadDownTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.AckAheadDownTable)
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // optional int32 down_tag = 3;
  if (has_down_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->down_tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.AckAheadDownTable)
  return target;
}

int AckAheadDownTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 down_tag = 3;
    if (has_down_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->down_tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckAheadDownTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckAheadDownTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckAheadDownTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckAheadDownTable::MergeFrom(const AckAheadDownTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_down_tag()) {
      set_down_tag(from.down_tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckAheadDownTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckAheadDownTable::CopyFrom(const AckAheadDownTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckAheadDownTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckAheadDownTable::Swap(AckAheadDownTable* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(down_tag_, other->down_tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckAheadDownTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckAheadDownTable_descriptor_;
  metadata.reflection = AckAheadDownTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckDownTableSuccess::kUidFieldNumber;
const int AckDownTableSuccess::kSeatidFieldNumber;
const int AckDownTableSuccess::kMoneyFieldNumber;
#endif  // !_MSC_VER

AckDownTableSuccess::AckDownTableSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.AckDownTableSuccess)
}

void AckDownTableSuccess::InitAsDefaultInstance() {
}

AckDownTableSuccess::AckDownTableSuccess(const AckDownTableSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.AckDownTableSuccess)
}

void AckDownTableSuccess::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  seatid_ = 0;
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckDownTableSuccess::~AckDownTableSuccess() {
  // @@protoc_insertion_point(destructor:proto.login.AckDownTableSuccess)
  SharedDtor();
}

void AckDownTableSuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckDownTableSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDownTableSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckDownTableSuccess_descriptor_;
}

const AckDownTableSuccess& AckDownTableSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

AckDownTableSuccess* AckDownTableSuccess::default_instance_ = NULL;

AckDownTableSuccess* AckDownTableSuccess::New() const {
  return new AckDownTableSuccess;
}

void AckDownTableSuccess::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckDownTableSuccess*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, money_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckDownTableSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.AckDownTableSuccess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 2;
      case 2: {
        if (tag == 16) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional int32 money = 3;
      case 3: {
        if (tag == 24) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.AckDownTableSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.AckDownTableSuccess)
  return false;
#undef DO_
}

void AckDownTableSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.AckDownTableSuccess)
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // optional int32 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.AckDownTableSuccess)
}

::google::protobuf::uint8* AckDownTableSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.AckDownTableSuccess)
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // optional int32 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.AckDownTableSuccess)
  return target;
}

int AckDownTableSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDownTableSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckDownTableSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckDownTableSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckDownTableSuccess::MergeFrom(const AckDownTableSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckDownTableSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDownTableSuccess::CopyFrom(const AckDownTableSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDownTableSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckDownTableSuccess::Swap(AckDownTableSuccess* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckDownTableSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckDownTableSuccess_descriptor_;
  metadata.reflection = AckDownTableSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpTableInfoReq::kStartIndexFieldNumber;
const int AckUpTableInfoReq::kEndIndexFieldNumber;
#endif  // !_MSC_VER

AckUpTableInfoReq::AckUpTableInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.AckUpTableInfoReq)
}

void AckUpTableInfoReq::InitAsDefaultInstance() {
}

AckUpTableInfoReq::AckUpTableInfoReq(const AckUpTableInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.AckUpTableInfoReq)
}

void AckUpTableInfoReq::SharedCtor() {
  _cached_size_ = 0;
  start_index_ = 0;
  end_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpTableInfoReq::~AckUpTableInfoReq() {
  // @@protoc_insertion_point(destructor:proto.login.AckUpTableInfoReq)
  SharedDtor();
}

void AckUpTableInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUpTableInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpTableInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpTableInfoReq_descriptor_;
}

const AckUpTableInfoReq& AckUpTableInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

AckUpTableInfoReq* AckUpTableInfoReq::default_instance_ = NULL;

AckUpTableInfoReq* AckUpTableInfoReq::New() const {
  return new AckUpTableInfoReq;
}

void AckUpTableInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckUpTableInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(start_index_, end_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpTableInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.AckUpTableInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 start_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_index;
        break;
      }

      // optional int32 end_index = 2;
      case 2: {
        if (tag == 16) {
         parse_end_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_index_)));
          set_has_end_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.AckUpTableInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.AckUpTableInfoReq)
  return false;
#undef DO_
}

void AckUpTableInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.AckUpTableInfoReq)
  // required int32 start_index = 1;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->start_index(), output);
  }

  // optional int32 end_index = 2;
  if (has_end_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.AckUpTableInfoReq)
}

::google::protobuf::uint8* AckUpTableInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.AckUpTableInfoReq)
  // required int32 start_index = 1;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->start_index(), target);
  }

  // optional int32 end_index = 2;
  if (has_end_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.AckUpTableInfoReq)
  return target;
}

int AckUpTableInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 start_index = 1;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_index());
    }

    // optional int32 end_index = 2;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpTableInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpTableInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpTableInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpTableInfoReq::MergeFrom(const AckUpTableInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_end_index()) {
      set_end_index(from.end_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpTableInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpTableInfoReq::CopyFrom(const AckUpTableInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpTableInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckUpTableInfoReq::Swap(AckUpTableInfoReq* other) {
  if (other != this) {
    std::swap(start_index_, other->start_index_);
    std::swap(end_index_, other->end_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpTableInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpTableInfoReq_descriptor_;
  metadata.reflection = AckUpTableInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpTableInfo_UC::kPlayersFieldNumber;
const int AckUpTableInfo_UC::kRankFieldNumber;
const int AckUpTableInfo_UC::kNumberFieldNumber;
const int AckUpTableInfo_UC::kDownTagFieldNumber;
const int AckUpTableInfo_UC::kLimitMoneyFieldNumber;
const int AckUpTableInfo_UC::kStandMoneyFieldNumber;
const int AckUpTableInfo_UC::kBaseMoneyFieldNumber;
const int AckUpTableInfo_UC::kLeftLenFieldNumber;
#endif  // !_MSC_VER

AckUpTableInfo_UC::AckUpTableInfo_UC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.AckUpTableInfo_UC)
}

void AckUpTableInfo_UC::InitAsDefaultInstance() {
}

AckUpTableInfo_UC::AckUpTableInfo_UC(const AckUpTableInfo_UC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.AckUpTableInfo_UC)
}

void AckUpTableInfo_UC::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  number_ = 0;
  down_tag_ = 0;
  limit_money_ = 0;
  stand_money_ = 0;
  base_money_ = 0;
  left_len_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpTableInfo_UC::~AckUpTableInfo_UC() {
  // @@protoc_insertion_point(destructor:proto.login.AckUpTableInfo_UC)
  SharedDtor();
}

void AckUpTableInfo_UC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUpTableInfo_UC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpTableInfo_UC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpTableInfo_UC_descriptor_;
}

const AckUpTableInfo_UC& AckUpTableInfo_UC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

AckUpTableInfo_UC* AckUpTableInfo_UC::default_instance_ = NULL;

AckUpTableInfo_UC* AckUpTableInfo_UC::New() const {
  return new AckUpTableInfo_UC;
}

void AckUpTableInfo_UC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckUpTableInfo_UC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 254) {
    ZR_(rank_, left_len_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpTableInfo_UC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.AckUpTableInfo_UC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.login.tagPlayers players = 1;
      case 1: {
        if (tag == 10) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional int32 rank = 2;
      case 2: {
        if (tag == 16) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }

      // optional int32 number = 3;
      case 3: {
        if (tag == 24) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_down_tag;
        break;
      }

      // optional int32 down_tag = 4;
      case 4: {
        if (tag == 32) {
         parse_down_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &down_tag_)));
          set_has_down_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_limit_money;
        break;
      }

      // optional int32 limit_money = 5;
      case 5: {
        if (tag == 40) {
         parse_limit_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_money_)));
          set_has_limit_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stand_money;
        break;
      }

      // optional int32 stand_money = 6;
      case 6: {
        if (tag == 48) {
         parse_stand_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stand_money_)));
          set_has_stand_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_base_money;
        break;
      }

      // optional int32 base_money = 7;
      case 7: {
        if (tag == 56) {
         parse_base_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_money_)));
          set_has_base_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_left_len;
        break;
      }

      // optional int32 left_len = 8;
      case 8: {
        if (tag == 64) {
         parse_left_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_len_)));
          set_has_left_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.AckUpTableInfo_UC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.AckUpTableInfo_UC)
  return false;
#undef DO_
}

void AckUpTableInfo_UC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.AckUpTableInfo_UC)
  // repeated .proto.login.tagPlayers players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // optional int32 number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->number(), output);
  }

  // optional int32 down_tag = 4;
  if (has_down_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->down_tag(), output);
  }

  // optional int32 limit_money = 5;
  if (has_limit_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->limit_money(), output);
  }

  // optional int32 stand_money = 6;
  if (has_stand_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->stand_money(), output);
  }

  // optional int32 base_money = 7;
  if (has_base_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->base_money(), output);
  }

  // optional int32 left_len = 8;
  if (has_left_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->left_len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.AckUpTableInfo_UC)
}

::google::protobuf::uint8* AckUpTableInfo_UC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.AckUpTableInfo_UC)
  // repeated .proto.login.tagPlayers players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // optional int32 number = 3;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->number(), target);
  }

  // optional int32 down_tag = 4;
  if (has_down_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->down_tag(), target);
  }

  // optional int32 limit_money = 5;
  if (has_limit_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->limit_money(), target);
  }

  // optional int32 stand_money = 6;
  if (has_stand_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->stand_money(), target);
  }

  // optional int32 base_money = 7;
  if (has_base_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->base_money(), target);
  }

  // optional int32 left_len = 8;
  if (has_left_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->left_len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.AckUpTableInfo_UC)
  return target;
}

int AckUpTableInfo_UC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // optional int32 down_tag = 4;
    if (has_down_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->down_tag());
    }

    // optional int32 limit_money = 5;
    if (has_limit_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_money());
    }

    // optional int32 stand_money = 6;
    if (has_stand_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stand_money());
    }

    // optional int32 base_money = 7;
    if (has_base_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_money());
    }

    // optional int32 left_len = 8;
    if (has_left_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_len());
    }

  }
  // repeated .proto.login.tagPlayers players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpTableInfo_UC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpTableInfo_UC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpTableInfo_UC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpTableInfo_UC::MergeFrom(const AckUpTableInfo_UC& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_down_tag()) {
      set_down_tag(from.down_tag());
    }
    if (from.has_limit_money()) {
      set_limit_money(from.limit_money());
    }
    if (from.has_stand_money()) {
      set_stand_money(from.stand_money());
    }
    if (from.has_base_money()) {
      set_base_money(from.base_money());
    }
    if (from.has_left_len()) {
      set_left_len(from.left_len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpTableInfo_UC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpTableInfo_UC::CopyFrom(const AckUpTableInfo_UC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpTableInfo_UC::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->players())) return false;
  return true;
}

void AckUpTableInfo_UC::Swap(AckUpTableInfo_UC* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(rank_, other->rank_);
    std::swap(number_, other->number_);
    std::swap(down_tag_, other->down_tag_);
    std::swap(limit_money_, other->limit_money_);
    std::swap(stand_money_, other->stand_money_);
    std::swap(base_money_, other->base_money_);
    std::swap(left_len_, other->left_len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpTableInfo_UC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpTableInfo_UC_descriptor_;
  metadata.reflection = AckUpTableInfo_UC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpTableInfo_BC::kPlayersFieldNumber;
#endif  // !_MSC_VER

AckUpTableInfo_BC::AckUpTableInfo_BC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.AckUpTableInfo_BC)
}

void AckUpTableInfo_BC::InitAsDefaultInstance() {
}

AckUpTableInfo_BC::AckUpTableInfo_BC(const AckUpTableInfo_BC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.AckUpTableInfo_BC)
}

void AckUpTableInfo_BC::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpTableInfo_BC::~AckUpTableInfo_BC() {
  // @@protoc_insertion_point(destructor:proto.login.AckUpTableInfo_BC)
  SharedDtor();
}

void AckUpTableInfo_BC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUpTableInfo_BC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpTableInfo_BC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpTableInfo_BC_descriptor_;
}

const AckUpTableInfo_BC& AckUpTableInfo_BC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

AckUpTableInfo_BC* AckUpTableInfo_BC::default_instance_ = NULL;

AckUpTableInfo_BC* AckUpTableInfo_BC::New() const {
  return new AckUpTableInfo_BC;
}

void AckUpTableInfo_BC::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpTableInfo_BC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.AckUpTableInfo_BC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.login.tagPlayers players = 1;
      case 1: {
        if (tag == 10) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.AckUpTableInfo_BC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.AckUpTableInfo_BC)
  return false;
#undef DO_
}

void AckUpTableInfo_BC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.AckUpTableInfo_BC)
  // repeated .proto.login.tagPlayers players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.AckUpTableInfo_BC)
}

::google::protobuf::uint8* AckUpTableInfo_BC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.AckUpTableInfo_BC)
  // repeated .proto.login.tagPlayers players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.AckUpTableInfo_BC)
  return target;
}

int AckUpTableInfo_BC::ByteSize() const {
  int total_size = 0;

  // repeated .proto.login.tagPlayers players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpTableInfo_BC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpTableInfo_BC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpTableInfo_BC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpTableInfo_BC::MergeFrom(const AckUpTableInfo_BC& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpTableInfo_BC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpTableInfo_BC::CopyFrom(const AckUpTableInfo_BC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpTableInfo_BC::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->players())) return false;
  return true;
}

void AckUpTableInfo_BC::Swap(AckUpTableInfo_BC* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpTableInfo_BC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpTableInfo_BC_descriptor_;
  metadata.reflection = AckUpTableInfo_BC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckAllLookOnUserResp::kPlayersFieldNumber;
const int AckAllLookOnUserResp::kLeftLenFieldNumber;
#endif  // !_MSC_VER

AckAllLookOnUserResp::AckAllLookOnUserResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.AckAllLookOnUserResp)
}

void AckAllLookOnUserResp::InitAsDefaultInstance() {
}

AckAllLookOnUserResp::AckAllLookOnUserResp(const AckAllLookOnUserResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.AckAllLookOnUserResp)
}

void AckAllLookOnUserResp::SharedCtor() {
  _cached_size_ = 0;
  left_len_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckAllLookOnUserResp::~AckAllLookOnUserResp() {
  // @@protoc_insertion_point(destructor:proto.login.AckAllLookOnUserResp)
  SharedDtor();
}

void AckAllLookOnUserResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckAllLookOnUserResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckAllLookOnUserResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckAllLookOnUserResp_descriptor_;
}

const AckAllLookOnUserResp& AckAllLookOnUserResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

AckAllLookOnUserResp* AckAllLookOnUserResp::default_instance_ = NULL;

AckAllLookOnUserResp* AckAllLookOnUserResp::New() const {
  return new AckAllLookOnUserResp;
}

void AckAllLookOnUserResp::Clear() {
  left_len_ = 0;
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckAllLookOnUserResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.AckAllLookOnUserResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.login.tagPlayers players = 1;
      case 1: {
        if (tag == 10) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectTag(16)) goto parse_left_len;
        break;
      }

      // optional int32 left_len = 2;
      case 2: {
        if (tag == 16) {
         parse_left_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_len_)));
          set_has_left_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.AckAllLookOnUserResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.AckAllLookOnUserResp)
  return false;
#undef DO_
}

void AckAllLookOnUserResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.AckAllLookOnUserResp)
  // repeated .proto.login.tagPlayers players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  // optional int32 left_len = 2;
  if (has_left_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.AckAllLookOnUserResp)
}

::google::protobuf::uint8* AckAllLookOnUserResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.AckAllLookOnUserResp)
  // repeated .proto.login.tagPlayers players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  // optional int32 left_len = 2;
  if (has_left_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.AckAllLookOnUserResp)
  return target;
}

int AckAllLookOnUserResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 left_len = 2;
    if (has_left_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_len());
    }

  }
  // repeated .proto.login.tagPlayers players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckAllLookOnUserResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckAllLookOnUserResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckAllLookOnUserResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckAllLookOnUserResp::MergeFrom(const AckAllLookOnUserResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_left_len()) {
      set_left_len(from.left_len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckAllLookOnUserResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckAllLookOnUserResp::CopyFrom(const AckAllLookOnUserResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckAllLookOnUserResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->players())) return false;
  return true;
}

void AckAllLookOnUserResp::Swap(AckAllLookOnUserResp* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(left_len_, other->left_len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckAllLookOnUserResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckAllLookOnUserResp_descriptor_;
  metadata.reflection = AckAllLookOnUserResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckHeatBeat::kStateFieldNumber;
#endif  // !_MSC_VER

AckHeatBeat::AckHeatBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.AckHeatBeat)
}

void AckHeatBeat::InitAsDefaultInstance() {
}

AckHeatBeat::AckHeatBeat(const AckHeatBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.AckHeatBeat)
}

void AckHeatBeat::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckHeatBeat::~AckHeatBeat() {
  // @@protoc_insertion_point(destructor:proto.login.AckHeatBeat)
  SharedDtor();
}

void AckHeatBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckHeatBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckHeatBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckHeatBeat_descriptor_;
}

const AckHeatBeat& AckHeatBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

AckHeatBeat* AckHeatBeat::default_instance_ = NULL;

AckHeatBeat* AckHeatBeat::New() const {
  return new AckHeatBeat;
}

void AckHeatBeat::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckHeatBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.AckHeatBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.AckHeatBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.AckHeatBeat)
  return false;
#undef DO_
}

void AckHeatBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.AckHeatBeat)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.AckHeatBeat)
}

::google::protobuf::uint8* AckHeatBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.AckHeatBeat)
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.AckHeatBeat)
  return target;
}

int AckHeatBeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckHeatBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckHeatBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckHeatBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckHeatBeat::MergeFrom(const AckHeatBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckHeatBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckHeatBeat::CopyFrom(const AckHeatBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHeatBeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckHeatBeat::Swap(AckHeatBeat* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckHeatBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckHeatBeat_descriptor_;
  metadata.reflection = AckHeatBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPrereadyBC::kRoomidFieldNumber;
#endif  // !_MSC_VER

AckPrereadyBC::AckPrereadyBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.AckPrereadyBC)
}

void AckPrereadyBC::InitAsDefaultInstance() {
}

AckPrereadyBC::AckPrereadyBC(const AckPrereadyBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.AckPrereadyBC)
}

void AckPrereadyBC::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPrereadyBC::~AckPrereadyBC() {
  // @@protoc_insertion_point(destructor:proto.login.AckPrereadyBC)
  SharedDtor();
}

void AckPrereadyBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckPrereadyBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPrereadyBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPrereadyBC_descriptor_;
}

const AckPrereadyBC& AckPrereadyBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

AckPrereadyBC* AckPrereadyBC::default_instance_ = NULL;

AckPrereadyBC* AckPrereadyBC::New() const {
  return new AckPrereadyBC;
}

void AckPrereadyBC::Clear() {
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPrereadyBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.AckPrereadyBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roomid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.AckPrereadyBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.AckPrereadyBC)
  return false;
#undef DO_
}

void AckPrereadyBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.AckPrereadyBC)
  // required int32 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.AckPrereadyBC)
}

::google::protobuf::uint8* AckPrereadyBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.AckPrereadyBC)
  // required int32 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.AckPrereadyBC)
  return target;
}

int AckPrereadyBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPrereadyBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPrereadyBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPrereadyBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPrereadyBC::MergeFrom(const AckPrereadyBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPrereadyBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPrereadyBC::CopyFrom(const AckPrereadyBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPrereadyBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckPrereadyBC::Swap(AckPrereadyBC* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPrereadyBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPrereadyBC_descriptor_;
  metadata.reflection = AckPrereadyBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckEmotionBC::kSeatidFieldNumber;
const int AckEmotionBC::kMoneyFieldNumber;
const int AckEmotionBC::kTargetSeatidFieldNumber;
const int AckEmotionBC::kTargetSeatNumFieldNumber;
const int AckEmotionBC::kTypeFieldNumber;
#endif  // !_MSC_VER

AckEmotionBC::AckEmotionBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.AckEmotionBC)
}

void AckEmotionBC::InitAsDefaultInstance() {
}

AckEmotionBC::AckEmotionBC(const AckEmotionBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.AckEmotionBC)
}

void AckEmotionBC::SharedCtor() {
  _cached_size_ = 0;
  seatid_ = 0;
  money_ = 0;
  target_seatid_ = 0;
  target_seat_num_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckEmotionBC::~AckEmotionBC() {
  // @@protoc_insertion_point(destructor:proto.login.AckEmotionBC)
  SharedDtor();
}

void AckEmotionBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckEmotionBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckEmotionBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckEmotionBC_descriptor_;
}

const AckEmotionBC& AckEmotionBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

AckEmotionBC* AckEmotionBC::default_instance_ = NULL;

AckEmotionBC* AckEmotionBC::New() const {
  return new AckEmotionBC;
}

void AckEmotionBC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckEmotionBC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(seatid_, type_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckEmotionBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.AckEmotionBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional int32 money = 2;
      case 2: {
        if (tag == 16) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target_seatid;
        break;
      }

      // optional int32 target_seatid = 3;
      case 3: {
        if (tag == 24) {
         parse_target_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_seatid_)));
          set_has_target_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_target_seat_num;
        break;
      }

      // optional int32 target_seat_num = 4;
      case 4: {
        if (tag == 32) {
         parse_target_seat_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_seat_num_)));
          set_has_target_seat_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.AckEmotionBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.AckEmotionBC)
  return false;
#undef DO_
}

void AckEmotionBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.AckEmotionBC)
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional int32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }

  // optional int32 target_seatid = 3;
  if (has_target_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target_seatid(), output);
  }

  // optional int32 target_seat_num = 4;
  if (has_target_seat_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->target_seat_num(), output);
  }

  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.AckEmotionBC)
}

::google::protobuf::uint8* AckEmotionBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.AckEmotionBC)
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional int32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money(), target);
  }

  // optional int32 target_seatid = 3;
  if (has_target_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->target_seatid(), target);
  }

  // optional int32 target_seat_num = 4;
  if (has_target_seat_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->target_seat_num(), target);
  }

  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.AckEmotionBC)
  return target;
}

int AckEmotionBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 target_seatid = 3;
    if (has_target_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_seatid());
    }

    // optional int32 target_seat_num = 4;
    if (has_target_seat_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_seat_num());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckEmotionBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckEmotionBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckEmotionBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckEmotionBC::MergeFrom(const AckEmotionBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_target_seatid()) {
      set_target_seatid(from.target_seatid());
    }
    if (from.has_target_seat_num()) {
      set_target_seat_num(from.target_seat_num());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckEmotionBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckEmotionBC::CopyFrom(const AckEmotionBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckEmotionBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckEmotionBC::Swap(AckEmotionBC* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(money_, other->money_);
    std::swap(target_seatid_, other->target_seatid_);
    std::swap(target_seat_num_, other->target_seat_num_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckEmotionBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckEmotionBC_descriptor_;
  metadata.reflection = AckEmotionBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckChatBC::kSeatidFieldNumber;
const int AckChatBC::kCharmsgFieldNumber;
#endif  // !_MSC_VER

AckChatBC::AckChatBC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.AckChatBC)
}

void AckChatBC::InitAsDefaultInstance() {
}

AckChatBC::AckChatBC(const AckChatBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.AckChatBC)
}

void AckChatBC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  seatid_ = 0;
  charmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckChatBC::~AckChatBC() {
  // @@protoc_insertion_point(destructor:proto.login.AckChatBC)
  SharedDtor();
}

void AckChatBC::SharedDtor() {
  if (charmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charmsg_;
  }
  if (this != default_instance_) {
  }
}

void AckChatBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckChatBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckChatBC_descriptor_;
}

const AckChatBC& AckChatBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

AckChatBC* AckChatBC::default_instance_ = NULL;

AckChatBC* AckChatBC::New() const {
  return new AckChatBC;
}

void AckChatBC::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    seatid_ = 0;
    if (has_charmsg()) {
      if (charmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckChatBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.AckChatBC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seatid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_charmsg;
        break;
      }

      // optional string charmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_charmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charmsg().data(), this->charmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.AckChatBC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.AckChatBC)
  return false;
#undef DO_
}

void AckChatBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.AckChatBC)
  // required int32 seatid = 1;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seatid(), output);
  }

  // optional string charmsg = 2;
  if (has_charmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charmsg().data(), this->charmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->charmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.AckChatBC)
}

::google::protobuf::uint8* AckChatBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.AckChatBC)
  // required int32 seatid = 1;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seatid(), target);
  }

  // optional string charmsg = 2;
  if (has_charmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charmsg().data(), this->charmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.AckChatBC)
  return target;
}

int AckChatBC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seatid = 1;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional string charmsg = 2;
    if (has_charmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckChatBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckChatBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckChatBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckChatBC::MergeFrom(const AckChatBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_charmsg()) {
      set_charmsg(from.charmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckChatBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckChatBC::CopyFrom(const AckChatBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckChatBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckChatBC::Swap(AckChatBC* other) {
  if (other != this) {
    std::swap(seatid_, other->seatid_);
    std::swap(charmsg_, other->charmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckChatBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckChatBC_descriptor_;
  metadata.reflection = AckChatBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckStrsip::kUidFieldNumber;
const int AckStrsip::kChairidFieldNumber;
const int AckStrsip::kHandleTypeFieldNumber;
#endif  // !_MSC_VER

AckStrsip::AckStrsip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.login.AckStrsip)
}

void AckStrsip::InitAsDefaultInstance() {
}

AckStrsip::AckStrsip(const AckStrsip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.login.AckStrsip)
}

void AckStrsip::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  chairid_ = 0;
  handle_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckStrsip::~AckStrsip() {
  // @@protoc_insertion_point(destructor:proto.login.AckStrsip)
  SharedDtor();
}

void AckStrsip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckStrsip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckStrsip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckStrsip_descriptor_;
}

const AckStrsip& AckStrsip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loginproto_2eproto();
  return *default_instance_;
}

AckStrsip* AckStrsip::default_instance_ = NULL;

AckStrsip* AckStrsip::New() const {
  return new AckStrsip;
}

void AckStrsip::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckStrsip*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, handle_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckStrsip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.login.AckStrsip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_chairid;
        break;
      }

      // optional int32 chairid = 2;
      case 2: {
        if (tag == 16) {
         parse_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_handle_type;
        break;
      }

      // optional int32 handle_type = 3;
      case 3: {
        if (tag == 24) {
         parse_handle_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_type_)));
          set_has_handle_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.login.AckStrsip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.login.AckStrsip)
  return false;
#undef DO_
}

void AckStrsip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.login.AckStrsip)
  // optional int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 chairid = 2;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairid(), output);
  }

  // optional int32 handle_type = 3;
  if (has_handle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->handle_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.login.AckStrsip)
}

::google::protobuf::uint8* AckStrsip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.login.AckStrsip)
  // optional int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 chairid = 2;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chairid(), target);
  }

  // optional int32 handle_type = 3;
  if (has_handle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->handle_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.login.AckStrsip)
  return target;
}

int AckStrsip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 chairid = 2;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 handle_type = 3;
    if (has_handle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckStrsip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckStrsip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckStrsip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckStrsip::MergeFrom(const AckStrsip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_handle_type()) {
      set_handle_type(from.handle_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckStrsip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckStrsip::CopyFrom(const AckStrsip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckStrsip::IsInitialized() const {

  return true;
}

void AckStrsip::Swap(AckStrsip* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(chairid_, other->chairid_);
    std::swap(handle_type_, other->handle_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckStrsip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckStrsip_descriptor_;
  metadata.reflection = AckStrsip_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace login
}  // namespace proto

// @@protoc_insertion_point(global_scope)
