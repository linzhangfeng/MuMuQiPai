// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: redisproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "redisproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace redis {

namespace {

const ::google::protobuf::Descriptor* tagPlayers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagPlayers_reflection_ = NULL;
const ::google::protobuf::Descriptor* Seat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Seat_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJConfCommon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJConfCommon_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJConfPiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJConfPiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJConfBuyHorse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJConfBuyHorse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJConfZhuaniao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJConfZhuaniao_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJHuType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJHuType_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJConfOther_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJConfOther_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJCustomizedConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJCustomizedConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoundScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoundScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* Table_TotalRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Table_TotalRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shai_Set_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shai_Set_reflection_ = NULL;
const ::google::protobuf::Descriptor* FixedCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixedCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandCards_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCardTypePool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCardTypePool_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCardPool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCardPool_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiOpInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiOpInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobAddInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobAddInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LOWLEVELOPERATE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LOWLEVELOPERATE_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGangScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGangScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGangScoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGangScoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagHuRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagHuRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagHuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagHuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MJ_BUFFER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MJ_BUFFER_reflection_ = NULL;
const ::google::protobuf::Descriptor* HuFanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HuFanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGameAccout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGameAccout_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForbidWin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForbidWin_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fantype_to_FanNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fantype_to_FanNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagPlayerGPS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagPlayerGPS_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagRedisInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagRedisInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_redisproto_2eproto() {
  protobuf_AddDesc_redisproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "redisproto.proto");
  GOOGLE_CHECK(file != NULL);
  tagPlayers_descriptor_ = file->message_type(0);
  static const int tagPlayers_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, skey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, pcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, vlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, logout_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, down_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, usertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, disbandcount_),
  };
  tagPlayers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagPlayers_descriptor_,
      tagPlayers::default_instance_,
      tagPlayers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagPlayers));
  Seat_descriptor_ = file->message_type(1);
  static const int Seat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Seat, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Seat, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Seat, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Seat, uid_),
  };
  Seat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Seat_descriptor_,
      Seat::default_instance_,
      Seat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Seat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Seat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Seat));
  MJConfCommon_descriptor_ = file->message_type(2);
  static const int MJConfCommon_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfCommon, m_bsupportchi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfCommon, m_bsupportwind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfCommon, m_bsupportting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfCommon, m_bzimohu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfCommon, m_byipaoduoxiang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfCommon, m_bqiangganghu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfCommon, m_bqiangzhigang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfCommon, m_bqiangangang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfCommon, m_bqangshangpao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfCommon, m_bhuanggang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfCommon, m_bzhuangxian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfCommon, m_bforcehuqiangganghu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfCommon, m_bfourcehumutilhu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfCommon, m_angangpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfCommon, m_wangangpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfCommon, m_zhigangpoint_),
  };
  MJConfCommon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJConfCommon_descriptor_,
      MJConfCommon::default_instance_,
      MJConfCommon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfCommon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfCommon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJConfCommon));
  MJConfPiao_descriptor_ = file->message_type(3);
  static const int MJConfPiao_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfPiao, m_bsupportpiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfPiao, m_piao_),
  };
  MJConfPiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJConfPiao_descriptor_,
      MJConfPiao::default_instance_,
      MJConfPiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfPiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfPiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJConfPiao));
  MJConfBuyHorse_descriptor_ = file->message_type(4);
  static const int MJConfBuyHorse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfBuyHorse, m_bsupportbuyhorse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfBuyHorse, m_horsenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfBuyHorse, m_horsemaxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfBuyHorse, m_nbuyhorseincnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfBuyHorse, m_buyhorsemojijiangji_),
  };
  MJConfBuyHorse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJConfBuyHorse_descriptor_,
      MJConfBuyHorse::default_instance_,
      MJConfBuyHorse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfBuyHorse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfBuyHorse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJConfBuyHorse));
  MJConfZhuaniao_descriptor_ = file->message_type(5);
  static const int MJConfZhuaniao_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfZhuaniao, m_bsupportzhuaniao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfZhuaniao, m_bcalcallniao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfZhuaniao, m_zhuaniaonum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfZhuaniao, m_bjinniao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfZhuaniao, m_bmojijiangji_),
  };
  MJConfZhuaniao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJConfZhuaniao_descriptor_,
      MJConfZhuaniao::default_instance_,
      MJConfZhuaniao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfZhuaniao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfZhuaniao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJConfZhuaniao));
  MJHuType_descriptor_ = file->message_type(6);
  static const int MJHuType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJHuType, m_bhu7dui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJHuType, m_bhu13yao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJHuType, m_bnosupport_quanqiuren_),
  };
  MJHuType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJHuType_descriptor_,
      MJHuType::default_instance_,
      MJHuType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJHuType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJHuType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJHuType));
  MJConfOther_descriptor_ = file->message_type(7);
  static const int MJConfOther_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfOther, m_bsupportchangemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfOther, m_bofflinedelayop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfOther, m_bmulitfirstopisover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfOther, m_bfastmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfOther, m_bautodisband_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfOther, m_bbankerfirst14_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfOther, m_bangangnoshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfOther, m_bshowgangscore_),
  };
  MJConfOther_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJConfOther_descriptor_,
      MJConfOther::default_instance_,
      MJConfOther_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfOther, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJConfOther, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJConfOther));
  MJCustomizedConf_descriptor_ = file->message_type(8);
  static const int MJCustomizedConf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCustomizedConf, mjconfcommon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCustomizedConf, mjconfpiao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCustomizedConf, mjconfbuyhorse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCustomizedConf, mjconfzhuaniao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCustomizedConf, mjhutype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCustomizedConf, mjconfother_),
  };
  MJCustomizedConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJCustomizedConf_descriptor_,
      MJCustomizedConf::default_instance_,
      MJCustomizedConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCustomizedConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJCustomizedConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJCustomizedConf));
  RoundScore_descriptor_ = file->message_type(9);
  static const int RoundScore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundScore, score_),
  };
  RoundScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoundScore_descriptor_,
      RoundScore::default_instance_,
      RoundScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoundScore));
  Table_TotalRecordInfo_descriptor_ = file->message_type(10);
  static const int Table_TotalRecordInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_TotalRecordInfo, banker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_TotalRecordInfo, hu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_TotalRecordInfo, piao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_TotalRecordInfo, timerout_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_TotalRecordInfo, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_TotalRecordInfo, paohu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_TotalRecordInfo, zimo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_TotalRecordInfo, dianpao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_TotalRecordInfo, win_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_TotalRecordInfo, gang_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_TotalRecordInfo, dian_gang_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_TotalRecordInfo, piao_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_TotalRecordInfo, hongzhonggang_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_TotalRecordInfo, dahu_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_TotalRecordInfo, laizipigang_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_TotalRecordInfo, round_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_TotalRecordInfo, mobao_count_),
  };
  Table_TotalRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Table_TotalRecordInfo_descriptor_,
      Table_TotalRecordInfo::default_instance_,
      Table_TotalRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_TotalRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Table_TotalRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Table_TotalRecordInfo));
  Shai_Set_descriptor_ = file->message_type(11);
  static const int Shai_Set_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shai_Set, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shai_Set, shai_),
  };
  Shai_Set_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shai_Set_descriptor_,
      Shai_Set::default_instance_,
      Shai_Set_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shai_Set, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shai_Set, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shai_Set));
  FixedCard_descriptor_ = file->message_type(12);
  static const int FixedCard_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, carddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, opcards_),
  };
  FixedCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FixedCard_descriptor_,
      FixedCard::default_instance_,
      FixedCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FixedCard));
  HandCards_descriptor_ = file->message_type(13);
  static const int HandCards_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, changeablecardslen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, changeablecards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, fixedcardslen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, stfixedcards_),
  };
  HandCards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandCards_descriptor_,
      HandCards::default_instance_,
      HandCards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandCards));
  CCardTypePool_descriptor_ = file->message_type(14);
  static const int CCardTypePool_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCardTypePool, m_jokercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCardTypePool, m_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCardTypePool, m_maxcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCardTypePool, m_mode_),
  };
  CCardTypePool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCardTypePool_descriptor_,
      CCardTypePool::default_instance_,
      CCardTypePool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCardTypePool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCardTypePool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCardTypePool));
  CCardPool_descriptor_ = file->message_type(15);
  static const int CCardPool_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCardPool, m_cardtypepool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCardPool, m_seedid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCardPool, m_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCardPool, m_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCardPool, m_maxcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCardPool, m_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCardPool, m_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCardPool, m_last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCardPool, m_jokercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCardPool, m_jokercount_),
  };
  CCardPool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCardPool_descriptor_,
      CCardPool::default_instance_,
      CCardPool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCardPool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCardPool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCardPool));
  MultiOpInfo_descriptor_ = file->message_type(16);
  static const int MultiOpInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiOpInfo, m_bmultiopusernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiOpInfo, m_bmultidoneopnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiOpInfo, m_bmultihuopecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiOpInfo, m_bmultiophunum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiOpInfo, m_bmulitfirstoperate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiOpInfo, m_bmultiuserdoneop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiOpInfo, m_bmultiuserdoneopcard_),
  };
  MultiOpInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultiOpInfo_descriptor_,
      MultiOpInfo::default_instance_,
      MultiOpInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiOpInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiOpInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultiOpInfo));
  RobAddInfo_descriptor_ = file->message_type(17);
  static const int RobAddInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobAddInfo, m_roboperatenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobAddInfo, m_robhunum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobAddInfo, m_wanggangplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobAddInfo, m_wanggangplayeroptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobAddInfo, m_robhudoneop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobAddInfo, m_baddfanflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobAddInfo, m_robwangangcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobAddInfo, m_brobwangang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobAddInfo, m_brobhu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobAddInfo, m_brobganghujudge_),
  };
  RobAddInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobAddInfo_descriptor_,
      RobAddInfo::default_instance_,
      RobAddInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobAddInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobAddInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobAddInfo));
  LOWLEVELOPERATE_descriptor_ = file->message_type(18);
  static const int LOWLEVELOPERATE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOWLEVELOPERATE, ioptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOWLEVELOPERATE, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOWLEVELOPERATE, bcard_),
  };
  LOWLEVELOPERATE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LOWLEVELOPERATE_descriptor_,
      LOWLEVELOPERATE::default_instance_,
      LOWLEVELOPERATE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOWLEVELOPERATE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LOWLEVELOPERATE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LOWLEVELOPERATE));
  tagGangScore_descriptor_ = file->message_type(19);
  static const int tagGangScore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangScore, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangScore, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangScore, itype_),
  };
  tagGangScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGangScore_descriptor_,
      tagGangScore::default_instance_,
      tagGangScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGangScore));
  tagGangScoreInfo_descriptor_ = file->message_type(20);
  static const int tagGangScoreInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangScoreInfo, itotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangScoreInfo, gang_),
  };
  tagGangScoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGangScoreInfo_descriptor_,
      tagGangScoreInfo::default_instance_,
      tagGangScoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangScoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangScoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGangScoreInfo));
  tagHuRecord_descriptor_ = file->message_type(21);
  static const int tagHuRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuRecord, bhucard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuRecord, bpashuchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuRecord, btype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuRecord, ifannum_),
  };
  tagHuRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagHuRecord_descriptor_,
      tagHuRecord::default_instance_,
      tagHuRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagHuRecord));
  tagHuInfo_descriptor_ = file->message_type(22);
  static const int tagHuInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, itotalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, sthu_),
  };
  tagHuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagHuInfo_descriptor_,
      tagHuInfo::default_instance_,
      tagHuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagHuInfo));
  MJ_BUFFER_descriptor_ = file->message_type(23);
  static const int MJ_BUFFER_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJ_BUFFER, card_),
  };
  MJ_BUFFER_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MJ_BUFFER_descriptor_,
      MJ_BUFFER::default_instance_,
      MJ_BUFFER_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJ_BUFFER, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MJ_BUFFER, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MJ_BUFFER));
  HuFanInfo_descriptor_ = file->message_type(24);
  static const int HuFanInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuFanInfo, m_bishu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuFanInfo, m_hufannums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuFanInfo, m_stgang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuFanInfo, m_sthuscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuFanInfo, m_ofan_),
  };
  HuFanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HuFanInfo_descriptor_,
      HuFanInfo::default_instance_,
      HuFanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuFanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuFanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HuFanInfo));
  CGameAccout_descriptor_ = file->message_type(25);
  static const int CGameAccout_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameAccout, m_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameAccout, m_roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameAccout, m_paly_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameAccout, m_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameAccout, m_total_score_),
  };
  CGameAccout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGameAccout_descriptor_,
      CGameAccout::default_instance_,
      CGameAccout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameAccout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameAccout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGameAccout));
  ForbidWin_descriptor_ = file->message_type(26);
  static const int ForbidWin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForbidWin, m_lockcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForbidWin, m_lockpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForbidWin, m_lock_),
  };
  ForbidWin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForbidWin_descriptor_,
      ForbidWin::default_instance_,
      ForbidWin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForbidWin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForbidWin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForbidWin));
  Fantype_to_FanNum_descriptor_ = file->message_type(27);
  static const int Fantype_to_FanNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fantype_to_FanNum, fan_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fantype_to_FanNum, special_fan_num_),
  };
  Fantype_to_FanNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fantype_to_FanNum_descriptor_,
      Fantype_to_FanNum::default_instance_,
      Fantype_to_FanNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fantype_to_FanNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fantype_to_FanNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fantype_to_FanNum));
  tagPlayerGPS_descriptor_ = file->message_type(28);
  static const int tagPlayerGPS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayerGPS, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayerGPS, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayerGPS, city_),
  };
  tagPlayerGPS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagPlayerGPS_descriptor_,
      tagPlayerGPS::default_instance_,
      tagPlayerGPS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayerGPS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayerGPS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagPlayerGPS));
  tagRedisInfo_descriptor_ = file->message_type(29);
  static const int tagRedisInfo_offsets_[80] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, base_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, roomgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, stand_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, lose_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, win_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_room_owner_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_room_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_totalrecordinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_game_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_online_beat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_videostr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_randomseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_offlinenoop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_bdelaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_seatplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_start_shai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_bcurplayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_bgamestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_disband_resuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_handcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_isoffline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_bistrustee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_bautohu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_bgangcalcimme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_bbanker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_last_banker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_cardpool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_bgetcardcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_buseroperate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_bcurchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_boutcardchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_bcuroutcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_bcurcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_stuseroutcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, multiopinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_passhuplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, robaddinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_brecordmultiop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, hufaninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_applydisbandchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_bisdisbandtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_disbandchoose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_bdisbandcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_bovertimestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_nplayingtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_account_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_userdissstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_bouttimer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_louhu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_bdeletetable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_bistestsvr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_room_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_niao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_zhong_niao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_daniaoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_peng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, g_ft2fn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_mapplayergps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_useroperateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_autodisband_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_bisautodisband_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_tablebranchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_ntotalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_ncurrentcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_userchoosemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_voice_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_vecopcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_preofflinestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_isclubroom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_public_channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_group_channel_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_voice_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, m_maxhandcardsize_),
  };
  tagRedisInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagRedisInfo_descriptor_,
      tagRedisInfo::default_instance_,
      tagRedisInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRedisInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagRedisInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_redisproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagPlayers_descriptor_, &tagPlayers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Seat_descriptor_, &Seat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJConfCommon_descriptor_, &MJConfCommon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJConfPiao_descriptor_, &MJConfPiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJConfBuyHorse_descriptor_, &MJConfBuyHorse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJConfZhuaniao_descriptor_, &MJConfZhuaniao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJHuType_descriptor_, &MJHuType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJConfOther_descriptor_, &MJConfOther::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJCustomizedConf_descriptor_, &MJCustomizedConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoundScore_descriptor_, &RoundScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Table_TotalRecordInfo_descriptor_, &Table_TotalRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shai_Set_descriptor_, &Shai_Set::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FixedCard_descriptor_, &FixedCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandCards_descriptor_, &HandCards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCardTypePool_descriptor_, &CCardTypePool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCardPool_descriptor_, &CCardPool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultiOpInfo_descriptor_, &MultiOpInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobAddInfo_descriptor_, &RobAddInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LOWLEVELOPERATE_descriptor_, &LOWLEVELOPERATE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGangScore_descriptor_, &tagGangScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGangScoreInfo_descriptor_, &tagGangScoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagHuRecord_descriptor_, &tagHuRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagHuInfo_descriptor_, &tagHuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MJ_BUFFER_descriptor_, &MJ_BUFFER::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HuFanInfo_descriptor_, &HuFanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGameAccout_descriptor_, &CGameAccout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForbidWin_descriptor_, &ForbidWin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fantype_to_FanNum_descriptor_, &Fantype_to_FanNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagPlayerGPS_descriptor_, &tagPlayerGPS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagRedisInfo_descriptor_, &tagRedisInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_redisproto_2eproto() {
  delete tagPlayers::default_instance_;
  delete tagPlayers_reflection_;
  delete Seat::default_instance_;
  delete Seat_reflection_;
  delete MJConfCommon::default_instance_;
  delete MJConfCommon_reflection_;
  delete MJConfPiao::default_instance_;
  delete MJConfPiao_reflection_;
  delete MJConfBuyHorse::default_instance_;
  delete MJConfBuyHorse_reflection_;
  delete MJConfZhuaniao::default_instance_;
  delete MJConfZhuaniao_reflection_;
  delete MJHuType::default_instance_;
  delete MJHuType_reflection_;
  delete MJConfOther::default_instance_;
  delete MJConfOther_reflection_;
  delete MJCustomizedConf::default_instance_;
  delete MJCustomizedConf_reflection_;
  delete RoundScore::default_instance_;
  delete RoundScore_reflection_;
  delete Table_TotalRecordInfo::default_instance_;
  delete Table_TotalRecordInfo_reflection_;
  delete Shai_Set::default_instance_;
  delete Shai_Set_reflection_;
  delete FixedCard::default_instance_;
  delete FixedCard_reflection_;
  delete HandCards::default_instance_;
  delete HandCards_reflection_;
  delete CCardTypePool::default_instance_;
  delete CCardTypePool_reflection_;
  delete CCardPool::default_instance_;
  delete CCardPool_reflection_;
  delete MultiOpInfo::default_instance_;
  delete MultiOpInfo_reflection_;
  delete RobAddInfo::default_instance_;
  delete RobAddInfo_reflection_;
  delete LOWLEVELOPERATE::default_instance_;
  delete LOWLEVELOPERATE_reflection_;
  delete tagGangScore::default_instance_;
  delete tagGangScore_reflection_;
  delete tagGangScoreInfo::default_instance_;
  delete tagGangScoreInfo_reflection_;
  delete tagHuRecord::default_instance_;
  delete tagHuRecord_reflection_;
  delete tagHuInfo::default_instance_;
  delete tagHuInfo_reflection_;
  delete MJ_BUFFER::default_instance_;
  delete MJ_BUFFER_reflection_;
  delete HuFanInfo::default_instance_;
  delete HuFanInfo_reflection_;
  delete CGameAccout::default_instance_;
  delete CGameAccout_reflection_;
  delete ForbidWin::default_instance_;
  delete ForbidWin_reflection_;
  delete Fantype_to_FanNum::default_instance_;
  delete Fantype_to_FanNum_reflection_;
  delete tagPlayerGPS::default_instance_;
  delete tagPlayerGPS_reflection_;
  delete tagRedisInfo::default_instance_;
  delete tagRedisInfo_reflection_;
}

void protobuf_AddDesc_redisproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020redisproto.proto\022\020proto.game.redis\"\245\002\n"
    "\ntagPlayers\022\013\n\003uid\030\001 \001(\005\022\013\n\003tid\030\002 \001(\t\022\014\n"
    "\004skey\030\003 \001(\t\022\014\n\004name\030\004 \001(\t\022\016\n\006avatar\030\005 \001("
    "\t\022\016\n\006seatid\030\006 \001(\005\022\013\n\003sex\030\007 \001(\005\022\013\n\003exp\030\010 "
    "\001(\005\022\013\n\003rmb\030\t \001(\005\022\r\n\005money\030\n \001(\005\022\014\n\004coin\030"
    "\013 \001(\005\022\016\n\006pcount\030\014 \001(\005\022\016\n\006vlevel\030\r \001(\005\022\016\n"
    "\006status\030\016 \001(\005\022\023\n\013logout_type\030\017 \001(\005\022\020\n\010do"
    "wn_tag\030\020 \001(\005\022\020\n\010usertype\030\021 \001(\005\022\024\n\014disban"
    "dcount\030\022 \001(\005\"B\n\004Seat\022\r\n\005state\030\001 \001(\005\022\016\n\006s"
    "eatid\030\002 \001(\005\022\016\n\006action\030\003 \001(\005\022\013\n\003uid\030\004 \001(\005"
    "\"\223\003\n\014MJConfCommon\022\025\n\rm_bsupportchi\030\001 \001(\010"
    "\022\026\n\016m_bsupportwind\030\002 \001(\010\022\026\n\016m_bsupportti"
    "ng\030\003 \001(\010\022\021\n\tm_bzimohu\030\004 \001(\010\022\030\n\020m_byipaod"
    "uoxiang\030\005 \001(\010\022\026\n\016m_bqiangganghu\030\006 \001(\010\022\027\n"
    "\017m_bqiangzhigang\030\007 \001(\010\022\026\n\016m_bqiangangang"
    "\030\010 \001(\010\022\027\n\017m_bqangshangpao\030\t \001(\010\022\024\n\014m_bhu"
    "anggang\030\n \001(\010\022\025\n\rm_bzhuangxian\030\013 \001(\010\022\035\n\025"
    "m_bforcehuqiangganghu\030\014 \001(\010\022\032\n\022m_bfource"
    "humutilhu\030\r \001(\010\022\025\n\rm_angangpoint\030\016 \001(\005\022\026"
    "\n\016m_wangangpoint\030\017 \001(\005\022\026\n\016m_zhigangpoint"
    "\030\020 \001(\005\"4\n\nMJConfPiao\022\026\n\016m_bsupportpiao\030\001"
    " \001(\010\022\016\n\006m_piao\030\002 \003(\005\"\221\001\n\016MJConfBuyHorse\022"
    "\032\n\022m_bsupportbuyhorse\030\001 \001(\010\022\022\n\nm_horsenu"
    "m\030\002 \001(\005\022\025\n\rm_horsemaxnum\030\003 \001(\005\022\031\n\021m_nbuy"
    "horseincnum\030\004 \001(\005\022\035\n\025m_buyhorsemojijiang"
    "ji\030\005 \001(\010\"\207\001\n\016MJConfZhuaniao\022\032\n\022m_bsuppor"
    "tzhuaniao\030\001 \001(\010\022\026\n\016m_bcalcallniao\030\002 \001(\010\022"
    "\025\n\rm_zhuaniaonum\030\003 \001(\005\022\022\n\nm_bjinniao\030\004 \001"
    "(\010\022\026\n\016m_bmojijiangji\030\005 \001(\010\"R\n\010MJHuType\022\021"
    "\n\tm_bhu7dui\030\001 \001(\010\022\022\n\nm_bhu13yao\030\002 \001(\010\022\037\n"
    "\027m_bnosupport_quanqiuren\030\003 \001(\010\"\337\001\n\013MJCon"
    "fOther\022\034\n\024m_bsupportchangemode\030\001 \001(\010\022\031\n\021"
    "m_bofflinedelayop\030\002 \001(\010\022\035\n\025m_bmulitfirst"
    "opisover\030\003 \001(\010\022\023\n\013m_bfastmode\030\004 \001(\010\022\026\n\016m"
    "_bautodisband\030\005 \001(\010\022\030\n\020m_bbankerfirst14\030"
    "\006 \001(\010\022\027\n\017m_bangangnoshow\030\007 \001(\010\022\030\n\020m_bsho"
    "wgangscore\030\010 \001(\010\"\320\002\n\020MJCustomizedConf\0224\n"
    "\014mjconfcommon\030\001 \001(\0132\036.proto.game.redis.M"
    "JConfCommon\0220\n\nmjconfpiao\030\002 \001(\0132\034.proto."
    "game.redis.MJConfPiao\0228\n\016mjconfbuyhorse\030"
    "\003 \001(\0132 .proto.game.redis.MJConfBuyHorse\022"
    "8\n\016mjconfzhuaniao\030\004 \001(\0132 .proto.game.red"
    "is.MJConfZhuaniao\022,\n\010mjhutype\030\005 \001(\0132\032.pr"
    "oto.game.redis.MJHuType\0222\n\013mjconfother\030\006"
    " \001(\0132\035.proto.game.redis.MJConfOther\"\033\n\nR"
    "oundScore\022\r\n\005score\030\001 \003(\005\"\202\003\n\025Table_Total"
    "RecordInfo\022\016\n\006banker\030\001 \003(\005\022\n\n\002hu\030\002 \003(\005\022\014"
    "\n\004piao\030\003 \003(\005\022\023\n\013timerout_op\030\004 \003(\005\022\023\n\013tot"
    "al_score\030\005 \003(\005\022\r\n\005paohu\030\006 \003(\005\022\014\n\004zimo\030\007 "
    "\003(\005\022\017\n\007dianpao\030\010 \003(\005\022\022\n\nwin_counts\030\t \003(\005"
    "\022\022\n\ngang_times\030\n \003(\005\022\027\n\017dian_gang_times\030"
    "\013 \003(\005\022\022\n\npiao_count\030\014 \003(\005\022\033\n\023hongzhongga"
    "ng_count\030\r \003(\005\022\022\n\ndahu_count\030\016 \003(\005\022\031\n\021la"
    "izipigang_count\030\017 \003(\005\0221\n\013round_score\030\020 \003"
    "(\0132\034.proto.game.redis.RoundScore\022\023\n\013moba"
    "o_count\030\021 \003(\005\"%\n\010Shai_Set\022\013\n\003num\030\001 \001(\005\022\014"
    "\n\004shai\030\002 \003(\005\"N\n\tFixedCard\022\020\n\010CardData\030\001 "
    "\002(\005\022\r\n\005state\030\002 \001(\005\022\017\n\007chairID\030\003 \001(\005\022\017\n\007O"
    "pCards\030\004 \003(\005\"\212\001\n\tHandCards\022\032\n\022Changeable"
    "CardsLen\030\001 \002(\005\022\027\n\017ChangeableCards\030\002 \003(\005\022"
    "\025\n\rFixedCardsLen\030\003 \001(\005\0221\n\014stFixedCards\030\004"
    " \003(\0132\033.proto.game.redis.FixedCard\"X\n\rCCa"
    "rdTypePool\022\023\n\013m_jokercard\030\001 \001(\005\022\016\n\006m_poo"
    "l\030\002 \003(\005\022\022\n\nm_maxcount\030\003 \001(\005\022\016\n\006m_mode\030\004 "
    "\001(\005\"\351\001\n\tCCardPool\0227\n\016m_cardtypepool\030\001 \001("
    "\0132\037.proto.game.redis.CCardTypePool\022\020\n\010m_"
    "seedid\030\002 \001(\005\022\016\n\006m_mode\030\003 \001(\005\022\016\n\006m_pool\030\004"
    " \003(\005\022\022\n\nm_maxcount\030\005 \001(\005\022\017\n\007m_count\030\006 \001("
    "\005\022\021\n\tm_current\030\007 \001(\005\022\016\n\006m_last\030\010 \001(\005\022\023\n\013"
    "m_jokercard\030\t \001(\005\022\024\n\014m_jokercount\030\n \001(\005\""
    "\322\001\n\013MultiOpInfo\022\031\n\021m_bmultiopusernum\030\001 \001"
    "(\005\022\031\n\021m_bmultidoneopnum\030\002 \001(\005\022\032\n\022m_bmult"
    "ihuopecount\030\003 \001(\005\022\027\n\017m_bmultiophunum\030\004 \001"
    "(\005\022\034\n\024m_bmulitfirstoperate\030\005 \001(\005\022\032\n\022m_bm"
    "ultiuserdoneop\030\006 \003(\005\022\036\n\026m_bmultiuserdone"
    "opcard\030\007 \003(\005\"\377\001\n\nRobAddInfo\022\027\n\017m_roboper"
    "atenum\030\001 \001(\005\022\022\n\nm_robhunum\030\002 \001(\005\022\030\n\020m_wa"
    "nggangplayer\030\003 \001(\005\022\036\n\026m_wanggangplayerop"
    "type\030\004 \001(\005\022\025\n\rm_robhudoneop\030\005 \003(\005\022\025\n\rm_b"
    "addfanflag\030\006 \003(\010\022\030\n\020m_robwangangcard\030\007 \001"
    "(\005\022\025\n\rm_brobwangang\030\010 \001(\010\022\020\n\010m_brobhu\030\t "
    "\001(\010\022\031\n\021m_brobganghujudge\030\n \001(\010\"B\n\017LOWLEV"
    "ELOPERATE\022\017\n\007ioptype\030\001 \001(\005\022\017\n\007chairid\030\002 "
    "\001(\005\022\r\n\005bcard\030\003 \001(\005\"<\n\014tagGangScore\022\014\n\004ca"
    "rd\030\001 \001(\005\022\017\n\007chairid\030\002 \001(\005\022\r\n\005itype\030\003 \001(\005"
    "\"U\n\020tagGangScoreInfo\022\023\n\013itotalscore\030\001 \001("
    "\005\022,\n\004gang\030\002 \003(\0132\036.proto.game.redis.tagGa"
    "ngScore\"U\n\013tagHuRecord\022\017\n\007bhucard\030\001 \001(\005\022"
    "\025\n\rbpashuchairid\030\002 \001(\005\022\r\n\005btype\030\003 \001(\005\022\017\n"
    "\007ifannum\030\004 \001(\005\"M\n\ttagHuInfo\022\023\n\013itotalsco"
    "re\030\001 \001(\005\022+\n\004sthu\030\002 \003(\0132\035.proto.game.redi"
    "s.tagHuRecord\"\031\n\tMJ_BUFFER\022\014\n\004card\030\001 \003(\005"
    "\"\306\001\n\tHuFanInfo\022\017\n\007m_bishu\030\001 \003(\010\022\023\n\013m_huf"
    "annums\030\002 \003(\005\0224\n\010m_stgang\030\003 \003(\0132\".proto.g"
    "ame.redis.tagGangScoreInfo\0220\n\013m_sthuscor"
    "e\030\004 \003(\0132\033.proto.game.redis.tagHuInfo\022+\n\006"
    "m_ofan\030\005 \003(\0132\033.proto.game.redis.MJ_BUFFE"
    "R\"k\n\013CGameAccout\022\017\n\007m_round\030\001 \001(\005\022\020\n\010m_r"
    "oomid\030\002 \001(\005\022\021\n\tm_paly_id\030\003 \003(\005\022\017\n\007m_scor"
    "e\030\004 \003(\005\022\025\n\rm_total_score\030\005 \003(\005\"E\n\tForbid"
    "Win\022\022\n\nm_lockcard\030\001 \003(\005\022\024\n\014m_lockpoints\030"
    "\002 \001(\005\022\016\n\006m_lock\030\003 \001(\010\"=\n\021Fantype_to_FanN"
    "um\022\017\n\007fan_num\030\001 \003(\005\022\027\n\017special_fan_num\030\002"
    " \003(\005\"A\n\014tagPlayerGPS\022\020\n\010latitude\030\001 \001(\001\022\021"
    "\n\tlongitude\030\002 \001(\001\022\014\n\004city\030\003 \001(\t\"\357\022\n\014tagR"
    "edisInfo\022\013\n\003tid\030\001 \001(\005\022\013\n\003vid\030\002 \001(\005\022\013\n\003zi"
    "d\030\003 \001(\005\022\022\n\nbase_money\030\004 \001(\005\022\020\n\010roomgold\030"
    "\005 \001(\005\022\023\n\013stand_money\030\006 \001(\005\022\020\n\010lose_exp\030\007"
    " \001(\005\022\017\n\007win_exp\030\010 \001(\005\022\023\n\013m_basescore\030\t \001"
    "(\005\0222\n\006m_conf\030\n \001(\0132\".proto.game.redis.MJ"
    "CustomizedConf\022\030\n\020m_room_owner_uid\030\013 \001(\005"
    "\022\025\n\rm_room_status\030\014 \001(\005\022B\n\021m_totalrecord"
    "info\030\r \001(\0132\'.proto.game.redis.Table_Tota"
    "lRecordInfo\022\025\n\rm_game_player\030\016 \001(\005\022\025\n\rm_"
    "online_beat\030\017 \003(\010\022\022\n\nm_videostr\030\020 \001(\t\022\024\n"
    "\014m_randomseat\030\021 \001(\010\022\025\n\rm_offlinenoop\030\022 \001"
    "(\010\022\024\n\014m_bdelaytime\030\023 \001(\005\022,\n\014m_seatplayer"
    "\030\024 \003(\0132\026.proto.game.redis.Seat\0220\n\014m_star"
    "t_shai\030\025 \001(\0132\032.proto.game.redis.Shai_Set"
    "\022\025\n\rm_bcurplayers\030\026 \001(\005\022\024\n\014m_bgamestate\030"
    "\027 \001(\005\022\031\n\021m_disband_resuser\030\030 \001(\005\022/\n\nm_ha"
    "ndcard\030\031 \003(\0132\033.proto.game.redis.HandCard"
    "s\022\023\n\013m_isoffline\030\032 \003(\010\022\024\n\014m_bistrustee\030\033"
    " \003(\010\022\021\n\tm_bautohu\030\034 \003(\010\022\027\n\017m_bgangcalcim"
    "me\030\035 \001(\010\022\021\n\tm_bbanker\030\036 \001(\005\022\025\n\rm_last_ba"
    "nker\030\037 \001(\005\022/\n\nm_cardpool\030  \001(\0132\033.proto.g"
    "ame.redis.CCardPool\022\027\n\017m_bgetcardcount\030!"
    " \003(\005\022\026\n\016m_buseroperate\030\" \003(\005\022\025\n\rm_bcurch"
    "airid\030# \001(\005\022\031\n\021m_boutcardchairid\030$ \001(\005\022\025"
    "\n\rm_bcuroutcard\030% \001(\005\022\022\n\nm_bcurcard\030& \001("
    "\005\0224\n\017m_stuseroutcard\030\' \003(\0132\033.proto.game."
    "redis.MJ_BUFFER\0222\n\013multiopinfo\030( \001(\0132\035.p"
    "roto.game.redis.MultiOpInfo\022\026\n\016m_passhup"
    "layer\030) \003(\005\0220\n\nrobaddinfo\030* \001(\0132\034.proto."
    "game.redis.RobAddInfo\022;\n\020m_brecordmultio"
    "p\030+ \001(\0132!.proto.game.redis.LOWLEVELOPERA"
    "TE\022.\n\thufaninfo\030, \001(\0132\033.proto.game.redis"
    ".HuFanInfo\022\035\n\025m_applydisbandchairid\030- \001("
    "\005\022\031\n\021m_bisdisbandtable\030. \001(\010\022\027\n\017m_disban"
    "dchoose\030/ \003(\005\022\027\n\017m_bdisbandcount\0300 \001(\005\022\030"
    "\n\020m_bovertimestate\0301 \003(\005\022\027\n\017m_nplayingti"
    "mes\0302 \001(\005\0225\n\016m_account_info\0303 \001(\0132\035.prot"
    "o.game.redis.CGameAccout\022\027\n\017m_userdissst"
    "ate\0304 \003(\005\022\023\n\013m_bouttimer\0305 \001(\010\022,\n\007m_louh"
    "u\0306 \003(\0132\033.proto.game.redis.ForbidWin\022\026\n\016"
    "m_bdeletetable\0307 \001(\010\022\024\n\014m_bistestsvr\0308 \001"
    "(\010\0222\n\rm_room_config\0309 \001(\0132\033.proto.game.r"
    "edis.MJ_BUFFER\022+\n\006m_niao\030: \001(\0132\033.proto.g"
    "ame.redis.MJ_BUFFER\0221\n\014m_zhong_niao\030; \001("
    "\0132\033.proto.game.redis.MJ_BUFFER\022\022\n\nm_dani"
    "aoid\030< \001(\005\022+\n\006m_peng\030= \003(\0132\033.proto.game."
    "redis.MJ_BUFFER\0224\n\007g_ft2fn\030> \001(\0132#.proto"
    ".game.redis.Fantype_to_FanNum\0226\n\016m_mappl"
    "ayergps\030\? \003(\0132\036.proto.game.redis.tagPlay"
    "erGPS\022-\n\007players\030@ \003(\0132\034.proto.game.redi"
    "s.tagPlayers\022\027\n\017m_useroperateid\030A \003(\005\022\025\n"
    "\rm_autodisband\030B \001(\005\022\030\n\020m_bisautodisband"
    "\030C \001(\010\022\027\n\017m_tablebranchid\030D \001(\005\022\025\n\rm_nto"
    "talcount\030E \001(\005\022\027\n\017m_ncurrentcount\030F \001(\005\022"
    "\030\n\020m_userchoosemode\030G \003(\005\022\024\n\014m_voice_roo"
    "m\030H \001(\005\022\024\n\014m_start_time\030I \001(\005\022\024\n\014m_vecop"
    "cards\030J \003(\005\022\031\n\021m_preofflinestate\030K \003(\010\022\024"
    "\n\014m_isclubroom\030L \001(\005\022\033\n\023m_public_channel"
    "_id\030M \001(\t\022\033\n\023m_group_channel_ids\030N \003(\t\022\026"
    "\n\016m_voice_status\030O \003(\005\022\031\n\021m_maxhandcards"
    "ize\030P \001(\005", 6609);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "redisproto.proto", &protobuf_RegisterTypes);
  tagPlayers::default_instance_ = new tagPlayers();
  Seat::default_instance_ = new Seat();
  MJConfCommon::default_instance_ = new MJConfCommon();
  MJConfPiao::default_instance_ = new MJConfPiao();
  MJConfBuyHorse::default_instance_ = new MJConfBuyHorse();
  MJConfZhuaniao::default_instance_ = new MJConfZhuaniao();
  MJHuType::default_instance_ = new MJHuType();
  MJConfOther::default_instance_ = new MJConfOther();
  MJCustomizedConf::default_instance_ = new MJCustomizedConf();
  RoundScore::default_instance_ = new RoundScore();
  Table_TotalRecordInfo::default_instance_ = new Table_TotalRecordInfo();
  Shai_Set::default_instance_ = new Shai_Set();
  FixedCard::default_instance_ = new FixedCard();
  HandCards::default_instance_ = new HandCards();
  CCardTypePool::default_instance_ = new CCardTypePool();
  CCardPool::default_instance_ = new CCardPool();
  MultiOpInfo::default_instance_ = new MultiOpInfo();
  RobAddInfo::default_instance_ = new RobAddInfo();
  LOWLEVELOPERATE::default_instance_ = new LOWLEVELOPERATE();
  tagGangScore::default_instance_ = new tagGangScore();
  tagGangScoreInfo::default_instance_ = new tagGangScoreInfo();
  tagHuRecord::default_instance_ = new tagHuRecord();
  tagHuInfo::default_instance_ = new tagHuInfo();
  MJ_BUFFER::default_instance_ = new MJ_BUFFER();
  HuFanInfo::default_instance_ = new HuFanInfo();
  CGameAccout::default_instance_ = new CGameAccout();
  ForbidWin::default_instance_ = new ForbidWin();
  Fantype_to_FanNum::default_instance_ = new Fantype_to_FanNum();
  tagPlayerGPS::default_instance_ = new tagPlayerGPS();
  tagRedisInfo::default_instance_ = new tagRedisInfo();
  tagPlayers::default_instance_->InitAsDefaultInstance();
  Seat::default_instance_->InitAsDefaultInstance();
  MJConfCommon::default_instance_->InitAsDefaultInstance();
  MJConfPiao::default_instance_->InitAsDefaultInstance();
  MJConfBuyHorse::default_instance_->InitAsDefaultInstance();
  MJConfZhuaniao::default_instance_->InitAsDefaultInstance();
  MJHuType::default_instance_->InitAsDefaultInstance();
  MJConfOther::default_instance_->InitAsDefaultInstance();
  MJCustomizedConf::default_instance_->InitAsDefaultInstance();
  RoundScore::default_instance_->InitAsDefaultInstance();
  Table_TotalRecordInfo::default_instance_->InitAsDefaultInstance();
  Shai_Set::default_instance_->InitAsDefaultInstance();
  FixedCard::default_instance_->InitAsDefaultInstance();
  HandCards::default_instance_->InitAsDefaultInstance();
  CCardTypePool::default_instance_->InitAsDefaultInstance();
  CCardPool::default_instance_->InitAsDefaultInstance();
  MultiOpInfo::default_instance_->InitAsDefaultInstance();
  RobAddInfo::default_instance_->InitAsDefaultInstance();
  LOWLEVELOPERATE::default_instance_->InitAsDefaultInstance();
  tagGangScore::default_instance_->InitAsDefaultInstance();
  tagGangScoreInfo::default_instance_->InitAsDefaultInstance();
  tagHuRecord::default_instance_->InitAsDefaultInstance();
  tagHuInfo::default_instance_->InitAsDefaultInstance();
  MJ_BUFFER::default_instance_->InitAsDefaultInstance();
  HuFanInfo::default_instance_->InitAsDefaultInstance();
  CGameAccout::default_instance_->InitAsDefaultInstance();
  ForbidWin::default_instance_->InitAsDefaultInstance();
  Fantype_to_FanNum::default_instance_->InitAsDefaultInstance();
  tagPlayerGPS::default_instance_->InitAsDefaultInstance();
  tagRedisInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_redisproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_redisproto_2eproto {
  StaticDescriptorInitializer_redisproto_2eproto() {
    protobuf_AddDesc_redisproto_2eproto();
  }
} static_descriptor_initializer_redisproto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int tagPlayers::kUidFieldNumber;
const int tagPlayers::kTidFieldNumber;
const int tagPlayers::kSkeyFieldNumber;
const int tagPlayers::kNameFieldNumber;
const int tagPlayers::kAvatarFieldNumber;
const int tagPlayers::kSeatidFieldNumber;
const int tagPlayers::kSexFieldNumber;
const int tagPlayers::kExpFieldNumber;
const int tagPlayers::kRmbFieldNumber;
const int tagPlayers::kMoneyFieldNumber;
const int tagPlayers::kCoinFieldNumber;
const int tagPlayers::kPcountFieldNumber;
const int tagPlayers::kVlevelFieldNumber;
const int tagPlayers::kStatusFieldNumber;
const int tagPlayers::kLogoutTypeFieldNumber;
const int tagPlayers::kDownTagFieldNumber;
const int tagPlayers::kUsertypeFieldNumber;
const int tagPlayers::kDisbandcountFieldNumber;
#endif  // !_MSC_VER

tagPlayers::tagPlayers()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.tagPlayers)
}

void tagPlayers::InitAsDefaultInstance() {
}

tagPlayers::tagPlayers(const tagPlayers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.tagPlayers)
}

void tagPlayers::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0;
  tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seatid_ = 0;
  sex_ = 0;
  exp_ = 0;
  rmb_ = 0;
  money_ = 0;
  coin_ = 0;
  pcount_ = 0;
  vlevel_ = 0;
  status_ = 0;
  logout_type_ = 0;
  down_tag_ = 0;
  usertype_ = 0;
  disbandcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagPlayers::~tagPlayers() {
  // @@protoc_insertion_point(destructor:proto.game.redis.tagPlayers)
  SharedDtor();
}

void tagPlayers::SharedDtor() {
  if (tid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tid_;
  }
  if (skey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skey_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (this != default_instance_) {
  }
}

void tagPlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPlayers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagPlayers_descriptor_;
}

const tagPlayers& tagPlayers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

tagPlayers* tagPlayers::default_instance_ = NULL;

tagPlayers* tagPlayers::New() const {
  return new tagPlayers;
}

void tagPlayers::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<tagPlayers*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, seatid_);
    ZR_(sex_, exp_);
    if (has_tid()) {
      if (tid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tid_->clear();
      }
    }
    if (has_skey()) {
      if (skey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        skey_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(rmb_, down_tag_);
  }
  ZR_(usertype_, disbandcount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagPlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.tagPlayers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tid;
        break;
      }

      // optional string tid = 2;
      case 2: {
        if (tag == 18) {
         parse_tid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tid().data(), this->tid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_skey;
        break;
      }

      // optional string skey = 3;
      case 3: {
        if (tag == 26) {
         parse_skey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->skey().data(), this->skey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "skey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_avatar;
        break;
      }

      // optional string avatar = 5;
      case 5: {
        if (tag == 42) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 6;
      case 6: {
        if (tag == 48) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sex;
        break;
      }

      // optional int32 sex = 7;
      case 7: {
        if (tag == 56) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // optional int32 exp = 8;
      case 8: {
        if (tag == 64) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_rmb;
        break;
      }

      // optional int32 rmb = 9;
      case 9: {
        if (tag == 72) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_money;
        break;
      }

      // optional int32 money = 10;
      case 10: {
        if (tag == 80) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_coin;
        break;
      }

      // optional int32 coin = 11;
      case 11: {
        if (tag == 88) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_pcount;
        break;
      }

      // optional int32 pcount = 12;
      case 12: {
        if (tag == 96) {
         parse_pcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pcount_)));
          set_has_pcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_vlevel;
        break;
      }

      // optional int32 vlevel = 13;
      case 13: {
        if (tag == 104) {
         parse_vlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vlevel_)));
          set_has_vlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_status;
        break;
      }

      // optional int32 status = 14;
      case 14: {
        if (tag == 112) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_logout_type;
        break;
      }

      // optional int32 logout_type = 15;
      case 15: {
        if (tag == 120) {
         parse_logout_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logout_type_)));
          set_has_logout_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_down_tag;
        break;
      }

      // optional int32 down_tag = 16;
      case 16: {
        if (tag == 128) {
         parse_down_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &down_tag_)));
          set_has_down_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_usertype;
        break;
      }

      // optional int32 usertype = 17;
      case 17: {
        if (tag == 136) {
         parse_usertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usertype_)));
          set_has_usertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_disbandcount;
        break;
      }

      // optional int32 disbandcount = 18;
      case 18: {
        if (tag == 144) {
         parse_disbandcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disbandcount_)));
          set_has_disbandcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.tagPlayers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.tagPlayers)
  return false;
#undef DO_
}

void tagPlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.tagPlayers)
  // optional int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional string tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tid().data(), this->tid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tid(), output);
  }

  // optional string skey = 3;
  if (has_skey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skey().data(), this->skey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->skey(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->avatar(), output);
  }

  // optional int32 seatid = 6;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->seatid(), output);
  }

  // optional int32 sex = 7;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sex(), output);
  }

  // optional int32 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->exp(), output);
  }

  // optional int32 rmb = 9;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->rmb(), output);
  }

  // optional int32 money = 10;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->money(), output);
  }

  // optional int32 coin = 11;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->coin(), output);
  }

  // optional int32 pcount = 12;
  if (has_pcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->pcount(), output);
  }

  // optional int32 vlevel = 13;
  if (has_vlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->vlevel(), output);
  }

  // optional int32 status = 14;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->status(), output);
  }

  // optional int32 logout_type = 15;
  if (has_logout_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->logout_type(), output);
  }

  // optional int32 down_tag = 16;
  if (has_down_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->down_tag(), output);
  }

  // optional int32 usertype = 17;
  if (has_usertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->usertype(), output);
  }

  // optional int32 disbandcount = 18;
  if (has_disbandcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->disbandcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.tagPlayers)
}

::google::protobuf::uint8* tagPlayers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.tagPlayers)
  // optional int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional string tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tid().data(), this->tid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tid(), target);
  }

  // optional string skey = 3;
  if (has_skey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skey().data(), this->skey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->skey(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->avatar(), target);
  }

  // optional int32 seatid = 6;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->seatid(), target);
  }

  // optional int32 sex = 7;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sex(), target);
  }

  // optional int32 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->exp(), target);
  }

  // optional int32 rmb = 9;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->rmb(), target);
  }

  // optional int32 money = 10;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->money(), target);
  }

  // optional int32 coin = 11;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->coin(), target);
  }

  // optional int32 pcount = 12;
  if (has_pcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->pcount(), target);
  }

  // optional int32 vlevel = 13;
  if (has_vlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->vlevel(), target);
  }

  // optional int32 status = 14;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->status(), target);
  }

  // optional int32 logout_type = 15;
  if (has_logout_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->logout_type(), target);
  }

  // optional int32 down_tag = 16;
  if (has_down_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->down_tag(), target);
  }

  // optional int32 usertype = 17;
  if (has_usertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->usertype(), target);
  }

  // optional int32 disbandcount = 18;
  if (has_disbandcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->disbandcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.tagPlayers)
  return target;
}

int tagPlayers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional string tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tid());
    }

    // optional string skey = 3;
    if (has_skey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skey());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string avatar = 5;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // optional int32 seatid = 6;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 sex = 7;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 rmb = 9;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }

    // optional int32 money = 10;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 coin = 11;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

    // optional int32 pcount = 12;
    if (has_pcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pcount());
    }

    // optional int32 vlevel = 13;
    if (has_vlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vlevel());
    }

    // optional int32 status = 14;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 logout_type = 15;
    if (has_logout_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logout_type());
    }

    // optional int32 down_tag = 16;
    if (has_down_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->down_tag());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 usertype = 17;
    if (has_usertype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usertype());
    }

    // optional int32 disbandcount = 18;
    if (has_disbandcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->disbandcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPlayers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagPlayers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagPlayers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagPlayers::MergeFrom(const tagPlayers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_skey()) {
      set_skey(from.skey());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_pcount()) {
      set_pcount(from.pcount());
    }
    if (from.has_vlevel()) {
      set_vlevel(from.vlevel());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_logout_type()) {
      set_logout_type(from.logout_type());
    }
    if (from.has_down_tag()) {
      set_down_tag(from.down_tag());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_usertype()) {
      set_usertype(from.usertype());
    }
    if (from.has_disbandcount()) {
      set_disbandcount(from.disbandcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagPlayers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPlayers::CopyFrom(const tagPlayers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPlayers::IsInitialized() const {

  return true;
}

void tagPlayers::Swap(tagPlayers* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(tid_, other->tid_);
    std::swap(skey_, other->skey_);
    std::swap(name_, other->name_);
    std::swap(avatar_, other->avatar_);
    std::swap(seatid_, other->seatid_);
    std::swap(sex_, other->sex_);
    std::swap(exp_, other->exp_);
    std::swap(rmb_, other->rmb_);
    std::swap(money_, other->money_);
    std::swap(coin_, other->coin_);
    std::swap(pcount_, other->pcount_);
    std::swap(vlevel_, other->vlevel_);
    std::swap(status_, other->status_);
    std::swap(logout_type_, other->logout_type_);
    std::swap(down_tag_, other->down_tag_);
    std::swap(usertype_, other->usertype_);
    std::swap(disbandcount_, other->disbandcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagPlayers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagPlayers_descriptor_;
  metadata.reflection = tagPlayers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Seat::kStateFieldNumber;
const int Seat::kSeatidFieldNumber;
const int Seat::kActionFieldNumber;
const int Seat::kUidFieldNumber;
#endif  // !_MSC_VER

Seat::Seat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.Seat)
}

void Seat::InitAsDefaultInstance() {
}

Seat::Seat(const Seat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.Seat)
}

void Seat::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  seatid_ = 0;
  action_ = 0;
  uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Seat::~Seat() {
  // @@protoc_insertion_point(destructor:proto.game.redis.Seat)
  SharedDtor();
}

void Seat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Seat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Seat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Seat_descriptor_;
}

const Seat& Seat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

Seat* Seat::default_instance_ = NULL;

Seat* Seat::New() const {
  return new Seat;
}

void Seat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Seat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Seat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.Seat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 2;
      case 2: {
        if (tag == 16) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // optional int32 action = 3;
      case 3: {
        if (tag == 24) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_uid;
        break;
      }

      // optional int32 uid = 4;
      case 4: {
        if (tag == 32) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.Seat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.Seat)
  return false;
#undef DO_
}

void Seat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.Seat)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // optional int32 action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->action(), output);
  }

  // optional int32 uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.Seat)
}

::google::protobuf::uint8* Seat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.Seat)
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // optional int32 action = 3;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->action(), target);
  }

  // optional int32 uid = 4;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.Seat)
  return target;
}

int Seat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

    // optional int32 uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Seat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Seat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Seat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Seat::MergeFrom(const Seat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Seat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Seat::CopyFrom(const Seat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Seat::IsInitialized() const {

  return true;
}

void Seat::Swap(Seat* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(seatid_, other->seatid_);
    std::swap(action_, other->action_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Seat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Seat_descriptor_;
  metadata.reflection = Seat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJConfCommon::kMBsupportchiFieldNumber;
const int MJConfCommon::kMBsupportwindFieldNumber;
const int MJConfCommon::kMBsupporttingFieldNumber;
const int MJConfCommon::kMBzimohuFieldNumber;
const int MJConfCommon::kMByipaoduoxiangFieldNumber;
const int MJConfCommon::kMBqiangganghuFieldNumber;
const int MJConfCommon::kMBqiangzhigangFieldNumber;
const int MJConfCommon::kMBqiangangangFieldNumber;
const int MJConfCommon::kMBqangshangpaoFieldNumber;
const int MJConfCommon::kMBhuanggangFieldNumber;
const int MJConfCommon::kMBzhuangxianFieldNumber;
const int MJConfCommon::kMBforcehuqiangganghuFieldNumber;
const int MJConfCommon::kMBfourcehumutilhuFieldNumber;
const int MJConfCommon::kMAngangpointFieldNumber;
const int MJConfCommon::kMWangangpointFieldNumber;
const int MJConfCommon::kMZhigangpointFieldNumber;
#endif  // !_MSC_VER

MJConfCommon::MJConfCommon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.MJConfCommon)
}

void MJConfCommon::InitAsDefaultInstance() {
}

MJConfCommon::MJConfCommon(const MJConfCommon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.MJConfCommon)
}

void MJConfCommon::SharedCtor() {
  _cached_size_ = 0;
  m_bsupportchi_ = false;
  m_bsupportwind_ = false;
  m_bsupportting_ = false;
  m_bzimohu_ = false;
  m_byipaoduoxiang_ = false;
  m_bqiangganghu_ = false;
  m_bqiangzhigang_ = false;
  m_bqiangangang_ = false;
  m_bqangshangpao_ = false;
  m_bhuanggang_ = false;
  m_bzhuangxian_ = false;
  m_bforcehuqiangganghu_ = false;
  m_bfourcehumutilhu_ = false;
  m_angangpoint_ = 0;
  m_wangangpoint_ = 0;
  m_zhigangpoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJConfCommon::~MJConfCommon() {
  // @@protoc_insertion_point(destructor:proto.game.redis.MJConfCommon)
  SharedDtor();
}

void MJConfCommon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MJConfCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJConfCommon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJConfCommon_descriptor_;
}

const MJConfCommon& MJConfCommon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

MJConfCommon* MJConfCommon::default_instance_ = NULL;

MJConfCommon* MJConfCommon::New() const {
  return new MJConfCommon;
}

void MJConfCommon::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MJConfCommon*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(m_bsupportchi_, m_bqiangangang_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(m_bqangshangpao_, m_zhigangpoint_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJConfCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.MJConfCommon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool m_bsupportchi = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bsupportchi_)));
          set_has_m_bsupportchi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_bsupportwind;
        break;
      }

      // optional bool m_bsupportwind = 2;
      case 2: {
        if (tag == 16) {
         parse_m_bsupportwind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bsupportwind_)));
          set_has_m_bsupportwind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_bsupportting;
        break;
      }

      // optional bool m_bsupportting = 3;
      case 3: {
        if (tag == 24) {
         parse_m_bsupportting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bsupportting_)));
          set_has_m_bsupportting();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_bzimohu;
        break;
      }

      // optional bool m_bzimohu = 4;
      case 4: {
        if (tag == 32) {
         parse_m_bzimohu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bzimohu_)));
          set_has_m_bzimohu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_m_byipaoduoxiang;
        break;
      }

      // optional bool m_byipaoduoxiang = 5;
      case 5: {
        if (tag == 40) {
         parse_m_byipaoduoxiang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_byipaoduoxiang_)));
          set_has_m_byipaoduoxiang();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_m_bqiangganghu;
        break;
      }

      // optional bool m_bqiangganghu = 6;
      case 6: {
        if (tag == 48) {
         parse_m_bqiangganghu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bqiangganghu_)));
          set_has_m_bqiangganghu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_m_bqiangzhigang;
        break;
      }

      // optional bool m_bqiangzhigang = 7;
      case 7: {
        if (tag == 56) {
         parse_m_bqiangzhigang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bqiangzhigang_)));
          set_has_m_bqiangzhigang();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_m_bqiangangang;
        break;
      }

      // optional bool m_bqiangangang = 8;
      case 8: {
        if (tag == 64) {
         parse_m_bqiangangang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bqiangangang_)));
          set_has_m_bqiangangang();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_m_bqangshangpao;
        break;
      }

      // optional bool m_bqangshangpao = 9;
      case 9: {
        if (tag == 72) {
         parse_m_bqangshangpao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bqangshangpao_)));
          set_has_m_bqangshangpao();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_m_bhuanggang;
        break;
      }

      // optional bool m_bhuanggang = 10;
      case 10: {
        if (tag == 80) {
         parse_m_bhuanggang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bhuanggang_)));
          set_has_m_bhuanggang();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_m_bzhuangxian;
        break;
      }

      // optional bool m_bzhuangxian = 11;
      case 11: {
        if (tag == 88) {
         parse_m_bzhuangxian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bzhuangxian_)));
          set_has_m_bzhuangxian();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_m_bforcehuqiangganghu;
        break;
      }

      // optional bool m_bforcehuqiangganghu = 12;
      case 12: {
        if (tag == 96) {
         parse_m_bforcehuqiangganghu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bforcehuqiangganghu_)));
          set_has_m_bforcehuqiangganghu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_m_bfourcehumutilhu;
        break;
      }

      // optional bool m_bfourcehumutilhu = 13;
      case 13: {
        if (tag == 104) {
         parse_m_bfourcehumutilhu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bfourcehumutilhu_)));
          set_has_m_bfourcehumutilhu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_m_angangpoint;
        break;
      }

      // optional int32 m_angangpoint = 14;
      case 14: {
        if (tag == 112) {
         parse_m_angangpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_angangpoint_)));
          set_has_m_angangpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_m_wangangpoint;
        break;
      }

      // optional int32 m_wangangpoint = 15;
      case 15: {
        if (tag == 120) {
         parse_m_wangangpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wangangpoint_)));
          set_has_m_wangangpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_m_zhigangpoint;
        break;
      }

      // optional int32 m_zhigangpoint = 16;
      case 16: {
        if (tag == 128) {
         parse_m_zhigangpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_zhigangpoint_)));
          set_has_m_zhigangpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.MJConfCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.MJConfCommon)
  return false;
#undef DO_
}

void MJConfCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.MJConfCommon)
  // optional bool m_bsupportchi = 1;
  if (has_m_bsupportchi()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->m_bsupportchi(), output);
  }

  // optional bool m_bsupportwind = 2;
  if (has_m_bsupportwind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->m_bsupportwind(), output);
  }

  // optional bool m_bsupportting = 3;
  if (has_m_bsupportting()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->m_bsupportting(), output);
  }

  // optional bool m_bzimohu = 4;
  if (has_m_bzimohu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->m_bzimohu(), output);
  }

  // optional bool m_byipaoduoxiang = 5;
  if (has_m_byipaoduoxiang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->m_byipaoduoxiang(), output);
  }

  // optional bool m_bqiangganghu = 6;
  if (has_m_bqiangganghu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->m_bqiangganghu(), output);
  }

  // optional bool m_bqiangzhigang = 7;
  if (has_m_bqiangzhigang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->m_bqiangzhigang(), output);
  }

  // optional bool m_bqiangangang = 8;
  if (has_m_bqiangangang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->m_bqiangangang(), output);
  }

  // optional bool m_bqangshangpao = 9;
  if (has_m_bqangshangpao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->m_bqangshangpao(), output);
  }

  // optional bool m_bhuanggang = 10;
  if (has_m_bhuanggang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->m_bhuanggang(), output);
  }

  // optional bool m_bzhuangxian = 11;
  if (has_m_bzhuangxian()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->m_bzhuangxian(), output);
  }

  // optional bool m_bforcehuqiangganghu = 12;
  if (has_m_bforcehuqiangganghu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->m_bforcehuqiangganghu(), output);
  }

  // optional bool m_bfourcehumutilhu = 13;
  if (has_m_bfourcehumutilhu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->m_bfourcehumutilhu(), output);
  }

  // optional int32 m_angangpoint = 14;
  if (has_m_angangpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_angangpoint(), output);
  }

  // optional int32 m_wangangpoint = 15;
  if (has_m_wangangpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_wangangpoint(), output);
  }

  // optional int32 m_zhigangpoint = 16;
  if (has_m_zhigangpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_zhigangpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.MJConfCommon)
}

::google::protobuf::uint8* MJConfCommon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.MJConfCommon)
  // optional bool m_bsupportchi = 1;
  if (has_m_bsupportchi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->m_bsupportchi(), target);
  }

  // optional bool m_bsupportwind = 2;
  if (has_m_bsupportwind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->m_bsupportwind(), target);
  }

  // optional bool m_bsupportting = 3;
  if (has_m_bsupportting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->m_bsupportting(), target);
  }

  // optional bool m_bzimohu = 4;
  if (has_m_bzimohu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->m_bzimohu(), target);
  }

  // optional bool m_byipaoduoxiang = 5;
  if (has_m_byipaoduoxiang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->m_byipaoduoxiang(), target);
  }

  // optional bool m_bqiangganghu = 6;
  if (has_m_bqiangganghu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->m_bqiangganghu(), target);
  }

  // optional bool m_bqiangzhigang = 7;
  if (has_m_bqiangzhigang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->m_bqiangzhigang(), target);
  }

  // optional bool m_bqiangangang = 8;
  if (has_m_bqiangangang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->m_bqiangangang(), target);
  }

  // optional bool m_bqangshangpao = 9;
  if (has_m_bqangshangpao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->m_bqangshangpao(), target);
  }

  // optional bool m_bhuanggang = 10;
  if (has_m_bhuanggang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->m_bhuanggang(), target);
  }

  // optional bool m_bzhuangxian = 11;
  if (has_m_bzhuangxian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->m_bzhuangxian(), target);
  }

  // optional bool m_bforcehuqiangganghu = 12;
  if (has_m_bforcehuqiangganghu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->m_bforcehuqiangganghu(), target);
  }

  // optional bool m_bfourcehumutilhu = 13;
  if (has_m_bfourcehumutilhu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->m_bfourcehumutilhu(), target);
  }

  // optional int32 m_angangpoint = 14;
  if (has_m_angangpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_angangpoint(), target);
  }

  // optional int32 m_wangangpoint = 15;
  if (has_m_wangangpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_wangangpoint(), target);
  }

  // optional int32 m_zhigangpoint = 16;
  if (has_m_zhigangpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_zhigangpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.MJConfCommon)
  return target;
}

int MJConfCommon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool m_bsupportchi = 1;
    if (has_m_bsupportchi()) {
      total_size += 1 + 1;
    }

    // optional bool m_bsupportwind = 2;
    if (has_m_bsupportwind()) {
      total_size += 1 + 1;
    }

    // optional bool m_bsupportting = 3;
    if (has_m_bsupportting()) {
      total_size += 1 + 1;
    }

    // optional bool m_bzimohu = 4;
    if (has_m_bzimohu()) {
      total_size += 1 + 1;
    }

    // optional bool m_byipaoduoxiang = 5;
    if (has_m_byipaoduoxiang()) {
      total_size += 1 + 1;
    }

    // optional bool m_bqiangganghu = 6;
    if (has_m_bqiangganghu()) {
      total_size += 1 + 1;
    }

    // optional bool m_bqiangzhigang = 7;
    if (has_m_bqiangzhigang()) {
      total_size += 1 + 1;
    }

    // optional bool m_bqiangangang = 8;
    if (has_m_bqiangangang()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool m_bqangshangpao = 9;
    if (has_m_bqangshangpao()) {
      total_size += 1 + 1;
    }

    // optional bool m_bhuanggang = 10;
    if (has_m_bhuanggang()) {
      total_size += 1 + 1;
    }

    // optional bool m_bzhuangxian = 11;
    if (has_m_bzhuangxian()) {
      total_size += 1 + 1;
    }

    // optional bool m_bforcehuqiangganghu = 12;
    if (has_m_bforcehuqiangganghu()) {
      total_size += 1 + 1;
    }

    // optional bool m_bfourcehumutilhu = 13;
    if (has_m_bfourcehumutilhu()) {
      total_size += 1 + 1;
    }

    // optional int32 m_angangpoint = 14;
    if (has_m_angangpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_angangpoint());
    }

    // optional int32 m_wangangpoint = 15;
    if (has_m_wangangpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wangangpoint());
    }

    // optional int32 m_zhigangpoint = 16;
    if (has_m_zhigangpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_zhigangpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJConfCommon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJConfCommon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJConfCommon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJConfCommon::MergeFrom(const MJConfCommon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_bsupportchi()) {
      set_m_bsupportchi(from.m_bsupportchi());
    }
    if (from.has_m_bsupportwind()) {
      set_m_bsupportwind(from.m_bsupportwind());
    }
    if (from.has_m_bsupportting()) {
      set_m_bsupportting(from.m_bsupportting());
    }
    if (from.has_m_bzimohu()) {
      set_m_bzimohu(from.m_bzimohu());
    }
    if (from.has_m_byipaoduoxiang()) {
      set_m_byipaoduoxiang(from.m_byipaoduoxiang());
    }
    if (from.has_m_bqiangganghu()) {
      set_m_bqiangganghu(from.m_bqiangganghu());
    }
    if (from.has_m_bqiangzhigang()) {
      set_m_bqiangzhigang(from.m_bqiangzhigang());
    }
    if (from.has_m_bqiangangang()) {
      set_m_bqiangangang(from.m_bqiangangang());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_bqangshangpao()) {
      set_m_bqangshangpao(from.m_bqangshangpao());
    }
    if (from.has_m_bhuanggang()) {
      set_m_bhuanggang(from.m_bhuanggang());
    }
    if (from.has_m_bzhuangxian()) {
      set_m_bzhuangxian(from.m_bzhuangxian());
    }
    if (from.has_m_bforcehuqiangganghu()) {
      set_m_bforcehuqiangganghu(from.m_bforcehuqiangganghu());
    }
    if (from.has_m_bfourcehumutilhu()) {
      set_m_bfourcehumutilhu(from.m_bfourcehumutilhu());
    }
    if (from.has_m_angangpoint()) {
      set_m_angangpoint(from.m_angangpoint());
    }
    if (from.has_m_wangangpoint()) {
      set_m_wangangpoint(from.m_wangangpoint());
    }
    if (from.has_m_zhigangpoint()) {
      set_m_zhigangpoint(from.m_zhigangpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJConfCommon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJConfCommon::CopyFrom(const MJConfCommon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJConfCommon::IsInitialized() const {

  return true;
}

void MJConfCommon::Swap(MJConfCommon* other) {
  if (other != this) {
    std::swap(m_bsupportchi_, other->m_bsupportchi_);
    std::swap(m_bsupportwind_, other->m_bsupportwind_);
    std::swap(m_bsupportting_, other->m_bsupportting_);
    std::swap(m_bzimohu_, other->m_bzimohu_);
    std::swap(m_byipaoduoxiang_, other->m_byipaoduoxiang_);
    std::swap(m_bqiangganghu_, other->m_bqiangganghu_);
    std::swap(m_bqiangzhigang_, other->m_bqiangzhigang_);
    std::swap(m_bqiangangang_, other->m_bqiangangang_);
    std::swap(m_bqangshangpao_, other->m_bqangshangpao_);
    std::swap(m_bhuanggang_, other->m_bhuanggang_);
    std::swap(m_bzhuangxian_, other->m_bzhuangxian_);
    std::swap(m_bforcehuqiangganghu_, other->m_bforcehuqiangganghu_);
    std::swap(m_bfourcehumutilhu_, other->m_bfourcehumutilhu_);
    std::swap(m_angangpoint_, other->m_angangpoint_);
    std::swap(m_wangangpoint_, other->m_wangangpoint_);
    std::swap(m_zhigangpoint_, other->m_zhigangpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJConfCommon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJConfCommon_descriptor_;
  metadata.reflection = MJConfCommon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJConfPiao::kMBsupportpiaoFieldNumber;
const int MJConfPiao::kMPiaoFieldNumber;
#endif  // !_MSC_VER

MJConfPiao::MJConfPiao()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.MJConfPiao)
}

void MJConfPiao::InitAsDefaultInstance() {
}

MJConfPiao::MJConfPiao(const MJConfPiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.MJConfPiao)
}

void MJConfPiao::SharedCtor() {
  _cached_size_ = 0;
  m_bsupportpiao_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJConfPiao::~MJConfPiao() {
  // @@protoc_insertion_point(destructor:proto.game.redis.MJConfPiao)
  SharedDtor();
}

void MJConfPiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MJConfPiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJConfPiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJConfPiao_descriptor_;
}

const MJConfPiao& MJConfPiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

MJConfPiao* MJConfPiao::default_instance_ = NULL;

MJConfPiao* MJConfPiao::New() const {
  return new MJConfPiao;
}

void MJConfPiao::Clear() {
  m_bsupportpiao_ = false;
  m_piao_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJConfPiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.MJConfPiao)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool m_bsupportpiao = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bsupportpiao_)));
          set_has_m_bsupportpiao();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_piao;
        break;
      }

      // repeated int32 m_piao = 2;
      case 2: {
        if (tag == 16) {
         parse_m_piao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_m_piao())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_piao())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_piao;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.MJConfPiao)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.MJConfPiao)
  return false;
#undef DO_
}

void MJConfPiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.MJConfPiao)
  // optional bool m_bsupportpiao = 1;
  if (has_m_bsupportpiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->m_bsupportpiao(), output);
  }

  // repeated int32 m_piao = 2;
  for (int i = 0; i < this->m_piao_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->m_piao(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.MJConfPiao)
}

::google::protobuf::uint8* MJConfPiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.MJConfPiao)
  // optional bool m_bsupportpiao = 1;
  if (has_m_bsupportpiao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->m_bsupportpiao(), target);
  }

  // repeated int32 m_piao = 2;
  for (int i = 0; i < this->m_piao_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->m_piao(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.MJConfPiao)
  return target;
}

int MJConfPiao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool m_bsupportpiao = 1;
    if (has_m_bsupportpiao()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 m_piao = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_piao_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_piao(i));
    }
    total_size += 1 * this->m_piao_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJConfPiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJConfPiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJConfPiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJConfPiao::MergeFrom(const MJConfPiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_piao_.MergeFrom(from.m_piao_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_bsupportpiao()) {
      set_m_bsupportpiao(from.m_bsupportpiao());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJConfPiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJConfPiao::CopyFrom(const MJConfPiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJConfPiao::IsInitialized() const {

  return true;
}

void MJConfPiao::Swap(MJConfPiao* other) {
  if (other != this) {
    std::swap(m_bsupportpiao_, other->m_bsupportpiao_);
    m_piao_.Swap(&other->m_piao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJConfPiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJConfPiao_descriptor_;
  metadata.reflection = MJConfPiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJConfBuyHorse::kMBsupportbuyhorseFieldNumber;
const int MJConfBuyHorse::kMHorsenumFieldNumber;
const int MJConfBuyHorse::kMHorsemaxnumFieldNumber;
const int MJConfBuyHorse::kMNbuyhorseincnumFieldNumber;
const int MJConfBuyHorse::kMBuyhorsemojijiangjiFieldNumber;
#endif  // !_MSC_VER

MJConfBuyHorse::MJConfBuyHorse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.MJConfBuyHorse)
}

void MJConfBuyHorse::InitAsDefaultInstance() {
}

MJConfBuyHorse::MJConfBuyHorse(const MJConfBuyHorse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.MJConfBuyHorse)
}

void MJConfBuyHorse::SharedCtor() {
  _cached_size_ = 0;
  m_bsupportbuyhorse_ = false;
  m_horsenum_ = 0;
  m_horsemaxnum_ = 0;
  m_nbuyhorseincnum_ = 0;
  m_buyhorsemojijiangji_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJConfBuyHorse::~MJConfBuyHorse() {
  // @@protoc_insertion_point(destructor:proto.game.redis.MJConfBuyHorse)
  SharedDtor();
}

void MJConfBuyHorse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MJConfBuyHorse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJConfBuyHorse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJConfBuyHorse_descriptor_;
}

const MJConfBuyHorse& MJConfBuyHorse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

MJConfBuyHorse* MJConfBuyHorse::default_instance_ = NULL;

MJConfBuyHorse* MJConfBuyHorse::New() const {
  return new MJConfBuyHorse;
}

void MJConfBuyHorse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MJConfBuyHorse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(m_horsenum_, m_nbuyhorseincnum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJConfBuyHorse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.MJConfBuyHorse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool m_bsupportbuyhorse = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bsupportbuyhorse_)));
          set_has_m_bsupportbuyhorse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_horsenum;
        break;
      }

      // optional int32 m_horsenum = 2;
      case 2: {
        if (tag == 16) {
         parse_m_horsenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_horsenum_)));
          set_has_m_horsenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_horsemaxnum;
        break;
      }

      // optional int32 m_horsemaxnum = 3;
      case 3: {
        if (tag == 24) {
         parse_m_horsemaxnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_horsemaxnum_)));
          set_has_m_horsemaxnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_nbuyhorseincnum;
        break;
      }

      // optional int32 m_nbuyhorseincnum = 4;
      case 4: {
        if (tag == 32) {
         parse_m_nbuyhorseincnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nbuyhorseincnum_)));
          set_has_m_nbuyhorseincnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_m_buyhorsemojijiangji;
        break;
      }

      // optional bool m_buyhorsemojijiangji = 5;
      case 5: {
        if (tag == 40) {
         parse_m_buyhorsemojijiangji:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_buyhorsemojijiangji_)));
          set_has_m_buyhorsemojijiangji();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.MJConfBuyHorse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.MJConfBuyHorse)
  return false;
#undef DO_
}

void MJConfBuyHorse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.MJConfBuyHorse)
  // optional bool m_bsupportbuyhorse = 1;
  if (has_m_bsupportbuyhorse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->m_bsupportbuyhorse(), output);
  }

  // optional int32 m_horsenum = 2;
  if (has_m_horsenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_horsenum(), output);
  }

  // optional int32 m_horsemaxnum = 3;
  if (has_m_horsemaxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_horsemaxnum(), output);
  }

  // optional int32 m_nbuyhorseincnum = 4;
  if (has_m_nbuyhorseincnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_nbuyhorseincnum(), output);
  }

  // optional bool m_buyhorsemojijiangji = 5;
  if (has_m_buyhorsemojijiangji()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->m_buyhorsemojijiangji(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.MJConfBuyHorse)
}

::google::protobuf::uint8* MJConfBuyHorse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.MJConfBuyHorse)
  // optional bool m_bsupportbuyhorse = 1;
  if (has_m_bsupportbuyhorse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->m_bsupportbuyhorse(), target);
  }

  // optional int32 m_horsenum = 2;
  if (has_m_horsenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_horsenum(), target);
  }

  // optional int32 m_horsemaxnum = 3;
  if (has_m_horsemaxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_horsemaxnum(), target);
  }

  // optional int32 m_nbuyhorseincnum = 4;
  if (has_m_nbuyhorseincnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_nbuyhorseincnum(), target);
  }

  // optional bool m_buyhorsemojijiangji = 5;
  if (has_m_buyhorsemojijiangji()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->m_buyhorsemojijiangji(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.MJConfBuyHorse)
  return target;
}

int MJConfBuyHorse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool m_bsupportbuyhorse = 1;
    if (has_m_bsupportbuyhorse()) {
      total_size += 1 + 1;
    }

    // optional int32 m_horsenum = 2;
    if (has_m_horsenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_horsenum());
    }

    // optional int32 m_horsemaxnum = 3;
    if (has_m_horsemaxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_horsemaxnum());
    }

    // optional int32 m_nbuyhorseincnum = 4;
    if (has_m_nbuyhorseincnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nbuyhorseincnum());
    }

    // optional bool m_buyhorsemojijiangji = 5;
    if (has_m_buyhorsemojijiangji()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJConfBuyHorse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJConfBuyHorse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJConfBuyHorse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJConfBuyHorse::MergeFrom(const MJConfBuyHorse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_bsupportbuyhorse()) {
      set_m_bsupportbuyhorse(from.m_bsupportbuyhorse());
    }
    if (from.has_m_horsenum()) {
      set_m_horsenum(from.m_horsenum());
    }
    if (from.has_m_horsemaxnum()) {
      set_m_horsemaxnum(from.m_horsemaxnum());
    }
    if (from.has_m_nbuyhorseincnum()) {
      set_m_nbuyhorseincnum(from.m_nbuyhorseincnum());
    }
    if (from.has_m_buyhorsemojijiangji()) {
      set_m_buyhorsemojijiangji(from.m_buyhorsemojijiangji());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJConfBuyHorse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJConfBuyHorse::CopyFrom(const MJConfBuyHorse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJConfBuyHorse::IsInitialized() const {

  return true;
}

void MJConfBuyHorse::Swap(MJConfBuyHorse* other) {
  if (other != this) {
    std::swap(m_bsupportbuyhorse_, other->m_bsupportbuyhorse_);
    std::swap(m_horsenum_, other->m_horsenum_);
    std::swap(m_horsemaxnum_, other->m_horsemaxnum_);
    std::swap(m_nbuyhorseincnum_, other->m_nbuyhorseincnum_);
    std::swap(m_buyhorsemojijiangji_, other->m_buyhorsemojijiangji_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJConfBuyHorse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJConfBuyHorse_descriptor_;
  metadata.reflection = MJConfBuyHorse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJConfZhuaniao::kMBsupportzhuaniaoFieldNumber;
const int MJConfZhuaniao::kMBcalcallniaoFieldNumber;
const int MJConfZhuaniao::kMZhuaniaonumFieldNumber;
const int MJConfZhuaniao::kMBjinniaoFieldNumber;
const int MJConfZhuaniao::kMBmojijiangjiFieldNumber;
#endif  // !_MSC_VER

MJConfZhuaniao::MJConfZhuaniao()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.MJConfZhuaniao)
}

void MJConfZhuaniao::InitAsDefaultInstance() {
}

MJConfZhuaniao::MJConfZhuaniao(const MJConfZhuaniao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.MJConfZhuaniao)
}

void MJConfZhuaniao::SharedCtor() {
  _cached_size_ = 0;
  m_bsupportzhuaniao_ = false;
  m_bcalcallniao_ = false;
  m_zhuaniaonum_ = 0;
  m_bjinniao_ = false;
  m_bmojijiangji_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJConfZhuaniao::~MJConfZhuaniao() {
  // @@protoc_insertion_point(destructor:proto.game.redis.MJConfZhuaniao)
  SharedDtor();
}

void MJConfZhuaniao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MJConfZhuaniao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJConfZhuaniao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJConfZhuaniao_descriptor_;
}

const MJConfZhuaniao& MJConfZhuaniao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

MJConfZhuaniao* MJConfZhuaniao::default_instance_ = NULL;

MJConfZhuaniao* MJConfZhuaniao::New() const {
  return new MJConfZhuaniao;
}

void MJConfZhuaniao::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MJConfZhuaniao*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(m_zhuaniaonum_, m_bmojijiangji_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJConfZhuaniao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.MJConfZhuaniao)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool m_bsupportzhuaniao = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bsupportzhuaniao_)));
          set_has_m_bsupportzhuaniao();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_bcalcallniao;
        break;
      }

      // optional bool m_bcalcallniao = 2;
      case 2: {
        if (tag == 16) {
         parse_m_bcalcallniao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bcalcallniao_)));
          set_has_m_bcalcallniao();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_zhuaniaonum;
        break;
      }

      // optional int32 m_zhuaniaonum = 3;
      case 3: {
        if (tag == 24) {
         parse_m_zhuaniaonum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_zhuaniaonum_)));
          set_has_m_zhuaniaonum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_bjinniao;
        break;
      }

      // optional bool m_bjinniao = 4;
      case 4: {
        if (tag == 32) {
         parse_m_bjinniao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bjinniao_)));
          set_has_m_bjinniao();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_m_bmojijiangji;
        break;
      }

      // optional bool m_bmojijiangji = 5;
      case 5: {
        if (tag == 40) {
         parse_m_bmojijiangji:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bmojijiangji_)));
          set_has_m_bmojijiangji();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.MJConfZhuaniao)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.MJConfZhuaniao)
  return false;
#undef DO_
}

void MJConfZhuaniao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.MJConfZhuaniao)
  // optional bool m_bsupportzhuaniao = 1;
  if (has_m_bsupportzhuaniao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->m_bsupportzhuaniao(), output);
  }

  // optional bool m_bcalcallniao = 2;
  if (has_m_bcalcallniao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->m_bcalcallniao(), output);
  }

  // optional int32 m_zhuaniaonum = 3;
  if (has_m_zhuaniaonum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_zhuaniaonum(), output);
  }

  // optional bool m_bjinniao = 4;
  if (has_m_bjinniao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->m_bjinniao(), output);
  }

  // optional bool m_bmojijiangji = 5;
  if (has_m_bmojijiangji()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->m_bmojijiangji(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.MJConfZhuaniao)
}

::google::protobuf::uint8* MJConfZhuaniao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.MJConfZhuaniao)
  // optional bool m_bsupportzhuaniao = 1;
  if (has_m_bsupportzhuaniao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->m_bsupportzhuaniao(), target);
  }

  // optional bool m_bcalcallniao = 2;
  if (has_m_bcalcallniao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->m_bcalcallniao(), target);
  }

  // optional int32 m_zhuaniaonum = 3;
  if (has_m_zhuaniaonum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_zhuaniaonum(), target);
  }

  // optional bool m_bjinniao = 4;
  if (has_m_bjinniao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->m_bjinniao(), target);
  }

  // optional bool m_bmojijiangji = 5;
  if (has_m_bmojijiangji()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->m_bmojijiangji(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.MJConfZhuaniao)
  return target;
}

int MJConfZhuaniao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool m_bsupportzhuaniao = 1;
    if (has_m_bsupportzhuaniao()) {
      total_size += 1 + 1;
    }

    // optional bool m_bcalcallniao = 2;
    if (has_m_bcalcallniao()) {
      total_size += 1 + 1;
    }

    // optional int32 m_zhuaniaonum = 3;
    if (has_m_zhuaniaonum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_zhuaniaonum());
    }

    // optional bool m_bjinniao = 4;
    if (has_m_bjinniao()) {
      total_size += 1 + 1;
    }

    // optional bool m_bmojijiangji = 5;
    if (has_m_bmojijiangji()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJConfZhuaniao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJConfZhuaniao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJConfZhuaniao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJConfZhuaniao::MergeFrom(const MJConfZhuaniao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_bsupportzhuaniao()) {
      set_m_bsupportzhuaniao(from.m_bsupportzhuaniao());
    }
    if (from.has_m_bcalcallniao()) {
      set_m_bcalcallniao(from.m_bcalcallniao());
    }
    if (from.has_m_zhuaniaonum()) {
      set_m_zhuaniaonum(from.m_zhuaniaonum());
    }
    if (from.has_m_bjinniao()) {
      set_m_bjinniao(from.m_bjinniao());
    }
    if (from.has_m_bmojijiangji()) {
      set_m_bmojijiangji(from.m_bmojijiangji());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJConfZhuaniao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJConfZhuaniao::CopyFrom(const MJConfZhuaniao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJConfZhuaniao::IsInitialized() const {

  return true;
}

void MJConfZhuaniao::Swap(MJConfZhuaniao* other) {
  if (other != this) {
    std::swap(m_bsupportzhuaniao_, other->m_bsupportzhuaniao_);
    std::swap(m_bcalcallniao_, other->m_bcalcallniao_);
    std::swap(m_zhuaniaonum_, other->m_zhuaniaonum_);
    std::swap(m_bjinniao_, other->m_bjinniao_);
    std::swap(m_bmojijiangji_, other->m_bmojijiangji_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJConfZhuaniao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJConfZhuaniao_descriptor_;
  metadata.reflection = MJConfZhuaniao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJHuType::kMBhu7DuiFieldNumber;
const int MJHuType::kMBhu13YaoFieldNumber;
const int MJHuType::kMBnosupportQuanqiurenFieldNumber;
#endif  // !_MSC_VER

MJHuType::MJHuType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.MJHuType)
}

void MJHuType::InitAsDefaultInstance() {
}

MJHuType::MJHuType(const MJHuType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.MJHuType)
}

void MJHuType::SharedCtor() {
  _cached_size_ = 0;
  m_bhu7dui_ = false;
  m_bhu13yao_ = false;
  m_bnosupport_quanqiuren_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJHuType::~MJHuType() {
  // @@protoc_insertion_point(destructor:proto.game.redis.MJHuType)
  SharedDtor();
}

void MJHuType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MJHuType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJHuType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJHuType_descriptor_;
}

const MJHuType& MJHuType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

MJHuType* MJHuType::default_instance_ = NULL;

MJHuType* MJHuType::New() const {
  return new MJHuType;
}

void MJHuType::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MJHuType*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(m_bhu7dui_, m_bnosupport_quanqiuren_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJHuType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.MJHuType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool m_bhu7dui = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bhu7dui_)));
          set_has_m_bhu7dui();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_bhu13yao;
        break;
      }

      // optional bool m_bhu13yao = 2;
      case 2: {
        if (tag == 16) {
         parse_m_bhu13yao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bhu13yao_)));
          set_has_m_bhu13yao();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_bnosupport_quanqiuren;
        break;
      }

      // optional bool m_bnosupport_quanqiuren = 3;
      case 3: {
        if (tag == 24) {
         parse_m_bnosupport_quanqiuren:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bnosupport_quanqiuren_)));
          set_has_m_bnosupport_quanqiuren();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.MJHuType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.MJHuType)
  return false;
#undef DO_
}

void MJHuType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.MJHuType)
  // optional bool m_bhu7dui = 1;
  if (has_m_bhu7dui()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->m_bhu7dui(), output);
  }

  // optional bool m_bhu13yao = 2;
  if (has_m_bhu13yao()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->m_bhu13yao(), output);
  }

  // optional bool m_bnosupport_quanqiuren = 3;
  if (has_m_bnosupport_quanqiuren()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->m_bnosupport_quanqiuren(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.MJHuType)
}

::google::protobuf::uint8* MJHuType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.MJHuType)
  // optional bool m_bhu7dui = 1;
  if (has_m_bhu7dui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->m_bhu7dui(), target);
  }

  // optional bool m_bhu13yao = 2;
  if (has_m_bhu13yao()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->m_bhu13yao(), target);
  }

  // optional bool m_bnosupport_quanqiuren = 3;
  if (has_m_bnosupport_quanqiuren()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->m_bnosupport_quanqiuren(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.MJHuType)
  return target;
}

int MJHuType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool m_bhu7dui = 1;
    if (has_m_bhu7dui()) {
      total_size += 1 + 1;
    }

    // optional bool m_bhu13yao = 2;
    if (has_m_bhu13yao()) {
      total_size += 1 + 1;
    }

    // optional bool m_bnosupport_quanqiuren = 3;
    if (has_m_bnosupport_quanqiuren()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJHuType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJHuType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJHuType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJHuType::MergeFrom(const MJHuType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_bhu7dui()) {
      set_m_bhu7dui(from.m_bhu7dui());
    }
    if (from.has_m_bhu13yao()) {
      set_m_bhu13yao(from.m_bhu13yao());
    }
    if (from.has_m_bnosupport_quanqiuren()) {
      set_m_bnosupport_quanqiuren(from.m_bnosupport_quanqiuren());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJHuType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJHuType::CopyFrom(const MJHuType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJHuType::IsInitialized() const {

  return true;
}

void MJHuType::Swap(MJHuType* other) {
  if (other != this) {
    std::swap(m_bhu7dui_, other->m_bhu7dui_);
    std::swap(m_bhu13yao_, other->m_bhu13yao_);
    std::swap(m_bnosupport_quanqiuren_, other->m_bnosupport_quanqiuren_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJHuType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJHuType_descriptor_;
  metadata.reflection = MJHuType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJConfOther::kMBsupportchangemodeFieldNumber;
const int MJConfOther::kMBofflinedelayopFieldNumber;
const int MJConfOther::kMBmulitfirstopisoverFieldNumber;
const int MJConfOther::kMBfastmodeFieldNumber;
const int MJConfOther::kMBautodisbandFieldNumber;
const int MJConfOther::kMBbankerfirst14FieldNumber;
const int MJConfOther::kMBangangnoshowFieldNumber;
const int MJConfOther::kMBshowgangscoreFieldNumber;
#endif  // !_MSC_VER

MJConfOther::MJConfOther()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.MJConfOther)
}

void MJConfOther::InitAsDefaultInstance() {
}

MJConfOther::MJConfOther(const MJConfOther& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.MJConfOther)
}

void MJConfOther::SharedCtor() {
  _cached_size_ = 0;
  m_bsupportchangemode_ = false;
  m_bofflinedelayop_ = false;
  m_bmulitfirstopisover_ = false;
  m_bfastmode_ = false;
  m_bautodisband_ = false;
  m_bbankerfirst14_ = false;
  m_bangangnoshow_ = false;
  m_bshowgangscore_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJConfOther::~MJConfOther() {
  // @@protoc_insertion_point(destructor:proto.game.redis.MJConfOther)
  SharedDtor();
}

void MJConfOther::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MJConfOther::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJConfOther::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJConfOther_descriptor_;
}

const MJConfOther& MJConfOther::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

MJConfOther* MJConfOther::default_instance_ = NULL;

MJConfOther* MJConfOther::New() const {
  return new MJConfOther;
}

void MJConfOther::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MJConfOther*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(m_bsupportchangemode_, m_bshowgangscore_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJConfOther::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.MJConfOther)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool m_bsupportchangemode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bsupportchangemode_)));
          set_has_m_bsupportchangemode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_bofflinedelayop;
        break;
      }

      // optional bool m_bofflinedelayop = 2;
      case 2: {
        if (tag == 16) {
         parse_m_bofflinedelayop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bofflinedelayop_)));
          set_has_m_bofflinedelayop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_bmulitfirstopisover;
        break;
      }

      // optional bool m_bmulitfirstopisover = 3;
      case 3: {
        if (tag == 24) {
         parse_m_bmulitfirstopisover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bmulitfirstopisover_)));
          set_has_m_bmulitfirstopisover();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_bfastmode;
        break;
      }

      // optional bool m_bfastmode = 4;
      case 4: {
        if (tag == 32) {
         parse_m_bfastmode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bfastmode_)));
          set_has_m_bfastmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_m_bautodisband;
        break;
      }

      // optional bool m_bautodisband = 5;
      case 5: {
        if (tag == 40) {
         parse_m_bautodisband:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bautodisband_)));
          set_has_m_bautodisband();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_m_bbankerfirst14;
        break;
      }

      // optional bool m_bbankerfirst14 = 6;
      case 6: {
        if (tag == 48) {
         parse_m_bbankerfirst14:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bbankerfirst14_)));
          set_has_m_bbankerfirst14();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_m_bangangnoshow;
        break;
      }

      // optional bool m_bangangnoshow = 7;
      case 7: {
        if (tag == 56) {
         parse_m_bangangnoshow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bangangnoshow_)));
          set_has_m_bangangnoshow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_m_bshowgangscore;
        break;
      }

      // optional bool m_bshowgangscore = 8;
      case 8: {
        if (tag == 64) {
         parse_m_bshowgangscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bshowgangscore_)));
          set_has_m_bshowgangscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.MJConfOther)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.MJConfOther)
  return false;
#undef DO_
}

void MJConfOther::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.MJConfOther)
  // optional bool m_bsupportchangemode = 1;
  if (has_m_bsupportchangemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->m_bsupportchangemode(), output);
  }

  // optional bool m_bofflinedelayop = 2;
  if (has_m_bofflinedelayop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->m_bofflinedelayop(), output);
  }

  // optional bool m_bmulitfirstopisover = 3;
  if (has_m_bmulitfirstopisover()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->m_bmulitfirstopisover(), output);
  }

  // optional bool m_bfastmode = 4;
  if (has_m_bfastmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->m_bfastmode(), output);
  }

  // optional bool m_bautodisband = 5;
  if (has_m_bautodisband()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->m_bautodisband(), output);
  }

  // optional bool m_bbankerfirst14 = 6;
  if (has_m_bbankerfirst14()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->m_bbankerfirst14(), output);
  }

  // optional bool m_bangangnoshow = 7;
  if (has_m_bangangnoshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->m_bangangnoshow(), output);
  }

  // optional bool m_bshowgangscore = 8;
  if (has_m_bshowgangscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->m_bshowgangscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.MJConfOther)
}

::google::protobuf::uint8* MJConfOther::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.MJConfOther)
  // optional bool m_bsupportchangemode = 1;
  if (has_m_bsupportchangemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->m_bsupportchangemode(), target);
  }

  // optional bool m_bofflinedelayop = 2;
  if (has_m_bofflinedelayop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->m_bofflinedelayop(), target);
  }

  // optional bool m_bmulitfirstopisover = 3;
  if (has_m_bmulitfirstopisover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->m_bmulitfirstopisover(), target);
  }

  // optional bool m_bfastmode = 4;
  if (has_m_bfastmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->m_bfastmode(), target);
  }

  // optional bool m_bautodisband = 5;
  if (has_m_bautodisband()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->m_bautodisband(), target);
  }

  // optional bool m_bbankerfirst14 = 6;
  if (has_m_bbankerfirst14()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->m_bbankerfirst14(), target);
  }

  // optional bool m_bangangnoshow = 7;
  if (has_m_bangangnoshow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->m_bangangnoshow(), target);
  }

  // optional bool m_bshowgangscore = 8;
  if (has_m_bshowgangscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->m_bshowgangscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.MJConfOther)
  return target;
}

int MJConfOther::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool m_bsupportchangemode = 1;
    if (has_m_bsupportchangemode()) {
      total_size += 1 + 1;
    }

    // optional bool m_bofflinedelayop = 2;
    if (has_m_bofflinedelayop()) {
      total_size += 1 + 1;
    }

    // optional bool m_bmulitfirstopisover = 3;
    if (has_m_bmulitfirstopisover()) {
      total_size += 1 + 1;
    }

    // optional bool m_bfastmode = 4;
    if (has_m_bfastmode()) {
      total_size += 1 + 1;
    }

    // optional bool m_bautodisband = 5;
    if (has_m_bautodisband()) {
      total_size += 1 + 1;
    }

    // optional bool m_bbankerfirst14 = 6;
    if (has_m_bbankerfirst14()) {
      total_size += 1 + 1;
    }

    // optional bool m_bangangnoshow = 7;
    if (has_m_bangangnoshow()) {
      total_size += 1 + 1;
    }

    // optional bool m_bshowgangscore = 8;
    if (has_m_bshowgangscore()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJConfOther::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJConfOther* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJConfOther*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJConfOther::MergeFrom(const MJConfOther& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_bsupportchangemode()) {
      set_m_bsupportchangemode(from.m_bsupportchangemode());
    }
    if (from.has_m_bofflinedelayop()) {
      set_m_bofflinedelayop(from.m_bofflinedelayop());
    }
    if (from.has_m_bmulitfirstopisover()) {
      set_m_bmulitfirstopisover(from.m_bmulitfirstopisover());
    }
    if (from.has_m_bfastmode()) {
      set_m_bfastmode(from.m_bfastmode());
    }
    if (from.has_m_bautodisband()) {
      set_m_bautodisband(from.m_bautodisband());
    }
    if (from.has_m_bbankerfirst14()) {
      set_m_bbankerfirst14(from.m_bbankerfirst14());
    }
    if (from.has_m_bangangnoshow()) {
      set_m_bangangnoshow(from.m_bangangnoshow());
    }
    if (from.has_m_bshowgangscore()) {
      set_m_bshowgangscore(from.m_bshowgangscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJConfOther::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJConfOther::CopyFrom(const MJConfOther& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJConfOther::IsInitialized() const {

  return true;
}

void MJConfOther::Swap(MJConfOther* other) {
  if (other != this) {
    std::swap(m_bsupportchangemode_, other->m_bsupportchangemode_);
    std::swap(m_bofflinedelayop_, other->m_bofflinedelayop_);
    std::swap(m_bmulitfirstopisover_, other->m_bmulitfirstopisover_);
    std::swap(m_bfastmode_, other->m_bfastmode_);
    std::swap(m_bautodisband_, other->m_bautodisband_);
    std::swap(m_bbankerfirst14_, other->m_bbankerfirst14_);
    std::swap(m_bangangnoshow_, other->m_bangangnoshow_);
    std::swap(m_bshowgangscore_, other->m_bshowgangscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJConfOther::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJConfOther_descriptor_;
  metadata.reflection = MJConfOther_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJCustomizedConf::kMjconfcommonFieldNumber;
const int MJCustomizedConf::kMjconfpiaoFieldNumber;
const int MJCustomizedConf::kMjconfbuyhorseFieldNumber;
const int MJCustomizedConf::kMjconfzhuaniaoFieldNumber;
const int MJCustomizedConf::kMjhutypeFieldNumber;
const int MJCustomizedConf::kMjconfotherFieldNumber;
#endif  // !_MSC_VER

MJCustomizedConf::MJCustomizedConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.MJCustomizedConf)
}

void MJCustomizedConf::InitAsDefaultInstance() {
  mjconfcommon_ = const_cast< ::proto::game::redis::MJConfCommon*>(&::proto::game::redis::MJConfCommon::default_instance());
  mjconfpiao_ = const_cast< ::proto::game::redis::MJConfPiao*>(&::proto::game::redis::MJConfPiao::default_instance());
  mjconfbuyhorse_ = const_cast< ::proto::game::redis::MJConfBuyHorse*>(&::proto::game::redis::MJConfBuyHorse::default_instance());
  mjconfzhuaniao_ = const_cast< ::proto::game::redis::MJConfZhuaniao*>(&::proto::game::redis::MJConfZhuaniao::default_instance());
  mjhutype_ = const_cast< ::proto::game::redis::MJHuType*>(&::proto::game::redis::MJHuType::default_instance());
  mjconfother_ = const_cast< ::proto::game::redis::MJConfOther*>(&::proto::game::redis::MJConfOther::default_instance());
}

MJCustomizedConf::MJCustomizedConf(const MJCustomizedConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.MJCustomizedConf)
}

void MJCustomizedConf::SharedCtor() {
  _cached_size_ = 0;
  mjconfcommon_ = NULL;
  mjconfpiao_ = NULL;
  mjconfbuyhorse_ = NULL;
  mjconfzhuaniao_ = NULL;
  mjhutype_ = NULL;
  mjconfother_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJCustomizedConf::~MJCustomizedConf() {
  // @@protoc_insertion_point(destructor:proto.game.redis.MJCustomizedConf)
  SharedDtor();
}

void MJCustomizedConf::SharedDtor() {
  if (this != default_instance_) {
    delete mjconfcommon_;
    delete mjconfpiao_;
    delete mjconfbuyhorse_;
    delete mjconfzhuaniao_;
    delete mjhutype_;
    delete mjconfother_;
  }
}

void MJCustomizedConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJCustomizedConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJCustomizedConf_descriptor_;
}

const MJCustomizedConf& MJCustomizedConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

MJCustomizedConf* MJCustomizedConf::default_instance_ = NULL;

MJCustomizedConf* MJCustomizedConf::New() const {
  return new MJCustomizedConf;
}

void MJCustomizedConf::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_mjconfcommon()) {
      if (mjconfcommon_ != NULL) mjconfcommon_->::proto::game::redis::MJConfCommon::Clear();
    }
    if (has_mjconfpiao()) {
      if (mjconfpiao_ != NULL) mjconfpiao_->::proto::game::redis::MJConfPiao::Clear();
    }
    if (has_mjconfbuyhorse()) {
      if (mjconfbuyhorse_ != NULL) mjconfbuyhorse_->::proto::game::redis::MJConfBuyHorse::Clear();
    }
    if (has_mjconfzhuaniao()) {
      if (mjconfzhuaniao_ != NULL) mjconfzhuaniao_->::proto::game::redis::MJConfZhuaniao::Clear();
    }
    if (has_mjhutype()) {
      if (mjhutype_ != NULL) mjhutype_->::proto::game::redis::MJHuType::Clear();
    }
    if (has_mjconfother()) {
      if (mjconfother_ != NULL) mjconfother_->::proto::game::redis::MJConfOther::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJCustomizedConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.MJCustomizedConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.game.redis.MJConfCommon mjconfcommon = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mjconfcommon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mjconfpiao;
        break;
      }

      // optional .proto.game.redis.MJConfPiao mjconfpiao = 2;
      case 2: {
        if (tag == 18) {
         parse_mjconfpiao:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mjconfpiao()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mjconfbuyhorse;
        break;
      }

      // optional .proto.game.redis.MJConfBuyHorse mjconfbuyhorse = 3;
      case 3: {
        if (tag == 26) {
         parse_mjconfbuyhorse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mjconfbuyhorse()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mjconfzhuaniao;
        break;
      }

      // optional .proto.game.redis.MJConfZhuaniao mjconfzhuaniao = 4;
      case 4: {
        if (tag == 34) {
         parse_mjconfzhuaniao:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mjconfzhuaniao()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_mjhutype;
        break;
      }

      // optional .proto.game.redis.MJHuType mjhutype = 5;
      case 5: {
        if (tag == 42) {
         parse_mjhutype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mjhutype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mjconfother;
        break;
      }

      // optional .proto.game.redis.MJConfOther mjconfother = 6;
      case 6: {
        if (tag == 50) {
         parse_mjconfother:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mjconfother()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.MJCustomizedConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.MJCustomizedConf)
  return false;
#undef DO_
}

void MJCustomizedConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.MJCustomizedConf)
  // optional .proto.game.redis.MJConfCommon mjconfcommon = 1;
  if (has_mjconfcommon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mjconfcommon(), output);
  }

  // optional .proto.game.redis.MJConfPiao mjconfpiao = 2;
  if (has_mjconfpiao()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mjconfpiao(), output);
  }

  // optional .proto.game.redis.MJConfBuyHorse mjconfbuyhorse = 3;
  if (has_mjconfbuyhorse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mjconfbuyhorse(), output);
  }

  // optional .proto.game.redis.MJConfZhuaniao mjconfzhuaniao = 4;
  if (has_mjconfzhuaniao()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mjconfzhuaniao(), output);
  }

  // optional .proto.game.redis.MJHuType mjhutype = 5;
  if (has_mjhutype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mjhutype(), output);
  }

  // optional .proto.game.redis.MJConfOther mjconfother = 6;
  if (has_mjconfother()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mjconfother(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.MJCustomizedConf)
}

::google::protobuf::uint8* MJCustomizedConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.MJCustomizedConf)
  // optional .proto.game.redis.MJConfCommon mjconfcommon = 1;
  if (has_mjconfcommon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mjconfcommon(), target);
  }

  // optional .proto.game.redis.MJConfPiao mjconfpiao = 2;
  if (has_mjconfpiao()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mjconfpiao(), target);
  }

  // optional .proto.game.redis.MJConfBuyHorse mjconfbuyhorse = 3;
  if (has_mjconfbuyhorse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mjconfbuyhorse(), target);
  }

  // optional .proto.game.redis.MJConfZhuaniao mjconfzhuaniao = 4;
  if (has_mjconfzhuaniao()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mjconfzhuaniao(), target);
  }

  // optional .proto.game.redis.MJHuType mjhutype = 5;
  if (has_mjhutype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mjhutype(), target);
  }

  // optional .proto.game.redis.MJConfOther mjconfother = 6;
  if (has_mjconfother()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mjconfother(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.MJCustomizedConf)
  return target;
}

int MJCustomizedConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.game.redis.MJConfCommon mjconfcommon = 1;
    if (has_mjconfcommon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mjconfcommon());
    }

    // optional .proto.game.redis.MJConfPiao mjconfpiao = 2;
    if (has_mjconfpiao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mjconfpiao());
    }

    // optional .proto.game.redis.MJConfBuyHorse mjconfbuyhorse = 3;
    if (has_mjconfbuyhorse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mjconfbuyhorse());
    }

    // optional .proto.game.redis.MJConfZhuaniao mjconfzhuaniao = 4;
    if (has_mjconfzhuaniao()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mjconfzhuaniao());
    }

    // optional .proto.game.redis.MJHuType mjhutype = 5;
    if (has_mjhutype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mjhutype());
    }

    // optional .proto.game.redis.MJConfOther mjconfother = 6;
    if (has_mjconfother()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mjconfother());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJCustomizedConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJCustomizedConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJCustomizedConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJCustomizedConf::MergeFrom(const MJCustomizedConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mjconfcommon()) {
      mutable_mjconfcommon()->::proto::game::redis::MJConfCommon::MergeFrom(from.mjconfcommon());
    }
    if (from.has_mjconfpiao()) {
      mutable_mjconfpiao()->::proto::game::redis::MJConfPiao::MergeFrom(from.mjconfpiao());
    }
    if (from.has_mjconfbuyhorse()) {
      mutable_mjconfbuyhorse()->::proto::game::redis::MJConfBuyHorse::MergeFrom(from.mjconfbuyhorse());
    }
    if (from.has_mjconfzhuaniao()) {
      mutable_mjconfzhuaniao()->::proto::game::redis::MJConfZhuaniao::MergeFrom(from.mjconfzhuaniao());
    }
    if (from.has_mjhutype()) {
      mutable_mjhutype()->::proto::game::redis::MJHuType::MergeFrom(from.mjhutype());
    }
    if (from.has_mjconfother()) {
      mutable_mjconfother()->::proto::game::redis::MJConfOther::MergeFrom(from.mjconfother());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJCustomizedConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJCustomizedConf::CopyFrom(const MJCustomizedConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJCustomizedConf::IsInitialized() const {

  return true;
}

void MJCustomizedConf::Swap(MJCustomizedConf* other) {
  if (other != this) {
    std::swap(mjconfcommon_, other->mjconfcommon_);
    std::swap(mjconfpiao_, other->mjconfpiao_);
    std::swap(mjconfbuyhorse_, other->mjconfbuyhorse_);
    std::swap(mjconfzhuaniao_, other->mjconfzhuaniao_);
    std::swap(mjhutype_, other->mjhutype_);
    std::swap(mjconfother_, other->mjconfother_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJCustomizedConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJCustomizedConf_descriptor_;
  metadata.reflection = MJCustomizedConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoundScore::kScoreFieldNumber;
#endif  // !_MSC_VER

RoundScore::RoundScore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.RoundScore)
}

void RoundScore::InitAsDefaultInstance() {
}

RoundScore::RoundScore(const RoundScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.RoundScore)
}

void RoundScore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoundScore::~RoundScore() {
  // @@protoc_insertion_point(destructor:proto.game.redis.RoundScore)
  SharedDtor();
}

void RoundScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoundScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoundScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoundScore_descriptor_;
}

const RoundScore& RoundScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

RoundScore* RoundScore::default_instance_ = NULL;

RoundScore* RoundScore::New() const {
  return new RoundScore;
}

void RoundScore::Clear() {
  score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoundScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.RoundScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 score = 1;
      case 1: {
        if (tag == 8) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_score())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_score;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.RoundScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.RoundScore)
  return false;
#undef DO_
}

void RoundScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.RoundScore)
  // repeated int32 score = 1;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.RoundScore)
}

::google::protobuf::uint8* RoundScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.RoundScore)
  // repeated int32 score = 1;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.RoundScore)
  return target;
}

int RoundScore::ByteSize() const {
  int total_size = 0;

  // repeated int32 score = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoundScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoundScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoundScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoundScore::MergeFrom(const RoundScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoundScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoundScore::CopyFrom(const RoundScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundScore::IsInitialized() const {

  return true;
}

void RoundScore::Swap(RoundScore* other) {
  if (other != this) {
    score_.Swap(&other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoundScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoundScore_descriptor_;
  metadata.reflection = RoundScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Table_TotalRecordInfo::kBankerFieldNumber;
const int Table_TotalRecordInfo::kHuFieldNumber;
const int Table_TotalRecordInfo::kPiaoFieldNumber;
const int Table_TotalRecordInfo::kTimeroutOpFieldNumber;
const int Table_TotalRecordInfo::kTotalScoreFieldNumber;
const int Table_TotalRecordInfo::kPaohuFieldNumber;
const int Table_TotalRecordInfo::kZimoFieldNumber;
const int Table_TotalRecordInfo::kDianpaoFieldNumber;
const int Table_TotalRecordInfo::kWinCountsFieldNumber;
const int Table_TotalRecordInfo::kGangTimesFieldNumber;
const int Table_TotalRecordInfo::kDianGangTimesFieldNumber;
const int Table_TotalRecordInfo::kPiaoCountFieldNumber;
const int Table_TotalRecordInfo::kHongzhonggangCountFieldNumber;
const int Table_TotalRecordInfo::kDahuCountFieldNumber;
const int Table_TotalRecordInfo::kLaizipigangCountFieldNumber;
const int Table_TotalRecordInfo::kRoundScoreFieldNumber;
const int Table_TotalRecordInfo::kMobaoCountFieldNumber;
#endif  // !_MSC_VER

Table_TotalRecordInfo::Table_TotalRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.Table_TotalRecordInfo)
}

void Table_TotalRecordInfo::InitAsDefaultInstance() {
}

Table_TotalRecordInfo::Table_TotalRecordInfo(const Table_TotalRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.Table_TotalRecordInfo)
}

void Table_TotalRecordInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Table_TotalRecordInfo::~Table_TotalRecordInfo() {
  // @@protoc_insertion_point(destructor:proto.game.redis.Table_TotalRecordInfo)
  SharedDtor();
}

void Table_TotalRecordInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Table_TotalRecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Table_TotalRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Table_TotalRecordInfo_descriptor_;
}

const Table_TotalRecordInfo& Table_TotalRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

Table_TotalRecordInfo* Table_TotalRecordInfo::default_instance_ = NULL;

Table_TotalRecordInfo* Table_TotalRecordInfo::New() const {
  return new Table_TotalRecordInfo;
}

void Table_TotalRecordInfo::Clear() {
  banker_.Clear();
  hu_.Clear();
  piao_.Clear();
  timerout_op_.Clear();
  total_score_.Clear();
  paohu_.Clear();
  zimo_.Clear();
  dianpao_.Clear();
  win_counts_.Clear();
  gang_times_.Clear();
  dian_gang_times_.Clear();
  piao_count_.Clear();
  hongzhonggang_count_.Clear();
  dahu_count_.Clear();
  laizipigang_count_.Clear();
  round_score_.Clear();
  mobao_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Table_TotalRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.Table_TotalRecordInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 banker = 1;
      case 1: {
        if (tag == 8) {
         parse_banker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_banker())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_banker())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_banker;
        if (input->ExpectTag(16)) goto parse_hu;
        break;
      }

      // repeated int32 hu = 2;
      case 2: {
        if (tag == 16) {
         parse_hu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_hu())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hu())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hu;
        if (input->ExpectTag(24)) goto parse_piao;
        break;
      }

      // repeated int32 piao = 3;
      case 3: {
        if (tag == 24) {
         parse_piao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_piao())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_piao())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_piao;
        if (input->ExpectTag(32)) goto parse_timerout_op;
        break;
      }

      // repeated int32 timerout_op = 4;
      case 4: {
        if (tag == 32) {
         parse_timerout_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_timerout_op())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_timerout_op())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timerout_op;
        if (input->ExpectTag(40)) goto parse_total_score;
        break;
      }

      // repeated int32 total_score = 5;
      case 5: {
        if (tag == 40) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_total_score())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_total_score())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_total_score;
        if (input->ExpectTag(48)) goto parse_paohu;
        break;
      }

      // repeated int32 paohu = 6;
      case 6: {
        if (tag == 48) {
         parse_paohu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_paohu())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_paohu())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_paohu;
        if (input->ExpectTag(56)) goto parse_zimo;
        break;
      }

      // repeated int32 zimo = 7;
      case 7: {
        if (tag == 56) {
         parse_zimo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_zimo())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_zimo())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_zimo;
        if (input->ExpectTag(64)) goto parse_dianpao;
        break;
      }

      // repeated int32 dianpao = 8;
      case 8: {
        if (tag == 64) {
         parse_dianpao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_dianpao())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dianpao())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dianpao;
        if (input->ExpectTag(72)) goto parse_win_counts;
        break;
      }

      // repeated int32 win_counts = 9;
      case 9: {
        if (tag == 72) {
         parse_win_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_win_counts())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_win_counts())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_win_counts;
        if (input->ExpectTag(80)) goto parse_gang_times;
        break;
      }

      // repeated int32 gang_times = 10;
      case 10: {
        if (tag == 80) {
         parse_gang_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_gang_times())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gang_times())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_gang_times;
        if (input->ExpectTag(88)) goto parse_dian_gang_times;
        break;
      }

      // repeated int32 dian_gang_times = 11;
      case 11: {
        if (tag == 88) {
         parse_dian_gang_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_dian_gang_times())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dian_gang_times())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_dian_gang_times;
        if (input->ExpectTag(96)) goto parse_piao_count;
        break;
      }

      // repeated int32 piao_count = 12;
      case 12: {
        if (tag == 96) {
         parse_piao_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_piao_count())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_piao_count())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_piao_count;
        if (input->ExpectTag(104)) goto parse_hongzhonggang_count;
        break;
      }

      // repeated int32 hongzhonggang_count = 13;
      case 13: {
        if (tag == 104) {
         parse_hongzhonggang_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_hongzhonggang_count())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hongzhonggang_count())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_hongzhonggang_count;
        if (input->ExpectTag(112)) goto parse_dahu_count;
        break;
      }

      // repeated int32 dahu_count = 14;
      case 14: {
        if (tag == 112) {
         parse_dahu_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_dahu_count())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dahu_count())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_dahu_count;
        if (input->ExpectTag(120)) goto parse_laizipigang_count;
        break;
      }

      // repeated int32 laizipigang_count = 15;
      case 15: {
        if (tag == 120) {
         parse_laizipigang_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_laizipigang_count())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_laizipigang_count())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_laizipigang_count;
        if (input->ExpectTag(130)) goto parse_round_score;
        break;
      }

      // repeated .proto.game.redis.RoundScore round_score = 16;
      case 16: {
        if (tag == 130) {
         parse_round_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_round_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_round_score;
        if (input->ExpectTag(136)) goto parse_mobao_count;
        break;
      }

      // repeated int32 mobao_count = 17;
      case 17: {
        if (tag == 136) {
         parse_mobao_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_mobao_count())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mobao_count())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_mobao_count;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.Table_TotalRecordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.Table_TotalRecordInfo)
  return false;
#undef DO_
}

void Table_TotalRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.Table_TotalRecordInfo)
  // repeated int32 banker = 1;
  for (int i = 0; i < this->banker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->banker(i), output);
  }

  // repeated int32 hu = 2;
  for (int i = 0; i < this->hu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->hu(i), output);
  }

  // repeated int32 piao = 3;
  for (int i = 0; i < this->piao_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->piao(i), output);
  }

  // repeated int32 timerout_op = 4;
  for (int i = 0; i < this->timerout_op_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->timerout_op(i), output);
  }

  // repeated int32 total_score = 5;
  for (int i = 0; i < this->total_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->total_score(i), output);
  }

  // repeated int32 paohu = 6;
  for (int i = 0; i < this->paohu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->paohu(i), output);
  }

  // repeated int32 zimo = 7;
  for (int i = 0; i < this->zimo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->zimo(i), output);
  }

  // repeated int32 dianpao = 8;
  for (int i = 0; i < this->dianpao_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->dianpao(i), output);
  }

  // repeated int32 win_counts = 9;
  for (int i = 0; i < this->win_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->win_counts(i), output);
  }

  // repeated int32 gang_times = 10;
  for (int i = 0; i < this->gang_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->gang_times(i), output);
  }

  // repeated int32 dian_gang_times = 11;
  for (int i = 0; i < this->dian_gang_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->dian_gang_times(i), output);
  }

  // repeated int32 piao_count = 12;
  for (int i = 0; i < this->piao_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->piao_count(i), output);
  }

  // repeated int32 hongzhonggang_count = 13;
  for (int i = 0; i < this->hongzhonggang_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->hongzhonggang_count(i), output);
  }

  // repeated int32 dahu_count = 14;
  for (int i = 0; i < this->dahu_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->dahu_count(i), output);
  }

  // repeated int32 laizipigang_count = 15;
  for (int i = 0; i < this->laizipigang_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->laizipigang_count(i), output);
  }

  // repeated .proto.game.redis.RoundScore round_score = 16;
  for (int i = 0; i < this->round_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->round_score(i), output);
  }

  // repeated int32 mobao_count = 17;
  for (int i = 0; i < this->mobao_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->mobao_count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.Table_TotalRecordInfo)
}

::google::protobuf::uint8* Table_TotalRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.Table_TotalRecordInfo)
  // repeated int32 banker = 1;
  for (int i = 0; i < this->banker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->banker(i), target);
  }

  // repeated int32 hu = 2;
  for (int i = 0; i < this->hu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->hu(i), target);
  }

  // repeated int32 piao = 3;
  for (int i = 0; i < this->piao_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->piao(i), target);
  }

  // repeated int32 timerout_op = 4;
  for (int i = 0; i < this->timerout_op_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->timerout_op(i), target);
  }

  // repeated int32 total_score = 5;
  for (int i = 0; i < this->total_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->total_score(i), target);
  }

  // repeated int32 paohu = 6;
  for (int i = 0; i < this->paohu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->paohu(i), target);
  }

  // repeated int32 zimo = 7;
  for (int i = 0; i < this->zimo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->zimo(i), target);
  }

  // repeated int32 dianpao = 8;
  for (int i = 0; i < this->dianpao_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->dianpao(i), target);
  }

  // repeated int32 win_counts = 9;
  for (int i = 0; i < this->win_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->win_counts(i), target);
  }

  // repeated int32 gang_times = 10;
  for (int i = 0; i < this->gang_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->gang_times(i), target);
  }

  // repeated int32 dian_gang_times = 11;
  for (int i = 0; i < this->dian_gang_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->dian_gang_times(i), target);
  }

  // repeated int32 piao_count = 12;
  for (int i = 0; i < this->piao_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->piao_count(i), target);
  }

  // repeated int32 hongzhonggang_count = 13;
  for (int i = 0; i < this->hongzhonggang_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->hongzhonggang_count(i), target);
  }

  // repeated int32 dahu_count = 14;
  for (int i = 0; i < this->dahu_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->dahu_count(i), target);
  }

  // repeated int32 laizipigang_count = 15;
  for (int i = 0; i < this->laizipigang_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->laizipigang_count(i), target);
  }

  // repeated .proto.game.redis.RoundScore round_score = 16;
  for (int i = 0; i < this->round_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->round_score(i), target);
  }

  // repeated int32 mobao_count = 17;
  for (int i = 0; i < this->mobao_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->mobao_count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.Table_TotalRecordInfo)
  return target;
}

int Table_TotalRecordInfo::ByteSize() const {
  int total_size = 0;

  // repeated int32 banker = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->banker_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->banker(i));
    }
    total_size += 1 * this->banker_size() + data_size;
  }

  // repeated int32 hu = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hu_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hu(i));
    }
    total_size += 1 * this->hu_size() + data_size;
  }

  // repeated int32 piao = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->piao_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->piao(i));
    }
    total_size += 1 * this->piao_size() + data_size;
  }

  // repeated int32 timerout_op = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->timerout_op_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->timerout_op(i));
    }
    total_size += 1 * this->timerout_op_size() + data_size;
  }

  // repeated int32 total_score = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->total_score(i));
    }
    total_size += 1 * this->total_score_size() + data_size;
  }

  // repeated int32 paohu = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->paohu_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->paohu(i));
    }
    total_size += 1 * this->paohu_size() + data_size;
  }

  // repeated int32 zimo = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->zimo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->zimo(i));
    }
    total_size += 1 * this->zimo_size() + data_size;
  }

  // repeated int32 dianpao = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->dianpao_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dianpao(i));
    }
    total_size += 1 * this->dianpao_size() + data_size;
  }

  // repeated int32 win_counts = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->win_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->win_counts(i));
    }
    total_size += 1 * this->win_counts_size() + data_size;
  }

  // repeated int32 gang_times = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->gang_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gang_times(i));
    }
    total_size += 1 * this->gang_times_size() + data_size;
  }

  // repeated int32 dian_gang_times = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->dian_gang_times_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dian_gang_times(i));
    }
    total_size += 1 * this->dian_gang_times_size() + data_size;
  }

  // repeated int32 piao_count = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->piao_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->piao_count(i));
    }
    total_size += 1 * this->piao_count_size() + data_size;
  }

  // repeated int32 hongzhonggang_count = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->hongzhonggang_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hongzhonggang_count(i));
    }
    total_size += 1 * this->hongzhonggang_count_size() + data_size;
  }

  // repeated int32 dahu_count = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->dahu_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dahu_count(i));
    }
    total_size += 1 * this->dahu_count_size() + data_size;
  }

  // repeated int32 laizipigang_count = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->laizipigang_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->laizipigang_count(i));
    }
    total_size += 1 * this->laizipigang_count_size() + data_size;
  }

  // repeated .proto.game.redis.RoundScore round_score = 16;
  total_size += 2 * this->round_score_size();
  for (int i = 0; i < this->round_score_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->round_score(i));
  }

  // repeated int32 mobao_count = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->mobao_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mobao_count(i));
    }
    total_size += 2 * this->mobao_count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Table_TotalRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Table_TotalRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Table_TotalRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Table_TotalRecordInfo::MergeFrom(const Table_TotalRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  banker_.MergeFrom(from.banker_);
  hu_.MergeFrom(from.hu_);
  piao_.MergeFrom(from.piao_);
  timerout_op_.MergeFrom(from.timerout_op_);
  total_score_.MergeFrom(from.total_score_);
  paohu_.MergeFrom(from.paohu_);
  zimo_.MergeFrom(from.zimo_);
  dianpao_.MergeFrom(from.dianpao_);
  win_counts_.MergeFrom(from.win_counts_);
  gang_times_.MergeFrom(from.gang_times_);
  dian_gang_times_.MergeFrom(from.dian_gang_times_);
  piao_count_.MergeFrom(from.piao_count_);
  hongzhonggang_count_.MergeFrom(from.hongzhonggang_count_);
  dahu_count_.MergeFrom(from.dahu_count_);
  laizipigang_count_.MergeFrom(from.laizipigang_count_);
  round_score_.MergeFrom(from.round_score_);
  mobao_count_.MergeFrom(from.mobao_count_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Table_TotalRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Table_TotalRecordInfo::CopyFrom(const Table_TotalRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table_TotalRecordInfo::IsInitialized() const {

  return true;
}

void Table_TotalRecordInfo::Swap(Table_TotalRecordInfo* other) {
  if (other != this) {
    banker_.Swap(&other->banker_);
    hu_.Swap(&other->hu_);
    piao_.Swap(&other->piao_);
    timerout_op_.Swap(&other->timerout_op_);
    total_score_.Swap(&other->total_score_);
    paohu_.Swap(&other->paohu_);
    zimo_.Swap(&other->zimo_);
    dianpao_.Swap(&other->dianpao_);
    win_counts_.Swap(&other->win_counts_);
    gang_times_.Swap(&other->gang_times_);
    dian_gang_times_.Swap(&other->dian_gang_times_);
    piao_count_.Swap(&other->piao_count_);
    hongzhonggang_count_.Swap(&other->hongzhonggang_count_);
    dahu_count_.Swap(&other->dahu_count_);
    laizipigang_count_.Swap(&other->laizipigang_count_);
    round_score_.Swap(&other->round_score_);
    mobao_count_.Swap(&other->mobao_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Table_TotalRecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Table_TotalRecordInfo_descriptor_;
  metadata.reflection = Table_TotalRecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shai_Set::kNumFieldNumber;
const int Shai_Set::kShaiFieldNumber;
#endif  // !_MSC_VER

Shai_Set::Shai_Set()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.Shai_Set)
}

void Shai_Set::InitAsDefaultInstance() {
}

Shai_Set::Shai_Set(const Shai_Set& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.Shai_Set)
}

void Shai_Set::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shai_Set::~Shai_Set() {
  // @@protoc_insertion_point(destructor:proto.game.redis.Shai_Set)
  SharedDtor();
}

void Shai_Set::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shai_Set::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shai_Set::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shai_Set_descriptor_;
}

const Shai_Set& Shai_Set::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

Shai_Set* Shai_Set::default_instance_ = NULL;

Shai_Set* Shai_Set::New() const {
  return new Shai_Set;
}

void Shai_Set::Clear() {
  num_ = 0;
  shai_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shai_Set::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.Shai_Set)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shai;
        break;
      }

      // repeated int32 shai = 2;
      case 2: {
        if (tag == 16) {
         parse_shai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_shai())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shai())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shai;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.Shai_Set)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.Shai_Set)
  return false;
#undef DO_
}

void Shai_Set::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.Shai_Set)
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // repeated int32 shai = 2;
  for (int i = 0; i < this->shai_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->shai(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.Shai_Set)
}

::google::protobuf::uint8* Shai_Set::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.Shai_Set)
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // repeated int32 shai = 2;
  for (int i = 0; i < this->shai_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->shai(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.Shai_Set)
  return target;
}

int Shai_Set::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  // repeated int32 shai = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->shai_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shai(i));
    }
    total_size += 1 * this->shai_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shai_Set::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shai_Set* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shai_Set*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shai_Set::MergeFrom(const Shai_Set& from) {
  GOOGLE_CHECK_NE(&from, this);
  shai_.MergeFrom(from.shai_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shai_Set::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shai_Set::CopyFrom(const Shai_Set& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shai_Set::IsInitialized() const {

  return true;
}

void Shai_Set::Swap(Shai_Set* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    shai_.Swap(&other->shai_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shai_Set::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shai_Set_descriptor_;
  metadata.reflection = Shai_Set_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FixedCard::kCardDataFieldNumber;
const int FixedCard::kStateFieldNumber;
const int FixedCard::kChairIDFieldNumber;
const int FixedCard::kOpCardsFieldNumber;
#endif  // !_MSC_VER

FixedCard::FixedCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.FixedCard)
}

void FixedCard::InitAsDefaultInstance() {
}

FixedCard::FixedCard(const FixedCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.FixedCard)
}

void FixedCard::SharedCtor() {
  _cached_size_ = 0;
  carddata_ = 0;
  state_ = 0;
  chairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FixedCard::~FixedCard() {
  // @@protoc_insertion_point(destructor:proto.game.redis.FixedCard)
  SharedDtor();
}

void FixedCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FixedCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixedCard_descriptor_;
}

const FixedCard& FixedCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

FixedCard* FixedCard::default_instance_ = NULL;

FixedCard* FixedCard::New() const {
  return new FixedCard;
}

void FixedCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FixedCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(carddata_, state_);
    chairid_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  opcards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FixedCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.FixedCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CardData = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carddata_)));
          set_has_carddata();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_chairID;
        break;
      }

      // optional int32 chairID = 3;
      case 3: {
        if (tag == 24) {
         parse_chairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_OpCards;
        break;
      }

      // repeated int32 OpCards = 4;
      case 4: {
        if (tag == 32) {
         parse_OpCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_opcards())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_opcards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_OpCards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.FixedCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.FixedCard)
  return false;
#undef DO_
}

void FixedCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.FixedCard)
  // required int32 CardData = 1;
  if (has_carddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->carddata(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int32 chairID = 3;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chairid(), output);
  }

  // repeated int32 OpCards = 4;
  for (int i = 0; i < this->opcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->opcards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.FixedCard)
}

::google::protobuf::uint8* FixedCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.FixedCard)
  // required int32 CardData = 1;
  if (has_carddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->carddata(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int32 chairID = 3;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chairid(), target);
  }

  // repeated int32 OpCards = 4;
  for (int i = 0; i < this->opcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->opcards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.FixedCard)
  return target;
}

int FixedCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CardData = 1;
    if (has_carddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carddata());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 chairID = 3;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

  }
  // repeated int32 OpCards = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->opcards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->opcards(i));
    }
    total_size += 1 * this->opcards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FixedCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FixedCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FixedCard::MergeFrom(const FixedCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  opcards_.MergeFrom(from.opcards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_carddata()) {
      set_carddata(from.carddata());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FixedCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedCard::CopyFrom(const FixedCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FixedCard::Swap(FixedCard* other) {
  if (other != this) {
    std::swap(carddata_, other->carddata_);
    std::swap(state_, other->state_);
    std::swap(chairid_, other->chairid_);
    opcards_.Swap(&other->opcards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FixedCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixedCard_descriptor_;
  metadata.reflection = FixedCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandCards::kChangeableCardsLenFieldNumber;
const int HandCards::kChangeableCardsFieldNumber;
const int HandCards::kFixedCardsLenFieldNumber;
const int HandCards::kStFixedCardsFieldNumber;
#endif  // !_MSC_VER

HandCards::HandCards()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.HandCards)
}

void HandCards::InitAsDefaultInstance() {
}

HandCards::HandCards(const HandCards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.HandCards)
}

void HandCards::SharedCtor() {
  _cached_size_ = 0;
  changeablecardslen_ = 0;
  fixedcardslen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandCards::~HandCards() {
  // @@protoc_insertion_point(destructor:proto.game.redis.HandCards)
  SharedDtor();
}

void HandCards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandCards_descriptor_;
}

const HandCards& HandCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

HandCards* HandCards::default_instance_ = NULL;

HandCards* HandCards::New() const {
  return new HandCards;
}

void HandCards::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HandCards*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(changeablecardslen_, fixedcardslen_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  changeablecards_.Clear();
  stfixedcards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.HandCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChangeableCardsLen = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changeablecardslen_)));
          set_has_changeablecardslen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ChangeableCards;
        break;
      }

      // repeated int32 ChangeableCards = 2;
      case 2: {
        if (tag == 16) {
         parse_ChangeableCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_changeablecards())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_changeablecards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ChangeableCards;
        if (input->ExpectTag(24)) goto parse_FixedCardsLen;
        break;
      }

      // optional int32 FixedCardsLen = 3;
      case 3: {
        if (tag == 24) {
         parse_FixedCardsLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fixedcardslen_)));
          set_has_fixedcardslen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stFixedCards;
        break;
      }

      // repeated .proto.game.redis.FixedCard stFixedCards = 4;
      case 4: {
        if (tag == 34) {
         parse_stFixedCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stfixedcards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stFixedCards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.HandCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.HandCards)
  return false;
#undef DO_
}

void HandCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.HandCards)
  // required int32 ChangeableCardsLen = 1;
  if (has_changeablecardslen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->changeablecardslen(), output);
  }

  // repeated int32 ChangeableCards = 2;
  for (int i = 0; i < this->changeablecards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->changeablecards(i), output);
  }

  // optional int32 FixedCardsLen = 3;
  if (has_fixedcardslen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fixedcardslen(), output);
  }

  // repeated .proto.game.redis.FixedCard stFixedCards = 4;
  for (int i = 0; i < this->stfixedcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stfixedcards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.HandCards)
}

::google::protobuf::uint8* HandCards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.HandCards)
  // required int32 ChangeableCardsLen = 1;
  if (has_changeablecardslen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->changeablecardslen(), target);
  }

  // repeated int32 ChangeableCards = 2;
  for (int i = 0; i < this->changeablecards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->changeablecards(i), target);
  }

  // optional int32 FixedCardsLen = 3;
  if (has_fixedcardslen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fixedcardslen(), target);
  }

  // repeated .proto.game.redis.FixedCard stFixedCards = 4;
  for (int i = 0; i < this->stfixedcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stfixedcards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.HandCards)
  return target;
}

int HandCards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChangeableCardsLen = 1;
    if (has_changeablecardslen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changeablecardslen());
    }

    // optional int32 FixedCardsLen = 3;
    if (has_fixedcardslen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fixedcardslen());
    }

  }
  // repeated int32 ChangeableCards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->changeablecards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->changeablecards(i));
    }
    total_size += 1 * this->changeablecards_size() + data_size;
  }

  // repeated .proto.game.redis.FixedCard stFixedCards = 4;
  total_size += 1 * this->stfixedcards_size();
  for (int i = 0; i < this->stfixedcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stfixedcards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandCards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandCards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandCards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandCards::MergeFrom(const HandCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  changeablecards_.MergeFrom(from.changeablecards_);
  stfixedcards_.MergeFrom(from.stfixedcards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_changeablecardslen()) {
      set_changeablecardslen(from.changeablecardslen());
    }
    if (from.has_fixedcardslen()) {
      set_fixedcardslen(from.fixedcardslen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandCards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandCards::CopyFrom(const HandCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandCards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->stfixedcards())) return false;
  return true;
}

void HandCards::Swap(HandCards* other) {
  if (other != this) {
    std::swap(changeablecardslen_, other->changeablecardslen_);
    changeablecards_.Swap(&other->changeablecards_);
    std::swap(fixedcardslen_, other->fixedcardslen_);
    stfixedcards_.Swap(&other->stfixedcards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandCards_descriptor_;
  metadata.reflection = HandCards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCardTypePool::kMJokercardFieldNumber;
const int CCardTypePool::kMPoolFieldNumber;
const int CCardTypePool::kMMaxcountFieldNumber;
const int CCardTypePool::kMModeFieldNumber;
#endif  // !_MSC_VER

CCardTypePool::CCardTypePool()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.CCardTypePool)
}

void CCardTypePool::InitAsDefaultInstance() {
}

CCardTypePool::CCardTypePool(const CCardTypePool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.CCardTypePool)
}

void CCardTypePool::SharedCtor() {
  _cached_size_ = 0;
  m_jokercard_ = 0;
  m_maxcount_ = 0;
  m_mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCardTypePool::~CCardTypePool() {
  // @@protoc_insertion_point(destructor:proto.game.redis.CCardTypePool)
  SharedDtor();
}

void CCardTypePool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCardTypePool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCardTypePool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCardTypePool_descriptor_;
}

const CCardTypePool& CCardTypePool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

CCardTypePool* CCardTypePool::default_instance_ = NULL;

CCardTypePool* CCardTypePool::New() const {
  return new CCardTypePool;
}

void CCardTypePool::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CCardTypePool*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(m_jokercard_, m_mode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  m_pool_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCardTypePool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.CCardTypePool)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_jokercard = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_jokercard_)));
          set_has_m_jokercard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_pool;
        break;
      }

      // repeated int32 m_pool = 2;
      case 2: {
        if (tag == 16) {
         parse_m_pool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_m_pool())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_pool())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_pool;
        if (input->ExpectTag(24)) goto parse_m_maxcount;
        break;
      }

      // optional int32 m_maxcount = 3;
      case 3: {
        if (tag == 24) {
         parse_m_maxcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxcount_)));
          set_has_m_maxcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_mode;
        break;
      }

      // optional int32 m_mode = 4;
      case 4: {
        if (tag == 32) {
         parse_m_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mode_)));
          set_has_m_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.CCardTypePool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.CCardTypePool)
  return false;
#undef DO_
}

void CCardTypePool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.CCardTypePool)
  // optional int32 m_jokercard = 1;
  if (has_m_jokercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_jokercard(), output);
  }

  // repeated int32 m_pool = 2;
  for (int i = 0; i < this->m_pool_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->m_pool(i), output);
  }

  // optional int32 m_maxcount = 3;
  if (has_m_maxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_maxcount(), output);
  }

  // optional int32 m_mode = 4;
  if (has_m_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.CCardTypePool)
}

::google::protobuf::uint8* CCardTypePool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.CCardTypePool)
  // optional int32 m_jokercard = 1;
  if (has_m_jokercard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_jokercard(), target);
  }

  // repeated int32 m_pool = 2;
  for (int i = 0; i < this->m_pool_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->m_pool(i), target);
  }

  // optional int32 m_maxcount = 3;
  if (has_m_maxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_maxcount(), target);
  }

  // optional int32 m_mode = 4;
  if (has_m_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.CCardTypePool)
  return target;
}

int CCardTypePool::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_jokercard = 1;
    if (has_m_jokercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_jokercard());
    }

    // optional int32 m_maxcount = 3;
    if (has_m_maxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxcount());
    }

    // optional int32 m_mode = 4;
    if (has_m_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mode());
    }

  }
  // repeated int32 m_pool = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_pool_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_pool(i));
    }
    total_size += 1 * this->m_pool_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCardTypePool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCardTypePool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCardTypePool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCardTypePool::MergeFrom(const CCardTypePool& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_pool_.MergeFrom(from.m_pool_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_jokercard()) {
      set_m_jokercard(from.m_jokercard());
    }
    if (from.has_m_maxcount()) {
      set_m_maxcount(from.m_maxcount());
    }
    if (from.has_m_mode()) {
      set_m_mode(from.m_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCardTypePool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCardTypePool::CopyFrom(const CCardTypePool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCardTypePool::IsInitialized() const {

  return true;
}

void CCardTypePool::Swap(CCardTypePool* other) {
  if (other != this) {
    std::swap(m_jokercard_, other->m_jokercard_);
    m_pool_.Swap(&other->m_pool_);
    std::swap(m_maxcount_, other->m_maxcount_);
    std::swap(m_mode_, other->m_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCardTypePool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCardTypePool_descriptor_;
  metadata.reflection = CCardTypePool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCardPool::kMCardtypepoolFieldNumber;
const int CCardPool::kMSeedidFieldNumber;
const int CCardPool::kMModeFieldNumber;
const int CCardPool::kMPoolFieldNumber;
const int CCardPool::kMMaxcountFieldNumber;
const int CCardPool::kMCountFieldNumber;
const int CCardPool::kMCurrentFieldNumber;
const int CCardPool::kMLastFieldNumber;
const int CCardPool::kMJokercardFieldNumber;
const int CCardPool::kMJokercountFieldNumber;
#endif  // !_MSC_VER

CCardPool::CCardPool()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.CCardPool)
}

void CCardPool::InitAsDefaultInstance() {
  m_cardtypepool_ = const_cast< ::proto::game::redis::CCardTypePool*>(&::proto::game::redis::CCardTypePool::default_instance());
}

CCardPool::CCardPool(const CCardPool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.CCardPool)
}

void CCardPool::SharedCtor() {
  _cached_size_ = 0;
  m_cardtypepool_ = NULL;
  m_seedid_ = 0;
  m_mode_ = 0;
  m_maxcount_ = 0;
  m_count_ = 0;
  m_current_ = 0;
  m_last_ = 0;
  m_jokercard_ = 0;
  m_jokercount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCardPool::~CCardPool() {
  // @@protoc_insertion_point(destructor:proto.game.redis.CCardPool)
  SharedDtor();
}

void CCardPool::SharedDtor() {
  if (this != default_instance_) {
    delete m_cardtypepool_;
  }
}

void CCardPool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCardPool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCardPool_descriptor_;
}

const CCardPool& CCardPool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

CCardPool* CCardPool::default_instance_ = NULL;

CCardPool* CCardPool::New() const {
  return new CCardPool;
}

void CCardPool::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CCardPool*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(m_seedid_, m_mode_);
    ZR_(m_maxcount_, m_last_);
    if (has_m_cardtypepool()) {
      if (m_cardtypepool_ != NULL) m_cardtypepool_->::proto::game::redis::CCardTypePool::Clear();
    }
  }
  ZR_(m_jokercard_, m_jokercount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  m_pool_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCardPool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.CCardPool)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.game.redis.CCardTypePool m_cardtypepool = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_cardtypepool()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_seedid;
        break;
      }

      // optional int32 m_seedid = 2;
      case 2: {
        if (tag == 16) {
         parse_m_seedid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_seedid_)));
          set_has_m_seedid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_mode;
        break;
      }

      // optional int32 m_mode = 3;
      case 3: {
        if (tag == 24) {
         parse_m_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mode_)));
          set_has_m_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_pool;
        break;
      }

      // repeated int32 m_pool = 4;
      case 4: {
        if (tag == 32) {
         parse_m_pool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_m_pool())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_pool())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_pool;
        if (input->ExpectTag(40)) goto parse_m_maxcount;
        break;
      }

      // optional int32 m_maxcount = 5;
      case 5: {
        if (tag == 40) {
         parse_m_maxcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxcount_)));
          set_has_m_maxcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_m_count;
        break;
      }

      // optional int32 m_count = 6;
      case 6: {
        if (tag == 48) {
         parse_m_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_count_)));
          set_has_m_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_m_current;
        break;
      }

      // optional int32 m_current = 7;
      case 7: {
        if (tag == 56) {
         parse_m_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_current_)));
          set_has_m_current();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_m_last;
        break;
      }

      // optional int32 m_last = 8;
      case 8: {
        if (tag == 64) {
         parse_m_last:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_last_)));
          set_has_m_last();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_m_jokercard;
        break;
      }

      // optional int32 m_jokercard = 9;
      case 9: {
        if (tag == 72) {
         parse_m_jokercard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_jokercard_)));
          set_has_m_jokercard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_m_jokercount;
        break;
      }

      // optional int32 m_jokercount = 10;
      case 10: {
        if (tag == 80) {
         parse_m_jokercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_jokercount_)));
          set_has_m_jokercount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.CCardPool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.CCardPool)
  return false;
#undef DO_
}

void CCardPool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.CCardPool)
  // optional .proto.game.redis.CCardTypePool m_cardtypepool = 1;
  if (has_m_cardtypepool()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_cardtypepool(), output);
  }

  // optional int32 m_seedid = 2;
  if (has_m_seedid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_seedid(), output);
  }

  // optional int32 m_mode = 3;
  if (has_m_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_mode(), output);
  }

  // repeated int32 m_pool = 4;
  for (int i = 0; i < this->m_pool_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->m_pool(i), output);
  }

  // optional int32 m_maxcount = 5;
  if (has_m_maxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_maxcount(), output);
  }

  // optional int32 m_count = 6;
  if (has_m_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_count(), output);
  }

  // optional int32 m_current = 7;
  if (has_m_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_current(), output);
  }

  // optional int32 m_last = 8;
  if (has_m_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_last(), output);
  }

  // optional int32 m_jokercard = 9;
  if (has_m_jokercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_jokercard(), output);
  }

  // optional int32 m_jokercount = 10;
  if (has_m_jokercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_jokercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.CCardPool)
}

::google::protobuf::uint8* CCardPool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.CCardPool)
  // optional .proto.game.redis.CCardTypePool m_cardtypepool = 1;
  if (has_m_cardtypepool()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_cardtypepool(), target);
  }

  // optional int32 m_seedid = 2;
  if (has_m_seedid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_seedid(), target);
  }

  // optional int32 m_mode = 3;
  if (has_m_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_mode(), target);
  }

  // repeated int32 m_pool = 4;
  for (int i = 0; i < this->m_pool_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->m_pool(i), target);
  }

  // optional int32 m_maxcount = 5;
  if (has_m_maxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_maxcount(), target);
  }

  // optional int32 m_count = 6;
  if (has_m_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_count(), target);
  }

  // optional int32 m_current = 7;
  if (has_m_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_current(), target);
  }

  // optional int32 m_last = 8;
  if (has_m_last()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_last(), target);
  }

  // optional int32 m_jokercard = 9;
  if (has_m_jokercard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_jokercard(), target);
  }

  // optional int32 m_jokercount = 10;
  if (has_m_jokercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_jokercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.CCardPool)
  return target;
}

int CCardPool::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.game.redis.CCardTypePool m_cardtypepool = 1;
    if (has_m_cardtypepool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_cardtypepool());
    }

    // optional int32 m_seedid = 2;
    if (has_m_seedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_seedid());
    }

    // optional int32 m_mode = 3;
    if (has_m_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mode());
    }

    // optional int32 m_maxcount = 5;
    if (has_m_maxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxcount());
    }

    // optional int32 m_count = 6;
    if (has_m_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_count());
    }

    // optional int32 m_current = 7;
    if (has_m_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_current());
    }

    // optional int32 m_last = 8;
    if (has_m_last()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_last());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_jokercard = 9;
    if (has_m_jokercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_jokercard());
    }

    // optional int32 m_jokercount = 10;
    if (has_m_jokercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_jokercount());
    }

  }
  // repeated int32 m_pool = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_pool_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_pool(i));
    }
    total_size += 1 * this->m_pool_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCardPool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCardPool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCardPool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCardPool::MergeFrom(const CCardPool& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_pool_.MergeFrom(from.m_pool_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_cardtypepool()) {
      mutable_m_cardtypepool()->::proto::game::redis::CCardTypePool::MergeFrom(from.m_cardtypepool());
    }
    if (from.has_m_seedid()) {
      set_m_seedid(from.m_seedid());
    }
    if (from.has_m_mode()) {
      set_m_mode(from.m_mode());
    }
    if (from.has_m_maxcount()) {
      set_m_maxcount(from.m_maxcount());
    }
    if (from.has_m_count()) {
      set_m_count(from.m_count());
    }
    if (from.has_m_current()) {
      set_m_current(from.m_current());
    }
    if (from.has_m_last()) {
      set_m_last(from.m_last());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_jokercard()) {
      set_m_jokercard(from.m_jokercard());
    }
    if (from.has_m_jokercount()) {
      set_m_jokercount(from.m_jokercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCardPool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCardPool::CopyFrom(const CCardPool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCardPool::IsInitialized() const {

  return true;
}

void CCardPool::Swap(CCardPool* other) {
  if (other != this) {
    std::swap(m_cardtypepool_, other->m_cardtypepool_);
    std::swap(m_seedid_, other->m_seedid_);
    std::swap(m_mode_, other->m_mode_);
    m_pool_.Swap(&other->m_pool_);
    std::swap(m_maxcount_, other->m_maxcount_);
    std::swap(m_count_, other->m_count_);
    std::swap(m_current_, other->m_current_);
    std::swap(m_last_, other->m_last_);
    std::swap(m_jokercard_, other->m_jokercard_);
    std::swap(m_jokercount_, other->m_jokercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCardPool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCardPool_descriptor_;
  metadata.reflection = CCardPool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MultiOpInfo::kMBmultiopusernumFieldNumber;
const int MultiOpInfo::kMBmultidoneopnumFieldNumber;
const int MultiOpInfo::kMBmultihuopecountFieldNumber;
const int MultiOpInfo::kMBmultiophunumFieldNumber;
const int MultiOpInfo::kMBmulitfirstoperateFieldNumber;
const int MultiOpInfo::kMBmultiuserdoneopFieldNumber;
const int MultiOpInfo::kMBmultiuserdoneopcardFieldNumber;
#endif  // !_MSC_VER

MultiOpInfo::MultiOpInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.MultiOpInfo)
}

void MultiOpInfo::InitAsDefaultInstance() {
}

MultiOpInfo::MultiOpInfo(const MultiOpInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.MultiOpInfo)
}

void MultiOpInfo::SharedCtor() {
  _cached_size_ = 0;
  m_bmultiopusernum_ = 0;
  m_bmultidoneopnum_ = 0;
  m_bmultihuopecount_ = 0;
  m_bmultiophunum_ = 0;
  m_bmulitfirstoperate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiOpInfo::~MultiOpInfo() {
  // @@protoc_insertion_point(destructor:proto.game.redis.MultiOpInfo)
  SharedDtor();
}

void MultiOpInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiOpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiOpInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiOpInfo_descriptor_;
}

const MultiOpInfo& MultiOpInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

MultiOpInfo* MultiOpInfo::default_instance_ = NULL;

MultiOpInfo* MultiOpInfo::New() const {
  return new MultiOpInfo;
}

void MultiOpInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MultiOpInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(m_bmultiopusernum_, m_bmultiophunum_);
    m_bmulitfirstoperate_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  m_bmultiuserdoneop_.Clear();
  m_bmultiuserdoneopcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultiOpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.MultiOpInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_bmultiopusernum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bmultiopusernum_)));
          set_has_m_bmultiopusernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_bmultidoneopnum;
        break;
      }

      // optional int32 m_bmultidoneopnum = 2;
      case 2: {
        if (tag == 16) {
         parse_m_bmultidoneopnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bmultidoneopnum_)));
          set_has_m_bmultidoneopnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_bmultihuopecount;
        break;
      }

      // optional int32 m_bmultihuopecount = 3;
      case 3: {
        if (tag == 24) {
         parse_m_bmultihuopecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bmultihuopecount_)));
          set_has_m_bmultihuopecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_bmultiophunum;
        break;
      }

      // optional int32 m_bmultiophunum = 4;
      case 4: {
        if (tag == 32) {
         parse_m_bmultiophunum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bmultiophunum_)));
          set_has_m_bmultiophunum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_m_bmulitfirstoperate;
        break;
      }

      // optional int32 m_bmulitfirstoperate = 5;
      case 5: {
        if (tag == 40) {
         parse_m_bmulitfirstoperate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bmulitfirstoperate_)));
          set_has_m_bmulitfirstoperate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_m_bmultiuserdoneop;
        break;
      }

      // repeated int32 m_bmultiuserdoneop = 6;
      case 6: {
        if (tag == 48) {
         parse_m_bmultiuserdoneop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_m_bmultiuserdoneop())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_bmultiuserdoneop())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_m_bmultiuserdoneop;
        if (input->ExpectTag(56)) goto parse_m_bmultiuserdoneopcard;
        break;
      }

      // repeated int32 m_bmultiuserdoneopcard = 7;
      case 7: {
        if (tag == 56) {
         parse_m_bmultiuserdoneopcard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_m_bmultiuserdoneopcard())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_bmultiuserdoneopcard())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_m_bmultiuserdoneopcard;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.MultiOpInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.MultiOpInfo)
  return false;
#undef DO_
}

void MultiOpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.MultiOpInfo)
  // optional int32 m_bmultiopusernum = 1;
  if (has_m_bmultiopusernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_bmultiopusernum(), output);
  }

  // optional int32 m_bmultidoneopnum = 2;
  if (has_m_bmultidoneopnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_bmultidoneopnum(), output);
  }

  // optional int32 m_bmultihuopecount = 3;
  if (has_m_bmultihuopecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_bmultihuopecount(), output);
  }

  // optional int32 m_bmultiophunum = 4;
  if (has_m_bmultiophunum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_bmultiophunum(), output);
  }

  // optional int32 m_bmulitfirstoperate = 5;
  if (has_m_bmulitfirstoperate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_bmulitfirstoperate(), output);
  }

  // repeated int32 m_bmultiuserdoneop = 6;
  for (int i = 0; i < this->m_bmultiuserdoneop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->m_bmultiuserdoneop(i), output);
  }

  // repeated int32 m_bmultiuserdoneopcard = 7;
  for (int i = 0; i < this->m_bmultiuserdoneopcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->m_bmultiuserdoneopcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.MultiOpInfo)
}

::google::protobuf::uint8* MultiOpInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.MultiOpInfo)
  // optional int32 m_bmultiopusernum = 1;
  if (has_m_bmultiopusernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_bmultiopusernum(), target);
  }

  // optional int32 m_bmultidoneopnum = 2;
  if (has_m_bmultidoneopnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_bmultidoneopnum(), target);
  }

  // optional int32 m_bmultihuopecount = 3;
  if (has_m_bmultihuopecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_bmultihuopecount(), target);
  }

  // optional int32 m_bmultiophunum = 4;
  if (has_m_bmultiophunum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_bmultiophunum(), target);
  }

  // optional int32 m_bmulitfirstoperate = 5;
  if (has_m_bmulitfirstoperate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_bmulitfirstoperate(), target);
  }

  // repeated int32 m_bmultiuserdoneop = 6;
  for (int i = 0; i < this->m_bmultiuserdoneop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->m_bmultiuserdoneop(i), target);
  }

  // repeated int32 m_bmultiuserdoneopcard = 7;
  for (int i = 0; i < this->m_bmultiuserdoneopcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->m_bmultiuserdoneopcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.MultiOpInfo)
  return target;
}

int MultiOpInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_bmultiopusernum = 1;
    if (has_m_bmultiopusernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bmultiopusernum());
    }

    // optional int32 m_bmultidoneopnum = 2;
    if (has_m_bmultidoneopnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bmultidoneopnum());
    }

    // optional int32 m_bmultihuopecount = 3;
    if (has_m_bmultihuopecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bmultihuopecount());
    }

    // optional int32 m_bmultiophunum = 4;
    if (has_m_bmultiophunum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bmultiophunum());
    }

    // optional int32 m_bmulitfirstoperate = 5;
    if (has_m_bmulitfirstoperate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bmulitfirstoperate());
    }

  }
  // repeated int32 m_bmultiuserdoneop = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_bmultiuserdoneop_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_bmultiuserdoneop(i));
    }
    total_size += 1 * this->m_bmultiuserdoneop_size() + data_size;
  }

  // repeated int32 m_bmultiuserdoneopcard = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_bmultiuserdoneopcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_bmultiuserdoneopcard(i));
    }
    total_size += 1 * this->m_bmultiuserdoneopcard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiOpInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultiOpInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultiOpInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultiOpInfo::MergeFrom(const MultiOpInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_bmultiuserdoneop_.MergeFrom(from.m_bmultiuserdoneop_);
  m_bmultiuserdoneopcard_.MergeFrom(from.m_bmultiuserdoneopcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_bmultiopusernum()) {
      set_m_bmultiopusernum(from.m_bmultiopusernum());
    }
    if (from.has_m_bmultidoneopnum()) {
      set_m_bmultidoneopnum(from.m_bmultidoneopnum());
    }
    if (from.has_m_bmultihuopecount()) {
      set_m_bmultihuopecount(from.m_bmultihuopecount());
    }
    if (from.has_m_bmultiophunum()) {
      set_m_bmultiophunum(from.m_bmultiophunum());
    }
    if (from.has_m_bmulitfirstoperate()) {
      set_m_bmulitfirstoperate(from.m_bmulitfirstoperate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultiOpInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiOpInfo::CopyFrom(const MultiOpInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiOpInfo::IsInitialized() const {

  return true;
}

void MultiOpInfo::Swap(MultiOpInfo* other) {
  if (other != this) {
    std::swap(m_bmultiopusernum_, other->m_bmultiopusernum_);
    std::swap(m_bmultidoneopnum_, other->m_bmultidoneopnum_);
    std::swap(m_bmultihuopecount_, other->m_bmultihuopecount_);
    std::swap(m_bmultiophunum_, other->m_bmultiophunum_);
    std::swap(m_bmulitfirstoperate_, other->m_bmulitfirstoperate_);
    m_bmultiuserdoneop_.Swap(&other->m_bmultiuserdoneop_);
    m_bmultiuserdoneopcard_.Swap(&other->m_bmultiuserdoneopcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultiOpInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiOpInfo_descriptor_;
  metadata.reflection = MultiOpInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RobAddInfo::kMRoboperatenumFieldNumber;
const int RobAddInfo::kMRobhunumFieldNumber;
const int RobAddInfo::kMWanggangplayerFieldNumber;
const int RobAddInfo::kMWanggangplayeroptypeFieldNumber;
const int RobAddInfo::kMRobhudoneopFieldNumber;
const int RobAddInfo::kMBaddfanflagFieldNumber;
const int RobAddInfo::kMRobwangangcardFieldNumber;
const int RobAddInfo::kMBrobwangangFieldNumber;
const int RobAddInfo::kMBrobhuFieldNumber;
const int RobAddInfo::kMBrobganghujudgeFieldNumber;
#endif  // !_MSC_VER

RobAddInfo::RobAddInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.RobAddInfo)
}

void RobAddInfo::InitAsDefaultInstance() {
}

RobAddInfo::RobAddInfo(const RobAddInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.RobAddInfo)
}

void RobAddInfo::SharedCtor() {
  _cached_size_ = 0;
  m_roboperatenum_ = 0;
  m_robhunum_ = 0;
  m_wanggangplayer_ = 0;
  m_wanggangplayeroptype_ = 0;
  m_robwangangcard_ = 0;
  m_brobwangang_ = false;
  m_brobhu_ = false;
  m_brobganghujudge_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobAddInfo::~RobAddInfo() {
  // @@protoc_insertion_point(destructor:proto.game.redis.RobAddInfo)
  SharedDtor();
}

void RobAddInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobAddInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobAddInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobAddInfo_descriptor_;
}

const RobAddInfo& RobAddInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

RobAddInfo* RobAddInfo::default_instance_ = NULL;

RobAddInfo* RobAddInfo::New() const {
  return new RobAddInfo;
}

void RobAddInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RobAddInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 207) {
    ZR_(m_roboperatenum_, m_wanggangplayeroptype_);
    ZR_(m_robwangangcard_, m_brobwangang_);
  }
  ZR_(m_brobhu_, m_brobganghujudge_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  m_robhudoneop_.Clear();
  m_baddfanflag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RobAddInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.RobAddInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_roboperatenum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roboperatenum_)));
          set_has_m_roboperatenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_robhunum;
        break;
      }

      // optional int32 m_robhunum = 2;
      case 2: {
        if (tag == 16) {
         parse_m_robhunum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_robhunum_)));
          set_has_m_robhunum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_wanggangplayer;
        break;
      }

      // optional int32 m_wanggangplayer = 3;
      case 3: {
        if (tag == 24) {
         parse_m_wanggangplayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wanggangplayer_)));
          set_has_m_wanggangplayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_wanggangplayeroptype;
        break;
      }

      // optional int32 m_wanggangplayeroptype = 4;
      case 4: {
        if (tag == 32) {
         parse_m_wanggangplayeroptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wanggangplayeroptype_)));
          set_has_m_wanggangplayeroptype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_m_robhudoneop;
        break;
      }

      // repeated int32 m_robhudoneop = 5;
      case 5: {
        if (tag == 40) {
         parse_m_robhudoneop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_m_robhudoneop())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_robhudoneop())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_m_robhudoneop;
        if (input->ExpectTag(48)) goto parse_m_baddfanflag;
        break;
      }

      // repeated bool m_baddfanflag = 6;
      case 6: {
        if (tag == 48) {
         parse_m_baddfanflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 48, input, this->mutable_m_baddfanflag())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_m_baddfanflag())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_m_baddfanflag;
        if (input->ExpectTag(56)) goto parse_m_robwangangcard;
        break;
      }

      // optional int32 m_robwangangcard = 7;
      case 7: {
        if (tag == 56) {
         parse_m_robwangangcard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_robwangangcard_)));
          set_has_m_robwangangcard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_m_brobwangang;
        break;
      }

      // optional bool m_brobwangang = 8;
      case 8: {
        if (tag == 64) {
         parse_m_brobwangang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_brobwangang_)));
          set_has_m_brobwangang();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_m_brobhu;
        break;
      }

      // optional bool m_brobhu = 9;
      case 9: {
        if (tag == 72) {
         parse_m_brobhu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_brobhu_)));
          set_has_m_brobhu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_m_brobganghujudge;
        break;
      }

      // optional bool m_brobganghujudge = 10;
      case 10: {
        if (tag == 80) {
         parse_m_brobganghujudge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_brobganghujudge_)));
          set_has_m_brobganghujudge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.RobAddInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.RobAddInfo)
  return false;
#undef DO_
}

void RobAddInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.RobAddInfo)
  // optional int32 m_roboperatenum = 1;
  if (has_m_roboperatenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_roboperatenum(), output);
  }

  // optional int32 m_robhunum = 2;
  if (has_m_robhunum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_robhunum(), output);
  }

  // optional int32 m_wanggangplayer = 3;
  if (has_m_wanggangplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_wanggangplayer(), output);
  }

  // optional int32 m_wanggangplayeroptype = 4;
  if (has_m_wanggangplayeroptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_wanggangplayeroptype(), output);
  }

  // repeated int32 m_robhudoneop = 5;
  for (int i = 0; i < this->m_robhudoneop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->m_robhudoneop(i), output);
  }

  // repeated bool m_baddfanflag = 6;
  for (int i = 0; i < this->m_baddfanflag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      6, this->m_baddfanflag(i), output);
  }

  // optional int32 m_robwangangcard = 7;
  if (has_m_robwangangcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_robwangangcard(), output);
  }

  // optional bool m_brobwangang = 8;
  if (has_m_brobwangang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->m_brobwangang(), output);
  }

  // optional bool m_brobhu = 9;
  if (has_m_brobhu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->m_brobhu(), output);
  }

  // optional bool m_brobganghujudge = 10;
  if (has_m_brobganghujudge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->m_brobganghujudge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.RobAddInfo)
}

::google::protobuf::uint8* RobAddInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.RobAddInfo)
  // optional int32 m_roboperatenum = 1;
  if (has_m_roboperatenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_roboperatenum(), target);
  }

  // optional int32 m_robhunum = 2;
  if (has_m_robhunum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_robhunum(), target);
  }

  // optional int32 m_wanggangplayer = 3;
  if (has_m_wanggangplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_wanggangplayer(), target);
  }

  // optional int32 m_wanggangplayeroptype = 4;
  if (has_m_wanggangplayeroptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_wanggangplayeroptype(), target);
  }

  // repeated int32 m_robhudoneop = 5;
  for (int i = 0; i < this->m_robhudoneop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->m_robhudoneop(i), target);
  }

  // repeated bool m_baddfanflag = 6;
  for (int i = 0; i < this->m_baddfanflag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(6, this->m_baddfanflag(i), target);
  }

  // optional int32 m_robwangangcard = 7;
  if (has_m_robwangangcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_robwangangcard(), target);
  }

  // optional bool m_brobwangang = 8;
  if (has_m_brobwangang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->m_brobwangang(), target);
  }

  // optional bool m_brobhu = 9;
  if (has_m_brobhu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->m_brobhu(), target);
  }

  // optional bool m_brobganghujudge = 10;
  if (has_m_brobganghujudge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->m_brobganghujudge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.RobAddInfo)
  return target;
}

int RobAddInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_roboperatenum = 1;
    if (has_m_roboperatenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roboperatenum());
    }

    // optional int32 m_robhunum = 2;
    if (has_m_robhunum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_robhunum());
    }

    // optional int32 m_wanggangplayer = 3;
    if (has_m_wanggangplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wanggangplayer());
    }

    // optional int32 m_wanggangplayeroptype = 4;
    if (has_m_wanggangplayeroptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wanggangplayeroptype());
    }

    // optional int32 m_robwangangcard = 7;
    if (has_m_robwangangcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_robwangangcard());
    }

    // optional bool m_brobwangang = 8;
    if (has_m_brobwangang()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool m_brobhu = 9;
    if (has_m_brobhu()) {
      total_size += 1 + 1;
    }

    // optional bool m_brobganghujudge = 10;
    if (has_m_brobganghujudge()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 m_robhudoneop = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_robhudoneop_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_robhudoneop(i));
    }
    total_size += 1 * this->m_robhudoneop_size() + data_size;
  }

  // repeated bool m_baddfanflag = 6;
  {
    int data_size = 0;
    data_size = 1 * this->m_baddfanflag_size();
    total_size += 1 * this->m_baddfanflag_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobAddInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobAddInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobAddInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RobAddInfo::MergeFrom(const RobAddInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_robhudoneop_.MergeFrom(from.m_robhudoneop_);
  m_baddfanflag_.MergeFrom(from.m_baddfanflag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_roboperatenum()) {
      set_m_roboperatenum(from.m_roboperatenum());
    }
    if (from.has_m_robhunum()) {
      set_m_robhunum(from.m_robhunum());
    }
    if (from.has_m_wanggangplayer()) {
      set_m_wanggangplayer(from.m_wanggangplayer());
    }
    if (from.has_m_wanggangplayeroptype()) {
      set_m_wanggangplayeroptype(from.m_wanggangplayeroptype());
    }
    if (from.has_m_robwangangcard()) {
      set_m_robwangangcard(from.m_robwangangcard());
    }
    if (from.has_m_brobwangang()) {
      set_m_brobwangang(from.m_brobwangang());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_brobhu()) {
      set_m_brobhu(from.m_brobhu());
    }
    if (from.has_m_brobganghujudge()) {
      set_m_brobganghujudge(from.m_brobganghujudge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RobAddInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobAddInfo::CopyFrom(const RobAddInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobAddInfo::IsInitialized() const {

  return true;
}

void RobAddInfo::Swap(RobAddInfo* other) {
  if (other != this) {
    std::swap(m_roboperatenum_, other->m_roboperatenum_);
    std::swap(m_robhunum_, other->m_robhunum_);
    std::swap(m_wanggangplayer_, other->m_wanggangplayer_);
    std::swap(m_wanggangplayeroptype_, other->m_wanggangplayeroptype_);
    m_robhudoneop_.Swap(&other->m_robhudoneop_);
    m_baddfanflag_.Swap(&other->m_baddfanflag_);
    std::swap(m_robwangangcard_, other->m_robwangangcard_);
    std::swap(m_brobwangang_, other->m_brobwangang_);
    std::swap(m_brobhu_, other->m_brobhu_);
    std::swap(m_brobganghujudge_, other->m_brobganghujudge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RobAddInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobAddInfo_descriptor_;
  metadata.reflection = RobAddInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LOWLEVELOPERATE::kIoptypeFieldNumber;
const int LOWLEVELOPERATE::kChairidFieldNumber;
const int LOWLEVELOPERATE::kBcardFieldNumber;
#endif  // !_MSC_VER

LOWLEVELOPERATE::LOWLEVELOPERATE()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.LOWLEVELOPERATE)
}

void LOWLEVELOPERATE::InitAsDefaultInstance() {
}

LOWLEVELOPERATE::LOWLEVELOPERATE(const LOWLEVELOPERATE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.LOWLEVELOPERATE)
}

void LOWLEVELOPERATE::SharedCtor() {
  _cached_size_ = 0;
  ioptype_ = 0;
  chairid_ = 0;
  bcard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LOWLEVELOPERATE::~LOWLEVELOPERATE() {
  // @@protoc_insertion_point(destructor:proto.game.redis.LOWLEVELOPERATE)
  SharedDtor();
}

void LOWLEVELOPERATE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LOWLEVELOPERATE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LOWLEVELOPERATE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOWLEVELOPERATE_descriptor_;
}

const LOWLEVELOPERATE& LOWLEVELOPERATE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

LOWLEVELOPERATE* LOWLEVELOPERATE::default_instance_ = NULL;

LOWLEVELOPERATE* LOWLEVELOPERATE::New() const {
  return new LOWLEVELOPERATE;
}

void LOWLEVELOPERATE::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LOWLEVELOPERATE*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ioptype_, bcard_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LOWLEVELOPERATE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.LOWLEVELOPERATE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ioptype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ioptype_)));
          set_has_ioptype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_chairid;
        break;
      }

      // optional int32 chairid = 2;
      case 2: {
        if (tag == 16) {
         parse_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bcard;
        break;
      }

      // optional int32 bcard = 3;
      case 3: {
        if (tag == 24) {
         parse_bcard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bcard_)));
          set_has_bcard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.LOWLEVELOPERATE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.LOWLEVELOPERATE)
  return false;
#undef DO_
}

void LOWLEVELOPERATE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.LOWLEVELOPERATE)
  // optional int32 ioptype = 1;
  if (has_ioptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ioptype(), output);
  }

  // optional int32 chairid = 2;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairid(), output);
  }

  // optional int32 bcard = 3;
  if (has_bcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bcard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.LOWLEVELOPERATE)
}

::google::protobuf::uint8* LOWLEVELOPERATE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.LOWLEVELOPERATE)
  // optional int32 ioptype = 1;
  if (has_ioptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ioptype(), target);
  }

  // optional int32 chairid = 2;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chairid(), target);
  }

  // optional int32 bcard = 3;
  if (has_bcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bcard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.LOWLEVELOPERATE)
  return target;
}

int LOWLEVELOPERATE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ioptype = 1;
    if (has_ioptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ioptype());
    }

    // optional int32 chairid = 2;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 bcard = 3;
    if (has_bcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bcard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LOWLEVELOPERATE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LOWLEVELOPERATE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LOWLEVELOPERATE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LOWLEVELOPERATE::MergeFrom(const LOWLEVELOPERATE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ioptype()) {
      set_ioptype(from.ioptype());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_bcard()) {
      set_bcard(from.bcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LOWLEVELOPERATE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOWLEVELOPERATE::CopyFrom(const LOWLEVELOPERATE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOWLEVELOPERATE::IsInitialized() const {

  return true;
}

void LOWLEVELOPERATE::Swap(LOWLEVELOPERATE* other) {
  if (other != this) {
    std::swap(ioptype_, other->ioptype_);
    std::swap(chairid_, other->chairid_);
    std::swap(bcard_, other->bcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LOWLEVELOPERATE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LOWLEVELOPERATE_descriptor_;
  metadata.reflection = LOWLEVELOPERATE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGangScore::kCardFieldNumber;
const int tagGangScore::kChairidFieldNumber;
const int tagGangScore::kItypeFieldNumber;
#endif  // !_MSC_VER

tagGangScore::tagGangScore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.tagGangScore)
}

void tagGangScore::InitAsDefaultInstance() {
}

tagGangScore::tagGangScore(const tagGangScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.tagGangScore)
}

void tagGangScore::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  chairid_ = 0;
  itype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGangScore::~tagGangScore() {
  // @@protoc_insertion_point(destructor:proto.game.redis.tagGangScore)
  SharedDtor();
}

void tagGangScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagGangScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGangScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGangScore_descriptor_;
}

const tagGangScore& tagGangScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

tagGangScore* tagGangScore::default_instance_ = NULL;

tagGangScore* tagGangScore::New() const {
  return new tagGangScore;
}

void tagGangScore::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<tagGangScore*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(card_, itype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGangScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.tagGangScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 card = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_chairid;
        break;
      }

      // optional int32 chairid = 2;
      case 2: {
        if (tag == 16) {
         parse_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itype;
        break;
      }

      // optional int32 itype = 3;
      case 3: {
        if (tag == 24) {
         parse_itype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itype_)));
          set_has_itype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.tagGangScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.tagGangScore)
  return false;
#undef DO_
}

void tagGangScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.tagGangScore)
  // optional int32 card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  // optional int32 chairid = 2;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairid(), output);
  }

  // optional int32 itype = 3;
  if (has_itype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.tagGangScore)
}

::google::protobuf::uint8* tagGangScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.tagGangScore)
  // optional int32 card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  // optional int32 chairid = 2;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chairid(), target);
  }

  // optional int32 itype = 3;
  if (has_itype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.tagGangScore)
  return target;
}

int tagGangScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 chairid = 2;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 itype = 3;
    if (has_itype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGangScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGangScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGangScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGangScore::MergeFrom(const tagGangScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_itype()) {
      set_itype(from.itype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGangScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGangScore::CopyFrom(const tagGangScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGangScore::IsInitialized() const {

  return true;
}

void tagGangScore::Swap(tagGangScore* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(chairid_, other->chairid_);
    std::swap(itype_, other->itype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGangScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGangScore_descriptor_;
  metadata.reflection = tagGangScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGangScoreInfo::kItotalscoreFieldNumber;
const int tagGangScoreInfo::kGangFieldNumber;
#endif  // !_MSC_VER

tagGangScoreInfo::tagGangScoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.tagGangScoreInfo)
}

void tagGangScoreInfo::InitAsDefaultInstance() {
}

tagGangScoreInfo::tagGangScoreInfo(const tagGangScoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.tagGangScoreInfo)
}

void tagGangScoreInfo::SharedCtor() {
  _cached_size_ = 0;
  itotalscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGangScoreInfo::~tagGangScoreInfo() {
  // @@protoc_insertion_point(destructor:proto.game.redis.tagGangScoreInfo)
  SharedDtor();
}

void tagGangScoreInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagGangScoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGangScoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGangScoreInfo_descriptor_;
}

const tagGangScoreInfo& tagGangScoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

tagGangScoreInfo* tagGangScoreInfo::default_instance_ = NULL;

tagGangScoreInfo* tagGangScoreInfo::New() const {
  return new tagGangScoreInfo;
}

void tagGangScoreInfo::Clear() {
  itotalscore_ = 0;
  gang_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGangScoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.tagGangScoreInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itotalscore = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itotalscore_)));
          set_has_itotalscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gang;
        break;
      }

      // repeated .proto.game.redis.tagGangScore gang = 2;
      case 2: {
        if (tag == 18) {
         parse_gang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gang()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gang;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.tagGangScoreInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.tagGangScoreInfo)
  return false;
#undef DO_
}

void tagGangScoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.tagGangScoreInfo)
  // optional int32 itotalscore = 1;
  if (has_itotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itotalscore(), output);
  }

  // repeated .proto.game.redis.tagGangScore gang = 2;
  for (int i = 0; i < this->gang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gang(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.tagGangScoreInfo)
}

::google::protobuf::uint8* tagGangScoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.tagGangScoreInfo)
  // optional int32 itotalscore = 1;
  if (has_itotalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itotalscore(), target);
  }

  // repeated .proto.game.redis.tagGangScore gang = 2;
  for (int i = 0; i < this->gang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gang(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.tagGangScoreInfo)
  return target;
}

int tagGangScoreInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itotalscore = 1;
    if (has_itotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itotalscore());
    }

  }
  // repeated .proto.game.redis.tagGangScore gang = 2;
  total_size += 1 * this->gang_size();
  for (int i = 0; i < this->gang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gang(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGangScoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGangScoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGangScoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGangScoreInfo::MergeFrom(const tagGangScoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gang_.MergeFrom(from.gang_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itotalscore()) {
      set_itotalscore(from.itotalscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGangScoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGangScoreInfo::CopyFrom(const tagGangScoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGangScoreInfo::IsInitialized() const {

  return true;
}

void tagGangScoreInfo::Swap(tagGangScoreInfo* other) {
  if (other != this) {
    std::swap(itotalscore_, other->itotalscore_);
    gang_.Swap(&other->gang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGangScoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGangScoreInfo_descriptor_;
  metadata.reflection = tagGangScoreInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagHuRecord::kBhucardFieldNumber;
const int tagHuRecord::kBpashuchairidFieldNumber;
const int tagHuRecord::kBtypeFieldNumber;
const int tagHuRecord::kIfannumFieldNumber;
#endif  // !_MSC_VER

tagHuRecord::tagHuRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.tagHuRecord)
}

void tagHuRecord::InitAsDefaultInstance() {
}

tagHuRecord::tagHuRecord(const tagHuRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.tagHuRecord)
}

void tagHuRecord::SharedCtor() {
  _cached_size_ = 0;
  bhucard_ = 0;
  bpashuchairid_ = 0;
  btype_ = 0;
  ifannum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagHuRecord::~tagHuRecord() {
  // @@protoc_insertion_point(destructor:proto.game.redis.tagHuRecord)
  SharedDtor();
}

void tagHuRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagHuRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagHuRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagHuRecord_descriptor_;
}

const tagHuRecord& tagHuRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

tagHuRecord* tagHuRecord::default_instance_ = NULL;

tagHuRecord* tagHuRecord::New() const {
  return new tagHuRecord;
}

void tagHuRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<tagHuRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bhucard_, ifannum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagHuRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.tagHuRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bhucard = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bhucard_)));
          set_has_bhucard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bpashuchairid;
        break;
      }

      // optional int32 bpashuchairid = 2;
      case 2: {
        if (tag == 16) {
         parse_bpashuchairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bpashuchairid_)));
          set_has_bpashuchairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_btype;
        break;
      }

      // optional int32 btype = 3;
      case 3: {
        if (tag == 24) {
         parse_btype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &btype_)));
          set_has_btype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ifannum;
        break;
      }

      // optional int32 ifannum = 4;
      case 4: {
        if (tag == 32) {
         parse_ifannum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifannum_)));
          set_has_ifannum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.tagHuRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.tagHuRecord)
  return false;
#undef DO_
}

void tagHuRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.tagHuRecord)
  // optional int32 bhucard = 1;
  if (has_bhucard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bhucard(), output);
  }

  // optional int32 bpashuchairid = 2;
  if (has_bpashuchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bpashuchairid(), output);
  }

  // optional int32 btype = 3;
  if (has_btype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->btype(), output);
  }

  // optional int32 ifannum = 4;
  if (has_ifannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ifannum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.tagHuRecord)
}

::google::protobuf::uint8* tagHuRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.tagHuRecord)
  // optional int32 bhucard = 1;
  if (has_bhucard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bhucard(), target);
  }

  // optional int32 bpashuchairid = 2;
  if (has_bpashuchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bpashuchairid(), target);
  }

  // optional int32 btype = 3;
  if (has_btype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->btype(), target);
  }

  // optional int32 ifannum = 4;
  if (has_ifannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ifannum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.tagHuRecord)
  return target;
}

int tagHuRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bhucard = 1;
    if (has_bhucard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bhucard());
    }

    // optional int32 bpashuchairid = 2;
    if (has_bpashuchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bpashuchairid());
    }

    // optional int32 btype = 3;
    if (has_btype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->btype());
    }

    // optional int32 ifannum = 4;
    if (has_ifannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifannum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagHuRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagHuRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagHuRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagHuRecord::MergeFrom(const tagHuRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bhucard()) {
      set_bhucard(from.bhucard());
    }
    if (from.has_bpashuchairid()) {
      set_bpashuchairid(from.bpashuchairid());
    }
    if (from.has_btype()) {
      set_btype(from.btype());
    }
    if (from.has_ifannum()) {
      set_ifannum(from.ifannum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagHuRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagHuRecord::CopyFrom(const tagHuRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagHuRecord::IsInitialized() const {

  return true;
}

void tagHuRecord::Swap(tagHuRecord* other) {
  if (other != this) {
    std::swap(bhucard_, other->bhucard_);
    std::swap(bpashuchairid_, other->bpashuchairid_);
    std::swap(btype_, other->btype_);
    std::swap(ifannum_, other->ifannum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagHuRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagHuRecord_descriptor_;
  metadata.reflection = tagHuRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagHuInfo::kItotalscoreFieldNumber;
const int tagHuInfo::kSthuFieldNumber;
#endif  // !_MSC_VER

tagHuInfo::tagHuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.tagHuInfo)
}

void tagHuInfo::InitAsDefaultInstance() {
}

tagHuInfo::tagHuInfo(const tagHuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.tagHuInfo)
}

void tagHuInfo::SharedCtor() {
  _cached_size_ = 0;
  itotalscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagHuInfo::~tagHuInfo() {
  // @@protoc_insertion_point(destructor:proto.game.redis.tagHuInfo)
  SharedDtor();
}

void tagHuInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagHuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagHuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagHuInfo_descriptor_;
}

const tagHuInfo& tagHuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

tagHuInfo* tagHuInfo::default_instance_ = NULL;

tagHuInfo* tagHuInfo::New() const {
  return new tagHuInfo;
}

void tagHuInfo::Clear() {
  itotalscore_ = 0;
  sthu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagHuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.tagHuInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itotalscore = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itotalscore_)));
          set_has_itotalscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sthu;
        break;
      }

      // repeated .proto.game.redis.tagHuRecord sthu = 2;
      case 2: {
        if (tag == 18) {
         parse_sthu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sthu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sthu;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.tagHuInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.tagHuInfo)
  return false;
#undef DO_
}

void tagHuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.tagHuInfo)
  // optional int32 itotalscore = 1;
  if (has_itotalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itotalscore(), output);
  }

  // repeated .proto.game.redis.tagHuRecord sthu = 2;
  for (int i = 0; i < this->sthu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sthu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.tagHuInfo)
}

::google::protobuf::uint8* tagHuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.tagHuInfo)
  // optional int32 itotalscore = 1;
  if (has_itotalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itotalscore(), target);
  }

  // repeated .proto.game.redis.tagHuRecord sthu = 2;
  for (int i = 0; i < this->sthu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sthu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.tagHuInfo)
  return target;
}

int tagHuInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itotalscore = 1;
    if (has_itotalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itotalscore());
    }

  }
  // repeated .proto.game.redis.tagHuRecord sthu = 2;
  total_size += 1 * this->sthu_size();
  for (int i = 0; i < this->sthu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sthu(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagHuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagHuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagHuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagHuInfo::MergeFrom(const tagHuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  sthu_.MergeFrom(from.sthu_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itotalscore()) {
      set_itotalscore(from.itotalscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagHuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagHuInfo::CopyFrom(const tagHuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagHuInfo::IsInitialized() const {

  return true;
}

void tagHuInfo::Swap(tagHuInfo* other) {
  if (other != this) {
    std::swap(itotalscore_, other->itotalscore_);
    sthu_.Swap(&other->sthu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagHuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagHuInfo_descriptor_;
  metadata.reflection = tagHuInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MJ_BUFFER::kCardFieldNumber;
#endif  // !_MSC_VER

MJ_BUFFER::MJ_BUFFER()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.MJ_BUFFER)
}

void MJ_BUFFER::InitAsDefaultInstance() {
}

MJ_BUFFER::MJ_BUFFER(const MJ_BUFFER& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.MJ_BUFFER)
}

void MJ_BUFFER::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MJ_BUFFER::~MJ_BUFFER() {
  // @@protoc_insertion_point(destructor:proto.game.redis.MJ_BUFFER)
  SharedDtor();
}

void MJ_BUFFER::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MJ_BUFFER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MJ_BUFFER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MJ_BUFFER_descriptor_;
}

const MJ_BUFFER& MJ_BUFFER::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

MJ_BUFFER* MJ_BUFFER::default_instance_ = NULL;

MJ_BUFFER* MJ_BUFFER::New() const {
  return new MJ_BUFFER;
}

void MJ_BUFFER::Clear() {
  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MJ_BUFFER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.MJ_BUFFER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 card = 1;
      case 1: {
        if (tag == 8) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_card())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_card;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.MJ_BUFFER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.MJ_BUFFER)
  return false;
#undef DO_
}

void MJ_BUFFER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.MJ_BUFFER)
  // repeated int32 card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.MJ_BUFFER)
}

::google::protobuf::uint8* MJ_BUFFER::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.MJ_BUFFER)
  // repeated int32 card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.MJ_BUFFER)
  return target;
}

int MJ_BUFFER::ByteSize() const {
  int total_size = 0;

  // repeated int32 card = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MJ_BUFFER::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MJ_BUFFER* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MJ_BUFFER*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MJ_BUFFER::MergeFrom(const MJ_BUFFER& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MJ_BUFFER::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MJ_BUFFER::CopyFrom(const MJ_BUFFER& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MJ_BUFFER::IsInitialized() const {

  return true;
}

void MJ_BUFFER::Swap(MJ_BUFFER* other) {
  if (other != this) {
    card_.Swap(&other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MJ_BUFFER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MJ_BUFFER_descriptor_;
  metadata.reflection = MJ_BUFFER_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HuFanInfo::kMBishuFieldNumber;
const int HuFanInfo::kMHufannumsFieldNumber;
const int HuFanInfo::kMStgangFieldNumber;
const int HuFanInfo::kMSthuscoreFieldNumber;
const int HuFanInfo::kMOfanFieldNumber;
#endif  // !_MSC_VER

HuFanInfo::HuFanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.HuFanInfo)
}

void HuFanInfo::InitAsDefaultInstance() {
}

HuFanInfo::HuFanInfo(const HuFanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.HuFanInfo)
}

void HuFanInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HuFanInfo::~HuFanInfo() {
  // @@protoc_insertion_point(destructor:proto.game.redis.HuFanInfo)
  SharedDtor();
}

void HuFanInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HuFanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuFanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HuFanInfo_descriptor_;
}

const HuFanInfo& HuFanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

HuFanInfo* HuFanInfo::default_instance_ = NULL;

HuFanInfo* HuFanInfo::New() const {
  return new HuFanInfo;
}

void HuFanInfo::Clear() {
  m_bishu_.Clear();
  m_hufannums_.Clear();
  m_stgang_.Clear();
  m_sthuscore_.Clear();
  m_ofan_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HuFanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.HuFanInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool m_bishu = 1;
      case 1: {
        if (tag == 8) {
         parse_m_bishu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 8, input, this->mutable_m_bishu())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_m_bishu())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_m_bishu;
        if (input->ExpectTag(16)) goto parse_m_hufannums;
        break;
      }

      // repeated int32 m_hufannums = 2;
      case 2: {
        if (tag == 16) {
         parse_m_hufannums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_m_hufannums())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_hufannums())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_hufannums;
        if (input->ExpectTag(26)) goto parse_m_stgang;
        break;
      }

      // repeated .proto.game.redis.tagGangScoreInfo m_stgang = 3;
      case 3: {
        if (tag == 26) {
         parse_m_stgang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_stgang()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_m_stgang;
        if (input->ExpectTag(34)) goto parse_m_sthuscore;
        break;
      }

      // repeated .proto.game.redis.tagHuInfo m_sthuscore = 4;
      case 4: {
        if (tag == 34) {
         parse_m_sthuscore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_sthuscore()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_m_sthuscore;
        if (input->ExpectTag(42)) goto parse_m_ofan;
        break;
      }

      // repeated .proto.game.redis.MJ_BUFFER m_ofan = 5;
      case 5: {
        if (tag == 42) {
         parse_m_ofan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_ofan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_m_ofan;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.HuFanInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.HuFanInfo)
  return false;
#undef DO_
}

void HuFanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.HuFanInfo)
  // repeated bool m_bishu = 1;
  for (int i = 0; i < this->m_bishu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      1, this->m_bishu(i), output);
  }

  // repeated int32 m_hufannums = 2;
  for (int i = 0; i < this->m_hufannums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->m_hufannums(i), output);
  }

  // repeated .proto.game.redis.tagGangScoreInfo m_stgang = 3;
  for (int i = 0; i < this->m_stgang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_stgang(i), output);
  }

  // repeated .proto.game.redis.tagHuInfo m_sthuscore = 4;
  for (int i = 0; i < this->m_sthuscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_sthuscore(i), output);
  }

  // repeated .proto.game.redis.MJ_BUFFER m_ofan = 5;
  for (int i = 0; i < this->m_ofan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_ofan(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.HuFanInfo)
}

::google::protobuf::uint8* HuFanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.HuFanInfo)
  // repeated bool m_bishu = 1;
  for (int i = 0; i < this->m_bishu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(1, this->m_bishu(i), target);
  }

  // repeated int32 m_hufannums = 2;
  for (int i = 0; i < this->m_hufannums_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->m_hufannums(i), target);
  }

  // repeated .proto.game.redis.tagGangScoreInfo m_stgang = 3;
  for (int i = 0; i < this->m_stgang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_stgang(i), target);
  }

  // repeated .proto.game.redis.tagHuInfo m_sthuscore = 4;
  for (int i = 0; i < this->m_sthuscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_sthuscore(i), target);
  }

  // repeated .proto.game.redis.MJ_BUFFER m_ofan = 5;
  for (int i = 0; i < this->m_ofan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_ofan(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.HuFanInfo)
  return target;
}

int HuFanInfo::ByteSize() const {
  int total_size = 0;

  // repeated bool m_bishu = 1;
  {
    int data_size = 0;
    data_size = 1 * this->m_bishu_size();
    total_size += 1 * this->m_bishu_size() + data_size;
  }

  // repeated int32 m_hufannums = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_hufannums_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_hufannums(i));
    }
    total_size += 1 * this->m_hufannums_size() + data_size;
  }

  // repeated .proto.game.redis.tagGangScoreInfo m_stgang = 3;
  total_size += 1 * this->m_stgang_size();
  for (int i = 0; i < this->m_stgang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_stgang(i));
  }

  // repeated .proto.game.redis.tagHuInfo m_sthuscore = 4;
  total_size += 1 * this->m_sthuscore_size();
  for (int i = 0; i < this->m_sthuscore_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_sthuscore(i));
  }

  // repeated .proto.game.redis.MJ_BUFFER m_ofan = 5;
  total_size += 1 * this->m_ofan_size();
  for (int i = 0; i < this->m_ofan_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_ofan(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuFanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HuFanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HuFanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HuFanInfo::MergeFrom(const HuFanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_bishu_.MergeFrom(from.m_bishu_);
  m_hufannums_.MergeFrom(from.m_hufannums_);
  m_stgang_.MergeFrom(from.m_stgang_);
  m_sthuscore_.MergeFrom(from.m_sthuscore_);
  m_ofan_.MergeFrom(from.m_ofan_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HuFanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuFanInfo::CopyFrom(const HuFanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuFanInfo::IsInitialized() const {

  return true;
}

void HuFanInfo::Swap(HuFanInfo* other) {
  if (other != this) {
    m_bishu_.Swap(&other->m_bishu_);
    m_hufannums_.Swap(&other->m_hufannums_);
    m_stgang_.Swap(&other->m_stgang_);
    m_sthuscore_.Swap(&other->m_sthuscore_);
    m_ofan_.Swap(&other->m_ofan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HuFanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HuFanInfo_descriptor_;
  metadata.reflection = HuFanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGameAccout::kMRoundFieldNumber;
const int CGameAccout::kMRoomidFieldNumber;
const int CGameAccout::kMPalyIdFieldNumber;
const int CGameAccout::kMScoreFieldNumber;
const int CGameAccout::kMTotalScoreFieldNumber;
#endif  // !_MSC_VER

CGameAccout::CGameAccout()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.CGameAccout)
}

void CGameAccout::InitAsDefaultInstance() {
}

CGameAccout::CGameAccout(const CGameAccout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.CGameAccout)
}

void CGameAccout::SharedCtor() {
  _cached_size_ = 0;
  m_round_ = 0;
  m_roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGameAccout::~CGameAccout() {
  // @@protoc_insertion_point(destructor:proto.game.redis.CGameAccout)
  SharedDtor();
}

void CGameAccout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGameAccout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameAccout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGameAccout_descriptor_;
}

const CGameAccout& CGameAccout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

CGameAccout* CGameAccout::default_instance_ = NULL;

CGameAccout* CGameAccout::New() const {
  return new CGameAccout;
}

void CGameAccout::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CGameAccout*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(m_round_, m_roomid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  m_paly_id_.Clear();
  m_score_.Clear();
  m_total_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGameAccout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.CGameAccout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_round = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_round_)));
          set_has_m_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_roomid;
        break;
      }

      // optional int32 m_roomid = 2;
      case 2: {
        if (tag == 16) {
         parse_m_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roomid_)));
          set_has_m_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_paly_id;
        break;
      }

      // repeated int32 m_paly_id = 3;
      case 3: {
        if (tag == 24) {
         parse_m_paly_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_m_paly_id())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_paly_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_paly_id;
        if (input->ExpectTag(32)) goto parse_m_score;
        break;
      }

      // repeated int32 m_score = 4;
      case 4: {
        if (tag == 32) {
         parse_m_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_m_score())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_score())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_score;
        if (input->ExpectTag(40)) goto parse_m_total_score;
        break;
      }

      // repeated int32 m_total_score = 5;
      case 5: {
        if (tag == 40) {
         parse_m_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_m_total_score())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_total_score())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_m_total_score;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.CGameAccout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.CGameAccout)
  return false;
#undef DO_
}

void CGameAccout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.CGameAccout)
  // optional int32 m_round = 1;
  if (has_m_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_round(), output);
  }

  // optional int32 m_roomid = 2;
  if (has_m_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_roomid(), output);
  }

  // repeated int32 m_paly_id = 3;
  for (int i = 0; i < this->m_paly_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->m_paly_id(i), output);
  }

  // repeated int32 m_score = 4;
  for (int i = 0; i < this->m_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->m_score(i), output);
  }

  // repeated int32 m_total_score = 5;
  for (int i = 0; i < this->m_total_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->m_total_score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.CGameAccout)
}

::google::protobuf::uint8* CGameAccout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.CGameAccout)
  // optional int32 m_round = 1;
  if (has_m_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_round(), target);
  }

  // optional int32 m_roomid = 2;
  if (has_m_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_roomid(), target);
  }

  // repeated int32 m_paly_id = 3;
  for (int i = 0; i < this->m_paly_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->m_paly_id(i), target);
  }

  // repeated int32 m_score = 4;
  for (int i = 0; i < this->m_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->m_score(i), target);
  }

  // repeated int32 m_total_score = 5;
  for (int i = 0; i < this->m_total_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->m_total_score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.CGameAccout)
  return target;
}

int CGameAccout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_round = 1;
    if (has_m_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_round());
    }

    // optional int32 m_roomid = 2;
    if (has_m_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roomid());
    }

  }
  // repeated int32 m_paly_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_paly_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_paly_id(i));
    }
    total_size += 1 * this->m_paly_id_size() + data_size;
  }

  // repeated int32 m_score = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_score(i));
    }
    total_size += 1 * this->m_score_size() + data_size;
  }

  // repeated int32 m_total_score = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_total_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_total_score(i));
    }
    total_size += 1 * this->m_total_score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameAccout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGameAccout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGameAccout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGameAccout::MergeFrom(const CGameAccout& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_paly_id_.MergeFrom(from.m_paly_id_);
  m_score_.MergeFrom(from.m_score_);
  m_total_score_.MergeFrom(from.m_total_score_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_round()) {
      set_m_round(from.m_round());
    }
    if (from.has_m_roomid()) {
      set_m_roomid(from.m_roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGameAccout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameAccout::CopyFrom(const CGameAccout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameAccout::IsInitialized() const {

  return true;
}

void CGameAccout::Swap(CGameAccout* other) {
  if (other != this) {
    std::swap(m_round_, other->m_round_);
    std::swap(m_roomid_, other->m_roomid_);
    m_paly_id_.Swap(&other->m_paly_id_);
    m_score_.Swap(&other->m_score_);
    m_total_score_.Swap(&other->m_total_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGameAccout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGameAccout_descriptor_;
  metadata.reflection = CGameAccout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForbidWin::kMLockcardFieldNumber;
const int ForbidWin::kMLockpointsFieldNumber;
const int ForbidWin::kMLockFieldNumber;
#endif  // !_MSC_VER

ForbidWin::ForbidWin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.ForbidWin)
}

void ForbidWin::InitAsDefaultInstance() {
}

ForbidWin::ForbidWin(const ForbidWin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.ForbidWin)
}

void ForbidWin::SharedCtor() {
  _cached_size_ = 0;
  m_lockpoints_ = 0;
  m_lock_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForbidWin::~ForbidWin() {
  // @@protoc_insertion_point(destructor:proto.game.redis.ForbidWin)
  SharedDtor();
}

void ForbidWin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ForbidWin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForbidWin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForbidWin_descriptor_;
}

const ForbidWin& ForbidWin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

ForbidWin* ForbidWin::default_instance_ = NULL;

ForbidWin* ForbidWin::New() const {
  return new ForbidWin;
}

void ForbidWin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ForbidWin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(m_lockpoints_, m_lock_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  m_lockcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForbidWin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.ForbidWin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 m_lockcard = 1;
      case 1: {
        if (tag == 8) {
         parse_m_lockcard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_m_lockcard())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_lockcard())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_m_lockcard;
        if (input->ExpectTag(16)) goto parse_m_lockpoints;
        break;
      }

      // optional int32 m_lockpoints = 2;
      case 2: {
        if (tag == 16) {
         parse_m_lockpoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lockpoints_)));
          set_has_m_lockpoints();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_lock;
        break;
      }

      // optional bool m_lock = 3;
      case 3: {
        if (tag == 24) {
         parse_m_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_lock_)));
          set_has_m_lock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.ForbidWin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.ForbidWin)
  return false;
#undef DO_
}

void ForbidWin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.ForbidWin)
  // repeated int32 m_lockcard = 1;
  for (int i = 0; i < this->m_lockcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->m_lockcard(i), output);
  }

  // optional int32 m_lockpoints = 2;
  if (has_m_lockpoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lockpoints(), output);
  }

  // optional bool m_lock = 3;
  if (has_m_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->m_lock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.ForbidWin)
}

::google::protobuf::uint8* ForbidWin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.ForbidWin)
  // repeated int32 m_lockcard = 1;
  for (int i = 0; i < this->m_lockcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->m_lockcard(i), target);
  }

  // optional int32 m_lockpoints = 2;
  if (has_m_lockpoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lockpoints(), target);
  }

  // optional bool m_lock = 3;
  if (has_m_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->m_lock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.ForbidWin)
  return target;
}

int ForbidWin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 m_lockpoints = 2;
    if (has_m_lockpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lockpoints());
    }

    // optional bool m_lock = 3;
    if (has_m_lock()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 m_lockcard = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_lockcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_lockcard(i));
    }
    total_size += 1 * this->m_lockcard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForbidWin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForbidWin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForbidWin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForbidWin::MergeFrom(const ForbidWin& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_lockcard_.MergeFrom(from.m_lockcard_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_m_lockpoints()) {
      set_m_lockpoints(from.m_lockpoints());
    }
    if (from.has_m_lock()) {
      set_m_lock(from.m_lock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForbidWin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForbidWin::CopyFrom(const ForbidWin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForbidWin::IsInitialized() const {

  return true;
}

void ForbidWin::Swap(ForbidWin* other) {
  if (other != this) {
    m_lockcard_.Swap(&other->m_lockcard_);
    std::swap(m_lockpoints_, other->m_lockpoints_);
    std::swap(m_lock_, other->m_lock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForbidWin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForbidWin_descriptor_;
  metadata.reflection = ForbidWin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fantype_to_FanNum::kFanNumFieldNumber;
const int Fantype_to_FanNum::kSpecialFanNumFieldNumber;
#endif  // !_MSC_VER

Fantype_to_FanNum::Fantype_to_FanNum()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.Fantype_to_FanNum)
}

void Fantype_to_FanNum::InitAsDefaultInstance() {
}

Fantype_to_FanNum::Fantype_to_FanNum(const Fantype_to_FanNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.Fantype_to_FanNum)
}

void Fantype_to_FanNum::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fantype_to_FanNum::~Fantype_to_FanNum() {
  // @@protoc_insertion_point(destructor:proto.game.redis.Fantype_to_FanNum)
  SharedDtor();
}

void Fantype_to_FanNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Fantype_to_FanNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fantype_to_FanNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fantype_to_FanNum_descriptor_;
}

const Fantype_to_FanNum& Fantype_to_FanNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

Fantype_to_FanNum* Fantype_to_FanNum::default_instance_ = NULL;

Fantype_to_FanNum* Fantype_to_FanNum::New() const {
  return new Fantype_to_FanNum;
}

void Fantype_to_FanNum::Clear() {
  fan_num_.Clear();
  special_fan_num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fantype_to_FanNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.Fantype_to_FanNum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 fan_num = 1;
      case 1: {
        if (tag == 8) {
         parse_fan_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_fan_num())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fan_num())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_fan_num;
        if (input->ExpectTag(16)) goto parse_special_fan_num;
        break;
      }

      // repeated int32 special_fan_num = 2;
      case 2: {
        if (tag == 16) {
         parse_special_fan_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_special_fan_num())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_special_fan_num())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_special_fan_num;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.Fantype_to_FanNum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.Fantype_to_FanNum)
  return false;
#undef DO_
}

void Fantype_to_FanNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.Fantype_to_FanNum)
  // repeated int32 fan_num = 1;
  for (int i = 0; i < this->fan_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->fan_num(i), output);
  }

  // repeated int32 special_fan_num = 2;
  for (int i = 0; i < this->special_fan_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->special_fan_num(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.Fantype_to_FanNum)
}

::google::protobuf::uint8* Fantype_to_FanNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.Fantype_to_FanNum)
  // repeated int32 fan_num = 1;
  for (int i = 0; i < this->fan_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->fan_num(i), target);
  }

  // repeated int32 special_fan_num = 2;
  for (int i = 0; i < this->special_fan_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->special_fan_num(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.Fantype_to_FanNum)
  return target;
}

int Fantype_to_FanNum::ByteSize() const {
  int total_size = 0;

  // repeated int32 fan_num = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fan_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fan_num(i));
    }
    total_size += 1 * this->fan_num_size() + data_size;
  }

  // repeated int32 special_fan_num = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->special_fan_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->special_fan_num(i));
    }
    total_size += 1 * this->special_fan_num_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fantype_to_FanNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fantype_to_FanNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fantype_to_FanNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fantype_to_FanNum::MergeFrom(const Fantype_to_FanNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  fan_num_.MergeFrom(from.fan_num_);
  special_fan_num_.MergeFrom(from.special_fan_num_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fantype_to_FanNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fantype_to_FanNum::CopyFrom(const Fantype_to_FanNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fantype_to_FanNum::IsInitialized() const {

  return true;
}

void Fantype_to_FanNum::Swap(Fantype_to_FanNum* other) {
  if (other != this) {
    fan_num_.Swap(&other->fan_num_);
    special_fan_num_.Swap(&other->special_fan_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fantype_to_FanNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fantype_to_FanNum_descriptor_;
  metadata.reflection = Fantype_to_FanNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagPlayerGPS::kLatitudeFieldNumber;
const int tagPlayerGPS::kLongitudeFieldNumber;
const int tagPlayerGPS::kCityFieldNumber;
#endif  // !_MSC_VER

tagPlayerGPS::tagPlayerGPS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.tagPlayerGPS)
}

void tagPlayerGPS::InitAsDefaultInstance() {
}

tagPlayerGPS::tagPlayerGPS(const tagPlayerGPS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.tagPlayerGPS)
}

void tagPlayerGPS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagPlayerGPS::~tagPlayerGPS() {
  // @@protoc_insertion_point(destructor:proto.game.redis.tagPlayerGPS)
  SharedDtor();
}

void tagPlayerGPS::SharedDtor() {
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (this != default_instance_) {
  }
}

void tagPlayerGPS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPlayerGPS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagPlayerGPS_descriptor_;
}

const tagPlayerGPS& tagPlayerGPS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

tagPlayerGPS* tagPlayerGPS::default_instance_ = NULL;

tagPlayerGPS* tagPlayerGPS::New() const {
  return new tagPlayerGPS;
}

void tagPlayerGPS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<tagPlayerGPS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(latitude_, longitude_);
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagPlayerGPS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.tagPlayerGPS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double latitude = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }

      // optional double longitude = 2;
      case 2: {
        if (tag == 17) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_city;
        break;
      }

      // optional string city = 3;
      case 3: {
        if (tag == 26) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.tagPlayerGPS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.tagPlayerGPS)
  return false;
#undef DO_
}

void tagPlayerGPS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.tagPlayerGPS)
  // optional double latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // optional double longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // optional string city = 3;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->city(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.tagPlayerGPS)
}

::google::protobuf::uint8* tagPlayerGPS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.tagPlayerGPS)
  // optional double latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // optional double longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // optional string city = 3;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->city(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.tagPlayerGPS)
  return target;
}

int tagPlayerGPS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional string city = 3;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPlayerGPS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagPlayerGPS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagPlayerGPS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagPlayerGPS::MergeFrom(const tagPlayerGPS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagPlayerGPS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPlayerGPS::CopyFrom(const tagPlayerGPS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPlayerGPS::IsInitialized() const {

  return true;
}

void tagPlayerGPS::Swap(tagPlayerGPS* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(city_, other->city_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagPlayerGPS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagPlayerGPS_descriptor_;
  metadata.reflection = tagPlayerGPS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagRedisInfo::kTidFieldNumber;
const int tagRedisInfo::kVidFieldNumber;
const int tagRedisInfo::kZidFieldNumber;
const int tagRedisInfo::kBaseMoneyFieldNumber;
const int tagRedisInfo::kRoomgoldFieldNumber;
const int tagRedisInfo::kStandMoneyFieldNumber;
const int tagRedisInfo::kLoseExpFieldNumber;
const int tagRedisInfo::kWinExpFieldNumber;
const int tagRedisInfo::kMBasescoreFieldNumber;
const int tagRedisInfo::kMConfFieldNumber;
const int tagRedisInfo::kMRoomOwnerUidFieldNumber;
const int tagRedisInfo::kMRoomStatusFieldNumber;
const int tagRedisInfo::kMTotalrecordinfoFieldNumber;
const int tagRedisInfo::kMGamePlayerFieldNumber;
const int tagRedisInfo::kMOnlineBeatFieldNumber;
const int tagRedisInfo::kMVideostrFieldNumber;
const int tagRedisInfo::kMRandomseatFieldNumber;
const int tagRedisInfo::kMOfflinenoopFieldNumber;
const int tagRedisInfo::kMBdelaytimeFieldNumber;
const int tagRedisInfo::kMSeatplayerFieldNumber;
const int tagRedisInfo::kMStartShaiFieldNumber;
const int tagRedisInfo::kMBcurplayersFieldNumber;
const int tagRedisInfo::kMBgamestateFieldNumber;
const int tagRedisInfo::kMDisbandResuserFieldNumber;
const int tagRedisInfo::kMHandcardFieldNumber;
const int tagRedisInfo::kMIsofflineFieldNumber;
const int tagRedisInfo::kMBistrusteeFieldNumber;
const int tagRedisInfo::kMBautohuFieldNumber;
const int tagRedisInfo::kMBgangcalcimmeFieldNumber;
const int tagRedisInfo::kMBbankerFieldNumber;
const int tagRedisInfo::kMLastBankerFieldNumber;
const int tagRedisInfo::kMCardpoolFieldNumber;
const int tagRedisInfo::kMBgetcardcountFieldNumber;
const int tagRedisInfo::kMBuseroperateFieldNumber;
const int tagRedisInfo::kMBcurchairidFieldNumber;
const int tagRedisInfo::kMBoutcardchairidFieldNumber;
const int tagRedisInfo::kMBcuroutcardFieldNumber;
const int tagRedisInfo::kMBcurcardFieldNumber;
const int tagRedisInfo::kMStuseroutcardFieldNumber;
const int tagRedisInfo::kMultiopinfoFieldNumber;
const int tagRedisInfo::kMPasshuplayerFieldNumber;
const int tagRedisInfo::kRobaddinfoFieldNumber;
const int tagRedisInfo::kMBrecordmultiopFieldNumber;
const int tagRedisInfo::kHufaninfoFieldNumber;
const int tagRedisInfo::kMApplydisbandchairidFieldNumber;
const int tagRedisInfo::kMBisdisbandtableFieldNumber;
const int tagRedisInfo::kMDisbandchooseFieldNumber;
const int tagRedisInfo::kMBdisbandcountFieldNumber;
const int tagRedisInfo::kMBovertimestateFieldNumber;
const int tagRedisInfo::kMNplayingtimesFieldNumber;
const int tagRedisInfo::kMAccountInfoFieldNumber;
const int tagRedisInfo::kMUserdissstateFieldNumber;
const int tagRedisInfo::kMBouttimerFieldNumber;
const int tagRedisInfo::kMLouhuFieldNumber;
const int tagRedisInfo::kMBdeletetableFieldNumber;
const int tagRedisInfo::kMBistestsvrFieldNumber;
const int tagRedisInfo::kMRoomConfigFieldNumber;
const int tagRedisInfo::kMNiaoFieldNumber;
const int tagRedisInfo::kMZhongNiaoFieldNumber;
const int tagRedisInfo::kMDaniaoidFieldNumber;
const int tagRedisInfo::kMPengFieldNumber;
const int tagRedisInfo::kGFt2FnFieldNumber;
const int tagRedisInfo::kMMapplayergpsFieldNumber;
const int tagRedisInfo::kPlayersFieldNumber;
const int tagRedisInfo::kMUseroperateidFieldNumber;
const int tagRedisInfo::kMAutodisbandFieldNumber;
const int tagRedisInfo::kMBisautodisbandFieldNumber;
const int tagRedisInfo::kMTablebranchidFieldNumber;
const int tagRedisInfo::kMNtotalcountFieldNumber;
const int tagRedisInfo::kMNcurrentcountFieldNumber;
const int tagRedisInfo::kMUserchoosemodeFieldNumber;
const int tagRedisInfo::kMVoiceRoomFieldNumber;
const int tagRedisInfo::kMStartTimeFieldNumber;
const int tagRedisInfo::kMVecopcardsFieldNumber;
const int tagRedisInfo::kMPreofflinestateFieldNumber;
const int tagRedisInfo::kMIsclubroomFieldNumber;
const int tagRedisInfo::kMPublicChannelIdFieldNumber;
const int tagRedisInfo::kMGroupChannelIdsFieldNumber;
const int tagRedisInfo::kMVoiceStatusFieldNumber;
const int tagRedisInfo::kMMaxhandcardsizeFieldNumber;
#endif  // !_MSC_VER

tagRedisInfo::tagRedisInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.redis.tagRedisInfo)
}

void tagRedisInfo::InitAsDefaultInstance() {
  m_conf_ = const_cast< ::proto::game::redis::MJCustomizedConf*>(&::proto::game::redis::MJCustomizedConf::default_instance());
  m_totalrecordinfo_ = const_cast< ::proto::game::redis::Table_TotalRecordInfo*>(&::proto::game::redis::Table_TotalRecordInfo::default_instance());
  m_start_shai_ = const_cast< ::proto::game::redis::Shai_Set*>(&::proto::game::redis::Shai_Set::default_instance());
  m_cardpool_ = const_cast< ::proto::game::redis::CCardPool*>(&::proto::game::redis::CCardPool::default_instance());
  multiopinfo_ = const_cast< ::proto::game::redis::MultiOpInfo*>(&::proto::game::redis::MultiOpInfo::default_instance());
  robaddinfo_ = const_cast< ::proto::game::redis::RobAddInfo*>(&::proto::game::redis::RobAddInfo::default_instance());
  m_brecordmultiop_ = const_cast< ::proto::game::redis::LOWLEVELOPERATE*>(&::proto::game::redis::LOWLEVELOPERATE::default_instance());
  hufaninfo_ = const_cast< ::proto::game::redis::HuFanInfo*>(&::proto::game::redis::HuFanInfo::default_instance());
  m_account_info_ = const_cast< ::proto::game::redis::CGameAccout*>(&::proto::game::redis::CGameAccout::default_instance());
  m_room_config_ = const_cast< ::proto::game::redis::MJ_BUFFER*>(&::proto::game::redis::MJ_BUFFER::default_instance());
  m_niao_ = const_cast< ::proto::game::redis::MJ_BUFFER*>(&::proto::game::redis::MJ_BUFFER::default_instance());
  m_zhong_niao_ = const_cast< ::proto::game::redis::MJ_BUFFER*>(&::proto::game::redis::MJ_BUFFER::default_instance());
  g_ft2fn_ = const_cast< ::proto::game::redis::Fantype_to_FanNum*>(&::proto::game::redis::Fantype_to_FanNum::default_instance());
}

tagRedisInfo::tagRedisInfo(const tagRedisInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.redis.tagRedisInfo)
}

void tagRedisInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tid_ = 0;
  vid_ = 0;
  zid_ = 0;
  base_money_ = 0;
  roomgold_ = 0;
  stand_money_ = 0;
  lose_exp_ = 0;
  win_exp_ = 0;
  m_basescore_ = 0;
  m_conf_ = NULL;
  m_room_owner_uid_ = 0;
  m_room_status_ = 0;
  m_totalrecordinfo_ = NULL;
  m_game_player_ = 0;
  m_videostr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m_randomseat_ = false;
  m_offlinenoop_ = false;
  m_bdelaytime_ = 0;
  m_start_shai_ = NULL;
  m_bcurplayers_ = 0;
  m_bgamestate_ = 0;
  m_disband_resuser_ = 0;
  m_bgangcalcimme_ = false;
  m_bbanker_ = 0;
  m_last_banker_ = 0;
  m_cardpool_ = NULL;
  m_bcurchairid_ = 0;
  m_boutcardchairid_ = 0;
  m_bcuroutcard_ = 0;
  m_bcurcard_ = 0;
  multiopinfo_ = NULL;
  robaddinfo_ = NULL;
  m_brecordmultiop_ = NULL;
  hufaninfo_ = NULL;
  m_applydisbandchairid_ = 0;
  m_bisdisbandtable_ = false;
  m_bdisbandcount_ = 0;
  m_nplayingtimes_ = 0;
  m_account_info_ = NULL;
  m_bouttimer_ = false;
  m_bdeletetable_ = false;
  m_bistestsvr_ = false;
  m_room_config_ = NULL;
  m_niao_ = NULL;
  m_zhong_niao_ = NULL;
  m_daniaoid_ = 0;
  g_ft2fn_ = NULL;
  m_autodisband_ = 0;
  m_bisautodisband_ = false;
  m_tablebranchid_ = 0;
  m_ntotalcount_ = 0;
  m_ncurrentcount_ = 0;
  m_voice_room_ = 0;
  m_start_time_ = 0;
  m_isclubroom_ = 0;
  m_public_channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m_maxhandcardsize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagRedisInfo::~tagRedisInfo() {
  // @@protoc_insertion_point(destructor:proto.game.redis.tagRedisInfo)
  SharedDtor();
}

void tagRedisInfo::SharedDtor() {
  if (m_videostr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete m_videostr_;
  }
  if (m_public_channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete m_public_channel_id_;
  }
  if (this != default_instance_) {
    delete m_conf_;
    delete m_totalrecordinfo_;
    delete m_start_shai_;
    delete m_cardpool_;
    delete multiopinfo_;
    delete robaddinfo_;
    delete m_brecordmultiop_;
    delete hufaninfo_;
    delete m_account_info_;
    delete m_room_config_;
    delete m_niao_;
    delete m_zhong_niao_;
    delete g_ft2fn_;
  }
}

void tagRedisInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagRedisInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagRedisInfo_descriptor_;
}

const tagRedisInfo& tagRedisInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redisproto_2eproto();
  return *default_instance_;
}

tagRedisInfo* tagRedisInfo::default_instance_ = NULL;

tagRedisInfo* tagRedisInfo::New() const {
  return new tagRedisInfo;
}

void tagRedisInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<tagRedisInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(tid_, win_exp_);
  }
  if (_has_bits_[8 / 32] & 48896) {
    ZR_(m_basescore_, m_room_owner_uid_);
    ZR_(m_room_status_, m_game_player_);
    if (has_m_conf()) {
      if (m_conf_ != NULL) m_conf_->::proto::game::redis::MJCustomizedConf::Clear();
    }
    if (has_m_totalrecordinfo()) {
      if (m_totalrecordinfo_ != NULL) m_totalrecordinfo_->::proto::game::redis::Table_TotalRecordInfo::Clear();
    }
    if (has_m_videostr()) {
      if (m_videostr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        m_videostr_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16187392) {
    ZR_(m_bdelaytime_, m_bcurplayers_);
    ZR_(m_bgamestate_, m_disband_resuser_);
    ZR_(m_randomseat_, m_offlinenoop_);
    if (has_m_start_shai()) {
      if (m_start_shai_ != NULL) m_start_shai_->::proto::game::redis::Shai_Set::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4026531840) {
    m_bgangcalcimme_ = false;
    m_bbanker_ = 0;
    m_last_banker_ = 0;
    if (has_m_cardpool()) {
      if (m_cardpool_ != NULL) m_cardpool_->::proto::game::redis::CCardPool::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 188) {
    ZR_(m_boutcardchairid_, m_bcuroutcard_);
    m_bcurchairid_ = 0;
    m_bcurcard_ = 0;
    if (has_multiopinfo()) {
      if (multiopinfo_ != NULL) multiopinfo_->::proto::game::redis::MultiOpInfo::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 48640) {
    if (has_robaddinfo()) {
      if (robaddinfo_ != NULL) robaddinfo_->::proto::game::redis::RobAddInfo::Clear();
    }
    if (has_m_brecordmultiop()) {
      if (m_brecordmultiop_ != NULL) m_brecordmultiop_->::proto::game::redis::LOWLEVELOPERATE::Clear();
    }
    if (has_hufaninfo()) {
      if (hufaninfo_ != NULL) hufaninfo_->::proto::game::redis::HuFanInfo::Clear();
    }
    m_applydisbandchairid_ = 0;
    m_bisdisbandtable_ = false;
    m_bdisbandcount_ = 0;
  }
  if (_has_bits_[48 / 32] & 14024704) {
    ZR_(m_bouttimer_, m_bistestsvr_);
    m_nplayingtimes_ = 0;
    if (has_m_account_info()) {
      if (m_account_info_ != NULL) m_account_info_->::proto::game::redis::CGameAccout::Clear();
    }
  }
  if (_has_bits_[56 / 32] & 788529152) {
    if (has_m_room_config()) {
      if (m_room_config_ != NULL) m_room_config_->::proto::game::redis::MJ_BUFFER::Clear();
    }
    if (has_m_niao()) {
      if (m_niao_ != NULL) m_niao_->::proto::game::redis::MJ_BUFFER::Clear();
    }
    if (has_m_zhong_niao()) {
      if (m_zhong_niao_ != NULL) m_zhong_niao_->::proto::game::redis::MJ_BUFFER::Clear();
    }
    m_daniaoid_ = 0;
    if (has_g_ft2fn()) {
      if (g_ft2fn_ != NULL) g_ft2fn_->::proto::game::redis::Fantype_to_FanNum::Clear();
    }
  }
  if (_has_bits_[64 / 32] & 190) {
    ZR_(m_autodisband_, m_ncurrentcount_);
    m_bisautodisband_ = false;
    m_voice_room_ = 0;
  }
  if (_has_bits_[72 / 32] & 39168) {
    ZR_(m_isclubroom_, m_maxhandcardsize_);
    m_start_time_ = 0;
    if (has_m_public_channel_id()) {
      if (m_public_channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        m_public_channel_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  m_online_beat_.Clear();
  m_seatplayer_.Clear();
  m_handcard_.Clear();
  m_isoffline_.Clear();
  m_bistrustee_.Clear();
  m_bautohu_.Clear();
  m_bgetcardcount_.Clear();
  m_buseroperate_.Clear();
  m_stuseroutcard_.Clear();
  m_passhuplayer_.Clear();
  m_disbandchoose_.Clear();
  m_bovertimestate_.Clear();
  m_userdissstate_.Clear();
  m_louhu_.Clear();
  m_peng_.Clear();
  m_mapplayergps_.Clear();
  players_.Clear();
  m_useroperateid_.Clear();
  m_userchoosemode_.Clear();
  m_vecopcards_.Clear();
  m_preofflinestate_.Clear();
  m_group_channel_ids_.Clear();
  m_voice_status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagRedisInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.redis.tagRedisInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vid;
        break;
      }

      // optional int32 vid = 2;
      case 2: {
        if (tag == 16) {
         parse_vid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vid_)));
          set_has_vid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zid;
        break;
      }

      // optional int32 zid = 3;
      case 3: {
        if (tag == 24) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_base_money;
        break;
      }

      // optional int32 base_money = 4;
      case 4: {
        if (tag == 32) {
         parse_base_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_money_)));
          set_has_base_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_roomgold;
        break;
      }

      // optional int32 roomgold = 5;
      case 5: {
        if (tag == 40) {
         parse_roomgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomgold_)));
          set_has_roomgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_stand_money;
        break;
      }

      // optional int32 stand_money = 6;
      case 6: {
        if (tag == 48) {
         parse_stand_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stand_money_)));
          set_has_stand_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_lose_exp;
        break;
      }

      // optional int32 lose_exp = 7;
      case 7: {
        if (tag == 56) {
         parse_lose_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_exp_)));
          set_has_lose_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_win_exp;
        break;
      }

      // optional int32 win_exp = 8;
      case 8: {
        if (tag == 64) {
         parse_win_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_exp_)));
          set_has_win_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_m_basescore;
        break;
      }

      // optional int32 m_basescore = 9;
      case 9: {
        if (tag == 72) {
         parse_m_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_basescore_)));
          set_has_m_basescore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_m_conf;
        break;
      }

      // optional .proto.game.redis.MJCustomizedConf m_conf = 10;
      case 10: {
        if (tag == 82) {
         parse_m_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_m_room_owner_uid;
        break;
      }

      // optional int32 m_room_owner_uid = 11;
      case 11: {
        if (tag == 88) {
         parse_m_room_owner_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_room_owner_uid_)));
          set_has_m_room_owner_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_m_room_status;
        break;
      }

      // optional int32 m_room_status = 12;
      case 12: {
        if (tag == 96) {
         parse_m_room_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_room_status_)));
          set_has_m_room_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_m_totalrecordinfo;
        break;
      }

      // optional .proto.game.redis.Table_TotalRecordInfo m_totalrecordinfo = 13;
      case 13: {
        if (tag == 106) {
         parse_m_totalrecordinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_totalrecordinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_m_game_player;
        break;
      }

      // optional int32 m_game_player = 14;
      case 14: {
        if (tag == 112) {
         parse_m_game_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_game_player_)));
          set_has_m_game_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_m_online_beat;
        break;
      }

      // repeated bool m_online_beat = 15;
      case 15: {
        if (tag == 120) {
         parse_m_online_beat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 120, input, this->mutable_m_online_beat())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_m_online_beat())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_m_online_beat;
        if (input->ExpectTag(130)) goto parse_m_videostr;
        break;
      }

      // optional string m_videostr = 16;
      case 16: {
        if (tag == 130) {
         parse_m_videostr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_videostr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->m_videostr().data(), this->m_videostr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m_videostr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_m_randomseat;
        break;
      }

      // optional bool m_randomseat = 17;
      case 17: {
        if (tag == 136) {
         parse_m_randomseat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_randomseat_)));
          set_has_m_randomseat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_m_offlinenoop;
        break;
      }

      // optional bool m_offlinenoop = 18;
      case 18: {
        if (tag == 144) {
         parse_m_offlinenoop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_offlinenoop_)));
          set_has_m_offlinenoop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_m_bdelaytime;
        break;
      }

      // optional int32 m_bdelaytime = 19;
      case 19: {
        if (tag == 152) {
         parse_m_bdelaytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bdelaytime_)));
          set_has_m_bdelaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_m_seatplayer;
        break;
      }

      // repeated .proto.game.redis.Seat m_seatplayer = 20;
      case 20: {
        if (tag == 162) {
         parse_m_seatplayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_seatplayer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_m_seatplayer;
        if (input->ExpectTag(170)) goto parse_m_start_shai;
        break;
      }

      // optional .proto.game.redis.Shai_Set m_start_shai = 21;
      case 21: {
        if (tag == 170) {
         parse_m_start_shai:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_start_shai()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_m_bcurplayers;
        break;
      }

      // optional int32 m_bcurplayers = 22;
      case 22: {
        if (tag == 176) {
         parse_m_bcurplayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bcurplayers_)));
          set_has_m_bcurplayers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_m_bgamestate;
        break;
      }

      // optional int32 m_bgamestate = 23;
      case 23: {
        if (tag == 184) {
         parse_m_bgamestate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bgamestate_)));
          set_has_m_bgamestate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_m_disband_resuser;
        break;
      }

      // optional int32 m_disband_resuser = 24;
      case 24: {
        if (tag == 192) {
         parse_m_disband_resuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_disband_resuser_)));
          set_has_m_disband_resuser();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_m_handcard;
        break;
      }

      // repeated .proto.game.redis.HandCards m_handcard = 25;
      case 25: {
        if (tag == 202) {
         parse_m_handcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_handcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_m_handcard;
        if (input->ExpectTag(208)) goto parse_m_isoffline;
        break;
      }

      // repeated bool m_isoffline = 26;
      case 26: {
        if (tag == 208) {
         parse_m_isoffline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 208, input, this->mutable_m_isoffline())));
        } else if (tag == 210) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_m_isoffline())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_m_isoffline;
        if (input->ExpectTag(216)) goto parse_m_bistrustee;
        break;
      }

      // repeated bool m_bistrustee = 27;
      case 27: {
        if (tag == 216) {
         parse_m_bistrustee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 216, input, this->mutable_m_bistrustee())));
        } else if (tag == 218) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_m_bistrustee())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_m_bistrustee;
        if (input->ExpectTag(224)) goto parse_m_bautohu;
        break;
      }

      // repeated bool m_bautohu = 28;
      case 28: {
        if (tag == 224) {
         parse_m_bautohu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 224, input, this->mutable_m_bautohu())));
        } else if (tag == 226) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_m_bautohu())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_m_bautohu;
        if (input->ExpectTag(232)) goto parse_m_bgangcalcimme;
        break;
      }

      // optional bool m_bgangcalcimme = 29;
      case 29: {
        if (tag == 232) {
         parse_m_bgangcalcimme:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bgangcalcimme_)));
          set_has_m_bgangcalcimme();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_m_bbanker;
        break;
      }

      // optional int32 m_bbanker = 30;
      case 30: {
        if (tag == 240) {
         parse_m_bbanker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bbanker_)));
          set_has_m_bbanker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_m_last_banker;
        break;
      }

      // optional int32 m_last_banker = 31;
      case 31: {
        if (tag == 248) {
         parse_m_last_banker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_last_banker_)));
          set_has_m_last_banker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_m_cardpool;
        break;
      }

      // optional .proto.game.redis.CCardPool m_cardpool = 32;
      case 32: {
        if (tag == 258) {
         parse_m_cardpool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_cardpool()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_m_bgetcardcount;
        break;
      }

      // repeated int32 m_bgetcardcount = 33;
      case 33: {
        if (tag == 264) {
         parse_m_bgetcardcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 264, input, this->mutable_m_bgetcardcount())));
        } else if (tag == 266) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_bgetcardcount())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_m_bgetcardcount;
        if (input->ExpectTag(272)) goto parse_m_buseroperate;
        break;
      }

      // repeated int32 m_buseroperate = 34;
      case 34: {
        if (tag == 272) {
         parse_m_buseroperate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 272, input, this->mutable_m_buseroperate())));
        } else if (tag == 274) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_buseroperate())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_m_buseroperate;
        if (input->ExpectTag(280)) goto parse_m_bcurchairid;
        break;
      }

      // optional int32 m_bcurchairid = 35;
      case 35: {
        if (tag == 280) {
         parse_m_bcurchairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bcurchairid_)));
          set_has_m_bcurchairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_m_boutcardchairid;
        break;
      }

      // optional int32 m_boutcardchairid = 36;
      case 36: {
        if (tag == 288) {
         parse_m_boutcardchairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_boutcardchairid_)));
          set_has_m_boutcardchairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_m_bcuroutcard;
        break;
      }

      // optional int32 m_bcuroutcard = 37;
      case 37: {
        if (tag == 296) {
         parse_m_bcuroutcard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bcuroutcard_)));
          set_has_m_bcuroutcard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_m_bcurcard;
        break;
      }

      // optional int32 m_bcurcard = 38;
      case 38: {
        if (tag == 304) {
         parse_m_bcurcard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bcurcard_)));
          set_has_m_bcurcard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_m_stuseroutcard;
        break;
      }

      // repeated .proto.game.redis.MJ_BUFFER m_stuseroutcard = 39;
      case 39: {
        if (tag == 314) {
         parse_m_stuseroutcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_stuseroutcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_m_stuseroutcard;
        if (input->ExpectTag(322)) goto parse_multiopinfo;
        break;
      }

      // optional .proto.game.redis.MultiOpInfo multiopinfo = 40;
      case 40: {
        if (tag == 322) {
         parse_multiopinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multiopinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_m_passhuplayer;
        break;
      }

      // repeated int32 m_passhuplayer = 41;
      case 41: {
        if (tag == 328) {
         parse_m_passhuplayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 328, input, this->mutable_m_passhuplayer())));
        } else if (tag == 330) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_passhuplayer())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_m_passhuplayer;
        if (input->ExpectTag(338)) goto parse_robaddinfo;
        break;
      }

      // optional .proto.game.redis.RobAddInfo robaddinfo = 42;
      case 42: {
        if (tag == 338) {
         parse_robaddinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_robaddinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_m_brecordmultiop;
        break;
      }

      // optional .proto.game.redis.LOWLEVELOPERATE m_brecordmultiop = 43;
      case 43: {
        if (tag == 346) {
         parse_m_brecordmultiop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_brecordmultiop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_hufaninfo;
        break;
      }

      // optional .proto.game.redis.HuFanInfo hufaninfo = 44;
      case 44: {
        if (tag == 354) {
         parse_hufaninfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hufaninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_m_applydisbandchairid;
        break;
      }

      // optional int32 m_applydisbandchairid = 45;
      case 45: {
        if (tag == 360) {
         parse_m_applydisbandchairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_applydisbandchairid_)));
          set_has_m_applydisbandchairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_m_bisdisbandtable;
        break;
      }

      // optional bool m_bisdisbandtable = 46;
      case 46: {
        if (tag == 368) {
         parse_m_bisdisbandtable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bisdisbandtable_)));
          set_has_m_bisdisbandtable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_m_disbandchoose;
        break;
      }

      // repeated int32 m_disbandchoose = 47;
      case 47: {
        if (tag == 376) {
         parse_m_disbandchoose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 376, input, this->mutable_m_disbandchoose())));
        } else if (tag == 378) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_disbandchoose())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_m_disbandchoose;
        if (input->ExpectTag(384)) goto parse_m_bdisbandcount;
        break;
      }

      // optional int32 m_bdisbandcount = 48;
      case 48: {
        if (tag == 384) {
         parse_m_bdisbandcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bdisbandcount_)));
          set_has_m_bdisbandcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_m_bovertimestate;
        break;
      }

      // repeated int32 m_bovertimestate = 49;
      case 49: {
        if (tag == 392) {
         parse_m_bovertimestate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 392, input, this->mutable_m_bovertimestate())));
        } else if (tag == 394) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_bovertimestate())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_m_bovertimestate;
        if (input->ExpectTag(400)) goto parse_m_nplayingtimes;
        break;
      }

      // optional int32 m_nplayingtimes = 50;
      case 50: {
        if (tag == 400) {
         parse_m_nplayingtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nplayingtimes_)));
          set_has_m_nplayingtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_m_account_info;
        break;
      }

      // optional .proto.game.redis.CGameAccout m_account_info = 51;
      case 51: {
        if (tag == 410) {
         parse_m_account_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_account_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_m_userdissstate;
        break;
      }

      // repeated int32 m_userdissstate = 52;
      case 52: {
        if (tag == 416) {
         parse_m_userdissstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 416, input, this->mutable_m_userdissstate())));
        } else if (tag == 418) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_userdissstate())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_m_userdissstate;
        if (input->ExpectTag(424)) goto parse_m_bouttimer;
        break;
      }

      // optional bool m_bouttimer = 53;
      case 53: {
        if (tag == 424) {
         parse_m_bouttimer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bouttimer_)));
          set_has_m_bouttimer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_m_louhu;
        break;
      }

      // repeated .proto.game.redis.ForbidWin m_louhu = 54;
      case 54: {
        if (tag == 434) {
         parse_m_louhu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_louhu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_m_louhu;
        if (input->ExpectTag(440)) goto parse_m_bdeletetable;
        break;
      }

      // optional bool m_bdeletetable = 55;
      case 55: {
        if (tag == 440) {
         parse_m_bdeletetable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bdeletetable_)));
          set_has_m_bdeletetable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_m_bistestsvr;
        break;
      }

      // optional bool m_bistestsvr = 56;
      case 56: {
        if (tag == 448) {
         parse_m_bistestsvr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bistestsvr_)));
          set_has_m_bistestsvr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(458)) goto parse_m_room_config;
        break;
      }

      // optional .proto.game.redis.MJ_BUFFER m_room_config = 57;
      case 57: {
        if (tag == 458) {
         parse_m_room_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_room_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_m_niao;
        break;
      }

      // optional .proto.game.redis.MJ_BUFFER m_niao = 58;
      case 58: {
        if (tag == 466) {
         parse_m_niao:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_niao()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(474)) goto parse_m_zhong_niao;
        break;
      }

      // optional .proto.game.redis.MJ_BUFFER m_zhong_niao = 59;
      case 59: {
        if (tag == 474) {
         parse_m_zhong_niao:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_zhong_niao()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_m_daniaoid;
        break;
      }

      // optional int32 m_daniaoid = 60;
      case 60: {
        if (tag == 480) {
         parse_m_daniaoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_daniaoid_)));
          set_has_m_daniaoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_m_peng;
        break;
      }

      // repeated .proto.game.redis.MJ_BUFFER m_peng = 61;
      case 61: {
        if (tag == 490) {
         parse_m_peng:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_peng()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_m_peng;
        if (input->ExpectTag(498)) goto parse_g_ft2fn;
        break;
      }

      // optional .proto.game.redis.Fantype_to_FanNum g_ft2fn = 62;
      case 62: {
        if (tag == 498) {
         parse_g_ft2fn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_g_ft2fn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(506)) goto parse_m_mapplayergps;
        break;
      }

      // repeated .proto.game.redis.tagPlayerGPS m_mapplayergps = 63;
      case 63: {
        if (tag == 506) {
         parse_m_mapplayergps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_mapplayergps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(506)) goto parse_m_mapplayergps;
        if (input->ExpectTag(514)) goto parse_players;
        break;
      }

      // repeated .proto.game.redis.tagPlayers players = 64;
      case 64: {
        if (tag == 514) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(514)) goto parse_players;
        if (input->ExpectTag(520)) goto parse_m_useroperateid;
        break;
      }

      // repeated int32 m_useroperateid = 65;
      case 65: {
        if (tag == 520) {
         parse_m_useroperateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 520, input, this->mutable_m_useroperateid())));
        } else if (tag == 522) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_useroperateid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_m_useroperateid;
        if (input->ExpectTag(528)) goto parse_m_autodisband;
        break;
      }

      // optional int32 m_autodisband = 66;
      case 66: {
        if (tag == 528) {
         parse_m_autodisband:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_autodisband_)));
          set_has_m_autodisband();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(536)) goto parse_m_bisautodisband;
        break;
      }

      // optional bool m_bisautodisband = 67;
      case 67: {
        if (tag == 536) {
         parse_m_bisautodisband:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_bisautodisband_)));
          set_has_m_bisautodisband();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(544)) goto parse_m_tablebranchid;
        break;
      }

      // optional int32 m_tablebranchid = 68;
      case 68: {
        if (tag == 544) {
         parse_m_tablebranchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tablebranchid_)));
          set_has_m_tablebranchid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(552)) goto parse_m_ntotalcount;
        break;
      }

      // optional int32 m_ntotalcount = 69;
      case 69: {
        if (tag == 552) {
         parse_m_ntotalcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ntotalcount_)));
          set_has_m_ntotalcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(560)) goto parse_m_ncurrentcount;
        break;
      }

      // optional int32 m_ncurrentcount = 70;
      case 70: {
        if (tag == 560) {
         parse_m_ncurrentcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ncurrentcount_)));
          set_has_m_ncurrentcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_m_userchoosemode;
        break;
      }

      // repeated int32 m_userchoosemode = 71;
      case 71: {
        if (tag == 568) {
         parse_m_userchoosemode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 568, input, this->mutable_m_userchoosemode())));
        } else if (tag == 570) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_userchoosemode())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_m_userchoosemode;
        if (input->ExpectTag(576)) goto parse_m_voice_room;
        break;
      }

      // optional int32 m_voice_room = 72;
      case 72: {
        if (tag == 576) {
         parse_m_voice_room:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_voice_room_)));
          set_has_m_voice_room();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(584)) goto parse_m_start_time;
        break;
      }

      // optional int32 m_start_time = 73;
      case 73: {
        if (tag == 584) {
         parse_m_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_start_time_)));
          set_has_m_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(592)) goto parse_m_vecopcards;
        break;
      }

      // repeated int32 m_vecopcards = 74;
      case 74: {
        if (tag == 592) {
         parse_m_vecopcards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 592, input, this->mutable_m_vecopcards())));
        } else if (tag == 594) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_vecopcards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(592)) goto parse_m_vecopcards;
        if (input->ExpectTag(600)) goto parse_m_preofflinestate;
        break;
      }

      // repeated bool m_preofflinestate = 75;
      case 75: {
        if (tag == 600) {
         parse_m_preofflinestate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 600, input, this->mutable_m_preofflinestate())));
        } else if (tag == 602) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_m_preofflinestate())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(600)) goto parse_m_preofflinestate;
        if (input->ExpectTag(608)) goto parse_m_isclubroom;
        break;
      }

      // optional int32 m_isclubroom = 76;
      case 76: {
        if (tag == 608) {
         parse_m_isclubroom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isclubroom_)));
          set_has_m_isclubroom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(618)) goto parse_m_public_channel_id;
        break;
      }

      // optional string m_public_channel_id = 77;
      case 77: {
        if (tag == 618) {
         parse_m_public_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_public_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->m_public_channel_id().data(), this->m_public_channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m_public_channel_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(626)) goto parse_m_group_channel_ids;
        break;
      }

      // repeated string m_group_channel_ids = 78;
      case 78: {
        if (tag == 626) {
         parse_m_group_channel_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_m_group_channel_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->m_group_channel_ids(this->m_group_channel_ids_size() - 1).data(),
            this->m_group_channel_ids(this->m_group_channel_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "m_group_channel_ids");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(626)) goto parse_m_group_channel_ids;
        if (input->ExpectTag(632)) goto parse_m_voice_status;
        break;
      }

      // repeated int32 m_voice_status = 79;
      case 79: {
        if (tag == 632) {
         parse_m_voice_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 632, input, this->mutable_m_voice_status())));
        } else if (tag == 634) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_voice_status())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(632)) goto parse_m_voice_status;
        if (input->ExpectTag(640)) goto parse_m_maxhandcardsize;
        break;
      }

      // optional int32 m_maxhandcardsize = 80;
      case 80: {
        if (tag == 640) {
         parse_m_maxhandcardsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxhandcardsize_)));
          set_has_m_maxhandcardsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.redis.tagRedisInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.redis.tagRedisInfo)
  return false;
#undef DO_
}

void tagRedisInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.redis.tagRedisInfo)
  // optional int32 tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tid(), output);
  }

  // optional int32 vid = 2;
  if (has_vid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vid(), output);
  }

  // optional int32 zid = 3;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->zid(), output);
  }

  // optional int32 base_money = 4;
  if (has_base_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->base_money(), output);
  }

  // optional int32 roomgold = 5;
  if (has_roomgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->roomgold(), output);
  }

  // optional int32 stand_money = 6;
  if (has_stand_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->stand_money(), output);
  }

  // optional int32 lose_exp = 7;
  if (has_lose_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lose_exp(), output);
  }

  // optional int32 win_exp = 8;
  if (has_win_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->win_exp(), output);
  }

  // optional int32 m_basescore = 9;
  if (has_m_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_basescore(), output);
  }

  // optional .proto.game.redis.MJCustomizedConf m_conf = 10;
  if (has_m_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_conf(), output);
  }

  // optional int32 m_room_owner_uid = 11;
  if (has_m_room_owner_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_room_owner_uid(), output);
  }

  // optional int32 m_room_status = 12;
  if (has_m_room_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_room_status(), output);
  }

  // optional .proto.game.redis.Table_TotalRecordInfo m_totalrecordinfo = 13;
  if (has_m_totalrecordinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->m_totalrecordinfo(), output);
  }

  // optional int32 m_game_player = 14;
  if (has_m_game_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_game_player(), output);
  }

  // repeated bool m_online_beat = 15;
  for (int i = 0; i < this->m_online_beat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      15, this->m_online_beat(i), output);
  }

  // optional string m_videostr = 16;
  if (has_m_videostr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m_videostr().data(), this->m_videostr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m_videostr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->m_videostr(), output);
  }

  // optional bool m_randomseat = 17;
  if (has_m_randomseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->m_randomseat(), output);
  }

  // optional bool m_offlinenoop = 18;
  if (has_m_offlinenoop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->m_offlinenoop(), output);
  }

  // optional int32 m_bdelaytime = 19;
  if (has_m_bdelaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->m_bdelaytime(), output);
  }

  // repeated .proto.game.redis.Seat m_seatplayer = 20;
  for (int i = 0; i < this->m_seatplayer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->m_seatplayer(i), output);
  }

  // optional .proto.game.redis.Shai_Set m_start_shai = 21;
  if (has_m_start_shai()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->m_start_shai(), output);
  }

  // optional int32 m_bcurplayers = 22;
  if (has_m_bcurplayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->m_bcurplayers(), output);
  }

  // optional int32 m_bgamestate = 23;
  if (has_m_bgamestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->m_bgamestate(), output);
  }

  // optional int32 m_disband_resuser = 24;
  if (has_m_disband_resuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->m_disband_resuser(), output);
  }

  // repeated .proto.game.redis.HandCards m_handcard = 25;
  for (int i = 0; i < this->m_handcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->m_handcard(i), output);
  }

  // repeated bool m_isoffline = 26;
  for (int i = 0; i < this->m_isoffline_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      26, this->m_isoffline(i), output);
  }

  // repeated bool m_bistrustee = 27;
  for (int i = 0; i < this->m_bistrustee_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      27, this->m_bistrustee(i), output);
  }

  // repeated bool m_bautohu = 28;
  for (int i = 0; i < this->m_bautohu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      28, this->m_bautohu(i), output);
  }

  // optional bool m_bgangcalcimme = 29;
  if (has_m_bgangcalcimme()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->m_bgangcalcimme(), output);
  }

  // optional int32 m_bbanker = 30;
  if (has_m_bbanker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->m_bbanker(), output);
  }

  // optional int32 m_last_banker = 31;
  if (has_m_last_banker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->m_last_banker(), output);
  }

  // optional .proto.game.redis.CCardPool m_cardpool = 32;
  if (has_m_cardpool()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->m_cardpool(), output);
  }

  // repeated int32 m_bgetcardcount = 33;
  for (int i = 0; i < this->m_bgetcardcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      33, this->m_bgetcardcount(i), output);
  }

  // repeated int32 m_buseroperate = 34;
  for (int i = 0; i < this->m_buseroperate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      34, this->m_buseroperate(i), output);
  }

  // optional int32 m_bcurchairid = 35;
  if (has_m_bcurchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->m_bcurchairid(), output);
  }

  // optional int32 m_boutcardchairid = 36;
  if (has_m_boutcardchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->m_boutcardchairid(), output);
  }

  // optional int32 m_bcuroutcard = 37;
  if (has_m_bcuroutcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->m_bcuroutcard(), output);
  }

  // optional int32 m_bcurcard = 38;
  if (has_m_bcurcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->m_bcurcard(), output);
  }

  // repeated .proto.game.redis.MJ_BUFFER m_stuseroutcard = 39;
  for (int i = 0; i < this->m_stuseroutcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->m_stuseroutcard(i), output);
  }

  // optional .proto.game.redis.MultiOpInfo multiopinfo = 40;
  if (has_multiopinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->multiopinfo(), output);
  }

  // repeated int32 m_passhuplayer = 41;
  for (int i = 0; i < this->m_passhuplayer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      41, this->m_passhuplayer(i), output);
  }

  // optional .proto.game.redis.RobAddInfo robaddinfo = 42;
  if (has_robaddinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->robaddinfo(), output);
  }

  // optional .proto.game.redis.LOWLEVELOPERATE m_brecordmultiop = 43;
  if (has_m_brecordmultiop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->m_brecordmultiop(), output);
  }

  // optional .proto.game.redis.HuFanInfo hufaninfo = 44;
  if (has_hufaninfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->hufaninfo(), output);
  }

  // optional int32 m_applydisbandchairid = 45;
  if (has_m_applydisbandchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->m_applydisbandchairid(), output);
  }

  // optional bool m_bisdisbandtable = 46;
  if (has_m_bisdisbandtable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(46, this->m_bisdisbandtable(), output);
  }

  // repeated int32 m_disbandchoose = 47;
  for (int i = 0; i < this->m_disbandchoose_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      47, this->m_disbandchoose(i), output);
  }

  // optional int32 m_bdisbandcount = 48;
  if (has_m_bdisbandcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->m_bdisbandcount(), output);
  }

  // repeated int32 m_bovertimestate = 49;
  for (int i = 0; i < this->m_bovertimestate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      49, this->m_bovertimestate(i), output);
  }

  // optional int32 m_nplayingtimes = 50;
  if (has_m_nplayingtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->m_nplayingtimes(), output);
  }

  // optional .proto.game.redis.CGameAccout m_account_info = 51;
  if (has_m_account_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->m_account_info(), output);
  }

  // repeated int32 m_userdissstate = 52;
  for (int i = 0; i < this->m_userdissstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      52, this->m_userdissstate(i), output);
  }

  // optional bool m_bouttimer = 53;
  if (has_m_bouttimer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->m_bouttimer(), output);
  }

  // repeated .proto.game.redis.ForbidWin m_louhu = 54;
  for (int i = 0; i < this->m_louhu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->m_louhu(i), output);
  }

  // optional bool m_bdeletetable = 55;
  if (has_m_bdeletetable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(55, this->m_bdeletetable(), output);
  }

  // optional bool m_bistestsvr = 56;
  if (has_m_bistestsvr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->m_bistestsvr(), output);
  }

  // optional .proto.game.redis.MJ_BUFFER m_room_config = 57;
  if (has_m_room_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->m_room_config(), output);
  }

  // optional .proto.game.redis.MJ_BUFFER m_niao = 58;
  if (has_m_niao()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->m_niao(), output);
  }

  // optional .proto.game.redis.MJ_BUFFER m_zhong_niao = 59;
  if (has_m_zhong_niao()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->m_zhong_niao(), output);
  }

  // optional int32 m_daniaoid = 60;
  if (has_m_daniaoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->m_daniaoid(), output);
  }

  // repeated .proto.game.redis.MJ_BUFFER m_peng = 61;
  for (int i = 0; i < this->m_peng_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->m_peng(i), output);
  }

  // optional .proto.game.redis.Fantype_to_FanNum g_ft2fn = 62;
  if (has_g_ft2fn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->g_ft2fn(), output);
  }

  // repeated .proto.game.redis.tagPlayerGPS m_mapplayergps = 63;
  for (int i = 0; i < this->m_mapplayergps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->m_mapplayergps(i), output);
  }

  // repeated .proto.game.redis.tagPlayers players = 64;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->players(i), output);
  }

  // repeated int32 m_useroperateid = 65;
  for (int i = 0; i < this->m_useroperateid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      65, this->m_useroperateid(i), output);
  }

  // optional int32 m_autodisband = 66;
  if (has_m_autodisband()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->m_autodisband(), output);
  }

  // optional bool m_bisautodisband = 67;
  if (has_m_bisautodisband()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(67, this->m_bisautodisband(), output);
  }

  // optional int32 m_tablebranchid = 68;
  if (has_m_tablebranchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->m_tablebranchid(), output);
  }

  // optional int32 m_ntotalcount = 69;
  if (has_m_ntotalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->m_ntotalcount(), output);
  }

  // optional int32 m_ncurrentcount = 70;
  if (has_m_ncurrentcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->m_ncurrentcount(), output);
  }

  // repeated int32 m_userchoosemode = 71;
  for (int i = 0; i < this->m_userchoosemode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      71, this->m_userchoosemode(i), output);
  }

  // optional int32 m_voice_room = 72;
  if (has_m_voice_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->m_voice_room(), output);
  }

  // optional int32 m_start_time = 73;
  if (has_m_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(73, this->m_start_time(), output);
  }

  // repeated int32 m_vecopcards = 74;
  for (int i = 0; i < this->m_vecopcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      74, this->m_vecopcards(i), output);
  }

  // repeated bool m_preofflinestate = 75;
  for (int i = 0; i < this->m_preofflinestate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      75, this->m_preofflinestate(i), output);
  }

  // optional int32 m_isclubroom = 76;
  if (has_m_isclubroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(76, this->m_isclubroom(), output);
  }

  // optional string m_public_channel_id = 77;
  if (has_m_public_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m_public_channel_id().data(), this->m_public_channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m_public_channel_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      77, this->m_public_channel_id(), output);
  }

  // repeated string m_group_channel_ids = 78;
  for (int i = 0; i < this->m_group_channel_ids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->m_group_channel_ids(i).data(), this->m_group_channel_ids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "m_group_channel_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      78, this->m_group_channel_ids(i), output);
  }

  // repeated int32 m_voice_status = 79;
  for (int i = 0; i < this->m_voice_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      79, this->m_voice_status(i), output);
  }

  // optional int32 m_maxhandcardsize = 80;
  if (has_m_maxhandcardsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(80, this->m_maxhandcardsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.redis.tagRedisInfo)
}

::google::protobuf::uint8* tagRedisInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.redis.tagRedisInfo)
  // optional int32 tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tid(), target);
  }

  // optional int32 vid = 2;
  if (has_vid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vid(), target);
  }

  // optional int32 zid = 3;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->zid(), target);
  }

  // optional int32 base_money = 4;
  if (has_base_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->base_money(), target);
  }

  // optional int32 roomgold = 5;
  if (has_roomgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->roomgold(), target);
  }

  // optional int32 stand_money = 6;
  if (has_stand_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->stand_money(), target);
  }

  // optional int32 lose_exp = 7;
  if (has_lose_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lose_exp(), target);
  }

  // optional int32 win_exp = 8;
  if (has_win_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->win_exp(), target);
  }

  // optional int32 m_basescore = 9;
  if (has_m_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_basescore(), target);
  }

  // optional .proto.game.redis.MJCustomizedConf m_conf = 10;
  if (has_m_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_conf(), target);
  }

  // optional int32 m_room_owner_uid = 11;
  if (has_m_room_owner_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_room_owner_uid(), target);
  }

  // optional int32 m_room_status = 12;
  if (has_m_room_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_room_status(), target);
  }

  // optional .proto.game.redis.Table_TotalRecordInfo m_totalrecordinfo = 13;
  if (has_m_totalrecordinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->m_totalrecordinfo(), target);
  }

  // optional int32 m_game_player = 14;
  if (has_m_game_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_game_player(), target);
  }

  // repeated bool m_online_beat = 15;
  for (int i = 0; i < this->m_online_beat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(15, this->m_online_beat(i), target);
  }

  // optional string m_videostr = 16;
  if (has_m_videostr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m_videostr().data(), this->m_videostr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m_videostr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->m_videostr(), target);
  }

  // optional bool m_randomseat = 17;
  if (has_m_randomseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->m_randomseat(), target);
  }

  // optional bool m_offlinenoop = 18;
  if (has_m_offlinenoop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->m_offlinenoop(), target);
  }

  // optional int32 m_bdelaytime = 19;
  if (has_m_bdelaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->m_bdelaytime(), target);
  }

  // repeated .proto.game.redis.Seat m_seatplayer = 20;
  for (int i = 0; i < this->m_seatplayer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->m_seatplayer(i), target);
  }

  // optional .proto.game.redis.Shai_Set m_start_shai = 21;
  if (has_m_start_shai()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->m_start_shai(), target);
  }

  // optional int32 m_bcurplayers = 22;
  if (has_m_bcurplayers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->m_bcurplayers(), target);
  }

  // optional int32 m_bgamestate = 23;
  if (has_m_bgamestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->m_bgamestate(), target);
  }

  // optional int32 m_disband_resuser = 24;
  if (has_m_disband_resuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->m_disband_resuser(), target);
  }

  // repeated .proto.game.redis.HandCards m_handcard = 25;
  for (int i = 0; i < this->m_handcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->m_handcard(i), target);
  }

  // repeated bool m_isoffline = 26;
  for (int i = 0; i < this->m_isoffline_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(26, this->m_isoffline(i), target);
  }

  // repeated bool m_bistrustee = 27;
  for (int i = 0; i < this->m_bistrustee_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(27, this->m_bistrustee(i), target);
  }

  // repeated bool m_bautohu = 28;
  for (int i = 0; i < this->m_bautohu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(28, this->m_bautohu(i), target);
  }

  // optional bool m_bgangcalcimme = 29;
  if (has_m_bgangcalcimme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->m_bgangcalcimme(), target);
  }

  // optional int32 m_bbanker = 30;
  if (has_m_bbanker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->m_bbanker(), target);
  }

  // optional int32 m_last_banker = 31;
  if (has_m_last_banker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->m_last_banker(), target);
  }

  // optional .proto.game.redis.CCardPool m_cardpool = 32;
  if (has_m_cardpool()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->m_cardpool(), target);
  }

  // repeated int32 m_bgetcardcount = 33;
  for (int i = 0; i < this->m_bgetcardcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(33, this->m_bgetcardcount(i), target);
  }

  // repeated int32 m_buseroperate = 34;
  for (int i = 0; i < this->m_buseroperate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(34, this->m_buseroperate(i), target);
  }

  // optional int32 m_bcurchairid = 35;
  if (has_m_bcurchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->m_bcurchairid(), target);
  }

  // optional int32 m_boutcardchairid = 36;
  if (has_m_boutcardchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->m_boutcardchairid(), target);
  }

  // optional int32 m_bcuroutcard = 37;
  if (has_m_bcuroutcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->m_bcuroutcard(), target);
  }

  // optional int32 m_bcurcard = 38;
  if (has_m_bcurcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->m_bcurcard(), target);
  }

  // repeated .proto.game.redis.MJ_BUFFER m_stuseroutcard = 39;
  for (int i = 0; i < this->m_stuseroutcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->m_stuseroutcard(i), target);
  }

  // optional .proto.game.redis.MultiOpInfo multiopinfo = 40;
  if (has_multiopinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->multiopinfo(), target);
  }

  // repeated int32 m_passhuplayer = 41;
  for (int i = 0; i < this->m_passhuplayer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(41, this->m_passhuplayer(i), target);
  }

  // optional .proto.game.redis.RobAddInfo robaddinfo = 42;
  if (has_robaddinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->robaddinfo(), target);
  }

  // optional .proto.game.redis.LOWLEVELOPERATE m_brecordmultiop = 43;
  if (has_m_brecordmultiop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->m_brecordmultiop(), target);
  }

  // optional .proto.game.redis.HuFanInfo hufaninfo = 44;
  if (has_hufaninfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->hufaninfo(), target);
  }

  // optional int32 m_applydisbandchairid = 45;
  if (has_m_applydisbandchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->m_applydisbandchairid(), target);
  }

  // optional bool m_bisdisbandtable = 46;
  if (has_m_bisdisbandtable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(46, this->m_bisdisbandtable(), target);
  }

  // repeated int32 m_disbandchoose = 47;
  for (int i = 0; i < this->m_disbandchoose_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(47, this->m_disbandchoose(i), target);
  }

  // optional int32 m_bdisbandcount = 48;
  if (has_m_bdisbandcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->m_bdisbandcount(), target);
  }

  // repeated int32 m_bovertimestate = 49;
  for (int i = 0; i < this->m_bovertimestate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(49, this->m_bovertimestate(i), target);
  }

  // optional int32 m_nplayingtimes = 50;
  if (has_m_nplayingtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->m_nplayingtimes(), target);
  }

  // optional .proto.game.redis.CGameAccout m_account_info = 51;
  if (has_m_account_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->m_account_info(), target);
  }

  // repeated int32 m_userdissstate = 52;
  for (int i = 0; i < this->m_userdissstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(52, this->m_userdissstate(i), target);
  }

  // optional bool m_bouttimer = 53;
  if (has_m_bouttimer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->m_bouttimer(), target);
  }

  // repeated .proto.game.redis.ForbidWin m_louhu = 54;
  for (int i = 0; i < this->m_louhu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->m_louhu(i), target);
  }

  // optional bool m_bdeletetable = 55;
  if (has_m_bdeletetable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(55, this->m_bdeletetable(), target);
  }

  // optional bool m_bistestsvr = 56;
  if (has_m_bistestsvr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->m_bistestsvr(), target);
  }

  // optional .proto.game.redis.MJ_BUFFER m_room_config = 57;
  if (has_m_room_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->m_room_config(), target);
  }

  // optional .proto.game.redis.MJ_BUFFER m_niao = 58;
  if (has_m_niao()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->m_niao(), target);
  }

  // optional .proto.game.redis.MJ_BUFFER m_zhong_niao = 59;
  if (has_m_zhong_niao()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->m_zhong_niao(), target);
  }

  // optional int32 m_daniaoid = 60;
  if (has_m_daniaoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->m_daniaoid(), target);
  }

  // repeated .proto.game.redis.MJ_BUFFER m_peng = 61;
  for (int i = 0; i < this->m_peng_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->m_peng(i), target);
  }

  // optional .proto.game.redis.Fantype_to_FanNum g_ft2fn = 62;
  if (has_g_ft2fn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->g_ft2fn(), target);
  }

  // repeated .proto.game.redis.tagPlayerGPS m_mapplayergps = 63;
  for (int i = 0; i < this->m_mapplayergps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->m_mapplayergps(i), target);
  }

  // repeated .proto.game.redis.tagPlayers players = 64;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        64, this->players(i), target);
  }

  // repeated int32 m_useroperateid = 65;
  for (int i = 0; i < this->m_useroperateid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(65, this->m_useroperateid(i), target);
  }

  // optional int32 m_autodisband = 66;
  if (has_m_autodisband()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->m_autodisband(), target);
  }

  // optional bool m_bisautodisband = 67;
  if (has_m_bisautodisband()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(67, this->m_bisautodisband(), target);
  }

  // optional int32 m_tablebranchid = 68;
  if (has_m_tablebranchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->m_tablebranchid(), target);
  }

  // optional int32 m_ntotalcount = 69;
  if (has_m_ntotalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->m_ntotalcount(), target);
  }

  // optional int32 m_ncurrentcount = 70;
  if (has_m_ncurrentcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->m_ncurrentcount(), target);
  }

  // repeated int32 m_userchoosemode = 71;
  for (int i = 0; i < this->m_userchoosemode_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(71, this->m_userchoosemode(i), target);
  }

  // optional int32 m_voice_room = 72;
  if (has_m_voice_room()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->m_voice_room(), target);
  }

  // optional int32 m_start_time = 73;
  if (has_m_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(73, this->m_start_time(), target);
  }

  // repeated int32 m_vecopcards = 74;
  for (int i = 0; i < this->m_vecopcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(74, this->m_vecopcards(i), target);
  }

  // repeated bool m_preofflinestate = 75;
  for (int i = 0; i < this->m_preofflinestate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(75, this->m_preofflinestate(i), target);
  }

  // optional int32 m_isclubroom = 76;
  if (has_m_isclubroom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(76, this->m_isclubroom(), target);
  }

  // optional string m_public_channel_id = 77;
  if (has_m_public_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m_public_channel_id().data(), this->m_public_channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m_public_channel_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        77, this->m_public_channel_id(), target);
  }

  // repeated string m_group_channel_ids = 78;
  for (int i = 0; i < this->m_group_channel_ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m_group_channel_ids(i).data(), this->m_group_channel_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "m_group_channel_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(78, this->m_group_channel_ids(i), target);
  }

  // repeated int32 m_voice_status = 79;
  for (int i = 0; i < this->m_voice_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(79, this->m_voice_status(i), target);
  }

  // optional int32 m_maxhandcardsize = 80;
  if (has_m_maxhandcardsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(80, this->m_maxhandcardsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.redis.tagRedisInfo)
  return target;
}

int tagRedisInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional int32 vid = 2;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }

    // optional int32 zid = 3;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

    // optional int32 base_money = 4;
    if (has_base_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_money());
    }

    // optional int32 roomgold = 5;
    if (has_roomgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomgold());
    }

    // optional int32 stand_money = 6;
    if (has_stand_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stand_money());
    }

    // optional int32 lose_exp = 7;
    if (has_lose_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_exp());
    }

    // optional int32 win_exp = 8;
    if (has_win_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_basescore = 9;
    if (has_m_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_basescore());
    }

    // optional .proto.game.redis.MJCustomizedConf m_conf = 10;
    if (has_m_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_conf());
    }

    // optional int32 m_room_owner_uid = 11;
    if (has_m_room_owner_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_room_owner_uid());
    }

    // optional int32 m_room_status = 12;
    if (has_m_room_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_room_status());
    }

    // optional .proto.game.redis.Table_TotalRecordInfo m_totalrecordinfo = 13;
    if (has_m_totalrecordinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_totalrecordinfo());
    }

    // optional int32 m_game_player = 14;
    if (has_m_game_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_game_player());
    }

    // optional string m_videostr = 16;
    if (has_m_videostr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_videostr());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool m_randomseat = 17;
    if (has_m_randomseat()) {
      total_size += 2 + 1;
    }

    // optional bool m_offlinenoop = 18;
    if (has_m_offlinenoop()) {
      total_size += 2 + 1;
    }

    // optional int32 m_bdelaytime = 19;
    if (has_m_bdelaytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bdelaytime());
    }

    // optional .proto.game.redis.Shai_Set m_start_shai = 21;
    if (has_m_start_shai()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_start_shai());
    }

    // optional int32 m_bcurplayers = 22;
    if (has_m_bcurplayers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bcurplayers());
    }

    // optional int32 m_bgamestate = 23;
    if (has_m_bgamestate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bgamestate());
    }

    // optional int32 m_disband_resuser = 24;
    if (has_m_disband_resuser()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_disband_resuser());
    }

  }
  if (_has_bits_[28 / 32] & (0xffu << (28 % 32))) {
    // optional bool m_bgangcalcimme = 29;
    if (has_m_bgangcalcimme()) {
      total_size += 2 + 1;
    }

    // optional int32 m_bbanker = 30;
    if (has_m_bbanker()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bbanker());
    }

    // optional int32 m_last_banker = 31;
    if (has_m_last_banker()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_last_banker());
    }

    // optional .proto.game.redis.CCardPool m_cardpool = 32;
    if (has_m_cardpool()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_cardpool());
    }

  }
  if (_has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    // optional int32 m_bcurchairid = 35;
    if (has_m_bcurchairid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bcurchairid());
    }

    // optional int32 m_boutcardchairid = 36;
    if (has_m_boutcardchairid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_boutcardchairid());
    }

    // optional int32 m_bcuroutcard = 37;
    if (has_m_bcuroutcard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bcuroutcard());
    }

    // optional int32 m_bcurcard = 38;
    if (has_m_bcurcard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bcurcard());
    }

    // optional .proto.game.redis.MultiOpInfo multiopinfo = 40;
    if (has_multiopinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multiopinfo());
    }

  }
  if (_has_bits_[41 / 32] & (0xffu << (41 % 32))) {
    // optional .proto.game.redis.RobAddInfo robaddinfo = 42;
    if (has_robaddinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robaddinfo());
    }

    // optional .proto.game.redis.LOWLEVELOPERATE m_brecordmultiop = 43;
    if (has_m_brecordmultiop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_brecordmultiop());
    }

    // optional .proto.game.redis.HuFanInfo hufaninfo = 44;
    if (has_hufaninfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hufaninfo());
    }

    // optional int32 m_applydisbandchairid = 45;
    if (has_m_applydisbandchairid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_applydisbandchairid());
    }

    // optional bool m_bisdisbandtable = 46;
    if (has_m_bisdisbandtable()) {
      total_size += 2 + 1;
    }

    // optional int32 m_bdisbandcount = 48;
    if (has_m_bdisbandcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bdisbandcount());
    }

  }
  if (_has_bits_[49 / 32] & (0xffu << (49 % 32))) {
    // optional int32 m_nplayingtimes = 50;
    if (has_m_nplayingtimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nplayingtimes());
    }

    // optional .proto.game.redis.CGameAccout m_account_info = 51;
    if (has_m_account_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_account_info());
    }

    // optional bool m_bouttimer = 53;
    if (has_m_bouttimer()) {
      total_size += 2 + 1;
    }

    // optional bool m_bdeletetable = 55;
    if (has_m_bdeletetable()) {
      total_size += 2 + 1;
    }

    // optional bool m_bistestsvr = 56;
    if (has_m_bistestsvr()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .proto.game.redis.MJ_BUFFER m_room_config = 57;
    if (has_m_room_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_room_config());
    }

    // optional .proto.game.redis.MJ_BUFFER m_niao = 58;
    if (has_m_niao()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_niao());
    }

    // optional .proto.game.redis.MJ_BUFFER m_zhong_niao = 59;
    if (has_m_zhong_niao()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_zhong_niao());
    }

    // optional int32 m_daniaoid = 60;
    if (has_m_daniaoid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_daniaoid());
    }

    // optional .proto.game.redis.Fantype_to_FanNum g_ft2fn = 62;
    if (has_g_ft2fn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->g_ft2fn());
    }

  }
  if (_has_bits_[65 / 32] & (0xffu << (65 % 32))) {
    // optional int32 m_autodisband = 66;
    if (has_m_autodisband()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_autodisband());
    }

    // optional bool m_bisautodisband = 67;
    if (has_m_bisautodisband()) {
      total_size += 2 + 1;
    }

    // optional int32 m_tablebranchid = 68;
    if (has_m_tablebranchid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tablebranchid());
    }

    // optional int32 m_ntotalcount = 69;
    if (has_m_ntotalcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ntotalcount());
    }

    // optional int32 m_ncurrentcount = 70;
    if (has_m_ncurrentcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ncurrentcount());
    }

    // optional int32 m_voice_room = 72;
    if (has_m_voice_room()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_voice_room());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional int32 m_start_time = 73;
    if (has_m_start_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_start_time());
    }

    // optional int32 m_isclubroom = 76;
    if (has_m_isclubroom()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isclubroom());
    }

    // optional string m_public_channel_id = 77;
    if (has_m_public_channel_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_public_channel_id());
    }

    // optional int32 m_maxhandcardsize = 80;
    if (has_m_maxhandcardsize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxhandcardsize());
    }

  }
  // repeated bool m_online_beat = 15;
  {
    int data_size = 0;
    data_size = 1 * this->m_online_beat_size();
    total_size += 1 * this->m_online_beat_size() + data_size;
  }

  // repeated .proto.game.redis.Seat m_seatplayer = 20;
  total_size += 2 * this->m_seatplayer_size();
  for (int i = 0; i < this->m_seatplayer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_seatplayer(i));
  }

  // repeated .proto.game.redis.HandCards m_handcard = 25;
  total_size += 2 * this->m_handcard_size();
  for (int i = 0; i < this->m_handcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_handcard(i));
  }

  // repeated bool m_isoffline = 26;
  {
    int data_size = 0;
    data_size = 1 * this->m_isoffline_size();
    total_size += 2 * this->m_isoffline_size() + data_size;
  }

  // repeated bool m_bistrustee = 27;
  {
    int data_size = 0;
    data_size = 1 * this->m_bistrustee_size();
    total_size += 2 * this->m_bistrustee_size() + data_size;
  }

  // repeated bool m_bautohu = 28;
  {
    int data_size = 0;
    data_size = 1 * this->m_bautohu_size();
    total_size += 2 * this->m_bautohu_size() + data_size;
  }

  // repeated int32 m_bgetcardcount = 33;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_bgetcardcount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_bgetcardcount(i));
    }
    total_size += 2 * this->m_bgetcardcount_size() + data_size;
  }

  // repeated int32 m_buseroperate = 34;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_buseroperate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_buseroperate(i));
    }
    total_size += 2 * this->m_buseroperate_size() + data_size;
  }

  // repeated .proto.game.redis.MJ_BUFFER m_stuseroutcard = 39;
  total_size += 2 * this->m_stuseroutcard_size();
  for (int i = 0; i < this->m_stuseroutcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_stuseroutcard(i));
  }

  // repeated int32 m_passhuplayer = 41;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_passhuplayer_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_passhuplayer(i));
    }
    total_size += 2 * this->m_passhuplayer_size() + data_size;
  }

  // repeated int32 m_disbandchoose = 47;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_disbandchoose_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_disbandchoose(i));
    }
    total_size += 2 * this->m_disbandchoose_size() + data_size;
  }

  // repeated int32 m_bovertimestate = 49;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_bovertimestate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_bovertimestate(i));
    }
    total_size += 2 * this->m_bovertimestate_size() + data_size;
  }

  // repeated int32 m_userdissstate = 52;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_userdissstate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_userdissstate(i));
    }
    total_size += 2 * this->m_userdissstate_size() + data_size;
  }

  // repeated .proto.game.redis.ForbidWin m_louhu = 54;
  total_size += 2 * this->m_louhu_size();
  for (int i = 0; i < this->m_louhu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_louhu(i));
  }

  // repeated .proto.game.redis.MJ_BUFFER m_peng = 61;
  total_size += 2 * this->m_peng_size();
  for (int i = 0; i < this->m_peng_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_peng(i));
  }

  // repeated .proto.game.redis.tagPlayerGPS m_mapplayergps = 63;
  total_size += 2 * this->m_mapplayergps_size();
  for (int i = 0; i < this->m_mapplayergps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_mapplayergps(i));
  }

  // repeated .proto.game.redis.tagPlayers players = 64;
  total_size += 2 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  // repeated int32 m_useroperateid = 65;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_useroperateid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_useroperateid(i));
    }
    total_size += 2 * this->m_useroperateid_size() + data_size;
  }

  // repeated int32 m_userchoosemode = 71;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_userchoosemode_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_userchoosemode(i));
    }
    total_size += 2 * this->m_userchoosemode_size() + data_size;
  }

  // repeated int32 m_vecopcards = 74;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_vecopcards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_vecopcards(i));
    }
    total_size += 2 * this->m_vecopcards_size() + data_size;
  }

  // repeated bool m_preofflinestate = 75;
  {
    int data_size = 0;
    data_size = 1 * this->m_preofflinestate_size();
    total_size += 2 * this->m_preofflinestate_size() + data_size;
  }

  // repeated string m_group_channel_ids = 78;
  total_size += 2 * this->m_group_channel_ids_size();
  for (int i = 0; i < this->m_group_channel_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->m_group_channel_ids(i));
  }

  // repeated int32 m_voice_status = 79;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_voice_status_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_voice_status(i));
    }
    total_size += 2 * this->m_voice_status_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagRedisInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagRedisInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagRedisInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagRedisInfo::MergeFrom(const tagRedisInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_online_beat_.MergeFrom(from.m_online_beat_);
  m_seatplayer_.MergeFrom(from.m_seatplayer_);
  m_handcard_.MergeFrom(from.m_handcard_);
  m_isoffline_.MergeFrom(from.m_isoffline_);
  m_bistrustee_.MergeFrom(from.m_bistrustee_);
  m_bautohu_.MergeFrom(from.m_bautohu_);
  m_bgetcardcount_.MergeFrom(from.m_bgetcardcount_);
  m_buseroperate_.MergeFrom(from.m_buseroperate_);
  m_stuseroutcard_.MergeFrom(from.m_stuseroutcard_);
  m_passhuplayer_.MergeFrom(from.m_passhuplayer_);
  m_disbandchoose_.MergeFrom(from.m_disbandchoose_);
  m_bovertimestate_.MergeFrom(from.m_bovertimestate_);
  m_userdissstate_.MergeFrom(from.m_userdissstate_);
  m_louhu_.MergeFrom(from.m_louhu_);
  m_peng_.MergeFrom(from.m_peng_);
  m_mapplayergps_.MergeFrom(from.m_mapplayergps_);
  players_.MergeFrom(from.players_);
  m_useroperateid_.MergeFrom(from.m_useroperateid_);
  m_userchoosemode_.MergeFrom(from.m_userchoosemode_);
  m_vecopcards_.MergeFrom(from.m_vecopcards_);
  m_preofflinestate_.MergeFrom(from.m_preofflinestate_);
  m_group_channel_ids_.MergeFrom(from.m_group_channel_ids_);
  m_voice_status_.MergeFrom(from.m_voice_status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_vid()) {
      set_vid(from.vid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_base_money()) {
      set_base_money(from.base_money());
    }
    if (from.has_roomgold()) {
      set_roomgold(from.roomgold());
    }
    if (from.has_stand_money()) {
      set_stand_money(from.stand_money());
    }
    if (from.has_lose_exp()) {
      set_lose_exp(from.lose_exp());
    }
    if (from.has_win_exp()) {
      set_win_exp(from.win_exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_basescore()) {
      set_m_basescore(from.m_basescore());
    }
    if (from.has_m_conf()) {
      mutable_m_conf()->::proto::game::redis::MJCustomizedConf::MergeFrom(from.m_conf());
    }
    if (from.has_m_room_owner_uid()) {
      set_m_room_owner_uid(from.m_room_owner_uid());
    }
    if (from.has_m_room_status()) {
      set_m_room_status(from.m_room_status());
    }
    if (from.has_m_totalrecordinfo()) {
      mutable_m_totalrecordinfo()->::proto::game::redis::Table_TotalRecordInfo::MergeFrom(from.m_totalrecordinfo());
    }
    if (from.has_m_game_player()) {
      set_m_game_player(from.m_game_player());
    }
    if (from.has_m_videostr()) {
      set_m_videostr(from.m_videostr());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_randomseat()) {
      set_m_randomseat(from.m_randomseat());
    }
    if (from.has_m_offlinenoop()) {
      set_m_offlinenoop(from.m_offlinenoop());
    }
    if (from.has_m_bdelaytime()) {
      set_m_bdelaytime(from.m_bdelaytime());
    }
    if (from.has_m_start_shai()) {
      mutable_m_start_shai()->::proto::game::redis::Shai_Set::MergeFrom(from.m_start_shai());
    }
    if (from.has_m_bcurplayers()) {
      set_m_bcurplayers(from.m_bcurplayers());
    }
    if (from.has_m_bgamestate()) {
      set_m_bgamestate(from.m_bgamestate());
    }
    if (from.has_m_disband_resuser()) {
      set_m_disband_resuser(from.m_disband_resuser());
    }
  }
  if (from._has_bits_[28 / 32] & (0xffu << (28 % 32))) {
    if (from.has_m_bgangcalcimme()) {
      set_m_bgangcalcimme(from.m_bgangcalcimme());
    }
    if (from.has_m_bbanker()) {
      set_m_bbanker(from.m_bbanker());
    }
    if (from.has_m_last_banker()) {
      set_m_last_banker(from.m_last_banker());
    }
    if (from.has_m_cardpool()) {
      mutable_m_cardpool()->::proto::game::redis::CCardPool::MergeFrom(from.m_cardpool());
    }
  }
  if (from._has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    if (from.has_m_bcurchairid()) {
      set_m_bcurchairid(from.m_bcurchairid());
    }
    if (from.has_m_boutcardchairid()) {
      set_m_boutcardchairid(from.m_boutcardchairid());
    }
    if (from.has_m_bcuroutcard()) {
      set_m_bcuroutcard(from.m_bcuroutcard());
    }
    if (from.has_m_bcurcard()) {
      set_m_bcurcard(from.m_bcurcard());
    }
    if (from.has_multiopinfo()) {
      mutable_multiopinfo()->::proto::game::redis::MultiOpInfo::MergeFrom(from.multiopinfo());
    }
  }
  if (from._has_bits_[41 / 32] & (0xffu << (41 % 32))) {
    if (from.has_robaddinfo()) {
      mutable_robaddinfo()->::proto::game::redis::RobAddInfo::MergeFrom(from.robaddinfo());
    }
    if (from.has_m_brecordmultiop()) {
      mutable_m_brecordmultiop()->::proto::game::redis::LOWLEVELOPERATE::MergeFrom(from.m_brecordmultiop());
    }
    if (from.has_hufaninfo()) {
      mutable_hufaninfo()->::proto::game::redis::HuFanInfo::MergeFrom(from.hufaninfo());
    }
    if (from.has_m_applydisbandchairid()) {
      set_m_applydisbandchairid(from.m_applydisbandchairid());
    }
    if (from.has_m_bisdisbandtable()) {
      set_m_bisdisbandtable(from.m_bisdisbandtable());
    }
    if (from.has_m_bdisbandcount()) {
      set_m_bdisbandcount(from.m_bdisbandcount());
    }
  }
  if (from._has_bits_[49 / 32] & (0xffu << (49 % 32))) {
    if (from.has_m_nplayingtimes()) {
      set_m_nplayingtimes(from.m_nplayingtimes());
    }
    if (from.has_m_account_info()) {
      mutable_m_account_info()->::proto::game::redis::CGameAccout::MergeFrom(from.m_account_info());
    }
    if (from.has_m_bouttimer()) {
      set_m_bouttimer(from.m_bouttimer());
    }
    if (from.has_m_bdeletetable()) {
      set_m_bdeletetable(from.m_bdeletetable());
    }
    if (from.has_m_bistestsvr()) {
      set_m_bistestsvr(from.m_bistestsvr());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_m_room_config()) {
      mutable_m_room_config()->::proto::game::redis::MJ_BUFFER::MergeFrom(from.m_room_config());
    }
    if (from.has_m_niao()) {
      mutable_m_niao()->::proto::game::redis::MJ_BUFFER::MergeFrom(from.m_niao());
    }
    if (from.has_m_zhong_niao()) {
      mutable_m_zhong_niao()->::proto::game::redis::MJ_BUFFER::MergeFrom(from.m_zhong_niao());
    }
    if (from.has_m_daniaoid()) {
      set_m_daniaoid(from.m_daniaoid());
    }
    if (from.has_g_ft2fn()) {
      mutable_g_ft2fn()->::proto::game::redis::Fantype_to_FanNum::MergeFrom(from.g_ft2fn());
    }
  }
  if (from._has_bits_[65 / 32] & (0xffu << (65 % 32))) {
    if (from.has_m_autodisband()) {
      set_m_autodisband(from.m_autodisband());
    }
    if (from.has_m_bisautodisband()) {
      set_m_bisautodisband(from.m_bisautodisband());
    }
    if (from.has_m_tablebranchid()) {
      set_m_tablebranchid(from.m_tablebranchid());
    }
    if (from.has_m_ntotalcount()) {
      set_m_ntotalcount(from.m_ntotalcount());
    }
    if (from.has_m_ncurrentcount()) {
      set_m_ncurrentcount(from.m_ncurrentcount());
    }
    if (from.has_m_voice_room()) {
      set_m_voice_room(from.m_voice_room());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_m_start_time()) {
      set_m_start_time(from.m_start_time());
    }
    if (from.has_m_isclubroom()) {
      set_m_isclubroom(from.m_isclubroom());
    }
    if (from.has_m_public_channel_id()) {
      set_m_public_channel_id(from.m_public_channel_id());
    }
    if (from.has_m_maxhandcardsize()) {
      set_m_maxhandcardsize(from.m_maxhandcardsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagRedisInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagRedisInfo::CopyFrom(const tagRedisInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagRedisInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->m_handcard())) return false;
  return true;
}

void tagRedisInfo::Swap(tagRedisInfo* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(vid_, other->vid_);
    std::swap(zid_, other->zid_);
    std::swap(base_money_, other->base_money_);
    std::swap(roomgold_, other->roomgold_);
    std::swap(stand_money_, other->stand_money_);
    std::swap(lose_exp_, other->lose_exp_);
    std::swap(win_exp_, other->win_exp_);
    std::swap(m_basescore_, other->m_basescore_);
    std::swap(m_conf_, other->m_conf_);
    std::swap(m_room_owner_uid_, other->m_room_owner_uid_);
    std::swap(m_room_status_, other->m_room_status_);
    std::swap(m_totalrecordinfo_, other->m_totalrecordinfo_);
    std::swap(m_game_player_, other->m_game_player_);
    m_online_beat_.Swap(&other->m_online_beat_);
    std::swap(m_videostr_, other->m_videostr_);
    std::swap(m_randomseat_, other->m_randomseat_);
    std::swap(m_offlinenoop_, other->m_offlinenoop_);
    std::swap(m_bdelaytime_, other->m_bdelaytime_);
    m_seatplayer_.Swap(&other->m_seatplayer_);
    std::swap(m_start_shai_, other->m_start_shai_);
    std::swap(m_bcurplayers_, other->m_bcurplayers_);
    std::swap(m_bgamestate_, other->m_bgamestate_);
    std::swap(m_disband_resuser_, other->m_disband_resuser_);
    m_handcard_.Swap(&other->m_handcard_);
    m_isoffline_.Swap(&other->m_isoffline_);
    m_bistrustee_.Swap(&other->m_bistrustee_);
    m_bautohu_.Swap(&other->m_bautohu_);
    std::swap(m_bgangcalcimme_, other->m_bgangcalcimme_);
    std::swap(m_bbanker_, other->m_bbanker_);
    std::swap(m_last_banker_, other->m_last_banker_);
    std::swap(m_cardpool_, other->m_cardpool_);
    m_bgetcardcount_.Swap(&other->m_bgetcardcount_);
    m_buseroperate_.Swap(&other->m_buseroperate_);
    std::swap(m_bcurchairid_, other->m_bcurchairid_);
    std::swap(m_boutcardchairid_, other->m_boutcardchairid_);
    std::swap(m_bcuroutcard_, other->m_bcuroutcard_);
    std::swap(m_bcurcard_, other->m_bcurcard_);
    m_stuseroutcard_.Swap(&other->m_stuseroutcard_);
    std::swap(multiopinfo_, other->multiopinfo_);
    m_passhuplayer_.Swap(&other->m_passhuplayer_);
    std::swap(robaddinfo_, other->robaddinfo_);
    std::swap(m_brecordmultiop_, other->m_brecordmultiop_);
    std::swap(hufaninfo_, other->hufaninfo_);
    std::swap(m_applydisbandchairid_, other->m_applydisbandchairid_);
    std::swap(m_bisdisbandtable_, other->m_bisdisbandtable_);
    m_disbandchoose_.Swap(&other->m_disbandchoose_);
    std::swap(m_bdisbandcount_, other->m_bdisbandcount_);
    m_bovertimestate_.Swap(&other->m_bovertimestate_);
    std::swap(m_nplayingtimes_, other->m_nplayingtimes_);
    std::swap(m_account_info_, other->m_account_info_);
    m_userdissstate_.Swap(&other->m_userdissstate_);
    std::swap(m_bouttimer_, other->m_bouttimer_);
    m_louhu_.Swap(&other->m_louhu_);
    std::swap(m_bdeletetable_, other->m_bdeletetable_);
    std::swap(m_bistestsvr_, other->m_bistestsvr_);
    std::swap(m_room_config_, other->m_room_config_);
    std::swap(m_niao_, other->m_niao_);
    std::swap(m_zhong_niao_, other->m_zhong_niao_);
    std::swap(m_daniaoid_, other->m_daniaoid_);
    m_peng_.Swap(&other->m_peng_);
    std::swap(g_ft2fn_, other->g_ft2fn_);
    m_mapplayergps_.Swap(&other->m_mapplayergps_);
    players_.Swap(&other->players_);
    m_useroperateid_.Swap(&other->m_useroperateid_);
    std::swap(m_autodisband_, other->m_autodisband_);
    std::swap(m_bisautodisband_, other->m_bisautodisband_);
    std::swap(m_tablebranchid_, other->m_tablebranchid_);
    std::swap(m_ntotalcount_, other->m_ntotalcount_);
    std::swap(m_ncurrentcount_, other->m_ncurrentcount_);
    m_userchoosemode_.Swap(&other->m_userchoosemode_);
    std::swap(m_voice_room_, other->m_voice_room_);
    std::swap(m_start_time_, other->m_start_time_);
    m_vecopcards_.Swap(&other->m_vecopcards_);
    m_preofflinestate_.Swap(&other->m_preofflinestate_);
    std::swap(m_isclubroom_, other->m_isclubroom_);
    std::swap(m_public_channel_id_, other->m_public_channel_id_);
    m_group_channel_ids_.Swap(&other->m_group_channel_ids_);
    m_voice_status_.Swap(&other->m_voice_status_);
    std::swap(m_maxhandcardsize_, other->m_maxhandcardsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagRedisInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagRedisInfo_descriptor_;
  metadata.reflection = tagRedisInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace redis
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
