// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gameproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {

namespace {

const ::google::protobuf::Descriptor* SpecialGangCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecialGangCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpecialGang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecialGang_reflection_ = NULL;
const ::google::protobuf::Descriptor* FixedCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixedCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* FixedCardChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixedCardChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cards_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardArr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardArr_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandCards_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagPlayers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagPlayers_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOutCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOutCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOperateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOperateResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqIsAuto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqIsAuto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqUpdateUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqUpdateUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChooseDisband_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChooseDisband_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagHu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagHu_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagUserHuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagUserHuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGangInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGangInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagGroupCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagGroupCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagReadyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagReadyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGameScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGameScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestSvrConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestSvrConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGameStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGameStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFirstHandCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFirstHandCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoFirstHandCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoFirstHandCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagHuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagHuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagListenInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagListenInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagPreGangs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagPreGangs_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserGetCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserGetCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagShowOutCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagShowOutCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserOutCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserOutCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserOutCardErr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserOutCardErr_reflection_ = NULL;
const ::google::protobuf::Descriptor* DaAnTing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DaAnTing_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckOpNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckOpNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBcOpResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBcOpResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckListenNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckListenNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserHu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserHu_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagEndGang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagEndGang_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagEndGangInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagEndGangInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGameEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckIsAuto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckIsAuto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGameStartFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGameStartFail_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUpdateTimer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUpdateTimer_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckDisbandChooseFaild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckDisbandChooseFaild_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckDisbandApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckDisbandApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckDisbandChooseBc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckDisbandChooseBc_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckDisbandResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckDisbandResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserOnlineState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserOnlineState_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUserOvertimeState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUserOvertimeState_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperateWaite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperateWaite_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEndRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEndRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoundScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoundScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* TotalRoundScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TotalRoundScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChangeMode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChangeMode_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckChangeMode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckChangeMode_reflection_ = NULL;
const ::google::protobuf::Descriptor* RealTimeSpeech_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RealTimeSpeech_reflection_ = NULL;
const ::google::protobuf::Descriptor* RealTimeSpeechAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RealTimeSpeechAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ACTION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DISSBAND_ACTION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OverTimeState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gameproto_2eproto() {
  protobuf_AddDesc_gameproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gameproto.proto");
  GOOGLE_CHECK(file != NULL);
  SpecialGangCard_descriptor_ = file->message_type(0);
  static const int SpecialGangCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialGangCard, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialGangCard, num_),
  };
  SpecialGangCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecialGangCard_descriptor_,
      SpecialGangCard::default_instance_,
      SpecialGangCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialGangCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialGangCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecialGangCard));
  SpecialGang_descriptor_ = file->message_type(1);
  static const int SpecialGang_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialGang, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialGang, cards_),
  };
  SpecialGang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecialGang_descriptor_,
      SpecialGang::default_instance_,
      SpecialGang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialGang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialGang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecialGang));
  FixedCard_descriptor_ = file->message_type(2);
  static const int FixedCard_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, carddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, opcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, laizinum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, specialgang_),
  };
  FixedCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FixedCard_descriptor_,
      FixedCard::default_instance_,
      FixedCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FixedCard));
  FixedCardChange_descriptor_ = file->message_type(3);
  static const int FixedCardChange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCardChange, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCardChange, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCardChange, fixedindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCardChange, fixedcard_),
  };
  FixedCardChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FixedCardChange_descriptor_,
      FixedCardChange::default_instance_,
      FixedCardChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCardChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedCardChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FixedCardChange));
  Cards_descriptor_ = file->message_type(4);
  static const int Cards_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cards, card_),
  };
  Cards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cards_descriptor_,
      Cards::default_instance_,
      Cards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cards));
  CardArr_descriptor_ = file->message_type(5);
  static const int CardArr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardArr, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardArr, card_),
  };
  CardArr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardArr_descriptor_,
      CardArr::default_instance_,
      CardArr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardArr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardArr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardArr));
  HandCards_descriptor_ = file->message_type(6);
  static const int HandCards_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, changeablecardslen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, changeablecards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, fixedcardslen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, stfixedcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, stfenzhangcard_),
  };
  HandCards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandCards_descriptor_,
      HandCards::default_instance_,
      HandCards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandCards));
  tagPlayers_descriptor_ = file->message_type(7);
  static const int tagPlayers_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, avatar_),
  };
  tagPlayers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagPlayers_descriptor_,
      tagPlayers::default_instance_,
      tagPlayers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPlayers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagPlayers));
  ReqAction_descriptor_ = file->message_type(8);
  static const int ReqAction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAction, action_),
  };
  ReqAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAction_descriptor_,
      ReqAction::default_instance_,
      ReqAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAction));
  ReqOutCard_descriptor_ = file->message_type(9);
  static const int ReqOutCard_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOutCard, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOutCard, showcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOutCard, ancards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOutCard, hongzhonglaiziflag_),
  };
  ReqOutCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOutCard_descriptor_,
      ReqOutCard::default_instance_,
      ReqOutCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOutCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOutCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOutCard));
  ReqOperateResult_descriptor_ = file->message_type(10);
  static const int ReqOperateResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOperateResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOperateResult, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOperateResult, operateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOperateResult, opcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOperateResult, passhu_),
  };
  ReqOperateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOperateResult_descriptor_,
      ReqOperateResult::default_instance_,
      ReqOperateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOperateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOperateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOperateResult));
  ReqIsAuto_descriptor_ = file->message_type(11);
  static const int ReqIsAuto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqIsAuto, isauto_),
  };
  ReqIsAuto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqIsAuto_descriptor_,
      ReqIsAuto::default_instance_,
      ReqIsAuto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqIsAuto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqIsAuto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqIsAuto));
  ReqUpdateUserInfo_descriptor_ = file->message_type(12);
  static const int ReqUpdateUserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateUserInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateUserInfo, vid_),
  };
  ReqUpdateUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqUpdateUserInfo_descriptor_,
      ReqUpdateUserInfo::default_instance_,
      ReqUpdateUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqUpdateUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqUpdateUserInfo));
  ReqRoomInfo_descriptor_ = file->message_type(13);
  static const int ReqRoomInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomInfo, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomInfo, skey_),
  };
  ReqRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRoomInfo_descriptor_,
      ReqRoomInfo::default_instance_,
      ReqRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRoomInfo));
  ReqChooseDisband_descriptor_ = file->message_type(14);
  static const int ReqChooseDisband_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChooseDisband, choosestate_),
  };
  ReqChooseDisband_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChooseDisband_descriptor_,
      ReqChooseDisband::default_instance_,
      ReqChooseDisband_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChooseDisband, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChooseDisband, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChooseDisband));
  tagHu_descriptor_ = file->message_type(15);
  static const int tagHu_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHu, hucard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHu, pashuchiarid_),
  };
  tagHu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagHu_descriptor_,
      tagHu::default_instance_,
      tagHu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagHu));
  tagUserHuInfo_descriptor_ = file->message_type(16);
  static const int tagUserHuInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, hu_),
  };
  tagUserHuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagUserHuInfo_descriptor_,
      tagUserHuInfo::default_instance_,
      tagUserHuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUserHuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagUserHuInfo));
  tagGangInfo_descriptor_ = file->message_type(17);
  static const int tagGangInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangInfo, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangInfo, state_),
  };
  tagGangInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGangInfo_descriptor_,
      tagGangInfo::default_instance_,
      tagGangInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGangInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGangInfo));
  tagGroupCard_descriptor_ = file->message_type(18);
  static const int tagGroupCard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGroupCard, fixedcard_),
  };
  tagGroupCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagGroupCard_descriptor_,
      tagGroupCard::default_instance_,
      tagGroupCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGroupCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGroupCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagGroupCard));
  tagReadyInfo_descriptor_ = file->message_type(19);
  static const int tagReadyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagReadyInfo, ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagReadyInfo, remainreadytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagReadyInfo, readytime_),
  };
  tagReadyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagReadyInfo_descriptor_,
      tagReadyInfo::default_instance_,
      tagReadyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagReadyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagReadyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagReadyInfo));
  ExMsg_descriptor_ = file->message_type(20);
  static const int ExMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExMsg, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExMsg, voice_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExMsg, public_channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExMsg, group_channel_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExMsg, m_voice_status_),
  };
  ExMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExMsg_descriptor_,
      ExMsg::default_instance_,
      ExMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExMsg));
  AckGameScene_descriptor_ = file->message_type(21);
  static const int AckGameScene_offsets_[54] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, changetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, lacktypetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, outcardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, operatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, basescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, scenestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, usercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, handcardnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, curoutcarduser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, showcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, curoutcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, huinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, groupcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, isautohu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, bankerchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, userlacktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, iscurgetcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, ganginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, listeninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, offlinestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, poolcardleftnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, preready_timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, stand_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, horsenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, isdisbandroom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, disbandinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, userdisbandstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, useronlinestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, userovertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, iszhuanzhuanroom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, userreadyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, roomgolden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, roomconfigid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, totalroundscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, encrypt_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, optype2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, operateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, auto_disband_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, auto_disband_chairids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, auto_disband_remaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, auto_disband_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, currentcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, userchangemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, cardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, test_svr_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, daan_ting_),
  };
  AckGameScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGameScene_descriptor_,
      AckGameScene::default_instance_,
      AckGameScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGameScene));
  TestSvrConf_descriptor_ = file->message_type(22);
  static const int TestSvrConf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestSvrConf, client_anti_cheat_),
  };
  TestSvrConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestSvrConf_descriptor_,
      TestSvrConf::default_instance_,
      TestSvrConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestSvrConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestSvrConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestSvrConf));
  AckUserReady_descriptor_ = file->message_type(23);
  static const int AckUserReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserReady, ready_),
  };
  AckUserReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserReady_descriptor_,
      AckUserReady::default_instance_,
      AckUserReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserReady));
  AckGameStart_descriptor_ = file->message_type(24);
  static const int AckGameStart_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, ischangbanker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, touziinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, currentcount_),
  };
  AckGameStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGameStart_descriptor_,
      AckGameStart::default_instance_,
      AckGameStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGameStart));
  AckFirstHandCard_descriptor_ = file->message_type(25);
  static const int AckFirstHandCard_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFirstHandCard, usercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFirstHandCard, handcardnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFirstHandCard, cardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFirstHandCard, encrypt_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFirstHandCard, md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFirstHandCard, first_get_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFirstHandCard, voice_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFirstHandCard, public_channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFirstHandCard, group_channel_ids_),
  };
  AckFirstHandCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFirstHandCard_descriptor_,
      AckFirstHandCard::default_instance_,
      AckFirstHandCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFirstHandCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFirstHandCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFirstHandCard));
  VideoFirstHandCard_descriptor_ = file->message_type(26);
  static const int VideoFirstHandCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFirstHandCard, usercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFirstHandCard, first_get_card_),
  };
  VideoFirstHandCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoFirstHandCard_descriptor_,
      VideoFirstHandCard::default_instance_,
      VideoFirstHandCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFirstHandCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFirstHandCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoFirstHandCard));
  tagHuInfo_descriptor_ = file->message_type(27);
  static const int tagHuInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, leftnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, hufannum_),
  };
  tagHuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagHuInfo_descriptor_,
      tagHuInfo::default_instance_,
      tagHuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagHuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagHuInfo));
  tagListenInfo_descriptor_ = file->message_type(28);
  static const int tagListenInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagListenInfo, outcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagListenInfo, huinfo_),
  };
  tagListenInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagListenInfo_descriptor_,
      tagListenInfo::default_instance_,
      tagListenInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagListenInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagListenInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagListenInfo));
  tagPreGangs_descriptor_ = file->message_type(29);
  static const int tagPreGangs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPreGangs, ancard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPreGangs, outcards_),
  };
  tagPreGangs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagPreGangs_descriptor_,
      tagPreGangs::default_instance_,
      tagPreGangs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPreGangs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPreGangs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagPreGangs));
  AckUserGetCard_descriptor_ = file->message_type(30);
  static const int AckUserGetCard_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, leftcardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, ganginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, listeninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, optype2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, fz_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, getcarddir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, xy_pregang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, locklaizi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, getlaizi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, encrypt_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, operateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, cardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, daan_ting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, listeninfo1_),
  };
  AckUserGetCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserGetCard_descriptor_,
      AckUserGetCard::default_instance_,
      AckUserGetCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserGetCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserGetCard));
  tagShowOutCard_descriptor_ = file->message_type(31);
  static const int tagShowOutCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagShowOutCard, outcardlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagShowOutCard, outcard_),
  };
  tagShowOutCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagShowOutCard_descriptor_,
      tagShowOutCard::default_instance_,
      tagShowOutCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagShowOutCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagShowOutCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagShowOutCard));
  AckUserOutCard_descriptor_ = file->message_type(32);
  static const int AckUserOutCard_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, showcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, usercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, listeninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, da_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, xy_pregang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, xianninglaizi_),
  };
  AckUserOutCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserOutCard_descriptor_,
      AckUserOutCard::default_instance_,
      AckUserOutCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserOutCard));
  AckUserOutCardErr_descriptor_ = file->message_type(33);
  static const int AckUserOutCardErr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCardErr, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCardErr, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCardErr, usercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCardErr, outcards_),
  };
  AckUserOutCardErr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserOutCardErr_descriptor_,
      AckUserOutCardErr::default_instance_,
      AckUserOutCardErr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCardErr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOutCardErr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserOutCardErr));
  DaAnTing_descriptor_ = file->message_type(34);
  static const int DaAnTing_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaAnTing, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaAnTing, tingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaAnTing, tingcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaAnTing, showcards_),
  };
  DaAnTing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DaAnTing_descriptor_,
      DaAnTing::default_instance_,
      DaAnTing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaAnTing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaAnTing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DaAnTing));
  AckOpNotify_descriptor_ = file->message_type(35);
  static const int AckOpNotify_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, gang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, optype2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, xy_pregang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, locklaizi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, listeninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, operateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, opcardsinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, banhugang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, cardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, daan_ting_),
  };
  AckOpNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckOpNotify_descriptor_,
      AckOpNotify::default_instance_,
      AckOpNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOpNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckOpNotify));
  AckBcOpResult_descriptor_ = file->message_type(36);
  static const int AckBcOpResult_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, outcardchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, isqiangganghu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, optype2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, fz_hu_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, listeninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, chinooutcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, opcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, carddel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, fixedcardchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, passhu_),
  };
  AckBcOpResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBcOpResult_descriptor_,
      AckBcOpResult::default_instance_,
      AckBcOpResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBcOpResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBcOpResult));
  AckListenNotify_descriptor_ = file->message_type(37);
  static const int AckListenNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckListenNotify, optype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckListenNotify, listeninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckListenNotify, listeninfo1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckListenNotify, cards_),
  };
  AckListenNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckListenNotify_descriptor_,
      AckListenNotify::default_instance_,
      AckListenNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckListenNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckListenNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckListenNotify));
  AckUserHu_descriptor_ = file->message_type(38);
  static const int AckUserHu_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserHu, huchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserHu, pashuchairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserHu, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserHu, fan_),
  };
  AckUserHu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserHu_descriptor_,
      AckUserHu::default_instance_,
      AckUserHu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserHu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserHu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserHu));
  tagEndGang_descriptor_ = file->message_type(39);
  static const int tagEndGang_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndGang, gangtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndGang, gangcard_),
  };
  tagEndGang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagEndGang_descriptor_,
      tagEndGang::default_instance_,
      tagEndGang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndGang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndGang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagEndGang));
  tagEndGangInfo_descriptor_ = file->message_type(40);
  static const int tagEndGangInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndGangInfo, gang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndGangInfo, totalgangscore_),
  };
  tagEndGangInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagEndGangInfo_descriptor_,
      tagEndGangInfo::default_instance_,
      tagEndGangInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndGangInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagEndGangInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagEndGangInfo));
  AddFanInfo_descriptor_ = file->message_type(41);
  static const int AddFanInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFanInfo, addtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFanInfo, addnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFanInfo, addtype2_),
  };
  AddFanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFanInfo_descriptor_,
      AddFanInfo::default_instance_,
      AddFanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFanInfo));
  FanInfo_descriptor_ = file->message_type(42);
  static const int FanInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, specialtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, fannum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, addfan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, hucard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, dianpao_),
  };
  FanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FanInfo_descriptor_,
      FanInfo::default_instance_,
      FanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FanInfo));
  AckGameEnd_descriptor_ = file->message_type(43);
  static const int AckGameEnd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, usercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, endstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, endganginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, faninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, md5_),
  };
  AckGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGameEnd_descriptor_,
      AckGameEnd::default_instance_,
      AckGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGameEnd));
  AckIsAuto_descriptor_ = file->message_type(44);
  static const int AckIsAuto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIsAuto, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIsAuto, isauto_),
  };
  AckIsAuto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckIsAuto_descriptor_,
      AckIsAuto::default_instance_,
      AckIsAuto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIsAuto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIsAuto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckIsAuto));
  AckUpdateUserInfo_descriptor_ = file->message_type(45);
  static const int AckUpdateUserInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateUserInfo, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateUserInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateUserInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateUserInfo, rmb_),
  };
  AckUpdateUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateUserInfo_descriptor_,
      AckUpdateUserInfo::default_instance_,
      AckUpdateUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateUserInfo));
  AckGameStartFail_descriptor_ = file->message_type(46);
  static const int AckGameStartFail_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, can_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, ts_),
  };
  AckGameStartFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGameStartFail_descriptor_,
      AckGameStartFail::default_instance_,
      AckGameStartFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGameStartFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGameStartFail));
  AckUpdateTimer_descriptor_ = file->message_type(47);
  static const int AckUpdateTimer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateTimer, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateTimer, lefttime_),
  };
  AckUpdateTimer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUpdateTimer_descriptor_,
      AckUpdateTimer::default_instance_,
      AckUpdateTimer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateTimer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUpdateTimer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUpdateTimer));
  AckDisbandChooseFaild_descriptor_ = file->message_type(48);
  static const int AckDisbandChooseFaild_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandChooseFaild, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandChooseFaild, code_),
  };
  AckDisbandChooseFaild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckDisbandChooseFaild_descriptor_,
      AckDisbandChooseFaild::default_instance_,
      AckDisbandChooseFaild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandChooseFaild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandChooseFaild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckDisbandChooseFaild));
  AckDisbandApply_descriptor_ = file->message_type(49);
  static const int AckDisbandApply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandApply, applychairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandApply, waittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandApply, onlinechairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandApply, totaltime_),
  };
  AckDisbandApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckDisbandApply_descriptor_,
      AckDisbandApply::default_instance_,
      AckDisbandApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckDisbandApply));
  AckDisbandChooseBc_descriptor_ = file->message_type(50);
  static const int AckDisbandChooseBc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandChooseBc, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandChooseBc, choosestate_),
  };
  AckDisbandChooseBc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckDisbandChooseBc_descriptor_,
      AckDisbandChooseBc::default_instance_,
      AckDisbandChooseBc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandChooseBc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandChooseBc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckDisbandChooseBc));
  AckDisbandResult_descriptor_ = file->message_type(51);
  static const int AckDisbandResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandResult, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandResult, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandResult, clubname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandResult, clubcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandResult, closetype_),
  };
  AckDisbandResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckDisbandResult_descriptor_,
      AckDisbandResult::default_instance_,
      AckDisbandResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckDisbandResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckDisbandResult));
  AckUserOnlineState_descriptor_ = file->message_type(52);
  static const int AckUserOnlineState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOnlineState, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOnlineState, state_),
  };
  AckUserOnlineState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserOnlineState_descriptor_,
      AckUserOnlineState::default_instance_,
      AckUserOnlineState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOnlineState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOnlineState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserOnlineState));
  AckUserOvertimeState_descriptor_ = file->message_type(53);
  static const int AckUserOvertimeState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOvertimeState, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOvertimeState, state_),
  };
  AckUserOvertimeState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUserOvertimeState_descriptor_,
      AckUserOvertimeState::default_instance_,
      AckUserOvertimeState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOvertimeState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUserOvertimeState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUserOvertimeState));
  AckMessage_descriptor_ = file->message_type(54);
  static const int AckMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMessage, chairid_),
  };
  AckMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckMessage_descriptor_,
      AckMessage::default_instance_,
      AckMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckMessage));
  OperateWaite_descriptor_ = file->message_type(55);
  static const int OperateWaite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateWaite, state_),
  };
  OperateWaite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperateWaite_descriptor_,
      OperateWaite::default_instance_,
      OperateWaite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateWaite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateWaite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateWaite));
  ReordInfo_descriptor_ = file->message_type(56);
  static const int ReordInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, banker_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, hu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, piaolaizi_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, outtime_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, wincounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, gangtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, diangangtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, ex1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, ex2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, dissstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, mobaotimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, ex4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, ex5_),
  };
  ReordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReordInfo_descriptor_,
      ReordInfo::default_instance_,
      ReordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReordInfo));
  GameEndRecord_descriptor_ = file->message_type(57);
  static const int GameEndRecord_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, userrecoreinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, mostdianpaouser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, mostwinscoreuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, datatime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, autodiss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, starttime_),
  };
  GameEndRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEndRecord_descriptor_,
      GameEndRecord::default_instance_,
      GameEndRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEndRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEndRecord));
  RoundScore_descriptor_ = file->message_type(58);
  static const int RoundScore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundScore, score_),
  };
  RoundScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoundScore_descriptor_,
      RoundScore::default_instance_,
      RoundScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoundScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoundScore));
  TotalRoundScore_descriptor_ = file->message_type(59);
  static const int TotalRoundScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalRoundScore, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalRoundScore, roundcount_),
  };
  TotalRoundScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TotalRoundScore_descriptor_,
      TotalRoundScore::default_instance_,
      TotalRoundScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalRoundScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalRoundScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TotalRoundScore));
  ReqChangeMode_descriptor_ = file->message_type(60);
  static const int ReqChangeMode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeMode, num_),
  };
  ReqChangeMode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChangeMode_descriptor_,
      ReqChangeMode::default_instance_,
      ReqChangeMode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeMode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChangeMode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChangeMode));
  AckChangeMode_descriptor_ = file->message_type(61);
  static const int AckChangeMode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeMode, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeMode, num_),
  };
  AckChangeMode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckChangeMode_descriptor_,
      AckChangeMode::default_instance_,
      AckChangeMode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeMode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChangeMode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckChangeMode));
  RealTimeSpeech_descriptor_ = file->message_type(62);
  static const int RealTimeSpeech_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeSpeech, code_),
  };
  RealTimeSpeech_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RealTimeSpeech_descriptor_,
      RealTimeSpeech::default_instance_,
      RealTimeSpeech_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeSpeech, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeSpeech, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RealTimeSpeech));
  RealTimeSpeechAck_descriptor_ = file->message_type(63);
  static const int RealTimeSpeechAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeSpeechAck, code_),
  };
  RealTimeSpeechAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RealTimeSpeechAck_descriptor_,
      RealTimeSpeechAck::default_instance_,
      RealTimeSpeechAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeSpeechAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeSpeechAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RealTimeSpeechAck));
  ACTION_descriptor_ = file->enum_type(0);
  STATUS_descriptor_ = file->enum_type(1);
  DISSBAND_ACTION_descriptor_ = file->enum_type(2);
  OverTimeState_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gameproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecialGangCard_descriptor_, &SpecialGangCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecialGang_descriptor_, &SpecialGang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FixedCard_descriptor_, &FixedCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FixedCardChange_descriptor_, &FixedCardChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cards_descriptor_, &Cards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardArr_descriptor_, &CardArr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandCards_descriptor_, &HandCards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagPlayers_descriptor_, &tagPlayers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAction_descriptor_, &ReqAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOutCard_descriptor_, &ReqOutCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOperateResult_descriptor_, &ReqOperateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqIsAuto_descriptor_, &ReqIsAuto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqUpdateUserInfo_descriptor_, &ReqUpdateUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRoomInfo_descriptor_, &ReqRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChooseDisband_descriptor_, &ReqChooseDisband::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagHu_descriptor_, &tagHu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagUserHuInfo_descriptor_, &tagUserHuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGangInfo_descriptor_, &tagGangInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagGroupCard_descriptor_, &tagGroupCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagReadyInfo_descriptor_, &tagReadyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExMsg_descriptor_, &ExMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGameScene_descriptor_, &AckGameScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestSvrConf_descriptor_, &TestSvrConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserReady_descriptor_, &AckUserReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGameStart_descriptor_, &AckGameStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFirstHandCard_descriptor_, &AckFirstHandCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoFirstHandCard_descriptor_, &VideoFirstHandCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagHuInfo_descriptor_, &tagHuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagListenInfo_descriptor_, &tagListenInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagPreGangs_descriptor_, &tagPreGangs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserGetCard_descriptor_, &AckUserGetCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagShowOutCard_descriptor_, &tagShowOutCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserOutCard_descriptor_, &AckUserOutCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserOutCardErr_descriptor_, &AckUserOutCardErr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DaAnTing_descriptor_, &DaAnTing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckOpNotify_descriptor_, &AckOpNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBcOpResult_descriptor_, &AckBcOpResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckListenNotify_descriptor_, &AckListenNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserHu_descriptor_, &AckUserHu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagEndGang_descriptor_, &tagEndGang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagEndGangInfo_descriptor_, &tagEndGangInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFanInfo_descriptor_, &AddFanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FanInfo_descriptor_, &FanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGameEnd_descriptor_, &AckGameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckIsAuto_descriptor_, &AckIsAuto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateUserInfo_descriptor_, &AckUpdateUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGameStartFail_descriptor_, &AckGameStartFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUpdateTimer_descriptor_, &AckUpdateTimer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckDisbandChooseFaild_descriptor_, &AckDisbandChooseFaild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckDisbandApply_descriptor_, &AckDisbandApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckDisbandChooseBc_descriptor_, &AckDisbandChooseBc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckDisbandResult_descriptor_, &AckDisbandResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserOnlineState_descriptor_, &AckUserOnlineState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUserOvertimeState_descriptor_, &AckUserOvertimeState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckMessage_descriptor_, &AckMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateWaite_descriptor_, &OperateWaite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReordInfo_descriptor_, &ReordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEndRecord_descriptor_, &GameEndRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoundScore_descriptor_, &RoundScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TotalRoundScore_descriptor_, &TotalRoundScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChangeMode_descriptor_, &ReqChangeMode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckChangeMode_descriptor_, &AckChangeMode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RealTimeSpeech_descriptor_, &RealTimeSpeech::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RealTimeSpeechAck_descriptor_, &RealTimeSpeechAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gameproto_2eproto() {
  delete SpecialGangCard::default_instance_;
  delete SpecialGangCard_reflection_;
  delete SpecialGang::default_instance_;
  delete SpecialGang_reflection_;
  delete FixedCard::default_instance_;
  delete FixedCard_reflection_;
  delete FixedCardChange::default_instance_;
  delete FixedCardChange_reflection_;
  delete Cards::default_instance_;
  delete Cards_reflection_;
  delete CardArr::default_instance_;
  delete CardArr_reflection_;
  delete HandCards::default_instance_;
  delete HandCards_reflection_;
  delete tagPlayers::default_instance_;
  delete tagPlayers_reflection_;
  delete ReqAction::default_instance_;
  delete ReqAction_reflection_;
  delete ReqOutCard::default_instance_;
  delete ReqOutCard_reflection_;
  delete ReqOperateResult::default_instance_;
  delete ReqOperateResult_reflection_;
  delete ReqIsAuto::default_instance_;
  delete ReqIsAuto_reflection_;
  delete ReqUpdateUserInfo::default_instance_;
  delete ReqUpdateUserInfo_reflection_;
  delete ReqRoomInfo::default_instance_;
  delete ReqRoomInfo_reflection_;
  delete ReqChooseDisband::default_instance_;
  delete ReqChooseDisband_reflection_;
  delete tagHu::default_instance_;
  delete tagHu_reflection_;
  delete tagUserHuInfo::default_instance_;
  delete tagUserHuInfo_reflection_;
  delete tagGangInfo::default_instance_;
  delete tagGangInfo_reflection_;
  delete tagGroupCard::default_instance_;
  delete tagGroupCard_reflection_;
  delete tagReadyInfo::default_instance_;
  delete tagReadyInfo_reflection_;
  delete ExMsg::default_instance_;
  delete ExMsg_reflection_;
  delete AckGameScene::default_instance_;
  delete AckGameScene_reflection_;
  delete TestSvrConf::default_instance_;
  delete TestSvrConf_reflection_;
  delete AckUserReady::default_instance_;
  delete AckUserReady_reflection_;
  delete AckGameStart::default_instance_;
  delete AckGameStart_reflection_;
  delete AckFirstHandCard::default_instance_;
  delete AckFirstHandCard_reflection_;
  delete VideoFirstHandCard::default_instance_;
  delete VideoFirstHandCard_reflection_;
  delete tagHuInfo::default_instance_;
  delete tagHuInfo_reflection_;
  delete tagListenInfo::default_instance_;
  delete tagListenInfo_reflection_;
  delete tagPreGangs::default_instance_;
  delete tagPreGangs_reflection_;
  delete AckUserGetCard::default_instance_;
  delete AckUserGetCard_reflection_;
  delete tagShowOutCard::default_instance_;
  delete tagShowOutCard_reflection_;
  delete AckUserOutCard::default_instance_;
  delete AckUserOutCard_reflection_;
  delete AckUserOutCardErr::default_instance_;
  delete AckUserOutCardErr_reflection_;
  delete DaAnTing::default_instance_;
  delete DaAnTing_reflection_;
  delete AckOpNotify::default_instance_;
  delete AckOpNotify_reflection_;
  delete AckBcOpResult::default_instance_;
  delete AckBcOpResult_reflection_;
  delete AckListenNotify::default_instance_;
  delete AckListenNotify_reflection_;
  delete AckUserHu::default_instance_;
  delete AckUserHu_reflection_;
  delete tagEndGang::default_instance_;
  delete tagEndGang_reflection_;
  delete tagEndGangInfo::default_instance_;
  delete tagEndGangInfo_reflection_;
  delete AddFanInfo::default_instance_;
  delete AddFanInfo_reflection_;
  delete FanInfo::default_instance_;
  delete FanInfo_reflection_;
  delete AckGameEnd::default_instance_;
  delete AckGameEnd_reflection_;
  delete AckIsAuto::default_instance_;
  delete AckIsAuto_reflection_;
  delete AckUpdateUserInfo::default_instance_;
  delete AckUpdateUserInfo_reflection_;
  delete AckGameStartFail::default_instance_;
  delete AckGameStartFail_reflection_;
  delete AckUpdateTimer::default_instance_;
  delete AckUpdateTimer_reflection_;
  delete AckDisbandChooseFaild::default_instance_;
  delete AckDisbandChooseFaild_reflection_;
  delete AckDisbandApply::default_instance_;
  delete AckDisbandApply_reflection_;
  delete AckDisbandChooseBc::default_instance_;
  delete AckDisbandChooseBc_reflection_;
  delete AckDisbandResult::default_instance_;
  delete AckDisbandResult_reflection_;
  delete AckUserOnlineState::default_instance_;
  delete AckUserOnlineState_reflection_;
  delete AckUserOvertimeState::default_instance_;
  delete AckUserOvertimeState_reflection_;
  delete AckMessage::default_instance_;
  delete AckMessage_reflection_;
  delete OperateWaite::default_instance_;
  delete OperateWaite_reflection_;
  delete ReordInfo::default_instance_;
  delete ReordInfo_reflection_;
  delete GameEndRecord::default_instance_;
  delete GameEndRecord_reflection_;
  delete RoundScore::default_instance_;
  delete RoundScore_reflection_;
  delete TotalRoundScore::default_instance_;
  delete TotalRoundScore_reflection_;
  delete ReqChangeMode::default_instance_;
  delete ReqChangeMode_reflection_;
  delete AckChangeMode::default_instance_;
  delete AckChangeMode_reflection_;
  delete RealTimeSpeech::default_instance_;
  delete RealTimeSpeech_reflection_;
  delete RealTimeSpeechAck::default_instance_;
  delete RealTimeSpeechAck_reflection_;
}

void protobuf_AddDesc_gameproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017gameproto.proto\022\nproto.game\",\n\017Special"
    "GangCard\022\014\n\004card\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\"H\n\013S"
    "pecialGang\022\r\n\005index\030\001 \001(\005\022*\n\005cards\030\002 \003(\013"
    "2\033.proto.game.SpecialGangCard\"\216\001\n\tFixedC"
    "ard\022\020\n\010CardData\030\001 \002(\005\022\r\n\005state\030\002 \001(\005\022\017\n\007"
    "chairID\030\003 \001(\005\022\017\n\007OpCards\030\004 \003(\005\022\020\n\010LaiziN"
    "um\030\005 \001(\005\022,\n\013specialgang\030\006 \001(\0132\027.proto.ga"
    "me.SpecialGang\"p\n\017FixedCardChange\022\016\n\006ena"
    "ble\030\001 \001(\005\022\017\n\007chairid\030\002 \001(\005\022\022\n\nfixedindex"
    "\030\003 \001(\005\022(\n\tfixedcard\030\004 \001(\0132\025.proto.game.F"
    "ixedCard\"\025\n\005Cards\022\014\n\004card\030\001 \003(\005\"\'\n\007CardA"
    "rr\022\016\n\006OpType\030\001 \001(\005\022\014\n\004card\030\002 \003(\005\"\234\001\n\tHan"
    "dCards\022\032\n\022ChangeableCardsLen\030\001 \002(\005\022\027\n\017Ch"
    "angeableCards\030\002 \003(\005\022\025\n\rFixedCardsLen\030\003 \001"
    "(\005\022+\n\014stFixedCards\030\004 \003(\0132\025.proto.game.Fi"
    "xedCard\022\026\n\016stFenZhangCard\030\005 \001(\005\"r\n\ntagPl"
    "ayers\022\013\n\003uid\030\001 \002(\005\022\016\n\006seatid\030\002 \001(\005\022\r\n\005re"
    "ady\030\003 \001(\005\022\r\n\005money\030\004 \001(\005\022\014\n\004name\030\005 \001(\t\022\013"
    "\n\003sex\030\006 \001(\005\022\016\n\006avatar\030\007 \001(\t\"\033\n\tReqAction"
    "\022\016\n\006action\030\001 \002(\005\"Y\n\nReqOutCard\022\014\n\004Card\030\001"
    " \002(\005\022\020\n\010ShowCard\030\002 \001(\005\022\017\n\007anCards\030\003 \001(\005\022"
    "\032\n\022HongZhongLaiZiFlag\030\004 \001(\010\"b\n\020ReqOperat"
    "eResult\022\014\n\004Type\030\001 \002(\005\022\014\n\004Card\030\002 \001(\005\022\021\n\to"
    "perateid\030\003 \001(\005\022\017\n\007opcards\030\004 \003(\005\022\016\n\006passh"
    "u\030\005 \001(\005\"\033\n\tReqIsAuto\022\016\n\006isAuto\030\001 \002(\005\"-\n\021"
    "ReqUpdateUserInfo\022\013\n\003uid\030\001 \002(\005\022\013\n\003vid\030\002 "
    "\001(\005\"5\n\013ReqRoomInfo\022\013\n\003uid\030\001 \002(\005\022\013\n\003vid\030\002"
    " \001(\005\022\014\n\004skey\030\003 \001(\t\"\'\n\020ReqChooseDisband\022\023"
    "\n\013Choosestate\030\001 \002(\005\"-\n\005tagHu\022\016\n\006HuCard\030\001"
    " \001(\005\022\024\n\014PasHuChiarid\030\002 \001(\005\".\n\rtagUserHuI"
    "nfo\022\035\n\002hu\030\001 \003(\0132\021.proto.game.tagHu\"*\n\013ta"
    "gGangInfo\022\014\n\004Card\030\001 \002(\005\022\r\n\005state\030\002 \001(\005\"8"
    "\n\014tagGroupCard\022(\n\tFixedCard\030\001 \003(\0132\025.prot"
    "o.game.FixedCard\"I\n\014tagReadyInfo\022\r\n\005Read"
    "y\030\001 \003(\005\022\027\n\017RemainReadyTime\030\002 \003(\005\022\021\n\tRead"
    "yTime\030\003 \001(\005\"x\n\005ExMsg\022\r\n\005times\030\001 \001(\005\022\022\n\nv"
    "oice_room\030\002 \001(\005\022\031\n\021public_channel_id\030\003 \001"
    "(\t\022\031\n\021group_channel_ids\030\004 \003(\t\022\026\n\016m_voice"
    "_status\030\005 \003(\005\"\257\014\n\014AckGameScene\022\022\n\nchange"
    "time\030\001 \001(\005\022\024\n\014lacktypetime\030\002 \001(\005\022\023\n\013outc"
    "ardtime\030\003 \001(\005\022\023\n\013operatetime\030\004 \001(\005\022\021\n\tba"
    "sescore\030\005 \001(\005\022\021\n\tdelaytime\030\006 \001(\005\022\023\n\013Scen"
    "eStatus\030\007 \001(\005\022\020\n\010LeftTime\030\010 \001(\005\022\'\n\010UserC"
    "ard\030\t \001(\0132\025.proto.game.HandCards\022\024\n\014Hand"
    "CardNums\030\n \003(\005\022\026\n\016CurOutCardUser\030\013 \001(\005\022,"
    "\n\010ShowCard\030\014 \003(\0132\032.proto.game.tagShowOut"
    "Card\022\022\n\ncurOutCard\030\r \001(\005\022)\n\006HuInfo\030\016 \003(\013"
    "2\031.proto.game.tagUserHuInfo\022\022\n\nTotalScor"
    "e\030\017 \003(\005\022+\n\tGroupCard\030\020 \003(\0132\030.proto.game."
    "tagGroupCard\022\020\n\010IsAutoHu\030\021 \001(\005\022\025\n\rBanker"
    "Chairid\030\022 \001(\005\022\024\n\014UserLackType\030\023 \003(\005\022\024\n\014I"
    "scurGetCard\030\024 \001(\005\022\014\n\004Card\030\025 \001(\005\022\016\n\006OpTyp"
    "e\030\026 \001(\005\022)\n\010GangInfo\030\027 \003(\0132\027.proto.game.t"
    "agGangInfo\022-\n\nListenInfo\030\030 \003(\0132\031.proto.g"
    "ame.tagListenInfo\022\024\n\014OfflineState\030\031 \003(\005\022"
    "\030\n\020PoolCardLeftNums\030\032 \001(\005\022\026\n\016preready_ti"
    "mer\030\033 \001(\005\022\023\n\013stand_money\030\034 \001(\005\022\020\n\010HorseN"
    "um\030\035 \001(\005\022\025\n\risDisbandroom\030\036 \001(\005\0220\n\013Disba"
    "ndinfo\030\037 \001(\0132\033.proto.game.AckDisbandAppl"
    "y\0228\n\020UserDisbandstate\030  \003(\0132\036.proto.game"
    ".AckDisbandChooseBc\0227\n\017UserOnlinestate\030!"
    " \003(\0132\036.proto.game.AckUserOnlineState\0226\n\014"
    "UserOvertime\030\" \003(\0132 .proto.game.AckUserO"
    "vertimeState\022\030\n\020IsZhuanZhuanRoom\030# \001(\010\022/"
    "\n\rUserReadyInfo\030$ \001(\0132\030.proto.game.tagRe"
    "adyInfo\022\022\n\nroomGolden\030% \001(\005\022\024\n\014RoomConfi"
    "gID\030& \003(\005\0224\n\017totalRoundScore\030\' \001(\0132\033.pro"
    "to.game.TotalRoundScore\022\024\n\014encrypt_code\030"
    "( \001(\005\022\017\n\007OpType2\030) \001(\005\022\013\n\003md5\030* \001(\t\022\021\n\to"
    "perateid\030+ \001(\005\022\032\n\022auto_disband_state\030, \001"
    "(\005\022\035\n\025auto_disband_chairids\030- \003(\005\022\037\n\027aut"
    "o_disband_remaintime\030. \001(\005\022\031\n\021auto_disba"
    "nd_time\030/ \001(\005\022\022\n\ntotalcount\0300 \001(\005\022\024\n\014cur"
    "rentcount\0301 \001(\005\022\026\n\016userchangemode\0302 \003(\005\022"
    "\036\n\003msg\0303 \001(\0132\021.proto.game.ExMsg\022%\n\010cardL"
    "ist\030< \003(\0132\023.proto.game.CardArr\022.\n\rtest_s"
    "vr_conf\030= \001(\0132\027.proto.game.TestSvrConf\022\'"
    "\n\tdaan_ting\030P \003(\0132\024.proto.game.DaAnTing\""
    "(\n\013TestSvrConf\022\031\n\021client_anti_cheat\030\001 \001("
    "\010\"\035\n\014AckUserReady\022\r\n\005ready\030\001 \003(\005\"s\n\014AckG"
    "ameStart\022\017\n\007ChairID\030\001 \002(\005\022\025\n\rIsChangBank"
    "er\030\002 \001(\005\022\021\n\tTouZiInfo\030\003 \003(\005\022\022\n\ntotalcoun"
    "t\030\004 \001(\005\022\024\n\014currentcount\030\005 \001(\005\"\347\001\n\020AckFir"
    "stHandCard\022\'\n\010UserCard\030\001 \001(\0132\025.proto.gam"
    "e.HandCards\022\024\n\014HandCardNums\030\002 \003(\005\022\017\n\007Car"
    "dNum\030\003 \001(\005\022\024\n\014encrypt_code\030\004 \001(\005\022\013\n\003md5\030"
    "\005 \001(\t\022\026\n\016first_get_card\030\006 \001(\005\022\022\n\nvoice_r"
    "oom\030\007 \001(\005\022\031\n\021public_channel_id\030\010 \001(\t\022\031\n\021"
    "group_channel_ids\030\t \003(\t\"U\n\022VideoFirstHan"
    "dCard\022\'\n\010UserCard\030\001 \003(\0132\025.proto.game.Han"
    "dCards\022\026\n\016first_get_card\030\002 \001(\005\"<\n\ttagHuI"
    "nfo\022\014\n\004Card\030\001 \002(\005\022\017\n\007LeftNum\030\002 \001(\005\022\020\n\010Hu"
    "FanNum\030\003 \001(\005\"G\n\rtagListenInfo\022\017\n\007OutCard"
    "\030\001 \001(\005\022%\n\006HuInfo\030\002 \003(\0132\025.proto.game.tagH"
    "uInfo\"/\n\013tagPreGangs\022\016\n\006ancard\030\001 \001(\005\022\020\n\010"
    "outcards\030\002 \003(\005\"\373\003\n\016AckUserGetCard\022\017\n\007Cha"
    "irID\030\001 \002(\005\022\023\n\013LeftCardNum\030\002 \001(\005\022\014\n\004Card\030"
    "\003 \001(\005\022\016\n\006OpType\030\004 \001(\005\022)\n\010GangInfo\030\005 \003(\0132"
    "\027.proto.game.tagGangInfo\022-\n\nListenInfo\030\006"
    " \003(\0132\031.proto.game.tagListenInfo\022\017\n\007OpTyp"
    "e2\030\007 \001(\005\022\017\n\007fz_type\030\010 \001(\005\022\022\n\nGetCardDir\030"
    "\t \001(\005\022+\n\nxy_pregang\030\n \003(\0132\027.proto.game.t"
    "agPreGangs\022\021\n\tLockLaizi\030\013 \001(\005\022\020\n\010getlaiz"
    "i\030\014 \001(\005\022\024\n\014encrypt_code\030\r \001(\005\022\013\n\003md5\030\016 \001"
    "(\t\022\021\n\toperateid\030\017 \001(\005\022\r\n\005cards\030\020 \003(\005\022%\n\010"
    "cardList\030\021 \003(\0132\023.proto.game.CardArr\022\'\n\td"
    "aan_ting\030\024 \003(\0132\024.proto.game.DaAnTing\022.\n\013"
    "ListenInfo1\030\036 \003(\0132\031.proto.game.tagListen"
    "Info\"5\n\016tagShowOutCard\022\022\n\nOutCardLen\030\001 \002"
    "(\005\022\017\n\007OutCard\030\002 \003(\005\"\212\002\n\016AckUserOutCard\022\017"
    "\n\007ChairID\030\001 \002(\005\022\014\n\004Card\030\002 \001(\005\022,\n\010ShowCar"
    "d\030\003 \003(\0132\032.proto.game.tagShowOutCard\022\'\n\010U"
    "serCard\030\004 \001(\0132\025.proto.game.HandCards\022-\n\n"
    "ListenInfo\030\005 \003(\0132\031.proto.game.tagListenI"
    "nfo\022\017\n\007da_type\030\006 \001(\005\022+\n\nxy_pregang\030\007 \003(\013"
    "2\027.proto.game.tagPreGangs\022\025\n\rXianNingLai"
    "Zi\030\010 \001(\010\"S\n\021AckUserOutCardErr\022\014\n\004card\030\001 "
    "\002(\005\022\014\n\004code\030\002 \001(\005\022\020\n\010usercard\030\004 \003(\005\022\020\n\010o"
    "utcards\030\005 \003(\005\"O\n\010DaAnTing\022\013\n\003Key\030\001 \001(\005\022\020"
    "\n\010TingType\030\002 \001(\005\022\021\n\tTingCards\030\003 \003(\005\022\021\n\tS"
    "howCards\030\004 \003(\005\"\220\003\n\013AckOpNotify\022\017\n\007ChairI"
    "D\030\001 \002(\005\022\016\n\006OpType\030\002 \001(\005\022\014\n\004Card\030\003 \001(\005\022%\n"
    "\004Gang\030\004 \003(\0132\027.proto.game.tagGangInfo\022\017\n\007"
    "OpType2\030\005 \001(\005\022+\n\nxy_pregang\030\006 \003(\0132\027.prot"
    "o.game.tagPreGangs\022\021\n\tLockLaizi\030\007 \001(\005\022-\n"
    "\nListenInfo\030\010 \003(\0132\031.proto.game.tagListen"
    "Info\022\021\n\toperateid\030\t \001(\005\022&\n\013OpCardsInfo\030\n"
    " \003(\0132\021.proto.game.Cards\022\r\n\005cards\030\013 \003(\005\022\021"
    "\n\tbAnHuGang\030\014 \003(\005\022%\n\010cardList\030\r \003(\0132\023.pr"
    "oto.game.CardArr\022\'\n\tdaan_ting\030\024 \003(\0132\024.pr"
    "oto.game.DaAnTing\"\317\002\n\rAckBcOpResult\022\017\n\007C"
    "hairID\030\001 \002(\005\022\026\n\016OutCardChairID\030\002 \001(\005\022\016\n\006"
    "OpType\030\003 \001(\005\022\014\n\004Card\030\004 \001(\005\022\r\n\005Score\030\005 \003("
    "\005\022\025\n\rIsQiangganghu\030\006 \001(\005\022\017\n\007OpType2\030\007 \001("
    "\005\022\022\n\nfz_hu_type\030\010 \001(\005\022-\n\nListenInfo\030\t \003("
    "\0132\031.proto.game.tagListenInfo\022\025\n\rChiNoOut"
    "Cards\030\n \003(\005\022\017\n\007OpCards\030\013 \003(\005\022\017\n\007cardDel\030"
    "\014 \003(\005\0224\n\017fixedcardchange\030\r \001(\0132\033.proto.g"
    "ame.FixedCardChange\022\016\n\006passhu\030\016 \001(\005\"\217\001\n\017"
    "AckListenNotify\022\016\n\006OpType\030\001 \002(\005\022-\n\nListe"
    "nInfo\030\002 \003(\0132\031.proto.game.tagListenInfo\022."
    "\n\013ListenInfo1\030\003 \003(\0132\031.proto.game.tagList"
    "enInfo\022\r\n\005cards\030\004 \003(\005\"P\n\tAckUserHu\022\021\n\tHu"
    "ChairID\030\001 \002(\005\022\024\n\014PasHuChairID\030\002 \001(\005\022\r\n\005S"
    "core\030\003 \003(\005\022\013\n\003fan\030\004 \003(\005\"0\n\ntagEndGang\022\020\n"
    "\010GangType\030\001 \001(\005\022\020\n\010GangCard\030\002 \001(\005\"N\n\016tag"
    "EndGangInfo\022$\n\004Gang\030\001 \003(\0132\026.proto.game.t"
    "agEndGang\022\026\n\016TotalGangScore\030\002 \001(\005\"\?\n\nAdd"
    "FanInfo\022\017\n\007AddType\030\001 \001(\005\022\016\n\006AddNum\030\002 \001(\005"
    "\022\020\n\010AddType2\030\003 \001(\005\"\210\001\n\007FanInfo\022\017\n\007chairi"
    "d\030\001 \002(\005\022\023\n\013SpecialType\030\002 \002(\005\022\016\n\006FanNum\030\003"
    " \002(\005\022&\n\006addfan\030\004 \003(\0132\026.proto.game.AddFan"
    "Info\022\016\n\006hucard\030\005 \001(\005\022\017\n\007DianPao\030\006 \003(\005\"\325\001"
    "\n\nAckGameEnd\022\'\n\010UserCard\030\001 \003(\0132\025.proto.g"
    "ame.HandCards\022\r\n\005Score\030\002 \003(\005\022\020\n\010EndState"
    "\030\003 \001(\005\022/\n\013EndGangInfo\030\004 \003(\0132\032.proto.game"
    ".tagEndGangInfo\022$\n\007faninfo\030\005 \003(\0132\023.proto"
    ".game.FanInfo\022\r\n\005money\030\006 \003(\005\022\n\n\002ts\030\007 \001(\005"
    "\022\013\n\003md5\030\010 \003(\t\",\n\tAckIsAuto\022\017\n\007ChairID\030\001 "
    "\002(\005\022\016\n\006isAuto\030\002 \001(\005\"M\n\021AckUpdateUserInfo"
    "\022\017\n\007chairid\030\001 \002(\005\022\013\n\003uid\030\002 \001(\005\022\r\n\005money\030"
    "\003 \001(\005\022\013\n\003rmb\030\004 \001(\005\"\\\n\020AckGameStartFail\022\013"
    "\n\003vid\030\001 \002(\005\022\016\n\006roomid\030\002 \001(\t\022\021\n\tcan_start"
    "\030\003 \001(\005\022\014\n\004code\030\004 \001(\005\022\n\n\002ts\030\005 \001(\005\"3\n\016AckU"
    "pdateTimer\022\017\n\007ChairID\030\001 \002(\005\022\020\n\010lefttime\030"
    "\002 \001(\005\"6\n\025AckDisbandChooseFaild\022\017\n\007chairi"
    "d\030\001 \002(\005\022\014\n\004code\030\002 \001(\005\"c\n\017AckDisbandApply"
    "\022\024\n\014ApplyChairid\030\001 \002(\005\022\020\n\010Waittime\030\002 \001(\005"
    "\022\025\n\ronlinechairid\030\003 \003(\005\022\021\n\ttotaltime\030\004 \001"
    "(\005\":\n\022AckDisbandChooseBc\022\017\n\007chairid\030\001 \002("
    "\005\022\023\n\013Choosestate\030\002 \001(\005\"v\n\020AckDisbandResu"
    "lt\022\016\n\006Result\030\001 \002(\005\022\013\n\003uid\030\002 \001(\005\022\016\n\006avata"
    "r\030\003 \001(\t\022\020\n\010clubname\030\004 \001(\t\022\020\n\010clubcode\030\005 "
    "\001(\005\022\021\n\tclosetype\030\006 \001(\005\"4\n\022AckUserOnlineS"
    "tate\022\017\n\007chairid\030\001 \002(\005\022\r\n\005state\030\002 \001(\005\"6\n\024"
    "AckUserOvertimeState\022\017\n\007chairid\030\001 \002(\005\022\r\n"
    "\005state\030\002 \001(\005\".\n\nAckMessage\022\017\n\007message\030\001 "
    "\001(\t\022\017\n\007chairid\030\002 \001(\005\"\035\n\014OperateWaite\022\r\n\005"
    "state\030\001 \001(\005\"\207\002\n\tReordInfo\022\022\n\nbanker_num\030"
    "\001 \001(\005\022\016\n\006hu_num\030\002 \001(\005\022\025\n\rpiaolaizi_num\030\003"
    " \001(\005\022\023\n\013outtime_num\030\004 \001(\005\022\022\n\ntotalscore\030"
    "\005 \001(\005\022\021\n\tWinCounts\030\006 \001(\005\022\021\n\tGangTimes\030\007 "
    "\001(\005\022\025\n\rDianGangTimes\030\010 \001(\005\022\013\n\003Ex1\030\t \001(\005\022"
    "\013\n\003Ex2\030\n \001(\005\022\021\n\tdissState\030\013 \001(\005\022\022\n\nMoBao"
    "Times\030\014 \001(\005\022\013\n\003Ex4\030\r \001(\005\022\013\n\003Ex5\030\016 \001(\005\"\250\001"
    "\n\rGameEndRecord\022-\n\016UserRecoreInfo\030\001 \003(\0132"
    "\025.proto.game.ReordInfo\022\027\n\017MostDianPaoUse"
    "r\030\002 \003(\005\022\030\n\020MostWinScoreUser\030\003 \003(\005\022\020\n\010Dat"
    "aTime\030\004 \001(\005\022\020\n\010autodiss\030\005 \001(\005\022\021\n\tStartTi"
    "me\030\006 \001(\005\"\033\n\nRoundScore\022\r\n\005Score\030\001 \003(\005\"L\n"
    "\017TotalRoundScore\022%\n\005round\030\001 \003(\0132\026.proto."
    "game.RoundScore\022\022\n\nroundcount\030\002 \001(\005\"\034\n\rR"
    "eqChangeMode\022\013\n\003num\030\001 \002(\005\"-\n\rAckChangeMo"
    "de\022\017\n\007chairid\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\"\036\n\016Real"
    "TimeSpeech\022\014\n\004code\030\001 \001(\005\"!\n\021RealTimeSpee"
    "chAck\022\014\n\004code\030\001 \003(\005*X\n\006ACTION\022\021\n\rACTION_"
    "SIDOWN\020\001\022\020\n\014ACTION_READY\020\002\022\020\n\014ACTION_LEA"
    "VE\020\003\022\027\n\023ACTION_CHANGE_TABLE\020\004*g\n\006STATUS\022"
    "\r\n\tGAME_FREE\020\000\022\023\n\017GAME_CHANGECARD\020\001\022\030\n\024G"
    "AME_CHOOSE_LACKTYPE\020\002\022\020\n\014GAME_PLAYING\020\003\022"
    "\r\n\tGAME_PIAO\020\004*Y\n\017DISSBAND_ACTION\022\020\n\014DIS"
    "BAND_WAIT\020\000\022\017\n\013DISBAND_YES\020\001\022\016\n\nDISBAND_"
    "NO\020\002\022\023\n\017DISBAND_APPLYER\020\003*O\n\rOverTimeSta"
    "te\022\020\n\014OVER_TIME_NO\020\000\022\025\n\021OVER_TIME_OUTCAR"
    "D\020\001\022\025\n\021OVER_TIME_OPERATE\020\002", 8186);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gameproto.proto", &protobuf_RegisterTypes);
  SpecialGangCard::default_instance_ = new SpecialGangCard();
  SpecialGang::default_instance_ = new SpecialGang();
  FixedCard::default_instance_ = new FixedCard();
  FixedCardChange::default_instance_ = new FixedCardChange();
  Cards::default_instance_ = new Cards();
  CardArr::default_instance_ = new CardArr();
  HandCards::default_instance_ = new HandCards();
  tagPlayers::default_instance_ = new tagPlayers();
  ReqAction::default_instance_ = new ReqAction();
  ReqOutCard::default_instance_ = new ReqOutCard();
  ReqOperateResult::default_instance_ = new ReqOperateResult();
  ReqIsAuto::default_instance_ = new ReqIsAuto();
  ReqUpdateUserInfo::default_instance_ = new ReqUpdateUserInfo();
  ReqRoomInfo::default_instance_ = new ReqRoomInfo();
  ReqChooseDisband::default_instance_ = new ReqChooseDisband();
  tagHu::default_instance_ = new tagHu();
  tagUserHuInfo::default_instance_ = new tagUserHuInfo();
  tagGangInfo::default_instance_ = new tagGangInfo();
  tagGroupCard::default_instance_ = new tagGroupCard();
  tagReadyInfo::default_instance_ = new tagReadyInfo();
  ExMsg::default_instance_ = new ExMsg();
  AckGameScene::default_instance_ = new AckGameScene();
  TestSvrConf::default_instance_ = new TestSvrConf();
  AckUserReady::default_instance_ = new AckUserReady();
  AckGameStart::default_instance_ = new AckGameStart();
  AckFirstHandCard::default_instance_ = new AckFirstHandCard();
  VideoFirstHandCard::default_instance_ = new VideoFirstHandCard();
  tagHuInfo::default_instance_ = new tagHuInfo();
  tagListenInfo::default_instance_ = new tagListenInfo();
  tagPreGangs::default_instance_ = new tagPreGangs();
  AckUserGetCard::default_instance_ = new AckUserGetCard();
  tagShowOutCard::default_instance_ = new tagShowOutCard();
  AckUserOutCard::default_instance_ = new AckUserOutCard();
  AckUserOutCardErr::default_instance_ = new AckUserOutCardErr();
  DaAnTing::default_instance_ = new DaAnTing();
  AckOpNotify::default_instance_ = new AckOpNotify();
  AckBcOpResult::default_instance_ = new AckBcOpResult();
  AckListenNotify::default_instance_ = new AckListenNotify();
  AckUserHu::default_instance_ = new AckUserHu();
  tagEndGang::default_instance_ = new tagEndGang();
  tagEndGangInfo::default_instance_ = new tagEndGangInfo();
  AddFanInfo::default_instance_ = new AddFanInfo();
  FanInfo::default_instance_ = new FanInfo();
  AckGameEnd::default_instance_ = new AckGameEnd();
  AckIsAuto::default_instance_ = new AckIsAuto();
  AckUpdateUserInfo::default_instance_ = new AckUpdateUserInfo();
  AckGameStartFail::default_instance_ = new AckGameStartFail();
  AckUpdateTimer::default_instance_ = new AckUpdateTimer();
  AckDisbandChooseFaild::default_instance_ = new AckDisbandChooseFaild();
  AckDisbandApply::default_instance_ = new AckDisbandApply();
  AckDisbandChooseBc::default_instance_ = new AckDisbandChooseBc();
  AckDisbandResult::default_instance_ = new AckDisbandResult();
  AckUserOnlineState::default_instance_ = new AckUserOnlineState();
  AckUserOvertimeState::default_instance_ = new AckUserOvertimeState();
  AckMessage::default_instance_ = new AckMessage();
  OperateWaite::default_instance_ = new OperateWaite();
  ReordInfo::default_instance_ = new ReordInfo();
  GameEndRecord::default_instance_ = new GameEndRecord();
  RoundScore::default_instance_ = new RoundScore();
  TotalRoundScore::default_instance_ = new TotalRoundScore();
  ReqChangeMode::default_instance_ = new ReqChangeMode();
  AckChangeMode::default_instance_ = new AckChangeMode();
  RealTimeSpeech::default_instance_ = new RealTimeSpeech();
  RealTimeSpeechAck::default_instance_ = new RealTimeSpeechAck();
  SpecialGangCard::default_instance_->InitAsDefaultInstance();
  SpecialGang::default_instance_->InitAsDefaultInstance();
  FixedCard::default_instance_->InitAsDefaultInstance();
  FixedCardChange::default_instance_->InitAsDefaultInstance();
  Cards::default_instance_->InitAsDefaultInstance();
  CardArr::default_instance_->InitAsDefaultInstance();
  HandCards::default_instance_->InitAsDefaultInstance();
  tagPlayers::default_instance_->InitAsDefaultInstance();
  ReqAction::default_instance_->InitAsDefaultInstance();
  ReqOutCard::default_instance_->InitAsDefaultInstance();
  ReqOperateResult::default_instance_->InitAsDefaultInstance();
  ReqIsAuto::default_instance_->InitAsDefaultInstance();
  ReqUpdateUserInfo::default_instance_->InitAsDefaultInstance();
  ReqRoomInfo::default_instance_->InitAsDefaultInstance();
  ReqChooseDisband::default_instance_->InitAsDefaultInstance();
  tagHu::default_instance_->InitAsDefaultInstance();
  tagUserHuInfo::default_instance_->InitAsDefaultInstance();
  tagGangInfo::default_instance_->InitAsDefaultInstance();
  tagGroupCard::default_instance_->InitAsDefaultInstance();
  tagReadyInfo::default_instance_->InitAsDefaultInstance();
  ExMsg::default_instance_->InitAsDefaultInstance();
  AckGameScene::default_instance_->InitAsDefaultInstance();
  TestSvrConf::default_instance_->InitAsDefaultInstance();
  AckUserReady::default_instance_->InitAsDefaultInstance();
  AckGameStart::default_instance_->InitAsDefaultInstance();
  AckFirstHandCard::default_instance_->InitAsDefaultInstance();
  VideoFirstHandCard::default_instance_->InitAsDefaultInstance();
  tagHuInfo::default_instance_->InitAsDefaultInstance();
  tagListenInfo::default_instance_->InitAsDefaultInstance();
  tagPreGangs::default_instance_->InitAsDefaultInstance();
  AckUserGetCard::default_instance_->InitAsDefaultInstance();
  tagShowOutCard::default_instance_->InitAsDefaultInstance();
  AckUserOutCard::default_instance_->InitAsDefaultInstance();
  AckUserOutCardErr::default_instance_->InitAsDefaultInstance();
  DaAnTing::default_instance_->InitAsDefaultInstance();
  AckOpNotify::default_instance_->InitAsDefaultInstance();
  AckBcOpResult::default_instance_->InitAsDefaultInstance();
  AckListenNotify::default_instance_->InitAsDefaultInstance();
  AckUserHu::default_instance_->InitAsDefaultInstance();
  tagEndGang::default_instance_->InitAsDefaultInstance();
  tagEndGangInfo::default_instance_->InitAsDefaultInstance();
  AddFanInfo::default_instance_->InitAsDefaultInstance();
  FanInfo::default_instance_->InitAsDefaultInstance();
  AckGameEnd::default_instance_->InitAsDefaultInstance();
  AckIsAuto::default_instance_->InitAsDefaultInstance();
  AckUpdateUserInfo::default_instance_->InitAsDefaultInstance();
  AckGameStartFail::default_instance_->InitAsDefaultInstance();
  AckUpdateTimer::default_instance_->InitAsDefaultInstance();
  AckDisbandChooseFaild::default_instance_->InitAsDefaultInstance();
  AckDisbandApply::default_instance_->InitAsDefaultInstance();
  AckDisbandChooseBc::default_instance_->InitAsDefaultInstance();
  AckDisbandResult::default_instance_->InitAsDefaultInstance();
  AckUserOnlineState::default_instance_->InitAsDefaultInstance();
  AckUserOvertimeState::default_instance_->InitAsDefaultInstance();
  AckMessage::default_instance_->InitAsDefaultInstance();
  OperateWaite::default_instance_->InitAsDefaultInstance();
  ReordInfo::default_instance_->InitAsDefaultInstance();
  GameEndRecord::default_instance_->InitAsDefaultInstance();
  RoundScore::default_instance_->InitAsDefaultInstance();
  TotalRoundScore::default_instance_->InitAsDefaultInstance();
  ReqChangeMode::default_instance_->InitAsDefaultInstance();
  AckChangeMode::default_instance_->InitAsDefaultInstance();
  RealTimeSpeech::default_instance_->InitAsDefaultInstance();
  RealTimeSpeechAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gameproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gameproto_2eproto {
  StaticDescriptorInitializer_gameproto_2eproto() {
    protobuf_AddDesc_gameproto_2eproto();
  }
} static_descriptor_initializer_gameproto_2eproto_;
const ::google::protobuf::EnumDescriptor* ACTION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACTION_descriptor_;
}
bool ACTION_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STATUS_descriptor_;
}
bool STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DISSBAND_ACTION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DISSBAND_ACTION_descriptor_;
}
bool DISSBAND_ACTION_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OverTimeState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OverTimeState_descriptor_;
}
bool OverTimeState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialGangCard::kCardFieldNumber;
const int SpecialGangCard::kNumFieldNumber;
#endif  // !_MSC_VER

SpecialGangCard::SpecialGangCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.SpecialGangCard)
}

void SpecialGangCard::InitAsDefaultInstance() {
}

SpecialGangCard::SpecialGangCard(const SpecialGangCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.SpecialGangCard)
}

void SpecialGangCard::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialGangCard::~SpecialGangCard() {
  // @@protoc_insertion_point(destructor:proto.game.SpecialGangCard)
  SharedDtor();
}

void SpecialGangCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpecialGangCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecialGangCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecialGangCard_descriptor_;
}

const SpecialGangCard& SpecialGangCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

SpecialGangCard* SpecialGangCard::default_instance_ = NULL;

SpecialGangCard* SpecialGangCard::New() const {
  return new SpecialGangCard;
}

void SpecialGangCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpecialGangCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(card_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecialGangCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.SpecialGangCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 card = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.SpecialGangCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.SpecialGangCard)
  return false;
#undef DO_
}

void SpecialGangCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.SpecialGangCard)
  // optional int32 card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.SpecialGangCard)
}

::google::protobuf::uint8* SpecialGangCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.SpecialGangCard)
  // optional int32 card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.SpecialGangCard)
  return target;
}

int SpecialGangCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialGangCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecialGangCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecialGangCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecialGangCard::MergeFrom(const SpecialGangCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecialGangCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecialGangCard::CopyFrom(const SpecialGangCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialGangCard::IsInitialized() const {

  return true;
}

void SpecialGangCard::Swap(SpecialGangCard* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecialGangCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecialGangCard_descriptor_;
  metadata.reflection = SpecialGangCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialGang::kIndexFieldNumber;
const int SpecialGang::kCardsFieldNumber;
#endif  // !_MSC_VER

SpecialGang::SpecialGang()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.SpecialGang)
}

void SpecialGang::InitAsDefaultInstance() {
}

SpecialGang::SpecialGang(const SpecialGang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.SpecialGang)
}

void SpecialGang::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialGang::~SpecialGang() {
  // @@protoc_insertion_point(destructor:proto.game.SpecialGang)
  SharedDtor();
}

void SpecialGang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpecialGang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecialGang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecialGang_descriptor_;
}

const SpecialGang& SpecialGang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

SpecialGang* SpecialGang::default_instance_ = NULL;

SpecialGang* SpecialGang::New() const {
  return new SpecialGang;
}

void SpecialGang::Clear() {
  index_ = 0;
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecialGang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.SpecialGang)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cards;
        break;
      }

      // repeated .proto.game.SpecialGangCard cards = 2;
      case 2: {
        if (tag == 18) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.SpecialGang)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.SpecialGang)
  return false;
#undef DO_
}

void SpecialGang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.SpecialGang)
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // repeated .proto.game.SpecialGangCard cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.SpecialGang)
}

::google::protobuf::uint8* SpecialGang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.SpecialGang)
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // repeated .proto.game.SpecialGangCard cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.SpecialGang)
  return target;
}

int SpecialGang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  // repeated .proto.game.SpecialGangCard cards = 2;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialGang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecialGang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecialGang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecialGang::MergeFrom(const SpecialGang& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecialGang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecialGang::CopyFrom(const SpecialGang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialGang::IsInitialized() const {

  return true;
}

void SpecialGang::Swap(SpecialGang* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecialGang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecialGang_descriptor_;
  metadata.reflection = SpecialGang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FixedCard::kCardDataFieldNumber;
const int FixedCard::kStateFieldNumber;
const int FixedCard::kChairIDFieldNumber;
const int FixedCard::kOpCardsFieldNumber;
const int FixedCard::kLaiziNumFieldNumber;
const int FixedCard::kSpecialgangFieldNumber;
#endif  // !_MSC_VER

FixedCard::FixedCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.FixedCard)
}

void FixedCard::InitAsDefaultInstance() {
  specialgang_ = const_cast< ::proto::game::SpecialGang*>(&::proto::game::SpecialGang::default_instance());
}

FixedCard::FixedCard(const FixedCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.FixedCard)
}

void FixedCard::SharedCtor() {
  _cached_size_ = 0;
  carddata_ = 0;
  state_ = 0;
  chairid_ = 0;
  laizinum_ = 0;
  specialgang_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FixedCard::~FixedCard() {
  // @@protoc_insertion_point(destructor:proto.game.FixedCard)
  SharedDtor();
}

void FixedCard::SharedDtor() {
  if (this != default_instance_) {
    delete specialgang_;
  }
}

void FixedCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixedCard_descriptor_;
}

const FixedCard& FixedCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

FixedCard* FixedCard::default_instance_ = NULL;

FixedCard* FixedCard::New() const {
  return new FixedCard;
}

void FixedCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FixedCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(carddata_, state_);
    ZR_(chairid_, laizinum_);
    if (has_specialgang()) {
      if (specialgang_ != NULL) specialgang_->::proto::game::SpecialGang::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  opcards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FixedCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.FixedCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CardData = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carddata_)));
          set_has_carddata();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_chairID;
        break;
      }

      // optional int32 chairID = 3;
      case 3: {
        if (tag == 24) {
         parse_chairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_OpCards;
        break;
      }

      // repeated int32 OpCards = 4;
      case 4: {
        if (tag == 32) {
         parse_OpCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_opcards())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_opcards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_OpCards;
        if (input->ExpectTag(40)) goto parse_LaiziNum;
        break;
      }

      // optional int32 LaiziNum = 5;
      case 5: {
        if (tag == 40) {
         parse_LaiziNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laizinum_)));
          set_has_laizinum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_specialgang;
        break;
      }

      // optional .proto.game.SpecialGang specialgang = 6;
      case 6: {
        if (tag == 50) {
         parse_specialgang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specialgang()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.FixedCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.FixedCard)
  return false;
#undef DO_
}

void FixedCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.FixedCard)
  // required int32 CardData = 1;
  if (has_carddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->carddata(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int32 chairID = 3;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chairid(), output);
  }

  // repeated int32 OpCards = 4;
  for (int i = 0; i < this->opcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->opcards(i), output);
  }

  // optional int32 LaiziNum = 5;
  if (has_laizinum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->laizinum(), output);
  }

  // optional .proto.game.SpecialGang specialgang = 6;
  if (has_specialgang()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->specialgang(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.FixedCard)
}

::google::protobuf::uint8* FixedCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.FixedCard)
  // required int32 CardData = 1;
  if (has_carddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->carddata(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int32 chairID = 3;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chairid(), target);
  }

  // repeated int32 OpCards = 4;
  for (int i = 0; i < this->opcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->opcards(i), target);
  }

  // optional int32 LaiziNum = 5;
  if (has_laizinum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->laizinum(), target);
  }

  // optional .proto.game.SpecialGang specialgang = 6;
  if (has_specialgang()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->specialgang(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.FixedCard)
  return target;
}

int FixedCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CardData = 1;
    if (has_carddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carddata());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 chairID = 3;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 LaiziNum = 5;
    if (has_laizinum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laizinum());
    }

    // optional .proto.game.SpecialGang specialgang = 6;
    if (has_specialgang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->specialgang());
    }

  }
  // repeated int32 OpCards = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->opcards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->opcards(i));
    }
    total_size += 1 * this->opcards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FixedCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FixedCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FixedCard::MergeFrom(const FixedCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  opcards_.MergeFrom(from.opcards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_carddata()) {
      set_carddata(from.carddata());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_laizinum()) {
      set_laizinum(from.laizinum());
    }
    if (from.has_specialgang()) {
      mutable_specialgang()->::proto::game::SpecialGang::MergeFrom(from.specialgang());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FixedCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedCard::CopyFrom(const FixedCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FixedCard::Swap(FixedCard* other) {
  if (other != this) {
    std::swap(carddata_, other->carddata_);
    std::swap(state_, other->state_);
    std::swap(chairid_, other->chairid_);
    opcards_.Swap(&other->opcards_);
    std::swap(laizinum_, other->laizinum_);
    std::swap(specialgang_, other->specialgang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FixedCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixedCard_descriptor_;
  metadata.reflection = FixedCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FixedCardChange::kEnableFieldNumber;
const int FixedCardChange::kChairidFieldNumber;
const int FixedCardChange::kFixedindexFieldNumber;
const int FixedCardChange::kFixedcardFieldNumber;
#endif  // !_MSC_VER

FixedCardChange::FixedCardChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.FixedCardChange)
}

void FixedCardChange::InitAsDefaultInstance() {
  fixedcard_ = const_cast< ::proto::game::FixedCard*>(&::proto::game::FixedCard::default_instance());
}

FixedCardChange::FixedCardChange(const FixedCardChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.FixedCardChange)
}

void FixedCardChange::SharedCtor() {
  _cached_size_ = 0;
  enable_ = 0;
  chairid_ = 0;
  fixedindex_ = 0;
  fixedcard_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FixedCardChange::~FixedCardChange() {
  // @@protoc_insertion_point(destructor:proto.game.FixedCardChange)
  SharedDtor();
}

void FixedCardChange::SharedDtor() {
  if (this != default_instance_) {
    delete fixedcard_;
  }
}

void FixedCardChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedCardChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixedCardChange_descriptor_;
}

const FixedCardChange& FixedCardChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

FixedCardChange* FixedCardChange::default_instance_ = NULL;

FixedCardChange* FixedCardChange::New() const {
  return new FixedCardChange;
}

void FixedCardChange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FixedCardChange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(enable_, chairid_);
    fixedindex_ = 0;
    if (has_fixedcard()) {
      if (fixedcard_ != NULL) fixedcard_->::proto::game::FixedCard::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FixedCardChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.FixedCardChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 enable = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_chairid;
        break;
      }

      // optional int32 chairid = 2;
      case 2: {
        if (tag == 16) {
         parse_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fixedindex;
        break;
      }

      // optional int32 fixedindex = 3;
      case 3: {
        if (tag == 24) {
         parse_fixedindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fixedindex_)));
          set_has_fixedindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fixedcard;
        break;
      }

      // optional .proto.game.FixedCard fixedcard = 4;
      case 4: {
        if (tag == 34) {
         parse_fixedcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixedcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.FixedCardChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.FixedCardChange)
  return false;
#undef DO_
}

void FixedCardChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.FixedCardChange)
  // optional int32 enable = 1;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->enable(), output);
  }

  // optional int32 chairid = 2;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairid(), output);
  }

  // optional int32 fixedindex = 3;
  if (has_fixedindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fixedindex(), output);
  }

  // optional .proto.game.FixedCard fixedcard = 4;
  if (has_fixedcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fixedcard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.FixedCardChange)
}

::google::protobuf::uint8* FixedCardChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.FixedCardChange)
  // optional int32 enable = 1;
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->enable(), target);
  }

  // optional int32 chairid = 2;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chairid(), target);
  }

  // optional int32 fixedindex = 3;
  if (has_fixedindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fixedindex(), target);
  }

  // optional .proto.game.FixedCard fixedcard = 4;
  if (has_fixedcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fixedcard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.FixedCardChange)
  return target;
}

int FixedCardChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 enable = 1;
    if (has_enable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enable());
    }

    // optional int32 chairid = 2;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 fixedindex = 3;
    if (has_fixedindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fixedindex());
    }

    // optional .proto.game.FixedCard fixedcard = 4;
    if (has_fixedcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fixedcard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedCardChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FixedCardChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FixedCardChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FixedCardChange::MergeFrom(const FixedCardChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable()) {
      set_enable(from.enable());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_fixedindex()) {
      set_fixedindex(from.fixedindex());
    }
    if (from.has_fixedcard()) {
      mutable_fixedcard()->::proto::game::FixedCard::MergeFrom(from.fixedcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FixedCardChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedCardChange::CopyFrom(const FixedCardChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedCardChange::IsInitialized() const {

  if (has_fixedcard()) {
    if (!this->fixedcard().IsInitialized()) return false;
  }
  return true;
}

void FixedCardChange::Swap(FixedCardChange* other) {
  if (other != this) {
    std::swap(enable_, other->enable_);
    std::swap(chairid_, other->chairid_);
    std::swap(fixedindex_, other->fixedindex_);
    std::swap(fixedcard_, other->fixedcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FixedCardChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixedCardChange_descriptor_;
  metadata.reflection = FixedCardChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cards::kCardFieldNumber;
#endif  // !_MSC_VER

Cards::Cards()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.Cards)
}

void Cards::InitAsDefaultInstance() {
}

Cards::Cards(const Cards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.Cards)
}

void Cards::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cards::~Cards() {
  // @@protoc_insertion_point(destructor:proto.game.Cards)
  SharedDtor();
}

void Cards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cards_descriptor_;
}

const Cards& Cards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

Cards* Cards::default_instance_ = NULL;

Cards* Cards::New() const {
  return new Cards;
}

void Cards::Clear() {
  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.Cards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 card = 1;
      case 1: {
        if (tag == 8) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_card())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_card;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.Cards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.Cards)
  return false;
#undef DO_
}

void Cards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.Cards)
  // repeated int32 card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.Cards)
}

::google::protobuf::uint8* Cards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.Cards)
  // repeated int32 card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.Cards)
  return target;
}

int Cards::ByteSize() const {
  int total_size = 0;

  // repeated int32 card = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cards::MergeFrom(const Cards& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cards::CopyFrom(const Cards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cards::IsInitialized() const {

  return true;
}

void Cards::Swap(Cards* other) {
  if (other != this) {
    card_.Swap(&other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cards_descriptor_;
  metadata.reflection = Cards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CardArr::kOpTypeFieldNumber;
const int CardArr::kCardFieldNumber;
#endif  // !_MSC_VER

CardArr::CardArr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.CardArr)
}

void CardArr::InitAsDefaultInstance() {
}

CardArr::CardArr(const CardArr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.CardArr)
}

void CardArr::SharedCtor() {
  _cached_size_ = 0;
  optype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardArr::~CardArr() {
  // @@protoc_insertion_point(destructor:proto.game.CardArr)
  SharedDtor();
}

void CardArr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CardArr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardArr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardArr_descriptor_;
}

const CardArr& CardArr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

CardArr* CardArr::default_instance_ = NULL;

CardArr* CardArr::New() const {
  return new CardArr;
}

void CardArr::Clear() {
  optype_ = 0;
  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardArr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.CardArr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 OpType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_card;
        break;
      }

      // repeated int32 card = 2;
      case 2: {
        if (tag == 16) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_card())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_card;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.CardArr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.CardArr)
  return false;
#undef DO_
}

void CardArr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.CardArr)
  // optional int32 OpType = 1;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->optype(), output);
  }

  // repeated int32 card = 2;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.CardArr)
}

::google::protobuf::uint8* CardArr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.CardArr)
  // optional int32 OpType = 1;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->optype(), target);
  }

  // repeated int32 card = 2;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.CardArr)
  return target;
}

int CardArr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 OpType = 1;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

  }
  // repeated int32 card = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardArr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardArr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardArr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardArr::MergeFrom(const CardArr& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardArr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardArr::CopyFrom(const CardArr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardArr::IsInitialized() const {

  return true;
}

void CardArr::Swap(CardArr* other) {
  if (other != this) {
    std::swap(optype_, other->optype_);
    card_.Swap(&other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardArr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardArr_descriptor_;
  metadata.reflection = CardArr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandCards::kChangeableCardsLenFieldNumber;
const int HandCards::kChangeableCardsFieldNumber;
const int HandCards::kFixedCardsLenFieldNumber;
const int HandCards::kStFixedCardsFieldNumber;
const int HandCards::kStFenZhangCardFieldNumber;
#endif  // !_MSC_VER

HandCards::HandCards()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.HandCards)
}

void HandCards::InitAsDefaultInstance() {
}

HandCards::HandCards(const HandCards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.HandCards)
}

void HandCards::SharedCtor() {
  _cached_size_ = 0;
  changeablecardslen_ = 0;
  fixedcardslen_ = 0;
  stfenzhangcard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandCards::~HandCards() {
  // @@protoc_insertion_point(destructor:proto.game.HandCards)
  SharedDtor();
}

void HandCards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandCards_descriptor_;
}

const HandCards& HandCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

HandCards* HandCards::default_instance_ = NULL;

HandCards* HandCards::New() const {
  return new HandCards;
}

void HandCards::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HandCards*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 21) {
    ZR_(changeablecardslen_, fixedcardslen_);
    stfenzhangcard_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  changeablecards_.Clear();
  stfixedcards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.HandCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChangeableCardsLen = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changeablecardslen_)));
          set_has_changeablecardslen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ChangeableCards;
        break;
      }

      // repeated int32 ChangeableCards = 2;
      case 2: {
        if (tag == 16) {
         parse_ChangeableCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_changeablecards())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_changeablecards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ChangeableCards;
        if (input->ExpectTag(24)) goto parse_FixedCardsLen;
        break;
      }

      // optional int32 FixedCardsLen = 3;
      case 3: {
        if (tag == 24) {
         parse_FixedCardsLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fixedcardslen_)));
          set_has_fixedcardslen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stFixedCards;
        break;
      }

      // repeated .proto.game.FixedCard stFixedCards = 4;
      case 4: {
        if (tag == 34) {
         parse_stFixedCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stfixedcards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stFixedCards;
        if (input->ExpectTag(40)) goto parse_stFenZhangCard;
        break;
      }

      // optional int32 stFenZhangCard = 5;
      case 5: {
        if (tag == 40) {
         parse_stFenZhangCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stfenzhangcard_)));
          set_has_stfenzhangcard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.HandCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.HandCards)
  return false;
#undef DO_
}

void HandCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.HandCards)
  // required int32 ChangeableCardsLen = 1;
  if (has_changeablecardslen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->changeablecardslen(), output);
  }

  // repeated int32 ChangeableCards = 2;
  for (int i = 0; i < this->changeablecards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->changeablecards(i), output);
  }

  // optional int32 FixedCardsLen = 3;
  if (has_fixedcardslen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fixedcardslen(), output);
  }

  // repeated .proto.game.FixedCard stFixedCards = 4;
  for (int i = 0; i < this->stfixedcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stfixedcards(i), output);
  }

  // optional int32 stFenZhangCard = 5;
  if (has_stfenzhangcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stfenzhangcard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.HandCards)
}

::google::protobuf::uint8* HandCards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.HandCards)
  // required int32 ChangeableCardsLen = 1;
  if (has_changeablecardslen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->changeablecardslen(), target);
  }

  // repeated int32 ChangeableCards = 2;
  for (int i = 0; i < this->changeablecards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->changeablecards(i), target);
  }

  // optional int32 FixedCardsLen = 3;
  if (has_fixedcardslen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fixedcardslen(), target);
  }

  // repeated .proto.game.FixedCard stFixedCards = 4;
  for (int i = 0; i < this->stfixedcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stfixedcards(i), target);
  }

  // optional int32 stFenZhangCard = 5;
  if (has_stfenzhangcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stfenzhangcard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.HandCards)
  return target;
}

int HandCards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChangeableCardsLen = 1;
    if (has_changeablecardslen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changeablecardslen());
    }

    // optional int32 FixedCardsLen = 3;
    if (has_fixedcardslen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fixedcardslen());
    }

    // optional int32 stFenZhangCard = 5;
    if (has_stfenzhangcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stfenzhangcard());
    }

  }
  // repeated int32 ChangeableCards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->changeablecards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->changeablecards(i));
    }
    total_size += 1 * this->changeablecards_size() + data_size;
  }

  // repeated .proto.game.FixedCard stFixedCards = 4;
  total_size += 1 * this->stfixedcards_size();
  for (int i = 0; i < this->stfixedcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stfixedcards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandCards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandCards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandCards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandCards::MergeFrom(const HandCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  changeablecards_.MergeFrom(from.changeablecards_);
  stfixedcards_.MergeFrom(from.stfixedcards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_changeablecardslen()) {
      set_changeablecardslen(from.changeablecardslen());
    }
    if (from.has_fixedcardslen()) {
      set_fixedcardslen(from.fixedcardslen());
    }
    if (from.has_stfenzhangcard()) {
      set_stfenzhangcard(from.stfenzhangcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandCards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandCards::CopyFrom(const HandCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandCards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->stfixedcards())) return false;
  return true;
}

void HandCards::Swap(HandCards* other) {
  if (other != this) {
    std::swap(changeablecardslen_, other->changeablecardslen_);
    changeablecards_.Swap(&other->changeablecards_);
    std::swap(fixedcardslen_, other->fixedcardslen_);
    stfixedcards_.Swap(&other->stfixedcards_);
    std::swap(stfenzhangcard_, other->stfenzhangcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandCards_descriptor_;
  metadata.reflection = HandCards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagPlayers::kUidFieldNumber;
const int tagPlayers::kSeatidFieldNumber;
const int tagPlayers::kReadyFieldNumber;
const int tagPlayers::kMoneyFieldNumber;
const int tagPlayers::kNameFieldNumber;
const int tagPlayers::kSexFieldNumber;
const int tagPlayers::kAvatarFieldNumber;
#endif  // !_MSC_VER

tagPlayers::tagPlayers()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.tagPlayers)
}

void tagPlayers::InitAsDefaultInstance() {
}

tagPlayers::tagPlayers(const tagPlayers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.tagPlayers)
}

void tagPlayers::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0;
  seatid_ = 0;
  ready_ = 0;
  money_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagPlayers::~tagPlayers() {
  // @@protoc_insertion_point(destructor:proto.game.tagPlayers)
  SharedDtor();
}

void tagPlayers::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (this != default_instance_) {
  }
}

void tagPlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPlayers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagPlayers_descriptor_;
}

const tagPlayers& tagPlayers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagPlayers* tagPlayers::default_instance_ = NULL;

tagPlayers* tagPlayers::New() const {
  return new tagPlayers;
}

void tagPlayers::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<tagPlayers*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(uid_, money_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    sex_ = 0;
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagPlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.tagPlayers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 2;
      case 2: {
        if (tag == 16) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ready;
        break;
      }

      // optional int32 ready = 3;
      case 3: {
        if (tag == 24) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // optional int32 money = 4;
      case 4: {
        if (tag == 32) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional int32 sex = 6;
      case 6: {
        if (tag == 48) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_avatar;
        break;
      }

      // optional string avatar = 7;
      case 7: {
        if (tag == 58) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.tagPlayers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.tagPlayers)
  return false;
#undef DO_
}

void tagPlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.tagPlayers)
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  // optional int32 ready = 3;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ready(), output);
  }

  // optional int32 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->money(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }

  // optional string avatar = 7;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->avatar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.tagPlayers)
}

::google::protobuf::uint8* tagPlayers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.tagPlayers)
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  // optional int32 ready = 3;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ready(), target);
  }

  // optional int32 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->money(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }

  // optional string avatar = 7;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->avatar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.tagPlayers)
  return target;
}

int tagPlayers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // optional int32 ready = 3;
    if (has_ready()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ready());
    }

    // optional int32 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional string avatar = 7;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPlayers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagPlayers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagPlayers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagPlayers::MergeFrom(const tagPlayers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagPlayers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPlayers::CopyFrom(const tagPlayers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPlayers::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagPlayers::Swap(tagPlayers* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seatid_, other->seatid_);
    std::swap(ready_, other->ready_);
    std::swap(money_, other->money_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(avatar_, other->avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagPlayers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagPlayers_descriptor_;
  metadata.reflection = tagPlayers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqAction::kActionFieldNumber;
#endif  // !_MSC_VER

ReqAction::ReqAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.ReqAction)
}

void ReqAction::InitAsDefaultInstance() {
}

ReqAction::ReqAction(const ReqAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.ReqAction)
}

void ReqAction::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAction::~ReqAction() {
  // @@protoc_insertion_point(destructor:proto.game.ReqAction)
  SharedDtor();
}

void ReqAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAction_descriptor_;
}

const ReqAction& ReqAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqAction* ReqAction::default_instance_ = NULL;

ReqAction* ReqAction::New() const {
  return new ReqAction;
}

void ReqAction::Clear() {
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.ReqAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 action = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.ReqAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.ReqAction)
  return false;
#undef DO_
}

void ReqAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.ReqAction)
  // required int32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.ReqAction)
}

::google::protobuf::uint8* ReqAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.ReqAction)
  // required int32 action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.ReqAction)
  return target;
}

int ReqAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAction::MergeFrom(const ReqAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAction::CopyFrom(const ReqAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqAction::Swap(ReqAction* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAction_descriptor_;
  metadata.reflection = ReqAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOutCard::kCardFieldNumber;
const int ReqOutCard::kShowCardFieldNumber;
const int ReqOutCard::kAnCardsFieldNumber;
const int ReqOutCard::kHongZhongLaiZiFlagFieldNumber;
#endif  // !_MSC_VER

ReqOutCard::ReqOutCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.ReqOutCard)
}

void ReqOutCard::InitAsDefaultInstance() {
}

ReqOutCard::ReqOutCard(const ReqOutCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.ReqOutCard)
}

void ReqOutCard::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  showcard_ = 0;
  ancards_ = 0;
  hongzhonglaiziflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOutCard::~ReqOutCard() {
  // @@protoc_insertion_point(destructor:proto.game.ReqOutCard)
  SharedDtor();
}

void ReqOutCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOutCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOutCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOutCard_descriptor_;
}

const ReqOutCard& ReqOutCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqOutCard* ReqOutCard::default_instance_ = NULL;

ReqOutCard* ReqOutCard::New() const {
  return new ReqOutCard;
}

void ReqOutCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqOutCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(card_, hongzhonglaiziflag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOutCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.ReqOutCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Card = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ShowCard;
        break;
      }

      // optional int32 ShowCard = 2;
      case 2: {
        if (tag == 16) {
         parse_ShowCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showcard_)));
          set_has_showcard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_anCards;
        break;
      }

      // optional int32 anCards = 3;
      case 3: {
        if (tag == 24) {
         parse_anCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ancards_)));
          set_has_ancards();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_HongZhongLaiZiFlag;
        break;
      }

      // optional bool HongZhongLaiZiFlag = 4;
      case 4: {
        if (tag == 32) {
         parse_HongZhongLaiZiFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hongzhonglaiziflag_)));
          set_has_hongzhonglaiziflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.ReqOutCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.ReqOutCard)
  return false;
#undef DO_
}

void ReqOutCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.ReqOutCard)
  // required int32 Card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  // optional int32 ShowCard = 2;
  if (has_showcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->showcard(), output);
  }

  // optional int32 anCards = 3;
  if (has_ancards()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ancards(), output);
  }

  // optional bool HongZhongLaiZiFlag = 4;
  if (has_hongzhonglaiziflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hongzhonglaiziflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.ReqOutCard)
}

::google::protobuf::uint8* ReqOutCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.ReqOutCard)
  // required int32 Card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  // optional int32 ShowCard = 2;
  if (has_showcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->showcard(), target);
  }

  // optional int32 anCards = 3;
  if (has_ancards()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ancards(), target);
  }

  // optional bool HongZhongLaiZiFlag = 4;
  if (has_hongzhonglaiziflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hongzhonglaiziflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.ReqOutCard)
  return target;
}

int ReqOutCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 ShowCard = 2;
    if (has_showcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showcard());
    }

    // optional int32 anCards = 3;
    if (has_ancards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ancards());
    }

    // optional bool HongZhongLaiZiFlag = 4;
    if (has_hongzhonglaiziflag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOutCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOutCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOutCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOutCard::MergeFrom(const ReqOutCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_showcard()) {
      set_showcard(from.showcard());
    }
    if (from.has_ancards()) {
      set_ancards(from.ancards());
    }
    if (from.has_hongzhonglaiziflag()) {
      set_hongzhonglaiziflag(from.hongzhonglaiziflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOutCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOutCard::CopyFrom(const ReqOutCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOutCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqOutCard::Swap(ReqOutCard* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(showcard_, other->showcard_);
    std::swap(ancards_, other->ancards_);
    std::swap(hongzhonglaiziflag_, other->hongzhonglaiziflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOutCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOutCard_descriptor_;
  metadata.reflection = ReqOutCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOperateResult::kTypeFieldNumber;
const int ReqOperateResult::kCardFieldNumber;
const int ReqOperateResult::kOperateidFieldNumber;
const int ReqOperateResult::kOpcardsFieldNumber;
const int ReqOperateResult::kPasshuFieldNumber;
#endif  // !_MSC_VER

ReqOperateResult::ReqOperateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.ReqOperateResult)
}

void ReqOperateResult::InitAsDefaultInstance() {
}

ReqOperateResult::ReqOperateResult(const ReqOperateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.ReqOperateResult)
}

void ReqOperateResult::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  card_ = 0;
  operateid_ = 0;
  passhu_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOperateResult::~ReqOperateResult() {
  // @@protoc_insertion_point(destructor:proto.game.ReqOperateResult)
  SharedDtor();
}

void ReqOperateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOperateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOperateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOperateResult_descriptor_;
}

const ReqOperateResult& ReqOperateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqOperateResult* ReqOperateResult::default_instance_ = NULL;

ReqOperateResult* ReqOperateResult::New() const {
  return new ReqOperateResult;
}

void ReqOperateResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqOperateResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, card_);
  ZR_(operateid_, passhu_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  opcards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOperateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.ReqOperateResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Card;
        break;
      }

      // optional int32 Card = 2;
      case 2: {
        if (tag == 16) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operateid;
        break;
      }

      // optional int32 operateid = 3;
      case 3: {
        if (tag == 24) {
         parse_operateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operateid_)));
          set_has_operateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_opcards;
        break;
      }

      // repeated int32 opcards = 4;
      case 4: {
        if (tag == 32) {
         parse_opcards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_opcards())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_opcards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_opcards;
        if (input->ExpectTag(40)) goto parse_passhu;
        break;
      }

      // optional int32 passhu = 5;
      case 5: {
        if (tag == 40) {
         parse_passhu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passhu_)));
          set_has_passhu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.ReqOperateResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.ReqOperateResult)
  return false;
#undef DO_
}

void ReqOperateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.ReqOperateResult)
  // required int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 Card = 2;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->card(), output);
  }

  // optional int32 operateid = 3;
  if (has_operateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->operateid(), output);
  }

  // repeated int32 opcards = 4;
  for (int i = 0; i < this->opcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->opcards(i), output);
  }

  // optional int32 passhu = 5;
  if (has_passhu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->passhu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.ReqOperateResult)
}

::google::protobuf::uint8* ReqOperateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.ReqOperateResult)
  // required int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 Card = 2;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card(), target);
  }

  // optional int32 operateid = 3;
  if (has_operateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->operateid(), target);
  }

  // repeated int32 opcards = 4;
  for (int i = 0; i < this->opcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->opcards(i), target);
  }

  // optional int32 passhu = 5;
  if (has_passhu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->passhu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.ReqOperateResult)
  return target;
}

int ReqOperateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Card = 2;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 operateid = 3;
    if (has_operateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operateid());
    }

    // optional int32 passhu = 5;
    if (has_passhu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passhu());
    }

  }
  // repeated int32 opcards = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->opcards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->opcards(i));
    }
    total_size += 1 * this->opcards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOperateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOperateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOperateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOperateResult::MergeFrom(const ReqOperateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  opcards_.MergeFrom(from.opcards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_operateid()) {
      set_operateid(from.operateid());
    }
    if (from.has_passhu()) {
      set_passhu(from.passhu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOperateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOperateResult::CopyFrom(const ReqOperateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOperateResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqOperateResult::Swap(ReqOperateResult* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(card_, other->card_);
    std::swap(operateid_, other->operateid_);
    opcards_.Swap(&other->opcards_);
    std::swap(passhu_, other->passhu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOperateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOperateResult_descriptor_;
  metadata.reflection = ReqOperateResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqIsAuto::kIsAutoFieldNumber;
#endif  // !_MSC_VER

ReqIsAuto::ReqIsAuto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.ReqIsAuto)
}

void ReqIsAuto::InitAsDefaultInstance() {
}

ReqIsAuto::ReqIsAuto(const ReqIsAuto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.ReqIsAuto)
}

void ReqIsAuto::SharedCtor() {
  _cached_size_ = 0;
  isauto_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqIsAuto::~ReqIsAuto() {
  // @@protoc_insertion_point(destructor:proto.game.ReqIsAuto)
  SharedDtor();
}

void ReqIsAuto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqIsAuto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqIsAuto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqIsAuto_descriptor_;
}

const ReqIsAuto& ReqIsAuto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqIsAuto* ReqIsAuto::default_instance_ = NULL;

ReqIsAuto* ReqIsAuto::New() const {
  return new ReqIsAuto;
}

void ReqIsAuto::Clear() {
  isauto_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqIsAuto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.ReqIsAuto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isAuto = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isauto_)));
          set_has_isauto();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.ReqIsAuto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.ReqIsAuto)
  return false;
#undef DO_
}

void ReqIsAuto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.ReqIsAuto)
  // required int32 isAuto = 1;
  if (has_isauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isauto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.ReqIsAuto)
}

::google::protobuf::uint8* ReqIsAuto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.ReqIsAuto)
  // required int32 isAuto = 1;
  if (has_isauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isauto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.ReqIsAuto)
  return target;
}

int ReqIsAuto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isAuto = 1;
    if (has_isauto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isauto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqIsAuto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqIsAuto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqIsAuto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqIsAuto::MergeFrom(const ReqIsAuto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isauto()) {
      set_isauto(from.isauto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqIsAuto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqIsAuto::CopyFrom(const ReqIsAuto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqIsAuto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqIsAuto::Swap(ReqIsAuto* other) {
  if (other != this) {
    std::swap(isauto_, other->isauto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqIsAuto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqIsAuto_descriptor_;
  metadata.reflection = ReqIsAuto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqUpdateUserInfo::kUidFieldNumber;
const int ReqUpdateUserInfo::kVidFieldNumber;
#endif  // !_MSC_VER

ReqUpdateUserInfo::ReqUpdateUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.ReqUpdateUserInfo)
}

void ReqUpdateUserInfo::InitAsDefaultInstance() {
}

ReqUpdateUserInfo::ReqUpdateUserInfo(const ReqUpdateUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.ReqUpdateUserInfo)
}

void ReqUpdateUserInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  vid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqUpdateUserInfo::~ReqUpdateUserInfo() {
  // @@protoc_insertion_point(destructor:proto.game.ReqUpdateUserInfo)
  SharedDtor();
}

void ReqUpdateUserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqUpdateUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqUpdateUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqUpdateUserInfo_descriptor_;
}

const ReqUpdateUserInfo& ReqUpdateUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqUpdateUserInfo* ReqUpdateUserInfo::default_instance_ = NULL;

ReqUpdateUserInfo* ReqUpdateUserInfo::New() const {
  return new ReqUpdateUserInfo;
}

void ReqUpdateUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqUpdateUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, vid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqUpdateUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.ReqUpdateUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vid;
        break;
      }

      // optional int32 vid = 2;
      case 2: {
        if (tag == 16) {
         parse_vid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vid_)));
          set_has_vid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.ReqUpdateUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.ReqUpdateUserInfo)
  return false;
#undef DO_
}

void ReqUpdateUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.ReqUpdateUserInfo)
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 vid = 2;
  if (has_vid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.ReqUpdateUserInfo)
}

::google::protobuf::uint8* ReqUpdateUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.ReqUpdateUserInfo)
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 vid = 2;
  if (has_vid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.ReqUpdateUserInfo)
  return target;
}

int ReqUpdateUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 vid = 2;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqUpdateUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqUpdateUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqUpdateUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqUpdateUserInfo::MergeFrom(const ReqUpdateUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_vid()) {
      set_vid(from.vid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqUpdateUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUpdateUserInfo::CopyFrom(const ReqUpdateUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUpdateUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqUpdateUserInfo::Swap(ReqUpdateUserInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(vid_, other->vid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqUpdateUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqUpdateUserInfo_descriptor_;
  metadata.reflection = ReqUpdateUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqRoomInfo::kUidFieldNumber;
const int ReqRoomInfo::kVidFieldNumber;
const int ReqRoomInfo::kSkeyFieldNumber;
#endif  // !_MSC_VER

ReqRoomInfo::ReqRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.ReqRoomInfo)
}

void ReqRoomInfo::InitAsDefaultInstance() {
}

ReqRoomInfo::ReqRoomInfo(const ReqRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.ReqRoomInfo)
}

void ReqRoomInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0;
  vid_ = 0;
  skey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRoomInfo::~ReqRoomInfo() {
  // @@protoc_insertion_point(destructor:proto.game.ReqRoomInfo)
  SharedDtor();
}

void ReqRoomInfo::SharedDtor() {
  if (skey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skey_;
  }
  if (this != default_instance_) {
  }
}

void ReqRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRoomInfo_descriptor_;
}

const ReqRoomInfo& ReqRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqRoomInfo* ReqRoomInfo::default_instance_ = NULL;

ReqRoomInfo* ReqRoomInfo::New() const {
  return new ReqRoomInfo;
}

void ReqRoomInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReqRoomInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(uid_, vid_);
    if (has_skey()) {
      if (skey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        skey_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.ReqRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_vid;
        break;
      }

      // optional int32 vid = 2;
      case 2: {
        if (tag == 16) {
         parse_vid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vid_)));
          set_has_vid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_skey;
        break;
      }

      // optional string skey = 3;
      case 3: {
        if (tag == 26) {
         parse_skey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->skey().data(), this->skey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "skey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.ReqRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.ReqRoomInfo)
  return false;
#undef DO_
}

void ReqRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.ReqRoomInfo)
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional int32 vid = 2;
  if (has_vid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vid(), output);
  }

  // optional string skey = 3;
  if (has_skey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skey().data(), this->skey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->skey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.ReqRoomInfo)
}

::google::protobuf::uint8* ReqRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.ReqRoomInfo)
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional int32 vid = 2;
  if (has_vid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vid(), target);
  }

  // optional string skey = 3;
  if (has_skey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skey().data(), this->skey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->skey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.ReqRoomInfo)
  return target;
}

int ReqRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 vid = 2;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }

    // optional string skey = 3;
    if (has_skey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRoomInfo::MergeFrom(const ReqRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_vid()) {
      set_vid(from.vid());
    }
    if (from.has_skey()) {
      set_skey(from.skey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRoomInfo::CopyFrom(const ReqRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqRoomInfo::Swap(ReqRoomInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(vid_, other->vid_);
    std::swap(skey_, other->skey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRoomInfo_descriptor_;
  metadata.reflection = ReqRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChooseDisband::kChoosestateFieldNumber;
#endif  // !_MSC_VER

ReqChooseDisband::ReqChooseDisband()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.ReqChooseDisband)
}

void ReqChooseDisband::InitAsDefaultInstance() {
}

ReqChooseDisband::ReqChooseDisband(const ReqChooseDisband& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.ReqChooseDisband)
}

void ReqChooseDisband::SharedCtor() {
  _cached_size_ = 0;
  choosestate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChooseDisband::~ReqChooseDisband() {
  // @@protoc_insertion_point(destructor:proto.game.ReqChooseDisband)
  SharedDtor();
}

void ReqChooseDisband::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqChooseDisband::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChooseDisband::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChooseDisband_descriptor_;
}

const ReqChooseDisband& ReqChooseDisband::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqChooseDisband* ReqChooseDisband::default_instance_ = NULL;

ReqChooseDisband* ReqChooseDisband::New() const {
  return new ReqChooseDisband;
}

void ReqChooseDisband::Clear() {
  choosestate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChooseDisband::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.ReqChooseDisband)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Choosestate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &choosestate_)));
          set_has_choosestate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.ReqChooseDisband)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.ReqChooseDisband)
  return false;
#undef DO_
}

void ReqChooseDisband::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.ReqChooseDisband)
  // required int32 Choosestate = 1;
  if (has_choosestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->choosestate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.ReqChooseDisband)
}

::google::protobuf::uint8* ReqChooseDisband::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.ReqChooseDisband)
  // required int32 Choosestate = 1;
  if (has_choosestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->choosestate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.ReqChooseDisband)
  return target;
}

int ReqChooseDisband::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Choosestate = 1;
    if (has_choosestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->choosestate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChooseDisband::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChooseDisband* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChooseDisband*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChooseDisband::MergeFrom(const ReqChooseDisband& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_choosestate()) {
      set_choosestate(from.choosestate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChooseDisband::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChooseDisband::CopyFrom(const ReqChooseDisband& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChooseDisband::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqChooseDisband::Swap(ReqChooseDisband* other) {
  if (other != this) {
    std::swap(choosestate_, other->choosestate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChooseDisband::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChooseDisband_descriptor_;
  metadata.reflection = ReqChooseDisband_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagHu::kHuCardFieldNumber;
const int tagHu::kPasHuChiaridFieldNumber;
#endif  // !_MSC_VER

tagHu::tagHu()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.tagHu)
}

void tagHu::InitAsDefaultInstance() {
}

tagHu::tagHu(const tagHu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.tagHu)
}

void tagHu::SharedCtor() {
  _cached_size_ = 0;
  hucard_ = 0;
  pashuchiarid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagHu::~tagHu() {
  // @@protoc_insertion_point(destructor:proto.game.tagHu)
  SharedDtor();
}

void tagHu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagHu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagHu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagHu_descriptor_;
}

const tagHu& tagHu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagHu* tagHu::default_instance_ = NULL;

tagHu* tagHu::New() const {
  return new tagHu;
}

void tagHu::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<tagHu*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hucard_, pashuchiarid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagHu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.tagHu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 HuCard = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hucard_)));
          set_has_hucard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PasHuChiarid;
        break;
      }

      // optional int32 PasHuChiarid = 2;
      case 2: {
        if (tag == 16) {
         parse_PasHuChiarid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pashuchiarid_)));
          set_has_pashuchiarid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.tagHu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.tagHu)
  return false;
#undef DO_
}

void tagHu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.tagHu)
  // optional int32 HuCard = 1;
  if (has_hucard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hucard(), output);
  }

  // optional int32 PasHuChiarid = 2;
  if (has_pashuchiarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pashuchiarid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.tagHu)
}

::google::protobuf::uint8* tagHu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.tagHu)
  // optional int32 HuCard = 1;
  if (has_hucard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hucard(), target);
  }

  // optional int32 PasHuChiarid = 2;
  if (has_pashuchiarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pashuchiarid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.tagHu)
  return target;
}

int tagHu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 HuCard = 1;
    if (has_hucard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hucard());
    }

    // optional int32 PasHuChiarid = 2;
    if (has_pashuchiarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pashuchiarid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagHu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagHu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagHu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagHu::MergeFrom(const tagHu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hucard()) {
      set_hucard(from.hucard());
    }
    if (from.has_pashuchiarid()) {
      set_pashuchiarid(from.pashuchiarid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagHu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagHu::CopyFrom(const tagHu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagHu::IsInitialized() const {

  return true;
}

void tagHu::Swap(tagHu* other) {
  if (other != this) {
    std::swap(hucard_, other->hucard_);
    std::swap(pashuchiarid_, other->pashuchiarid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagHu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagHu_descriptor_;
  metadata.reflection = tagHu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagUserHuInfo::kHuFieldNumber;
#endif  // !_MSC_VER

tagUserHuInfo::tagUserHuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.tagUserHuInfo)
}

void tagUserHuInfo::InitAsDefaultInstance() {
}

tagUserHuInfo::tagUserHuInfo(const tagUserHuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.tagUserHuInfo)
}

void tagUserHuInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagUserHuInfo::~tagUserHuInfo() {
  // @@protoc_insertion_point(destructor:proto.game.tagUserHuInfo)
  SharedDtor();
}

void tagUserHuInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagUserHuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagUserHuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagUserHuInfo_descriptor_;
}

const tagUserHuInfo& tagUserHuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagUserHuInfo* tagUserHuInfo::default_instance_ = NULL;

tagUserHuInfo* tagUserHuInfo::New() const {
  return new tagUserHuInfo;
}

void tagUserHuInfo::Clear() {
  hu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagUserHuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.tagUserHuInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.tagHu hu = 1;
      case 1: {
        if (tag == 10) {
         parse_hu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_hu;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.tagUserHuInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.tagUserHuInfo)
  return false;
#undef DO_
}

void tagUserHuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.tagUserHuInfo)
  // repeated .proto.game.tagHu hu = 1;
  for (int i = 0; i < this->hu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.tagUserHuInfo)
}

::google::protobuf::uint8* tagUserHuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.tagUserHuInfo)
  // repeated .proto.game.tagHu hu = 1;
  for (int i = 0; i < this->hu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.tagUserHuInfo)
  return target;
}

int tagUserHuInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.tagHu hu = 1;
  total_size += 1 * this->hu_size();
  for (int i = 0; i < this->hu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hu(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagUserHuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagUserHuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagUserHuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagUserHuInfo::MergeFrom(const tagUserHuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hu_.MergeFrom(from.hu_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagUserHuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagUserHuInfo::CopyFrom(const tagUserHuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagUserHuInfo::IsInitialized() const {

  return true;
}

void tagUserHuInfo::Swap(tagUserHuInfo* other) {
  if (other != this) {
    hu_.Swap(&other->hu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagUserHuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagUserHuInfo_descriptor_;
  metadata.reflection = tagUserHuInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGangInfo::kCardFieldNumber;
const int tagGangInfo::kStateFieldNumber;
#endif  // !_MSC_VER

tagGangInfo::tagGangInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.tagGangInfo)
}

void tagGangInfo::InitAsDefaultInstance() {
}

tagGangInfo::tagGangInfo(const tagGangInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.tagGangInfo)
}

void tagGangInfo::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGangInfo::~tagGangInfo() {
  // @@protoc_insertion_point(destructor:proto.game.tagGangInfo)
  SharedDtor();
}

void tagGangInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagGangInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGangInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGangInfo_descriptor_;
}

const tagGangInfo& tagGangInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagGangInfo* tagGangInfo::default_instance_ = NULL;

tagGangInfo* tagGangInfo::New() const {
  return new tagGangInfo;
}

void tagGangInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<tagGangInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(card_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGangInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.tagGangInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Card = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.tagGangInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.tagGangInfo)
  return false;
#undef DO_
}

void tagGangInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.tagGangInfo)
  // required int32 Card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.tagGangInfo)
}

::google::protobuf::uint8* tagGangInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.tagGangInfo)
  // required int32 Card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.tagGangInfo)
  return target;
}

int tagGangInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGangInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGangInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGangInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGangInfo::MergeFrom(const tagGangInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGangInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGangInfo::CopyFrom(const tagGangInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGangInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagGangInfo::Swap(tagGangInfo* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGangInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGangInfo_descriptor_;
  metadata.reflection = tagGangInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagGroupCard::kFixedCardFieldNumber;
#endif  // !_MSC_VER

tagGroupCard::tagGroupCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.tagGroupCard)
}

void tagGroupCard::InitAsDefaultInstance() {
}

tagGroupCard::tagGroupCard(const tagGroupCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.tagGroupCard)
}

void tagGroupCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagGroupCard::~tagGroupCard() {
  // @@protoc_insertion_point(destructor:proto.game.tagGroupCard)
  SharedDtor();
}

void tagGroupCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagGroupCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGroupCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagGroupCard_descriptor_;
}

const tagGroupCard& tagGroupCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagGroupCard* tagGroupCard::default_instance_ = NULL;

tagGroupCard* tagGroupCard::New() const {
  return new tagGroupCard;
}

void tagGroupCard::Clear() {
  fixedcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagGroupCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.tagGroupCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.FixedCard FixedCard = 1;
      case 1: {
        if (tag == 10) {
         parse_FixedCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fixedcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FixedCard;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.tagGroupCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.tagGroupCard)
  return false;
#undef DO_
}

void tagGroupCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.tagGroupCard)
  // repeated .proto.game.FixedCard FixedCard = 1;
  for (int i = 0; i < this->fixedcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fixedcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.tagGroupCard)
}

::google::protobuf::uint8* tagGroupCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.tagGroupCard)
  // repeated .proto.game.FixedCard FixedCard = 1;
  for (int i = 0; i < this->fixedcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fixedcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.tagGroupCard)
  return target;
}

int tagGroupCard::ByteSize() const {
  int total_size = 0;

  // repeated .proto.game.FixedCard FixedCard = 1;
  total_size += 1 * this->fixedcard_size();
  for (int i = 0; i < this->fixedcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fixedcard(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGroupCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagGroupCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagGroupCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagGroupCard::MergeFrom(const tagGroupCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  fixedcard_.MergeFrom(from.fixedcard_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagGroupCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGroupCard::CopyFrom(const tagGroupCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGroupCard::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->fixedcard())) return false;
  return true;
}

void tagGroupCard::Swap(tagGroupCard* other) {
  if (other != this) {
    fixedcard_.Swap(&other->fixedcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagGroupCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagGroupCard_descriptor_;
  metadata.reflection = tagGroupCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagReadyInfo::kReadyFieldNumber;
const int tagReadyInfo::kRemainReadyTimeFieldNumber;
const int tagReadyInfo::kReadyTimeFieldNumber;
#endif  // !_MSC_VER

tagReadyInfo::tagReadyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.tagReadyInfo)
}

void tagReadyInfo::InitAsDefaultInstance() {
}

tagReadyInfo::tagReadyInfo(const tagReadyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.tagReadyInfo)
}

void tagReadyInfo::SharedCtor() {
  _cached_size_ = 0;
  readytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagReadyInfo::~tagReadyInfo() {
  // @@protoc_insertion_point(destructor:proto.game.tagReadyInfo)
  SharedDtor();
}

void tagReadyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagReadyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagReadyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagReadyInfo_descriptor_;
}

const tagReadyInfo& tagReadyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagReadyInfo* tagReadyInfo::default_instance_ = NULL;

tagReadyInfo* tagReadyInfo::New() const {
  return new tagReadyInfo;
}

void tagReadyInfo::Clear() {
  readytime_ = 0;
  ready_.Clear();
  remainreadytime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagReadyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.tagReadyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 Ready = 1;
      case 1: {
        if (tag == 8) {
         parse_Ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_ready())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ready())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_Ready;
        if (input->ExpectTag(16)) goto parse_RemainReadyTime;
        break;
      }

      // repeated int32 RemainReadyTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RemainReadyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_remainreadytime())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_remainreadytime())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RemainReadyTime;
        if (input->ExpectTag(24)) goto parse_ReadyTime;
        break;
      }

      // optional int32 ReadyTime = 3;
      case 3: {
        if (tag == 24) {
         parse_ReadyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &readytime_)));
          set_has_readytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.tagReadyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.tagReadyInfo)
  return false;
#undef DO_
}

void tagReadyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.tagReadyInfo)
  // repeated int32 Ready = 1;
  for (int i = 0; i < this->ready_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->ready(i), output);
  }

  // repeated int32 RemainReadyTime = 2;
  for (int i = 0; i < this->remainreadytime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->remainreadytime(i), output);
  }

  // optional int32 ReadyTime = 3;
  if (has_readytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->readytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.tagReadyInfo)
}

::google::protobuf::uint8* tagReadyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.tagReadyInfo)
  // repeated int32 Ready = 1;
  for (int i = 0; i < this->ready_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->ready(i), target);
  }

  // repeated int32 RemainReadyTime = 2;
  for (int i = 0; i < this->remainreadytime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->remainreadytime(i), target);
  }

  // optional int32 ReadyTime = 3;
  if (has_readytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->readytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.tagReadyInfo)
  return target;
}

int tagReadyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 ReadyTime = 3;
    if (has_readytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->readytime());
    }

  }
  // repeated int32 Ready = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ready_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ready(i));
    }
    total_size += 1 * this->ready_size() + data_size;
  }

  // repeated int32 RemainReadyTime = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->remainreadytime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->remainreadytime(i));
    }
    total_size += 1 * this->remainreadytime_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagReadyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagReadyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagReadyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagReadyInfo::MergeFrom(const tagReadyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  ready_.MergeFrom(from.ready_);
  remainreadytime_.MergeFrom(from.remainreadytime_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_readytime()) {
      set_readytime(from.readytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagReadyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagReadyInfo::CopyFrom(const tagReadyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagReadyInfo::IsInitialized() const {

  return true;
}

void tagReadyInfo::Swap(tagReadyInfo* other) {
  if (other != this) {
    ready_.Swap(&other->ready_);
    remainreadytime_.Swap(&other->remainreadytime_);
    std::swap(readytime_, other->readytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagReadyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagReadyInfo_descriptor_;
  metadata.reflection = tagReadyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExMsg::kTimesFieldNumber;
const int ExMsg::kVoiceRoomFieldNumber;
const int ExMsg::kPublicChannelIdFieldNumber;
const int ExMsg::kGroupChannelIdsFieldNumber;
const int ExMsg::kMVoiceStatusFieldNumber;
#endif  // !_MSC_VER

ExMsg::ExMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.ExMsg)
}

void ExMsg::InitAsDefaultInstance() {
}

ExMsg::ExMsg(const ExMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.ExMsg)
}

void ExMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  times_ = 0;
  voice_room_ = 0;
  public_channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExMsg::~ExMsg() {
  // @@protoc_insertion_point(destructor:proto.game.ExMsg)
  SharedDtor();
}

void ExMsg::SharedDtor() {
  if (public_channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete public_channel_id_;
  }
  if (this != default_instance_) {
  }
}

void ExMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExMsg_descriptor_;
}

const ExMsg& ExMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ExMsg* ExMsg::default_instance_ = NULL;

ExMsg* ExMsg::New() const {
  return new ExMsg;
}

void ExMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(times_, voice_room_);
    if (has_public_channel_id()) {
      if (public_channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        public_channel_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  group_channel_ids_.Clear();
  m_voice_status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.ExMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 times = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_voice_room;
        break;
      }

      // optional int32 voice_room = 2;
      case 2: {
        if (tag == 16) {
         parse_voice_room:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voice_room_)));
          set_has_voice_room();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_public_channel_id;
        break;
      }

      // optional string public_channel_id = 3;
      case 3: {
        if (tag == 26) {
         parse_public_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->public_channel_id().data(), this->public_channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "public_channel_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_channel_ids;
        break;
      }

      // repeated string group_channel_ids = 4;
      case 4: {
        if (tag == 34) {
         parse_group_channel_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_group_channel_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_channel_ids(this->group_channel_ids_size() - 1).data(),
            this->group_channel_ids(this->group_channel_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_channel_ids");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_group_channel_ids;
        if (input->ExpectTag(40)) goto parse_m_voice_status;
        break;
      }

      // repeated int32 m_voice_status = 5;
      case 5: {
        if (tag == 40) {
         parse_m_voice_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_m_voice_status())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_voice_status())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_m_voice_status;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.ExMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.ExMsg)
  return false;
#undef DO_
}

void ExMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.ExMsg)
  // optional int32 times = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->times(), output);
  }

  // optional int32 voice_room = 2;
  if (has_voice_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->voice_room(), output);
  }

  // optional string public_channel_id = 3;
  if (has_public_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_channel_id().data(), this->public_channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "public_channel_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->public_channel_id(), output);
  }

  // repeated string group_channel_ids = 4;
  for (int i = 0; i < this->group_channel_ids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->group_channel_ids(i).data(), this->group_channel_ids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "group_channel_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->group_channel_ids(i), output);
  }

  // repeated int32 m_voice_status = 5;
  for (int i = 0; i < this->m_voice_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->m_voice_status(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.ExMsg)
}

::google::protobuf::uint8* ExMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.ExMsg)
  // optional int32 times = 1;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->times(), target);
  }

  // optional int32 voice_room = 2;
  if (has_voice_room()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->voice_room(), target);
  }

  // optional string public_channel_id = 3;
  if (has_public_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_channel_id().data(), this->public_channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "public_channel_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->public_channel_id(), target);
  }

  // repeated string group_channel_ids = 4;
  for (int i = 0; i < this->group_channel_ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_channel_ids(i).data(), this->group_channel_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_channel_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->group_channel_ids(i), target);
  }

  // repeated int32 m_voice_status = 5;
  for (int i = 0; i < this->m_voice_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->m_voice_status(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.ExMsg)
  return target;
}

int ExMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 times = 1;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional int32 voice_room = 2;
    if (has_voice_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voice_room());
    }

    // optional string public_channel_id = 3;
    if (has_public_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_channel_id());
    }

  }
  // repeated string group_channel_ids = 4;
  total_size += 1 * this->group_channel_ids_size();
  for (int i = 0; i < this->group_channel_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->group_channel_ids(i));
  }

  // repeated int32 m_voice_status = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_voice_status_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_voice_status(i));
    }
    total_size += 1 * this->m_voice_status_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExMsg::MergeFrom(const ExMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_channel_ids_.MergeFrom(from.group_channel_ids_);
  m_voice_status_.MergeFrom(from.m_voice_status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_voice_room()) {
      set_voice_room(from.voice_room());
    }
    if (from.has_public_channel_id()) {
      set_public_channel_id(from.public_channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExMsg::CopyFrom(const ExMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExMsg::IsInitialized() const {

  return true;
}

void ExMsg::Swap(ExMsg* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    std::swap(voice_room_, other->voice_room_);
    std::swap(public_channel_id_, other->public_channel_id_);
    group_channel_ids_.Swap(&other->group_channel_ids_);
    m_voice_status_.Swap(&other->m_voice_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExMsg_descriptor_;
  metadata.reflection = ExMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGameScene::kChangetimeFieldNumber;
const int AckGameScene::kLacktypetimeFieldNumber;
const int AckGameScene::kOutcardtimeFieldNumber;
const int AckGameScene::kOperatetimeFieldNumber;
const int AckGameScene::kBasescoreFieldNumber;
const int AckGameScene::kDelaytimeFieldNumber;
const int AckGameScene::kSceneStatusFieldNumber;
const int AckGameScene::kLeftTimeFieldNumber;
const int AckGameScene::kUserCardFieldNumber;
const int AckGameScene::kHandCardNumsFieldNumber;
const int AckGameScene::kCurOutCardUserFieldNumber;
const int AckGameScene::kShowCardFieldNumber;
const int AckGameScene::kCurOutCardFieldNumber;
const int AckGameScene::kHuInfoFieldNumber;
const int AckGameScene::kTotalScoreFieldNumber;
const int AckGameScene::kGroupCardFieldNumber;
const int AckGameScene::kIsAutoHuFieldNumber;
const int AckGameScene::kBankerChairidFieldNumber;
const int AckGameScene::kUserLackTypeFieldNumber;
const int AckGameScene::kIscurGetCardFieldNumber;
const int AckGameScene::kCardFieldNumber;
const int AckGameScene::kOpTypeFieldNumber;
const int AckGameScene::kGangInfoFieldNumber;
const int AckGameScene::kListenInfoFieldNumber;
const int AckGameScene::kOfflineStateFieldNumber;
const int AckGameScene::kPoolCardLeftNumsFieldNumber;
const int AckGameScene::kPrereadyTimerFieldNumber;
const int AckGameScene::kStandMoneyFieldNumber;
const int AckGameScene::kHorseNumFieldNumber;
const int AckGameScene::kIsDisbandroomFieldNumber;
const int AckGameScene::kDisbandinfoFieldNumber;
const int AckGameScene::kUserDisbandstateFieldNumber;
const int AckGameScene::kUserOnlinestateFieldNumber;
const int AckGameScene::kUserOvertimeFieldNumber;
const int AckGameScene::kIsZhuanZhuanRoomFieldNumber;
const int AckGameScene::kUserReadyInfoFieldNumber;
const int AckGameScene::kRoomGoldenFieldNumber;
const int AckGameScene::kRoomConfigIDFieldNumber;
const int AckGameScene::kTotalRoundScoreFieldNumber;
const int AckGameScene::kEncryptCodeFieldNumber;
const int AckGameScene::kOpType2FieldNumber;
const int AckGameScene::kMd5FieldNumber;
const int AckGameScene::kOperateidFieldNumber;
const int AckGameScene::kAutoDisbandStateFieldNumber;
const int AckGameScene::kAutoDisbandChairidsFieldNumber;
const int AckGameScene::kAutoDisbandRemaintimeFieldNumber;
const int AckGameScene::kAutoDisbandTimeFieldNumber;
const int AckGameScene::kTotalcountFieldNumber;
const int AckGameScene::kCurrentcountFieldNumber;
const int AckGameScene::kUserchangemodeFieldNumber;
const int AckGameScene::kMsgFieldNumber;
const int AckGameScene::kCardListFieldNumber;
const int AckGameScene::kTestSvrConfFieldNumber;
const int AckGameScene::kDaanTingFieldNumber;
#endif  // !_MSC_VER

AckGameScene::AckGameScene()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckGameScene)
}

void AckGameScene::InitAsDefaultInstance() {
  usercard_ = const_cast< ::proto::game::HandCards*>(&::proto::game::HandCards::default_instance());
  disbandinfo_ = const_cast< ::proto::game::AckDisbandApply*>(&::proto::game::AckDisbandApply::default_instance());
  userreadyinfo_ = const_cast< ::proto::game::tagReadyInfo*>(&::proto::game::tagReadyInfo::default_instance());
  totalroundscore_ = const_cast< ::proto::game::TotalRoundScore*>(&::proto::game::TotalRoundScore::default_instance());
  msg_ = const_cast< ::proto::game::ExMsg*>(&::proto::game::ExMsg::default_instance());
  test_svr_conf_ = const_cast< ::proto::game::TestSvrConf*>(&::proto::game::TestSvrConf::default_instance());
}

AckGameScene::AckGameScene(const AckGameScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckGameScene)
}

void AckGameScene::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  changetime_ = 0;
  lacktypetime_ = 0;
  outcardtime_ = 0;
  operatetime_ = 0;
  basescore_ = 0;
  delaytime_ = 0;
  scenestatus_ = 0;
  lefttime_ = 0;
  usercard_ = NULL;
  curoutcarduser_ = 0;
  curoutcard_ = 0;
  isautohu_ = 0;
  bankerchairid_ = 0;
  iscurgetcard_ = 0;
  card_ = 0;
  optype_ = 0;
  poolcardleftnums_ = 0;
  preready_timer_ = 0;
  stand_money_ = 0;
  horsenum_ = 0;
  isdisbandroom_ = 0;
  disbandinfo_ = NULL;
  iszhuanzhuanroom_ = false;
  userreadyinfo_ = NULL;
  roomgolden_ = 0;
  totalroundscore_ = NULL;
  encrypt_code_ = 0;
  optype2_ = 0;
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operateid_ = 0;
  auto_disband_state_ = 0;
  auto_disband_remaintime_ = 0;
  auto_disband_time_ = 0;
  totalcount_ = 0;
  currentcount_ = 0;
  msg_ = NULL;
  test_svr_conf_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGameScene::~AckGameScene() {
  // @@protoc_insertion_point(destructor:proto.game.AckGameScene)
  SharedDtor();
}

void AckGameScene::SharedDtor() {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete md5_;
  }
  if (this != default_instance_) {
    delete usercard_;
    delete disbandinfo_;
    delete userreadyinfo_;
    delete totalroundscore_;
    delete msg_;
    delete test_svr_conf_;
  }
}

void AckGameScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGameScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGameScene_descriptor_;
}

const AckGameScene& AckGameScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckGameScene* AckGameScene::default_instance_ = NULL;

AckGameScene* AckGameScene::New() const {
  return new AckGameScene;
}

void AckGameScene::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckGameScene*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(changetime_, lefttime_);
  }
  if (_has_bits_[8 / 32] & 5376) {
    ZR_(curoutcarduser_, curoutcard_);
    if (has_usercard()) {
      if (usercard_ != NULL) usercard_->::proto::game::HandCards::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 3866624) {
    ZR_(isautohu_, bankerchairid_);
    ZR_(iscurgetcard_, card_);
    optype_ = 0;
  }
  if (_has_bits_[24 / 32] & 2113929216) {
    ZR_(preready_timer_, isdisbandroom_);
    poolcardleftnums_ = 0;
    if (has_disbandinfo()) {
      if (disbandinfo_ != NULL) disbandinfo_->::proto::game::AckDisbandApply::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 220) {
    ZR_(iszhuanzhuanroom_, roomgolden_);
    if (has_userreadyinfo()) {
      if (userreadyinfo_ != NULL) userreadyinfo_->::proto::game::tagReadyInfo::Clear();
    }
    if (has_totalroundscore()) {
      if (totalroundscore_ != NULL) totalroundscore_->::proto::game::TotalRoundScore::Clear();
    }
    encrypt_code_ = 0;
  }
  if (_has_bits_[40 / 32] & 61184) {
    ZR_(operateid_, auto_disband_state_);
    ZR_(auto_disband_remaintime_, totalcount_);
    optype2_ = 0;
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        md5_->clear();
      }
    }
  }
  if (_has_bits_[48 / 32] & 1376256) {
    currentcount_ = 0;
    if (has_msg()) {
      if (msg_ != NULL) msg_->::proto::game::ExMsg::Clear();
    }
    if (has_test_svr_conf()) {
      if (test_svr_conf_ != NULL) test_svr_conf_->::proto::game::TestSvrConf::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  handcardnums_.Clear();
  showcard_.Clear();
  huinfo_.Clear();
  totalscore_.Clear();
  groupcard_.Clear();
  userlacktype_.Clear();
  ganginfo_.Clear();
  listeninfo_.Clear();
  offlinestate_.Clear();
  userdisbandstate_.Clear();
  useronlinestate_.Clear();
  userovertime_.Clear();
  roomconfigid_.Clear();
  auto_disband_chairids_.Clear();
  userchangemode_.Clear();
  cardlist_.Clear();
  daan_ting_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGameScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckGameScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 changetime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changetime_)));
          set_has_changetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lacktypetime;
        break;
      }

      // optional int32 lacktypetime = 2;
      case 2: {
        if (tag == 16) {
         parse_lacktypetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lacktypetime_)));
          set_has_lacktypetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_outcardtime;
        break;
      }

      // optional int32 outcardtime = 3;
      case 3: {
        if (tag == 24) {
         parse_outcardtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardtime_)));
          set_has_outcardtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_operatetime;
        break;
      }

      // optional int32 operatetime = 4;
      case 4: {
        if (tag == 32) {
         parse_operatetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operatetime_)));
          set_has_operatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_basescore;
        break;
      }

      // optional int32 basescore = 5;
      case 5: {
        if (tag == 40) {
         parse_basescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basescore_)));
          set_has_basescore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_delaytime;
        break;
      }

      // optional int32 delaytime = 6;
      case 6: {
        if (tag == 48) {
         parse_delaytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_SceneStatus;
        break;
      }

      // optional int32 SceneStatus = 7;
      case 7: {
        if (tag == 56) {
         parse_SceneStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scenestatus_)));
          set_has_scenestatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_LeftTime;
        break;
      }

      // optional int32 LeftTime = 8;
      case 8: {
        if (tag == 64) {
         parse_LeftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_UserCard;
        break;
      }

      // optional .proto.game.HandCards UserCard = 9;
      case 9: {
        if (tag == 74) {
         parse_UserCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usercard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_HandCardNums;
        break;
      }

      // repeated int32 HandCardNums = 10;
      case 10: {
        if (tag == 80) {
         parse_HandCardNums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_handcardnums())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handcardnums())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_HandCardNums;
        if (input->ExpectTag(88)) goto parse_CurOutCardUser;
        break;
      }

      // optional int32 CurOutCardUser = 11;
      case 11: {
        if (tag == 88) {
         parse_CurOutCardUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curoutcarduser_)));
          set_has_curoutcarduser();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ShowCard;
        break;
      }

      // repeated .proto.game.tagShowOutCard ShowCard = 12;
      case 12: {
        if (tag == 98) {
         parse_ShowCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ShowCard;
        if (input->ExpectTag(104)) goto parse_curOutCard;
        break;
      }

      // optional int32 curOutCard = 13;
      case 13: {
        if (tag == 104) {
         parse_curOutCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curoutcard_)));
          set_has_curoutcard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_HuInfo;
        break;
      }

      // repeated .proto.game.tagUserHuInfo HuInfo = 14;
      case 14: {
        if (tag == 114) {
         parse_HuInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_HuInfo;
        if (input->ExpectTag(120)) goto parse_TotalScore;
        break;
      }

      // repeated int32 TotalScore = 15;
      case 15: {
        if (tag == 120) {
         parse_TotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_totalscore())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_totalscore())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_TotalScore;
        if (input->ExpectTag(130)) goto parse_GroupCard;
        break;
      }

      // repeated .proto.game.tagGroupCard GroupCard = 16;
      case 16: {
        if (tag == 130) {
         parse_GroupCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groupcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_GroupCard;
        if (input->ExpectTag(136)) goto parse_IsAutoHu;
        break;
      }

      // optional int32 IsAutoHu = 17;
      case 17: {
        if (tag == 136) {
         parse_IsAutoHu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isautohu_)));
          set_has_isautohu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_BankerChairid;
        break;
      }

      // optional int32 BankerChairid = 18;
      case 18: {
        if (tag == 144) {
         parse_BankerChairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerchairid_)));
          set_has_bankerchairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_UserLackType;
        break;
      }

      // repeated int32 UserLackType = 19;
      case 19: {
        if (tag == 152) {
         parse_UserLackType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_userlacktype())));
        } else if (tag == 154) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_userlacktype())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_UserLackType;
        if (input->ExpectTag(160)) goto parse_IscurGetCard;
        break;
      }

      // optional int32 IscurGetCard = 20;
      case 20: {
        if (tag == 160) {
         parse_IscurGetCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscurgetcard_)));
          set_has_iscurgetcard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_Card;
        break;
      }

      // optional int32 Card = 21;
      case 21: {
        if (tag == 168) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_OpType;
        break;
      }

      // optional int32 OpType = 22;
      case 22: {
        if (tag == 176) {
         parse_OpType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_GangInfo;
        break;
      }

      // repeated .proto.game.tagGangInfo GangInfo = 23;
      case 23: {
        if (tag == 186) {
         parse_GangInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ganginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_GangInfo;
        if (input->ExpectTag(194)) goto parse_ListenInfo;
        break;
      }

      // repeated .proto.game.tagListenInfo ListenInfo = 24;
      case 24: {
        if (tag == 194) {
         parse_ListenInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listeninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_ListenInfo;
        if (input->ExpectTag(200)) goto parse_OfflineState;
        break;
      }

      // repeated int32 OfflineState = 25;
      case 25: {
        if (tag == 200) {
         parse_OfflineState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 200, input, this->mutable_offlinestate())));
        } else if (tag == 202) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_offlinestate())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_OfflineState;
        if (input->ExpectTag(208)) goto parse_PoolCardLeftNums;
        break;
      }

      // optional int32 PoolCardLeftNums = 26;
      case 26: {
        if (tag == 208) {
         parse_PoolCardLeftNums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poolcardleftnums_)));
          set_has_poolcardleftnums();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_preready_timer;
        break;
      }

      // optional int32 preready_timer = 27;
      case 27: {
        if (tag == 216) {
         parse_preready_timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preready_timer_)));
          set_has_preready_timer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_stand_money;
        break;
      }

      // optional int32 stand_money = 28;
      case 28: {
        if (tag == 224) {
         parse_stand_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stand_money_)));
          set_has_stand_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_HorseNum;
        break;
      }

      // optional int32 HorseNum = 29;
      case 29: {
        if (tag == 232) {
         parse_HorseNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horsenum_)));
          set_has_horsenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_isDisbandroom;
        break;
      }

      // optional int32 isDisbandroom = 30;
      case 30: {
        if (tag == 240) {
         parse_isDisbandroom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdisbandroom_)));
          set_has_isdisbandroom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_Disbandinfo;
        break;
      }

      // optional .proto.game.AckDisbandApply Disbandinfo = 31;
      case 31: {
        if (tag == 250) {
         parse_Disbandinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disbandinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_UserDisbandstate;
        break;
      }

      // repeated .proto.game.AckDisbandChooseBc UserDisbandstate = 32;
      case 32: {
        if (tag == 258) {
         parse_UserDisbandstate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userdisbandstate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_UserDisbandstate;
        if (input->ExpectTag(266)) goto parse_UserOnlinestate;
        break;
      }

      // repeated .proto.game.AckUserOnlineState UserOnlinestate = 33;
      case 33: {
        if (tag == 266) {
         parse_UserOnlinestate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_useronlinestate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_UserOnlinestate;
        if (input->ExpectTag(274)) goto parse_UserOvertime;
        break;
      }

      // repeated .proto.game.AckUserOvertimeState UserOvertime = 34;
      case 34: {
        if (tag == 274) {
         parse_UserOvertime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userovertime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_UserOvertime;
        if (input->ExpectTag(280)) goto parse_IsZhuanZhuanRoom;
        break;
      }

      // optional bool IsZhuanZhuanRoom = 35;
      case 35: {
        if (tag == 280) {
         parse_IsZhuanZhuanRoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iszhuanzhuanroom_)));
          set_has_iszhuanzhuanroom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_UserReadyInfo;
        break;
      }

      // optional .proto.game.tagReadyInfo UserReadyInfo = 36;
      case 36: {
        if (tag == 290) {
         parse_UserReadyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userreadyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_roomGolden;
        break;
      }

      // optional int32 roomGolden = 37;
      case 37: {
        if (tag == 296) {
         parse_roomGolden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomgolden_)));
          set_has_roomgolden();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_RoomConfigID;
        break;
      }

      // repeated int32 RoomConfigID = 38;
      case 38: {
        if (tag == 304) {
         parse_RoomConfigID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 304, input, this->mutable_roomconfigid())));
        } else if (tag == 306) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_roomconfigid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_RoomConfigID;
        if (input->ExpectTag(314)) goto parse_totalRoundScore;
        break;
      }

      // optional .proto.game.TotalRoundScore totalRoundScore = 39;
      case 39: {
        if (tag == 314) {
         parse_totalRoundScore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_totalroundscore()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_encrypt_code;
        break;
      }

      // optional int32 encrypt_code = 40;
      case 40: {
        if (tag == 320) {
         parse_encrypt_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encrypt_code_)));
          set_has_encrypt_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_OpType2;
        break;
      }

      // optional int32 OpType2 = 41;
      case 41: {
        if (tag == 328) {
         parse_OpType2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype2_)));
          set_has_optype2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_md5;
        break;
      }

      // optional string md5 = 42;
      case 42: {
        if (tag == 338) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "md5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_operateid;
        break;
      }

      // optional int32 operateid = 43;
      case 43: {
        if (tag == 344) {
         parse_operateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operateid_)));
          set_has_operateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_auto_disband_state;
        break;
      }

      // optional int32 auto_disband_state = 44;
      case 44: {
        if (tag == 352) {
         parse_auto_disband_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_disband_state_)));
          set_has_auto_disband_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_auto_disband_chairids;
        break;
      }

      // repeated int32 auto_disband_chairids = 45;
      case 45: {
        if (tag == 360) {
         parse_auto_disband_chairids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 360, input, this->mutable_auto_disband_chairids())));
        } else if (tag == 362) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_auto_disband_chairids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_auto_disband_chairids;
        if (input->ExpectTag(368)) goto parse_auto_disband_remaintime;
        break;
      }

      // optional int32 auto_disband_remaintime = 46;
      case 46: {
        if (tag == 368) {
         parse_auto_disband_remaintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_disband_remaintime_)));
          set_has_auto_disband_remaintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_auto_disband_time;
        break;
      }

      // optional int32 auto_disband_time = 47;
      case 47: {
        if (tag == 376) {
         parse_auto_disband_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_disband_time_)));
          set_has_auto_disband_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_totalcount;
        break;
      }

      // optional int32 totalcount = 48;
      case 48: {
        if (tag == 384) {
         parse_totalcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcount_)));
          set_has_totalcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_currentcount;
        break;
      }

      // optional int32 currentcount = 49;
      case 49: {
        if (tag == 392) {
         parse_currentcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentcount_)));
          set_has_currentcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_userchangemode;
        break;
      }

      // repeated int32 userchangemode = 50;
      case 50: {
        if (tag == 400) {
         parse_userchangemode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 400, input, this->mutable_userchangemode())));
        } else if (tag == 402) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_userchangemode())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_userchangemode;
        if (input->ExpectTag(410)) goto parse_msg;
        break;
      }

      // optional .proto.game.ExMsg msg = 51;
      case 51: {
        if (tag == 410) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_cardList;
        break;
      }

      // repeated .proto.game.CardArr cardList = 60;
      case 60: {
        if (tag == 482) {
         parse_cardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_cardList;
        if (input->ExpectTag(490)) goto parse_test_svr_conf;
        break;
      }

      // optional .proto.game.TestSvrConf test_svr_conf = 61;
      case 61: {
        if (tag == 490) {
         parse_test_svr_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test_svr_conf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(642)) goto parse_daan_ting;
        break;
      }

      // repeated .proto.game.DaAnTing daan_ting = 80;
      case 80: {
        if (tag == 642) {
         parse_daan_ting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daan_ting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(642)) goto parse_daan_ting;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckGameScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckGameScene)
  return false;
#undef DO_
}

void AckGameScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckGameScene)
  // optional int32 changetime = 1;
  if (has_changetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->changetime(), output);
  }

  // optional int32 lacktypetime = 2;
  if (has_lacktypetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lacktypetime(), output);
  }

  // optional int32 outcardtime = 3;
  if (has_outcardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->outcardtime(), output);
  }

  // optional int32 operatetime = 4;
  if (has_operatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->operatetime(), output);
  }

  // optional int32 basescore = 5;
  if (has_basescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->basescore(), output);
  }

  // optional int32 delaytime = 6;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->delaytime(), output);
  }

  // optional int32 SceneStatus = 7;
  if (has_scenestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->scenestatus(), output);
  }

  // optional int32 LeftTime = 8;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lefttime(), output);
  }

  // optional .proto.game.HandCards UserCard = 9;
  if (has_usercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->usercard(), output);
  }

  // repeated int32 HandCardNums = 10;
  for (int i = 0; i < this->handcardnums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->handcardnums(i), output);
  }

  // optional int32 CurOutCardUser = 11;
  if (has_curoutcarduser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->curoutcarduser(), output);
  }

  // repeated .proto.game.tagShowOutCard ShowCard = 12;
  for (int i = 0; i < this->showcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->showcard(i), output);
  }

  // optional int32 curOutCard = 13;
  if (has_curoutcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->curoutcard(), output);
  }

  // repeated .proto.game.tagUserHuInfo HuInfo = 14;
  for (int i = 0; i < this->huinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->huinfo(i), output);
  }

  // repeated int32 TotalScore = 15;
  for (int i = 0; i < this->totalscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->totalscore(i), output);
  }

  // repeated .proto.game.tagGroupCard GroupCard = 16;
  for (int i = 0; i < this->groupcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->groupcard(i), output);
  }

  // optional int32 IsAutoHu = 17;
  if (has_isautohu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->isautohu(), output);
  }

  // optional int32 BankerChairid = 18;
  if (has_bankerchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->bankerchairid(), output);
  }

  // repeated int32 UserLackType = 19;
  for (int i = 0; i < this->userlacktype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->userlacktype(i), output);
  }

  // optional int32 IscurGetCard = 20;
  if (has_iscurgetcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->iscurgetcard(), output);
  }

  // optional int32 Card = 21;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->card(), output);
  }

  // optional int32 OpType = 22;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->optype(), output);
  }

  // repeated .proto.game.tagGangInfo GangInfo = 23;
  for (int i = 0; i < this->ganginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->ganginfo(i), output);
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 24;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->listeninfo(i), output);
  }

  // repeated int32 OfflineState = 25;
  for (int i = 0; i < this->offlinestate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      25, this->offlinestate(i), output);
  }

  // optional int32 PoolCardLeftNums = 26;
  if (has_poolcardleftnums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->poolcardleftnums(), output);
  }

  // optional int32 preready_timer = 27;
  if (has_preready_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->preready_timer(), output);
  }

  // optional int32 stand_money = 28;
  if (has_stand_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->stand_money(), output);
  }

  // optional int32 HorseNum = 29;
  if (has_horsenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->horsenum(), output);
  }

  // optional int32 isDisbandroom = 30;
  if (has_isdisbandroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->isdisbandroom(), output);
  }

  // optional .proto.game.AckDisbandApply Disbandinfo = 31;
  if (has_disbandinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->disbandinfo(), output);
  }

  // repeated .proto.game.AckDisbandChooseBc UserDisbandstate = 32;
  for (int i = 0; i < this->userdisbandstate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->userdisbandstate(i), output);
  }

  // repeated .proto.game.AckUserOnlineState UserOnlinestate = 33;
  for (int i = 0; i < this->useronlinestate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->useronlinestate(i), output);
  }

  // repeated .proto.game.AckUserOvertimeState UserOvertime = 34;
  for (int i = 0; i < this->userovertime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->userovertime(i), output);
  }

  // optional bool IsZhuanZhuanRoom = 35;
  if (has_iszhuanzhuanroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->iszhuanzhuanroom(), output);
  }

  // optional .proto.game.tagReadyInfo UserReadyInfo = 36;
  if (has_userreadyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->userreadyinfo(), output);
  }

  // optional int32 roomGolden = 37;
  if (has_roomgolden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->roomgolden(), output);
  }

  // repeated int32 RoomConfigID = 38;
  for (int i = 0; i < this->roomconfigid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      38, this->roomconfigid(i), output);
  }

  // optional .proto.game.TotalRoundScore totalRoundScore = 39;
  if (has_totalroundscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->totalroundscore(), output);
  }

  // optional int32 encrypt_code = 40;
  if (has_encrypt_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->encrypt_code(), output);
  }

  // optional int32 OpType2 = 41;
  if (has_optype2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->optype2(), output);
  }

  // optional string md5 = 42;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      42, this->md5(), output);
  }

  // optional int32 operateid = 43;
  if (has_operateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->operateid(), output);
  }

  // optional int32 auto_disband_state = 44;
  if (has_auto_disband_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->auto_disband_state(), output);
  }

  // repeated int32 auto_disband_chairids = 45;
  for (int i = 0; i < this->auto_disband_chairids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      45, this->auto_disband_chairids(i), output);
  }

  // optional int32 auto_disband_remaintime = 46;
  if (has_auto_disband_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->auto_disband_remaintime(), output);
  }

  // optional int32 auto_disband_time = 47;
  if (has_auto_disband_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->auto_disband_time(), output);
  }

  // optional int32 totalcount = 48;
  if (has_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->totalcount(), output);
  }

  // optional int32 currentcount = 49;
  if (has_currentcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->currentcount(), output);
  }

  // repeated int32 userchangemode = 50;
  for (int i = 0; i < this->userchangemode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      50, this->userchangemode(i), output);
  }

  // optional .proto.game.ExMsg msg = 51;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->msg(), output);
  }

  // repeated .proto.game.CardArr cardList = 60;
  for (int i = 0; i < this->cardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->cardlist(i), output);
  }

  // optional .proto.game.TestSvrConf test_svr_conf = 61;
  if (has_test_svr_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->test_svr_conf(), output);
  }

  // repeated .proto.game.DaAnTing daan_ting = 80;
  for (int i = 0; i < this->daan_ting_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      80, this->daan_ting(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckGameScene)
}

::google::protobuf::uint8* AckGameScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckGameScene)
  // optional int32 changetime = 1;
  if (has_changetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->changetime(), target);
  }

  // optional int32 lacktypetime = 2;
  if (has_lacktypetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lacktypetime(), target);
  }

  // optional int32 outcardtime = 3;
  if (has_outcardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->outcardtime(), target);
  }

  // optional int32 operatetime = 4;
  if (has_operatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->operatetime(), target);
  }

  // optional int32 basescore = 5;
  if (has_basescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->basescore(), target);
  }

  // optional int32 delaytime = 6;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->delaytime(), target);
  }

  // optional int32 SceneStatus = 7;
  if (has_scenestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->scenestatus(), target);
  }

  // optional int32 LeftTime = 8;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lefttime(), target);
  }

  // optional .proto.game.HandCards UserCard = 9;
  if (has_usercard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->usercard(), target);
  }

  // repeated int32 HandCardNums = 10;
  for (int i = 0; i < this->handcardnums_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->handcardnums(i), target);
  }

  // optional int32 CurOutCardUser = 11;
  if (has_curoutcarduser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->curoutcarduser(), target);
  }

  // repeated .proto.game.tagShowOutCard ShowCard = 12;
  for (int i = 0; i < this->showcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->showcard(i), target);
  }

  // optional int32 curOutCard = 13;
  if (has_curoutcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->curoutcard(), target);
  }

  // repeated .proto.game.tagUserHuInfo HuInfo = 14;
  for (int i = 0; i < this->huinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->huinfo(i), target);
  }

  // repeated int32 TotalScore = 15;
  for (int i = 0; i < this->totalscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->totalscore(i), target);
  }

  // repeated .proto.game.tagGroupCard GroupCard = 16;
  for (int i = 0; i < this->groupcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->groupcard(i), target);
  }

  // optional int32 IsAutoHu = 17;
  if (has_isautohu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->isautohu(), target);
  }

  // optional int32 BankerChairid = 18;
  if (has_bankerchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->bankerchairid(), target);
  }

  // repeated int32 UserLackType = 19;
  for (int i = 0; i < this->userlacktype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->userlacktype(i), target);
  }

  // optional int32 IscurGetCard = 20;
  if (has_iscurgetcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->iscurgetcard(), target);
  }

  // optional int32 Card = 21;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->card(), target);
  }

  // optional int32 OpType = 22;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->optype(), target);
  }

  // repeated .proto.game.tagGangInfo GangInfo = 23;
  for (int i = 0; i < this->ganginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->ganginfo(i), target);
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 24;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->listeninfo(i), target);
  }

  // repeated int32 OfflineState = 25;
  for (int i = 0; i < this->offlinestate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(25, this->offlinestate(i), target);
  }

  // optional int32 PoolCardLeftNums = 26;
  if (has_poolcardleftnums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->poolcardleftnums(), target);
  }

  // optional int32 preready_timer = 27;
  if (has_preready_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->preready_timer(), target);
  }

  // optional int32 stand_money = 28;
  if (has_stand_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->stand_money(), target);
  }

  // optional int32 HorseNum = 29;
  if (has_horsenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->horsenum(), target);
  }

  // optional int32 isDisbandroom = 30;
  if (has_isdisbandroom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->isdisbandroom(), target);
  }

  // optional .proto.game.AckDisbandApply Disbandinfo = 31;
  if (has_disbandinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->disbandinfo(), target);
  }

  // repeated .proto.game.AckDisbandChooseBc UserDisbandstate = 32;
  for (int i = 0; i < this->userdisbandstate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->userdisbandstate(i), target);
  }

  // repeated .proto.game.AckUserOnlineState UserOnlinestate = 33;
  for (int i = 0; i < this->useronlinestate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->useronlinestate(i), target);
  }

  // repeated .proto.game.AckUserOvertimeState UserOvertime = 34;
  for (int i = 0; i < this->userovertime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->userovertime(i), target);
  }

  // optional bool IsZhuanZhuanRoom = 35;
  if (has_iszhuanzhuanroom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->iszhuanzhuanroom(), target);
  }

  // optional .proto.game.tagReadyInfo UserReadyInfo = 36;
  if (has_userreadyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->userreadyinfo(), target);
  }

  // optional int32 roomGolden = 37;
  if (has_roomgolden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->roomgolden(), target);
  }

  // repeated int32 RoomConfigID = 38;
  for (int i = 0; i < this->roomconfigid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(38, this->roomconfigid(i), target);
  }

  // optional .proto.game.TotalRoundScore totalRoundScore = 39;
  if (has_totalroundscore()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->totalroundscore(), target);
  }

  // optional int32 encrypt_code = 40;
  if (has_encrypt_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->encrypt_code(), target);
  }

  // optional int32 OpType2 = 41;
  if (has_optype2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->optype2(), target);
  }

  // optional string md5 = 42;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->md5(), target);
  }

  // optional int32 operateid = 43;
  if (has_operateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->operateid(), target);
  }

  // optional int32 auto_disband_state = 44;
  if (has_auto_disband_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->auto_disband_state(), target);
  }

  // repeated int32 auto_disband_chairids = 45;
  for (int i = 0; i < this->auto_disband_chairids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(45, this->auto_disband_chairids(i), target);
  }

  // optional int32 auto_disband_remaintime = 46;
  if (has_auto_disband_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->auto_disband_remaintime(), target);
  }

  // optional int32 auto_disband_time = 47;
  if (has_auto_disband_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->auto_disband_time(), target);
  }

  // optional int32 totalcount = 48;
  if (has_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->totalcount(), target);
  }

  // optional int32 currentcount = 49;
  if (has_currentcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->currentcount(), target);
  }

  // repeated int32 userchangemode = 50;
  for (int i = 0; i < this->userchangemode_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(50, this->userchangemode(i), target);
  }

  // optional .proto.game.ExMsg msg = 51;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->msg(), target);
  }

  // repeated .proto.game.CardArr cardList = 60;
  for (int i = 0; i < this->cardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->cardlist(i), target);
  }

  // optional .proto.game.TestSvrConf test_svr_conf = 61;
  if (has_test_svr_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->test_svr_conf(), target);
  }

  // repeated .proto.game.DaAnTing daan_ting = 80;
  for (int i = 0; i < this->daan_ting_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        80, this->daan_ting(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckGameScene)
  return target;
}

int AckGameScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 changetime = 1;
    if (has_changetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changetime());
    }

    // optional int32 lacktypetime = 2;
    if (has_lacktypetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lacktypetime());
    }

    // optional int32 outcardtime = 3;
    if (has_outcardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardtime());
    }

    // optional int32 operatetime = 4;
    if (has_operatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operatetime());
    }

    // optional int32 basescore = 5;
    if (has_basescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basescore());
    }

    // optional int32 delaytime = 6;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 SceneStatus = 7;
    if (has_scenestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scenestatus());
    }

    // optional int32 LeftTime = 8;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto.game.HandCards UserCard = 9;
    if (has_usercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usercard());
    }

    // optional int32 CurOutCardUser = 11;
    if (has_curoutcarduser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curoutcarduser());
    }

    // optional int32 curOutCard = 13;
    if (has_curoutcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curoutcard());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 IsAutoHu = 17;
    if (has_isautohu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isautohu());
    }

    // optional int32 BankerChairid = 18;
    if (has_bankerchairid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerchairid());
    }

    // optional int32 IscurGetCard = 20;
    if (has_iscurgetcard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscurgetcard());
    }

    // optional int32 Card = 21;
    if (has_card()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 OpType = 22;
    if (has_optype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional int32 PoolCardLeftNums = 26;
    if (has_poolcardleftnums()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poolcardleftnums());
    }

    // optional int32 preready_timer = 27;
    if (has_preready_timer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preready_timer());
    }

    // optional int32 stand_money = 28;
    if (has_stand_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stand_money());
    }

    // optional int32 HorseNum = 29;
    if (has_horsenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horsenum());
    }

    // optional int32 isDisbandroom = 30;
    if (has_isdisbandroom()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdisbandroom());
    }

    // optional .proto.game.AckDisbandApply Disbandinfo = 31;
    if (has_disbandinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disbandinfo());
    }

  }
  if (_has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    // optional bool IsZhuanZhuanRoom = 35;
    if (has_iszhuanzhuanroom()) {
      total_size += 2 + 1;
    }

    // optional .proto.game.tagReadyInfo UserReadyInfo = 36;
    if (has_userreadyinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userreadyinfo());
    }

    // optional int32 roomGolden = 37;
    if (has_roomgolden()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomgolden());
    }

    // optional .proto.game.TotalRoundScore totalRoundScore = 39;
    if (has_totalroundscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->totalroundscore());
    }

    // optional int32 encrypt_code = 40;
    if (has_encrypt_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->encrypt_code());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 OpType2 = 41;
    if (has_optype2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype2());
    }

    // optional string md5 = 42;
    if (has_md5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

    // optional int32 operateid = 43;
    if (has_operateid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operateid());
    }

    // optional int32 auto_disband_state = 44;
    if (has_auto_disband_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_disband_state());
    }

    // optional int32 auto_disband_remaintime = 46;
    if (has_auto_disband_remaintime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_disband_remaintime());
    }

    // optional int32 auto_disband_time = 47;
    if (has_auto_disband_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_disband_time());
    }

    // optional int32 totalcount = 48;
    if (has_totalcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcount());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 currentcount = 49;
    if (has_currentcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentcount());
    }

    // optional .proto.game.ExMsg msg = 51;
    if (has_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

    // optional .proto.game.TestSvrConf test_svr_conf = 61;
    if (has_test_svr_conf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test_svr_conf());
    }

  }
  // repeated int32 HandCardNums = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->handcardnums_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handcardnums(i));
    }
    total_size += 1 * this->handcardnums_size() + data_size;
  }

  // repeated .proto.game.tagShowOutCard ShowCard = 12;
  total_size += 1 * this->showcard_size();
  for (int i = 0; i < this->showcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->showcard(i));
  }

  // repeated .proto.game.tagUserHuInfo HuInfo = 14;
  total_size += 1 * this->huinfo_size();
  for (int i = 0; i < this->huinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huinfo(i));
  }

  // repeated int32 TotalScore = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->totalscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->totalscore(i));
    }
    total_size += 1 * this->totalscore_size() + data_size;
  }

  // repeated .proto.game.tagGroupCard GroupCard = 16;
  total_size += 2 * this->groupcard_size();
  for (int i = 0; i < this->groupcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groupcard(i));
  }

  // repeated int32 UserLackType = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->userlacktype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->userlacktype(i));
    }
    total_size += 2 * this->userlacktype_size() + data_size;
  }

  // repeated .proto.game.tagGangInfo GangInfo = 23;
  total_size += 2 * this->ganginfo_size();
  for (int i = 0; i < this->ganginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ganginfo(i));
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 24;
  total_size += 2 * this->listeninfo_size();
  for (int i = 0; i < this->listeninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listeninfo(i));
  }

  // repeated int32 OfflineState = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->offlinestate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->offlinestate(i));
    }
    total_size += 2 * this->offlinestate_size() + data_size;
  }

  // repeated .proto.game.AckDisbandChooseBc UserDisbandstate = 32;
  total_size += 2 * this->userdisbandstate_size();
  for (int i = 0; i < this->userdisbandstate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userdisbandstate(i));
  }

  // repeated .proto.game.AckUserOnlineState UserOnlinestate = 33;
  total_size += 2 * this->useronlinestate_size();
  for (int i = 0; i < this->useronlinestate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->useronlinestate(i));
  }

  // repeated .proto.game.AckUserOvertimeState UserOvertime = 34;
  total_size += 2 * this->userovertime_size();
  for (int i = 0; i < this->userovertime_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userovertime(i));
  }

  // repeated int32 RoomConfigID = 38;
  {
    int data_size = 0;
    for (int i = 0; i < this->roomconfigid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->roomconfigid(i));
    }
    total_size += 2 * this->roomconfigid_size() + data_size;
  }

  // repeated int32 auto_disband_chairids = 45;
  {
    int data_size = 0;
    for (int i = 0; i < this->auto_disband_chairids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->auto_disband_chairids(i));
    }
    total_size += 2 * this->auto_disband_chairids_size() + data_size;
  }

  // repeated int32 userchangemode = 50;
  {
    int data_size = 0;
    for (int i = 0; i < this->userchangemode_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->userchangemode(i));
    }
    total_size += 2 * this->userchangemode_size() + data_size;
  }

  // repeated .proto.game.CardArr cardList = 60;
  total_size += 2 * this->cardlist_size();
  for (int i = 0; i < this->cardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardlist(i));
  }

  // repeated .proto.game.DaAnTing daan_ting = 80;
  total_size += 2 * this->daan_ting_size();
  for (int i = 0; i < this->daan_ting_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daan_ting(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGameScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGameScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGameScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGameScene::MergeFrom(const AckGameScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  handcardnums_.MergeFrom(from.handcardnums_);
  showcard_.MergeFrom(from.showcard_);
  huinfo_.MergeFrom(from.huinfo_);
  totalscore_.MergeFrom(from.totalscore_);
  groupcard_.MergeFrom(from.groupcard_);
  userlacktype_.MergeFrom(from.userlacktype_);
  ganginfo_.MergeFrom(from.ganginfo_);
  listeninfo_.MergeFrom(from.listeninfo_);
  offlinestate_.MergeFrom(from.offlinestate_);
  userdisbandstate_.MergeFrom(from.userdisbandstate_);
  useronlinestate_.MergeFrom(from.useronlinestate_);
  userovertime_.MergeFrom(from.userovertime_);
  roomconfigid_.MergeFrom(from.roomconfigid_);
  auto_disband_chairids_.MergeFrom(from.auto_disband_chairids_);
  userchangemode_.MergeFrom(from.userchangemode_);
  cardlist_.MergeFrom(from.cardlist_);
  daan_ting_.MergeFrom(from.daan_ting_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_changetime()) {
      set_changetime(from.changetime());
    }
    if (from.has_lacktypetime()) {
      set_lacktypetime(from.lacktypetime());
    }
    if (from.has_outcardtime()) {
      set_outcardtime(from.outcardtime());
    }
    if (from.has_operatetime()) {
      set_operatetime(from.operatetime());
    }
    if (from.has_basescore()) {
      set_basescore(from.basescore());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_scenestatus()) {
      set_scenestatus(from.scenestatus());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_usercard()) {
      mutable_usercard()->::proto::game::HandCards::MergeFrom(from.usercard());
    }
    if (from.has_curoutcarduser()) {
      set_curoutcarduser(from.curoutcarduser());
    }
    if (from.has_curoutcard()) {
      set_curoutcard(from.curoutcard());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_isautohu()) {
      set_isautohu(from.isautohu());
    }
    if (from.has_bankerchairid()) {
      set_bankerchairid(from.bankerchairid());
    }
    if (from.has_iscurgetcard()) {
      set_iscurgetcard(from.iscurgetcard());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_poolcardleftnums()) {
      set_poolcardleftnums(from.poolcardleftnums());
    }
    if (from.has_preready_timer()) {
      set_preready_timer(from.preready_timer());
    }
    if (from.has_stand_money()) {
      set_stand_money(from.stand_money());
    }
    if (from.has_horsenum()) {
      set_horsenum(from.horsenum());
    }
    if (from.has_isdisbandroom()) {
      set_isdisbandroom(from.isdisbandroom());
    }
    if (from.has_disbandinfo()) {
      mutable_disbandinfo()->::proto::game::AckDisbandApply::MergeFrom(from.disbandinfo());
    }
  }
  if (from._has_bits_[34 / 32] & (0xffu << (34 % 32))) {
    if (from.has_iszhuanzhuanroom()) {
      set_iszhuanzhuanroom(from.iszhuanzhuanroom());
    }
    if (from.has_userreadyinfo()) {
      mutable_userreadyinfo()->::proto::game::tagReadyInfo::MergeFrom(from.userreadyinfo());
    }
    if (from.has_roomgolden()) {
      set_roomgolden(from.roomgolden());
    }
    if (from.has_totalroundscore()) {
      mutable_totalroundscore()->::proto::game::TotalRoundScore::MergeFrom(from.totalroundscore());
    }
    if (from.has_encrypt_code()) {
      set_encrypt_code(from.encrypt_code());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_optype2()) {
      set_optype2(from.optype2());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
    if (from.has_operateid()) {
      set_operateid(from.operateid());
    }
    if (from.has_auto_disband_state()) {
      set_auto_disband_state(from.auto_disband_state());
    }
    if (from.has_auto_disband_remaintime()) {
      set_auto_disband_remaintime(from.auto_disband_remaintime());
    }
    if (from.has_auto_disband_time()) {
      set_auto_disband_time(from.auto_disband_time());
    }
    if (from.has_totalcount()) {
      set_totalcount(from.totalcount());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_currentcount()) {
      set_currentcount(from.currentcount());
    }
    if (from.has_msg()) {
      mutable_msg()->::proto::game::ExMsg::MergeFrom(from.msg());
    }
    if (from.has_test_svr_conf()) {
      mutable_test_svr_conf()->::proto::game::TestSvrConf::MergeFrom(from.test_svr_conf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGameScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGameScene::CopyFrom(const AckGameScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGameScene::IsInitialized() const {

  if (has_usercard()) {
    if (!this->usercard().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->showcard())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->groupcard())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ganginfo())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->listeninfo())) return false;
  if (has_disbandinfo()) {
    if (!this->disbandinfo().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->userdisbandstate())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->useronlinestate())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->userovertime())) return false;
  return true;
}

void AckGameScene::Swap(AckGameScene* other) {
  if (other != this) {
    std::swap(changetime_, other->changetime_);
    std::swap(lacktypetime_, other->lacktypetime_);
    std::swap(outcardtime_, other->outcardtime_);
    std::swap(operatetime_, other->operatetime_);
    std::swap(basescore_, other->basescore_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(scenestatus_, other->scenestatus_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(usercard_, other->usercard_);
    handcardnums_.Swap(&other->handcardnums_);
    std::swap(curoutcarduser_, other->curoutcarduser_);
    showcard_.Swap(&other->showcard_);
    std::swap(curoutcard_, other->curoutcard_);
    huinfo_.Swap(&other->huinfo_);
    totalscore_.Swap(&other->totalscore_);
    groupcard_.Swap(&other->groupcard_);
    std::swap(isautohu_, other->isautohu_);
    std::swap(bankerchairid_, other->bankerchairid_);
    userlacktype_.Swap(&other->userlacktype_);
    std::swap(iscurgetcard_, other->iscurgetcard_);
    std::swap(card_, other->card_);
    std::swap(optype_, other->optype_);
    ganginfo_.Swap(&other->ganginfo_);
    listeninfo_.Swap(&other->listeninfo_);
    offlinestate_.Swap(&other->offlinestate_);
    std::swap(poolcardleftnums_, other->poolcardleftnums_);
    std::swap(preready_timer_, other->preready_timer_);
    std::swap(stand_money_, other->stand_money_);
    std::swap(horsenum_, other->horsenum_);
    std::swap(isdisbandroom_, other->isdisbandroom_);
    std::swap(disbandinfo_, other->disbandinfo_);
    userdisbandstate_.Swap(&other->userdisbandstate_);
    useronlinestate_.Swap(&other->useronlinestate_);
    userovertime_.Swap(&other->userovertime_);
    std::swap(iszhuanzhuanroom_, other->iszhuanzhuanroom_);
    std::swap(userreadyinfo_, other->userreadyinfo_);
    std::swap(roomgolden_, other->roomgolden_);
    roomconfigid_.Swap(&other->roomconfigid_);
    std::swap(totalroundscore_, other->totalroundscore_);
    std::swap(encrypt_code_, other->encrypt_code_);
    std::swap(optype2_, other->optype2_);
    std::swap(md5_, other->md5_);
    std::swap(operateid_, other->operateid_);
    std::swap(auto_disband_state_, other->auto_disband_state_);
    auto_disband_chairids_.Swap(&other->auto_disband_chairids_);
    std::swap(auto_disband_remaintime_, other->auto_disband_remaintime_);
    std::swap(auto_disband_time_, other->auto_disband_time_);
    std::swap(totalcount_, other->totalcount_);
    std::swap(currentcount_, other->currentcount_);
    userchangemode_.Swap(&other->userchangemode_);
    std::swap(msg_, other->msg_);
    cardlist_.Swap(&other->cardlist_);
    std::swap(test_svr_conf_, other->test_svr_conf_);
    daan_ting_.Swap(&other->daan_ting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGameScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGameScene_descriptor_;
  metadata.reflection = AckGameScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestSvrConf::kClientAntiCheatFieldNumber;
#endif  // !_MSC_VER

TestSvrConf::TestSvrConf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.TestSvrConf)
}

void TestSvrConf::InitAsDefaultInstance() {
}

TestSvrConf::TestSvrConf(const TestSvrConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.TestSvrConf)
}

void TestSvrConf::SharedCtor() {
  _cached_size_ = 0;
  client_anti_cheat_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestSvrConf::~TestSvrConf() {
  // @@protoc_insertion_point(destructor:proto.game.TestSvrConf)
  SharedDtor();
}

void TestSvrConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestSvrConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestSvrConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestSvrConf_descriptor_;
}

const TestSvrConf& TestSvrConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

TestSvrConf* TestSvrConf::default_instance_ = NULL;

TestSvrConf* TestSvrConf::New() const {
  return new TestSvrConf;
}

void TestSvrConf::Clear() {
  client_anti_cheat_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestSvrConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.TestSvrConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool client_anti_cheat = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &client_anti_cheat_)));
          set_has_client_anti_cheat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.TestSvrConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.TestSvrConf)
  return false;
#undef DO_
}

void TestSvrConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.TestSvrConf)
  // optional bool client_anti_cheat = 1;
  if (has_client_anti_cheat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->client_anti_cheat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.TestSvrConf)
}

::google::protobuf::uint8* TestSvrConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.TestSvrConf)
  // optional bool client_anti_cheat = 1;
  if (has_client_anti_cheat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->client_anti_cheat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.TestSvrConf)
  return target;
}

int TestSvrConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool client_anti_cheat = 1;
    if (has_client_anti_cheat()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestSvrConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestSvrConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestSvrConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestSvrConf::MergeFrom(const TestSvrConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_anti_cheat()) {
      set_client_anti_cheat(from.client_anti_cheat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestSvrConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestSvrConf::CopyFrom(const TestSvrConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestSvrConf::IsInitialized() const {

  return true;
}

void TestSvrConf::Swap(TestSvrConf* other) {
  if (other != this) {
    std::swap(client_anti_cheat_, other->client_anti_cheat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestSvrConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestSvrConf_descriptor_;
  metadata.reflection = TestSvrConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserReady::kReadyFieldNumber;
#endif  // !_MSC_VER

AckUserReady::AckUserReady()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckUserReady)
}

void AckUserReady::InitAsDefaultInstance() {
}

AckUserReady::AckUserReady(const AckUserReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckUserReady)
}

void AckUserReady::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserReady::~AckUserReady() {
  // @@protoc_insertion_point(destructor:proto.game.AckUserReady)
  SharedDtor();
}

void AckUserReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUserReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserReady_descriptor_;
}

const AckUserReady& AckUserReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUserReady* AckUserReady::default_instance_ = NULL;

AckUserReady* AckUserReady::New() const {
  return new AckUserReady;
}

void AckUserReady::Clear() {
  ready_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckUserReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 ready = 1;
      case 1: {
        if (tag == 8) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_ready())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ready())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ready;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckUserReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckUserReady)
  return false;
#undef DO_
}

void AckUserReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckUserReady)
  // repeated int32 ready = 1;
  for (int i = 0; i < this->ready_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->ready(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckUserReady)
}

::google::protobuf::uint8* AckUserReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckUserReady)
  // repeated int32 ready = 1;
  for (int i = 0; i < this->ready_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->ready(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckUserReady)
  return target;
}

int AckUserReady::ByteSize() const {
  int total_size = 0;

  // repeated int32 ready = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ready_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ready(i));
    }
    total_size += 1 * this->ready_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserReady::MergeFrom(const AckUserReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  ready_.MergeFrom(from.ready_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserReady::CopyFrom(const AckUserReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserReady::IsInitialized() const {

  return true;
}

void AckUserReady::Swap(AckUserReady* other) {
  if (other != this) {
    ready_.Swap(&other->ready_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserReady_descriptor_;
  metadata.reflection = AckUserReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGameStart::kChairIDFieldNumber;
const int AckGameStart::kIsChangBankerFieldNumber;
const int AckGameStart::kTouZiInfoFieldNumber;
const int AckGameStart::kTotalcountFieldNumber;
const int AckGameStart::kCurrentcountFieldNumber;
#endif  // !_MSC_VER

AckGameStart::AckGameStart()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckGameStart)
}

void AckGameStart::InitAsDefaultInstance() {
}

AckGameStart::AckGameStart(const AckGameStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckGameStart)
}

void AckGameStart::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  ischangbanker_ = 0;
  totalcount_ = 0;
  currentcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGameStart::~AckGameStart() {
  // @@protoc_insertion_point(destructor:proto.game.AckGameStart)
  SharedDtor();
}

void AckGameStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGameStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGameStart_descriptor_;
}

const AckGameStart& AckGameStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckGameStart* AckGameStart::default_instance_ = NULL;

AckGameStart* AckGameStart::New() const {
  return new AckGameStart;
}

void AckGameStart::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckGameStart*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chairid_, ischangbanker_);
  ZR_(totalcount_, currentcount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  touziinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckGameStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsChangBanker;
        break;
      }

      // optional int32 IsChangBanker = 2;
      case 2: {
        if (tag == 16) {
         parse_IsChangBanker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ischangbanker_)));
          set_has_ischangbanker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TouZiInfo;
        break;
      }

      // repeated int32 TouZiInfo = 3;
      case 3: {
        if (tag == 24) {
         parse_TouZiInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_touziinfo())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_touziinfo())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TouZiInfo;
        if (input->ExpectTag(32)) goto parse_totalcount;
        break;
      }

      // optional int32 totalcount = 4;
      case 4: {
        if (tag == 32) {
         parse_totalcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcount_)));
          set_has_totalcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_currentcount;
        break;
      }

      // optional int32 currentcount = 5;
      case 5: {
        if (tag == 40) {
         parse_currentcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentcount_)));
          set_has_currentcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckGameStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckGameStart)
  return false;
#undef DO_
}

void AckGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckGameStart)
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 IsChangBanker = 2;
  if (has_ischangbanker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ischangbanker(), output);
  }

  // repeated int32 TouZiInfo = 3;
  for (int i = 0; i < this->touziinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->touziinfo(i), output);
  }

  // optional int32 totalcount = 4;
  if (has_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->totalcount(), output);
  }

  // optional int32 currentcount = 5;
  if (has_currentcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->currentcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckGameStart)
}

::google::protobuf::uint8* AckGameStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckGameStart)
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 IsChangBanker = 2;
  if (has_ischangbanker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ischangbanker(), target);
  }

  // repeated int32 TouZiInfo = 3;
  for (int i = 0; i < this->touziinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->touziinfo(i), target);
  }

  // optional int32 totalcount = 4;
  if (has_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->totalcount(), target);
  }

  // optional int32 currentcount = 5;
  if (has_currentcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->currentcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckGameStart)
  return target;
}

int AckGameStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 IsChangBanker = 2;
    if (has_ischangbanker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ischangbanker());
    }

    // optional int32 totalcount = 4;
    if (has_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcount());
    }

    // optional int32 currentcount = 5;
    if (has_currentcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentcount());
    }

  }
  // repeated int32 TouZiInfo = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->touziinfo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->touziinfo(i));
    }
    total_size += 1 * this->touziinfo_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGameStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGameStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGameStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGameStart::MergeFrom(const AckGameStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  touziinfo_.MergeFrom(from.touziinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_ischangbanker()) {
      set_ischangbanker(from.ischangbanker());
    }
    if (from.has_totalcount()) {
      set_totalcount(from.totalcount());
    }
    if (from.has_currentcount()) {
      set_currentcount(from.currentcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGameStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGameStart::CopyFrom(const AckGameStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGameStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckGameStart::Swap(AckGameStart* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(ischangbanker_, other->ischangbanker_);
    touziinfo_.Swap(&other->touziinfo_);
    std::swap(totalcount_, other->totalcount_);
    std::swap(currentcount_, other->currentcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGameStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGameStart_descriptor_;
  metadata.reflection = AckGameStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFirstHandCard::kUserCardFieldNumber;
const int AckFirstHandCard::kHandCardNumsFieldNumber;
const int AckFirstHandCard::kCardNumFieldNumber;
const int AckFirstHandCard::kEncryptCodeFieldNumber;
const int AckFirstHandCard::kMd5FieldNumber;
const int AckFirstHandCard::kFirstGetCardFieldNumber;
const int AckFirstHandCard::kVoiceRoomFieldNumber;
const int AckFirstHandCard::kPublicChannelIdFieldNumber;
const int AckFirstHandCard::kGroupChannelIdsFieldNumber;
#endif  // !_MSC_VER

AckFirstHandCard::AckFirstHandCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckFirstHandCard)
}

void AckFirstHandCard::InitAsDefaultInstance() {
  usercard_ = const_cast< ::proto::game::HandCards*>(&::proto::game::HandCards::default_instance());
}

AckFirstHandCard::AckFirstHandCard(const AckFirstHandCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckFirstHandCard)
}

void AckFirstHandCard::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  usercard_ = NULL;
  cardnum_ = 0;
  encrypt_code_ = 0;
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_get_card_ = 0;
  voice_room_ = 0;
  public_channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFirstHandCard::~AckFirstHandCard() {
  // @@protoc_insertion_point(destructor:proto.game.AckFirstHandCard)
  SharedDtor();
}

void AckFirstHandCard::SharedDtor() {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete md5_;
  }
  if (public_channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete public_channel_id_;
  }
  if (this != default_instance_) {
    delete usercard_;
  }
}

void AckFirstHandCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFirstHandCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFirstHandCard_descriptor_;
}

const AckFirstHandCard& AckFirstHandCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckFirstHandCard* AckFirstHandCard::default_instance_ = NULL;

AckFirstHandCard* AckFirstHandCard::New() const {
  return new AckFirstHandCard;
}

void AckFirstHandCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckFirstHandCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 253) {
    ZR_(cardnum_, encrypt_code_);
    ZR_(first_get_card_, voice_room_);
    if (has_usercard()) {
      if (usercard_ != NULL) usercard_->::proto::game::HandCards::Clear();
    }
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        md5_->clear();
      }
    }
    if (has_public_channel_id()) {
      if (public_channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        public_channel_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  handcardnums_.Clear();
  group_channel_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFirstHandCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckFirstHandCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.game.HandCards UserCard = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usercard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HandCardNums;
        break;
      }

      // repeated int32 HandCardNums = 2;
      case 2: {
        if (tag == 16) {
         parse_HandCardNums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_handcardnums())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handcardnums())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HandCardNums;
        if (input->ExpectTag(24)) goto parse_CardNum;
        break;
      }

      // optional int32 CardNum = 3;
      case 3: {
        if (tag == 24) {
         parse_CardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardnum_)));
          set_has_cardnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_encrypt_code;
        break;
      }

      // optional int32 encrypt_code = 4;
      case 4: {
        if (tag == 32) {
         parse_encrypt_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encrypt_code_)));
          set_has_encrypt_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_md5;
        break;
      }

      // optional string md5 = 5;
      case 5: {
        if (tag == 42) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "md5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_first_get_card;
        break;
      }

      // optional int32 first_get_card = 6;
      case 6: {
        if (tag == 48) {
         parse_first_get_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_get_card_)));
          set_has_first_get_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_voice_room;
        break;
      }

      // optional int32 voice_room = 7;
      case 7: {
        if (tag == 56) {
         parse_voice_room:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voice_room_)));
          set_has_voice_room();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_public_channel_id;
        break;
      }

      // optional string public_channel_id = 8;
      case 8: {
        if (tag == 66) {
         parse_public_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->public_channel_id().data(), this->public_channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "public_channel_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_group_channel_ids;
        break;
      }

      // repeated string group_channel_ids = 9;
      case 9: {
        if (tag == 74) {
         parse_group_channel_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_group_channel_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_channel_ids(this->group_channel_ids_size() - 1).data(),
            this->group_channel_ids(this->group_channel_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_channel_ids");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_group_channel_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckFirstHandCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckFirstHandCard)
  return false;
#undef DO_
}

void AckFirstHandCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckFirstHandCard)
  // optional .proto.game.HandCards UserCard = 1;
  if (has_usercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->usercard(), output);
  }

  // repeated int32 HandCardNums = 2;
  for (int i = 0; i < this->handcardnums_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->handcardnums(i), output);
  }

  // optional int32 CardNum = 3;
  if (has_cardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cardnum(), output);
  }

  // optional int32 encrypt_code = 4;
  if (has_encrypt_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->encrypt_code(), output);
  }

  // optional string md5 = 5;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->md5(), output);
  }

  // optional int32 first_get_card = 6;
  if (has_first_get_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->first_get_card(), output);
  }

  // optional int32 voice_room = 7;
  if (has_voice_room()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->voice_room(), output);
  }

  // optional string public_channel_id = 8;
  if (has_public_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_channel_id().data(), this->public_channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "public_channel_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->public_channel_id(), output);
  }

  // repeated string group_channel_ids = 9;
  for (int i = 0; i < this->group_channel_ids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->group_channel_ids(i).data(), this->group_channel_ids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "group_channel_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->group_channel_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckFirstHandCard)
}

::google::protobuf::uint8* AckFirstHandCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckFirstHandCard)
  // optional .proto.game.HandCards UserCard = 1;
  if (has_usercard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->usercard(), target);
  }

  // repeated int32 HandCardNums = 2;
  for (int i = 0; i < this->handcardnums_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->handcardnums(i), target);
  }

  // optional int32 CardNum = 3;
  if (has_cardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cardnum(), target);
  }

  // optional int32 encrypt_code = 4;
  if (has_encrypt_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->encrypt_code(), target);
  }

  // optional string md5 = 5;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->md5(), target);
  }

  // optional int32 first_get_card = 6;
  if (has_first_get_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->first_get_card(), target);
  }

  // optional int32 voice_room = 7;
  if (has_voice_room()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->voice_room(), target);
  }

  // optional string public_channel_id = 8;
  if (has_public_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_channel_id().data(), this->public_channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "public_channel_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->public_channel_id(), target);
  }

  // repeated string group_channel_ids = 9;
  for (int i = 0; i < this->group_channel_ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_channel_ids(i).data(), this->group_channel_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_channel_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->group_channel_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckFirstHandCard)
  return target;
}

int AckFirstHandCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.game.HandCards UserCard = 1;
    if (has_usercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usercard());
    }

    // optional int32 CardNum = 3;
    if (has_cardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardnum());
    }

    // optional int32 encrypt_code = 4;
    if (has_encrypt_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->encrypt_code());
    }

    // optional string md5 = 5;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

    // optional int32 first_get_card = 6;
    if (has_first_get_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_get_card());
    }

    // optional int32 voice_room = 7;
    if (has_voice_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voice_room());
    }

    // optional string public_channel_id = 8;
    if (has_public_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_channel_id());
    }

  }
  // repeated int32 HandCardNums = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->handcardnums_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handcardnums(i));
    }
    total_size += 1 * this->handcardnums_size() + data_size;
  }

  // repeated string group_channel_ids = 9;
  total_size += 1 * this->group_channel_ids_size();
  for (int i = 0; i < this->group_channel_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->group_channel_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFirstHandCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFirstHandCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFirstHandCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFirstHandCard::MergeFrom(const AckFirstHandCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  handcardnums_.MergeFrom(from.handcardnums_);
  group_channel_ids_.MergeFrom(from.group_channel_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usercard()) {
      mutable_usercard()->::proto::game::HandCards::MergeFrom(from.usercard());
    }
    if (from.has_cardnum()) {
      set_cardnum(from.cardnum());
    }
    if (from.has_encrypt_code()) {
      set_encrypt_code(from.encrypt_code());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
    if (from.has_first_get_card()) {
      set_first_get_card(from.first_get_card());
    }
    if (from.has_voice_room()) {
      set_voice_room(from.voice_room());
    }
    if (from.has_public_channel_id()) {
      set_public_channel_id(from.public_channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFirstHandCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFirstHandCard::CopyFrom(const AckFirstHandCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFirstHandCard::IsInitialized() const {

  if (has_usercard()) {
    if (!this->usercard().IsInitialized()) return false;
  }
  return true;
}

void AckFirstHandCard::Swap(AckFirstHandCard* other) {
  if (other != this) {
    std::swap(usercard_, other->usercard_);
    handcardnums_.Swap(&other->handcardnums_);
    std::swap(cardnum_, other->cardnum_);
    std::swap(encrypt_code_, other->encrypt_code_);
    std::swap(md5_, other->md5_);
    std::swap(first_get_card_, other->first_get_card_);
    std::swap(voice_room_, other->voice_room_);
    std::swap(public_channel_id_, other->public_channel_id_);
    group_channel_ids_.Swap(&other->group_channel_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFirstHandCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFirstHandCard_descriptor_;
  metadata.reflection = AckFirstHandCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoFirstHandCard::kUserCardFieldNumber;
const int VideoFirstHandCard::kFirstGetCardFieldNumber;
#endif  // !_MSC_VER

VideoFirstHandCard::VideoFirstHandCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.VideoFirstHandCard)
}

void VideoFirstHandCard::InitAsDefaultInstance() {
}

VideoFirstHandCard::VideoFirstHandCard(const VideoFirstHandCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.VideoFirstHandCard)
}

void VideoFirstHandCard::SharedCtor() {
  _cached_size_ = 0;
  first_get_card_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoFirstHandCard::~VideoFirstHandCard() {
  // @@protoc_insertion_point(destructor:proto.game.VideoFirstHandCard)
  SharedDtor();
}

void VideoFirstHandCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VideoFirstHandCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoFirstHandCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoFirstHandCard_descriptor_;
}

const VideoFirstHandCard& VideoFirstHandCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

VideoFirstHandCard* VideoFirstHandCard::default_instance_ = NULL;

VideoFirstHandCard* VideoFirstHandCard::New() const {
  return new VideoFirstHandCard;
}

void VideoFirstHandCard::Clear() {
  first_get_card_ = 0;
  usercard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoFirstHandCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.VideoFirstHandCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.HandCards UserCard = 1;
      case 1: {
        if (tag == 10) {
         parse_UserCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usercard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UserCard;
        if (input->ExpectTag(16)) goto parse_first_get_card;
        break;
      }

      // optional int32 first_get_card = 2;
      case 2: {
        if (tag == 16) {
         parse_first_get_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_get_card_)));
          set_has_first_get_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.VideoFirstHandCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.VideoFirstHandCard)
  return false;
#undef DO_
}

void VideoFirstHandCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.VideoFirstHandCard)
  // repeated .proto.game.HandCards UserCard = 1;
  for (int i = 0; i < this->usercard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->usercard(i), output);
  }

  // optional int32 first_get_card = 2;
  if (has_first_get_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->first_get_card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.VideoFirstHandCard)
}

::google::protobuf::uint8* VideoFirstHandCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.VideoFirstHandCard)
  // repeated .proto.game.HandCards UserCard = 1;
  for (int i = 0; i < this->usercard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->usercard(i), target);
  }

  // optional int32 first_get_card = 2;
  if (has_first_get_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->first_get_card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.VideoFirstHandCard)
  return target;
}

int VideoFirstHandCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 first_get_card = 2;
    if (has_first_get_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_get_card());
    }

  }
  // repeated .proto.game.HandCards UserCard = 1;
  total_size += 1 * this->usercard_size();
  for (int i = 0; i < this->usercard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usercard(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoFirstHandCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoFirstHandCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoFirstHandCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoFirstHandCard::MergeFrom(const VideoFirstHandCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  usercard_.MergeFrom(from.usercard_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_first_get_card()) {
      set_first_get_card(from.first_get_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoFirstHandCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoFirstHandCard::CopyFrom(const VideoFirstHandCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoFirstHandCard::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->usercard())) return false;
  return true;
}

void VideoFirstHandCard::Swap(VideoFirstHandCard* other) {
  if (other != this) {
    usercard_.Swap(&other->usercard_);
    std::swap(first_get_card_, other->first_get_card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoFirstHandCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoFirstHandCard_descriptor_;
  metadata.reflection = VideoFirstHandCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagHuInfo::kCardFieldNumber;
const int tagHuInfo::kLeftNumFieldNumber;
const int tagHuInfo::kHuFanNumFieldNumber;
#endif  // !_MSC_VER

tagHuInfo::tagHuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.tagHuInfo)
}

void tagHuInfo::InitAsDefaultInstance() {
}

tagHuInfo::tagHuInfo(const tagHuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.tagHuInfo)
}

void tagHuInfo::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  leftnum_ = 0;
  hufannum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagHuInfo::~tagHuInfo() {
  // @@protoc_insertion_point(destructor:proto.game.tagHuInfo)
  SharedDtor();
}

void tagHuInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagHuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagHuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagHuInfo_descriptor_;
}

const tagHuInfo& tagHuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagHuInfo* tagHuInfo::default_instance_ = NULL;

tagHuInfo* tagHuInfo::New() const {
  return new tagHuInfo;
}

void tagHuInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<tagHuInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(card_, hufannum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagHuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.tagHuInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Card = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LeftNum;
        break;
      }

      // optional int32 LeftNum = 2;
      case 2: {
        if (tag == 16) {
         parse_LeftNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftnum_)));
          set_has_leftnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_HuFanNum;
        break;
      }

      // optional int32 HuFanNum = 3;
      case 3: {
        if (tag == 24) {
         parse_HuFanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hufannum_)));
          set_has_hufannum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.tagHuInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.tagHuInfo)
  return false;
#undef DO_
}

void tagHuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.tagHuInfo)
  // required int32 Card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  // optional int32 LeftNum = 2;
  if (has_leftnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leftnum(), output);
  }

  // optional int32 HuFanNum = 3;
  if (has_hufannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hufannum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.tagHuInfo)
}

::google::protobuf::uint8* tagHuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.tagHuInfo)
  // required int32 Card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  // optional int32 LeftNum = 2;
  if (has_leftnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leftnum(), target);
  }

  // optional int32 HuFanNum = 3;
  if (has_hufannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hufannum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.tagHuInfo)
  return target;
}

int tagHuInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 LeftNum = 2;
    if (has_leftnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftnum());
    }

    // optional int32 HuFanNum = 3;
    if (has_hufannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hufannum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagHuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagHuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagHuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagHuInfo::MergeFrom(const tagHuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_leftnum()) {
      set_leftnum(from.leftnum());
    }
    if (from.has_hufannum()) {
      set_hufannum(from.hufannum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagHuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagHuInfo::CopyFrom(const tagHuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagHuInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagHuInfo::Swap(tagHuInfo* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(leftnum_, other->leftnum_);
    std::swap(hufannum_, other->hufannum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagHuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagHuInfo_descriptor_;
  metadata.reflection = tagHuInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagListenInfo::kOutCardFieldNumber;
const int tagListenInfo::kHuInfoFieldNumber;
#endif  // !_MSC_VER

tagListenInfo::tagListenInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.tagListenInfo)
}

void tagListenInfo::InitAsDefaultInstance() {
}

tagListenInfo::tagListenInfo(const tagListenInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.tagListenInfo)
}

void tagListenInfo::SharedCtor() {
  _cached_size_ = 0;
  outcard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagListenInfo::~tagListenInfo() {
  // @@protoc_insertion_point(destructor:proto.game.tagListenInfo)
  SharedDtor();
}

void tagListenInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagListenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagListenInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagListenInfo_descriptor_;
}

const tagListenInfo& tagListenInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagListenInfo* tagListenInfo::default_instance_ = NULL;

tagListenInfo* tagListenInfo::New() const {
  return new tagListenInfo;
}

void tagListenInfo::Clear() {
  outcard_ = 0;
  huinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagListenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.tagListenInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 OutCard = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcard_)));
          set_has_outcard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_HuInfo;
        break;
      }

      // repeated .proto.game.tagHuInfo HuInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_HuInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_HuInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.tagListenInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.tagListenInfo)
  return false;
#undef DO_
}

void tagListenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.tagListenInfo)
  // optional int32 OutCard = 1;
  if (has_outcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->outcard(), output);
  }

  // repeated .proto.game.tagHuInfo HuInfo = 2;
  for (int i = 0; i < this->huinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->huinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.tagListenInfo)
}

::google::protobuf::uint8* tagListenInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.tagListenInfo)
  // optional int32 OutCard = 1;
  if (has_outcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->outcard(), target);
  }

  // repeated .proto.game.tagHuInfo HuInfo = 2;
  for (int i = 0; i < this->huinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->huinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.tagListenInfo)
  return target;
}

int tagListenInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 OutCard = 1;
    if (has_outcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcard());
    }

  }
  // repeated .proto.game.tagHuInfo HuInfo = 2;
  total_size += 1 * this->huinfo_size();
  for (int i = 0; i < this->huinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagListenInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagListenInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagListenInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagListenInfo::MergeFrom(const tagListenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  huinfo_.MergeFrom(from.huinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_outcard()) {
      set_outcard(from.outcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagListenInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagListenInfo::CopyFrom(const tagListenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagListenInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->huinfo())) return false;
  return true;
}

void tagListenInfo::Swap(tagListenInfo* other) {
  if (other != this) {
    std::swap(outcard_, other->outcard_);
    huinfo_.Swap(&other->huinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagListenInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagListenInfo_descriptor_;
  metadata.reflection = tagListenInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagPreGangs::kAncardFieldNumber;
const int tagPreGangs::kOutcardsFieldNumber;
#endif  // !_MSC_VER

tagPreGangs::tagPreGangs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.tagPreGangs)
}

void tagPreGangs::InitAsDefaultInstance() {
}

tagPreGangs::tagPreGangs(const tagPreGangs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.tagPreGangs)
}

void tagPreGangs::SharedCtor() {
  _cached_size_ = 0;
  ancard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagPreGangs::~tagPreGangs() {
  // @@protoc_insertion_point(destructor:proto.game.tagPreGangs)
  SharedDtor();
}

void tagPreGangs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagPreGangs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPreGangs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagPreGangs_descriptor_;
}

const tagPreGangs& tagPreGangs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagPreGangs* tagPreGangs::default_instance_ = NULL;

tagPreGangs* tagPreGangs::New() const {
  return new tagPreGangs;
}

void tagPreGangs::Clear() {
  ancard_ = 0;
  outcards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagPreGangs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.tagPreGangs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ancard = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ancard_)));
          set_has_ancard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_outcards;
        break;
      }

      // repeated int32 outcards = 2;
      case 2: {
        if (tag == 16) {
         parse_outcards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_outcards())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outcards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_outcards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.tagPreGangs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.tagPreGangs)
  return false;
#undef DO_
}

void tagPreGangs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.tagPreGangs)
  // optional int32 ancard = 1;
  if (has_ancard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ancard(), output);
  }

  // repeated int32 outcards = 2;
  for (int i = 0; i < this->outcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->outcards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.tagPreGangs)
}

::google::protobuf::uint8* tagPreGangs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.tagPreGangs)
  // optional int32 ancard = 1;
  if (has_ancard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ancard(), target);
  }

  // repeated int32 outcards = 2;
  for (int i = 0; i < this->outcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->outcards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.tagPreGangs)
  return target;
}

int tagPreGangs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ancard = 1;
    if (has_ancard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ancard());
    }

  }
  // repeated int32 outcards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->outcards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outcards(i));
    }
    total_size += 1 * this->outcards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPreGangs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagPreGangs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagPreGangs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagPreGangs::MergeFrom(const tagPreGangs& from) {
  GOOGLE_CHECK_NE(&from, this);
  outcards_.MergeFrom(from.outcards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ancard()) {
      set_ancard(from.ancard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagPreGangs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPreGangs::CopyFrom(const tagPreGangs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPreGangs::IsInitialized() const {

  return true;
}

void tagPreGangs::Swap(tagPreGangs* other) {
  if (other != this) {
    std::swap(ancard_, other->ancard_);
    outcards_.Swap(&other->outcards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagPreGangs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagPreGangs_descriptor_;
  metadata.reflection = tagPreGangs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserGetCard::kChairIDFieldNumber;
const int AckUserGetCard::kLeftCardNumFieldNumber;
const int AckUserGetCard::kCardFieldNumber;
const int AckUserGetCard::kOpTypeFieldNumber;
const int AckUserGetCard::kGangInfoFieldNumber;
const int AckUserGetCard::kListenInfoFieldNumber;
const int AckUserGetCard::kOpType2FieldNumber;
const int AckUserGetCard::kFzTypeFieldNumber;
const int AckUserGetCard::kGetCardDirFieldNumber;
const int AckUserGetCard::kXyPregangFieldNumber;
const int AckUserGetCard::kLockLaiziFieldNumber;
const int AckUserGetCard::kGetlaiziFieldNumber;
const int AckUserGetCard::kEncryptCodeFieldNumber;
const int AckUserGetCard::kMd5FieldNumber;
const int AckUserGetCard::kOperateidFieldNumber;
const int AckUserGetCard::kCardsFieldNumber;
const int AckUserGetCard::kCardListFieldNumber;
const int AckUserGetCard::kDaanTingFieldNumber;
const int AckUserGetCard::kListenInfo1FieldNumber;
#endif  // !_MSC_VER

AckUserGetCard::AckUserGetCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckUserGetCard)
}

void AckUserGetCard::InitAsDefaultInstance() {
}

AckUserGetCard::AckUserGetCard(const AckUserGetCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckUserGetCard)
}

void AckUserGetCard::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  chairid_ = 0;
  leftcardnum_ = 0;
  card_ = 0;
  optype_ = 0;
  optype2_ = 0;
  fz_type_ = 0;
  getcarddir_ = 0;
  locklaizi_ = 0;
  getlaizi_ = 0;
  encrypt_code_ = 0;
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operateid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserGetCard::~AckUserGetCard() {
  // @@protoc_insertion_point(destructor:proto.game.AckUserGetCard)
  SharedDtor();
}

void AckUserGetCard::SharedDtor() {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete md5_;
  }
  if (this != default_instance_) {
  }
}

void AckUserGetCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserGetCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserGetCard_descriptor_;
}

const AckUserGetCard& AckUserGetCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUserGetCard* AckUserGetCard::default_instance_ = NULL;

AckUserGetCard* AckUserGetCard::New() const {
  return new AckUserGetCard;
}

void AckUserGetCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckUserGetCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 207) {
    ZR_(chairid_, optype_);
    ZR_(optype2_, fz_type_);
  }
  if (_has_bits_[8 / 32] & 32000) {
    ZR_(getcarddir_, encrypt_code_);
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        md5_->clear();
      }
    }
    operateid_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ganginfo_.Clear();
  listeninfo_.Clear();
  xy_pregang_.Clear();
  cards_.Clear();
  cardlist_.Clear();
  daan_ting_.Clear();
  listeninfo1_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserGetCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckUserGetCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LeftCardNum;
        break;
      }

      // optional int32 LeftCardNum = 2;
      case 2: {
        if (tag == 16) {
         parse_LeftCardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftcardnum_)));
          set_has_leftcardnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Card;
        break;
      }

      // optional int32 Card = 3;
      case 3: {
        if (tag == 24) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_OpType;
        break;
      }

      // optional int32 OpType = 4;
      case 4: {
        if (tag == 32) {
         parse_OpType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_GangInfo;
        break;
      }

      // repeated .proto.game.tagGangInfo GangInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_GangInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ganginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_GangInfo;
        if (input->ExpectTag(50)) goto parse_ListenInfo;
        break;
      }

      // repeated .proto.game.tagListenInfo ListenInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_ListenInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listeninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ListenInfo;
        if (input->ExpectTag(56)) goto parse_OpType2;
        break;
      }

      // optional int32 OpType2 = 7;
      case 7: {
        if (tag == 56) {
         parse_OpType2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype2_)));
          set_has_optype2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fz_type;
        break;
      }

      // optional int32 fz_type = 8;
      case 8: {
        if (tag == 64) {
         parse_fz_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fz_type_)));
          set_has_fz_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_GetCardDir;
        break;
      }

      // optional int32 GetCardDir = 9;
      case 9: {
        if (tag == 72) {
         parse_GetCardDir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getcarddir_)));
          set_has_getcarddir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_xy_pregang;
        break;
      }

      // repeated .proto.game.tagPreGangs xy_pregang = 10;
      case 10: {
        if (tag == 82) {
         parse_xy_pregang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xy_pregang()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_xy_pregang;
        if (input->ExpectTag(88)) goto parse_LockLaizi;
        break;
      }

      // optional int32 LockLaizi = 11;
      case 11: {
        if (tag == 88) {
         parse_LockLaizi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locklaizi_)));
          set_has_locklaizi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_getlaizi;
        break;
      }

      // optional int32 getlaizi = 12;
      case 12: {
        if (tag == 96) {
         parse_getlaizi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getlaizi_)));
          set_has_getlaizi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_encrypt_code;
        break;
      }

      // optional int32 encrypt_code = 13;
      case 13: {
        if (tag == 104) {
         parse_encrypt_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encrypt_code_)));
          set_has_encrypt_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_md5;
        break;
      }

      // optional string md5 = 14;
      case 14: {
        if (tag == 114) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "md5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_operateid;
        break;
      }

      // optional int32 operateid = 15;
      case 15: {
        if (tag == 120) {
         parse_operateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operateid_)));
          set_has_operateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 16;
      case 16: {
        if (tag == 128) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_cards())));
        } else if (tag == 130) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_cards;
        if (input->ExpectTag(138)) goto parse_cardList;
        break;
      }

      // repeated .proto.game.CardArr cardList = 17;
      case 17: {
        if (tag == 138) {
         parse_cardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_cardList;
        if (input->ExpectTag(162)) goto parse_daan_ting;
        break;
      }

      // repeated .proto.game.DaAnTing daan_ting = 20;
      case 20: {
        if (tag == 162) {
         parse_daan_ting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daan_ting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_daan_ting;
        if (input->ExpectTag(242)) goto parse_ListenInfo1;
        break;
      }

      // repeated .proto.game.tagListenInfo ListenInfo1 = 30;
      case 30: {
        if (tag == 242) {
         parse_ListenInfo1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listeninfo1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_ListenInfo1;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckUserGetCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckUserGetCard)
  return false;
#undef DO_
}

void AckUserGetCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckUserGetCard)
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 LeftCardNum = 2;
  if (has_leftcardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leftcardnum(), output);
  }

  // optional int32 Card = 3;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->card(), output);
  }

  // optional int32 OpType = 4;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->optype(), output);
  }

  // repeated .proto.game.tagGangInfo GangInfo = 5;
  for (int i = 0; i < this->ganginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ganginfo(i), output);
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 6;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->listeninfo(i), output);
  }

  // optional int32 OpType2 = 7;
  if (has_optype2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->optype2(), output);
  }

  // optional int32 fz_type = 8;
  if (has_fz_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fz_type(), output);
  }

  // optional int32 GetCardDir = 9;
  if (has_getcarddir()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->getcarddir(), output);
  }

  // repeated .proto.game.tagPreGangs xy_pregang = 10;
  for (int i = 0; i < this->xy_pregang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->xy_pregang(i), output);
  }

  // optional int32 LockLaizi = 11;
  if (has_locklaizi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->locklaizi(), output);
  }

  // optional int32 getlaizi = 12;
  if (has_getlaizi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->getlaizi(), output);
  }

  // optional int32 encrypt_code = 13;
  if (has_encrypt_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->encrypt_code(), output);
  }

  // optional string md5 = 14;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->md5(), output);
  }

  // optional int32 operateid = 15;
  if (has_operateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->operateid(), output);
  }

  // repeated int32 cards = 16;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->cards(i), output);
  }

  // repeated .proto.game.CardArr cardList = 17;
  for (int i = 0; i < this->cardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->cardlist(i), output);
  }

  // repeated .proto.game.DaAnTing daan_ting = 20;
  for (int i = 0; i < this->daan_ting_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->daan_ting(i), output);
  }

  // repeated .proto.game.tagListenInfo ListenInfo1 = 30;
  for (int i = 0; i < this->listeninfo1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->listeninfo1(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckUserGetCard)
}

::google::protobuf::uint8* AckUserGetCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckUserGetCard)
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 LeftCardNum = 2;
  if (has_leftcardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leftcardnum(), target);
  }

  // optional int32 Card = 3;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->card(), target);
  }

  // optional int32 OpType = 4;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->optype(), target);
  }

  // repeated .proto.game.tagGangInfo GangInfo = 5;
  for (int i = 0; i < this->ganginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ganginfo(i), target);
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 6;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->listeninfo(i), target);
  }

  // optional int32 OpType2 = 7;
  if (has_optype2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->optype2(), target);
  }

  // optional int32 fz_type = 8;
  if (has_fz_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fz_type(), target);
  }

  // optional int32 GetCardDir = 9;
  if (has_getcarddir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->getcarddir(), target);
  }

  // repeated .proto.game.tagPreGangs xy_pregang = 10;
  for (int i = 0; i < this->xy_pregang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->xy_pregang(i), target);
  }

  // optional int32 LockLaizi = 11;
  if (has_locklaizi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->locklaizi(), target);
  }

  // optional int32 getlaizi = 12;
  if (has_getlaizi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->getlaizi(), target);
  }

  // optional int32 encrypt_code = 13;
  if (has_encrypt_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->encrypt_code(), target);
  }

  // optional string md5 = 14;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->md5(), target);
  }

  // optional int32 operateid = 15;
  if (has_operateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->operateid(), target);
  }

  // repeated int32 cards = 16;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->cards(i), target);
  }

  // repeated .proto.game.CardArr cardList = 17;
  for (int i = 0; i < this->cardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->cardlist(i), target);
  }

  // repeated .proto.game.DaAnTing daan_ting = 20;
  for (int i = 0; i < this->daan_ting_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->daan_ting(i), target);
  }

  // repeated .proto.game.tagListenInfo ListenInfo1 = 30;
  for (int i = 0; i < this->listeninfo1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->listeninfo1(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckUserGetCard)
  return target;
}

int AckUserGetCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 LeftCardNum = 2;
    if (has_leftcardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftcardnum());
    }

    // optional int32 Card = 3;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 OpType = 4;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

    // optional int32 OpType2 = 7;
    if (has_optype2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype2());
    }

    // optional int32 fz_type = 8;
    if (has_fz_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fz_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 GetCardDir = 9;
    if (has_getcarddir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getcarddir());
    }

    // optional int32 LockLaizi = 11;
    if (has_locklaizi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locklaizi());
    }

    // optional int32 getlaizi = 12;
    if (has_getlaizi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getlaizi());
    }

    // optional int32 encrypt_code = 13;
    if (has_encrypt_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->encrypt_code());
    }

    // optional string md5 = 14;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

    // optional int32 operateid = 15;
    if (has_operateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operateid());
    }

  }
  // repeated .proto.game.tagGangInfo GangInfo = 5;
  total_size += 1 * this->ganginfo_size();
  for (int i = 0; i < this->ganginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ganginfo(i));
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 6;
  total_size += 1 * this->listeninfo_size();
  for (int i = 0; i < this->listeninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listeninfo(i));
  }

  // repeated .proto.game.tagPreGangs xy_pregang = 10;
  total_size += 1 * this->xy_pregang_size();
  for (int i = 0; i < this->xy_pregang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xy_pregang(i));
  }

  // repeated int32 cards = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 2 * this->cards_size() + data_size;
  }

  // repeated .proto.game.CardArr cardList = 17;
  total_size += 2 * this->cardlist_size();
  for (int i = 0; i < this->cardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardlist(i));
  }

  // repeated .proto.game.DaAnTing daan_ting = 20;
  total_size += 2 * this->daan_ting_size();
  for (int i = 0; i < this->daan_ting_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daan_ting(i));
  }

  // repeated .proto.game.tagListenInfo ListenInfo1 = 30;
  total_size += 2 * this->listeninfo1_size();
  for (int i = 0; i < this->listeninfo1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listeninfo1(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserGetCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserGetCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserGetCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserGetCard::MergeFrom(const AckUserGetCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  ganginfo_.MergeFrom(from.ganginfo_);
  listeninfo_.MergeFrom(from.listeninfo_);
  xy_pregang_.MergeFrom(from.xy_pregang_);
  cards_.MergeFrom(from.cards_);
  cardlist_.MergeFrom(from.cardlist_);
  daan_ting_.MergeFrom(from.daan_ting_);
  listeninfo1_.MergeFrom(from.listeninfo1_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_leftcardnum()) {
      set_leftcardnum(from.leftcardnum());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_optype2()) {
      set_optype2(from.optype2());
    }
    if (from.has_fz_type()) {
      set_fz_type(from.fz_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_getcarddir()) {
      set_getcarddir(from.getcarddir());
    }
    if (from.has_locklaizi()) {
      set_locklaizi(from.locklaizi());
    }
    if (from.has_getlaizi()) {
      set_getlaizi(from.getlaizi());
    }
    if (from.has_encrypt_code()) {
      set_encrypt_code(from.encrypt_code());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
    if (from.has_operateid()) {
      set_operateid(from.operateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserGetCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserGetCard::CopyFrom(const AckUserGetCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserGetCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->ganginfo())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->listeninfo())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->listeninfo1())) return false;
  return true;
}

void AckUserGetCard::Swap(AckUserGetCard* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(leftcardnum_, other->leftcardnum_);
    std::swap(card_, other->card_);
    std::swap(optype_, other->optype_);
    ganginfo_.Swap(&other->ganginfo_);
    listeninfo_.Swap(&other->listeninfo_);
    std::swap(optype2_, other->optype2_);
    std::swap(fz_type_, other->fz_type_);
    std::swap(getcarddir_, other->getcarddir_);
    xy_pregang_.Swap(&other->xy_pregang_);
    std::swap(locklaizi_, other->locklaizi_);
    std::swap(getlaizi_, other->getlaizi_);
    std::swap(encrypt_code_, other->encrypt_code_);
    std::swap(md5_, other->md5_);
    std::swap(operateid_, other->operateid_);
    cards_.Swap(&other->cards_);
    cardlist_.Swap(&other->cardlist_);
    daan_ting_.Swap(&other->daan_ting_);
    listeninfo1_.Swap(&other->listeninfo1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserGetCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserGetCard_descriptor_;
  metadata.reflection = AckUserGetCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagShowOutCard::kOutCardLenFieldNumber;
const int tagShowOutCard::kOutCardFieldNumber;
#endif  // !_MSC_VER

tagShowOutCard::tagShowOutCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.tagShowOutCard)
}

void tagShowOutCard::InitAsDefaultInstance() {
}

tagShowOutCard::tagShowOutCard(const tagShowOutCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.tagShowOutCard)
}

void tagShowOutCard::SharedCtor() {
  _cached_size_ = 0;
  outcardlen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagShowOutCard::~tagShowOutCard() {
  // @@protoc_insertion_point(destructor:proto.game.tagShowOutCard)
  SharedDtor();
}

void tagShowOutCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagShowOutCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagShowOutCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagShowOutCard_descriptor_;
}

const tagShowOutCard& tagShowOutCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagShowOutCard* tagShowOutCard::default_instance_ = NULL;

tagShowOutCard* tagShowOutCard::New() const {
  return new tagShowOutCard;
}

void tagShowOutCard::Clear() {
  outcardlen_ = 0;
  outcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagShowOutCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.tagShowOutCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 OutCardLen = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardlen_)));
          set_has_outcardlen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OutCard;
        break;
      }

      // repeated int32 OutCard = 2;
      case 2: {
        if (tag == 16) {
         parse_OutCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_outcard())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outcard())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OutCard;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.tagShowOutCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.tagShowOutCard)
  return false;
#undef DO_
}

void tagShowOutCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.tagShowOutCard)
  // required int32 OutCardLen = 1;
  if (has_outcardlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->outcardlen(), output);
  }

  // repeated int32 OutCard = 2;
  for (int i = 0; i < this->outcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->outcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.tagShowOutCard)
}

::google::protobuf::uint8* tagShowOutCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.tagShowOutCard)
  // required int32 OutCardLen = 1;
  if (has_outcardlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->outcardlen(), target);
  }

  // repeated int32 OutCard = 2;
  for (int i = 0; i < this->outcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->outcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.tagShowOutCard)
  return target;
}

int tagShowOutCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 OutCardLen = 1;
    if (has_outcardlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardlen());
    }

  }
  // repeated int32 OutCard = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->outcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outcard(i));
    }
    total_size += 1 * this->outcard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagShowOutCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagShowOutCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagShowOutCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagShowOutCard::MergeFrom(const tagShowOutCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  outcard_.MergeFrom(from.outcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_outcardlen()) {
      set_outcardlen(from.outcardlen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagShowOutCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagShowOutCard::CopyFrom(const tagShowOutCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagShowOutCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void tagShowOutCard::Swap(tagShowOutCard* other) {
  if (other != this) {
    std::swap(outcardlen_, other->outcardlen_);
    outcard_.Swap(&other->outcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagShowOutCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagShowOutCard_descriptor_;
  metadata.reflection = tagShowOutCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserOutCard::kChairIDFieldNumber;
const int AckUserOutCard::kCardFieldNumber;
const int AckUserOutCard::kShowCardFieldNumber;
const int AckUserOutCard::kUserCardFieldNumber;
const int AckUserOutCard::kListenInfoFieldNumber;
const int AckUserOutCard::kDaTypeFieldNumber;
const int AckUserOutCard::kXyPregangFieldNumber;
const int AckUserOutCard::kXianNingLaiZiFieldNumber;
#endif  // !_MSC_VER

AckUserOutCard::AckUserOutCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckUserOutCard)
}

void AckUserOutCard::InitAsDefaultInstance() {
  usercard_ = const_cast< ::proto::game::HandCards*>(&::proto::game::HandCards::default_instance());
}

AckUserOutCard::AckUserOutCard(const AckUserOutCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckUserOutCard)
}

void AckUserOutCard::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  card_ = 0;
  usercard_ = NULL;
  da_type_ = 0;
  xianninglaizi_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserOutCard::~AckUserOutCard() {
  // @@protoc_insertion_point(destructor:proto.game.AckUserOutCard)
  SharedDtor();
}

void AckUserOutCard::SharedDtor() {
  if (this != default_instance_) {
    delete usercard_;
  }
}

void AckUserOutCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserOutCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserOutCard_descriptor_;
}

const AckUserOutCard& AckUserOutCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUserOutCard* AckUserOutCard::default_instance_ = NULL;

AckUserOutCard* AckUserOutCard::New() const {
  return new AckUserOutCard;
}

void AckUserOutCard::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckUserOutCard*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 171) {
    ZR_(chairid_, card_);
    ZR_(da_type_, xianninglaizi_);
    if (has_usercard()) {
      if (usercard_ != NULL) usercard_->::proto::game::HandCards::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  showcard_.Clear();
  listeninfo_.Clear();
  xy_pregang_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserOutCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckUserOutCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Card;
        break;
      }

      // optional int32 Card = 2;
      case 2: {
        if (tag == 16) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ShowCard;
        break;
      }

      // repeated .proto.game.tagShowOutCard ShowCard = 3;
      case 3: {
        if (tag == 26) {
         parse_ShowCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ShowCard;
        if (input->ExpectTag(34)) goto parse_UserCard;
        break;
      }

      // optional .proto.game.HandCards UserCard = 4;
      case 4: {
        if (tag == 34) {
         parse_UserCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usercard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ListenInfo;
        break;
      }

      // repeated .proto.game.tagListenInfo ListenInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_ListenInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listeninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ListenInfo;
        if (input->ExpectTag(48)) goto parse_da_type;
        break;
      }

      // optional int32 da_type = 6;
      case 6: {
        if (tag == 48) {
         parse_da_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &da_type_)));
          set_has_da_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_xy_pregang;
        break;
      }

      // repeated .proto.game.tagPreGangs xy_pregang = 7;
      case 7: {
        if (tag == 58) {
         parse_xy_pregang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xy_pregang()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_xy_pregang;
        if (input->ExpectTag(64)) goto parse_XianNingLaiZi;
        break;
      }

      // optional bool XianNingLaiZi = 8;
      case 8: {
        if (tag == 64) {
         parse_XianNingLaiZi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xianninglaizi_)));
          set_has_xianninglaizi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckUserOutCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckUserOutCard)
  return false;
#undef DO_
}

void AckUserOutCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckUserOutCard)
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 Card = 2;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->card(), output);
  }

  // repeated .proto.game.tagShowOutCard ShowCard = 3;
  for (int i = 0; i < this->showcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->showcard(i), output);
  }

  // optional .proto.game.HandCards UserCard = 4;
  if (has_usercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->usercard(), output);
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 5;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->listeninfo(i), output);
  }

  // optional int32 da_type = 6;
  if (has_da_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->da_type(), output);
  }

  // repeated .proto.game.tagPreGangs xy_pregang = 7;
  for (int i = 0; i < this->xy_pregang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->xy_pregang(i), output);
  }

  // optional bool XianNingLaiZi = 8;
  if (has_xianninglaizi()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->xianninglaizi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckUserOutCard)
}

::google::protobuf::uint8* AckUserOutCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckUserOutCard)
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 Card = 2;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card(), target);
  }

  // repeated .proto.game.tagShowOutCard ShowCard = 3;
  for (int i = 0; i < this->showcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->showcard(i), target);
  }

  // optional .proto.game.HandCards UserCard = 4;
  if (has_usercard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->usercard(), target);
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 5;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->listeninfo(i), target);
  }

  // optional int32 da_type = 6;
  if (has_da_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->da_type(), target);
  }

  // repeated .proto.game.tagPreGangs xy_pregang = 7;
  for (int i = 0; i < this->xy_pregang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->xy_pregang(i), target);
  }

  // optional bool XianNingLaiZi = 8;
  if (has_xianninglaizi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->xianninglaizi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckUserOutCard)
  return target;
}

int AckUserOutCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 Card = 2;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional .proto.game.HandCards UserCard = 4;
    if (has_usercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usercard());
    }

    // optional int32 da_type = 6;
    if (has_da_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->da_type());
    }

    // optional bool XianNingLaiZi = 8;
    if (has_xianninglaizi()) {
      total_size += 1 + 1;
    }

  }
  // repeated .proto.game.tagShowOutCard ShowCard = 3;
  total_size += 1 * this->showcard_size();
  for (int i = 0; i < this->showcard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->showcard(i));
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 5;
  total_size += 1 * this->listeninfo_size();
  for (int i = 0; i < this->listeninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listeninfo(i));
  }

  // repeated .proto.game.tagPreGangs xy_pregang = 7;
  total_size += 1 * this->xy_pregang_size();
  for (int i = 0; i < this->xy_pregang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xy_pregang(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserOutCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserOutCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserOutCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserOutCard::MergeFrom(const AckUserOutCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  showcard_.MergeFrom(from.showcard_);
  listeninfo_.MergeFrom(from.listeninfo_);
  xy_pregang_.MergeFrom(from.xy_pregang_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_usercard()) {
      mutable_usercard()->::proto::game::HandCards::MergeFrom(from.usercard());
    }
    if (from.has_da_type()) {
      set_da_type(from.da_type());
    }
    if (from.has_xianninglaizi()) {
      set_xianninglaizi(from.xianninglaizi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserOutCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserOutCard::CopyFrom(const AckUserOutCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserOutCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->showcard())) return false;
  if (has_usercard()) {
    if (!this->usercard().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->listeninfo())) return false;
  return true;
}

void AckUserOutCard::Swap(AckUserOutCard* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(card_, other->card_);
    showcard_.Swap(&other->showcard_);
    std::swap(usercard_, other->usercard_);
    listeninfo_.Swap(&other->listeninfo_);
    std::swap(da_type_, other->da_type_);
    xy_pregang_.Swap(&other->xy_pregang_);
    std::swap(xianninglaizi_, other->xianninglaizi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserOutCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserOutCard_descriptor_;
  metadata.reflection = AckUserOutCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserOutCardErr::kCardFieldNumber;
const int AckUserOutCardErr::kCodeFieldNumber;
const int AckUserOutCardErr::kUsercardFieldNumber;
const int AckUserOutCardErr::kOutcardsFieldNumber;
#endif  // !_MSC_VER

AckUserOutCardErr::AckUserOutCardErr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckUserOutCardErr)
}

void AckUserOutCardErr::InitAsDefaultInstance() {
}

AckUserOutCardErr::AckUserOutCardErr(const AckUserOutCardErr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckUserOutCardErr)
}

void AckUserOutCardErr::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserOutCardErr::~AckUserOutCardErr() {
  // @@protoc_insertion_point(destructor:proto.game.AckUserOutCardErr)
  SharedDtor();
}

void AckUserOutCardErr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUserOutCardErr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserOutCardErr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserOutCardErr_descriptor_;
}

const AckUserOutCardErr& AckUserOutCardErr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUserOutCardErr* AckUserOutCardErr::default_instance_ = NULL;

AckUserOutCardErr* AckUserOutCardErr::New() const {
  return new AckUserOutCardErr;
}

void AckUserOutCardErr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckUserOutCardErr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(card_, code_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  usercard_.Clear();
  outcards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserOutCardErr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckUserOutCardErr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 card = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional int32 code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_usercard;
        break;
      }

      // repeated int32 usercard = 4;
      case 4: {
        if (tag == 32) {
         parse_usercard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_usercard())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_usercard())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_usercard;
        if (input->ExpectTag(40)) goto parse_outcards;
        break;
      }

      // repeated int32 outcards = 5;
      case 5: {
        if (tag == 40) {
         parse_outcards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_outcards())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outcards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_outcards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckUserOutCardErr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckUserOutCardErr)
  return false;
#undef DO_
}

void AckUserOutCardErr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckUserOutCardErr)
  // required int32 card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  // optional int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  // repeated int32 usercard = 4;
  for (int i = 0; i < this->usercard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->usercard(i), output);
  }

  // repeated int32 outcards = 5;
  for (int i = 0; i < this->outcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->outcards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckUserOutCardErr)
}

::google::protobuf::uint8* AckUserOutCardErr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckUserOutCardErr)
  // required int32 card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  // optional int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  // repeated int32 usercard = 4;
  for (int i = 0; i < this->usercard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->usercard(i), target);
  }

  // repeated int32 outcards = 5;
  for (int i = 0; i < this->outcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->outcards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckUserOutCardErr)
  return target;
}

int AckUserOutCardErr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  // repeated int32 usercard = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->usercard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->usercard(i));
    }
    total_size += 1 * this->usercard_size() + data_size;
  }

  // repeated int32 outcards = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->outcards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outcards(i));
    }
    total_size += 1 * this->outcards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserOutCardErr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserOutCardErr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserOutCardErr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserOutCardErr::MergeFrom(const AckUserOutCardErr& from) {
  GOOGLE_CHECK_NE(&from, this);
  usercard_.MergeFrom(from.usercard_);
  outcards_.MergeFrom(from.outcards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserOutCardErr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserOutCardErr::CopyFrom(const AckUserOutCardErr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserOutCardErr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckUserOutCardErr::Swap(AckUserOutCardErr* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(code_, other->code_);
    usercard_.Swap(&other->usercard_);
    outcards_.Swap(&other->outcards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserOutCardErr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserOutCardErr_descriptor_;
  metadata.reflection = AckUserOutCardErr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DaAnTing::kKeyFieldNumber;
const int DaAnTing::kTingTypeFieldNumber;
const int DaAnTing::kTingCardsFieldNumber;
const int DaAnTing::kShowCardsFieldNumber;
#endif  // !_MSC_VER

DaAnTing::DaAnTing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.DaAnTing)
}

void DaAnTing::InitAsDefaultInstance() {
}

DaAnTing::DaAnTing(const DaAnTing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.DaAnTing)
}

void DaAnTing::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  tingtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DaAnTing::~DaAnTing() {
  // @@protoc_insertion_point(destructor:proto.game.DaAnTing)
  SharedDtor();
}

void DaAnTing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DaAnTing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DaAnTing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DaAnTing_descriptor_;
}

const DaAnTing& DaAnTing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

DaAnTing* DaAnTing::default_instance_ = NULL;

DaAnTing* DaAnTing::New() const {
  return new DaAnTing;
}

void DaAnTing::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DaAnTing*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(key_, tingtype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  tingcards_.Clear();
  showcards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DaAnTing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.DaAnTing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TingType;
        break;
      }

      // optional int32 TingType = 2;
      case 2: {
        if (tag == 16) {
         parse_TingType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tingtype_)));
          set_has_tingtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TingCards;
        break;
      }

      // repeated int32 TingCards = 3;
      case 3: {
        if (tag == 24) {
         parse_TingCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_tingcards())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tingcards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TingCards;
        if (input->ExpectTag(32)) goto parse_ShowCards;
        break;
      }

      // repeated int32 ShowCards = 4;
      case 4: {
        if (tag == 32) {
         parse_ShowCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_showcards())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_showcards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ShowCards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.DaAnTing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.DaAnTing)
  return false;
#undef DO_
}

void DaAnTing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.DaAnTing)
  // optional int32 Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // optional int32 TingType = 2;
  if (has_tingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tingtype(), output);
  }

  // repeated int32 TingCards = 3;
  for (int i = 0; i < this->tingcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->tingcards(i), output);
  }

  // repeated int32 ShowCards = 4;
  for (int i = 0; i < this->showcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->showcards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.DaAnTing)
}

::google::protobuf::uint8* DaAnTing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.DaAnTing)
  // optional int32 Key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // optional int32 TingType = 2;
  if (has_tingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tingtype(), target);
  }

  // repeated int32 TingCards = 3;
  for (int i = 0; i < this->tingcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->tingcards(i), target);
  }

  // repeated int32 ShowCards = 4;
  for (int i = 0; i < this->showcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->showcards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.DaAnTing)
  return target;
}

int DaAnTing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional int32 TingType = 2;
    if (has_tingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tingtype());
    }

  }
  // repeated int32 TingCards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->tingcards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tingcards(i));
    }
    total_size += 1 * this->tingcards_size() + data_size;
  }

  // repeated int32 ShowCards = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->showcards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->showcards(i));
    }
    total_size += 1 * this->showcards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DaAnTing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DaAnTing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DaAnTing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DaAnTing::MergeFrom(const DaAnTing& from) {
  GOOGLE_CHECK_NE(&from, this);
  tingcards_.MergeFrom(from.tingcards_);
  showcards_.MergeFrom(from.showcards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_tingtype()) {
      set_tingtype(from.tingtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DaAnTing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DaAnTing::CopyFrom(const DaAnTing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DaAnTing::IsInitialized() const {

  return true;
}

void DaAnTing::Swap(DaAnTing* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(tingtype_, other->tingtype_);
    tingcards_.Swap(&other->tingcards_);
    showcards_.Swap(&other->showcards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DaAnTing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DaAnTing_descriptor_;
  metadata.reflection = DaAnTing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckOpNotify::kChairIDFieldNumber;
const int AckOpNotify::kOpTypeFieldNumber;
const int AckOpNotify::kCardFieldNumber;
const int AckOpNotify::kGangFieldNumber;
const int AckOpNotify::kOpType2FieldNumber;
const int AckOpNotify::kXyPregangFieldNumber;
const int AckOpNotify::kLockLaiziFieldNumber;
const int AckOpNotify::kListenInfoFieldNumber;
const int AckOpNotify::kOperateidFieldNumber;
const int AckOpNotify::kOpCardsInfoFieldNumber;
const int AckOpNotify::kCardsFieldNumber;
const int AckOpNotify::kBAnHuGangFieldNumber;
const int AckOpNotify::kCardListFieldNumber;
const int AckOpNotify::kDaanTingFieldNumber;
#endif  // !_MSC_VER

AckOpNotify::AckOpNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckOpNotify)
}

void AckOpNotify::InitAsDefaultInstance() {
}

AckOpNotify::AckOpNotify(const AckOpNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckOpNotify)
}

void AckOpNotify::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  optype_ = 0;
  card_ = 0;
  optype2_ = 0;
  locklaizi_ = 0;
  operateid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckOpNotify::~AckOpNotify() {
  // @@protoc_insertion_point(destructor:proto.game.AckOpNotify)
  SharedDtor();
}

void AckOpNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckOpNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckOpNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckOpNotify_descriptor_;
}

const AckOpNotify& AckOpNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckOpNotify* AckOpNotify::default_instance_ = NULL;

AckOpNotify* AckOpNotify::New() const {
  return new AckOpNotify;
}

void AckOpNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckOpNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 87) {
    ZR_(chairid_, optype_);
    ZR_(card_, optype2_);
    locklaizi_ = 0;
  }
  operateid_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  gang_.Clear();
  xy_pregang_.Clear();
  listeninfo_.Clear();
  opcardsinfo_.Clear();
  cards_.Clear();
  banhugang_.Clear();
  cardlist_.Clear();
  daan_ting_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckOpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckOpNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OpType;
        break;
      }

      // optional int32 OpType = 2;
      case 2: {
        if (tag == 16) {
         parse_OpType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Card;
        break;
      }

      // optional int32 Card = 3;
      case 3: {
        if (tag == 24) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Gang;
        break;
      }

      // repeated .proto.game.tagGangInfo Gang = 4;
      case 4: {
        if (tag == 34) {
         parse_Gang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gang()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Gang;
        if (input->ExpectTag(40)) goto parse_OpType2;
        break;
      }

      // optional int32 OpType2 = 5;
      case 5: {
        if (tag == 40) {
         parse_OpType2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype2_)));
          set_has_optype2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_xy_pregang;
        break;
      }

      // repeated .proto.game.tagPreGangs xy_pregang = 6;
      case 6: {
        if (tag == 50) {
         parse_xy_pregang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xy_pregang()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_xy_pregang;
        if (input->ExpectTag(56)) goto parse_LockLaizi;
        break;
      }

      // optional int32 LockLaizi = 7;
      case 7: {
        if (tag == 56) {
         parse_LockLaizi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locklaizi_)));
          set_has_locklaizi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ListenInfo;
        break;
      }

      // repeated .proto.game.tagListenInfo ListenInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_ListenInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listeninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ListenInfo;
        if (input->ExpectTag(72)) goto parse_operateid;
        break;
      }

      // optional int32 operateid = 9;
      case 9: {
        if (tag == 72) {
         parse_operateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operateid_)));
          set_has_operateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_OpCardsInfo;
        break;
      }

      // repeated .proto.game.Cards OpCardsInfo = 10;
      case 10: {
        if (tag == 82) {
         parse_OpCardsInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opcardsinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_OpCardsInfo;
        if (input->ExpectTag(88)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 11;
      case 11: {
        if (tag == 88) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_cards())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_cards;
        if (input->ExpectTag(96)) goto parse_bAnHuGang;
        break;
      }

      // repeated int32 bAnHuGang = 12;
      case 12: {
        if (tag == 96) {
         parse_bAnHuGang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_banhugang())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_banhugang())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_bAnHuGang;
        if (input->ExpectTag(106)) goto parse_cardList;
        break;
      }

      // repeated .proto.game.CardArr cardList = 13;
      case 13: {
        if (tag == 106) {
         parse_cardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_cardList;
        if (input->ExpectTag(162)) goto parse_daan_ting;
        break;
      }

      // repeated .proto.game.DaAnTing daan_ting = 20;
      case 20: {
        if (tag == 162) {
         parse_daan_ting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daan_ting()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_daan_ting;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckOpNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckOpNotify)
  return false;
#undef DO_
}

void AckOpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckOpNotify)
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 OpType = 2;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->optype(), output);
  }

  // optional int32 Card = 3;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->card(), output);
  }

  // repeated .proto.game.tagGangInfo Gang = 4;
  for (int i = 0; i < this->gang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gang(i), output);
  }

  // optional int32 OpType2 = 5;
  if (has_optype2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->optype2(), output);
  }

  // repeated .proto.game.tagPreGangs xy_pregang = 6;
  for (int i = 0; i < this->xy_pregang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->xy_pregang(i), output);
  }

  // optional int32 LockLaizi = 7;
  if (has_locklaizi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->locklaizi(), output);
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 8;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->listeninfo(i), output);
  }

  // optional int32 operateid = 9;
  if (has_operateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->operateid(), output);
  }

  // repeated .proto.game.Cards OpCardsInfo = 10;
  for (int i = 0; i < this->opcardsinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->opcardsinfo(i), output);
  }

  // repeated int32 cards = 11;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->cards(i), output);
  }

  // repeated int32 bAnHuGang = 12;
  for (int i = 0; i < this->banhugang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->banhugang(i), output);
  }

  // repeated .proto.game.CardArr cardList = 13;
  for (int i = 0; i < this->cardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->cardlist(i), output);
  }

  // repeated .proto.game.DaAnTing daan_ting = 20;
  for (int i = 0; i < this->daan_ting_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->daan_ting(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckOpNotify)
}

::google::protobuf::uint8* AckOpNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckOpNotify)
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 OpType = 2;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->optype(), target);
  }

  // optional int32 Card = 3;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->card(), target);
  }

  // repeated .proto.game.tagGangInfo Gang = 4;
  for (int i = 0; i < this->gang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gang(i), target);
  }

  // optional int32 OpType2 = 5;
  if (has_optype2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->optype2(), target);
  }

  // repeated .proto.game.tagPreGangs xy_pregang = 6;
  for (int i = 0; i < this->xy_pregang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->xy_pregang(i), target);
  }

  // optional int32 LockLaizi = 7;
  if (has_locklaizi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->locklaizi(), target);
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 8;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->listeninfo(i), target);
  }

  // optional int32 operateid = 9;
  if (has_operateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->operateid(), target);
  }

  // repeated .proto.game.Cards OpCardsInfo = 10;
  for (int i = 0; i < this->opcardsinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->opcardsinfo(i), target);
  }

  // repeated int32 cards = 11;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->cards(i), target);
  }

  // repeated int32 bAnHuGang = 12;
  for (int i = 0; i < this->banhugang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->banhugang(i), target);
  }

  // repeated .proto.game.CardArr cardList = 13;
  for (int i = 0; i < this->cardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->cardlist(i), target);
  }

  // repeated .proto.game.DaAnTing daan_ting = 20;
  for (int i = 0; i < this->daan_ting_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->daan_ting(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckOpNotify)
  return target;
}

int AckOpNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 OpType = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

    // optional int32 Card = 3;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 OpType2 = 5;
    if (has_optype2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype2());
    }

    // optional int32 LockLaizi = 7;
    if (has_locklaizi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locklaizi());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 operateid = 9;
    if (has_operateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operateid());
    }

  }
  // repeated .proto.game.tagGangInfo Gang = 4;
  total_size += 1 * this->gang_size();
  for (int i = 0; i < this->gang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gang(i));
  }

  // repeated .proto.game.tagPreGangs xy_pregang = 6;
  total_size += 1 * this->xy_pregang_size();
  for (int i = 0; i < this->xy_pregang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xy_pregang(i));
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 8;
  total_size += 1 * this->listeninfo_size();
  for (int i = 0; i < this->listeninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listeninfo(i));
  }

  // repeated .proto.game.Cards OpCardsInfo = 10;
  total_size += 1 * this->opcardsinfo_size();
  for (int i = 0; i < this->opcardsinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opcardsinfo(i));
  }

  // repeated int32 cards = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  // repeated int32 bAnHuGang = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->banhugang_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->banhugang(i));
    }
    total_size += 1 * this->banhugang_size() + data_size;
  }

  // repeated .proto.game.CardArr cardList = 13;
  total_size += 1 * this->cardlist_size();
  for (int i = 0; i < this->cardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardlist(i));
  }

  // repeated .proto.game.DaAnTing daan_ting = 20;
  total_size += 2 * this->daan_ting_size();
  for (int i = 0; i < this->daan_ting_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daan_ting(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckOpNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckOpNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckOpNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckOpNotify::MergeFrom(const AckOpNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  gang_.MergeFrom(from.gang_);
  xy_pregang_.MergeFrom(from.xy_pregang_);
  listeninfo_.MergeFrom(from.listeninfo_);
  opcardsinfo_.MergeFrom(from.opcardsinfo_);
  cards_.MergeFrom(from.cards_);
  banhugang_.MergeFrom(from.banhugang_);
  cardlist_.MergeFrom(from.cardlist_);
  daan_ting_.MergeFrom(from.daan_ting_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_optype2()) {
      set_optype2(from.optype2());
    }
    if (from.has_locklaizi()) {
      set_locklaizi(from.locklaizi());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_operateid()) {
      set_operateid(from.operateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckOpNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckOpNotify::CopyFrom(const AckOpNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckOpNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->gang())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->listeninfo())) return false;
  return true;
}

void AckOpNotify::Swap(AckOpNotify* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(optype_, other->optype_);
    std::swap(card_, other->card_);
    gang_.Swap(&other->gang_);
    std::swap(optype2_, other->optype2_);
    xy_pregang_.Swap(&other->xy_pregang_);
    std::swap(locklaizi_, other->locklaizi_);
    listeninfo_.Swap(&other->listeninfo_);
    std::swap(operateid_, other->operateid_);
    opcardsinfo_.Swap(&other->opcardsinfo_);
    cards_.Swap(&other->cards_);
    banhugang_.Swap(&other->banhugang_);
    cardlist_.Swap(&other->cardlist_);
    daan_ting_.Swap(&other->daan_ting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckOpNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckOpNotify_descriptor_;
  metadata.reflection = AckOpNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBcOpResult::kChairIDFieldNumber;
const int AckBcOpResult::kOutCardChairIDFieldNumber;
const int AckBcOpResult::kOpTypeFieldNumber;
const int AckBcOpResult::kCardFieldNumber;
const int AckBcOpResult::kScoreFieldNumber;
const int AckBcOpResult::kIsQiangganghuFieldNumber;
const int AckBcOpResult::kOpType2FieldNumber;
const int AckBcOpResult::kFzHuTypeFieldNumber;
const int AckBcOpResult::kListenInfoFieldNumber;
const int AckBcOpResult::kChiNoOutCardsFieldNumber;
const int AckBcOpResult::kOpCardsFieldNumber;
const int AckBcOpResult::kCardDelFieldNumber;
const int AckBcOpResult::kFixedcardchangeFieldNumber;
const int AckBcOpResult::kPasshuFieldNumber;
#endif  // !_MSC_VER

AckBcOpResult::AckBcOpResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckBcOpResult)
}

void AckBcOpResult::InitAsDefaultInstance() {
  fixedcardchange_ = const_cast< ::proto::game::FixedCardChange*>(&::proto::game::FixedCardChange::default_instance());
}

AckBcOpResult::AckBcOpResult(const AckBcOpResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckBcOpResult)
}

void AckBcOpResult::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  outcardchairid_ = 0;
  optype_ = 0;
  card_ = 0;
  isqiangganghu_ = 0;
  optype2_ = 0;
  fz_hu_type_ = 0;
  fixedcardchange_ = NULL;
  passhu_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBcOpResult::~AckBcOpResult() {
  // @@protoc_insertion_point(destructor:proto.game.AckBcOpResult)
  SharedDtor();
}

void AckBcOpResult::SharedDtor() {
  if (this != default_instance_) {
    delete fixedcardchange_;
  }
}

void AckBcOpResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBcOpResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBcOpResult_descriptor_;
}

const AckBcOpResult& AckBcOpResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckBcOpResult* AckBcOpResult::default_instance_ = NULL;

AckBcOpResult* AckBcOpResult::New() const {
  return new AckBcOpResult;
}

void AckBcOpResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckBcOpResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(chairid_, card_);
    ZR_(isqiangganghu_, optype2_);
    fz_hu_type_ = 0;
  }
  if (_has_bits_[8 / 32] & 12288) {
    if (has_fixedcardchange()) {
      if (fixedcardchange_ != NULL) fixedcardchange_->::proto::game::FixedCardChange::Clear();
    }
    passhu_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  score_.Clear();
  listeninfo_.Clear();
  chinooutcards_.Clear();
  opcards_.Clear();
  carddel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBcOpResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckBcOpResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OutCardChairID;
        break;
      }

      // optional int32 OutCardChairID = 2;
      case 2: {
        if (tag == 16) {
         parse_OutCardChairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardchairid_)));
          set_has_outcardchairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_OpType;
        break;
      }

      // optional int32 OpType = 3;
      case 3: {
        if (tag == 24) {
         parse_OpType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Card;
        break;
      }

      // optional int32 Card = 4;
      case 4: {
        if (tag == 32) {
         parse_Card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Score;
        break;
      }

      // repeated int32 Score = 5;
      case 5: {
        if (tag == 40) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_score())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Score;
        if (input->ExpectTag(48)) goto parse_IsQiangganghu;
        break;
      }

      // optional int32 IsQiangganghu = 6;
      case 6: {
        if (tag == 48) {
         parse_IsQiangganghu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isqiangganghu_)));
          set_has_isqiangganghu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_OpType2;
        break;
      }

      // optional int32 OpType2 = 7;
      case 7: {
        if (tag == 56) {
         parse_OpType2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype2_)));
          set_has_optype2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fz_hu_type;
        break;
      }

      // optional int32 fz_hu_type = 8;
      case 8: {
        if (tag == 64) {
         parse_fz_hu_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fz_hu_type_)));
          set_has_fz_hu_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ListenInfo;
        break;
      }

      // repeated .proto.game.tagListenInfo ListenInfo = 9;
      case 9: {
        if (tag == 74) {
         parse_ListenInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listeninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ListenInfo;
        if (input->ExpectTag(80)) goto parse_ChiNoOutCards;
        break;
      }

      // repeated int32 ChiNoOutCards = 10;
      case 10: {
        if (tag == 80) {
         parse_ChiNoOutCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_chinooutcards())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chinooutcards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ChiNoOutCards;
        if (input->ExpectTag(88)) goto parse_OpCards;
        break;
      }

      // repeated int32 OpCards = 11;
      case 11: {
        if (tag == 88) {
         parse_OpCards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_opcards())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_opcards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_OpCards;
        if (input->ExpectTag(96)) goto parse_cardDel;
        break;
      }

      // repeated int32 cardDel = 12;
      case 12: {
        if (tag == 96) {
         parse_cardDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_carddel())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_carddel())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_cardDel;
        if (input->ExpectTag(106)) goto parse_fixedcardchange;
        break;
      }

      // optional .proto.game.FixedCardChange fixedcardchange = 13;
      case 13: {
        if (tag == 106) {
         parse_fixedcardchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixedcardchange()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_passhu;
        break;
      }

      // optional int32 passhu = 14;
      case 14: {
        if (tag == 112) {
         parse_passhu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passhu_)));
          set_has_passhu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckBcOpResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckBcOpResult)
  return false;
#undef DO_
}

void AckBcOpResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckBcOpResult)
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 OutCardChairID = 2;
  if (has_outcardchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->outcardchairid(), output);
  }

  // optional int32 OpType = 3;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->optype(), output);
  }

  // optional int32 Card = 4;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->card(), output);
  }

  // repeated int32 Score = 5;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->score(i), output);
  }

  // optional int32 IsQiangganghu = 6;
  if (has_isqiangganghu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->isqiangganghu(), output);
  }

  // optional int32 OpType2 = 7;
  if (has_optype2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->optype2(), output);
  }

  // optional int32 fz_hu_type = 8;
  if (has_fz_hu_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fz_hu_type(), output);
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 9;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->listeninfo(i), output);
  }

  // repeated int32 ChiNoOutCards = 10;
  for (int i = 0; i < this->chinooutcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->chinooutcards(i), output);
  }

  // repeated int32 OpCards = 11;
  for (int i = 0; i < this->opcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->opcards(i), output);
  }

  // repeated int32 cardDel = 12;
  for (int i = 0; i < this->carddel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->carddel(i), output);
  }

  // optional .proto.game.FixedCardChange fixedcardchange = 13;
  if (has_fixedcardchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->fixedcardchange(), output);
  }

  // optional int32 passhu = 14;
  if (has_passhu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->passhu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckBcOpResult)
}

::google::protobuf::uint8* AckBcOpResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckBcOpResult)
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 OutCardChairID = 2;
  if (has_outcardchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->outcardchairid(), target);
  }

  // optional int32 OpType = 3;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->optype(), target);
  }

  // optional int32 Card = 4;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->card(), target);
  }

  // repeated int32 Score = 5;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->score(i), target);
  }

  // optional int32 IsQiangganghu = 6;
  if (has_isqiangganghu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->isqiangganghu(), target);
  }

  // optional int32 OpType2 = 7;
  if (has_optype2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->optype2(), target);
  }

  // optional int32 fz_hu_type = 8;
  if (has_fz_hu_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fz_hu_type(), target);
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 9;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->listeninfo(i), target);
  }

  // repeated int32 ChiNoOutCards = 10;
  for (int i = 0; i < this->chinooutcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->chinooutcards(i), target);
  }

  // repeated int32 OpCards = 11;
  for (int i = 0; i < this->opcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->opcards(i), target);
  }

  // repeated int32 cardDel = 12;
  for (int i = 0; i < this->carddel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->carddel(i), target);
  }

  // optional .proto.game.FixedCardChange fixedcardchange = 13;
  if (has_fixedcardchange()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->fixedcardchange(), target);
  }

  // optional int32 passhu = 14;
  if (has_passhu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->passhu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckBcOpResult)
  return target;
}

int AckBcOpResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 OutCardChairID = 2;
    if (has_outcardchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardchairid());
    }

    // optional int32 OpType = 3;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

    // optional int32 Card = 4;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 IsQiangganghu = 6;
    if (has_isqiangganghu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isqiangganghu());
    }

    // optional int32 OpType2 = 7;
    if (has_optype2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype2());
    }

    // optional int32 fz_hu_type = 8;
    if (has_fz_hu_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fz_hu_type());
    }

  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    // optional .proto.game.FixedCardChange fixedcardchange = 13;
    if (has_fixedcardchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fixedcardchange());
    }

    // optional int32 passhu = 14;
    if (has_passhu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passhu());
    }

  }
  // repeated int32 Score = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 9;
  total_size += 1 * this->listeninfo_size();
  for (int i = 0; i < this->listeninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listeninfo(i));
  }

  // repeated int32 ChiNoOutCards = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->chinooutcards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->chinooutcards(i));
    }
    total_size += 1 * this->chinooutcards_size() + data_size;
  }

  // repeated int32 OpCards = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->opcards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->opcards(i));
    }
    total_size += 1 * this->opcards_size() + data_size;
  }

  // repeated int32 cardDel = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->carddel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->carddel(i));
    }
    total_size += 1 * this->carddel_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBcOpResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBcOpResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBcOpResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBcOpResult::MergeFrom(const AckBcOpResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  listeninfo_.MergeFrom(from.listeninfo_);
  chinooutcards_.MergeFrom(from.chinooutcards_);
  opcards_.MergeFrom(from.opcards_);
  carddel_.MergeFrom(from.carddel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_outcardchairid()) {
      set_outcardchairid(from.outcardchairid());
    }
    if (from.has_optype()) {
      set_optype(from.optype());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_isqiangganghu()) {
      set_isqiangganghu(from.isqiangganghu());
    }
    if (from.has_optype2()) {
      set_optype2(from.optype2());
    }
    if (from.has_fz_hu_type()) {
      set_fz_hu_type(from.fz_hu_type());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_fixedcardchange()) {
      mutable_fixedcardchange()->::proto::game::FixedCardChange::MergeFrom(from.fixedcardchange());
    }
    if (from.has_passhu()) {
      set_passhu(from.passhu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBcOpResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBcOpResult::CopyFrom(const AckBcOpResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBcOpResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->listeninfo())) return false;
  if (has_fixedcardchange()) {
    if (!this->fixedcardchange().IsInitialized()) return false;
  }
  return true;
}

void AckBcOpResult::Swap(AckBcOpResult* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(outcardchairid_, other->outcardchairid_);
    std::swap(optype_, other->optype_);
    std::swap(card_, other->card_);
    score_.Swap(&other->score_);
    std::swap(isqiangganghu_, other->isqiangganghu_);
    std::swap(optype2_, other->optype2_);
    std::swap(fz_hu_type_, other->fz_hu_type_);
    listeninfo_.Swap(&other->listeninfo_);
    chinooutcards_.Swap(&other->chinooutcards_);
    opcards_.Swap(&other->opcards_);
    carddel_.Swap(&other->carddel_);
    std::swap(fixedcardchange_, other->fixedcardchange_);
    std::swap(passhu_, other->passhu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBcOpResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBcOpResult_descriptor_;
  metadata.reflection = AckBcOpResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckListenNotify::kOpTypeFieldNumber;
const int AckListenNotify::kListenInfoFieldNumber;
const int AckListenNotify::kListenInfo1FieldNumber;
const int AckListenNotify::kCardsFieldNumber;
#endif  // !_MSC_VER

AckListenNotify::AckListenNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckListenNotify)
}

void AckListenNotify::InitAsDefaultInstance() {
}

AckListenNotify::AckListenNotify(const AckListenNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckListenNotify)
}

void AckListenNotify::SharedCtor() {
  _cached_size_ = 0;
  optype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckListenNotify::~AckListenNotify() {
  // @@protoc_insertion_point(destructor:proto.game.AckListenNotify)
  SharedDtor();
}

void AckListenNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckListenNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckListenNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckListenNotify_descriptor_;
}

const AckListenNotify& AckListenNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckListenNotify* AckListenNotify::default_instance_ = NULL;

AckListenNotify* AckListenNotify::New() const {
  return new AckListenNotify;
}

void AckListenNotify::Clear() {
  optype_ = 0;
  listeninfo_.Clear();
  listeninfo1_.Clear();
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckListenNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckListenNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 OpType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
          set_has_optype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ListenInfo;
        break;
      }

      // repeated .proto.game.tagListenInfo ListenInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ListenInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listeninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ListenInfo;
        if (input->ExpectTag(26)) goto parse_ListenInfo1;
        break;
      }

      // repeated .proto.game.tagListenInfo ListenInfo1 = 3;
      case 3: {
        if (tag == 26) {
         parse_ListenInfo1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listeninfo1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ListenInfo1;
        if (input->ExpectTag(32)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 4;
      case 4: {
        if (tag == 32) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_cards())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckListenNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckListenNotify)
  return false;
#undef DO_
}

void AckListenNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckListenNotify)
  // required int32 OpType = 1;
  if (has_optype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->optype(), output);
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 2;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->listeninfo(i), output);
  }

  // repeated .proto.game.tagListenInfo ListenInfo1 = 3;
  for (int i = 0; i < this->listeninfo1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->listeninfo1(i), output);
  }

  // repeated int32 cards = 4;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckListenNotify)
}

::google::protobuf::uint8* AckListenNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckListenNotify)
  // required int32 OpType = 1;
  if (has_optype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->optype(), target);
  }

  // repeated .proto.game.tagListenInfo ListenInfo = 2;
  for (int i = 0; i < this->listeninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->listeninfo(i), target);
  }

  // repeated .proto.game.tagListenInfo ListenInfo1 = 3;
  for (int i = 0; i < this->listeninfo1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->listeninfo1(i), target);
  }

  // repeated int32 cards = 4;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckListenNotify)
  return target;
}

int AckListenNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 OpType = 1;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

  }
  // repeated .proto.game.tagListenInfo ListenInfo = 2;
  total_size += 1 * this->listeninfo_size();
  for (int i = 0; i < this->listeninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listeninfo(i));
  }

  // repeated .proto.game.tagListenInfo ListenInfo1 = 3;
  total_size += 1 * this->listeninfo1_size();
  for (int i = 0; i < this->listeninfo1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listeninfo1(i));
  }

  // repeated int32 cards = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckListenNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckListenNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckListenNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckListenNotify::MergeFrom(const AckListenNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  listeninfo_.MergeFrom(from.listeninfo_);
  listeninfo1_.MergeFrom(from.listeninfo1_);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_optype()) {
      set_optype(from.optype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckListenNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckListenNotify::CopyFrom(const AckListenNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckListenNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->listeninfo())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->listeninfo1())) return false;
  return true;
}

void AckListenNotify::Swap(AckListenNotify* other) {
  if (other != this) {
    std::swap(optype_, other->optype_);
    listeninfo_.Swap(&other->listeninfo_);
    listeninfo1_.Swap(&other->listeninfo1_);
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckListenNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckListenNotify_descriptor_;
  metadata.reflection = AckListenNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserHu::kHuChairIDFieldNumber;
const int AckUserHu::kPasHuChairIDFieldNumber;
const int AckUserHu::kScoreFieldNumber;
const int AckUserHu::kFanFieldNumber;
#endif  // !_MSC_VER

AckUserHu::AckUserHu()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckUserHu)
}

void AckUserHu::InitAsDefaultInstance() {
}

AckUserHu::AckUserHu(const AckUserHu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckUserHu)
}

void AckUserHu::SharedCtor() {
  _cached_size_ = 0;
  huchairid_ = 0;
  pashuchairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserHu::~AckUserHu() {
  // @@protoc_insertion_point(destructor:proto.game.AckUserHu)
  SharedDtor();
}

void AckUserHu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUserHu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserHu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserHu_descriptor_;
}

const AckUserHu& AckUserHu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUserHu* AckUserHu::default_instance_ = NULL;

AckUserHu* AckUserHu::New() const {
  return new AckUserHu;
}

void AckUserHu::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckUserHu*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(huchairid_, pashuchairid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  score_.Clear();
  fan_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserHu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckUserHu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 HuChairID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huchairid_)));
          set_has_huchairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PasHuChairID;
        break;
      }

      // optional int32 PasHuChairID = 2;
      case 2: {
        if (tag == 16) {
         parse_PasHuChairID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pashuchairid_)));
          set_has_pashuchairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Score;
        break;
      }

      // repeated int32 Score = 3;
      case 3: {
        if (tag == 24) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_score())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Score;
        if (input->ExpectTag(32)) goto parse_fan;
        break;
      }

      // repeated int32 fan = 4;
      case 4: {
        if (tag == 32) {
         parse_fan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_fan())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fan())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fan;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckUserHu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckUserHu)
  return false;
#undef DO_
}

void AckUserHu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckUserHu)
  // required int32 HuChairID = 1;
  if (has_huchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->huchairid(), output);
  }

  // optional int32 PasHuChairID = 2;
  if (has_pashuchairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pashuchairid(), output);
  }

  // repeated int32 Score = 3;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->score(i), output);
  }

  // repeated int32 fan = 4;
  for (int i = 0; i < this->fan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->fan(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckUserHu)
}

::google::protobuf::uint8* AckUserHu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckUserHu)
  // required int32 HuChairID = 1;
  if (has_huchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->huchairid(), target);
  }

  // optional int32 PasHuChairID = 2;
  if (has_pashuchairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pashuchairid(), target);
  }

  // repeated int32 Score = 3;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->score(i), target);
  }

  // repeated int32 fan = 4;
  for (int i = 0; i < this->fan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->fan(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckUserHu)
  return target;
}

int AckUserHu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 HuChairID = 1;
    if (has_huchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huchairid());
    }

    // optional int32 PasHuChairID = 2;
    if (has_pashuchairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pashuchairid());
    }

  }
  // repeated int32 Score = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  // repeated int32 fan = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->fan_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fan(i));
    }
    total_size += 1 * this->fan_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserHu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserHu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserHu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserHu::MergeFrom(const AckUserHu& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  fan_.MergeFrom(from.fan_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_huchairid()) {
      set_huchairid(from.huchairid());
    }
    if (from.has_pashuchairid()) {
      set_pashuchairid(from.pashuchairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserHu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserHu::CopyFrom(const AckUserHu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserHu::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckUserHu::Swap(AckUserHu* other) {
  if (other != this) {
    std::swap(huchairid_, other->huchairid_);
    std::swap(pashuchairid_, other->pashuchairid_);
    score_.Swap(&other->score_);
    fan_.Swap(&other->fan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserHu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserHu_descriptor_;
  metadata.reflection = AckUserHu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagEndGang::kGangTypeFieldNumber;
const int tagEndGang::kGangCardFieldNumber;
#endif  // !_MSC_VER

tagEndGang::tagEndGang()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.tagEndGang)
}

void tagEndGang::InitAsDefaultInstance() {
}

tagEndGang::tagEndGang(const tagEndGang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.tagEndGang)
}

void tagEndGang::SharedCtor() {
  _cached_size_ = 0;
  gangtype_ = 0;
  gangcard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagEndGang::~tagEndGang() {
  // @@protoc_insertion_point(destructor:proto.game.tagEndGang)
  SharedDtor();
}

void tagEndGang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagEndGang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagEndGang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagEndGang_descriptor_;
}

const tagEndGang& tagEndGang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagEndGang* tagEndGang::default_instance_ = NULL;

tagEndGang* tagEndGang::New() const {
  return new tagEndGang;
}

void tagEndGang::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<tagEndGang*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gangtype_, gangcard_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagEndGang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.tagEndGang)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 GangType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangtype_)));
          set_has_gangtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GangCard;
        break;
      }

      // optional int32 GangCard = 2;
      case 2: {
        if (tag == 16) {
         parse_GangCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangcard_)));
          set_has_gangcard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.tagEndGang)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.tagEndGang)
  return false;
#undef DO_
}

void tagEndGang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.tagEndGang)
  // optional int32 GangType = 1;
  if (has_gangtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gangtype(), output);
  }

  // optional int32 GangCard = 2;
  if (has_gangcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gangcard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.tagEndGang)
}

::google::protobuf::uint8* tagEndGang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.tagEndGang)
  // optional int32 GangType = 1;
  if (has_gangtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gangtype(), target);
  }

  // optional int32 GangCard = 2;
  if (has_gangcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gangcard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.tagEndGang)
  return target;
}

int tagEndGang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 GangType = 1;
    if (has_gangtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangtype());
    }

    // optional int32 GangCard = 2;
    if (has_gangcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangcard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagEndGang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagEndGang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagEndGang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagEndGang::MergeFrom(const tagEndGang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gangtype()) {
      set_gangtype(from.gangtype());
    }
    if (from.has_gangcard()) {
      set_gangcard(from.gangcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagEndGang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagEndGang::CopyFrom(const tagEndGang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagEndGang::IsInitialized() const {

  return true;
}

void tagEndGang::Swap(tagEndGang* other) {
  if (other != this) {
    std::swap(gangtype_, other->gangtype_);
    std::swap(gangcard_, other->gangcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagEndGang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagEndGang_descriptor_;
  metadata.reflection = tagEndGang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagEndGangInfo::kGangFieldNumber;
const int tagEndGangInfo::kTotalGangScoreFieldNumber;
#endif  // !_MSC_VER

tagEndGangInfo::tagEndGangInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.tagEndGangInfo)
}

void tagEndGangInfo::InitAsDefaultInstance() {
}

tagEndGangInfo::tagEndGangInfo(const tagEndGangInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.tagEndGangInfo)
}

void tagEndGangInfo::SharedCtor() {
  _cached_size_ = 0;
  totalgangscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagEndGangInfo::~tagEndGangInfo() {
  // @@protoc_insertion_point(destructor:proto.game.tagEndGangInfo)
  SharedDtor();
}

void tagEndGangInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tagEndGangInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagEndGangInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagEndGangInfo_descriptor_;
}

const tagEndGangInfo& tagEndGangInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

tagEndGangInfo* tagEndGangInfo::default_instance_ = NULL;

tagEndGangInfo* tagEndGangInfo::New() const {
  return new tagEndGangInfo;
}

void tagEndGangInfo::Clear() {
  totalgangscore_ = 0;
  gang_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagEndGangInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.tagEndGangInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.tagEndGang Gang = 1;
      case 1: {
        if (tag == 10) {
         parse_Gang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gang()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Gang;
        if (input->ExpectTag(16)) goto parse_TotalGangScore;
        break;
      }

      // optional int32 TotalGangScore = 2;
      case 2: {
        if (tag == 16) {
         parse_TotalGangScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalgangscore_)));
          set_has_totalgangscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.tagEndGangInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.tagEndGangInfo)
  return false;
#undef DO_
}

void tagEndGangInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.tagEndGangInfo)
  // repeated .proto.game.tagEndGang Gang = 1;
  for (int i = 0; i < this->gang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gang(i), output);
  }

  // optional int32 TotalGangScore = 2;
  if (has_totalgangscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalgangscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.tagEndGangInfo)
}

::google::protobuf::uint8* tagEndGangInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.tagEndGangInfo)
  // repeated .proto.game.tagEndGang Gang = 1;
  for (int i = 0; i < this->gang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gang(i), target);
  }

  // optional int32 TotalGangScore = 2;
  if (has_totalgangscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalgangscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.tagEndGangInfo)
  return target;
}

int tagEndGangInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 TotalGangScore = 2;
    if (has_totalgangscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalgangscore());
    }

  }
  // repeated .proto.game.tagEndGang Gang = 1;
  total_size += 1 * this->gang_size();
  for (int i = 0; i < this->gang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gang(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagEndGangInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagEndGangInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagEndGangInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagEndGangInfo::MergeFrom(const tagEndGangInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gang_.MergeFrom(from.gang_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_totalgangscore()) {
      set_totalgangscore(from.totalgangscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagEndGangInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagEndGangInfo::CopyFrom(const tagEndGangInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagEndGangInfo::IsInitialized() const {

  return true;
}

void tagEndGangInfo::Swap(tagEndGangInfo* other) {
  if (other != this) {
    gang_.Swap(&other->gang_);
    std::swap(totalgangscore_, other->totalgangscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagEndGangInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagEndGangInfo_descriptor_;
  metadata.reflection = tagEndGangInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFanInfo::kAddTypeFieldNumber;
const int AddFanInfo::kAddNumFieldNumber;
const int AddFanInfo::kAddType2FieldNumber;
#endif  // !_MSC_VER

AddFanInfo::AddFanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AddFanInfo)
}

void AddFanInfo::InitAsDefaultInstance() {
}

AddFanInfo::AddFanInfo(const AddFanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AddFanInfo)
}

void AddFanInfo::SharedCtor() {
  _cached_size_ = 0;
  addtype_ = 0;
  addnum_ = 0;
  addtype2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFanInfo::~AddFanInfo() {
  // @@protoc_insertion_point(destructor:proto.game.AddFanInfo)
  SharedDtor();
}

void AddFanInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddFanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFanInfo_descriptor_;
}

const AddFanInfo& AddFanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AddFanInfo* AddFanInfo::default_instance_ = NULL;

AddFanInfo* AddFanInfo::New() const {
  return new AddFanInfo;
}

void AddFanInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddFanInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(addtype_, addtype2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AddFanInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 AddType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addtype_)));
          set_has_addtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AddNum;
        break;
      }

      // optional int32 AddNum = 2;
      case 2: {
        if (tag == 16) {
         parse_AddNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addnum_)));
          set_has_addnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AddType2;
        break;
      }

      // optional int32 AddType2 = 3;
      case 3: {
        if (tag == 24) {
         parse_AddType2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addtype2_)));
          set_has_addtype2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AddFanInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AddFanInfo)
  return false;
#undef DO_
}

void AddFanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AddFanInfo)
  // optional int32 AddType = 1;
  if (has_addtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->addtype(), output);
  }

  // optional int32 AddNum = 2;
  if (has_addnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->addnum(), output);
  }

  // optional int32 AddType2 = 3;
  if (has_addtype2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->addtype2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AddFanInfo)
}

::google::protobuf::uint8* AddFanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AddFanInfo)
  // optional int32 AddType = 1;
  if (has_addtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->addtype(), target);
  }

  // optional int32 AddNum = 2;
  if (has_addnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->addnum(), target);
  }

  // optional int32 AddType2 = 3;
  if (has_addtype2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->addtype2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AddFanInfo)
  return target;
}

int AddFanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 AddType = 1;
    if (has_addtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addtype());
    }

    // optional int32 AddNum = 2;
    if (has_addnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addnum());
    }

    // optional int32 AddType2 = 3;
    if (has_addtype2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addtype2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFanInfo::MergeFrom(const AddFanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addtype()) {
      set_addtype(from.addtype());
    }
    if (from.has_addnum()) {
      set_addnum(from.addnum());
    }
    if (from.has_addtype2()) {
      set_addtype2(from.addtype2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFanInfo::CopyFrom(const AddFanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFanInfo::IsInitialized() const {

  return true;
}

void AddFanInfo::Swap(AddFanInfo* other) {
  if (other != this) {
    std::swap(addtype_, other->addtype_);
    std::swap(addnum_, other->addnum_);
    std::swap(addtype2_, other->addtype2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFanInfo_descriptor_;
  metadata.reflection = AddFanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FanInfo::kChairidFieldNumber;
const int FanInfo::kSpecialTypeFieldNumber;
const int FanInfo::kFanNumFieldNumber;
const int FanInfo::kAddfanFieldNumber;
const int FanInfo::kHucardFieldNumber;
const int FanInfo::kDianPaoFieldNumber;
#endif  // !_MSC_VER

FanInfo::FanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.FanInfo)
}

void FanInfo::InitAsDefaultInstance() {
}

FanInfo::FanInfo(const FanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.FanInfo)
}

void FanInfo::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  specialtype_ = 0;
  fannum_ = 0;
  hucard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FanInfo::~FanInfo() {
  // @@protoc_insertion_point(destructor:proto.game.FanInfo)
  SharedDtor();
}

void FanInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FanInfo_descriptor_;
}

const FanInfo& FanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

FanInfo* FanInfo::default_instance_ = NULL;

FanInfo* FanInfo::New() const {
  return new FanInfo;
}

void FanInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FanInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chairid_, specialtype_);
  ZR_(fannum_, hucard_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  addfan_.Clear();
  dianpao_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.FanInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chairid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SpecialType;
        break;
      }

      // required int32 SpecialType = 2;
      case 2: {
        if (tag == 16) {
         parse_SpecialType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &specialtype_)));
          set_has_specialtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FanNum;
        break;
      }

      // required int32 FanNum = 3;
      case 3: {
        if (tag == 24) {
         parse_FanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fannum_)));
          set_has_fannum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_addfan;
        break;
      }

      // repeated .proto.game.AddFanInfo addfan = 4;
      case 4: {
        if (tag == 34) {
         parse_addfan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addfan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_addfan;
        if (input->ExpectTag(40)) goto parse_hucard;
        break;
      }

      // optional int32 hucard = 5;
      case 5: {
        if (tag == 40) {
         parse_hucard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hucard_)));
          set_has_hucard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_DianPao;
        break;
      }

      // repeated int32 DianPao = 6;
      case 6: {
        if (tag == 48) {
         parse_DianPao:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_dianpao())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dianpao())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_DianPao;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.FanInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.FanInfo)
  return false;
#undef DO_
}

void FanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.FanInfo)
  // required int32 chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // required int32 SpecialType = 2;
  if (has_specialtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->specialtype(), output);
  }

  // required int32 FanNum = 3;
  if (has_fannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fannum(), output);
  }

  // repeated .proto.game.AddFanInfo addfan = 4;
  for (int i = 0; i < this->addfan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->addfan(i), output);
  }

  // optional int32 hucard = 5;
  if (has_hucard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hucard(), output);
  }

  // repeated int32 DianPao = 6;
  for (int i = 0; i < this->dianpao_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->dianpao(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.FanInfo)
}

::google::protobuf::uint8* FanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.FanInfo)
  // required int32 chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // required int32 SpecialType = 2;
  if (has_specialtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->specialtype(), target);
  }

  // required int32 FanNum = 3;
  if (has_fannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fannum(), target);
  }

  // repeated .proto.game.AddFanInfo addfan = 4;
  for (int i = 0; i < this->addfan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->addfan(i), target);
  }

  // optional int32 hucard = 5;
  if (has_hucard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hucard(), target);
  }

  // repeated int32 DianPao = 6;
  for (int i = 0; i < this->dianpao_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->dianpao(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.FanInfo)
  return target;
}

int FanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // required int32 SpecialType = 2;
    if (has_specialtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->specialtype());
    }

    // required int32 FanNum = 3;
    if (has_fannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fannum());
    }

    // optional int32 hucard = 5;
    if (has_hucard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hucard());
    }

  }
  // repeated .proto.game.AddFanInfo addfan = 4;
  total_size += 1 * this->addfan_size();
  for (int i = 0; i < this->addfan_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addfan(i));
  }

  // repeated int32 DianPao = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->dianpao_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dianpao(i));
    }
    total_size += 1 * this->dianpao_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FanInfo::MergeFrom(const FanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  addfan_.MergeFrom(from.addfan_);
  dianpao_.MergeFrom(from.dianpao_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_specialtype()) {
      set_specialtype(from.specialtype());
    }
    if (from.has_fannum()) {
      set_fannum(from.fannum());
    }
    if (from.has_hucard()) {
      set_hucard(from.hucard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FanInfo::CopyFrom(const FanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FanInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FanInfo::Swap(FanInfo* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(specialtype_, other->specialtype_);
    std::swap(fannum_, other->fannum_);
    addfan_.Swap(&other->addfan_);
    std::swap(hucard_, other->hucard_);
    dianpao_.Swap(&other->dianpao_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FanInfo_descriptor_;
  metadata.reflection = FanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGameEnd::kUserCardFieldNumber;
const int AckGameEnd::kScoreFieldNumber;
const int AckGameEnd::kEndStateFieldNumber;
const int AckGameEnd::kEndGangInfoFieldNumber;
const int AckGameEnd::kFaninfoFieldNumber;
const int AckGameEnd::kMoneyFieldNumber;
const int AckGameEnd::kTsFieldNumber;
const int AckGameEnd::kMd5FieldNumber;
#endif  // !_MSC_VER

AckGameEnd::AckGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckGameEnd)
}

void AckGameEnd::InitAsDefaultInstance() {
}

AckGameEnd::AckGameEnd(const AckGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckGameEnd)
}

void AckGameEnd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  endstate_ = 0;
  ts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGameEnd::~AckGameEnd() {
  // @@protoc_insertion_point(destructor:proto.game.AckGameEnd)
  SharedDtor();
}

void AckGameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGameEnd_descriptor_;
}

const AckGameEnd& AckGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckGameEnd* AckGameEnd::default_instance_ = NULL;

AckGameEnd* AckGameEnd::New() const {
  return new AckGameEnd;
}

void AckGameEnd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckGameEnd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(endstate_, ts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  usercard_.Clear();
  score_.Clear();
  endganginfo_.Clear();
  faninfo_.Clear();
  money_.Clear();
  md5_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckGameEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.HandCards UserCard = 1;
      case 1: {
        if (tag == 10) {
         parse_UserCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usercard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UserCard;
        if (input->ExpectTag(16)) goto parse_Score;
        break;
      }

      // repeated int32 Score = 2;
      case 2: {
        if (tag == 16) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_score())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Score;
        if (input->ExpectTag(24)) goto parse_EndState;
        break;
      }

      // optional int32 EndState = 3;
      case 3: {
        if (tag == 24) {
         parse_EndState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endstate_)));
          set_has_endstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_EndGangInfo;
        break;
      }

      // repeated .proto.game.tagEndGangInfo EndGangInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_EndGangInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_endganginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_EndGangInfo;
        if (input->ExpectTag(42)) goto parse_faninfo;
        break;
      }

      // repeated .proto.game.FanInfo faninfo = 5;
      case 5: {
        if (tag == 42) {
         parse_faninfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_faninfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_faninfo;
        if (input->ExpectTag(48)) goto parse_money;
        break;
      }

      // repeated int32 money = 6;
      case 6: {
        if (tag == 48) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_money())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_money())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_money;
        if (input->ExpectTag(56)) goto parse_ts;
        break;
      }

      // optional int32 ts = 7;
      case 7: {
        if (tag == 56) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_md5;
        break;
      }

      // repeated string md5 = 8;
      case 8: {
        if (tag == 66) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5(this->md5_size() - 1).data(),
            this->md5(this->md5_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "md5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_md5;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckGameEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckGameEnd)
  return false;
#undef DO_
}

void AckGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckGameEnd)
  // repeated .proto.game.HandCards UserCard = 1;
  for (int i = 0; i < this->usercard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->usercard(i), output);
  }

  // repeated int32 Score = 2;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->score(i), output);
  }

  // optional int32 EndState = 3;
  if (has_endstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->endstate(), output);
  }

  // repeated .proto.game.tagEndGangInfo EndGangInfo = 4;
  for (int i = 0; i < this->endganginfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->endganginfo(i), output);
  }

  // repeated .proto.game.FanInfo faninfo = 5;
  for (int i = 0; i < this->faninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->faninfo(i), output);
  }

  // repeated int32 money = 6;
  for (int i = 0; i < this->money_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->money(i), output);
  }

  // optional int32 ts = 7;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ts(), output);
  }

  // repeated string md5 = 8;
  for (int i = 0; i < this->md5_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->md5(i).data(), this->md5(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "md5");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->md5(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckGameEnd)
}

::google::protobuf::uint8* AckGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckGameEnd)
  // repeated .proto.game.HandCards UserCard = 1;
  for (int i = 0; i < this->usercard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->usercard(i), target);
  }

  // repeated int32 Score = 2;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->score(i), target);
  }

  // optional int32 EndState = 3;
  if (has_endstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->endstate(), target);
  }

  // repeated .proto.game.tagEndGangInfo EndGangInfo = 4;
  for (int i = 0; i < this->endganginfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->endganginfo(i), target);
  }

  // repeated .proto.game.FanInfo faninfo = 5;
  for (int i = 0; i < this->faninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->faninfo(i), target);
  }

  // repeated int32 money = 6;
  for (int i = 0; i < this->money_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->money(i), target);
  }

  // optional int32 ts = 7;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ts(), target);
  }

  // repeated string md5 = 8;
  for (int i = 0; i < this->md5_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5(i).data(), this->md5(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "md5");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->md5(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckGameEnd)
  return target;
}

int AckGameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 EndState = 3;
    if (has_endstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endstate());
    }

    // optional int32 ts = 7;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ts());
    }

  }
  // repeated .proto.game.HandCards UserCard = 1;
  total_size += 1 * this->usercard_size();
  for (int i = 0; i < this->usercard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usercard(i));
  }

  // repeated int32 Score = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  // repeated .proto.game.tagEndGangInfo EndGangInfo = 4;
  total_size += 1 * this->endganginfo_size();
  for (int i = 0; i < this->endganginfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->endganginfo(i));
  }

  // repeated .proto.game.FanInfo faninfo = 5;
  total_size += 1 * this->faninfo_size();
  for (int i = 0; i < this->faninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faninfo(i));
  }

  // repeated int32 money = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->money_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->money(i));
    }
    total_size += 1 * this->money_size() + data_size;
  }

  // repeated string md5 = 8;
  total_size += 1 * this->md5_size();
  for (int i = 0; i < this->md5_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->md5(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGameEnd::MergeFrom(const AckGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  usercard_.MergeFrom(from.usercard_);
  score_.MergeFrom(from.score_);
  endganginfo_.MergeFrom(from.endganginfo_);
  faninfo_.MergeFrom(from.faninfo_);
  money_.MergeFrom(from.money_);
  md5_.MergeFrom(from.md5_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_endstate()) {
      set_endstate(from.endstate());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGameEnd::CopyFrom(const AckGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGameEnd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->usercard())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->faninfo())) return false;
  return true;
}

void AckGameEnd::Swap(AckGameEnd* other) {
  if (other != this) {
    usercard_.Swap(&other->usercard_);
    score_.Swap(&other->score_);
    std::swap(endstate_, other->endstate_);
    endganginfo_.Swap(&other->endganginfo_);
    faninfo_.Swap(&other->faninfo_);
    money_.Swap(&other->money_);
    std::swap(ts_, other->ts_);
    md5_.Swap(&other->md5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGameEnd_descriptor_;
  metadata.reflection = AckGameEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckIsAuto::kChairIDFieldNumber;
const int AckIsAuto::kIsAutoFieldNumber;
#endif  // !_MSC_VER

AckIsAuto::AckIsAuto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckIsAuto)
}

void AckIsAuto::InitAsDefaultInstance() {
}

AckIsAuto::AckIsAuto(const AckIsAuto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckIsAuto)
}

void AckIsAuto::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  isauto_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckIsAuto::~AckIsAuto() {
  // @@protoc_insertion_point(destructor:proto.game.AckIsAuto)
  SharedDtor();
}

void AckIsAuto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckIsAuto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckIsAuto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckIsAuto_descriptor_;
}

const AckIsAuto& AckIsAuto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckIsAuto* AckIsAuto::default_instance_ = NULL;

AckIsAuto* AckIsAuto::New() const {
  return new AckIsAuto;
}

void AckIsAuto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckIsAuto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chairid_, isauto_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckIsAuto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckIsAuto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isAuto;
        break;
      }

      // optional int32 isAuto = 2;
      case 2: {
        if (tag == 16) {
         parse_isAuto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isauto_)));
          set_has_isauto();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckIsAuto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckIsAuto)
  return false;
#undef DO_
}

void AckIsAuto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckIsAuto)
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 isAuto = 2;
  if (has_isauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isauto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckIsAuto)
}

::google::protobuf::uint8* AckIsAuto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckIsAuto)
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 isAuto = 2;
  if (has_isauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isauto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckIsAuto)
  return target;
}

int AckIsAuto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 isAuto = 2;
    if (has_isauto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isauto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckIsAuto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckIsAuto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckIsAuto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckIsAuto::MergeFrom(const AckIsAuto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_isauto()) {
      set_isauto(from.isauto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckIsAuto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckIsAuto::CopyFrom(const AckIsAuto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckIsAuto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckIsAuto::Swap(AckIsAuto* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(isauto_, other->isauto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckIsAuto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckIsAuto_descriptor_;
  metadata.reflection = AckIsAuto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateUserInfo::kChairidFieldNumber;
const int AckUpdateUserInfo::kUidFieldNumber;
const int AckUpdateUserInfo::kMoneyFieldNumber;
const int AckUpdateUserInfo::kRmbFieldNumber;
#endif  // !_MSC_VER

AckUpdateUserInfo::AckUpdateUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckUpdateUserInfo)
}

void AckUpdateUserInfo::InitAsDefaultInstance() {
}

AckUpdateUserInfo::AckUpdateUserInfo(const AckUpdateUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckUpdateUserInfo)
}

void AckUpdateUserInfo::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  uid_ = 0;
  money_ = 0;
  rmb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateUserInfo::~AckUpdateUserInfo() {
  // @@protoc_insertion_point(destructor:proto.game.AckUpdateUserInfo)
  SharedDtor();
}

void AckUpdateUserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUpdateUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateUserInfo_descriptor_;
}

const AckUpdateUserInfo& AckUpdateUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUpdateUserInfo* AckUpdateUserInfo::default_instance_ = NULL;

AckUpdateUserInfo* AckUpdateUserInfo::New() const {
  return new AckUpdateUserInfo;
}

void AckUpdateUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckUpdateUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chairid_, rmb_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckUpdateUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chairid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional int32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional int32 money = 3;
      case 3: {
        if (tag == 24) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rmb;
        break;
      }

      // optional int32 rmb = 4;
      case 4: {
        if (tag == 32) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckUpdateUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckUpdateUserInfo)
  return false;
#undef DO_
}

void AckUpdateUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckUpdateUserInfo)
  // required int32 chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }

  // optional int32 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->money(), output);
  }

  // optional int32 rmb = 4;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rmb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckUpdateUserInfo)
}

::google::protobuf::uint8* AckUpdateUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckUpdateUserInfo)
  // required int32 chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uid(), target);
  }

  // optional int32 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->money(), target);
  }

  // optional int32 rmb = 4;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rmb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckUpdateUserInfo)
  return target;
}

int AckUpdateUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 rmb = 4;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateUserInfo::MergeFrom(const AckUpdateUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateUserInfo::CopyFrom(const AckUpdateUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckUpdateUserInfo::Swap(AckUpdateUserInfo* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(uid_, other->uid_);
    std::swap(money_, other->money_);
    std::swap(rmb_, other->rmb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateUserInfo_descriptor_;
  metadata.reflection = AckUpdateUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGameStartFail::kVidFieldNumber;
const int AckGameStartFail::kRoomidFieldNumber;
const int AckGameStartFail::kCanStartFieldNumber;
const int AckGameStartFail::kCodeFieldNumber;
const int AckGameStartFail::kTsFieldNumber;
#endif  // !_MSC_VER

AckGameStartFail::AckGameStartFail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckGameStartFail)
}

void AckGameStartFail::InitAsDefaultInstance() {
}

AckGameStartFail::AckGameStartFail(const AckGameStartFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckGameStartFail)
}

void AckGameStartFail::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vid_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  can_start_ = 0;
  code_ = 0;
  ts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGameStartFail::~AckGameStartFail() {
  // @@protoc_insertion_point(destructor:proto.game.AckGameStartFail)
  SharedDtor();
}

void AckGameStartFail::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (this != default_instance_) {
  }
}

void AckGameStartFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGameStartFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGameStartFail_descriptor_;
}

const AckGameStartFail& AckGameStartFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckGameStartFail* AckGameStartFail::default_instance_ = NULL;

AckGameStartFail* AckGameStartFail::New() const {
  return new AckGameStartFail;
}

void AckGameStartFail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckGameStartFail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(vid_, ts_);
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGameStartFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckGameStartFail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 vid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vid_)));
          set_has_vid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomid;
        break;
      }

      // optional string roomid = 2;
      case 2: {
        if (tag == 18) {
         parse_roomid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roomid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_can_start;
        break;
      }

      // optional int32 can_start = 3;
      case 3: {
        if (tag == 24) {
         parse_can_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_start_)));
          set_has_can_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_code;
        break;
      }

      // optional int32 code = 4;
      case 4: {
        if (tag == 32) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ts;
        break;
      }

      // optional int32 ts = 5;
      case 5: {
        if (tag == 40) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckGameStartFail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckGameStartFail)
  return false;
#undef DO_
}

void AckGameStartFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckGameStartFail)
  // required int32 vid = 1;
  if (has_vid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vid(), output);
  }

  // optional string roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->roomid(), output);
  }

  // optional int32 can_start = 3;
  if (has_can_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->can_start(), output);
  }

  // optional int32 code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->code(), output);
  }

  // optional int32 ts = 5;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckGameStartFail)
}

::google::protobuf::uint8* AckGameStartFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckGameStartFail)
  // required int32 vid = 1;
  if (has_vid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vid(), target);
  }

  // optional string roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomid(), target);
  }

  // optional int32 can_start = 3;
  if (has_can_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->can_start(), target);
  }

  // optional int32 code = 4;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->code(), target);
  }

  // optional int32 ts = 5;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckGameStartFail)
  return target;
}

int AckGameStartFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 vid = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vid());
    }

    // optional string roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

    // optional int32 can_start = 3;
    if (has_can_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_start());
    }

    // optional int32 code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional int32 ts = 5;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGameStartFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGameStartFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGameStartFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGameStartFail::MergeFrom(const AckGameStartFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vid()) {
      set_vid(from.vid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_can_start()) {
      set_can_start(from.can_start());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGameStartFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGameStartFail::CopyFrom(const AckGameStartFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGameStartFail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckGameStartFail::Swap(AckGameStartFail* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(roomid_, other->roomid_);
    std::swap(can_start_, other->can_start_);
    std::swap(code_, other->code_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGameStartFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGameStartFail_descriptor_;
  metadata.reflection = AckGameStartFail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUpdateTimer::kChairIDFieldNumber;
const int AckUpdateTimer::kLefttimeFieldNumber;
#endif  // !_MSC_VER

AckUpdateTimer::AckUpdateTimer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckUpdateTimer)
}

void AckUpdateTimer::InitAsDefaultInstance() {
}

AckUpdateTimer::AckUpdateTimer(const AckUpdateTimer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckUpdateTimer)
}

void AckUpdateTimer::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  lefttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUpdateTimer::~AckUpdateTimer() {
  // @@protoc_insertion_point(destructor:proto.game.AckUpdateTimer)
  SharedDtor();
}

void AckUpdateTimer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUpdateTimer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUpdateTimer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUpdateTimer_descriptor_;
}

const AckUpdateTimer& AckUpdateTimer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUpdateTimer* AckUpdateTimer::default_instance_ = NULL;

AckUpdateTimer* AckUpdateTimer::New() const {
  return new AckUpdateTimer;
}

void AckUpdateTimer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckUpdateTimer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chairid_, lefttime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUpdateTimer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckUpdateTimer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lefttime;
        break;
      }

      // optional int32 lefttime = 2;
      case 2: {
        if (tag == 16) {
         parse_lefttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckUpdateTimer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckUpdateTimer)
  return false;
#undef DO_
}

void AckUpdateTimer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckUpdateTimer)
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 lefttime = 2;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lefttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckUpdateTimer)
}

::google::protobuf::uint8* AckUpdateTimer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckUpdateTimer)
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 lefttime = 2;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lefttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckUpdateTimer)
  return target;
}

int AckUpdateTimer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 lefttime = 2;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUpdateTimer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUpdateTimer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUpdateTimer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUpdateTimer::MergeFrom(const AckUpdateTimer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUpdateTimer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUpdateTimer::CopyFrom(const AckUpdateTimer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUpdateTimer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckUpdateTimer::Swap(AckUpdateTimer* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUpdateTimer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUpdateTimer_descriptor_;
  metadata.reflection = AckUpdateTimer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckDisbandChooseFaild::kChairidFieldNumber;
const int AckDisbandChooseFaild::kCodeFieldNumber;
#endif  // !_MSC_VER

AckDisbandChooseFaild::AckDisbandChooseFaild()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckDisbandChooseFaild)
}

void AckDisbandChooseFaild::InitAsDefaultInstance() {
}

AckDisbandChooseFaild::AckDisbandChooseFaild(const AckDisbandChooseFaild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckDisbandChooseFaild)
}

void AckDisbandChooseFaild::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckDisbandChooseFaild::~AckDisbandChooseFaild() {
  // @@protoc_insertion_point(destructor:proto.game.AckDisbandChooseFaild)
  SharedDtor();
}

void AckDisbandChooseFaild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckDisbandChooseFaild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDisbandChooseFaild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckDisbandChooseFaild_descriptor_;
}

const AckDisbandChooseFaild& AckDisbandChooseFaild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckDisbandChooseFaild* AckDisbandChooseFaild::default_instance_ = NULL;

AckDisbandChooseFaild* AckDisbandChooseFaild::New() const {
  return new AckDisbandChooseFaild;
}

void AckDisbandChooseFaild::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckDisbandChooseFaild*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chairid_, code_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckDisbandChooseFaild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckDisbandChooseFaild)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chairid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional int32 code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckDisbandChooseFaild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckDisbandChooseFaild)
  return false;
#undef DO_
}

void AckDisbandChooseFaild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckDisbandChooseFaild)
  // required int32 chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckDisbandChooseFaild)
}

::google::protobuf::uint8* AckDisbandChooseFaild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckDisbandChooseFaild)
  // required int32 chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckDisbandChooseFaild)
  return target;
}

int AckDisbandChooseFaild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDisbandChooseFaild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckDisbandChooseFaild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckDisbandChooseFaild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckDisbandChooseFaild::MergeFrom(const AckDisbandChooseFaild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckDisbandChooseFaild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDisbandChooseFaild::CopyFrom(const AckDisbandChooseFaild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDisbandChooseFaild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckDisbandChooseFaild::Swap(AckDisbandChooseFaild* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckDisbandChooseFaild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckDisbandChooseFaild_descriptor_;
  metadata.reflection = AckDisbandChooseFaild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckDisbandApply::kApplyChairidFieldNumber;
const int AckDisbandApply::kWaittimeFieldNumber;
const int AckDisbandApply::kOnlinechairidFieldNumber;
const int AckDisbandApply::kTotaltimeFieldNumber;
#endif  // !_MSC_VER

AckDisbandApply::AckDisbandApply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckDisbandApply)
}

void AckDisbandApply::InitAsDefaultInstance() {
}

AckDisbandApply::AckDisbandApply(const AckDisbandApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckDisbandApply)
}

void AckDisbandApply::SharedCtor() {
  _cached_size_ = 0;
  applychairid_ = 0;
  waittime_ = 0;
  totaltime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckDisbandApply::~AckDisbandApply() {
  // @@protoc_insertion_point(destructor:proto.game.AckDisbandApply)
  SharedDtor();
}

void AckDisbandApply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckDisbandApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDisbandApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckDisbandApply_descriptor_;
}

const AckDisbandApply& AckDisbandApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckDisbandApply* AckDisbandApply::default_instance_ = NULL;

AckDisbandApply* AckDisbandApply::New() const {
  return new AckDisbandApply;
}

void AckDisbandApply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckDisbandApply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(applychairid_, waittime_);
    totaltime_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  onlinechairid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckDisbandApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckDisbandApply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ApplyChairid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applychairid_)));
          set_has_applychairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Waittime;
        break;
      }

      // optional int32 Waittime = 2;
      case 2: {
        if (tag == 16) {
         parse_Waittime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &waittime_)));
          set_has_waittime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_onlinechairid;
        break;
      }

      // repeated int32 onlinechairid = 3;
      case 3: {
        if (tag == 24) {
         parse_onlinechairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_onlinechairid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_onlinechairid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_onlinechairid;
        if (input->ExpectTag(32)) goto parse_totaltime;
        break;
      }

      // optional int32 totaltime = 4;
      case 4: {
        if (tag == 32) {
         parse_totaltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totaltime_)));
          set_has_totaltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckDisbandApply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckDisbandApply)
  return false;
#undef DO_
}

void AckDisbandApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckDisbandApply)
  // required int32 ApplyChairid = 1;
  if (has_applychairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->applychairid(), output);
  }

  // optional int32 Waittime = 2;
  if (has_waittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->waittime(), output);
  }

  // repeated int32 onlinechairid = 3;
  for (int i = 0; i < this->onlinechairid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->onlinechairid(i), output);
  }

  // optional int32 totaltime = 4;
  if (has_totaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->totaltime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckDisbandApply)
}

::google::protobuf::uint8* AckDisbandApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckDisbandApply)
  // required int32 ApplyChairid = 1;
  if (has_applychairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->applychairid(), target);
  }

  // optional int32 Waittime = 2;
  if (has_waittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->waittime(), target);
  }

  // repeated int32 onlinechairid = 3;
  for (int i = 0; i < this->onlinechairid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->onlinechairid(i), target);
  }

  // optional int32 totaltime = 4;
  if (has_totaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->totaltime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckDisbandApply)
  return target;
}

int AckDisbandApply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ApplyChairid = 1;
    if (has_applychairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->applychairid());
    }

    // optional int32 Waittime = 2;
    if (has_waittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->waittime());
    }

    // optional int32 totaltime = 4;
    if (has_totaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totaltime());
    }

  }
  // repeated int32 onlinechairid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->onlinechairid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->onlinechairid(i));
    }
    total_size += 1 * this->onlinechairid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDisbandApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckDisbandApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckDisbandApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckDisbandApply::MergeFrom(const AckDisbandApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  onlinechairid_.MergeFrom(from.onlinechairid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applychairid()) {
      set_applychairid(from.applychairid());
    }
    if (from.has_waittime()) {
      set_waittime(from.waittime());
    }
    if (from.has_totaltime()) {
      set_totaltime(from.totaltime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckDisbandApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDisbandApply::CopyFrom(const AckDisbandApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDisbandApply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckDisbandApply::Swap(AckDisbandApply* other) {
  if (other != this) {
    std::swap(applychairid_, other->applychairid_);
    std::swap(waittime_, other->waittime_);
    onlinechairid_.Swap(&other->onlinechairid_);
    std::swap(totaltime_, other->totaltime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckDisbandApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckDisbandApply_descriptor_;
  metadata.reflection = AckDisbandApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckDisbandChooseBc::kChairidFieldNumber;
const int AckDisbandChooseBc::kChoosestateFieldNumber;
#endif  // !_MSC_VER

AckDisbandChooseBc::AckDisbandChooseBc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckDisbandChooseBc)
}

void AckDisbandChooseBc::InitAsDefaultInstance() {
}

AckDisbandChooseBc::AckDisbandChooseBc(const AckDisbandChooseBc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckDisbandChooseBc)
}

void AckDisbandChooseBc::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  choosestate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckDisbandChooseBc::~AckDisbandChooseBc() {
  // @@protoc_insertion_point(destructor:proto.game.AckDisbandChooseBc)
  SharedDtor();
}

void AckDisbandChooseBc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckDisbandChooseBc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDisbandChooseBc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckDisbandChooseBc_descriptor_;
}

const AckDisbandChooseBc& AckDisbandChooseBc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckDisbandChooseBc* AckDisbandChooseBc::default_instance_ = NULL;

AckDisbandChooseBc* AckDisbandChooseBc::New() const {
  return new AckDisbandChooseBc;
}

void AckDisbandChooseBc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckDisbandChooseBc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chairid_, choosestate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckDisbandChooseBc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckDisbandChooseBc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chairid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Choosestate;
        break;
      }

      // optional int32 Choosestate = 2;
      case 2: {
        if (tag == 16) {
         parse_Choosestate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &choosestate_)));
          set_has_choosestate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckDisbandChooseBc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckDisbandChooseBc)
  return false;
#undef DO_
}

void AckDisbandChooseBc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckDisbandChooseBc)
  // required int32 chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 Choosestate = 2;
  if (has_choosestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->choosestate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckDisbandChooseBc)
}

::google::protobuf::uint8* AckDisbandChooseBc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckDisbandChooseBc)
  // required int32 chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 Choosestate = 2;
  if (has_choosestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->choosestate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckDisbandChooseBc)
  return target;
}

int AckDisbandChooseBc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 Choosestate = 2;
    if (has_choosestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->choosestate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDisbandChooseBc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckDisbandChooseBc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckDisbandChooseBc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckDisbandChooseBc::MergeFrom(const AckDisbandChooseBc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_choosestate()) {
      set_choosestate(from.choosestate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckDisbandChooseBc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDisbandChooseBc::CopyFrom(const AckDisbandChooseBc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDisbandChooseBc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckDisbandChooseBc::Swap(AckDisbandChooseBc* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(choosestate_, other->choosestate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckDisbandChooseBc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckDisbandChooseBc_descriptor_;
  metadata.reflection = AckDisbandChooseBc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckDisbandResult::kResultFieldNumber;
const int AckDisbandResult::kUidFieldNumber;
const int AckDisbandResult::kAvatarFieldNumber;
const int AckDisbandResult::kClubnameFieldNumber;
const int AckDisbandResult::kClubcodeFieldNumber;
const int AckDisbandResult::kClosetypeFieldNumber;
#endif  // !_MSC_VER

AckDisbandResult::AckDisbandResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckDisbandResult)
}

void AckDisbandResult::InitAsDefaultInstance() {
}

AckDisbandResult::AckDisbandResult(const AckDisbandResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckDisbandResult)
}

void AckDisbandResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  uid_ = 0;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clubname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clubcode_ = 0;
  closetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckDisbandResult::~AckDisbandResult() {
  // @@protoc_insertion_point(destructor:proto.game.AckDisbandResult)
  SharedDtor();
}

void AckDisbandResult::SharedDtor() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (clubname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clubname_;
  }
  if (this != default_instance_) {
  }
}

void AckDisbandResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckDisbandResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckDisbandResult_descriptor_;
}

const AckDisbandResult& AckDisbandResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckDisbandResult* AckDisbandResult::default_instance_ = NULL;

AckDisbandResult* AckDisbandResult::New() const {
  return new AckDisbandResult;
}

void AckDisbandResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckDisbandResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(result_, uid_);
    ZR_(clubcode_, closetype_);
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_->clear();
      }
    }
    if (has_clubname()) {
      if (clubname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clubname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckDisbandResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckDisbandResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional int32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_avatar;
        break;
      }

      // optional string avatar = 3;
      case 3: {
        if (tag == 26) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_clubname;
        break;
      }

      // optional string clubname = 4;
      case 4: {
        if (tag == 34) {
         parse_clubname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clubname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clubname().data(), this->clubname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clubname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_clubcode;
        break;
      }

      // optional int32 clubcode = 5;
      case 5: {
        if (tag == 40) {
         parse_clubcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clubcode_)));
          set_has_clubcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_closetype;
        break;
      }

      // optional int32 closetype = 6;
      case 6: {
        if (tag == 48) {
         parse_closetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closetype_)));
          set_has_closetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckDisbandResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckDisbandResult)
  return false;
#undef DO_
}

void AckDisbandResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckDisbandResult)
  // required int32 Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }

  // optional string avatar = 3;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->avatar(), output);
  }

  // optional string clubname = 4;
  if (has_clubname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clubname().data(), this->clubname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clubname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->clubname(), output);
  }

  // optional int32 clubcode = 5;
  if (has_clubcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->clubcode(), output);
  }

  // optional int32 closetype = 6;
  if (has_closetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->closetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckDisbandResult)
}

::google::protobuf::uint8* AckDisbandResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckDisbandResult)
  // required int32 Result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uid(), target);
  }

  // optional string avatar = 3;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->avatar(), target);
  }

  // optional string clubname = 4;
  if (has_clubname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clubname().data(), this->clubname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clubname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->clubname(), target);
  }

  // optional int32 clubcode = 5;
  if (has_clubcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->clubcode(), target);
  }

  // optional int32 closetype = 6;
  if (has_closetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->closetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckDisbandResult)
  return target;
}

int AckDisbandResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional string avatar = 3;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // optional string clubname = 4;
    if (has_clubname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clubname());
    }

    // optional int32 clubcode = 5;
    if (has_clubcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clubcode());
    }

    // optional int32 closetype = 6;
    if (has_closetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->closetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckDisbandResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckDisbandResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckDisbandResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckDisbandResult::MergeFrom(const AckDisbandResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_clubname()) {
      set_clubname(from.clubname());
    }
    if (from.has_clubcode()) {
      set_clubcode(from.clubcode());
    }
    if (from.has_closetype()) {
      set_closetype(from.closetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckDisbandResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckDisbandResult::CopyFrom(const AckDisbandResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckDisbandResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckDisbandResult::Swap(AckDisbandResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(uid_, other->uid_);
    std::swap(avatar_, other->avatar_);
    std::swap(clubname_, other->clubname_);
    std::swap(clubcode_, other->clubcode_);
    std::swap(closetype_, other->closetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckDisbandResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckDisbandResult_descriptor_;
  metadata.reflection = AckDisbandResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserOnlineState::kChairidFieldNumber;
const int AckUserOnlineState::kStateFieldNumber;
#endif  // !_MSC_VER

AckUserOnlineState::AckUserOnlineState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckUserOnlineState)
}

void AckUserOnlineState::InitAsDefaultInstance() {
}

AckUserOnlineState::AckUserOnlineState(const AckUserOnlineState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckUserOnlineState)
}

void AckUserOnlineState::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserOnlineState::~AckUserOnlineState() {
  // @@protoc_insertion_point(destructor:proto.game.AckUserOnlineState)
  SharedDtor();
}

void AckUserOnlineState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUserOnlineState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserOnlineState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserOnlineState_descriptor_;
}

const AckUserOnlineState& AckUserOnlineState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUserOnlineState* AckUserOnlineState::default_instance_ = NULL;

AckUserOnlineState* AckUserOnlineState::New() const {
  return new AckUserOnlineState;
}

void AckUserOnlineState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckUserOnlineState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chairid_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserOnlineState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckUserOnlineState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chairid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckUserOnlineState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckUserOnlineState)
  return false;
#undef DO_
}

void AckUserOnlineState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckUserOnlineState)
  // required int32 chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckUserOnlineState)
}

::google::protobuf::uint8* AckUserOnlineState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckUserOnlineState)
  // required int32 chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckUserOnlineState)
  return target;
}

int AckUserOnlineState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserOnlineState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserOnlineState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserOnlineState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserOnlineState::MergeFrom(const AckUserOnlineState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserOnlineState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserOnlineState::CopyFrom(const AckUserOnlineState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserOnlineState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckUserOnlineState::Swap(AckUserOnlineState* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserOnlineState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserOnlineState_descriptor_;
  metadata.reflection = AckUserOnlineState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUserOvertimeState::kChairidFieldNumber;
const int AckUserOvertimeState::kStateFieldNumber;
#endif  // !_MSC_VER

AckUserOvertimeState::AckUserOvertimeState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckUserOvertimeState)
}

void AckUserOvertimeState::InitAsDefaultInstance() {
}

AckUserOvertimeState::AckUserOvertimeState(const AckUserOvertimeState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckUserOvertimeState)
}

void AckUserOvertimeState::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUserOvertimeState::~AckUserOvertimeState() {
  // @@protoc_insertion_point(destructor:proto.game.AckUserOvertimeState)
  SharedDtor();
}

void AckUserOvertimeState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUserOvertimeState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUserOvertimeState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUserOvertimeState_descriptor_;
}

const AckUserOvertimeState& AckUserOvertimeState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckUserOvertimeState* AckUserOvertimeState::default_instance_ = NULL;

AckUserOvertimeState* AckUserOvertimeState::New() const {
  return new AckUserOvertimeState;
}

void AckUserOvertimeState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckUserOvertimeState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chairid_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUserOvertimeState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckUserOvertimeState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chairid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckUserOvertimeState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckUserOvertimeState)
  return false;
#undef DO_
}

void AckUserOvertimeState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckUserOvertimeState)
  // required int32 chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckUserOvertimeState)
}

::google::protobuf::uint8* AckUserOvertimeState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckUserOvertimeState)
  // required int32 chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckUserOvertimeState)
  return target;
}

int AckUserOvertimeState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUserOvertimeState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUserOvertimeState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUserOvertimeState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUserOvertimeState::MergeFrom(const AckUserOvertimeState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUserOvertimeState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUserOvertimeState::CopyFrom(const AckUserOvertimeState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUserOvertimeState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckUserOvertimeState::Swap(AckUserOvertimeState* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUserOvertimeState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUserOvertimeState_descriptor_;
  metadata.reflection = AckUserOvertimeState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckMessage::kMessageFieldNumber;
const int AckMessage::kChairidFieldNumber;
#endif  // !_MSC_VER

AckMessage::AckMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckMessage)
}

void AckMessage::InitAsDefaultInstance() {
}

AckMessage::AckMessage(const AckMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckMessage)
}

void AckMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckMessage::~AckMessage() {
  // @@protoc_insertion_point(destructor:proto.game.AckMessage)
  SharedDtor();
}

void AckMessage::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void AckMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckMessage_descriptor_;
}

const AckMessage& AckMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckMessage* AckMessage::default_instance_ = NULL;

AckMessage* AckMessage::New() const {
  return new AckMessage;
}

void AckMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    chairid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_chairid;
        break;
      }

      // optional int32 chairid = 2;
      case 2: {
        if (tag == 16) {
         parse_chairid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckMessage)
  return false;
#undef DO_
}

void AckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckMessage)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional int32 chairid = 2;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chairid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckMessage)
}

::google::protobuf::uint8* AckMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckMessage)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional int32 chairid = 2;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chairid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckMessage)
  return target;
}

int AckMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int32 chairid = 2;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckMessage::MergeFrom(const AckMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckMessage::CopyFrom(const AckMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMessage::IsInitialized() const {

  return true;
}

void AckMessage::Swap(AckMessage* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(chairid_, other->chairid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckMessage_descriptor_;
  metadata.reflection = AckMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateWaite::kStateFieldNumber;
#endif  // !_MSC_VER

OperateWaite::OperateWaite()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.OperateWaite)
}

void OperateWaite::InitAsDefaultInstance() {
}

OperateWaite::OperateWaite(const OperateWaite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.OperateWaite)
}

void OperateWaite::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateWaite::~OperateWaite() {
  // @@protoc_insertion_point(destructor:proto.game.OperateWaite)
  SharedDtor();
}

void OperateWaite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperateWaite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperateWaite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateWaite_descriptor_;
}

const OperateWaite& OperateWaite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

OperateWaite* OperateWaite::default_instance_ = NULL;

OperateWaite* OperateWaite::New() const {
  return new OperateWaite;
}

void OperateWaite::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateWaite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.OperateWaite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.OperateWaite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.OperateWaite)
  return false;
#undef DO_
}

void OperateWaite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.OperateWaite)
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.OperateWaite)
}

::google::protobuf::uint8* OperateWaite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.OperateWaite)
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.OperateWaite)
  return target;
}

int OperateWaite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateWaite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateWaite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperateWaite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateWaite::MergeFrom(const OperateWaite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateWaite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateWaite::CopyFrom(const OperateWaite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateWaite::IsInitialized() const {

  return true;
}

void OperateWaite::Swap(OperateWaite* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperateWaite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperateWaite_descriptor_;
  metadata.reflection = OperateWaite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReordInfo::kBankerNumFieldNumber;
const int ReordInfo::kHuNumFieldNumber;
const int ReordInfo::kPiaolaiziNumFieldNumber;
const int ReordInfo::kOuttimeNumFieldNumber;
const int ReordInfo::kTotalscoreFieldNumber;
const int ReordInfo::kWinCountsFieldNumber;
const int ReordInfo::kGangTimesFieldNumber;
const int ReordInfo::kDianGangTimesFieldNumber;
const int ReordInfo::kEx1FieldNumber;
const int ReordInfo::kEx2FieldNumber;
const int ReordInfo::kDissStateFieldNumber;
const int ReordInfo::kMoBaoTimesFieldNumber;
const int ReordInfo::kEx4FieldNumber;
const int ReordInfo::kEx5FieldNumber;
#endif  // !_MSC_VER

ReordInfo::ReordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.ReordInfo)
}

void ReordInfo::InitAsDefaultInstance() {
}

ReordInfo::ReordInfo(const ReordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.ReordInfo)
}

void ReordInfo::SharedCtor() {
  _cached_size_ = 0;
  banker_num_ = 0;
  hu_num_ = 0;
  piaolaizi_num_ = 0;
  outtime_num_ = 0;
  totalscore_ = 0;
  wincounts_ = 0;
  gangtimes_ = 0;
  diangangtimes_ = 0;
  ex1_ = 0;
  ex2_ = 0;
  dissstate_ = 0;
  mobaotimes_ = 0;
  ex4_ = 0;
  ex5_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReordInfo::~ReordInfo() {
  // @@protoc_insertion_point(destructor:proto.game.ReordInfo)
  SharedDtor();
}

void ReordInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReordInfo_descriptor_;
}

const ReordInfo& ReordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReordInfo* ReordInfo::default_instance_ = NULL;

ReordInfo* ReordInfo::New() const {
  return new ReordInfo;
}

void ReordInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReordInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(banker_num_, diangangtimes_);
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(ex1_, ex5_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.ReordInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 banker_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_num_)));
          set_has_banker_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hu_num;
        break;
      }

      // optional int32 hu_num = 2;
      case 2: {
        if (tag == 16) {
         parse_hu_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hu_num_)));
          set_has_hu_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_piaolaizi_num;
        break;
      }

      // optional int32 piaolaizi_num = 3;
      case 3: {
        if (tag == 24) {
         parse_piaolaizi_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaolaizi_num_)));
          set_has_piaolaizi_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_outtime_num;
        break;
      }

      // optional int32 outtime_num = 4;
      case 4: {
        if (tag == 32) {
         parse_outtime_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outtime_num_)));
          set_has_outtime_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_totalscore;
        break;
      }

      // optional int32 totalscore = 5;
      case 5: {
        if (tag == 40) {
         parse_totalscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_WinCounts;
        break;
      }

      // optional int32 WinCounts = 6;
      case 6: {
        if (tag == 48) {
         parse_WinCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wincounts_)));
          set_has_wincounts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_GangTimes;
        break;
      }

      // optional int32 GangTimes = 7;
      case 7: {
        if (tag == 56) {
         parse_GangTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gangtimes_)));
          set_has_gangtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_DianGangTimes;
        break;
      }

      // optional int32 DianGangTimes = 8;
      case 8: {
        if (tag == 64) {
         parse_DianGangTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diangangtimes_)));
          set_has_diangangtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_Ex1;
        break;
      }

      // optional int32 Ex1 = 9;
      case 9: {
        if (tag == 72) {
         parse_Ex1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ex1_)));
          set_has_ex1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Ex2;
        break;
      }

      // optional int32 Ex2 = 10;
      case 10: {
        if (tag == 80) {
         parse_Ex2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ex2_)));
          set_has_ex2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_dissState;
        break;
      }

      // optional int32 dissState = 11;
      case 11: {
        if (tag == 88) {
         parse_dissState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dissstate_)));
          set_has_dissstate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_MoBaoTimes;
        break;
      }

      // optional int32 MoBaoTimes = 12;
      case 12: {
        if (tag == 96) {
         parse_MoBaoTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mobaotimes_)));
          set_has_mobaotimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_Ex4;
        break;
      }

      // optional int32 Ex4 = 13;
      case 13: {
        if (tag == 104) {
         parse_Ex4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ex4_)));
          set_has_ex4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_Ex5;
        break;
      }

      // optional int32 Ex5 = 14;
      case 14: {
        if (tag == 112) {
         parse_Ex5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ex5_)));
          set_has_ex5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.ReordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.ReordInfo)
  return false;
#undef DO_
}

void ReordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.ReordInfo)
  // optional int32 banker_num = 1;
  if (has_banker_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->banker_num(), output);
  }

  // optional int32 hu_num = 2;
  if (has_hu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hu_num(), output);
  }

  // optional int32 piaolaizi_num = 3;
  if (has_piaolaizi_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->piaolaizi_num(), output);
  }

  // optional int32 outtime_num = 4;
  if (has_outtime_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outtime_num(), output);
  }

  // optional int32 totalscore = 5;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalscore(), output);
  }

  // optional int32 WinCounts = 6;
  if (has_wincounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wincounts(), output);
  }

  // optional int32 GangTimes = 7;
  if (has_gangtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gangtimes(), output);
  }

  // optional int32 DianGangTimes = 8;
  if (has_diangangtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->diangangtimes(), output);
  }

  // optional int32 Ex1 = 9;
  if (has_ex1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ex1(), output);
  }

  // optional int32 Ex2 = 10;
  if (has_ex2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ex2(), output);
  }

  // optional int32 dissState = 11;
  if (has_dissstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->dissstate(), output);
  }

  // optional int32 MoBaoTimes = 12;
  if (has_mobaotimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->mobaotimes(), output);
  }

  // optional int32 Ex4 = 13;
  if (has_ex4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->ex4(), output);
  }

  // optional int32 Ex5 = 14;
  if (has_ex5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->ex5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.ReordInfo)
}

::google::protobuf::uint8* ReordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.ReordInfo)
  // optional int32 banker_num = 1;
  if (has_banker_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->banker_num(), target);
  }

  // optional int32 hu_num = 2;
  if (has_hu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hu_num(), target);
  }

  // optional int32 piaolaizi_num = 3;
  if (has_piaolaizi_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->piaolaizi_num(), target);
  }

  // optional int32 outtime_num = 4;
  if (has_outtime_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outtime_num(), target);
  }

  // optional int32 totalscore = 5;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalscore(), target);
  }

  // optional int32 WinCounts = 6;
  if (has_wincounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wincounts(), target);
  }

  // optional int32 GangTimes = 7;
  if (has_gangtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gangtimes(), target);
  }

  // optional int32 DianGangTimes = 8;
  if (has_diangangtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->diangangtimes(), target);
  }

  // optional int32 Ex1 = 9;
  if (has_ex1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ex1(), target);
  }

  // optional int32 Ex2 = 10;
  if (has_ex2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ex2(), target);
  }

  // optional int32 dissState = 11;
  if (has_dissstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->dissstate(), target);
  }

  // optional int32 MoBaoTimes = 12;
  if (has_mobaotimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->mobaotimes(), target);
  }

  // optional int32 Ex4 = 13;
  if (has_ex4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->ex4(), target);
  }

  // optional int32 Ex5 = 14;
  if (has_ex5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->ex5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.ReordInfo)
  return target;
}

int ReordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 banker_num = 1;
    if (has_banker_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_num());
    }

    // optional int32 hu_num = 2;
    if (has_hu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hu_num());
    }

    // optional int32 piaolaizi_num = 3;
    if (has_piaolaizi_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaolaizi_num());
    }

    // optional int32 outtime_num = 4;
    if (has_outtime_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outtime_num());
    }

    // optional int32 totalscore = 5;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalscore());
    }

    // optional int32 WinCounts = 6;
    if (has_wincounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wincounts());
    }

    // optional int32 GangTimes = 7;
    if (has_gangtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gangtimes());
    }

    // optional int32 DianGangTimes = 8;
    if (has_diangangtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diangangtimes());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 Ex1 = 9;
    if (has_ex1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ex1());
    }

    // optional int32 Ex2 = 10;
    if (has_ex2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ex2());
    }

    // optional int32 dissState = 11;
    if (has_dissstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dissstate());
    }

    // optional int32 MoBaoTimes = 12;
    if (has_mobaotimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mobaotimes());
    }

    // optional int32 Ex4 = 13;
    if (has_ex4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ex4());
    }

    // optional int32 Ex5 = 14;
    if (has_ex5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ex5());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReordInfo::MergeFrom(const ReordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_banker_num()) {
      set_banker_num(from.banker_num());
    }
    if (from.has_hu_num()) {
      set_hu_num(from.hu_num());
    }
    if (from.has_piaolaizi_num()) {
      set_piaolaizi_num(from.piaolaizi_num());
    }
    if (from.has_outtime_num()) {
      set_outtime_num(from.outtime_num());
    }
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
    if (from.has_wincounts()) {
      set_wincounts(from.wincounts());
    }
    if (from.has_gangtimes()) {
      set_gangtimes(from.gangtimes());
    }
    if (from.has_diangangtimes()) {
      set_diangangtimes(from.diangangtimes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ex1()) {
      set_ex1(from.ex1());
    }
    if (from.has_ex2()) {
      set_ex2(from.ex2());
    }
    if (from.has_dissstate()) {
      set_dissstate(from.dissstate());
    }
    if (from.has_mobaotimes()) {
      set_mobaotimes(from.mobaotimes());
    }
    if (from.has_ex4()) {
      set_ex4(from.ex4());
    }
    if (from.has_ex5()) {
      set_ex5(from.ex5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReordInfo::CopyFrom(const ReordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReordInfo::IsInitialized() const {

  return true;
}

void ReordInfo::Swap(ReordInfo* other) {
  if (other != this) {
    std::swap(banker_num_, other->banker_num_);
    std::swap(hu_num_, other->hu_num_);
    std::swap(piaolaizi_num_, other->piaolaizi_num_);
    std::swap(outtime_num_, other->outtime_num_);
    std::swap(totalscore_, other->totalscore_);
    std::swap(wincounts_, other->wincounts_);
    std::swap(gangtimes_, other->gangtimes_);
    std::swap(diangangtimes_, other->diangangtimes_);
    std::swap(ex1_, other->ex1_);
    std::swap(ex2_, other->ex2_);
    std::swap(dissstate_, other->dissstate_);
    std::swap(mobaotimes_, other->mobaotimes_);
    std::swap(ex4_, other->ex4_);
    std::swap(ex5_, other->ex5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReordInfo_descriptor_;
  metadata.reflection = ReordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameEndRecord::kUserRecoreInfoFieldNumber;
const int GameEndRecord::kMostDianPaoUserFieldNumber;
const int GameEndRecord::kMostWinScoreUserFieldNumber;
const int GameEndRecord::kDataTimeFieldNumber;
const int GameEndRecord::kAutodissFieldNumber;
const int GameEndRecord::kStartTimeFieldNumber;
#endif  // !_MSC_VER

GameEndRecord::GameEndRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.GameEndRecord)
}

void GameEndRecord::InitAsDefaultInstance() {
}

GameEndRecord::GameEndRecord(const GameEndRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.GameEndRecord)
}

void GameEndRecord::SharedCtor() {
  _cached_size_ = 0;
  datatime_ = 0;
  autodiss_ = 0;
  starttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEndRecord::~GameEndRecord() {
  // @@protoc_insertion_point(destructor:proto.game.GameEndRecord)
  SharedDtor();
}

void GameEndRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameEndRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEndRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEndRecord_descriptor_;
}

const GameEndRecord& GameEndRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

GameEndRecord* GameEndRecord::default_instance_ = NULL;

GameEndRecord* GameEndRecord::New() const {
  return new GameEndRecord;
}

void GameEndRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameEndRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(datatime_, starttime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  userrecoreinfo_.Clear();
  mostdianpaouser_.Clear();
  mostwinscoreuser_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEndRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.GameEndRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.ReordInfo UserRecoreInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_UserRecoreInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userrecoreinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UserRecoreInfo;
        if (input->ExpectTag(16)) goto parse_MostDianPaoUser;
        break;
      }

      // repeated int32 MostDianPaoUser = 2;
      case 2: {
        if (tag == 16) {
         parse_MostDianPaoUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_mostdianpaouser())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mostdianpaouser())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MostDianPaoUser;
        if (input->ExpectTag(24)) goto parse_MostWinScoreUser;
        break;
      }

      // repeated int32 MostWinScoreUser = 3;
      case 3: {
        if (tag == 24) {
         parse_MostWinScoreUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mostwinscoreuser())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mostwinscoreuser())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MostWinScoreUser;
        if (input->ExpectTag(32)) goto parse_DataTime;
        break;
      }

      // optional int32 DataTime = 4;
      case 4: {
        if (tag == 32) {
         parse_DataTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datatime_)));
          set_has_datatime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_autodiss;
        break;
      }

      // optional int32 autodiss = 5;
      case 5: {
        if (tag == 40) {
         parse_autodiss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autodiss_)));
          set_has_autodiss();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_StartTime;
        break;
      }

      // optional int32 StartTime = 6;
      case 6: {
        if (tag == 48) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.GameEndRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.GameEndRecord)
  return false;
#undef DO_
}

void GameEndRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.GameEndRecord)
  // repeated .proto.game.ReordInfo UserRecoreInfo = 1;
  for (int i = 0; i < this->userrecoreinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userrecoreinfo(i), output);
  }

  // repeated int32 MostDianPaoUser = 2;
  for (int i = 0; i < this->mostdianpaouser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->mostdianpaouser(i), output);
  }

  // repeated int32 MostWinScoreUser = 3;
  for (int i = 0; i < this->mostwinscoreuser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mostwinscoreuser(i), output);
  }

  // optional int32 DataTime = 4;
  if (has_datatime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->datatime(), output);
  }

  // optional int32 autodiss = 5;
  if (has_autodiss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->autodiss(), output);
  }

  // optional int32 StartTime = 6;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->starttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.GameEndRecord)
}

::google::protobuf::uint8* GameEndRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.GameEndRecord)
  // repeated .proto.game.ReordInfo UserRecoreInfo = 1;
  for (int i = 0; i < this->userrecoreinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userrecoreinfo(i), target);
  }

  // repeated int32 MostDianPaoUser = 2;
  for (int i = 0; i < this->mostdianpaouser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->mostdianpaouser(i), target);
  }

  // repeated int32 MostWinScoreUser = 3;
  for (int i = 0; i < this->mostwinscoreuser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mostwinscoreuser(i), target);
  }

  // optional int32 DataTime = 4;
  if (has_datatime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->datatime(), target);
  }

  // optional int32 autodiss = 5;
  if (has_autodiss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->autodiss(), target);
  }

  // optional int32 StartTime = 6;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->starttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.GameEndRecord)
  return target;
}

int GameEndRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional int32 DataTime = 4;
    if (has_datatime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datatime());
    }

    // optional int32 autodiss = 5;
    if (has_autodiss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autodiss());
    }

    // optional int32 StartTime = 6;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }

  }
  // repeated .proto.game.ReordInfo UserRecoreInfo = 1;
  total_size += 1 * this->userrecoreinfo_size();
  for (int i = 0; i < this->userrecoreinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userrecoreinfo(i));
  }

  // repeated int32 MostDianPaoUser = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mostdianpaouser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mostdianpaouser(i));
    }
    total_size += 1 * this->mostdianpaouser_size() + data_size;
  }

  // repeated int32 MostWinScoreUser = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mostwinscoreuser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mostwinscoreuser(i));
    }
    total_size += 1 * this->mostwinscoreuser_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEndRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEndRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEndRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEndRecord::MergeFrom(const GameEndRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  userrecoreinfo_.MergeFrom(from.userrecoreinfo_);
  mostdianpaouser_.MergeFrom(from.mostdianpaouser_);
  mostwinscoreuser_.MergeFrom(from.mostwinscoreuser_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_datatime()) {
      set_datatime(from.datatime());
    }
    if (from.has_autodiss()) {
      set_autodiss(from.autodiss());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEndRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEndRecord::CopyFrom(const GameEndRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEndRecord::IsInitialized() const {

  return true;
}

void GameEndRecord::Swap(GameEndRecord* other) {
  if (other != this) {
    userrecoreinfo_.Swap(&other->userrecoreinfo_);
    mostdianpaouser_.Swap(&other->mostdianpaouser_);
    mostwinscoreuser_.Swap(&other->mostwinscoreuser_);
    std::swap(datatime_, other->datatime_);
    std::swap(autodiss_, other->autodiss_);
    std::swap(starttime_, other->starttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEndRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEndRecord_descriptor_;
  metadata.reflection = GameEndRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoundScore::kScoreFieldNumber;
#endif  // !_MSC_VER

RoundScore::RoundScore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.RoundScore)
}

void RoundScore::InitAsDefaultInstance() {
}

RoundScore::RoundScore(const RoundScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.RoundScore)
}

void RoundScore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoundScore::~RoundScore() {
  // @@protoc_insertion_point(destructor:proto.game.RoundScore)
  SharedDtor();
}

void RoundScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoundScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoundScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoundScore_descriptor_;
}

const RoundScore& RoundScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

RoundScore* RoundScore::default_instance_ = NULL;

RoundScore* RoundScore::New() const {
  return new RoundScore;
}

void RoundScore::Clear() {
  score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoundScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.RoundScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 Score = 1;
      case 1: {
        if (tag == 8) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_score())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_Score;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.RoundScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.RoundScore)
  return false;
#undef DO_
}

void RoundScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.RoundScore)
  // repeated int32 Score = 1;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.RoundScore)
}

::google::protobuf::uint8* RoundScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.RoundScore)
  // repeated int32 Score = 1;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.RoundScore)
  return target;
}

int RoundScore::ByteSize() const {
  int total_size = 0;

  // repeated int32 Score = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoundScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoundScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoundScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoundScore::MergeFrom(const RoundScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoundScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoundScore::CopyFrom(const RoundScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundScore::IsInitialized() const {

  return true;
}

void RoundScore::Swap(RoundScore* other) {
  if (other != this) {
    score_.Swap(&other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoundScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoundScore_descriptor_;
  metadata.reflection = RoundScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TotalRoundScore::kRoundFieldNumber;
const int TotalRoundScore::kRoundcountFieldNumber;
#endif  // !_MSC_VER

TotalRoundScore::TotalRoundScore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.TotalRoundScore)
}

void TotalRoundScore::InitAsDefaultInstance() {
}

TotalRoundScore::TotalRoundScore(const TotalRoundScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.TotalRoundScore)
}

void TotalRoundScore::SharedCtor() {
  _cached_size_ = 0;
  roundcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TotalRoundScore::~TotalRoundScore() {
  // @@protoc_insertion_point(destructor:proto.game.TotalRoundScore)
  SharedDtor();
}

void TotalRoundScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TotalRoundScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TotalRoundScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TotalRoundScore_descriptor_;
}

const TotalRoundScore& TotalRoundScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

TotalRoundScore* TotalRoundScore::default_instance_ = NULL;

TotalRoundScore* TotalRoundScore::New() const {
  return new TotalRoundScore;
}

void TotalRoundScore::Clear() {
  roundcount_ = 0;
  round_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TotalRoundScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.TotalRoundScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.game.RoundScore round = 1;
      case 1: {
        if (tag == 10) {
         parse_round:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_round()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_round;
        if (input->ExpectTag(16)) goto parse_roundcount;
        break;
      }

      // optional int32 roundcount = 2;
      case 2: {
        if (tag == 16) {
         parse_roundcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roundcount_)));
          set_has_roundcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.TotalRoundScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.TotalRoundScore)
  return false;
#undef DO_
}

void TotalRoundScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.TotalRoundScore)
  // repeated .proto.game.RoundScore round = 1;
  for (int i = 0; i < this->round_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->round(i), output);
  }

  // optional int32 roundcount = 2;
  if (has_roundcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roundcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.TotalRoundScore)
}

::google::protobuf::uint8* TotalRoundScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.TotalRoundScore)
  // repeated .proto.game.RoundScore round = 1;
  for (int i = 0; i < this->round_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->round(i), target);
  }

  // optional int32 roundcount = 2;
  if (has_roundcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roundcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.TotalRoundScore)
  return target;
}

int TotalRoundScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 roundcount = 2;
    if (has_roundcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roundcount());
    }

  }
  // repeated .proto.game.RoundScore round = 1;
  total_size += 1 * this->round_size();
  for (int i = 0; i < this->round_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->round(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TotalRoundScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TotalRoundScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TotalRoundScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TotalRoundScore::MergeFrom(const TotalRoundScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  round_.MergeFrom(from.round_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_roundcount()) {
      set_roundcount(from.roundcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TotalRoundScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TotalRoundScore::CopyFrom(const TotalRoundScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TotalRoundScore::IsInitialized() const {

  return true;
}

void TotalRoundScore::Swap(TotalRoundScore* other) {
  if (other != this) {
    round_.Swap(&other->round_);
    std::swap(roundcount_, other->roundcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TotalRoundScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TotalRoundScore_descriptor_;
  metadata.reflection = TotalRoundScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChangeMode::kNumFieldNumber;
#endif  // !_MSC_VER

ReqChangeMode::ReqChangeMode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.ReqChangeMode)
}

void ReqChangeMode::InitAsDefaultInstance() {
}

ReqChangeMode::ReqChangeMode(const ReqChangeMode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.ReqChangeMode)
}

void ReqChangeMode::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChangeMode::~ReqChangeMode() {
  // @@protoc_insertion_point(destructor:proto.game.ReqChangeMode)
  SharedDtor();
}

void ReqChangeMode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqChangeMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChangeMode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChangeMode_descriptor_;
}

const ReqChangeMode& ReqChangeMode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

ReqChangeMode* ReqChangeMode::default_instance_ = NULL;

ReqChangeMode* ReqChangeMode::New() const {
  return new ReqChangeMode;
}

void ReqChangeMode::Clear() {
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChangeMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.ReqChangeMode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.ReqChangeMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.ReqChangeMode)
  return false;
#undef DO_
}

void ReqChangeMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.ReqChangeMode)
  // required int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.ReqChangeMode)
}

::google::protobuf::uint8* ReqChangeMode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.ReqChangeMode)
  // required int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.ReqChangeMode)
  return target;
}

int ReqChangeMode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChangeMode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChangeMode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChangeMode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChangeMode::MergeFrom(const ReqChangeMode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChangeMode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChangeMode::CopyFrom(const ReqChangeMode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChangeMode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqChangeMode::Swap(ReqChangeMode* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChangeMode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChangeMode_descriptor_;
  metadata.reflection = ReqChangeMode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckChangeMode::kChairidFieldNumber;
const int AckChangeMode::kNumFieldNumber;
#endif  // !_MSC_VER

AckChangeMode::AckChangeMode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.AckChangeMode)
}

void AckChangeMode::InitAsDefaultInstance() {
}

AckChangeMode::AckChangeMode(const AckChangeMode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.AckChangeMode)
}

void AckChangeMode::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckChangeMode::~AckChangeMode() {
  // @@protoc_insertion_point(destructor:proto.game.AckChangeMode)
  SharedDtor();
}

void AckChangeMode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckChangeMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckChangeMode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckChangeMode_descriptor_;
}

const AckChangeMode& AckChangeMode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

AckChangeMode* AckChangeMode::default_instance_ = NULL;

AckChangeMode* AckChangeMode::New() const {
  return new AckChangeMode;
}

void AckChangeMode::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckChangeMode*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chairid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckChangeMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.AckChangeMode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chairid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.AckChangeMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.AckChangeMode)
  return false;
#undef DO_
}

void AckChangeMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.AckChangeMode)
  // optional int32 chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.AckChangeMode)
}

::google::protobuf::uint8* AckChangeMode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.AckChangeMode)
  // optional int32 chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.AckChangeMode)
  return target;
}

int AckChangeMode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckChangeMode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckChangeMode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckChangeMode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckChangeMode::MergeFrom(const AckChangeMode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckChangeMode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckChangeMode::CopyFrom(const AckChangeMode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckChangeMode::IsInitialized() const {

  return true;
}

void AckChangeMode::Swap(AckChangeMode* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckChangeMode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckChangeMode_descriptor_;
  metadata.reflection = AckChangeMode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RealTimeSpeech::kCodeFieldNumber;
#endif  // !_MSC_VER

RealTimeSpeech::RealTimeSpeech()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.RealTimeSpeech)
}

void RealTimeSpeech::InitAsDefaultInstance() {
}

RealTimeSpeech::RealTimeSpeech(const RealTimeSpeech& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.RealTimeSpeech)
}

void RealTimeSpeech::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RealTimeSpeech::~RealTimeSpeech() {
  // @@protoc_insertion_point(destructor:proto.game.RealTimeSpeech)
  SharedDtor();
}

void RealTimeSpeech::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RealTimeSpeech::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealTimeSpeech::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RealTimeSpeech_descriptor_;
}

const RealTimeSpeech& RealTimeSpeech::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

RealTimeSpeech* RealTimeSpeech::default_instance_ = NULL;

RealTimeSpeech* RealTimeSpeech::New() const {
  return new RealTimeSpeech;
}

void RealTimeSpeech::Clear() {
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RealTimeSpeech::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.RealTimeSpeech)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.RealTimeSpeech)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.RealTimeSpeech)
  return false;
#undef DO_
}

void RealTimeSpeech::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.RealTimeSpeech)
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.RealTimeSpeech)
}

::google::protobuf::uint8* RealTimeSpeech::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.RealTimeSpeech)
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.RealTimeSpeech)
  return target;
}

int RealTimeSpeech::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealTimeSpeech::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RealTimeSpeech* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RealTimeSpeech*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RealTimeSpeech::MergeFrom(const RealTimeSpeech& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RealTimeSpeech::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealTimeSpeech::CopyFrom(const RealTimeSpeech& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealTimeSpeech::IsInitialized() const {

  return true;
}

void RealTimeSpeech::Swap(RealTimeSpeech* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RealTimeSpeech::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RealTimeSpeech_descriptor_;
  metadata.reflection = RealTimeSpeech_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RealTimeSpeechAck::kCodeFieldNumber;
#endif  // !_MSC_VER

RealTimeSpeechAck::RealTimeSpeechAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.RealTimeSpeechAck)
}

void RealTimeSpeechAck::InitAsDefaultInstance() {
}

RealTimeSpeechAck::RealTimeSpeechAck(const RealTimeSpeechAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.RealTimeSpeechAck)
}

void RealTimeSpeechAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RealTimeSpeechAck::~RealTimeSpeechAck() {
  // @@protoc_insertion_point(destructor:proto.game.RealTimeSpeechAck)
  SharedDtor();
}

void RealTimeSpeechAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RealTimeSpeechAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealTimeSpeechAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RealTimeSpeechAck_descriptor_;
}

const RealTimeSpeechAck& RealTimeSpeechAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gameproto_2eproto();
  return *default_instance_;
}

RealTimeSpeechAck* RealTimeSpeechAck::default_instance_ = NULL;

RealTimeSpeechAck* RealTimeSpeechAck::New() const {
  return new RealTimeSpeechAck;
}

void RealTimeSpeechAck::Clear() {
  code_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RealTimeSpeechAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.RealTimeSpeechAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 code = 1;
      case 1: {
        if (tag == 8) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_code())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_code())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_code;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.RealTimeSpeechAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.RealTimeSpeechAck)
  return false;
#undef DO_
}

void RealTimeSpeechAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.RealTimeSpeechAck)
  // repeated int32 code = 1;
  for (int i = 0; i < this->code_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->code(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.RealTimeSpeechAck)
}

::google::protobuf::uint8* RealTimeSpeechAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.RealTimeSpeechAck)
  // repeated int32 code = 1;
  for (int i = 0; i < this->code_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->code(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.RealTimeSpeechAck)
  return target;
}

int RealTimeSpeechAck::ByteSize() const {
  int total_size = 0;

  // repeated int32 code = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->code_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->code(i));
    }
    total_size += 1 * this->code_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealTimeSpeechAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RealTimeSpeechAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RealTimeSpeechAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RealTimeSpeechAck::MergeFrom(const RealTimeSpeechAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  code_.MergeFrom(from.code_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RealTimeSpeechAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealTimeSpeechAck::CopyFrom(const RealTimeSpeechAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealTimeSpeechAck::IsInitialized() const {

  return true;
}

void RealTimeSpeechAck::Swap(RealTimeSpeechAck* other) {
  if (other != this) {
    code_.Swap(&other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RealTimeSpeechAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RealTimeSpeechAck_descriptor_;
  metadata.reflection = RealTimeSpeechAck_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
