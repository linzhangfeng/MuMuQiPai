// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameproto.proto

#ifndef PROTOBUF_gameproto_2eproto__INCLUDED
#define PROTOBUF_gameproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gameproto_2eproto();
void protobuf_AssignDesc_gameproto_2eproto();
void protobuf_ShutdownFile_gameproto_2eproto();

class SpecialGangCard;
class SpecialGang;
class FixedCard;
class FixedCardChange;
class Cards;
class CardArr;
class HandCards;
class tagPlayers;
class ReqAction;
class ReqOutCard;
class ReqOperateResult;
class ReqIsAuto;
class ReqUpdateUserInfo;
class ReqRoomInfo;
class ReqChooseDisband;
class tagHu;
class tagUserHuInfo;
class tagGangInfo;
class tagGroupCard;
class tagReadyInfo;
class ExMsg;
class AckGameScene;
class TestSvrConf;
class AckUserReady;
class AckGameStart;
class AckFirstHandCard;
class VideoFirstHandCard;
class tagHuInfo;
class tagListenInfo;
class tagPreGangs;
class AckUserGetCard;
class tagShowOutCard;
class AckUserOutCard;
class AckUserOutCardErr;
class DaAnTing;
class AckOpNotify;
class AckBcOpResult;
class AckListenNotify;
class AckUserHu;
class tagEndGang;
class tagEndGangInfo;
class AddFanInfo;
class FanInfo;
class AckGameEnd;
class AckIsAuto;
class AckUpdateUserInfo;
class AckGameStartFail;
class AckUpdateTimer;
class AckDisbandChooseFaild;
class AckDisbandApply;
class AckDisbandChooseBc;
class AckDisbandResult;
class AckUserOnlineState;
class AckUserOvertimeState;
class AckMessage;
class OperateWaite;
class ReordInfo;
class GameEndRecord;
class RoundScore;
class TotalRoundScore;
class ReqChangeMode;
class AckChangeMode;
class RealTimeSpeech;
class RealTimeSpeechAck;

enum ACTION {
  ACTION_SIDOWN = 1,
  ACTION_READY = 2,
  ACTION_LEAVE = 3,
  ACTION_CHANGE_TABLE = 4
};
bool ACTION_IsValid(int value);
const ACTION ACTION_MIN = ACTION_SIDOWN;
const ACTION ACTION_MAX = ACTION_CHANGE_TABLE;
const int ACTION_ARRAYSIZE = ACTION_MAX + 1;

const ::google::protobuf::EnumDescriptor* ACTION_descriptor();
inline const ::std::string& ACTION_Name(ACTION value) {
  return ::google::protobuf::internal::NameOfEnum(
    ACTION_descriptor(), value);
}
inline bool ACTION_Parse(
    const ::std::string& name, ACTION* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ACTION>(
    ACTION_descriptor(), name, value);
}
enum STATUS {
  GAME_FREE = 0,
  GAME_CHANGECARD = 1,
  GAME_CHOOSE_LACKTYPE = 2,
  GAME_PLAYING = 3,
  GAME_PIAO = 4
};
bool STATUS_IsValid(int value);
const STATUS STATUS_MIN = GAME_FREE;
const STATUS STATUS_MAX = GAME_PIAO;
const int STATUS_ARRAYSIZE = STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* STATUS_descriptor();
inline const ::std::string& STATUS_Name(STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    STATUS_descriptor(), value);
}
inline bool STATUS_Parse(
    const ::std::string& name, STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<STATUS>(
    STATUS_descriptor(), name, value);
}
enum DISSBAND_ACTION {
  DISBAND_WAIT = 0,
  DISBAND_YES = 1,
  DISBAND_NO = 2,
  DISBAND_APPLYER = 3
};
bool DISSBAND_ACTION_IsValid(int value);
const DISSBAND_ACTION DISSBAND_ACTION_MIN = DISBAND_WAIT;
const DISSBAND_ACTION DISSBAND_ACTION_MAX = DISBAND_APPLYER;
const int DISSBAND_ACTION_ARRAYSIZE = DISSBAND_ACTION_MAX + 1;

const ::google::protobuf::EnumDescriptor* DISSBAND_ACTION_descriptor();
inline const ::std::string& DISSBAND_ACTION_Name(DISSBAND_ACTION value) {
  return ::google::protobuf::internal::NameOfEnum(
    DISSBAND_ACTION_descriptor(), value);
}
inline bool DISSBAND_ACTION_Parse(
    const ::std::string& name, DISSBAND_ACTION* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DISSBAND_ACTION>(
    DISSBAND_ACTION_descriptor(), name, value);
}
enum OverTimeState {
  OVER_TIME_NO = 0,
  OVER_TIME_OUTCARD = 1,
  OVER_TIME_OPERATE = 2
};
bool OverTimeState_IsValid(int value);
const OverTimeState OverTimeState_MIN = OVER_TIME_NO;
const OverTimeState OverTimeState_MAX = OVER_TIME_OPERATE;
const int OverTimeState_ARRAYSIZE = OverTimeState_MAX + 1;

const ::google::protobuf::EnumDescriptor* OverTimeState_descriptor();
inline const ::std::string& OverTimeState_Name(OverTimeState value) {
  return ::google::protobuf::internal::NameOfEnum(
    OverTimeState_descriptor(), value);
}
inline bool OverTimeState_Parse(
    const ::std::string& name, OverTimeState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OverTimeState>(
    OverTimeState_descriptor(), name, value);
}
// ===================================================================

class SpecialGangCard : public ::google::protobuf::Message {
 public:
  SpecialGangCard();
  virtual ~SpecialGangCard();

  SpecialGangCard(const SpecialGangCard& from);

  inline SpecialGangCard& operator=(const SpecialGangCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecialGangCard& default_instance();

  void Swap(SpecialGangCard* other);

  // implements Message ----------------------------------------------

  SpecialGangCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpecialGangCard& from);
  void MergeFrom(const SpecialGangCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 card = 1;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 1;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.SpecialGangCard)
 private:
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 card_;
  ::google::protobuf::int32 num_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static SpecialGangCard* default_instance_;
};
// -------------------------------------------------------------------

class SpecialGang : public ::google::protobuf::Message {
 public:
  SpecialGang();
  virtual ~SpecialGang();

  SpecialGang(const SpecialGang& from);

  inline SpecialGang& operator=(const SpecialGang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecialGang& default_instance();

  void Swap(SpecialGang* other);

  // implements Message ----------------------------------------------

  SpecialGang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpecialGang& from);
  void MergeFrom(const SpecialGang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // repeated .proto.game.SpecialGangCard cards = 2;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 2;
  inline const ::proto::game::SpecialGangCard& cards(int index) const;
  inline ::proto::game::SpecialGangCard* mutable_cards(int index);
  inline ::proto::game::SpecialGangCard* add_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::SpecialGangCard >&
      cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::SpecialGangCard >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:proto.game.SpecialGang)
 private:
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::SpecialGangCard > cards_;
  ::google::protobuf::int32 index_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static SpecialGang* default_instance_;
};
// -------------------------------------------------------------------

class FixedCard : public ::google::protobuf::Message {
 public:
  FixedCard();
  virtual ~FixedCard();

  FixedCard(const FixedCard& from);

  inline FixedCard& operator=(const FixedCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FixedCard& default_instance();

  void Swap(FixedCard* other);

  // implements Message ----------------------------------------------

  FixedCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FixedCard& from);
  void MergeFrom(const FixedCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CardData = 1;
  inline bool has_carddata() const;
  inline void clear_carddata();
  static const int kCardDataFieldNumber = 1;
  inline ::google::protobuf::int32 carddata() const;
  inline void set_carddata(::google::protobuf::int32 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 chairID = 3;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 3;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // repeated int32 OpCards = 4;
  inline int opcards_size() const;
  inline void clear_opcards();
  static const int kOpCardsFieldNumber = 4;
  inline ::google::protobuf::int32 opcards(int index) const;
  inline void set_opcards(int index, ::google::protobuf::int32 value);
  inline void add_opcards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      opcards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_opcards();

  // optional int32 LaiziNum = 5;
  inline bool has_laizinum() const;
  inline void clear_laizinum();
  static const int kLaiziNumFieldNumber = 5;
  inline ::google::protobuf::int32 laizinum() const;
  inline void set_laizinum(::google::protobuf::int32 value);

  // optional .proto.game.SpecialGang specialgang = 6;
  inline bool has_specialgang() const;
  inline void clear_specialgang();
  static const int kSpecialgangFieldNumber = 6;
  inline const ::proto::game::SpecialGang& specialgang() const;
  inline ::proto::game::SpecialGang* mutable_specialgang();
  inline ::proto::game::SpecialGang* release_specialgang();
  inline void set_allocated_specialgang(::proto::game::SpecialGang* specialgang);

  // @@protoc_insertion_point(class_scope:proto.game.FixedCard)
 private:
  inline void set_has_carddata();
  inline void clear_has_carddata();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_laizinum();
  inline void clear_has_laizinum();
  inline void set_has_specialgang();
  inline void clear_has_specialgang();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 carddata_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > opcards_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 laizinum_;
  ::proto::game::SpecialGang* specialgang_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static FixedCard* default_instance_;
};
// -------------------------------------------------------------------

class FixedCardChange : public ::google::protobuf::Message {
 public:
  FixedCardChange();
  virtual ~FixedCardChange();

  FixedCardChange(const FixedCardChange& from);

  inline FixedCardChange& operator=(const FixedCardChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FixedCardChange& default_instance();

  void Swap(FixedCardChange* other);

  // implements Message ----------------------------------------------

  FixedCardChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FixedCardChange& from);
  void MergeFrom(const FixedCardChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 enable = 1;
  inline bool has_enable() const;
  inline void clear_enable();
  static const int kEnableFieldNumber = 1;
  inline ::google::protobuf::int32 enable() const;
  inline void set_enable(::google::protobuf::int32 value);

  // optional int32 chairid = 2;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 2;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 fixedindex = 3;
  inline bool has_fixedindex() const;
  inline void clear_fixedindex();
  static const int kFixedindexFieldNumber = 3;
  inline ::google::protobuf::int32 fixedindex() const;
  inline void set_fixedindex(::google::protobuf::int32 value);

  // optional .proto.game.FixedCard fixedcard = 4;
  inline bool has_fixedcard() const;
  inline void clear_fixedcard();
  static const int kFixedcardFieldNumber = 4;
  inline const ::proto::game::FixedCard& fixedcard() const;
  inline ::proto::game::FixedCard* mutable_fixedcard();
  inline ::proto::game::FixedCard* release_fixedcard();
  inline void set_allocated_fixedcard(::proto::game::FixedCard* fixedcard);

  // @@protoc_insertion_point(class_scope:proto.game.FixedCardChange)
 private:
  inline void set_has_enable();
  inline void clear_has_enable();
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_fixedindex();
  inline void clear_has_fixedindex();
  inline void set_has_fixedcard();
  inline void clear_has_fixedcard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 enable_;
  ::google::protobuf::int32 chairid_;
  ::proto::game::FixedCard* fixedcard_;
  ::google::protobuf::int32 fixedindex_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static FixedCardChange* default_instance_;
};
// -------------------------------------------------------------------

class Cards : public ::google::protobuf::Message {
 public:
  Cards();
  virtual ~Cards();

  Cards(const Cards& from);

  inline Cards& operator=(const Cards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cards& default_instance();

  void Swap(Cards* other);

  // implements Message ----------------------------------------------

  Cards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Cards& from);
  void MergeFrom(const Cards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 card = 1;
  inline int card_size() const;
  inline void clear_card();
  static const int kCardFieldNumber = 1;
  inline ::google::protobuf::int32 card(int index) const;
  inline void set_card(int index, ::google::protobuf::int32 value);
  inline void add_card(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card();

  // @@protoc_insertion_point(class_scope:proto.game.Cards)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static Cards* default_instance_;
};
// -------------------------------------------------------------------

class CardArr : public ::google::protobuf::Message {
 public:
  CardArr();
  virtual ~CardArr();

  CardArr(const CardArr& from);

  inline CardArr& operator=(const CardArr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CardArr& default_instance();

  void Swap(CardArr* other);

  // implements Message ----------------------------------------------

  CardArr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardArr& from);
  void MergeFrom(const CardArr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 OpType = 1;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOpTypeFieldNumber = 1;
  inline ::google::protobuf::int32 optype() const;
  inline void set_optype(::google::protobuf::int32 value);

  // repeated int32 card = 2;
  inline int card_size() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::int32 card(int index) const;
  inline void set_card(int index, ::google::protobuf::int32 value);
  inline void add_card(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card();

  // @@protoc_insertion_point(class_scope:proto.game.CardArr)
 private:
  inline void set_has_optype();
  inline void clear_has_optype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card_;
  ::google::protobuf::int32 optype_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static CardArr* default_instance_;
};
// -------------------------------------------------------------------

class HandCards : public ::google::protobuf::Message {
 public:
  HandCards();
  virtual ~HandCards();

  HandCards(const HandCards& from);

  inline HandCards& operator=(const HandCards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HandCards& default_instance();

  void Swap(HandCards* other);

  // implements Message ----------------------------------------------

  HandCards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HandCards& from);
  void MergeFrom(const HandCards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ChangeableCardsLen = 1;
  inline bool has_changeablecardslen() const;
  inline void clear_changeablecardslen();
  static const int kChangeableCardsLenFieldNumber = 1;
  inline ::google::protobuf::int32 changeablecardslen() const;
  inline void set_changeablecardslen(::google::protobuf::int32 value);

  // repeated int32 ChangeableCards = 2;
  inline int changeablecards_size() const;
  inline void clear_changeablecards();
  static const int kChangeableCardsFieldNumber = 2;
  inline ::google::protobuf::int32 changeablecards(int index) const;
  inline void set_changeablecards(int index, ::google::protobuf::int32 value);
  inline void add_changeablecards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      changeablecards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_changeablecards();

  // optional int32 FixedCardsLen = 3;
  inline bool has_fixedcardslen() const;
  inline void clear_fixedcardslen();
  static const int kFixedCardsLenFieldNumber = 3;
  inline ::google::protobuf::int32 fixedcardslen() const;
  inline void set_fixedcardslen(::google::protobuf::int32 value);

  // repeated .proto.game.FixedCard stFixedCards = 4;
  inline int stfixedcards_size() const;
  inline void clear_stfixedcards();
  static const int kStFixedCardsFieldNumber = 4;
  inline const ::proto::game::FixedCard& stfixedcards(int index) const;
  inline ::proto::game::FixedCard* mutable_stfixedcards(int index);
  inline ::proto::game::FixedCard* add_stfixedcards();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::FixedCard >&
      stfixedcards() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::FixedCard >*
      mutable_stfixedcards();

  // optional int32 stFenZhangCard = 5;
  inline bool has_stfenzhangcard() const;
  inline void clear_stfenzhangcard();
  static const int kStFenZhangCardFieldNumber = 5;
  inline ::google::protobuf::int32 stfenzhangcard() const;
  inline void set_stfenzhangcard(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.HandCards)
 private:
  inline void set_has_changeablecardslen();
  inline void clear_has_changeablecardslen();
  inline void set_has_fixedcardslen();
  inline void clear_has_fixedcardslen();
  inline void set_has_stfenzhangcard();
  inline void clear_has_stfenzhangcard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > changeablecards_;
  ::google::protobuf::int32 changeablecardslen_;
  ::google::protobuf::int32 fixedcardslen_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::FixedCard > stfixedcards_;
  ::google::protobuf::int32 stfenzhangcard_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static HandCards* default_instance_;
};
// -------------------------------------------------------------------

class tagPlayers : public ::google::protobuf::Message {
 public:
  tagPlayers();
  virtual ~tagPlayers();

  tagPlayers(const tagPlayers& from);

  inline tagPlayers& operator=(const tagPlayers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPlayers& default_instance();

  void Swap(tagPlayers* other);

  // implements Message ----------------------------------------------

  tagPlayers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagPlayers& from);
  void MergeFrom(const tagPlayers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 seatid = 2;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 2;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // optional int32 ready = 3;
  inline bool has_ready() const;
  inline void clear_ready();
  static const int kReadyFieldNumber = 3;
  inline ::google::protobuf::int32 ready() const;
  inline void set_ready(::google::protobuf::int32 value);

  // optional int32 money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional string avatar = 7;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 7;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const char* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // @@protoc_insertion_point(class_scope:proto.game.tagPlayers)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_ready();
  inline void clear_has_ready();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_avatar();
  inline void clear_has_avatar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 ready_;
  ::google::protobuf::int32 money_;
  ::std::string* name_;
  ::std::string* avatar_;
  ::google::protobuf::int32 sex_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagPlayers* default_instance_;
};
// -------------------------------------------------------------------

class ReqAction : public ::google::protobuf::Message {
 public:
  ReqAction();
  virtual ~ReqAction();

  ReqAction(const ReqAction& from);

  inline ReqAction& operator=(const ReqAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAction& default_instance();

  void Swap(ReqAction* other);

  // implements Message ----------------------------------------------

  ReqAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAction& from);
  void MergeFrom(const ReqAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 action = 1;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.ReqAction)
 private:
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 action_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqAction* default_instance_;
};
// -------------------------------------------------------------------

class ReqOutCard : public ::google::protobuf::Message {
 public:
  ReqOutCard();
  virtual ~ReqOutCard();

  ReqOutCard(const ReqOutCard& from);

  inline ReqOutCard& operator=(const ReqOutCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqOutCard& default_instance();

  void Swap(ReqOutCard* other);

  // implements Message ----------------------------------------------

  ReqOutCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqOutCard& from);
  void MergeFrom(const ReqOutCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Card = 1;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 1;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // optional int32 ShowCard = 2;
  inline bool has_showcard() const;
  inline void clear_showcard();
  static const int kShowCardFieldNumber = 2;
  inline ::google::protobuf::int32 showcard() const;
  inline void set_showcard(::google::protobuf::int32 value);

  // optional int32 anCards = 3;
  inline bool has_ancards() const;
  inline void clear_ancards();
  static const int kAnCardsFieldNumber = 3;
  inline ::google::protobuf::int32 ancards() const;
  inline void set_ancards(::google::protobuf::int32 value);

  // optional bool HongZhongLaiZiFlag = 4;
  inline bool has_hongzhonglaiziflag() const;
  inline void clear_hongzhonglaiziflag();
  static const int kHongZhongLaiZiFlagFieldNumber = 4;
  inline bool hongzhonglaiziflag() const;
  inline void set_hongzhonglaiziflag(bool value);

  // @@protoc_insertion_point(class_scope:proto.game.ReqOutCard)
 private:
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_showcard();
  inline void clear_has_showcard();
  inline void set_has_ancards();
  inline void clear_has_ancards();
  inline void set_has_hongzhonglaiziflag();
  inline void clear_has_hongzhonglaiziflag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 card_;
  ::google::protobuf::int32 showcard_;
  ::google::protobuf::int32 ancards_;
  bool hongzhonglaiziflag_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqOutCard* default_instance_;
};
// -------------------------------------------------------------------

class ReqOperateResult : public ::google::protobuf::Message {
 public:
  ReqOperateResult();
  virtual ~ReqOperateResult();

  ReqOperateResult(const ReqOperateResult& from);

  inline ReqOperateResult& operator=(const ReqOperateResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqOperateResult& default_instance();

  void Swap(ReqOperateResult* other);

  // implements Message ----------------------------------------------

  ReqOperateResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqOperateResult& from);
  void MergeFrom(const ReqOperateResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 Card = 2;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // optional int32 operateid = 3;
  inline bool has_operateid() const;
  inline void clear_operateid();
  static const int kOperateidFieldNumber = 3;
  inline ::google::protobuf::int32 operateid() const;
  inline void set_operateid(::google::protobuf::int32 value);

  // repeated int32 opcards = 4;
  inline int opcards_size() const;
  inline void clear_opcards();
  static const int kOpcardsFieldNumber = 4;
  inline ::google::protobuf::int32 opcards(int index) const;
  inline void set_opcards(int index, ::google::protobuf::int32 value);
  inline void add_opcards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      opcards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_opcards();

  // optional int32 passhu = 5;
  inline bool has_passhu() const;
  inline void clear_passhu();
  static const int kPasshuFieldNumber = 5;
  inline ::google::protobuf::int32 passhu() const;
  inline void set_passhu(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.ReqOperateResult)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_operateid();
  inline void clear_has_operateid();
  inline void set_has_passhu();
  inline void clear_has_passhu();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 card_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > opcards_;
  ::google::protobuf::int32 operateid_;
  ::google::protobuf::int32 passhu_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqOperateResult* default_instance_;
};
// -------------------------------------------------------------------

class ReqIsAuto : public ::google::protobuf::Message {
 public:
  ReqIsAuto();
  virtual ~ReqIsAuto();

  ReqIsAuto(const ReqIsAuto& from);

  inline ReqIsAuto& operator=(const ReqIsAuto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqIsAuto& default_instance();

  void Swap(ReqIsAuto* other);

  // implements Message ----------------------------------------------

  ReqIsAuto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqIsAuto& from);
  void MergeFrom(const ReqIsAuto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 isAuto = 1;
  inline bool has_isauto() const;
  inline void clear_isauto();
  static const int kIsAutoFieldNumber = 1;
  inline ::google::protobuf::int32 isauto() const;
  inline void set_isauto(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.ReqIsAuto)
 private:
  inline void set_has_isauto();
  inline void clear_has_isauto();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 isauto_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqIsAuto* default_instance_;
};
// -------------------------------------------------------------------

class ReqUpdateUserInfo : public ::google::protobuf::Message {
 public:
  ReqUpdateUserInfo();
  virtual ~ReqUpdateUserInfo();

  ReqUpdateUserInfo(const ReqUpdateUserInfo& from);

  inline ReqUpdateUserInfo& operator=(const ReqUpdateUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqUpdateUserInfo& default_instance();

  void Swap(ReqUpdateUserInfo* other);

  // implements Message ----------------------------------------------

  ReqUpdateUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqUpdateUserInfo& from);
  void MergeFrom(const ReqUpdateUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 vid = 2;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVidFieldNumber = 2;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.ReqUpdateUserInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_vid();
  inline void clear_has_vid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 vid_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqUpdateUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqRoomInfo : public ::google::protobuf::Message {
 public:
  ReqRoomInfo();
  virtual ~ReqRoomInfo();

  ReqRoomInfo(const ReqRoomInfo& from);

  inline ReqRoomInfo& operator=(const ReqRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRoomInfo& default_instance();

  void Swap(ReqRoomInfo* other);

  // implements Message ----------------------------------------------

  ReqRoomInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqRoomInfo& from);
  void MergeFrom(const ReqRoomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 vid = 2;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVidFieldNumber = 2;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);

  // optional string skey = 3;
  inline bool has_skey() const;
  inline void clear_skey();
  static const int kSkeyFieldNumber = 3;
  inline const ::std::string& skey() const;
  inline void set_skey(const ::std::string& value);
  inline void set_skey(const char* value);
  inline void set_skey(const char* value, size_t size);
  inline ::std::string* mutable_skey();
  inline ::std::string* release_skey();
  inline void set_allocated_skey(::std::string* skey);

  // @@protoc_insertion_point(class_scope:proto.game.ReqRoomInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_vid();
  inline void clear_has_vid();
  inline void set_has_skey();
  inline void clear_has_skey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 vid_;
  ::std::string* skey_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqRoomInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqChooseDisband : public ::google::protobuf::Message {
 public:
  ReqChooseDisband();
  virtual ~ReqChooseDisband();

  ReqChooseDisband(const ReqChooseDisband& from);

  inline ReqChooseDisband& operator=(const ReqChooseDisband& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqChooseDisband& default_instance();

  void Swap(ReqChooseDisband* other);

  // implements Message ----------------------------------------------

  ReqChooseDisband* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqChooseDisband& from);
  void MergeFrom(const ReqChooseDisband& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Choosestate = 1;
  inline bool has_choosestate() const;
  inline void clear_choosestate();
  static const int kChoosestateFieldNumber = 1;
  inline ::google::protobuf::int32 choosestate() const;
  inline void set_choosestate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.ReqChooseDisband)
 private:
  inline void set_has_choosestate();
  inline void clear_has_choosestate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 choosestate_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqChooseDisband* default_instance_;
};
// -------------------------------------------------------------------

class tagHu : public ::google::protobuf::Message {
 public:
  tagHu();
  virtual ~tagHu();

  tagHu(const tagHu& from);

  inline tagHu& operator=(const tagHu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagHu& default_instance();

  void Swap(tagHu* other);

  // implements Message ----------------------------------------------

  tagHu* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagHu& from);
  void MergeFrom(const tagHu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 HuCard = 1;
  inline bool has_hucard() const;
  inline void clear_hucard();
  static const int kHuCardFieldNumber = 1;
  inline ::google::protobuf::int32 hucard() const;
  inline void set_hucard(::google::protobuf::int32 value);

  // optional int32 PasHuChiarid = 2;
  inline bool has_pashuchiarid() const;
  inline void clear_pashuchiarid();
  static const int kPasHuChiaridFieldNumber = 2;
  inline ::google::protobuf::int32 pashuchiarid() const;
  inline void set_pashuchiarid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.tagHu)
 private:
  inline void set_has_hucard();
  inline void clear_has_hucard();
  inline void set_has_pashuchiarid();
  inline void clear_has_pashuchiarid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 hucard_;
  ::google::protobuf::int32 pashuchiarid_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagHu* default_instance_;
};
// -------------------------------------------------------------------

class tagUserHuInfo : public ::google::protobuf::Message {
 public:
  tagUserHuInfo();
  virtual ~tagUserHuInfo();

  tagUserHuInfo(const tagUserHuInfo& from);

  inline tagUserHuInfo& operator=(const tagUserHuInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagUserHuInfo& default_instance();

  void Swap(tagUserHuInfo* other);

  // implements Message ----------------------------------------------

  tagUserHuInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagUserHuInfo& from);
  void MergeFrom(const tagUserHuInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.tagHu hu = 1;
  inline int hu_size() const;
  inline void clear_hu();
  static const int kHuFieldNumber = 1;
  inline const ::proto::game::tagHu& hu(int index) const;
  inline ::proto::game::tagHu* mutable_hu(int index);
  inline ::proto::game::tagHu* add_hu();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHu >&
      hu() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHu >*
      mutable_hu();

  // @@protoc_insertion_point(class_scope:proto.game.tagUserHuInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagHu > hu_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagUserHuInfo* default_instance_;
};
// -------------------------------------------------------------------

class tagGangInfo : public ::google::protobuf::Message {
 public:
  tagGangInfo();
  virtual ~tagGangInfo();

  tagGangInfo(const tagGangInfo& from);

  inline tagGangInfo& operator=(const tagGangInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagGangInfo& default_instance();

  void Swap(tagGangInfo* other);

  // implements Message ----------------------------------------------

  tagGangInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagGangInfo& from);
  void MergeFrom(const tagGangInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Card = 1;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 1;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.tagGangInfo)
 private:
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 card_;
  ::google::protobuf::int32 state_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagGangInfo* default_instance_;
};
// -------------------------------------------------------------------

class tagGroupCard : public ::google::protobuf::Message {
 public:
  tagGroupCard();
  virtual ~tagGroupCard();

  tagGroupCard(const tagGroupCard& from);

  inline tagGroupCard& operator=(const tagGroupCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagGroupCard& default_instance();

  void Swap(tagGroupCard* other);

  // implements Message ----------------------------------------------

  tagGroupCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagGroupCard& from);
  void MergeFrom(const tagGroupCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.FixedCard FixedCard = 1;
  inline int fixedcard_size() const;
  inline void clear_fixedcard();
  static const int kFixedCardFieldNumber = 1;
  inline const ::proto::game::FixedCard& fixedcard(int index) const;
  inline ::proto::game::FixedCard* mutable_fixedcard(int index);
  inline ::proto::game::FixedCard* add_fixedcard();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::FixedCard >&
      fixedcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::FixedCard >*
      mutable_fixedcard();

  // @@protoc_insertion_point(class_scope:proto.game.tagGroupCard)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::FixedCard > fixedcard_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagGroupCard* default_instance_;
};
// -------------------------------------------------------------------

class tagReadyInfo : public ::google::protobuf::Message {
 public:
  tagReadyInfo();
  virtual ~tagReadyInfo();

  tagReadyInfo(const tagReadyInfo& from);

  inline tagReadyInfo& operator=(const tagReadyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagReadyInfo& default_instance();

  void Swap(tagReadyInfo* other);

  // implements Message ----------------------------------------------

  tagReadyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagReadyInfo& from);
  void MergeFrom(const tagReadyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 Ready = 1;
  inline int ready_size() const;
  inline void clear_ready();
  static const int kReadyFieldNumber = 1;
  inline ::google::protobuf::int32 ready(int index) const;
  inline void set_ready(int index, ::google::protobuf::int32 value);
  inline void add_ready(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ready() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ready();

  // repeated int32 RemainReadyTime = 2;
  inline int remainreadytime_size() const;
  inline void clear_remainreadytime();
  static const int kRemainReadyTimeFieldNumber = 2;
  inline ::google::protobuf::int32 remainreadytime(int index) const;
  inline void set_remainreadytime(int index, ::google::protobuf::int32 value);
  inline void add_remainreadytime(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      remainreadytime() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_remainreadytime();

  // optional int32 ReadyTime = 3;
  inline bool has_readytime() const;
  inline void clear_readytime();
  static const int kReadyTimeFieldNumber = 3;
  inline ::google::protobuf::int32 readytime() const;
  inline void set_readytime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.tagReadyInfo)
 private:
  inline void set_has_readytime();
  inline void clear_has_readytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ready_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > remainreadytime_;
  ::google::protobuf::int32 readytime_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagReadyInfo* default_instance_;
};
// -------------------------------------------------------------------

class ExMsg : public ::google::protobuf::Message {
 public:
  ExMsg();
  virtual ~ExMsg();

  ExMsg(const ExMsg& from);

  inline ExMsg& operator=(const ExMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExMsg& default_instance();

  void Swap(ExMsg* other);

  // implements Message ----------------------------------------------

  ExMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExMsg& from);
  void MergeFrom(const ExMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 times = 1;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 1;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // optional int32 voice_room = 2;
  inline bool has_voice_room() const;
  inline void clear_voice_room();
  static const int kVoiceRoomFieldNumber = 2;
  inline ::google::protobuf::int32 voice_room() const;
  inline void set_voice_room(::google::protobuf::int32 value);

  // optional string public_channel_id = 3;
  inline bool has_public_channel_id() const;
  inline void clear_public_channel_id();
  static const int kPublicChannelIdFieldNumber = 3;
  inline const ::std::string& public_channel_id() const;
  inline void set_public_channel_id(const ::std::string& value);
  inline void set_public_channel_id(const char* value);
  inline void set_public_channel_id(const char* value, size_t size);
  inline ::std::string* mutable_public_channel_id();
  inline ::std::string* release_public_channel_id();
  inline void set_allocated_public_channel_id(::std::string* public_channel_id);

  // repeated string group_channel_ids = 4;
  inline int group_channel_ids_size() const;
  inline void clear_group_channel_ids();
  static const int kGroupChannelIdsFieldNumber = 4;
  inline const ::std::string& group_channel_ids(int index) const;
  inline ::std::string* mutable_group_channel_ids(int index);
  inline void set_group_channel_ids(int index, const ::std::string& value);
  inline void set_group_channel_ids(int index, const char* value);
  inline void set_group_channel_ids(int index, const char* value, size_t size);
  inline ::std::string* add_group_channel_ids();
  inline void add_group_channel_ids(const ::std::string& value);
  inline void add_group_channel_ids(const char* value);
  inline void add_group_channel_ids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& group_channel_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_group_channel_ids();

  // repeated int32 m_voice_status = 5;
  inline int m_voice_status_size() const;
  inline void clear_m_voice_status();
  static const int kMVoiceStatusFieldNumber = 5;
  inline ::google::protobuf::int32 m_voice_status(int index) const;
  inline void set_m_voice_status(int index, ::google::protobuf::int32 value);
  inline void add_m_voice_status(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_voice_status() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_voice_status();

  // @@protoc_insertion_point(class_scope:proto.game.ExMsg)
 private:
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_voice_room();
  inline void clear_has_voice_room();
  inline void set_has_public_channel_id();
  inline void clear_has_public_channel_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 times_;
  ::google::protobuf::int32 voice_room_;
  ::std::string* public_channel_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> group_channel_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_voice_status_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ExMsg* default_instance_;
};
// -------------------------------------------------------------------

class AckGameScene : public ::google::protobuf::Message {
 public:
  AckGameScene();
  virtual ~AckGameScene();

  AckGameScene(const AckGameScene& from);

  inline AckGameScene& operator=(const AckGameScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGameScene& default_instance();

  void Swap(AckGameScene* other);

  // implements Message ----------------------------------------------

  AckGameScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGameScene& from);
  void MergeFrom(const AckGameScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 changetime = 1;
  inline bool has_changetime() const;
  inline void clear_changetime();
  static const int kChangetimeFieldNumber = 1;
  inline ::google::protobuf::int32 changetime() const;
  inline void set_changetime(::google::protobuf::int32 value);

  // optional int32 lacktypetime = 2;
  inline bool has_lacktypetime() const;
  inline void clear_lacktypetime();
  static const int kLacktypetimeFieldNumber = 2;
  inline ::google::protobuf::int32 lacktypetime() const;
  inline void set_lacktypetime(::google::protobuf::int32 value);

  // optional int32 outcardtime = 3;
  inline bool has_outcardtime() const;
  inline void clear_outcardtime();
  static const int kOutcardtimeFieldNumber = 3;
  inline ::google::protobuf::int32 outcardtime() const;
  inline void set_outcardtime(::google::protobuf::int32 value);

  // optional int32 operatetime = 4;
  inline bool has_operatetime() const;
  inline void clear_operatetime();
  static const int kOperatetimeFieldNumber = 4;
  inline ::google::protobuf::int32 operatetime() const;
  inline void set_operatetime(::google::protobuf::int32 value);

  // optional int32 basescore = 5;
  inline bool has_basescore() const;
  inline void clear_basescore();
  static const int kBasescoreFieldNumber = 5;
  inline ::google::protobuf::int32 basescore() const;
  inline void set_basescore(::google::protobuf::int32 value);

  // optional int32 delaytime = 6;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelaytimeFieldNumber = 6;
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 SceneStatus = 7;
  inline bool has_scenestatus() const;
  inline void clear_scenestatus();
  static const int kSceneStatusFieldNumber = 7;
  inline ::google::protobuf::int32 scenestatus() const;
  inline void set_scenestatus(::google::protobuf::int32 value);

  // optional int32 LeftTime = 8;
  inline bool has_lefttime() const;
  inline void clear_lefttime();
  static const int kLeftTimeFieldNumber = 8;
  inline ::google::protobuf::int32 lefttime() const;
  inline void set_lefttime(::google::protobuf::int32 value);

  // optional .proto.game.HandCards UserCard = 9;
  inline bool has_usercard() const;
  inline void clear_usercard();
  static const int kUserCardFieldNumber = 9;
  inline const ::proto::game::HandCards& usercard() const;
  inline ::proto::game::HandCards* mutable_usercard();
  inline ::proto::game::HandCards* release_usercard();
  inline void set_allocated_usercard(::proto::game::HandCards* usercard);

  // repeated int32 HandCardNums = 10;
  inline int handcardnums_size() const;
  inline void clear_handcardnums();
  static const int kHandCardNumsFieldNumber = 10;
  inline ::google::protobuf::int32 handcardnums(int index) const;
  inline void set_handcardnums(int index, ::google::protobuf::int32 value);
  inline void add_handcardnums(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handcardnums() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handcardnums();

  // optional int32 CurOutCardUser = 11;
  inline bool has_curoutcarduser() const;
  inline void clear_curoutcarduser();
  static const int kCurOutCardUserFieldNumber = 11;
  inline ::google::protobuf::int32 curoutcarduser() const;
  inline void set_curoutcarduser(::google::protobuf::int32 value);

  // repeated .proto.game.tagShowOutCard ShowCard = 12;
  inline int showcard_size() const;
  inline void clear_showcard();
  static const int kShowCardFieldNumber = 12;
  inline const ::proto::game::tagShowOutCard& showcard(int index) const;
  inline ::proto::game::tagShowOutCard* mutable_showcard(int index);
  inline ::proto::game::tagShowOutCard* add_showcard();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagShowOutCard >&
      showcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagShowOutCard >*
      mutable_showcard();

  // optional int32 curOutCard = 13;
  inline bool has_curoutcard() const;
  inline void clear_curoutcard();
  static const int kCurOutCardFieldNumber = 13;
  inline ::google::protobuf::int32 curoutcard() const;
  inline void set_curoutcard(::google::protobuf::int32 value);

  // repeated .proto.game.tagUserHuInfo HuInfo = 14;
  inline int huinfo_size() const;
  inline void clear_huinfo();
  static const int kHuInfoFieldNumber = 14;
  inline const ::proto::game::tagUserHuInfo& huinfo(int index) const;
  inline ::proto::game::tagUserHuInfo* mutable_huinfo(int index);
  inline ::proto::game::tagUserHuInfo* add_huinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagUserHuInfo >&
      huinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagUserHuInfo >*
      mutable_huinfo();

  // repeated int32 TotalScore = 15;
  inline int totalscore_size() const;
  inline void clear_totalscore();
  static const int kTotalScoreFieldNumber = 15;
  inline ::google::protobuf::int32 totalscore(int index) const;
  inline void set_totalscore(int index, ::google::protobuf::int32 value);
  inline void add_totalscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      totalscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_totalscore();

  // repeated .proto.game.tagGroupCard GroupCard = 16;
  inline int groupcard_size() const;
  inline void clear_groupcard();
  static const int kGroupCardFieldNumber = 16;
  inline const ::proto::game::tagGroupCard& groupcard(int index) const;
  inline ::proto::game::tagGroupCard* mutable_groupcard(int index);
  inline ::proto::game::tagGroupCard* add_groupcard();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGroupCard >&
      groupcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGroupCard >*
      mutable_groupcard();

  // optional int32 IsAutoHu = 17;
  inline bool has_isautohu() const;
  inline void clear_isautohu();
  static const int kIsAutoHuFieldNumber = 17;
  inline ::google::protobuf::int32 isautohu() const;
  inline void set_isautohu(::google::protobuf::int32 value);

  // optional int32 BankerChairid = 18;
  inline bool has_bankerchairid() const;
  inline void clear_bankerchairid();
  static const int kBankerChairidFieldNumber = 18;
  inline ::google::protobuf::int32 bankerchairid() const;
  inline void set_bankerchairid(::google::protobuf::int32 value);

  // repeated int32 UserLackType = 19;
  inline int userlacktype_size() const;
  inline void clear_userlacktype();
  static const int kUserLackTypeFieldNumber = 19;
  inline ::google::protobuf::int32 userlacktype(int index) const;
  inline void set_userlacktype(int index, ::google::protobuf::int32 value);
  inline void add_userlacktype(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      userlacktype() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_userlacktype();

  // optional int32 IscurGetCard = 20;
  inline bool has_iscurgetcard() const;
  inline void clear_iscurgetcard();
  static const int kIscurGetCardFieldNumber = 20;
  inline ::google::protobuf::int32 iscurgetcard() const;
  inline void set_iscurgetcard(::google::protobuf::int32 value);

  // optional int32 Card = 21;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 21;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // optional int32 OpType = 22;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOpTypeFieldNumber = 22;
  inline ::google::protobuf::int32 optype() const;
  inline void set_optype(::google::protobuf::int32 value);

  // repeated .proto.game.tagGangInfo GangInfo = 23;
  inline int ganginfo_size() const;
  inline void clear_ganginfo();
  static const int kGangInfoFieldNumber = 23;
  inline const ::proto::game::tagGangInfo& ganginfo(int index) const;
  inline ::proto::game::tagGangInfo* mutable_ganginfo(int index);
  inline ::proto::game::tagGangInfo* add_ganginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >&
      ganginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >*
      mutable_ganginfo();

  // repeated .proto.game.tagListenInfo ListenInfo = 24;
  inline int listeninfo_size() const;
  inline void clear_listeninfo();
  static const int kListenInfoFieldNumber = 24;
  inline const ::proto::game::tagListenInfo& listeninfo(int index) const;
  inline ::proto::game::tagListenInfo* mutable_listeninfo(int index);
  inline ::proto::game::tagListenInfo* add_listeninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
      listeninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
      mutable_listeninfo();

  // repeated int32 OfflineState = 25;
  inline int offlinestate_size() const;
  inline void clear_offlinestate();
  static const int kOfflineStateFieldNumber = 25;
  inline ::google::protobuf::int32 offlinestate(int index) const;
  inline void set_offlinestate(int index, ::google::protobuf::int32 value);
  inline void add_offlinestate(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      offlinestate() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_offlinestate();

  // optional int32 PoolCardLeftNums = 26;
  inline bool has_poolcardleftnums() const;
  inline void clear_poolcardleftnums();
  static const int kPoolCardLeftNumsFieldNumber = 26;
  inline ::google::protobuf::int32 poolcardleftnums() const;
  inline void set_poolcardleftnums(::google::protobuf::int32 value);

  // optional int32 preready_timer = 27;
  inline bool has_preready_timer() const;
  inline void clear_preready_timer();
  static const int kPrereadyTimerFieldNumber = 27;
  inline ::google::protobuf::int32 preready_timer() const;
  inline void set_preready_timer(::google::protobuf::int32 value);

  // optional int32 stand_money = 28;
  inline bool has_stand_money() const;
  inline void clear_stand_money();
  static const int kStandMoneyFieldNumber = 28;
  inline ::google::protobuf::int32 stand_money() const;
  inline void set_stand_money(::google::protobuf::int32 value);

  // optional int32 HorseNum = 29;
  inline bool has_horsenum() const;
  inline void clear_horsenum();
  static const int kHorseNumFieldNumber = 29;
  inline ::google::protobuf::int32 horsenum() const;
  inline void set_horsenum(::google::protobuf::int32 value);

  // optional int32 isDisbandroom = 30;
  inline bool has_isdisbandroom() const;
  inline void clear_isdisbandroom();
  static const int kIsDisbandroomFieldNumber = 30;
  inline ::google::protobuf::int32 isdisbandroom() const;
  inline void set_isdisbandroom(::google::protobuf::int32 value);

  // optional .proto.game.AckDisbandApply Disbandinfo = 31;
  inline bool has_disbandinfo() const;
  inline void clear_disbandinfo();
  static const int kDisbandinfoFieldNumber = 31;
  inline const ::proto::game::AckDisbandApply& disbandinfo() const;
  inline ::proto::game::AckDisbandApply* mutable_disbandinfo();
  inline ::proto::game::AckDisbandApply* release_disbandinfo();
  inline void set_allocated_disbandinfo(::proto::game::AckDisbandApply* disbandinfo);

  // repeated .proto.game.AckDisbandChooseBc UserDisbandstate = 32;
  inline int userdisbandstate_size() const;
  inline void clear_userdisbandstate();
  static const int kUserDisbandstateFieldNumber = 32;
  inline const ::proto::game::AckDisbandChooseBc& userdisbandstate(int index) const;
  inline ::proto::game::AckDisbandChooseBc* mutable_userdisbandstate(int index);
  inline ::proto::game::AckDisbandChooseBc* add_userdisbandstate();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::AckDisbandChooseBc >&
      userdisbandstate() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::AckDisbandChooseBc >*
      mutable_userdisbandstate();

  // repeated .proto.game.AckUserOnlineState UserOnlinestate = 33;
  inline int useronlinestate_size() const;
  inline void clear_useronlinestate();
  static const int kUserOnlinestateFieldNumber = 33;
  inline const ::proto::game::AckUserOnlineState& useronlinestate(int index) const;
  inline ::proto::game::AckUserOnlineState* mutable_useronlinestate(int index);
  inline ::proto::game::AckUserOnlineState* add_useronlinestate();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::AckUserOnlineState >&
      useronlinestate() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::AckUserOnlineState >*
      mutable_useronlinestate();

  // repeated .proto.game.AckUserOvertimeState UserOvertime = 34;
  inline int userovertime_size() const;
  inline void clear_userovertime();
  static const int kUserOvertimeFieldNumber = 34;
  inline const ::proto::game::AckUserOvertimeState& userovertime(int index) const;
  inline ::proto::game::AckUserOvertimeState* mutable_userovertime(int index);
  inline ::proto::game::AckUserOvertimeState* add_userovertime();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::AckUserOvertimeState >&
      userovertime() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::AckUserOvertimeState >*
      mutable_userovertime();

  // optional bool IsZhuanZhuanRoom = 35;
  inline bool has_iszhuanzhuanroom() const;
  inline void clear_iszhuanzhuanroom();
  static const int kIsZhuanZhuanRoomFieldNumber = 35;
  inline bool iszhuanzhuanroom() const;
  inline void set_iszhuanzhuanroom(bool value);

  // optional .proto.game.tagReadyInfo UserReadyInfo = 36;
  inline bool has_userreadyinfo() const;
  inline void clear_userreadyinfo();
  static const int kUserReadyInfoFieldNumber = 36;
  inline const ::proto::game::tagReadyInfo& userreadyinfo() const;
  inline ::proto::game::tagReadyInfo* mutable_userreadyinfo();
  inline ::proto::game::tagReadyInfo* release_userreadyinfo();
  inline void set_allocated_userreadyinfo(::proto::game::tagReadyInfo* userreadyinfo);

  // optional int32 roomGolden = 37;
  inline bool has_roomgolden() const;
  inline void clear_roomgolden();
  static const int kRoomGoldenFieldNumber = 37;
  inline ::google::protobuf::int32 roomgolden() const;
  inline void set_roomgolden(::google::protobuf::int32 value);

  // repeated int32 RoomConfigID = 38;
  inline int roomconfigid_size() const;
  inline void clear_roomconfigid();
  static const int kRoomConfigIDFieldNumber = 38;
  inline ::google::protobuf::int32 roomconfigid(int index) const;
  inline void set_roomconfigid(int index, ::google::protobuf::int32 value);
  inline void add_roomconfigid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      roomconfigid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_roomconfigid();

  // optional .proto.game.TotalRoundScore totalRoundScore = 39;
  inline bool has_totalroundscore() const;
  inline void clear_totalroundscore();
  static const int kTotalRoundScoreFieldNumber = 39;
  inline const ::proto::game::TotalRoundScore& totalroundscore() const;
  inline ::proto::game::TotalRoundScore* mutable_totalroundscore();
  inline ::proto::game::TotalRoundScore* release_totalroundscore();
  inline void set_allocated_totalroundscore(::proto::game::TotalRoundScore* totalroundscore);

  // optional int32 encrypt_code = 40;
  inline bool has_encrypt_code() const;
  inline void clear_encrypt_code();
  static const int kEncryptCodeFieldNumber = 40;
  inline ::google::protobuf::int32 encrypt_code() const;
  inline void set_encrypt_code(::google::protobuf::int32 value);

  // optional int32 OpType2 = 41;
  inline bool has_optype2() const;
  inline void clear_optype2();
  static const int kOpType2FieldNumber = 41;
  inline ::google::protobuf::int32 optype2() const;
  inline void set_optype2(::google::protobuf::int32 value);

  // optional string md5 = 42;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 42;
  inline const ::std::string& md5() const;
  inline void set_md5(const ::std::string& value);
  inline void set_md5(const char* value);
  inline void set_md5(const char* value, size_t size);
  inline ::std::string* mutable_md5();
  inline ::std::string* release_md5();
  inline void set_allocated_md5(::std::string* md5);

  // optional int32 operateid = 43;
  inline bool has_operateid() const;
  inline void clear_operateid();
  static const int kOperateidFieldNumber = 43;
  inline ::google::protobuf::int32 operateid() const;
  inline void set_operateid(::google::protobuf::int32 value);

  // optional int32 auto_disband_state = 44;
  inline bool has_auto_disband_state() const;
  inline void clear_auto_disband_state();
  static const int kAutoDisbandStateFieldNumber = 44;
  inline ::google::protobuf::int32 auto_disband_state() const;
  inline void set_auto_disband_state(::google::protobuf::int32 value);

  // repeated int32 auto_disband_chairids = 45;
  inline int auto_disband_chairids_size() const;
  inline void clear_auto_disband_chairids();
  static const int kAutoDisbandChairidsFieldNumber = 45;
  inline ::google::protobuf::int32 auto_disband_chairids(int index) const;
  inline void set_auto_disband_chairids(int index, ::google::protobuf::int32 value);
  inline void add_auto_disband_chairids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      auto_disband_chairids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_auto_disband_chairids();

  // optional int32 auto_disband_remaintime = 46;
  inline bool has_auto_disband_remaintime() const;
  inline void clear_auto_disband_remaintime();
  static const int kAutoDisbandRemaintimeFieldNumber = 46;
  inline ::google::protobuf::int32 auto_disband_remaintime() const;
  inline void set_auto_disband_remaintime(::google::protobuf::int32 value);

  // optional int32 auto_disband_time = 47;
  inline bool has_auto_disband_time() const;
  inline void clear_auto_disband_time();
  static const int kAutoDisbandTimeFieldNumber = 47;
  inline ::google::protobuf::int32 auto_disband_time() const;
  inline void set_auto_disband_time(::google::protobuf::int32 value);

  // optional int32 totalcount = 48;
  inline bool has_totalcount() const;
  inline void clear_totalcount();
  static const int kTotalcountFieldNumber = 48;
  inline ::google::protobuf::int32 totalcount() const;
  inline void set_totalcount(::google::protobuf::int32 value);

  // optional int32 currentcount = 49;
  inline bool has_currentcount() const;
  inline void clear_currentcount();
  static const int kCurrentcountFieldNumber = 49;
  inline ::google::protobuf::int32 currentcount() const;
  inline void set_currentcount(::google::protobuf::int32 value);

  // repeated int32 userchangemode = 50;
  inline int userchangemode_size() const;
  inline void clear_userchangemode();
  static const int kUserchangemodeFieldNumber = 50;
  inline ::google::protobuf::int32 userchangemode(int index) const;
  inline void set_userchangemode(int index, ::google::protobuf::int32 value);
  inline void add_userchangemode(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      userchangemode() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_userchangemode();

  // optional .proto.game.ExMsg msg = 51;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 51;
  inline const ::proto::game::ExMsg& msg() const;
  inline ::proto::game::ExMsg* mutable_msg();
  inline ::proto::game::ExMsg* release_msg();
  inline void set_allocated_msg(::proto::game::ExMsg* msg);

  // repeated .proto.game.CardArr cardList = 60;
  inline int cardlist_size() const;
  inline void clear_cardlist();
  static const int kCardListFieldNumber = 60;
  inline const ::proto::game::CardArr& cardlist(int index) const;
  inline ::proto::game::CardArr* mutable_cardlist(int index);
  inline ::proto::game::CardArr* add_cardlist();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::CardArr >&
      cardlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::CardArr >*
      mutable_cardlist();

  // optional .proto.game.TestSvrConf test_svr_conf = 61;
  inline bool has_test_svr_conf() const;
  inline void clear_test_svr_conf();
  static const int kTestSvrConfFieldNumber = 61;
  inline const ::proto::game::TestSvrConf& test_svr_conf() const;
  inline ::proto::game::TestSvrConf* mutable_test_svr_conf();
  inline ::proto::game::TestSvrConf* release_test_svr_conf();
  inline void set_allocated_test_svr_conf(::proto::game::TestSvrConf* test_svr_conf);

  // repeated .proto.game.DaAnTing daan_ting = 80;
  inline int daan_ting_size() const;
  inline void clear_daan_ting();
  static const int kDaanTingFieldNumber = 80;
  inline const ::proto::game::DaAnTing& daan_ting(int index) const;
  inline ::proto::game::DaAnTing* mutable_daan_ting(int index);
  inline ::proto::game::DaAnTing* add_daan_ting();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::DaAnTing >&
      daan_ting() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::DaAnTing >*
      mutable_daan_ting();

  // @@protoc_insertion_point(class_scope:proto.game.AckGameScene)
 private:
  inline void set_has_changetime();
  inline void clear_has_changetime();
  inline void set_has_lacktypetime();
  inline void clear_has_lacktypetime();
  inline void set_has_outcardtime();
  inline void clear_has_outcardtime();
  inline void set_has_operatetime();
  inline void clear_has_operatetime();
  inline void set_has_basescore();
  inline void clear_has_basescore();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_scenestatus();
  inline void clear_has_scenestatus();
  inline void set_has_lefttime();
  inline void clear_has_lefttime();
  inline void set_has_usercard();
  inline void clear_has_usercard();
  inline void set_has_curoutcarduser();
  inline void clear_has_curoutcarduser();
  inline void set_has_curoutcard();
  inline void clear_has_curoutcard();
  inline void set_has_isautohu();
  inline void clear_has_isautohu();
  inline void set_has_bankerchairid();
  inline void clear_has_bankerchairid();
  inline void set_has_iscurgetcard();
  inline void clear_has_iscurgetcard();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_optype();
  inline void clear_has_optype();
  inline void set_has_poolcardleftnums();
  inline void clear_has_poolcardleftnums();
  inline void set_has_preready_timer();
  inline void clear_has_preready_timer();
  inline void set_has_stand_money();
  inline void clear_has_stand_money();
  inline void set_has_horsenum();
  inline void clear_has_horsenum();
  inline void set_has_isdisbandroom();
  inline void clear_has_isdisbandroom();
  inline void set_has_disbandinfo();
  inline void clear_has_disbandinfo();
  inline void set_has_iszhuanzhuanroom();
  inline void clear_has_iszhuanzhuanroom();
  inline void set_has_userreadyinfo();
  inline void clear_has_userreadyinfo();
  inline void set_has_roomgolden();
  inline void clear_has_roomgolden();
  inline void set_has_totalroundscore();
  inline void clear_has_totalroundscore();
  inline void set_has_encrypt_code();
  inline void clear_has_encrypt_code();
  inline void set_has_optype2();
  inline void clear_has_optype2();
  inline void set_has_md5();
  inline void clear_has_md5();
  inline void set_has_operateid();
  inline void clear_has_operateid();
  inline void set_has_auto_disband_state();
  inline void clear_has_auto_disband_state();
  inline void set_has_auto_disband_remaintime();
  inline void clear_has_auto_disband_remaintime();
  inline void set_has_auto_disband_time();
  inline void clear_has_auto_disband_time();
  inline void set_has_totalcount();
  inline void clear_has_totalcount();
  inline void set_has_currentcount();
  inline void clear_has_currentcount();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_test_svr_conf();
  inline void clear_has_test_svr_conf();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::int32 changetime_;
  ::google::protobuf::int32 lacktypetime_;
  ::google::protobuf::int32 outcardtime_;
  ::google::protobuf::int32 operatetime_;
  ::google::protobuf::int32 basescore_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 scenestatus_;
  ::google::protobuf::int32 lefttime_;
  ::proto::game::HandCards* usercard_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handcardnums_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagShowOutCard > showcard_;
  ::google::protobuf::int32 curoutcarduser_;
  ::google::protobuf::int32 curoutcard_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagUserHuInfo > huinfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > totalscore_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagGroupCard > groupcard_;
  ::google::protobuf::int32 isautohu_;
  ::google::protobuf::int32 bankerchairid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > userlacktype_;
  ::google::protobuf::int32 iscurgetcard_;
  ::google::protobuf::int32 card_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo > ganginfo_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo > listeninfo_;
  ::google::protobuf::int32 optype_;
  ::google::protobuf::int32 poolcardleftnums_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > offlinestate_;
  ::google::protobuf::int32 preready_timer_;
  ::google::protobuf::int32 stand_money_;
  ::google::protobuf::int32 horsenum_;
  ::google::protobuf::int32 isdisbandroom_;
  ::proto::game::AckDisbandApply* disbandinfo_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::AckDisbandChooseBc > userdisbandstate_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::AckUserOnlineState > useronlinestate_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::AckUserOvertimeState > userovertime_;
  ::proto::game::tagReadyInfo* userreadyinfo_;
  bool iszhuanzhuanroom_;
  ::google::protobuf::int32 roomgolden_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > roomconfigid_;
  ::proto::game::TotalRoundScore* totalroundscore_;
  ::google::protobuf::int32 encrypt_code_;
  ::google::protobuf::int32 optype2_;
  ::std::string* md5_;
  ::google::protobuf::int32 operateid_;
  ::google::protobuf::int32 auto_disband_state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > auto_disband_chairids_;
  ::google::protobuf::int32 auto_disband_remaintime_;
  ::google::protobuf::int32 auto_disband_time_;
  ::google::protobuf::int32 totalcount_;
  ::google::protobuf::int32 currentcount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > userchangemode_;
  ::proto::game::ExMsg* msg_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::CardArr > cardlist_;
  ::proto::game::TestSvrConf* test_svr_conf_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::DaAnTing > daan_ting_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckGameScene* default_instance_;
};
// -------------------------------------------------------------------

class TestSvrConf : public ::google::protobuf::Message {
 public:
  TestSvrConf();
  virtual ~TestSvrConf();

  TestSvrConf(const TestSvrConf& from);

  inline TestSvrConf& operator=(const TestSvrConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestSvrConf& default_instance();

  void Swap(TestSvrConf* other);

  // implements Message ----------------------------------------------

  TestSvrConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestSvrConf& from);
  void MergeFrom(const TestSvrConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool client_anti_cheat = 1;
  inline bool has_client_anti_cheat() const;
  inline void clear_client_anti_cheat();
  static const int kClientAntiCheatFieldNumber = 1;
  inline bool client_anti_cheat() const;
  inline void set_client_anti_cheat(bool value);

  // @@protoc_insertion_point(class_scope:proto.game.TestSvrConf)
 private:
  inline void set_has_client_anti_cheat();
  inline void clear_has_client_anti_cheat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool client_anti_cheat_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static TestSvrConf* default_instance_;
};
// -------------------------------------------------------------------

class AckUserReady : public ::google::protobuf::Message {
 public:
  AckUserReady();
  virtual ~AckUserReady();

  AckUserReady(const AckUserReady& from);

  inline AckUserReady& operator=(const AckUserReady& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUserReady& default_instance();

  void Swap(AckUserReady* other);

  // implements Message ----------------------------------------------

  AckUserReady* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUserReady& from);
  void MergeFrom(const AckUserReady& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 ready = 1;
  inline int ready_size() const;
  inline void clear_ready();
  static const int kReadyFieldNumber = 1;
  inline ::google::protobuf::int32 ready(int index) const;
  inline void set_ready(int index, ::google::protobuf::int32 value);
  inline void add_ready(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ready() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ready();

  // @@protoc_insertion_point(class_scope:proto.game.AckUserReady)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ready_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUserReady* default_instance_;
};
// -------------------------------------------------------------------

class AckGameStart : public ::google::protobuf::Message {
 public:
  AckGameStart();
  virtual ~AckGameStart();

  AckGameStart(const AckGameStart& from);

  inline AckGameStart& operator=(const AckGameStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGameStart& default_instance();

  void Swap(AckGameStart* other);

  // implements Message ----------------------------------------------

  AckGameStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGameStart& from);
  void MergeFrom(const AckGameStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 IsChangBanker = 2;
  inline bool has_ischangbanker() const;
  inline void clear_ischangbanker();
  static const int kIsChangBankerFieldNumber = 2;
  inline ::google::protobuf::int32 ischangbanker() const;
  inline void set_ischangbanker(::google::protobuf::int32 value);

  // repeated int32 TouZiInfo = 3;
  inline int touziinfo_size() const;
  inline void clear_touziinfo();
  static const int kTouZiInfoFieldNumber = 3;
  inline ::google::protobuf::int32 touziinfo(int index) const;
  inline void set_touziinfo(int index, ::google::protobuf::int32 value);
  inline void add_touziinfo(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      touziinfo() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_touziinfo();

  // optional int32 totalcount = 4;
  inline bool has_totalcount() const;
  inline void clear_totalcount();
  static const int kTotalcountFieldNumber = 4;
  inline ::google::protobuf::int32 totalcount() const;
  inline void set_totalcount(::google::protobuf::int32 value);

  // optional int32 currentcount = 5;
  inline bool has_currentcount() const;
  inline void clear_currentcount();
  static const int kCurrentcountFieldNumber = 5;
  inline ::google::protobuf::int32 currentcount() const;
  inline void set_currentcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckGameStart)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_ischangbanker();
  inline void clear_has_ischangbanker();
  inline void set_has_totalcount();
  inline void clear_has_totalcount();
  inline void set_has_currentcount();
  inline void clear_has_currentcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 ischangbanker_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > touziinfo_;
  ::google::protobuf::int32 totalcount_;
  ::google::protobuf::int32 currentcount_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckGameStart* default_instance_;
};
// -------------------------------------------------------------------

class AckFirstHandCard : public ::google::protobuf::Message {
 public:
  AckFirstHandCard();
  virtual ~AckFirstHandCard();

  AckFirstHandCard(const AckFirstHandCard& from);

  inline AckFirstHandCard& operator=(const AckFirstHandCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckFirstHandCard& default_instance();

  void Swap(AckFirstHandCard* other);

  // implements Message ----------------------------------------------

  AckFirstHandCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckFirstHandCard& from);
  void MergeFrom(const AckFirstHandCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.game.HandCards UserCard = 1;
  inline bool has_usercard() const;
  inline void clear_usercard();
  static const int kUserCardFieldNumber = 1;
  inline const ::proto::game::HandCards& usercard() const;
  inline ::proto::game::HandCards* mutable_usercard();
  inline ::proto::game::HandCards* release_usercard();
  inline void set_allocated_usercard(::proto::game::HandCards* usercard);

  // repeated int32 HandCardNums = 2;
  inline int handcardnums_size() const;
  inline void clear_handcardnums();
  static const int kHandCardNumsFieldNumber = 2;
  inline ::google::protobuf::int32 handcardnums(int index) const;
  inline void set_handcardnums(int index, ::google::protobuf::int32 value);
  inline void add_handcardnums(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handcardnums() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handcardnums();

  // optional int32 CardNum = 3;
  inline bool has_cardnum() const;
  inline void clear_cardnum();
  static const int kCardNumFieldNumber = 3;
  inline ::google::protobuf::int32 cardnum() const;
  inline void set_cardnum(::google::protobuf::int32 value);

  // optional int32 encrypt_code = 4;
  inline bool has_encrypt_code() const;
  inline void clear_encrypt_code();
  static const int kEncryptCodeFieldNumber = 4;
  inline ::google::protobuf::int32 encrypt_code() const;
  inline void set_encrypt_code(::google::protobuf::int32 value);

  // optional string md5 = 5;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 5;
  inline const ::std::string& md5() const;
  inline void set_md5(const ::std::string& value);
  inline void set_md5(const char* value);
  inline void set_md5(const char* value, size_t size);
  inline ::std::string* mutable_md5();
  inline ::std::string* release_md5();
  inline void set_allocated_md5(::std::string* md5);

  // optional int32 first_get_card = 6;
  inline bool has_first_get_card() const;
  inline void clear_first_get_card();
  static const int kFirstGetCardFieldNumber = 6;
  inline ::google::protobuf::int32 first_get_card() const;
  inline void set_first_get_card(::google::protobuf::int32 value);

  // optional int32 voice_room = 7;
  inline bool has_voice_room() const;
  inline void clear_voice_room();
  static const int kVoiceRoomFieldNumber = 7;
  inline ::google::protobuf::int32 voice_room() const;
  inline void set_voice_room(::google::protobuf::int32 value);

  // optional string public_channel_id = 8;
  inline bool has_public_channel_id() const;
  inline void clear_public_channel_id();
  static const int kPublicChannelIdFieldNumber = 8;
  inline const ::std::string& public_channel_id() const;
  inline void set_public_channel_id(const ::std::string& value);
  inline void set_public_channel_id(const char* value);
  inline void set_public_channel_id(const char* value, size_t size);
  inline ::std::string* mutable_public_channel_id();
  inline ::std::string* release_public_channel_id();
  inline void set_allocated_public_channel_id(::std::string* public_channel_id);

  // repeated string group_channel_ids = 9;
  inline int group_channel_ids_size() const;
  inline void clear_group_channel_ids();
  static const int kGroupChannelIdsFieldNumber = 9;
  inline const ::std::string& group_channel_ids(int index) const;
  inline ::std::string* mutable_group_channel_ids(int index);
  inline void set_group_channel_ids(int index, const ::std::string& value);
  inline void set_group_channel_ids(int index, const char* value);
  inline void set_group_channel_ids(int index, const char* value, size_t size);
  inline ::std::string* add_group_channel_ids();
  inline void add_group_channel_ids(const ::std::string& value);
  inline void add_group_channel_ids(const char* value);
  inline void add_group_channel_ids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& group_channel_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_group_channel_ids();

  // @@protoc_insertion_point(class_scope:proto.game.AckFirstHandCard)
 private:
  inline void set_has_usercard();
  inline void clear_has_usercard();
  inline void set_has_cardnum();
  inline void clear_has_cardnum();
  inline void set_has_encrypt_code();
  inline void clear_has_encrypt_code();
  inline void set_has_md5();
  inline void clear_has_md5();
  inline void set_has_first_get_card();
  inline void clear_has_first_get_card();
  inline void set_has_voice_room();
  inline void clear_has_voice_room();
  inline void set_has_public_channel_id();
  inline void clear_has_public_channel_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::proto::game::HandCards* usercard_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handcardnums_;
  ::google::protobuf::int32 cardnum_;
  ::google::protobuf::int32 encrypt_code_;
  ::std::string* md5_;
  ::google::protobuf::int32 first_get_card_;
  ::google::protobuf::int32 voice_room_;
  ::std::string* public_channel_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> group_channel_ids_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckFirstHandCard* default_instance_;
};
// -------------------------------------------------------------------

class VideoFirstHandCard : public ::google::protobuf::Message {
 public:
  VideoFirstHandCard();
  virtual ~VideoFirstHandCard();

  VideoFirstHandCard(const VideoFirstHandCard& from);

  inline VideoFirstHandCard& operator=(const VideoFirstHandCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoFirstHandCard& default_instance();

  void Swap(VideoFirstHandCard* other);

  // implements Message ----------------------------------------------

  VideoFirstHandCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoFirstHandCard& from);
  void MergeFrom(const VideoFirstHandCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.HandCards UserCard = 1;
  inline int usercard_size() const;
  inline void clear_usercard();
  static const int kUserCardFieldNumber = 1;
  inline const ::proto::game::HandCards& usercard(int index) const;
  inline ::proto::game::HandCards* mutable_usercard(int index);
  inline ::proto::game::HandCards* add_usercard();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >&
      usercard() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >*
      mutable_usercard();

  // optional int32 first_get_card = 2;
  inline bool has_first_get_card() const;
  inline void clear_first_get_card();
  static const int kFirstGetCardFieldNumber = 2;
  inline ::google::protobuf::int32 first_get_card() const;
  inline void set_first_get_card(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.VideoFirstHandCard)
 private:
  inline void set_has_first_get_card();
  inline void clear_has_first_get_card();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards > usercard_;
  ::google::protobuf::int32 first_get_card_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static VideoFirstHandCard* default_instance_;
};
// -------------------------------------------------------------------

class tagHuInfo : public ::google::protobuf::Message {
 public:
  tagHuInfo();
  virtual ~tagHuInfo();

  tagHuInfo(const tagHuInfo& from);

  inline tagHuInfo& operator=(const tagHuInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagHuInfo& default_instance();

  void Swap(tagHuInfo* other);

  // implements Message ----------------------------------------------

  tagHuInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagHuInfo& from);
  void MergeFrom(const tagHuInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Card = 1;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 1;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // optional int32 LeftNum = 2;
  inline bool has_leftnum() const;
  inline void clear_leftnum();
  static const int kLeftNumFieldNumber = 2;
  inline ::google::protobuf::int32 leftnum() const;
  inline void set_leftnum(::google::protobuf::int32 value);

  // optional int32 HuFanNum = 3;
  inline bool has_hufannum() const;
  inline void clear_hufannum();
  static const int kHuFanNumFieldNumber = 3;
  inline ::google::protobuf::int32 hufannum() const;
  inline void set_hufannum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.tagHuInfo)
 private:
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_leftnum();
  inline void clear_has_leftnum();
  inline void set_has_hufannum();
  inline void clear_has_hufannum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 card_;
  ::google::protobuf::int32 leftnum_;
  ::google::protobuf::int32 hufannum_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagHuInfo* default_instance_;
};
// -------------------------------------------------------------------

class tagListenInfo : public ::google::protobuf::Message {
 public:
  tagListenInfo();
  virtual ~tagListenInfo();

  tagListenInfo(const tagListenInfo& from);

  inline tagListenInfo& operator=(const tagListenInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagListenInfo& default_instance();

  void Swap(tagListenInfo* other);

  // implements Message ----------------------------------------------

  tagListenInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagListenInfo& from);
  void MergeFrom(const tagListenInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 OutCard = 1;
  inline bool has_outcard() const;
  inline void clear_outcard();
  static const int kOutCardFieldNumber = 1;
  inline ::google::protobuf::int32 outcard() const;
  inline void set_outcard(::google::protobuf::int32 value);

  // repeated .proto.game.tagHuInfo HuInfo = 2;
  inline int huinfo_size() const;
  inline void clear_huinfo();
  static const int kHuInfoFieldNumber = 2;
  inline const ::proto::game::tagHuInfo& huinfo(int index) const;
  inline ::proto::game::tagHuInfo* mutable_huinfo(int index);
  inline ::proto::game::tagHuInfo* add_huinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHuInfo >&
      huinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHuInfo >*
      mutable_huinfo();

  // @@protoc_insertion_point(class_scope:proto.game.tagListenInfo)
 private:
  inline void set_has_outcard();
  inline void clear_has_outcard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagHuInfo > huinfo_;
  ::google::protobuf::int32 outcard_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagListenInfo* default_instance_;
};
// -------------------------------------------------------------------

class tagPreGangs : public ::google::protobuf::Message {
 public:
  tagPreGangs();
  virtual ~tagPreGangs();

  tagPreGangs(const tagPreGangs& from);

  inline tagPreGangs& operator=(const tagPreGangs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPreGangs& default_instance();

  void Swap(tagPreGangs* other);

  // implements Message ----------------------------------------------

  tagPreGangs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagPreGangs& from);
  void MergeFrom(const tagPreGangs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ancard = 1;
  inline bool has_ancard() const;
  inline void clear_ancard();
  static const int kAncardFieldNumber = 1;
  inline ::google::protobuf::int32 ancard() const;
  inline void set_ancard(::google::protobuf::int32 value);

  // repeated int32 outcards = 2;
  inline int outcards_size() const;
  inline void clear_outcards();
  static const int kOutcardsFieldNumber = 2;
  inline ::google::protobuf::int32 outcards(int index) const;
  inline void set_outcards(int index, ::google::protobuf::int32 value);
  inline void add_outcards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      outcards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_outcards();

  // @@protoc_insertion_point(class_scope:proto.game.tagPreGangs)
 private:
  inline void set_has_ancard();
  inline void clear_has_ancard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > outcards_;
  ::google::protobuf::int32 ancard_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagPreGangs* default_instance_;
};
// -------------------------------------------------------------------

class AckUserGetCard : public ::google::protobuf::Message {
 public:
  AckUserGetCard();
  virtual ~AckUserGetCard();

  AckUserGetCard(const AckUserGetCard& from);

  inline AckUserGetCard& operator=(const AckUserGetCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUserGetCard& default_instance();

  void Swap(AckUserGetCard* other);

  // implements Message ----------------------------------------------

  AckUserGetCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUserGetCard& from);
  void MergeFrom(const AckUserGetCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 LeftCardNum = 2;
  inline bool has_leftcardnum() const;
  inline void clear_leftcardnum();
  static const int kLeftCardNumFieldNumber = 2;
  inline ::google::protobuf::int32 leftcardnum() const;
  inline void set_leftcardnum(::google::protobuf::int32 value);

  // optional int32 Card = 3;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 3;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // optional int32 OpType = 4;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOpTypeFieldNumber = 4;
  inline ::google::protobuf::int32 optype() const;
  inline void set_optype(::google::protobuf::int32 value);

  // repeated .proto.game.tagGangInfo GangInfo = 5;
  inline int ganginfo_size() const;
  inline void clear_ganginfo();
  static const int kGangInfoFieldNumber = 5;
  inline const ::proto::game::tagGangInfo& ganginfo(int index) const;
  inline ::proto::game::tagGangInfo* mutable_ganginfo(int index);
  inline ::proto::game::tagGangInfo* add_ganginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >&
      ganginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >*
      mutable_ganginfo();

  // repeated .proto.game.tagListenInfo ListenInfo = 6;
  inline int listeninfo_size() const;
  inline void clear_listeninfo();
  static const int kListenInfoFieldNumber = 6;
  inline const ::proto::game::tagListenInfo& listeninfo(int index) const;
  inline ::proto::game::tagListenInfo* mutable_listeninfo(int index);
  inline ::proto::game::tagListenInfo* add_listeninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
      listeninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
      mutable_listeninfo();

  // optional int32 OpType2 = 7;
  inline bool has_optype2() const;
  inline void clear_optype2();
  static const int kOpType2FieldNumber = 7;
  inline ::google::protobuf::int32 optype2() const;
  inline void set_optype2(::google::protobuf::int32 value);

  // optional int32 fz_type = 8;
  inline bool has_fz_type() const;
  inline void clear_fz_type();
  static const int kFzTypeFieldNumber = 8;
  inline ::google::protobuf::int32 fz_type() const;
  inline void set_fz_type(::google::protobuf::int32 value);

  // optional int32 GetCardDir = 9;
  inline bool has_getcarddir() const;
  inline void clear_getcarddir();
  static const int kGetCardDirFieldNumber = 9;
  inline ::google::protobuf::int32 getcarddir() const;
  inline void set_getcarddir(::google::protobuf::int32 value);

  // repeated .proto.game.tagPreGangs xy_pregang = 10;
  inline int xy_pregang_size() const;
  inline void clear_xy_pregang();
  static const int kXyPregangFieldNumber = 10;
  inline const ::proto::game::tagPreGangs& xy_pregang(int index) const;
  inline ::proto::game::tagPreGangs* mutable_xy_pregang(int index);
  inline ::proto::game::tagPreGangs* add_xy_pregang();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs >&
      xy_pregang() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs >*
      mutable_xy_pregang();

  // optional int32 LockLaizi = 11;
  inline bool has_locklaizi() const;
  inline void clear_locklaizi();
  static const int kLockLaiziFieldNumber = 11;
  inline ::google::protobuf::int32 locklaizi() const;
  inline void set_locklaizi(::google::protobuf::int32 value);

  // optional int32 getlaizi = 12;
  inline bool has_getlaizi() const;
  inline void clear_getlaizi();
  static const int kGetlaiziFieldNumber = 12;
  inline ::google::protobuf::int32 getlaizi() const;
  inline void set_getlaizi(::google::protobuf::int32 value);

  // optional int32 encrypt_code = 13;
  inline bool has_encrypt_code() const;
  inline void clear_encrypt_code();
  static const int kEncryptCodeFieldNumber = 13;
  inline ::google::protobuf::int32 encrypt_code() const;
  inline void set_encrypt_code(::google::protobuf::int32 value);

  // optional string md5 = 14;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 14;
  inline const ::std::string& md5() const;
  inline void set_md5(const ::std::string& value);
  inline void set_md5(const char* value);
  inline void set_md5(const char* value, size_t size);
  inline ::std::string* mutable_md5();
  inline ::std::string* release_md5();
  inline void set_allocated_md5(::std::string* md5);

  // optional int32 operateid = 15;
  inline bool has_operateid() const;
  inline void clear_operateid();
  static const int kOperateidFieldNumber = 15;
  inline ::google::protobuf::int32 operateid() const;
  inline void set_operateid(::google::protobuf::int32 value);

  // repeated int32 cards = 16;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 16;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // repeated .proto.game.CardArr cardList = 17;
  inline int cardlist_size() const;
  inline void clear_cardlist();
  static const int kCardListFieldNumber = 17;
  inline const ::proto::game::CardArr& cardlist(int index) const;
  inline ::proto::game::CardArr* mutable_cardlist(int index);
  inline ::proto::game::CardArr* add_cardlist();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::CardArr >&
      cardlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::CardArr >*
      mutable_cardlist();

  // repeated .proto.game.DaAnTing daan_ting = 20;
  inline int daan_ting_size() const;
  inline void clear_daan_ting();
  static const int kDaanTingFieldNumber = 20;
  inline const ::proto::game::DaAnTing& daan_ting(int index) const;
  inline ::proto::game::DaAnTing* mutable_daan_ting(int index);
  inline ::proto::game::DaAnTing* add_daan_ting();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::DaAnTing >&
      daan_ting() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::DaAnTing >*
      mutable_daan_ting();

  // repeated .proto.game.tagListenInfo ListenInfo1 = 30;
  inline int listeninfo1_size() const;
  inline void clear_listeninfo1();
  static const int kListenInfo1FieldNumber = 30;
  inline const ::proto::game::tagListenInfo& listeninfo1(int index) const;
  inline ::proto::game::tagListenInfo* mutable_listeninfo1(int index);
  inline ::proto::game::tagListenInfo* add_listeninfo1();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
      listeninfo1() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
      mutable_listeninfo1();

  // @@protoc_insertion_point(class_scope:proto.game.AckUserGetCard)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_leftcardnum();
  inline void clear_has_leftcardnum();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_optype();
  inline void clear_has_optype();
  inline void set_has_optype2();
  inline void clear_has_optype2();
  inline void set_has_fz_type();
  inline void clear_has_fz_type();
  inline void set_has_getcarddir();
  inline void clear_has_getcarddir();
  inline void set_has_locklaizi();
  inline void clear_has_locklaizi();
  inline void set_has_getlaizi();
  inline void clear_has_getlaizi();
  inline void set_has_encrypt_code();
  inline void clear_has_encrypt_code();
  inline void set_has_md5();
  inline void clear_has_md5();
  inline void set_has_operateid();
  inline void clear_has_operateid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 leftcardnum_;
  ::google::protobuf::int32 card_;
  ::google::protobuf::int32 optype_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo > ganginfo_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo > listeninfo_;
  ::google::protobuf::int32 optype2_;
  ::google::protobuf::int32 fz_type_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs > xy_pregang_;
  ::google::protobuf::int32 getcarddir_;
  ::google::protobuf::int32 locklaizi_;
  ::google::protobuf::int32 getlaizi_;
  ::google::protobuf::int32 encrypt_code_;
  ::std::string* md5_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::CardArr > cardlist_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::DaAnTing > daan_ting_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo > listeninfo1_;
  ::google::protobuf::int32 operateid_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUserGetCard* default_instance_;
};
// -------------------------------------------------------------------

class tagShowOutCard : public ::google::protobuf::Message {
 public:
  tagShowOutCard();
  virtual ~tagShowOutCard();

  tagShowOutCard(const tagShowOutCard& from);

  inline tagShowOutCard& operator=(const tagShowOutCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagShowOutCard& default_instance();

  void Swap(tagShowOutCard* other);

  // implements Message ----------------------------------------------

  tagShowOutCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagShowOutCard& from);
  void MergeFrom(const tagShowOutCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 OutCardLen = 1;
  inline bool has_outcardlen() const;
  inline void clear_outcardlen();
  static const int kOutCardLenFieldNumber = 1;
  inline ::google::protobuf::int32 outcardlen() const;
  inline void set_outcardlen(::google::protobuf::int32 value);

  // repeated int32 OutCard = 2;
  inline int outcard_size() const;
  inline void clear_outcard();
  static const int kOutCardFieldNumber = 2;
  inline ::google::protobuf::int32 outcard(int index) const;
  inline void set_outcard(int index, ::google::protobuf::int32 value);
  inline void add_outcard(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      outcard() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_outcard();

  // @@protoc_insertion_point(class_scope:proto.game.tagShowOutCard)
 private:
  inline void set_has_outcardlen();
  inline void clear_has_outcardlen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > outcard_;
  ::google::protobuf::int32 outcardlen_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagShowOutCard* default_instance_;
};
// -------------------------------------------------------------------

class AckUserOutCard : public ::google::protobuf::Message {
 public:
  AckUserOutCard();
  virtual ~AckUserOutCard();

  AckUserOutCard(const AckUserOutCard& from);

  inline AckUserOutCard& operator=(const AckUserOutCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUserOutCard& default_instance();

  void Swap(AckUserOutCard* other);

  // implements Message ----------------------------------------------

  AckUserOutCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUserOutCard& from);
  void MergeFrom(const AckUserOutCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 Card = 2;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // repeated .proto.game.tagShowOutCard ShowCard = 3;
  inline int showcard_size() const;
  inline void clear_showcard();
  static const int kShowCardFieldNumber = 3;
  inline const ::proto::game::tagShowOutCard& showcard(int index) const;
  inline ::proto::game::tagShowOutCard* mutable_showcard(int index);
  inline ::proto::game::tagShowOutCard* add_showcard();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagShowOutCard >&
      showcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagShowOutCard >*
      mutable_showcard();

  // optional .proto.game.HandCards UserCard = 4;
  inline bool has_usercard() const;
  inline void clear_usercard();
  static const int kUserCardFieldNumber = 4;
  inline const ::proto::game::HandCards& usercard() const;
  inline ::proto::game::HandCards* mutable_usercard();
  inline ::proto::game::HandCards* release_usercard();
  inline void set_allocated_usercard(::proto::game::HandCards* usercard);

  // repeated .proto.game.tagListenInfo ListenInfo = 5;
  inline int listeninfo_size() const;
  inline void clear_listeninfo();
  static const int kListenInfoFieldNumber = 5;
  inline const ::proto::game::tagListenInfo& listeninfo(int index) const;
  inline ::proto::game::tagListenInfo* mutable_listeninfo(int index);
  inline ::proto::game::tagListenInfo* add_listeninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
      listeninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
      mutable_listeninfo();

  // optional int32 da_type = 6;
  inline bool has_da_type() const;
  inline void clear_da_type();
  static const int kDaTypeFieldNumber = 6;
  inline ::google::protobuf::int32 da_type() const;
  inline void set_da_type(::google::protobuf::int32 value);

  // repeated .proto.game.tagPreGangs xy_pregang = 7;
  inline int xy_pregang_size() const;
  inline void clear_xy_pregang();
  static const int kXyPregangFieldNumber = 7;
  inline const ::proto::game::tagPreGangs& xy_pregang(int index) const;
  inline ::proto::game::tagPreGangs* mutable_xy_pregang(int index);
  inline ::proto::game::tagPreGangs* add_xy_pregang();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs >&
      xy_pregang() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs >*
      mutable_xy_pregang();

  // optional bool XianNingLaiZi = 8;
  inline bool has_xianninglaizi() const;
  inline void clear_xianninglaizi();
  static const int kXianNingLaiZiFieldNumber = 8;
  inline bool xianninglaizi() const;
  inline void set_xianninglaizi(bool value);

  // @@protoc_insertion_point(class_scope:proto.game.AckUserOutCard)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_usercard();
  inline void clear_has_usercard();
  inline void set_has_da_type();
  inline void clear_has_da_type();
  inline void set_has_xianninglaizi();
  inline void clear_has_xianninglaizi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 card_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagShowOutCard > showcard_;
  ::proto::game::HandCards* usercard_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo > listeninfo_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs > xy_pregang_;
  ::google::protobuf::int32 da_type_;
  bool xianninglaizi_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUserOutCard* default_instance_;
};
// -------------------------------------------------------------------

class AckUserOutCardErr : public ::google::protobuf::Message {
 public:
  AckUserOutCardErr();
  virtual ~AckUserOutCardErr();

  AckUserOutCardErr(const AckUserOutCardErr& from);

  inline AckUserOutCardErr& operator=(const AckUserOutCardErr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUserOutCardErr& default_instance();

  void Swap(AckUserOutCardErr* other);

  // implements Message ----------------------------------------------

  AckUserOutCardErr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUserOutCardErr& from);
  void MergeFrom(const AckUserOutCardErr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 card = 1;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 1;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // optional int32 code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // repeated int32 usercard = 4;
  inline int usercard_size() const;
  inline void clear_usercard();
  static const int kUsercardFieldNumber = 4;
  inline ::google::protobuf::int32 usercard(int index) const;
  inline void set_usercard(int index, ::google::protobuf::int32 value);
  inline void add_usercard(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      usercard() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_usercard();

  // repeated int32 outcards = 5;
  inline int outcards_size() const;
  inline void clear_outcards();
  static const int kOutcardsFieldNumber = 5;
  inline ::google::protobuf::int32 outcards(int index) const;
  inline void set_outcards(int index, ::google::protobuf::int32 value);
  inline void add_outcards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      outcards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_outcards();

  // @@protoc_insertion_point(class_scope:proto.game.AckUserOutCardErr)
 private:
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 card_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > usercard_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > outcards_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUserOutCardErr* default_instance_;
};
// -------------------------------------------------------------------

class DaAnTing : public ::google::protobuf::Message {
 public:
  DaAnTing();
  virtual ~DaAnTing();

  DaAnTing(const DaAnTing& from);

  inline DaAnTing& operator=(const DaAnTing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DaAnTing& default_instance();

  void Swap(DaAnTing* other);

  // implements Message ----------------------------------------------

  DaAnTing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DaAnTing& from);
  void MergeFrom(const DaAnTing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // optional int32 TingType = 2;
  inline bool has_tingtype() const;
  inline void clear_tingtype();
  static const int kTingTypeFieldNumber = 2;
  inline ::google::protobuf::int32 tingtype() const;
  inline void set_tingtype(::google::protobuf::int32 value);

  // repeated int32 TingCards = 3;
  inline int tingcards_size() const;
  inline void clear_tingcards();
  static const int kTingCardsFieldNumber = 3;
  inline ::google::protobuf::int32 tingcards(int index) const;
  inline void set_tingcards(int index, ::google::protobuf::int32 value);
  inline void add_tingcards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      tingcards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_tingcards();

  // repeated int32 ShowCards = 4;
  inline int showcards_size() const;
  inline void clear_showcards();
  static const int kShowCardsFieldNumber = 4;
  inline ::google::protobuf::int32 showcards(int index) const;
  inline void set_showcards(int index, ::google::protobuf::int32 value);
  inline void add_showcards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      showcards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_showcards();

  // @@protoc_insertion_point(class_scope:proto.game.DaAnTing)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_tingtype();
  inline void clear_has_tingtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 tingtype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > tingcards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > showcards_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static DaAnTing* default_instance_;
};
// -------------------------------------------------------------------

class AckOpNotify : public ::google::protobuf::Message {
 public:
  AckOpNotify();
  virtual ~AckOpNotify();

  AckOpNotify(const AckOpNotify& from);

  inline AckOpNotify& operator=(const AckOpNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckOpNotify& default_instance();

  void Swap(AckOpNotify* other);

  // implements Message ----------------------------------------------

  AckOpNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckOpNotify& from);
  void MergeFrom(const AckOpNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 OpType = 2;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOpTypeFieldNumber = 2;
  inline ::google::protobuf::int32 optype() const;
  inline void set_optype(::google::protobuf::int32 value);

  // optional int32 Card = 3;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 3;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // repeated .proto.game.tagGangInfo Gang = 4;
  inline int gang_size() const;
  inline void clear_gang();
  static const int kGangFieldNumber = 4;
  inline const ::proto::game::tagGangInfo& gang(int index) const;
  inline ::proto::game::tagGangInfo* mutable_gang(int index);
  inline ::proto::game::tagGangInfo* add_gang();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >&
      gang() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >*
      mutable_gang();

  // optional int32 OpType2 = 5;
  inline bool has_optype2() const;
  inline void clear_optype2();
  static const int kOpType2FieldNumber = 5;
  inline ::google::protobuf::int32 optype2() const;
  inline void set_optype2(::google::protobuf::int32 value);

  // repeated .proto.game.tagPreGangs xy_pregang = 6;
  inline int xy_pregang_size() const;
  inline void clear_xy_pregang();
  static const int kXyPregangFieldNumber = 6;
  inline const ::proto::game::tagPreGangs& xy_pregang(int index) const;
  inline ::proto::game::tagPreGangs* mutable_xy_pregang(int index);
  inline ::proto::game::tagPreGangs* add_xy_pregang();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs >&
      xy_pregang() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs >*
      mutable_xy_pregang();

  // optional int32 LockLaizi = 7;
  inline bool has_locklaizi() const;
  inline void clear_locklaizi();
  static const int kLockLaiziFieldNumber = 7;
  inline ::google::protobuf::int32 locklaizi() const;
  inline void set_locklaizi(::google::protobuf::int32 value);

  // repeated .proto.game.tagListenInfo ListenInfo = 8;
  inline int listeninfo_size() const;
  inline void clear_listeninfo();
  static const int kListenInfoFieldNumber = 8;
  inline const ::proto::game::tagListenInfo& listeninfo(int index) const;
  inline ::proto::game::tagListenInfo* mutable_listeninfo(int index);
  inline ::proto::game::tagListenInfo* add_listeninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
      listeninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
      mutable_listeninfo();

  // optional int32 operateid = 9;
  inline bool has_operateid() const;
  inline void clear_operateid();
  static const int kOperateidFieldNumber = 9;
  inline ::google::protobuf::int32 operateid() const;
  inline void set_operateid(::google::protobuf::int32 value);

  // repeated .proto.game.Cards OpCardsInfo = 10;
  inline int opcardsinfo_size() const;
  inline void clear_opcardsinfo();
  static const int kOpCardsInfoFieldNumber = 10;
  inline const ::proto::game::Cards& opcardsinfo(int index) const;
  inline ::proto::game::Cards* mutable_opcardsinfo(int index);
  inline ::proto::game::Cards* add_opcardsinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::Cards >&
      opcardsinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::Cards >*
      mutable_opcardsinfo();

  // repeated int32 cards = 11;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 11;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // repeated int32 bAnHuGang = 12;
  inline int banhugang_size() const;
  inline void clear_banhugang();
  static const int kBAnHuGangFieldNumber = 12;
  inline ::google::protobuf::int32 banhugang(int index) const;
  inline void set_banhugang(int index, ::google::protobuf::int32 value);
  inline void add_banhugang(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      banhugang() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_banhugang();

  // repeated .proto.game.CardArr cardList = 13;
  inline int cardlist_size() const;
  inline void clear_cardlist();
  static const int kCardListFieldNumber = 13;
  inline const ::proto::game::CardArr& cardlist(int index) const;
  inline ::proto::game::CardArr* mutable_cardlist(int index);
  inline ::proto::game::CardArr* add_cardlist();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::CardArr >&
      cardlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::CardArr >*
      mutable_cardlist();

  // repeated .proto.game.DaAnTing daan_ting = 20;
  inline int daan_ting_size() const;
  inline void clear_daan_ting();
  static const int kDaanTingFieldNumber = 20;
  inline const ::proto::game::DaAnTing& daan_ting(int index) const;
  inline ::proto::game::DaAnTing* mutable_daan_ting(int index);
  inline ::proto::game::DaAnTing* add_daan_ting();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::DaAnTing >&
      daan_ting() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::DaAnTing >*
      mutable_daan_ting();

  // @@protoc_insertion_point(class_scope:proto.game.AckOpNotify)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_optype();
  inline void clear_has_optype();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_optype2();
  inline void clear_has_optype2();
  inline void set_has_locklaizi();
  inline void clear_has_locklaizi();
  inline void set_has_operateid();
  inline void clear_has_operateid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 optype_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo > gang_;
  ::google::protobuf::int32 card_;
  ::google::protobuf::int32 optype2_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs > xy_pregang_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo > listeninfo_;
  ::google::protobuf::int32 locklaizi_;
  ::google::protobuf::int32 operateid_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::Cards > opcardsinfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > banhugang_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::CardArr > cardlist_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::DaAnTing > daan_ting_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckOpNotify* default_instance_;
};
// -------------------------------------------------------------------

class AckBcOpResult : public ::google::protobuf::Message {
 public:
  AckBcOpResult();
  virtual ~AckBcOpResult();

  AckBcOpResult(const AckBcOpResult& from);

  inline AckBcOpResult& operator=(const AckBcOpResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckBcOpResult& default_instance();

  void Swap(AckBcOpResult* other);

  // implements Message ----------------------------------------------

  AckBcOpResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckBcOpResult& from);
  void MergeFrom(const AckBcOpResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 OutCardChairID = 2;
  inline bool has_outcardchairid() const;
  inline void clear_outcardchairid();
  static const int kOutCardChairIDFieldNumber = 2;
  inline ::google::protobuf::int32 outcardchairid() const;
  inline void set_outcardchairid(::google::protobuf::int32 value);

  // optional int32 OpType = 3;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOpTypeFieldNumber = 3;
  inline ::google::protobuf::int32 optype() const;
  inline void set_optype(::google::protobuf::int32 value);

  // optional int32 Card = 4;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 4;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // repeated int32 Score = 5;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int32 score(int index) const;
  inline void set_score(int index, ::google::protobuf::int32 value);
  inline void add_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_score();

  // optional int32 IsQiangganghu = 6;
  inline bool has_isqiangganghu() const;
  inline void clear_isqiangganghu();
  static const int kIsQiangganghuFieldNumber = 6;
  inline ::google::protobuf::int32 isqiangganghu() const;
  inline void set_isqiangganghu(::google::protobuf::int32 value);

  // optional int32 OpType2 = 7;
  inline bool has_optype2() const;
  inline void clear_optype2();
  static const int kOpType2FieldNumber = 7;
  inline ::google::protobuf::int32 optype2() const;
  inline void set_optype2(::google::protobuf::int32 value);

  // optional int32 fz_hu_type = 8;
  inline bool has_fz_hu_type() const;
  inline void clear_fz_hu_type();
  static const int kFzHuTypeFieldNumber = 8;
  inline ::google::protobuf::int32 fz_hu_type() const;
  inline void set_fz_hu_type(::google::protobuf::int32 value);

  // repeated .proto.game.tagListenInfo ListenInfo = 9;
  inline int listeninfo_size() const;
  inline void clear_listeninfo();
  static const int kListenInfoFieldNumber = 9;
  inline const ::proto::game::tagListenInfo& listeninfo(int index) const;
  inline ::proto::game::tagListenInfo* mutable_listeninfo(int index);
  inline ::proto::game::tagListenInfo* add_listeninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
      listeninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
      mutable_listeninfo();

  // repeated int32 ChiNoOutCards = 10;
  inline int chinooutcards_size() const;
  inline void clear_chinooutcards();
  static const int kChiNoOutCardsFieldNumber = 10;
  inline ::google::protobuf::int32 chinooutcards(int index) const;
  inline void set_chinooutcards(int index, ::google::protobuf::int32 value);
  inline void add_chinooutcards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      chinooutcards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_chinooutcards();

  // repeated int32 OpCards = 11;
  inline int opcards_size() const;
  inline void clear_opcards();
  static const int kOpCardsFieldNumber = 11;
  inline ::google::protobuf::int32 opcards(int index) const;
  inline void set_opcards(int index, ::google::protobuf::int32 value);
  inline void add_opcards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      opcards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_opcards();

  // repeated int32 cardDel = 12;
  inline int carddel_size() const;
  inline void clear_carddel();
  static const int kCardDelFieldNumber = 12;
  inline ::google::protobuf::int32 carddel(int index) const;
  inline void set_carddel(int index, ::google::protobuf::int32 value);
  inline void add_carddel(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      carddel() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_carddel();

  // optional .proto.game.FixedCardChange fixedcardchange = 13;
  inline bool has_fixedcardchange() const;
  inline void clear_fixedcardchange();
  static const int kFixedcardchangeFieldNumber = 13;
  inline const ::proto::game::FixedCardChange& fixedcardchange() const;
  inline ::proto::game::FixedCardChange* mutable_fixedcardchange();
  inline ::proto::game::FixedCardChange* release_fixedcardchange();
  inline void set_allocated_fixedcardchange(::proto::game::FixedCardChange* fixedcardchange);

  // optional int32 passhu = 14;
  inline bool has_passhu() const;
  inline void clear_passhu();
  static const int kPasshuFieldNumber = 14;
  inline ::google::protobuf::int32 passhu() const;
  inline void set_passhu(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckBcOpResult)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_outcardchairid();
  inline void clear_has_outcardchairid();
  inline void set_has_optype();
  inline void clear_has_optype();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_isqiangganghu();
  inline void clear_has_isqiangganghu();
  inline void set_has_optype2();
  inline void clear_has_optype2();
  inline void set_has_fz_hu_type();
  inline void clear_has_fz_hu_type();
  inline void set_has_fixedcardchange();
  inline void clear_has_fixedcardchange();
  inline void set_has_passhu();
  inline void clear_has_passhu();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 outcardchairid_;
  ::google::protobuf::int32 optype_;
  ::google::protobuf::int32 card_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > score_;
  ::google::protobuf::int32 isqiangganghu_;
  ::google::protobuf::int32 optype2_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo > listeninfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > chinooutcards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > opcards_;
  ::google::protobuf::int32 fz_hu_type_;
  ::google::protobuf::int32 passhu_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > carddel_;
  ::proto::game::FixedCardChange* fixedcardchange_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckBcOpResult* default_instance_;
};
// -------------------------------------------------------------------

class AckListenNotify : public ::google::protobuf::Message {
 public:
  AckListenNotify();
  virtual ~AckListenNotify();

  AckListenNotify(const AckListenNotify& from);

  inline AckListenNotify& operator=(const AckListenNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckListenNotify& default_instance();

  void Swap(AckListenNotify* other);

  // implements Message ----------------------------------------------

  AckListenNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckListenNotify& from);
  void MergeFrom(const AckListenNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 OpType = 1;
  inline bool has_optype() const;
  inline void clear_optype();
  static const int kOpTypeFieldNumber = 1;
  inline ::google::protobuf::int32 optype() const;
  inline void set_optype(::google::protobuf::int32 value);

  // repeated .proto.game.tagListenInfo ListenInfo = 2;
  inline int listeninfo_size() const;
  inline void clear_listeninfo();
  static const int kListenInfoFieldNumber = 2;
  inline const ::proto::game::tagListenInfo& listeninfo(int index) const;
  inline ::proto::game::tagListenInfo* mutable_listeninfo(int index);
  inline ::proto::game::tagListenInfo* add_listeninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
      listeninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
      mutable_listeninfo();

  // repeated .proto.game.tagListenInfo ListenInfo1 = 3;
  inline int listeninfo1_size() const;
  inline void clear_listeninfo1();
  static const int kListenInfo1FieldNumber = 3;
  inline const ::proto::game::tagListenInfo& listeninfo1(int index) const;
  inline ::proto::game::tagListenInfo* mutable_listeninfo1(int index);
  inline ::proto::game::tagListenInfo* add_listeninfo1();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
      listeninfo1() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
      mutable_listeninfo1();

  // repeated int32 cards = 4;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 4;
  inline ::google::protobuf::int32 cards(int index) const;
  inline void set_cards(int index, ::google::protobuf::int32 value);
  inline void add_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cards();

  // @@protoc_insertion_point(class_scope:proto.game.AckListenNotify)
 private:
  inline void set_has_optype();
  inline void clear_has_optype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo > listeninfo_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo > listeninfo1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cards_;
  ::google::protobuf::int32 optype_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckListenNotify* default_instance_;
};
// -------------------------------------------------------------------

class AckUserHu : public ::google::protobuf::Message {
 public:
  AckUserHu();
  virtual ~AckUserHu();

  AckUserHu(const AckUserHu& from);

  inline AckUserHu& operator=(const AckUserHu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUserHu& default_instance();

  void Swap(AckUserHu* other);

  // implements Message ----------------------------------------------

  AckUserHu* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUserHu& from);
  void MergeFrom(const AckUserHu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 HuChairID = 1;
  inline bool has_huchairid() const;
  inline void clear_huchairid();
  static const int kHuChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 huchairid() const;
  inline void set_huchairid(::google::protobuf::int32 value);

  // optional int32 PasHuChairID = 2;
  inline bool has_pashuchairid() const;
  inline void clear_pashuchairid();
  static const int kPasHuChairIDFieldNumber = 2;
  inline ::google::protobuf::int32 pashuchairid() const;
  inline void set_pashuchairid(::google::protobuf::int32 value);

  // repeated int32 Score = 3;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::int32 score(int index) const;
  inline void set_score(int index, ::google::protobuf::int32 value);
  inline void add_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_score();

  // repeated int32 fan = 4;
  inline int fan_size() const;
  inline void clear_fan();
  static const int kFanFieldNumber = 4;
  inline ::google::protobuf::int32 fan(int index) const;
  inline void set_fan(int index, ::google::protobuf::int32 value);
  inline void add_fan(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fan() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fan();

  // @@protoc_insertion_point(class_scope:proto.game.AckUserHu)
 private:
  inline void set_has_huchairid();
  inline void clear_has_huchairid();
  inline void set_has_pashuchairid();
  inline void clear_has_pashuchairid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 huchairid_;
  ::google::protobuf::int32 pashuchairid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fan_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUserHu* default_instance_;
};
// -------------------------------------------------------------------

class tagEndGang : public ::google::protobuf::Message {
 public:
  tagEndGang();
  virtual ~tagEndGang();

  tagEndGang(const tagEndGang& from);

  inline tagEndGang& operator=(const tagEndGang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagEndGang& default_instance();

  void Swap(tagEndGang* other);

  // implements Message ----------------------------------------------

  tagEndGang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagEndGang& from);
  void MergeFrom(const tagEndGang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 GangType = 1;
  inline bool has_gangtype() const;
  inline void clear_gangtype();
  static const int kGangTypeFieldNumber = 1;
  inline ::google::protobuf::int32 gangtype() const;
  inline void set_gangtype(::google::protobuf::int32 value);

  // optional int32 GangCard = 2;
  inline bool has_gangcard() const;
  inline void clear_gangcard();
  static const int kGangCardFieldNumber = 2;
  inline ::google::protobuf::int32 gangcard() const;
  inline void set_gangcard(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.tagEndGang)
 private:
  inline void set_has_gangtype();
  inline void clear_has_gangtype();
  inline void set_has_gangcard();
  inline void clear_has_gangcard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 gangtype_;
  ::google::protobuf::int32 gangcard_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagEndGang* default_instance_;
};
// -------------------------------------------------------------------

class tagEndGangInfo : public ::google::protobuf::Message {
 public:
  tagEndGangInfo();
  virtual ~tagEndGangInfo();

  tagEndGangInfo(const tagEndGangInfo& from);

  inline tagEndGangInfo& operator=(const tagEndGangInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagEndGangInfo& default_instance();

  void Swap(tagEndGangInfo* other);

  // implements Message ----------------------------------------------

  tagEndGangInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagEndGangInfo& from);
  void MergeFrom(const tagEndGangInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.tagEndGang Gang = 1;
  inline int gang_size() const;
  inline void clear_gang();
  static const int kGangFieldNumber = 1;
  inline const ::proto::game::tagEndGang& gang(int index) const;
  inline ::proto::game::tagEndGang* mutable_gang(int index);
  inline ::proto::game::tagEndGang* add_gang();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagEndGang >&
      gang() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagEndGang >*
      mutable_gang();

  // optional int32 TotalGangScore = 2;
  inline bool has_totalgangscore() const;
  inline void clear_totalgangscore();
  static const int kTotalGangScoreFieldNumber = 2;
  inline ::google::protobuf::int32 totalgangscore() const;
  inline void set_totalgangscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.tagEndGangInfo)
 private:
  inline void set_has_totalgangscore();
  inline void clear_has_totalgangscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagEndGang > gang_;
  ::google::protobuf::int32 totalgangscore_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagEndGangInfo* default_instance_;
};
// -------------------------------------------------------------------

class AddFanInfo : public ::google::protobuf::Message {
 public:
  AddFanInfo();
  virtual ~AddFanInfo();

  AddFanInfo(const AddFanInfo& from);

  inline AddFanInfo& operator=(const AddFanInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFanInfo& default_instance();

  void Swap(AddFanInfo* other);

  // implements Message ----------------------------------------------

  AddFanInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddFanInfo& from);
  void MergeFrom(const AddFanInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 AddType = 1;
  inline bool has_addtype() const;
  inline void clear_addtype();
  static const int kAddTypeFieldNumber = 1;
  inline ::google::protobuf::int32 addtype() const;
  inline void set_addtype(::google::protobuf::int32 value);

  // optional int32 AddNum = 2;
  inline bool has_addnum() const;
  inline void clear_addnum();
  static const int kAddNumFieldNumber = 2;
  inline ::google::protobuf::int32 addnum() const;
  inline void set_addnum(::google::protobuf::int32 value);

  // optional int32 AddType2 = 3;
  inline bool has_addtype2() const;
  inline void clear_addtype2();
  static const int kAddType2FieldNumber = 3;
  inline ::google::protobuf::int32 addtype2() const;
  inline void set_addtype2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AddFanInfo)
 private:
  inline void set_has_addtype();
  inline void clear_has_addtype();
  inline void set_has_addnum();
  inline void clear_has_addnum();
  inline void set_has_addtype2();
  inline void clear_has_addtype2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 addtype_;
  ::google::protobuf::int32 addnum_;
  ::google::protobuf::int32 addtype2_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AddFanInfo* default_instance_;
};
// -------------------------------------------------------------------

class FanInfo : public ::google::protobuf::Message {
 public:
  FanInfo();
  virtual ~FanInfo();

  FanInfo(const FanInfo& from);

  inline FanInfo& operator=(const FanInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FanInfo& default_instance();

  void Swap(FanInfo* other);

  // implements Message ----------------------------------------------

  FanInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FanInfo& from);
  void MergeFrom(const FanInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chairid = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // required int32 SpecialType = 2;
  inline bool has_specialtype() const;
  inline void clear_specialtype();
  static const int kSpecialTypeFieldNumber = 2;
  inline ::google::protobuf::int32 specialtype() const;
  inline void set_specialtype(::google::protobuf::int32 value);

  // required int32 FanNum = 3;
  inline bool has_fannum() const;
  inline void clear_fannum();
  static const int kFanNumFieldNumber = 3;
  inline ::google::protobuf::int32 fannum() const;
  inline void set_fannum(::google::protobuf::int32 value);

  // repeated .proto.game.AddFanInfo addfan = 4;
  inline int addfan_size() const;
  inline void clear_addfan();
  static const int kAddfanFieldNumber = 4;
  inline const ::proto::game::AddFanInfo& addfan(int index) const;
  inline ::proto::game::AddFanInfo* mutable_addfan(int index);
  inline ::proto::game::AddFanInfo* add_addfan();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::AddFanInfo >&
      addfan() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::AddFanInfo >*
      mutable_addfan();

  // optional int32 hucard = 5;
  inline bool has_hucard() const;
  inline void clear_hucard();
  static const int kHucardFieldNumber = 5;
  inline ::google::protobuf::int32 hucard() const;
  inline void set_hucard(::google::protobuf::int32 value);

  // repeated int32 DianPao = 6;
  inline int dianpao_size() const;
  inline void clear_dianpao();
  static const int kDianPaoFieldNumber = 6;
  inline ::google::protobuf::int32 dianpao(int index) const;
  inline void set_dianpao(int index, ::google::protobuf::int32 value);
  inline void add_dianpao(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dianpao() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dianpao();

  // @@protoc_insertion_point(class_scope:proto.game.FanInfo)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_specialtype();
  inline void clear_has_specialtype();
  inline void set_has_fannum();
  inline void clear_has_fannum();
  inline void set_has_hucard();
  inline void clear_has_hucard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 specialtype_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::AddFanInfo > addfan_;
  ::google::protobuf::int32 fannum_;
  ::google::protobuf::int32 hucard_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dianpao_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static FanInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckGameEnd : public ::google::protobuf::Message {
 public:
  AckGameEnd();
  virtual ~AckGameEnd();

  AckGameEnd(const AckGameEnd& from);

  inline AckGameEnd& operator=(const AckGameEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGameEnd& default_instance();

  void Swap(AckGameEnd* other);

  // implements Message ----------------------------------------------

  AckGameEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGameEnd& from);
  void MergeFrom(const AckGameEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.HandCards UserCard = 1;
  inline int usercard_size() const;
  inline void clear_usercard();
  static const int kUserCardFieldNumber = 1;
  inline const ::proto::game::HandCards& usercard(int index) const;
  inline ::proto::game::HandCards* mutable_usercard(int index);
  inline ::proto::game::HandCards* add_usercard();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >&
      usercard() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >*
      mutable_usercard();

  // repeated int32 Score = 2;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int32 score(int index) const;
  inline void set_score(int index, ::google::protobuf::int32 value);
  inline void add_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_score();

  // optional int32 EndState = 3;
  inline bool has_endstate() const;
  inline void clear_endstate();
  static const int kEndStateFieldNumber = 3;
  inline ::google::protobuf::int32 endstate() const;
  inline void set_endstate(::google::protobuf::int32 value);

  // repeated .proto.game.tagEndGangInfo EndGangInfo = 4;
  inline int endganginfo_size() const;
  inline void clear_endganginfo();
  static const int kEndGangInfoFieldNumber = 4;
  inline const ::proto::game::tagEndGangInfo& endganginfo(int index) const;
  inline ::proto::game::tagEndGangInfo* mutable_endganginfo(int index);
  inline ::proto::game::tagEndGangInfo* add_endganginfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagEndGangInfo >&
      endganginfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagEndGangInfo >*
      mutable_endganginfo();

  // repeated .proto.game.FanInfo faninfo = 5;
  inline int faninfo_size() const;
  inline void clear_faninfo();
  static const int kFaninfoFieldNumber = 5;
  inline const ::proto::game::FanInfo& faninfo(int index) const;
  inline ::proto::game::FanInfo* mutable_faninfo(int index);
  inline ::proto::game::FanInfo* add_faninfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::FanInfo >&
      faninfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::FanInfo >*
      mutable_faninfo();

  // repeated int32 money = 6;
  inline int money_size() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 6;
  inline ::google::protobuf::int32 money(int index) const;
  inline void set_money(int index, ::google::protobuf::int32 value);
  inline void add_money(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      money() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_money();

  // optional int32 ts = 7;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 7;
  inline ::google::protobuf::int32 ts() const;
  inline void set_ts(::google::protobuf::int32 value);

  // repeated string md5 = 8;
  inline int md5_size() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 8;
  inline const ::std::string& md5(int index) const;
  inline ::std::string* mutable_md5(int index);
  inline void set_md5(int index, const ::std::string& value);
  inline void set_md5(int index, const char* value);
  inline void set_md5(int index, const char* value, size_t size);
  inline ::std::string* add_md5();
  inline void add_md5(const ::std::string& value);
  inline void add_md5(const char* value);
  inline void add_md5(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& md5() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_md5();

  // @@protoc_insertion_point(class_scope:proto.game.AckGameEnd)
 private:
  inline void set_has_endstate();
  inline void clear_has_endstate();
  inline void set_has_ts();
  inline void clear_has_ts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards > usercard_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > score_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagEndGangInfo > endganginfo_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::FanInfo > faninfo_;
  ::google::protobuf::int32 endstate_;
  ::google::protobuf::int32 ts_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > money_;
  ::google::protobuf::RepeatedPtrField< ::std::string> md5_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckGameEnd* default_instance_;
};
// -------------------------------------------------------------------

class AckIsAuto : public ::google::protobuf::Message {
 public:
  AckIsAuto();
  virtual ~AckIsAuto();

  AckIsAuto(const AckIsAuto& from);

  inline AckIsAuto& operator=(const AckIsAuto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckIsAuto& default_instance();

  void Swap(AckIsAuto* other);

  // implements Message ----------------------------------------------

  AckIsAuto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckIsAuto& from);
  void MergeFrom(const AckIsAuto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 isAuto = 2;
  inline bool has_isauto() const;
  inline void clear_isauto();
  static const int kIsAutoFieldNumber = 2;
  inline ::google::protobuf::int32 isauto() const;
  inline void set_isauto(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckIsAuto)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_isauto();
  inline void clear_has_isauto();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 isauto_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckIsAuto* default_instance_;
};
// -------------------------------------------------------------------

class AckUpdateUserInfo : public ::google::protobuf::Message {
 public:
  AckUpdateUserInfo();
  virtual ~AckUpdateUserInfo();

  AckUpdateUserInfo(const AckUpdateUserInfo& from);

  inline AckUpdateUserInfo& operator=(const AckUpdateUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUpdateUserInfo& default_instance();

  void Swap(AckUpdateUserInfo* other);

  // implements Message ----------------------------------------------

  AckUpdateUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUpdateUserInfo& from);
  void MergeFrom(const AckUpdateUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chairid = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // optional int32 rmb = 4;
  inline bool has_rmb() const;
  inline void clear_rmb();
  static const int kRmbFieldNumber = 4;
  inline ::google::protobuf::int32 rmb() const;
  inline void set_rmb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckUpdateUserInfo)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_rmb();
  inline void clear_has_rmb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 rmb_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUpdateUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckGameStartFail : public ::google::protobuf::Message {
 public:
  AckGameStartFail();
  virtual ~AckGameStartFail();

  AckGameStartFail(const AckGameStartFail& from);

  inline AckGameStartFail& operator=(const AckGameStartFail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGameStartFail& default_instance();

  void Swap(AckGameStartFail* other);

  // implements Message ----------------------------------------------

  AckGameStartFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGameStartFail& from);
  void MergeFrom(const AckGameStartFail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 vid = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVidFieldNumber = 1;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);

  // optional string roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline const ::std::string& roomid() const;
  inline void set_roomid(const ::std::string& value);
  inline void set_roomid(const char* value);
  inline void set_roomid(const char* value, size_t size);
  inline ::std::string* mutable_roomid();
  inline ::std::string* release_roomid();
  inline void set_allocated_roomid(::std::string* roomid);

  // optional int32 can_start = 3;
  inline bool has_can_start() const;
  inline void clear_can_start();
  static const int kCanStartFieldNumber = 3;
  inline ::google::protobuf::int32 can_start() const;
  inline void set_can_start(::google::protobuf::int32 value);

  // optional int32 code = 4;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 4;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional int32 ts = 5;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 5;
  inline ::google::protobuf::int32 ts() const;
  inline void set_ts(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckGameStartFail)
 private:
  inline void set_has_vid();
  inline void clear_has_vid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_can_start();
  inline void clear_has_can_start();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_ts();
  inline void clear_has_ts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* roomid_;
  ::google::protobuf::int32 vid_;
  ::google::protobuf::int32 can_start_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 ts_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckGameStartFail* default_instance_;
};
// -------------------------------------------------------------------

class AckUpdateTimer : public ::google::protobuf::Message {
 public:
  AckUpdateTimer();
  virtual ~AckUpdateTimer();

  AckUpdateTimer(const AckUpdateTimer& from);

  inline AckUpdateTimer& operator=(const AckUpdateTimer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUpdateTimer& default_instance();

  void Swap(AckUpdateTimer* other);

  // implements Message ----------------------------------------------

  AckUpdateTimer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUpdateTimer& from);
  void MergeFrom(const AckUpdateTimer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 lefttime = 2;
  inline bool has_lefttime() const;
  inline void clear_lefttime();
  static const int kLefttimeFieldNumber = 2;
  inline ::google::protobuf::int32 lefttime() const;
  inline void set_lefttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckUpdateTimer)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_lefttime();
  inline void clear_has_lefttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 lefttime_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUpdateTimer* default_instance_;
};
// -------------------------------------------------------------------

class AckDisbandChooseFaild : public ::google::protobuf::Message {
 public:
  AckDisbandChooseFaild();
  virtual ~AckDisbandChooseFaild();

  AckDisbandChooseFaild(const AckDisbandChooseFaild& from);

  inline AckDisbandChooseFaild& operator=(const AckDisbandChooseFaild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckDisbandChooseFaild& default_instance();

  void Swap(AckDisbandChooseFaild* other);

  // implements Message ----------------------------------------------

  AckDisbandChooseFaild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckDisbandChooseFaild& from);
  void MergeFrom(const AckDisbandChooseFaild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chairid = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckDisbandChooseFaild)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 code_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckDisbandChooseFaild* default_instance_;
};
// -------------------------------------------------------------------

class AckDisbandApply : public ::google::protobuf::Message {
 public:
  AckDisbandApply();
  virtual ~AckDisbandApply();

  AckDisbandApply(const AckDisbandApply& from);

  inline AckDisbandApply& operator=(const AckDisbandApply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckDisbandApply& default_instance();

  void Swap(AckDisbandApply* other);

  // implements Message ----------------------------------------------

  AckDisbandApply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckDisbandApply& from);
  void MergeFrom(const AckDisbandApply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ApplyChairid = 1;
  inline bool has_applychairid() const;
  inline void clear_applychairid();
  static const int kApplyChairidFieldNumber = 1;
  inline ::google::protobuf::int32 applychairid() const;
  inline void set_applychairid(::google::protobuf::int32 value);

  // optional int32 Waittime = 2;
  inline bool has_waittime() const;
  inline void clear_waittime();
  static const int kWaittimeFieldNumber = 2;
  inline ::google::protobuf::int32 waittime() const;
  inline void set_waittime(::google::protobuf::int32 value);

  // repeated int32 onlinechairid = 3;
  inline int onlinechairid_size() const;
  inline void clear_onlinechairid();
  static const int kOnlinechairidFieldNumber = 3;
  inline ::google::protobuf::int32 onlinechairid(int index) const;
  inline void set_onlinechairid(int index, ::google::protobuf::int32 value);
  inline void add_onlinechairid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      onlinechairid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_onlinechairid();

  // optional int32 totaltime = 4;
  inline bool has_totaltime() const;
  inline void clear_totaltime();
  static const int kTotaltimeFieldNumber = 4;
  inline ::google::protobuf::int32 totaltime() const;
  inline void set_totaltime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckDisbandApply)
 private:
  inline void set_has_applychairid();
  inline void clear_has_applychairid();
  inline void set_has_waittime();
  inline void clear_has_waittime();
  inline void set_has_totaltime();
  inline void clear_has_totaltime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 applychairid_;
  ::google::protobuf::int32 waittime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > onlinechairid_;
  ::google::protobuf::int32 totaltime_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckDisbandApply* default_instance_;
};
// -------------------------------------------------------------------

class AckDisbandChooseBc : public ::google::protobuf::Message {
 public:
  AckDisbandChooseBc();
  virtual ~AckDisbandChooseBc();

  AckDisbandChooseBc(const AckDisbandChooseBc& from);

  inline AckDisbandChooseBc& operator=(const AckDisbandChooseBc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckDisbandChooseBc& default_instance();

  void Swap(AckDisbandChooseBc* other);

  // implements Message ----------------------------------------------

  AckDisbandChooseBc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckDisbandChooseBc& from);
  void MergeFrom(const AckDisbandChooseBc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chairid = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 Choosestate = 2;
  inline bool has_choosestate() const;
  inline void clear_choosestate();
  static const int kChoosestateFieldNumber = 2;
  inline ::google::protobuf::int32 choosestate() const;
  inline void set_choosestate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckDisbandChooseBc)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_choosestate();
  inline void clear_has_choosestate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 choosestate_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckDisbandChooseBc* default_instance_;
};
// -------------------------------------------------------------------

class AckDisbandResult : public ::google::protobuf::Message {
 public:
  AckDisbandResult();
  virtual ~AckDisbandResult();

  AckDisbandResult(const AckDisbandResult& from);

  inline AckDisbandResult& operator=(const AckDisbandResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckDisbandResult& default_instance();

  void Swap(AckDisbandResult* other);

  // implements Message ----------------------------------------------

  AckDisbandResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckDisbandResult& from);
  void MergeFrom(const AckDisbandResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional string avatar = 3;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 3;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const char* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // optional string clubname = 4;
  inline bool has_clubname() const;
  inline void clear_clubname();
  static const int kClubnameFieldNumber = 4;
  inline const ::std::string& clubname() const;
  inline void set_clubname(const ::std::string& value);
  inline void set_clubname(const char* value);
  inline void set_clubname(const char* value, size_t size);
  inline ::std::string* mutable_clubname();
  inline ::std::string* release_clubname();
  inline void set_allocated_clubname(::std::string* clubname);

  // optional int32 clubcode = 5;
  inline bool has_clubcode() const;
  inline void clear_clubcode();
  static const int kClubcodeFieldNumber = 5;
  inline ::google::protobuf::int32 clubcode() const;
  inline void set_clubcode(::google::protobuf::int32 value);

  // optional int32 closetype = 6;
  inline bool has_closetype() const;
  inline void clear_closetype();
  static const int kClosetypeFieldNumber = 6;
  inline ::google::protobuf::int32 closetype() const;
  inline void set_closetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckDisbandResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_clubname();
  inline void clear_has_clubname();
  inline void set_has_clubcode();
  inline void clear_has_clubcode();
  inline void set_has_closetype();
  inline void clear_has_closetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 uid_;
  ::std::string* avatar_;
  ::std::string* clubname_;
  ::google::protobuf::int32 clubcode_;
  ::google::protobuf::int32 closetype_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckDisbandResult* default_instance_;
};
// -------------------------------------------------------------------

class AckUserOnlineState : public ::google::protobuf::Message {
 public:
  AckUserOnlineState();
  virtual ~AckUserOnlineState();

  AckUserOnlineState(const AckUserOnlineState& from);

  inline AckUserOnlineState& operator=(const AckUserOnlineState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUserOnlineState& default_instance();

  void Swap(AckUserOnlineState* other);

  // implements Message ----------------------------------------------

  AckUserOnlineState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUserOnlineState& from);
  void MergeFrom(const AckUserOnlineState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chairid = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckUserOnlineState)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 state_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUserOnlineState* default_instance_;
};
// -------------------------------------------------------------------

class AckUserOvertimeState : public ::google::protobuf::Message {
 public:
  AckUserOvertimeState();
  virtual ~AckUserOvertimeState();

  AckUserOvertimeState(const AckUserOvertimeState& from);

  inline AckUserOvertimeState& operator=(const AckUserOvertimeState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUserOvertimeState& default_instance();

  void Swap(AckUserOvertimeState* other);

  // implements Message ----------------------------------------------

  AckUserOvertimeState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUserOvertimeState& from);
  void MergeFrom(const AckUserOvertimeState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chairid = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckUserOvertimeState)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 state_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUserOvertimeState* default_instance_;
};
// -------------------------------------------------------------------

class AckMessage : public ::google::protobuf::Message {
 public:
  AckMessage();
  virtual ~AckMessage();

  AckMessage(const AckMessage& from);

  inline AckMessage& operator=(const AckMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckMessage& default_instance();

  void Swap(AckMessage* other);

  // implements Message ----------------------------------------------

  AckMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckMessage& from);
  void MergeFrom(const AckMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional int32 chairid = 2;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 2;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckMessage)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_chairid();
  inline void clear_has_chairid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  ::google::protobuf::int32 chairid_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckMessage* default_instance_;
};
// -------------------------------------------------------------------

class OperateWaite : public ::google::protobuf::Message {
 public:
  OperateWaite();
  virtual ~OperateWaite();

  OperateWaite(const OperateWaite& from);

  inline OperateWaite& operator=(const OperateWaite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperateWaite& default_instance();

  void Swap(OperateWaite* other);

  // implements Message ----------------------------------------------

  OperateWaite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperateWaite& from);
  void MergeFrom(const OperateWaite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.OperateWaite)
 private:
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 state_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static OperateWaite* default_instance_;
};
// -------------------------------------------------------------------

class ReordInfo : public ::google::protobuf::Message {
 public:
  ReordInfo();
  virtual ~ReordInfo();

  ReordInfo(const ReordInfo& from);

  inline ReordInfo& operator=(const ReordInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReordInfo& default_instance();

  void Swap(ReordInfo* other);

  // implements Message ----------------------------------------------

  ReordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReordInfo& from);
  void MergeFrom(const ReordInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 banker_num = 1;
  inline bool has_banker_num() const;
  inline void clear_banker_num();
  static const int kBankerNumFieldNumber = 1;
  inline ::google::protobuf::int32 banker_num() const;
  inline void set_banker_num(::google::protobuf::int32 value);

  // optional int32 hu_num = 2;
  inline bool has_hu_num() const;
  inline void clear_hu_num();
  static const int kHuNumFieldNumber = 2;
  inline ::google::protobuf::int32 hu_num() const;
  inline void set_hu_num(::google::protobuf::int32 value);

  // optional int32 piaolaizi_num = 3;
  inline bool has_piaolaizi_num() const;
  inline void clear_piaolaizi_num();
  static const int kPiaolaiziNumFieldNumber = 3;
  inline ::google::protobuf::int32 piaolaizi_num() const;
  inline void set_piaolaizi_num(::google::protobuf::int32 value);

  // optional int32 outtime_num = 4;
  inline bool has_outtime_num() const;
  inline void clear_outtime_num();
  static const int kOuttimeNumFieldNumber = 4;
  inline ::google::protobuf::int32 outtime_num() const;
  inline void set_outtime_num(::google::protobuf::int32 value);

  // optional int32 totalscore = 5;
  inline bool has_totalscore() const;
  inline void clear_totalscore();
  static const int kTotalscoreFieldNumber = 5;
  inline ::google::protobuf::int32 totalscore() const;
  inline void set_totalscore(::google::protobuf::int32 value);

  // optional int32 WinCounts = 6;
  inline bool has_wincounts() const;
  inline void clear_wincounts();
  static const int kWinCountsFieldNumber = 6;
  inline ::google::protobuf::int32 wincounts() const;
  inline void set_wincounts(::google::protobuf::int32 value);

  // optional int32 GangTimes = 7;
  inline bool has_gangtimes() const;
  inline void clear_gangtimes();
  static const int kGangTimesFieldNumber = 7;
  inline ::google::protobuf::int32 gangtimes() const;
  inline void set_gangtimes(::google::protobuf::int32 value);

  // optional int32 DianGangTimes = 8;
  inline bool has_diangangtimes() const;
  inline void clear_diangangtimes();
  static const int kDianGangTimesFieldNumber = 8;
  inline ::google::protobuf::int32 diangangtimes() const;
  inline void set_diangangtimes(::google::protobuf::int32 value);

  // optional int32 Ex1 = 9;
  inline bool has_ex1() const;
  inline void clear_ex1();
  static const int kEx1FieldNumber = 9;
  inline ::google::protobuf::int32 ex1() const;
  inline void set_ex1(::google::protobuf::int32 value);

  // optional int32 Ex2 = 10;
  inline bool has_ex2() const;
  inline void clear_ex2();
  static const int kEx2FieldNumber = 10;
  inline ::google::protobuf::int32 ex2() const;
  inline void set_ex2(::google::protobuf::int32 value);

  // optional int32 dissState = 11;
  inline bool has_dissstate() const;
  inline void clear_dissstate();
  static const int kDissStateFieldNumber = 11;
  inline ::google::protobuf::int32 dissstate() const;
  inline void set_dissstate(::google::protobuf::int32 value);

  // optional int32 MoBaoTimes = 12;
  inline bool has_mobaotimes() const;
  inline void clear_mobaotimes();
  static const int kMoBaoTimesFieldNumber = 12;
  inline ::google::protobuf::int32 mobaotimes() const;
  inline void set_mobaotimes(::google::protobuf::int32 value);

  // optional int32 Ex4 = 13;
  inline bool has_ex4() const;
  inline void clear_ex4();
  static const int kEx4FieldNumber = 13;
  inline ::google::protobuf::int32 ex4() const;
  inline void set_ex4(::google::protobuf::int32 value);

  // optional int32 Ex5 = 14;
  inline bool has_ex5() const;
  inline void clear_ex5();
  static const int kEx5FieldNumber = 14;
  inline ::google::protobuf::int32 ex5() const;
  inline void set_ex5(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.ReordInfo)
 private:
  inline void set_has_banker_num();
  inline void clear_has_banker_num();
  inline void set_has_hu_num();
  inline void clear_has_hu_num();
  inline void set_has_piaolaizi_num();
  inline void clear_has_piaolaizi_num();
  inline void set_has_outtime_num();
  inline void clear_has_outtime_num();
  inline void set_has_totalscore();
  inline void clear_has_totalscore();
  inline void set_has_wincounts();
  inline void clear_has_wincounts();
  inline void set_has_gangtimes();
  inline void clear_has_gangtimes();
  inline void set_has_diangangtimes();
  inline void clear_has_diangangtimes();
  inline void set_has_ex1();
  inline void clear_has_ex1();
  inline void set_has_ex2();
  inline void clear_has_ex2();
  inline void set_has_dissstate();
  inline void clear_has_dissstate();
  inline void set_has_mobaotimes();
  inline void clear_has_mobaotimes();
  inline void set_has_ex4();
  inline void clear_has_ex4();
  inline void set_has_ex5();
  inline void clear_has_ex5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 banker_num_;
  ::google::protobuf::int32 hu_num_;
  ::google::protobuf::int32 piaolaizi_num_;
  ::google::protobuf::int32 outtime_num_;
  ::google::protobuf::int32 totalscore_;
  ::google::protobuf::int32 wincounts_;
  ::google::protobuf::int32 gangtimes_;
  ::google::protobuf::int32 diangangtimes_;
  ::google::protobuf::int32 ex1_;
  ::google::protobuf::int32 ex2_;
  ::google::protobuf::int32 dissstate_;
  ::google::protobuf::int32 mobaotimes_;
  ::google::protobuf::int32 ex4_;
  ::google::protobuf::int32 ex5_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReordInfo* default_instance_;
};
// -------------------------------------------------------------------

class GameEndRecord : public ::google::protobuf::Message {
 public:
  GameEndRecord();
  virtual ~GameEndRecord();

  GameEndRecord(const GameEndRecord& from);

  inline GameEndRecord& operator=(const GameEndRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameEndRecord& default_instance();

  void Swap(GameEndRecord* other);

  // implements Message ----------------------------------------------

  GameEndRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameEndRecord& from);
  void MergeFrom(const GameEndRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.ReordInfo UserRecoreInfo = 1;
  inline int userrecoreinfo_size() const;
  inline void clear_userrecoreinfo();
  static const int kUserRecoreInfoFieldNumber = 1;
  inline const ::proto::game::ReordInfo& userrecoreinfo(int index) const;
  inline ::proto::game::ReordInfo* mutable_userrecoreinfo(int index);
  inline ::proto::game::ReordInfo* add_userrecoreinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::ReordInfo >&
      userrecoreinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::ReordInfo >*
      mutable_userrecoreinfo();

  // repeated int32 MostDianPaoUser = 2;
  inline int mostdianpaouser_size() const;
  inline void clear_mostdianpaouser();
  static const int kMostDianPaoUserFieldNumber = 2;
  inline ::google::protobuf::int32 mostdianpaouser(int index) const;
  inline void set_mostdianpaouser(int index, ::google::protobuf::int32 value);
  inline void add_mostdianpaouser(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mostdianpaouser() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mostdianpaouser();

  // repeated int32 MostWinScoreUser = 3;
  inline int mostwinscoreuser_size() const;
  inline void clear_mostwinscoreuser();
  static const int kMostWinScoreUserFieldNumber = 3;
  inline ::google::protobuf::int32 mostwinscoreuser(int index) const;
  inline void set_mostwinscoreuser(int index, ::google::protobuf::int32 value);
  inline void add_mostwinscoreuser(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mostwinscoreuser() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mostwinscoreuser();

  // optional int32 DataTime = 4;
  inline bool has_datatime() const;
  inline void clear_datatime();
  static const int kDataTimeFieldNumber = 4;
  inline ::google::protobuf::int32 datatime() const;
  inline void set_datatime(::google::protobuf::int32 value);

  // optional int32 autodiss = 5;
  inline bool has_autodiss() const;
  inline void clear_autodiss();
  static const int kAutodissFieldNumber = 5;
  inline ::google::protobuf::int32 autodiss() const;
  inline void set_autodiss(::google::protobuf::int32 value);

  // optional int32 StartTime = 6;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 6;
  inline ::google::protobuf::int32 starttime() const;
  inline void set_starttime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.GameEndRecord)
 private:
  inline void set_has_datatime();
  inline void clear_has_datatime();
  inline void set_has_autodiss();
  inline void clear_has_autodiss();
  inline void set_has_starttime();
  inline void clear_has_starttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::ReordInfo > userrecoreinfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mostdianpaouser_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mostwinscoreuser_;
  ::google::protobuf::int32 datatime_;
  ::google::protobuf::int32 autodiss_;
  ::google::protobuf::int32 starttime_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static GameEndRecord* default_instance_;
};
// -------------------------------------------------------------------

class RoundScore : public ::google::protobuf::Message {
 public:
  RoundScore();
  virtual ~RoundScore();

  RoundScore(const RoundScore& from);

  inline RoundScore& operator=(const RoundScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoundScore& default_instance();

  void Swap(RoundScore* other);

  // implements Message ----------------------------------------------

  RoundScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoundScore& from);
  void MergeFrom(const RoundScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 Score = 1;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int32 score(int index) const;
  inline void set_score(int index, ::google::protobuf::int32 value);
  inline void add_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_score();

  // @@protoc_insertion_point(class_scope:proto.game.RoundScore)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > score_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static RoundScore* default_instance_;
};
// -------------------------------------------------------------------

class TotalRoundScore : public ::google::protobuf::Message {
 public:
  TotalRoundScore();
  virtual ~TotalRoundScore();

  TotalRoundScore(const TotalRoundScore& from);

  inline TotalRoundScore& operator=(const TotalRoundScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TotalRoundScore& default_instance();

  void Swap(TotalRoundScore* other);

  // implements Message ----------------------------------------------

  TotalRoundScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TotalRoundScore& from);
  void MergeFrom(const TotalRoundScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.RoundScore round = 1;
  inline int round_size() const;
  inline void clear_round();
  static const int kRoundFieldNumber = 1;
  inline const ::proto::game::RoundScore& round(int index) const;
  inline ::proto::game::RoundScore* mutable_round(int index);
  inline ::proto::game::RoundScore* add_round();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::RoundScore >&
      round() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::RoundScore >*
      mutable_round();

  // optional int32 roundcount = 2;
  inline bool has_roundcount() const;
  inline void clear_roundcount();
  static const int kRoundcountFieldNumber = 2;
  inline ::google::protobuf::int32 roundcount() const;
  inline void set_roundcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.TotalRoundScore)
 private:
  inline void set_has_roundcount();
  inline void clear_has_roundcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::RoundScore > round_;
  ::google::protobuf::int32 roundcount_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static TotalRoundScore* default_instance_;
};
// -------------------------------------------------------------------

class ReqChangeMode : public ::google::protobuf::Message {
 public:
  ReqChangeMode();
  virtual ~ReqChangeMode();

  ReqChangeMode(const ReqChangeMode& from);

  inline ReqChangeMode& operator=(const ReqChangeMode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqChangeMode& default_instance();

  void Swap(ReqChangeMode* other);

  // implements Message ----------------------------------------------

  ReqChangeMode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqChangeMode& from);
  void MergeFrom(const ReqChangeMode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.ReqChangeMode)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 num_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqChangeMode* default_instance_;
};
// -------------------------------------------------------------------

class AckChangeMode : public ::google::protobuf::Message {
 public:
  AckChangeMode();
  virtual ~AckChangeMode();

  AckChangeMode(const AckChangeMode& from);

  inline AckChangeMode& operator=(const AckChangeMode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckChangeMode& default_instance();

  void Swap(AckChangeMode* other);

  // implements Message ----------------------------------------------

  AckChangeMode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckChangeMode& from);
  void MergeFrom(const AckChangeMode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 chairid = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckChangeMode)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 num_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckChangeMode* default_instance_;
};
// -------------------------------------------------------------------

class RealTimeSpeech : public ::google::protobuf::Message {
 public:
  RealTimeSpeech();
  virtual ~RealTimeSpeech();

  RealTimeSpeech(const RealTimeSpeech& from);

  inline RealTimeSpeech& operator=(const RealTimeSpeech& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RealTimeSpeech& default_instance();

  void Swap(RealTimeSpeech* other);

  // implements Message ----------------------------------------------

  RealTimeSpeech* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RealTimeSpeech& from);
  void MergeFrom(const RealTimeSpeech& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.RealTimeSpeech)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 code_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static RealTimeSpeech* default_instance_;
};
// -------------------------------------------------------------------

class RealTimeSpeechAck : public ::google::protobuf::Message {
 public:
  RealTimeSpeechAck();
  virtual ~RealTimeSpeechAck();

  RealTimeSpeechAck(const RealTimeSpeechAck& from);

  inline RealTimeSpeechAck& operator=(const RealTimeSpeechAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RealTimeSpeechAck& default_instance();

  void Swap(RealTimeSpeechAck* other);

  // implements Message ----------------------------------------------

  RealTimeSpeechAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RealTimeSpeechAck& from);
  void MergeFrom(const RealTimeSpeechAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 code = 1;
  inline int code_size() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code(int index) const;
  inline void set_code(int index, ::google::protobuf::int32 value);
  inline void add_code(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      code() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_code();

  // @@protoc_insertion_point(class_scope:proto.game.RealTimeSpeechAck)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > code_;
  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static RealTimeSpeechAck* default_instance_;
};
// ===================================================================


// ===================================================================

// SpecialGangCard

// optional int32 card = 1;
inline bool SpecialGangCard::has_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpecialGangCard::set_has_card() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpecialGangCard::clear_has_card() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpecialGangCard::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 SpecialGangCard::card() const {
  // @@protoc_insertion_point(field_get:proto.game.SpecialGangCard.card)
  return card_;
}
inline void SpecialGangCard::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
  // @@protoc_insertion_point(field_set:proto.game.SpecialGangCard.card)
}

// optional int32 num = 2;
inline bool SpecialGangCard::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpecialGangCard::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpecialGangCard::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpecialGangCard::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 SpecialGangCard::num() const {
  // @@protoc_insertion_point(field_get:proto.game.SpecialGangCard.num)
  return num_;
}
inline void SpecialGangCard::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:proto.game.SpecialGangCard.num)
}

// -------------------------------------------------------------------

// SpecialGang

// optional int32 index = 1;
inline bool SpecialGang::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpecialGang::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpecialGang::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpecialGang::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 SpecialGang::index() const {
  // @@protoc_insertion_point(field_get:proto.game.SpecialGang.index)
  return index_;
}
inline void SpecialGang::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:proto.game.SpecialGang.index)
}

// repeated .proto.game.SpecialGangCard cards = 2;
inline int SpecialGang::cards_size() const {
  return cards_.size();
}
inline void SpecialGang::clear_cards() {
  cards_.Clear();
}
inline const ::proto::game::SpecialGangCard& SpecialGang::cards(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.SpecialGang.cards)
  return cards_.Get(index);
}
inline ::proto::game::SpecialGangCard* SpecialGang::mutable_cards(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.SpecialGang.cards)
  return cards_.Mutable(index);
}
inline ::proto::game::SpecialGangCard* SpecialGang::add_cards() {
  // @@protoc_insertion_point(field_add:proto.game.SpecialGang.cards)
  return cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::SpecialGangCard >&
SpecialGang::cards() const {
  // @@protoc_insertion_point(field_list:proto.game.SpecialGang.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::SpecialGangCard >*
SpecialGang::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.SpecialGang.cards)
  return &cards_;
}

// -------------------------------------------------------------------

// FixedCard

// required int32 CardData = 1;
inline bool FixedCard::has_carddata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FixedCard::set_has_carddata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FixedCard::clear_has_carddata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FixedCard::clear_carddata() {
  carddata_ = 0;
  clear_has_carddata();
}
inline ::google::protobuf::int32 FixedCard::carddata() const {
  // @@protoc_insertion_point(field_get:proto.game.FixedCard.CardData)
  return carddata_;
}
inline void FixedCard::set_carddata(::google::protobuf::int32 value) {
  set_has_carddata();
  carddata_ = value;
  // @@protoc_insertion_point(field_set:proto.game.FixedCard.CardData)
}

// optional int32 state = 2;
inline bool FixedCard::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FixedCard::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FixedCard::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FixedCard::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 FixedCard::state() const {
  // @@protoc_insertion_point(field_get:proto.game.FixedCard.state)
  return state_;
}
inline void FixedCard::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.game.FixedCard.state)
}

// optional int32 chairID = 3;
inline bool FixedCard::has_chairid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FixedCard::set_has_chairid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FixedCard::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FixedCard::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 FixedCard::chairid() const {
  // @@protoc_insertion_point(field_get:proto.game.FixedCard.chairID)
  return chairid_;
}
inline void FixedCard::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.FixedCard.chairID)
}

// repeated int32 OpCards = 4;
inline int FixedCard::opcards_size() const {
  return opcards_.size();
}
inline void FixedCard::clear_opcards() {
  opcards_.Clear();
}
inline ::google::protobuf::int32 FixedCard::opcards(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.FixedCard.OpCards)
  return opcards_.Get(index);
}
inline void FixedCard::set_opcards(int index, ::google::protobuf::int32 value) {
  opcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.FixedCard.OpCards)
}
inline void FixedCard::add_opcards(::google::protobuf::int32 value) {
  opcards_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.FixedCard.OpCards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FixedCard::opcards() const {
  // @@protoc_insertion_point(field_list:proto.game.FixedCard.OpCards)
  return opcards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FixedCard::mutable_opcards() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.FixedCard.OpCards)
  return &opcards_;
}

// optional int32 LaiziNum = 5;
inline bool FixedCard::has_laizinum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FixedCard::set_has_laizinum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FixedCard::clear_has_laizinum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FixedCard::clear_laizinum() {
  laizinum_ = 0;
  clear_has_laizinum();
}
inline ::google::protobuf::int32 FixedCard::laizinum() const {
  // @@protoc_insertion_point(field_get:proto.game.FixedCard.LaiziNum)
  return laizinum_;
}
inline void FixedCard::set_laizinum(::google::protobuf::int32 value) {
  set_has_laizinum();
  laizinum_ = value;
  // @@protoc_insertion_point(field_set:proto.game.FixedCard.LaiziNum)
}

// optional .proto.game.SpecialGang specialgang = 6;
inline bool FixedCard::has_specialgang() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FixedCard::set_has_specialgang() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FixedCard::clear_has_specialgang() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FixedCard::clear_specialgang() {
  if (specialgang_ != NULL) specialgang_->::proto::game::SpecialGang::Clear();
  clear_has_specialgang();
}
inline const ::proto::game::SpecialGang& FixedCard::specialgang() const {
  // @@protoc_insertion_point(field_get:proto.game.FixedCard.specialgang)
  return specialgang_ != NULL ? *specialgang_ : *default_instance_->specialgang_;
}
inline ::proto::game::SpecialGang* FixedCard::mutable_specialgang() {
  set_has_specialgang();
  if (specialgang_ == NULL) specialgang_ = new ::proto::game::SpecialGang;
  // @@protoc_insertion_point(field_mutable:proto.game.FixedCard.specialgang)
  return specialgang_;
}
inline ::proto::game::SpecialGang* FixedCard::release_specialgang() {
  clear_has_specialgang();
  ::proto::game::SpecialGang* temp = specialgang_;
  specialgang_ = NULL;
  return temp;
}
inline void FixedCard::set_allocated_specialgang(::proto::game::SpecialGang* specialgang) {
  delete specialgang_;
  specialgang_ = specialgang;
  if (specialgang) {
    set_has_specialgang();
  } else {
    clear_has_specialgang();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.FixedCard.specialgang)
}

// -------------------------------------------------------------------

// FixedCardChange

// optional int32 enable = 1;
inline bool FixedCardChange::has_enable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FixedCardChange::set_has_enable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FixedCardChange::clear_has_enable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FixedCardChange::clear_enable() {
  enable_ = 0;
  clear_has_enable();
}
inline ::google::protobuf::int32 FixedCardChange::enable() const {
  // @@protoc_insertion_point(field_get:proto.game.FixedCardChange.enable)
  return enable_;
}
inline void FixedCardChange::set_enable(::google::protobuf::int32 value) {
  set_has_enable();
  enable_ = value;
  // @@protoc_insertion_point(field_set:proto.game.FixedCardChange.enable)
}

// optional int32 chairid = 2;
inline bool FixedCardChange::has_chairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FixedCardChange::set_has_chairid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FixedCardChange::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FixedCardChange::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 FixedCardChange::chairid() const {
  // @@protoc_insertion_point(field_get:proto.game.FixedCardChange.chairid)
  return chairid_;
}
inline void FixedCardChange::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.FixedCardChange.chairid)
}

// optional int32 fixedindex = 3;
inline bool FixedCardChange::has_fixedindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FixedCardChange::set_has_fixedindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FixedCardChange::clear_has_fixedindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FixedCardChange::clear_fixedindex() {
  fixedindex_ = 0;
  clear_has_fixedindex();
}
inline ::google::protobuf::int32 FixedCardChange::fixedindex() const {
  // @@protoc_insertion_point(field_get:proto.game.FixedCardChange.fixedindex)
  return fixedindex_;
}
inline void FixedCardChange::set_fixedindex(::google::protobuf::int32 value) {
  set_has_fixedindex();
  fixedindex_ = value;
  // @@protoc_insertion_point(field_set:proto.game.FixedCardChange.fixedindex)
}

// optional .proto.game.FixedCard fixedcard = 4;
inline bool FixedCardChange::has_fixedcard() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FixedCardChange::set_has_fixedcard() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FixedCardChange::clear_has_fixedcard() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FixedCardChange::clear_fixedcard() {
  if (fixedcard_ != NULL) fixedcard_->::proto::game::FixedCard::Clear();
  clear_has_fixedcard();
}
inline const ::proto::game::FixedCard& FixedCardChange::fixedcard() const {
  // @@protoc_insertion_point(field_get:proto.game.FixedCardChange.fixedcard)
  return fixedcard_ != NULL ? *fixedcard_ : *default_instance_->fixedcard_;
}
inline ::proto::game::FixedCard* FixedCardChange::mutable_fixedcard() {
  set_has_fixedcard();
  if (fixedcard_ == NULL) fixedcard_ = new ::proto::game::FixedCard;
  // @@protoc_insertion_point(field_mutable:proto.game.FixedCardChange.fixedcard)
  return fixedcard_;
}
inline ::proto::game::FixedCard* FixedCardChange::release_fixedcard() {
  clear_has_fixedcard();
  ::proto::game::FixedCard* temp = fixedcard_;
  fixedcard_ = NULL;
  return temp;
}
inline void FixedCardChange::set_allocated_fixedcard(::proto::game::FixedCard* fixedcard) {
  delete fixedcard_;
  fixedcard_ = fixedcard;
  if (fixedcard) {
    set_has_fixedcard();
  } else {
    clear_has_fixedcard();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.FixedCardChange.fixedcard)
}

// -------------------------------------------------------------------

// Cards

// repeated int32 card = 1;
inline int Cards::card_size() const {
  return card_.size();
}
inline void Cards::clear_card() {
  card_.Clear();
}
inline ::google::protobuf::int32 Cards::card(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.Cards.card)
  return card_.Get(index);
}
inline void Cards::set_card(int index, ::google::protobuf::int32 value) {
  card_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.Cards.card)
}
inline void Cards::add_card(::google::protobuf::int32 value) {
  card_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.Cards.card)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Cards::card() const {
  // @@protoc_insertion_point(field_list:proto.game.Cards.card)
  return card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Cards::mutable_card() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.Cards.card)
  return &card_;
}

// -------------------------------------------------------------------

// CardArr

// optional int32 OpType = 1;
inline bool CardArr::has_optype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardArr::set_has_optype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CardArr::clear_has_optype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CardArr::clear_optype() {
  optype_ = 0;
  clear_has_optype();
}
inline ::google::protobuf::int32 CardArr::optype() const {
  // @@protoc_insertion_point(field_get:proto.game.CardArr.OpType)
  return optype_;
}
inline void CardArr::set_optype(::google::protobuf::int32 value) {
  set_has_optype();
  optype_ = value;
  // @@protoc_insertion_point(field_set:proto.game.CardArr.OpType)
}

// repeated int32 card = 2;
inline int CardArr::card_size() const {
  return card_.size();
}
inline void CardArr::clear_card() {
  card_.Clear();
}
inline ::google::protobuf::int32 CardArr::card(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.CardArr.card)
  return card_.Get(index);
}
inline void CardArr::set_card(int index, ::google::protobuf::int32 value) {
  card_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.CardArr.card)
}
inline void CardArr::add_card(::google::protobuf::int32 value) {
  card_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.CardArr.card)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CardArr::card() const {
  // @@protoc_insertion_point(field_list:proto.game.CardArr.card)
  return card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CardArr::mutable_card() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.CardArr.card)
  return &card_;
}

// -------------------------------------------------------------------

// HandCards

// required int32 ChangeableCardsLen = 1;
inline bool HandCards::has_changeablecardslen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HandCards::set_has_changeablecardslen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HandCards::clear_has_changeablecardslen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HandCards::clear_changeablecardslen() {
  changeablecardslen_ = 0;
  clear_has_changeablecardslen();
}
inline ::google::protobuf::int32 HandCards::changeablecardslen() const {
  // @@protoc_insertion_point(field_get:proto.game.HandCards.ChangeableCardsLen)
  return changeablecardslen_;
}
inline void HandCards::set_changeablecardslen(::google::protobuf::int32 value) {
  set_has_changeablecardslen();
  changeablecardslen_ = value;
  // @@protoc_insertion_point(field_set:proto.game.HandCards.ChangeableCardsLen)
}

// repeated int32 ChangeableCards = 2;
inline int HandCards::changeablecards_size() const {
  return changeablecards_.size();
}
inline void HandCards::clear_changeablecards() {
  changeablecards_.Clear();
}
inline ::google::protobuf::int32 HandCards::changeablecards(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.HandCards.ChangeableCards)
  return changeablecards_.Get(index);
}
inline void HandCards::set_changeablecards(int index, ::google::protobuf::int32 value) {
  changeablecards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.HandCards.ChangeableCards)
}
inline void HandCards::add_changeablecards(::google::protobuf::int32 value) {
  changeablecards_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.HandCards.ChangeableCards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HandCards::changeablecards() const {
  // @@protoc_insertion_point(field_list:proto.game.HandCards.ChangeableCards)
  return changeablecards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HandCards::mutable_changeablecards() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.HandCards.ChangeableCards)
  return &changeablecards_;
}

// optional int32 FixedCardsLen = 3;
inline bool HandCards::has_fixedcardslen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HandCards::set_has_fixedcardslen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HandCards::clear_has_fixedcardslen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HandCards::clear_fixedcardslen() {
  fixedcardslen_ = 0;
  clear_has_fixedcardslen();
}
inline ::google::protobuf::int32 HandCards::fixedcardslen() const {
  // @@protoc_insertion_point(field_get:proto.game.HandCards.FixedCardsLen)
  return fixedcardslen_;
}
inline void HandCards::set_fixedcardslen(::google::protobuf::int32 value) {
  set_has_fixedcardslen();
  fixedcardslen_ = value;
  // @@protoc_insertion_point(field_set:proto.game.HandCards.FixedCardsLen)
}

// repeated .proto.game.FixedCard stFixedCards = 4;
inline int HandCards::stfixedcards_size() const {
  return stfixedcards_.size();
}
inline void HandCards::clear_stfixedcards() {
  stfixedcards_.Clear();
}
inline const ::proto::game::FixedCard& HandCards::stfixedcards(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.HandCards.stFixedCards)
  return stfixedcards_.Get(index);
}
inline ::proto::game::FixedCard* HandCards::mutable_stfixedcards(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.HandCards.stFixedCards)
  return stfixedcards_.Mutable(index);
}
inline ::proto::game::FixedCard* HandCards::add_stfixedcards() {
  // @@protoc_insertion_point(field_add:proto.game.HandCards.stFixedCards)
  return stfixedcards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::FixedCard >&
HandCards::stfixedcards() const {
  // @@protoc_insertion_point(field_list:proto.game.HandCards.stFixedCards)
  return stfixedcards_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::FixedCard >*
HandCards::mutable_stfixedcards() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.HandCards.stFixedCards)
  return &stfixedcards_;
}

// optional int32 stFenZhangCard = 5;
inline bool HandCards::has_stfenzhangcard() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HandCards::set_has_stfenzhangcard() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HandCards::clear_has_stfenzhangcard() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HandCards::clear_stfenzhangcard() {
  stfenzhangcard_ = 0;
  clear_has_stfenzhangcard();
}
inline ::google::protobuf::int32 HandCards::stfenzhangcard() const {
  // @@protoc_insertion_point(field_get:proto.game.HandCards.stFenZhangCard)
  return stfenzhangcard_;
}
inline void HandCards::set_stfenzhangcard(::google::protobuf::int32 value) {
  set_has_stfenzhangcard();
  stfenzhangcard_ = value;
  // @@protoc_insertion_point(field_set:proto.game.HandCards.stFenZhangCard)
}

// -------------------------------------------------------------------

// tagPlayers

// required int32 uid = 1;
inline bool tagPlayers::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagPlayers::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagPlayers::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagPlayers::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 tagPlayers::uid() const {
  // @@protoc_insertion_point(field_get:proto.game.tagPlayers.uid)
  return uid_;
}
inline void tagPlayers::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.tagPlayers.uid)
}

// optional int32 seatid = 2;
inline bool tagPlayers::has_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagPlayers::set_has_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagPlayers::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagPlayers::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 tagPlayers::seatid() const {
  // @@protoc_insertion_point(field_get:proto.game.tagPlayers.seatid)
  return seatid_;
}
inline void tagPlayers::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.tagPlayers.seatid)
}

// optional int32 ready = 3;
inline bool tagPlayers::has_ready() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagPlayers::set_has_ready() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagPlayers::clear_has_ready() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagPlayers::clear_ready() {
  ready_ = 0;
  clear_has_ready();
}
inline ::google::protobuf::int32 tagPlayers::ready() const {
  // @@protoc_insertion_point(field_get:proto.game.tagPlayers.ready)
  return ready_;
}
inline void tagPlayers::set_ready(::google::protobuf::int32 value) {
  set_has_ready();
  ready_ = value;
  // @@protoc_insertion_point(field_set:proto.game.tagPlayers.ready)
}

// optional int32 money = 4;
inline bool tagPlayers::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tagPlayers::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tagPlayers::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tagPlayers::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 tagPlayers::money() const {
  // @@protoc_insertion_point(field_get:proto.game.tagPlayers.money)
  return money_;
}
inline void tagPlayers::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:proto.game.tagPlayers.money)
}

// optional string name = 5;
inline bool tagPlayers::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tagPlayers::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tagPlayers::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tagPlayers::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& tagPlayers::name() const {
  // @@protoc_insertion_point(field_get:proto.game.tagPlayers.name)
  return *name_;
}
inline void tagPlayers::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:proto.game.tagPlayers.name)
}
inline void tagPlayers::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.tagPlayers.name)
}
inline void tagPlayers::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.tagPlayers.name)
}
inline ::std::string* tagPlayers::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.game.tagPlayers.name)
  return name_;
}
inline ::std::string* tagPlayers::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void tagPlayers::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.tagPlayers.name)
}

// optional int32 sex = 6;
inline bool tagPlayers::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tagPlayers::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tagPlayers::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tagPlayers::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 tagPlayers::sex() const {
  // @@protoc_insertion_point(field_get:proto.game.tagPlayers.sex)
  return sex_;
}
inline void tagPlayers::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:proto.game.tagPlayers.sex)
}

// optional string avatar = 7;
inline bool tagPlayers::has_avatar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tagPlayers::set_has_avatar() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tagPlayers::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tagPlayers::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& tagPlayers::avatar() const {
  // @@protoc_insertion_point(field_get:proto.game.tagPlayers.avatar)
  return *avatar_;
}
inline void tagPlayers::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set:proto.game.tagPlayers.avatar)
}
inline void tagPlayers::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.tagPlayers.avatar)
}
inline void tagPlayers::set_avatar(const char* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.tagPlayers.avatar)
}
inline ::std::string* tagPlayers::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.game.tagPlayers.avatar)
  return avatar_;
}
inline ::std::string* tagPlayers::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void tagPlayers::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.tagPlayers.avatar)
}

// -------------------------------------------------------------------

// ReqAction

// required int32 action = 1;
inline bool ReqAction::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAction::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAction::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAction::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 ReqAction::action() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqAction.action)
  return action_;
}
inline void ReqAction::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReqAction.action)
}

// -------------------------------------------------------------------

// ReqOutCard

// required int32 Card = 1;
inline bool ReqOutCard::has_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqOutCard::set_has_card() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqOutCard::clear_has_card() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqOutCard::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 ReqOutCard::card() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqOutCard.Card)
  return card_;
}
inline void ReqOutCard::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReqOutCard.Card)
}

// optional int32 ShowCard = 2;
inline bool ReqOutCard::has_showcard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqOutCard::set_has_showcard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqOutCard::clear_has_showcard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqOutCard::clear_showcard() {
  showcard_ = 0;
  clear_has_showcard();
}
inline ::google::protobuf::int32 ReqOutCard::showcard() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqOutCard.ShowCard)
  return showcard_;
}
inline void ReqOutCard::set_showcard(::google::protobuf::int32 value) {
  set_has_showcard();
  showcard_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReqOutCard.ShowCard)
}

// optional int32 anCards = 3;
inline bool ReqOutCard::has_ancards() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqOutCard::set_has_ancards() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqOutCard::clear_has_ancards() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqOutCard::clear_ancards() {
  ancards_ = 0;
  clear_has_ancards();
}
inline ::google::protobuf::int32 ReqOutCard::ancards() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqOutCard.anCards)
  return ancards_;
}
inline void ReqOutCard::set_ancards(::google::protobuf::int32 value) {
  set_has_ancards();
  ancards_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReqOutCard.anCards)
}

// optional bool HongZhongLaiZiFlag = 4;
inline bool ReqOutCard::has_hongzhonglaiziflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqOutCard::set_has_hongzhonglaiziflag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqOutCard::clear_has_hongzhonglaiziflag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqOutCard::clear_hongzhonglaiziflag() {
  hongzhonglaiziflag_ = false;
  clear_has_hongzhonglaiziflag();
}
inline bool ReqOutCard::hongzhonglaiziflag() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqOutCard.HongZhongLaiZiFlag)
  return hongzhonglaiziflag_;
}
inline void ReqOutCard::set_hongzhonglaiziflag(bool value) {
  set_has_hongzhonglaiziflag();
  hongzhonglaiziflag_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReqOutCard.HongZhongLaiZiFlag)
}

// -------------------------------------------------------------------

// ReqOperateResult

// required int32 Type = 1;
inline bool ReqOperateResult::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqOperateResult::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqOperateResult::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqOperateResult::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ReqOperateResult::type() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqOperateResult.Type)
  return type_;
}
inline void ReqOperateResult::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReqOperateResult.Type)
}

// optional int32 Card = 2;
inline bool ReqOperateResult::has_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqOperateResult::set_has_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqOperateResult::clear_has_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqOperateResult::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 ReqOperateResult::card() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqOperateResult.Card)
  return card_;
}
inline void ReqOperateResult::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReqOperateResult.Card)
}

// optional int32 operateid = 3;
inline bool ReqOperateResult::has_operateid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqOperateResult::set_has_operateid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqOperateResult::clear_has_operateid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqOperateResult::clear_operateid() {
  operateid_ = 0;
  clear_has_operateid();
}
inline ::google::protobuf::int32 ReqOperateResult::operateid() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqOperateResult.operateid)
  return operateid_;
}
inline void ReqOperateResult::set_operateid(::google::protobuf::int32 value) {
  set_has_operateid();
  operateid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReqOperateResult.operateid)
}

// repeated int32 opcards = 4;
inline int ReqOperateResult::opcards_size() const {
  return opcards_.size();
}
inline void ReqOperateResult::clear_opcards() {
  opcards_.Clear();
}
inline ::google::protobuf::int32 ReqOperateResult::opcards(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.ReqOperateResult.opcards)
  return opcards_.Get(index);
}
inline void ReqOperateResult::set_opcards(int index, ::google::protobuf::int32 value) {
  opcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.ReqOperateResult.opcards)
}
inline void ReqOperateResult::add_opcards(::google::protobuf::int32 value) {
  opcards_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.ReqOperateResult.opcards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReqOperateResult::opcards() const {
  // @@protoc_insertion_point(field_list:proto.game.ReqOperateResult.opcards)
  return opcards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReqOperateResult::mutable_opcards() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.ReqOperateResult.opcards)
  return &opcards_;
}

// optional int32 passhu = 5;
inline bool ReqOperateResult::has_passhu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqOperateResult::set_has_passhu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqOperateResult::clear_has_passhu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqOperateResult::clear_passhu() {
  passhu_ = 0;
  clear_has_passhu();
}
inline ::google::protobuf::int32 ReqOperateResult::passhu() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqOperateResult.passhu)
  return passhu_;
}
inline void ReqOperateResult::set_passhu(::google::protobuf::int32 value) {
  set_has_passhu();
  passhu_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReqOperateResult.passhu)
}

// -------------------------------------------------------------------

// ReqIsAuto

// required int32 isAuto = 1;
inline bool ReqIsAuto::has_isauto() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqIsAuto::set_has_isauto() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqIsAuto::clear_has_isauto() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqIsAuto::clear_isauto() {
  isauto_ = 0;
  clear_has_isauto();
}
inline ::google::protobuf::int32 ReqIsAuto::isauto() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqIsAuto.isAuto)
  return isauto_;
}
inline void ReqIsAuto::set_isauto(::google::protobuf::int32 value) {
  set_has_isauto();
  isauto_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReqIsAuto.isAuto)
}

// -------------------------------------------------------------------

// ReqUpdateUserInfo

// required int32 uid = 1;
inline bool ReqUpdateUserInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqUpdateUserInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqUpdateUserInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqUpdateUserInfo::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 ReqUpdateUserInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqUpdateUserInfo.uid)
  return uid_;
}
inline void ReqUpdateUserInfo::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReqUpdateUserInfo.uid)
}

// optional int32 vid = 2;
inline bool ReqUpdateUserInfo::has_vid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqUpdateUserInfo::set_has_vid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqUpdateUserInfo::clear_has_vid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqUpdateUserInfo::clear_vid() {
  vid_ = 0;
  clear_has_vid();
}
inline ::google::protobuf::int32 ReqUpdateUserInfo::vid() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqUpdateUserInfo.vid)
  return vid_;
}
inline void ReqUpdateUserInfo::set_vid(::google::protobuf::int32 value) {
  set_has_vid();
  vid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReqUpdateUserInfo.vid)
}

// -------------------------------------------------------------------

// ReqRoomInfo

// required int32 uid = 1;
inline bool ReqRoomInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqRoomInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqRoomInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqRoomInfo::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 ReqRoomInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqRoomInfo.uid)
  return uid_;
}
inline void ReqRoomInfo::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReqRoomInfo.uid)
}

// optional int32 vid = 2;
inline bool ReqRoomInfo::has_vid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqRoomInfo::set_has_vid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqRoomInfo::clear_has_vid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqRoomInfo::clear_vid() {
  vid_ = 0;
  clear_has_vid();
}
inline ::google::protobuf::int32 ReqRoomInfo::vid() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqRoomInfo.vid)
  return vid_;
}
inline void ReqRoomInfo::set_vid(::google::protobuf::int32 value) {
  set_has_vid();
  vid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReqRoomInfo.vid)
}

// optional string skey = 3;
inline bool ReqRoomInfo::has_skey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqRoomInfo::set_has_skey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqRoomInfo::clear_has_skey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqRoomInfo::clear_skey() {
  if (skey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skey_->clear();
  }
  clear_has_skey();
}
inline const ::std::string& ReqRoomInfo::skey() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqRoomInfo.skey)
  return *skey_;
}
inline void ReqRoomInfo::set_skey(const ::std::string& value) {
  set_has_skey();
  if (skey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skey_ = new ::std::string;
  }
  skey_->assign(value);
  // @@protoc_insertion_point(field_set:proto.game.ReqRoomInfo.skey)
}
inline void ReqRoomInfo::set_skey(const char* value) {
  set_has_skey();
  if (skey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skey_ = new ::std::string;
  }
  skey_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.ReqRoomInfo.skey)
}
inline void ReqRoomInfo::set_skey(const char* value, size_t size) {
  set_has_skey();
  if (skey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skey_ = new ::std::string;
  }
  skey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.ReqRoomInfo.skey)
}
inline ::std::string* ReqRoomInfo::mutable_skey() {
  set_has_skey();
  if (skey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.game.ReqRoomInfo.skey)
  return skey_;
}
inline ::std::string* ReqRoomInfo::release_skey() {
  clear_has_skey();
  if (skey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = skey_;
    skey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReqRoomInfo::set_allocated_skey(::std::string* skey) {
  if (skey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skey_;
  }
  if (skey) {
    set_has_skey();
    skey_ = skey;
  } else {
    clear_has_skey();
    skey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.ReqRoomInfo.skey)
}

// -------------------------------------------------------------------

// ReqChooseDisband

// required int32 Choosestate = 1;
inline bool ReqChooseDisband::has_choosestate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqChooseDisband::set_has_choosestate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqChooseDisband::clear_has_choosestate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqChooseDisband::clear_choosestate() {
  choosestate_ = 0;
  clear_has_choosestate();
}
inline ::google::protobuf::int32 ReqChooseDisband::choosestate() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqChooseDisband.Choosestate)
  return choosestate_;
}
inline void ReqChooseDisband::set_choosestate(::google::protobuf::int32 value) {
  set_has_choosestate();
  choosestate_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReqChooseDisband.Choosestate)
}

// -------------------------------------------------------------------

// tagHu

// optional int32 HuCard = 1;
inline bool tagHu::has_hucard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagHu::set_has_hucard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagHu::clear_has_hucard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagHu::clear_hucard() {
  hucard_ = 0;
  clear_has_hucard();
}
inline ::google::protobuf::int32 tagHu::hucard() const {
  // @@protoc_insertion_point(field_get:proto.game.tagHu.HuCard)
  return hucard_;
}
inline void tagHu::set_hucard(::google::protobuf::int32 value) {
  set_has_hucard();
  hucard_ = value;
  // @@protoc_insertion_point(field_set:proto.game.tagHu.HuCard)
}

// optional int32 PasHuChiarid = 2;
inline bool tagHu::has_pashuchiarid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagHu::set_has_pashuchiarid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagHu::clear_has_pashuchiarid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagHu::clear_pashuchiarid() {
  pashuchiarid_ = 0;
  clear_has_pashuchiarid();
}
inline ::google::protobuf::int32 tagHu::pashuchiarid() const {
  // @@protoc_insertion_point(field_get:proto.game.tagHu.PasHuChiarid)
  return pashuchiarid_;
}
inline void tagHu::set_pashuchiarid(::google::protobuf::int32 value) {
  set_has_pashuchiarid();
  pashuchiarid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.tagHu.PasHuChiarid)
}

// -------------------------------------------------------------------

// tagUserHuInfo

// repeated .proto.game.tagHu hu = 1;
inline int tagUserHuInfo::hu_size() const {
  return hu_.size();
}
inline void tagUserHuInfo::clear_hu() {
  hu_.Clear();
}
inline const ::proto::game::tagHu& tagUserHuInfo::hu(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.tagUserHuInfo.hu)
  return hu_.Get(index);
}
inline ::proto::game::tagHu* tagUserHuInfo::mutable_hu(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.tagUserHuInfo.hu)
  return hu_.Mutable(index);
}
inline ::proto::game::tagHu* tagUserHuInfo::add_hu() {
  // @@protoc_insertion_point(field_add:proto.game.tagUserHuInfo.hu)
  return hu_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHu >&
tagUserHuInfo::hu() const {
  // @@protoc_insertion_point(field_list:proto.game.tagUserHuInfo.hu)
  return hu_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHu >*
tagUserHuInfo::mutable_hu() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.tagUserHuInfo.hu)
  return &hu_;
}

// -------------------------------------------------------------------

// tagGangInfo

// required int32 Card = 1;
inline bool tagGangInfo::has_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagGangInfo::set_has_card() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagGangInfo::clear_has_card() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagGangInfo::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 tagGangInfo::card() const {
  // @@protoc_insertion_point(field_get:proto.game.tagGangInfo.Card)
  return card_;
}
inline void tagGangInfo::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
  // @@protoc_insertion_point(field_set:proto.game.tagGangInfo.Card)
}

// optional int32 state = 2;
inline bool tagGangInfo::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagGangInfo::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagGangInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagGangInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 tagGangInfo::state() const {
  // @@protoc_insertion_point(field_get:proto.game.tagGangInfo.state)
  return state_;
}
inline void tagGangInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.game.tagGangInfo.state)
}

// -------------------------------------------------------------------

// tagGroupCard

// repeated .proto.game.FixedCard FixedCard = 1;
inline int tagGroupCard::fixedcard_size() const {
  return fixedcard_.size();
}
inline void tagGroupCard::clear_fixedcard() {
  fixedcard_.Clear();
}
inline const ::proto::game::FixedCard& tagGroupCard::fixedcard(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.tagGroupCard.FixedCard)
  return fixedcard_.Get(index);
}
inline ::proto::game::FixedCard* tagGroupCard::mutable_fixedcard(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.tagGroupCard.FixedCard)
  return fixedcard_.Mutable(index);
}
inline ::proto::game::FixedCard* tagGroupCard::add_fixedcard() {
  // @@protoc_insertion_point(field_add:proto.game.tagGroupCard.FixedCard)
  return fixedcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::FixedCard >&
tagGroupCard::fixedcard() const {
  // @@protoc_insertion_point(field_list:proto.game.tagGroupCard.FixedCard)
  return fixedcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::FixedCard >*
tagGroupCard::mutable_fixedcard() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.tagGroupCard.FixedCard)
  return &fixedcard_;
}

// -------------------------------------------------------------------

// tagReadyInfo

// repeated int32 Ready = 1;
inline int tagReadyInfo::ready_size() const {
  return ready_.size();
}
inline void tagReadyInfo::clear_ready() {
  ready_.Clear();
}
inline ::google::protobuf::int32 tagReadyInfo::ready(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.tagReadyInfo.Ready)
  return ready_.Get(index);
}
inline void tagReadyInfo::set_ready(int index, ::google::protobuf::int32 value) {
  ready_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.tagReadyInfo.Ready)
}
inline void tagReadyInfo::add_ready(::google::protobuf::int32 value) {
  ready_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.tagReadyInfo.Ready)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagReadyInfo::ready() const {
  // @@protoc_insertion_point(field_list:proto.game.tagReadyInfo.Ready)
  return ready_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagReadyInfo::mutable_ready() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.tagReadyInfo.Ready)
  return &ready_;
}

// repeated int32 RemainReadyTime = 2;
inline int tagReadyInfo::remainreadytime_size() const {
  return remainreadytime_.size();
}
inline void tagReadyInfo::clear_remainreadytime() {
  remainreadytime_.Clear();
}
inline ::google::protobuf::int32 tagReadyInfo::remainreadytime(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.tagReadyInfo.RemainReadyTime)
  return remainreadytime_.Get(index);
}
inline void tagReadyInfo::set_remainreadytime(int index, ::google::protobuf::int32 value) {
  remainreadytime_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.tagReadyInfo.RemainReadyTime)
}
inline void tagReadyInfo::add_remainreadytime(::google::protobuf::int32 value) {
  remainreadytime_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.tagReadyInfo.RemainReadyTime)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagReadyInfo::remainreadytime() const {
  // @@protoc_insertion_point(field_list:proto.game.tagReadyInfo.RemainReadyTime)
  return remainreadytime_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagReadyInfo::mutable_remainreadytime() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.tagReadyInfo.RemainReadyTime)
  return &remainreadytime_;
}

// optional int32 ReadyTime = 3;
inline bool tagReadyInfo::has_readytime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagReadyInfo::set_has_readytime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagReadyInfo::clear_has_readytime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagReadyInfo::clear_readytime() {
  readytime_ = 0;
  clear_has_readytime();
}
inline ::google::protobuf::int32 tagReadyInfo::readytime() const {
  // @@protoc_insertion_point(field_get:proto.game.tagReadyInfo.ReadyTime)
  return readytime_;
}
inline void tagReadyInfo::set_readytime(::google::protobuf::int32 value) {
  set_has_readytime();
  readytime_ = value;
  // @@protoc_insertion_point(field_set:proto.game.tagReadyInfo.ReadyTime)
}

// -------------------------------------------------------------------

// ExMsg

// optional int32 times = 1;
inline bool ExMsg::has_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExMsg::set_has_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExMsg::clear_has_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExMsg::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 ExMsg::times() const {
  // @@protoc_insertion_point(field_get:proto.game.ExMsg.times)
  return times_;
}
inline void ExMsg::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ExMsg.times)
}

// optional int32 voice_room = 2;
inline bool ExMsg::has_voice_room() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExMsg::set_has_voice_room() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExMsg::clear_has_voice_room() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExMsg::clear_voice_room() {
  voice_room_ = 0;
  clear_has_voice_room();
}
inline ::google::protobuf::int32 ExMsg::voice_room() const {
  // @@protoc_insertion_point(field_get:proto.game.ExMsg.voice_room)
  return voice_room_;
}
inline void ExMsg::set_voice_room(::google::protobuf::int32 value) {
  set_has_voice_room();
  voice_room_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ExMsg.voice_room)
}

// optional string public_channel_id = 3;
inline bool ExMsg::has_public_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExMsg::set_has_public_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExMsg::clear_has_public_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExMsg::clear_public_channel_id() {
  if (public_channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_channel_id_->clear();
  }
  clear_has_public_channel_id();
}
inline const ::std::string& ExMsg::public_channel_id() const {
  // @@protoc_insertion_point(field_get:proto.game.ExMsg.public_channel_id)
  return *public_channel_id_;
}
inline void ExMsg::set_public_channel_id(const ::std::string& value) {
  set_has_public_channel_id();
  if (public_channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_channel_id_ = new ::std::string;
  }
  public_channel_id_->assign(value);
  // @@protoc_insertion_point(field_set:proto.game.ExMsg.public_channel_id)
}
inline void ExMsg::set_public_channel_id(const char* value) {
  set_has_public_channel_id();
  if (public_channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_channel_id_ = new ::std::string;
  }
  public_channel_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.ExMsg.public_channel_id)
}
inline void ExMsg::set_public_channel_id(const char* value, size_t size) {
  set_has_public_channel_id();
  if (public_channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_channel_id_ = new ::std::string;
  }
  public_channel_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.ExMsg.public_channel_id)
}
inline ::std::string* ExMsg::mutable_public_channel_id() {
  set_has_public_channel_id();
  if (public_channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_channel_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.game.ExMsg.public_channel_id)
  return public_channel_id_;
}
inline ::std::string* ExMsg::release_public_channel_id() {
  clear_has_public_channel_id();
  if (public_channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = public_channel_id_;
    public_channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExMsg::set_allocated_public_channel_id(::std::string* public_channel_id) {
  if (public_channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete public_channel_id_;
  }
  if (public_channel_id) {
    set_has_public_channel_id();
    public_channel_id_ = public_channel_id;
  } else {
    clear_has_public_channel_id();
    public_channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.ExMsg.public_channel_id)
}

// repeated string group_channel_ids = 4;
inline int ExMsg::group_channel_ids_size() const {
  return group_channel_ids_.size();
}
inline void ExMsg::clear_group_channel_ids() {
  group_channel_ids_.Clear();
}
inline const ::std::string& ExMsg::group_channel_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.ExMsg.group_channel_ids)
  return group_channel_ids_.Get(index);
}
inline ::std::string* ExMsg::mutable_group_channel_ids(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.ExMsg.group_channel_ids)
  return group_channel_ids_.Mutable(index);
}
inline void ExMsg::set_group_channel_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.game.ExMsg.group_channel_ids)
  group_channel_ids_.Mutable(index)->assign(value);
}
inline void ExMsg::set_group_channel_ids(int index, const char* value) {
  group_channel_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.ExMsg.group_channel_ids)
}
inline void ExMsg::set_group_channel_ids(int index, const char* value, size_t size) {
  group_channel_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.ExMsg.group_channel_ids)
}
inline ::std::string* ExMsg::add_group_channel_ids() {
  return group_channel_ids_.Add();
}
inline void ExMsg::add_group_channel_ids(const ::std::string& value) {
  group_channel_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.game.ExMsg.group_channel_ids)
}
inline void ExMsg::add_group_channel_ids(const char* value) {
  group_channel_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.game.ExMsg.group_channel_ids)
}
inline void ExMsg::add_group_channel_ids(const char* value, size_t size) {
  group_channel_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.game.ExMsg.group_channel_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExMsg::group_channel_ids() const {
  // @@protoc_insertion_point(field_list:proto.game.ExMsg.group_channel_ids)
  return group_channel_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ExMsg::mutable_group_channel_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.ExMsg.group_channel_ids)
  return &group_channel_ids_;
}

// repeated int32 m_voice_status = 5;
inline int ExMsg::m_voice_status_size() const {
  return m_voice_status_.size();
}
inline void ExMsg::clear_m_voice_status() {
  m_voice_status_.Clear();
}
inline ::google::protobuf::int32 ExMsg::m_voice_status(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.ExMsg.m_voice_status)
  return m_voice_status_.Get(index);
}
inline void ExMsg::set_m_voice_status(int index, ::google::protobuf::int32 value) {
  m_voice_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.ExMsg.m_voice_status)
}
inline void ExMsg::add_m_voice_status(::google::protobuf::int32 value) {
  m_voice_status_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.ExMsg.m_voice_status)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ExMsg::m_voice_status() const {
  // @@protoc_insertion_point(field_list:proto.game.ExMsg.m_voice_status)
  return m_voice_status_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ExMsg::mutable_m_voice_status() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.ExMsg.m_voice_status)
  return &m_voice_status_;
}

// -------------------------------------------------------------------

// AckGameScene

// optional int32 changetime = 1;
inline bool AckGameScene::has_changetime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckGameScene::set_has_changetime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckGameScene::clear_has_changetime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckGameScene::clear_changetime() {
  changetime_ = 0;
  clear_has_changetime();
}
inline ::google::protobuf::int32 AckGameScene::changetime() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.changetime)
  return changetime_;
}
inline void AckGameScene::set_changetime(::google::protobuf::int32 value) {
  set_has_changetime();
  changetime_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.changetime)
}

// optional int32 lacktypetime = 2;
inline bool AckGameScene::has_lacktypetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckGameScene::set_has_lacktypetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckGameScene::clear_has_lacktypetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckGameScene::clear_lacktypetime() {
  lacktypetime_ = 0;
  clear_has_lacktypetime();
}
inline ::google::protobuf::int32 AckGameScene::lacktypetime() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.lacktypetime)
  return lacktypetime_;
}
inline void AckGameScene::set_lacktypetime(::google::protobuf::int32 value) {
  set_has_lacktypetime();
  lacktypetime_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.lacktypetime)
}

// optional int32 outcardtime = 3;
inline bool AckGameScene::has_outcardtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckGameScene::set_has_outcardtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckGameScene::clear_has_outcardtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckGameScene::clear_outcardtime() {
  outcardtime_ = 0;
  clear_has_outcardtime();
}
inline ::google::protobuf::int32 AckGameScene::outcardtime() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.outcardtime)
  return outcardtime_;
}
inline void AckGameScene::set_outcardtime(::google::protobuf::int32 value) {
  set_has_outcardtime();
  outcardtime_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.outcardtime)
}

// optional int32 operatetime = 4;
inline bool AckGameScene::has_operatetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckGameScene::set_has_operatetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckGameScene::clear_has_operatetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckGameScene::clear_operatetime() {
  operatetime_ = 0;
  clear_has_operatetime();
}
inline ::google::protobuf::int32 AckGameScene::operatetime() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.operatetime)
  return operatetime_;
}
inline void AckGameScene::set_operatetime(::google::protobuf::int32 value) {
  set_has_operatetime();
  operatetime_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.operatetime)
}

// optional int32 basescore = 5;
inline bool AckGameScene::has_basescore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckGameScene::set_has_basescore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckGameScene::clear_has_basescore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckGameScene::clear_basescore() {
  basescore_ = 0;
  clear_has_basescore();
}
inline ::google::protobuf::int32 AckGameScene::basescore() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.basescore)
  return basescore_;
}
inline void AckGameScene::set_basescore(::google::protobuf::int32 value) {
  set_has_basescore();
  basescore_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.basescore)
}

// optional int32 delaytime = 6;
inline bool AckGameScene::has_delaytime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AckGameScene::set_has_delaytime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AckGameScene::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AckGameScene::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 AckGameScene::delaytime() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.delaytime)
  return delaytime_;
}
inline void AckGameScene::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.delaytime)
}

// optional int32 SceneStatus = 7;
inline bool AckGameScene::has_scenestatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AckGameScene::set_has_scenestatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AckGameScene::clear_has_scenestatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AckGameScene::clear_scenestatus() {
  scenestatus_ = 0;
  clear_has_scenestatus();
}
inline ::google::protobuf::int32 AckGameScene::scenestatus() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.SceneStatus)
  return scenestatus_;
}
inline void AckGameScene::set_scenestatus(::google::protobuf::int32 value) {
  set_has_scenestatus();
  scenestatus_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.SceneStatus)
}

// optional int32 LeftTime = 8;
inline bool AckGameScene::has_lefttime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AckGameScene::set_has_lefttime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AckGameScene::clear_has_lefttime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AckGameScene::clear_lefttime() {
  lefttime_ = 0;
  clear_has_lefttime();
}
inline ::google::protobuf::int32 AckGameScene::lefttime() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.LeftTime)
  return lefttime_;
}
inline void AckGameScene::set_lefttime(::google::protobuf::int32 value) {
  set_has_lefttime();
  lefttime_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.LeftTime)
}

// optional .proto.game.HandCards UserCard = 9;
inline bool AckGameScene::has_usercard() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AckGameScene::set_has_usercard() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AckGameScene::clear_has_usercard() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AckGameScene::clear_usercard() {
  if (usercard_ != NULL) usercard_->::proto::game::HandCards::Clear();
  clear_has_usercard();
}
inline const ::proto::game::HandCards& AckGameScene::usercard() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.UserCard)
  return usercard_ != NULL ? *usercard_ : *default_instance_->usercard_;
}
inline ::proto::game::HandCards* AckGameScene::mutable_usercard() {
  set_has_usercard();
  if (usercard_ == NULL) usercard_ = new ::proto::game::HandCards;
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameScene.UserCard)
  return usercard_;
}
inline ::proto::game::HandCards* AckGameScene::release_usercard() {
  clear_has_usercard();
  ::proto::game::HandCards* temp = usercard_;
  usercard_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_usercard(::proto::game::HandCards* usercard) {
  delete usercard_;
  usercard_ = usercard;
  if (usercard) {
    set_has_usercard();
  } else {
    clear_has_usercard();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckGameScene.UserCard)
}

// repeated int32 HandCardNums = 10;
inline int AckGameScene::handcardnums_size() const {
  return handcardnums_.size();
}
inline void AckGameScene::clear_handcardnums() {
  handcardnums_.Clear();
}
inline ::google::protobuf::int32 AckGameScene::handcardnums(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.HandCardNums)
  return handcardnums_.Get(index);
}
inline void AckGameScene::set_handcardnums(int index, ::google::protobuf::int32 value) {
  handcardnums_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.HandCardNums)
}
inline void AckGameScene::add_handcardnums(::google::protobuf::int32 value) {
  handcardnums_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckGameScene.HandCardNums)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameScene::handcardnums() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameScene.HandCardNums)
  return handcardnums_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameScene::mutable_handcardnums() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameScene.HandCardNums)
  return &handcardnums_;
}

// optional int32 CurOutCardUser = 11;
inline bool AckGameScene::has_curoutcarduser() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AckGameScene::set_has_curoutcarduser() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AckGameScene::clear_has_curoutcarduser() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AckGameScene::clear_curoutcarduser() {
  curoutcarduser_ = 0;
  clear_has_curoutcarduser();
}
inline ::google::protobuf::int32 AckGameScene::curoutcarduser() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.CurOutCardUser)
  return curoutcarduser_;
}
inline void AckGameScene::set_curoutcarduser(::google::protobuf::int32 value) {
  set_has_curoutcarduser();
  curoutcarduser_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.CurOutCardUser)
}

// repeated .proto.game.tagShowOutCard ShowCard = 12;
inline int AckGameScene::showcard_size() const {
  return showcard_.size();
}
inline void AckGameScene::clear_showcard() {
  showcard_.Clear();
}
inline const ::proto::game::tagShowOutCard& AckGameScene::showcard(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.ShowCard)
  return showcard_.Get(index);
}
inline ::proto::game::tagShowOutCard* AckGameScene::mutable_showcard(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameScene.ShowCard)
  return showcard_.Mutable(index);
}
inline ::proto::game::tagShowOutCard* AckGameScene::add_showcard() {
  // @@protoc_insertion_point(field_add:proto.game.AckGameScene.ShowCard)
  return showcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagShowOutCard >&
AckGameScene::showcard() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameScene.ShowCard)
  return showcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagShowOutCard >*
AckGameScene::mutable_showcard() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameScene.ShowCard)
  return &showcard_;
}

// optional int32 curOutCard = 13;
inline bool AckGameScene::has_curoutcard() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AckGameScene::set_has_curoutcard() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AckGameScene::clear_has_curoutcard() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AckGameScene::clear_curoutcard() {
  curoutcard_ = 0;
  clear_has_curoutcard();
}
inline ::google::protobuf::int32 AckGameScene::curoutcard() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.curOutCard)
  return curoutcard_;
}
inline void AckGameScene::set_curoutcard(::google::protobuf::int32 value) {
  set_has_curoutcard();
  curoutcard_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.curOutCard)
}

// repeated .proto.game.tagUserHuInfo HuInfo = 14;
inline int AckGameScene::huinfo_size() const {
  return huinfo_.size();
}
inline void AckGameScene::clear_huinfo() {
  huinfo_.Clear();
}
inline const ::proto::game::tagUserHuInfo& AckGameScene::huinfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.HuInfo)
  return huinfo_.Get(index);
}
inline ::proto::game::tagUserHuInfo* AckGameScene::mutable_huinfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameScene.HuInfo)
  return huinfo_.Mutable(index);
}
inline ::proto::game::tagUserHuInfo* AckGameScene::add_huinfo() {
  // @@protoc_insertion_point(field_add:proto.game.AckGameScene.HuInfo)
  return huinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagUserHuInfo >&
AckGameScene::huinfo() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameScene.HuInfo)
  return huinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagUserHuInfo >*
AckGameScene::mutable_huinfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameScene.HuInfo)
  return &huinfo_;
}

// repeated int32 TotalScore = 15;
inline int AckGameScene::totalscore_size() const {
  return totalscore_.size();
}
inline void AckGameScene::clear_totalscore() {
  totalscore_.Clear();
}
inline ::google::protobuf::int32 AckGameScene::totalscore(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.TotalScore)
  return totalscore_.Get(index);
}
inline void AckGameScene::set_totalscore(int index, ::google::protobuf::int32 value) {
  totalscore_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.TotalScore)
}
inline void AckGameScene::add_totalscore(::google::protobuf::int32 value) {
  totalscore_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckGameScene.TotalScore)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameScene::totalscore() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameScene.TotalScore)
  return totalscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameScene::mutable_totalscore() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameScene.TotalScore)
  return &totalscore_;
}

// repeated .proto.game.tagGroupCard GroupCard = 16;
inline int AckGameScene::groupcard_size() const {
  return groupcard_.size();
}
inline void AckGameScene::clear_groupcard() {
  groupcard_.Clear();
}
inline const ::proto::game::tagGroupCard& AckGameScene::groupcard(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.GroupCard)
  return groupcard_.Get(index);
}
inline ::proto::game::tagGroupCard* AckGameScene::mutable_groupcard(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameScene.GroupCard)
  return groupcard_.Mutable(index);
}
inline ::proto::game::tagGroupCard* AckGameScene::add_groupcard() {
  // @@protoc_insertion_point(field_add:proto.game.AckGameScene.GroupCard)
  return groupcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGroupCard >&
AckGameScene::groupcard() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameScene.GroupCard)
  return groupcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGroupCard >*
AckGameScene::mutable_groupcard() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameScene.GroupCard)
  return &groupcard_;
}

// optional int32 IsAutoHu = 17;
inline bool AckGameScene::has_isautohu() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void AckGameScene::set_has_isautohu() {
  _has_bits_[0] |= 0x00010000u;
}
inline void AckGameScene::clear_has_isautohu() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void AckGameScene::clear_isautohu() {
  isautohu_ = 0;
  clear_has_isautohu();
}
inline ::google::protobuf::int32 AckGameScene::isautohu() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.IsAutoHu)
  return isautohu_;
}
inline void AckGameScene::set_isautohu(::google::protobuf::int32 value) {
  set_has_isautohu();
  isautohu_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.IsAutoHu)
}

// optional int32 BankerChairid = 18;
inline bool AckGameScene::has_bankerchairid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void AckGameScene::set_has_bankerchairid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void AckGameScene::clear_has_bankerchairid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void AckGameScene::clear_bankerchairid() {
  bankerchairid_ = 0;
  clear_has_bankerchairid();
}
inline ::google::protobuf::int32 AckGameScene::bankerchairid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.BankerChairid)
  return bankerchairid_;
}
inline void AckGameScene::set_bankerchairid(::google::protobuf::int32 value) {
  set_has_bankerchairid();
  bankerchairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.BankerChairid)
}

// repeated int32 UserLackType = 19;
inline int AckGameScene::userlacktype_size() const {
  return userlacktype_.size();
}
inline void AckGameScene::clear_userlacktype() {
  userlacktype_.Clear();
}
inline ::google::protobuf::int32 AckGameScene::userlacktype(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.UserLackType)
  return userlacktype_.Get(index);
}
inline void AckGameScene::set_userlacktype(int index, ::google::protobuf::int32 value) {
  userlacktype_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.UserLackType)
}
inline void AckGameScene::add_userlacktype(::google::protobuf::int32 value) {
  userlacktype_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckGameScene.UserLackType)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameScene::userlacktype() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameScene.UserLackType)
  return userlacktype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameScene::mutable_userlacktype() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameScene.UserLackType)
  return &userlacktype_;
}

// optional int32 IscurGetCard = 20;
inline bool AckGameScene::has_iscurgetcard() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void AckGameScene::set_has_iscurgetcard() {
  _has_bits_[0] |= 0x00080000u;
}
inline void AckGameScene::clear_has_iscurgetcard() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void AckGameScene::clear_iscurgetcard() {
  iscurgetcard_ = 0;
  clear_has_iscurgetcard();
}
inline ::google::protobuf::int32 AckGameScene::iscurgetcard() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.IscurGetCard)
  return iscurgetcard_;
}
inline void AckGameScene::set_iscurgetcard(::google::protobuf::int32 value) {
  set_has_iscurgetcard();
  iscurgetcard_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.IscurGetCard)
}

// optional int32 Card = 21;
inline bool AckGameScene::has_card() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void AckGameScene::set_has_card() {
  _has_bits_[0] |= 0x00100000u;
}
inline void AckGameScene::clear_has_card() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void AckGameScene::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 AckGameScene::card() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.Card)
  return card_;
}
inline void AckGameScene::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.Card)
}

// optional int32 OpType = 22;
inline bool AckGameScene::has_optype() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void AckGameScene::set_has_optype() {
  _has_bits_[0] |= 0x00200000u;
}
inline void AckGameScene::clear_has_optype() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void AckGameScene::clear_optype() {
  optype_ = 0;
  clear_has_optype();
}
inline ::google::protobuf::int32 AckGameScene::optype() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.OpType)
  return optype_;
}
inline void AckGameScene::set_optype(::google::protobuf::int32 value) {
  set_has_optype();
  optype_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.OpType)
}

// repeated .proto.game.tagGangInfo GangInfo = 23;
inline int AckGameScene::ganginfo_size() const {
  return ganginfo_.size();
}
inline void AckGameScene::clear_ganginfo() {
  ganginfo_.Clear();
}
inline const ::proto::game::tagGangInfo& AckGameScene::ganginfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.GangInfo)
  return ganginfo_.Get(index);
}
inline ::proto::game::tagGangInfo* AckGameScene::mutable_ganginfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameScene.GangInfo)
  return ganginfo_.Mutable(index);
}
inline ::proto::game::tagGangInfo* AckGameScene::add_ganginfo() {
  // @@protoc_insertion_point(field_add:proto.game.AckGameScene.GangInfo)
  return ganginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >&
AckGameScene::ganginfo() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameScene.GangInfo)
  return ganginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >*
AckGameScene::mutable_ganginfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameScene.GangInfo)
  return &ganginfo_;
}

// repeated .proto.game.tagListenInfo ListenInfo = 24;
inline int AckGameScene::listeninfo_size() const {
  return listeninfo_.size();
}
inline void AckGameScene::clear_listeninfo() {
  listeninfo_.Clear();
}
inline const ::proto::game::tagListenInfo& AckGameScene::listeninfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.ListenInfo)
  return listeninfo_.Get(index);
}
inline ::proto::game::tagListenInfo* AckGameScene::mutable_listeninfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameScene.ListenInfo)
  return listeninfo_.Mutable(index);
}
inline ::proto::game::tagListenInfo* AckGameScene::add_listeninfo() {
  // @@protoc_insertion_point(field_add:proto.game.AckGameScene.ListenInfo)
  return listeninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
AckGameScene::listeninfo() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameScene.ListenInfo)
  return listeninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
AckGameScene::mutable_listeninfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameScene.ListenInfo)
  return &listeninfo_;
}

// repeated int32 OfflineState = 25;
inline int AckGameScene::offlinestate_size() const {
  return offlinestate_.size();
}
inline void AckGameScene::clear_offlinestate() {
  offlinestate_.Clear();
}
inline ::google::protobuf::int32 AckGameScene::offlinestate(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.OfflineState)
  return offlinestate_.Get(index);
}
inline void AckGameScene::set_offlinestate(int index, ::google::protobuf::int32 value) {
  offlinestate_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.OfflineState)
}
inline void AckGameScene::add_offlinestate(::google::protobuf::int32 value) {
  offlinestate_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckGameScene.OfflineState)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameScene::offlinestate() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameScene.OfflineState)
  return offlinestate_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameScene::mutable_offlinestate() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameScene.OfflineState)
  return &offlinestate_;
}

// optional int32 PoolCardLeftNums = 26;
inline bool AckGameScene::has_poolcardleftnums() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void AckGameScene::set_has_poolcardleftnums() {
  _has_bits_[0] |= 0x02000000u;
}
inline void AckGameScene::clear_has_poolcardleftnums() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void AckGameScene::clear_poolcardleftnums() {
  poolcardleftnums_ = 0;
  clear_has_poolcardleftnums();
}
inline ::google::protobuf::int32 AckGameScene::poolcardleftnums() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.PoolCardLeftNums)
  return poolcardleftnums_;
}
inline void AckGameScene::set_poolcardleftnums(::google::protobuf::int32 value) {
  set_has_poolcardleftnums();
  poolcardleftnums_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.PoolCardLeftNums)
}

// optional int32 preready_timer = 27;
inline bool AckGameScene::has_preready_timer() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void AckGameScene::set_has_preready_timer() {
  _has_bits_[0] |= 0x04000000u;
}
inline void AckGameScene::clear_has_preready_timer() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void AckGameScene::clear_preready_timer() {
  preready_timer_ = 0;
  clear_has_preready_timer();
}
inline ::google::protobuf::int32 AckGameScene::preready_timer() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.preready_timer)
  return preready_timer_;
}
inline void AckGameScene::set_preready_timer(::google::protobuf::int32 value) {
  set_has_preready_timer();
  preready_timer_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.preready_timer)
}

// optional int32 stand_money = 28;
inline bool AckGameScene::has_stand_money() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void AckGameScene::set_has_stand_money() {
  _has_bits_[0] |= 0x08000000u;
}
inline void AckGameScene::clear_has_stand_money() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void AckGameScene::clear_stand_money() {
  stand_money_ = 0;
  clear_has_stand_money();
}
inline ::google::protobuf::int32 AckGameScene::stand_money() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.stand_money)
  return stand_money_;
}
inline void AckGameScene::set_stand_money(::google::protobuf::int32 value) {
  set_has_stand_money();
  stand_money_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.stand_money)
}

// optional int32 HorseNum = 29;
inline bool AckGameScene::has_horsenum() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void AckGameScene::set_has_horsenum() {
  _has_bits_[0] |= 0x10000000u;
}
inline void AckGameScene::clear_has_horsenum() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void AckGameScene::clear_horsenum() {
  horsenum_ = 0;
  clear_has_horsenum();
}
inline ::google::protobuf::int32 AckGameScene::horsenum() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.HorseNum)
  return horsenum_;
}
inline void AckGameScene::set_horsenum(::google::protobuf::int32 value) {
  set_has_horsenum();
  horsenum_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.HorseNum)
}

// optional int32 isDisbandroom = 30;
inline bool AckGameScene::has_isdisbandroom() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void AckGameScene::set_has_isdisbandroom() {
  _has_bits_[0] |= 0x20000000u;
}
inline void AckGameScene::clear_has_isdisbandroom() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void AckGameScene::clear_isdisbandroom() {
  isdisbandroom_ = 0;
  clear_has_isdisbandroom();
}
inline ::google::protobuf::int32 AckGameScene::isdisbandroom() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.isDisbandroom)
  return isdisbandroom_;
}
inline void AckGameScene::set_isdisbandroom(::google::protobuf::int32 value) {
  set_has_isdisbandroom();
  isdisbandroom_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.isDisbandroom)
}

// optional .proto.game.AckDisbandApply Disbandinfo = 31;
inline bool AckGameScene::has_disbandinfo() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void AckGameScene::set_has_disbandinfo() {
  _has_bits_[0] |= 0x40000000u;
}
inline void AckGameScene::clear_has_disbandinfo() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void AckGameScene::clear_disbandinfo() {
  if (disbandinfo_ != NULL) disbandinfo_->::proto::game::AckDisbandApply::Clear();
  clear_has_disbandinfo();
}
inline const ::proto::game::AckDisbandApply& AckGameScene::disbandinfo() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.Disbandinfo)
  return disbandinfo_ != NULL ? *disbandinfo_ : *default_instance_->disbandinfo_;
}
inline ::proto::game::AckDisbandApply* AckGameScene::mutable_disbandinfo() {
  set_has_disbandinfo();
  if (disbandinfo_ == NULL) disbandinfo_ = new ::proto::game::AckDisbandApply;
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameScene.Disbandinfo)
  return disbandinfo_;
}
inline ::proto::game::AckDisbandApply* AckGameScene::release_disbandinfo() {
  clear_has_disbandinfo();
  ::proto::game::AckDisbandApply* temp = disbandinfo_;
  disbandinfo_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_disbandinfo(::proto::game::AckDisbandApply* disbandinfo) {
  delete disbandinfo_;
  disbandinfo_ = disbandinfo;
  if (disbandinfo) {
    set_has_disbandinfo();
  } else {
    clear_has_disbandinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckGameScene.Disbandinfo)
}

// repeated .proto.game.AckDisbandChooseBc UserDisbandstate = 32;
inline int AckGameScene::userdisbandstate_size() const {
  return userdisbandstate_.size();
}
inline void AckGameScene::clear_userdisbandstate() {
  userdisbandstate_.Clear();
}
inline const ::proto::game::AckDisbandChooseBc& AckGameScene::userdisbandstate(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.UserDisbandstate)
  return userdisbandstate_.Get(index);
}
inline ::proto::game::AckDisbandChooseBc* AckGameScene::mutable_userdisbandstate(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameScene.UserDisbandstate)
  return userdisbandstate_.Mutable(index);
}
inline ::proto::game::AckDisbandChooseBc* AckGameScene::add_userdisbandstate() {
  // @@protoc_insertion_point(field_add:proto.game.AckGameScene.UserDisbandstate)
  return userdisbandstate_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::AckDisbandChooseBc >&
AckGameScene::userdisbandstate() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameScene.UserDisbandstate)
  return userdisbandstate_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::AckDisbandChooseBc >*
AckGameScene::mutable_userdisbandstate() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameScene.UserDisbandstate)
  return &userdisbandstate_;
}

// repeated .proto.game.AckUserOnlineState UserOnlinestate = 33;
inline int AckGameScene::useronlinestate_size() const {
  return useronlinestate_.size();
}
inline void AckGameScene::clear_useronlinestate() {
  useronlinestate_.Clear();
}
inline const ::proto::game::AckUserOnlineState& AckGameScene::useronlinestate(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.UserOnlinestate)
  return useronlinestate_.Get(index);
}
inline ::proto::game::AckUserOnlineState* AckGameScene::mutable_useronlinestate(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameScene.UserOnlinestate)
  return useronlinestate_.Mutable(index);
}
inline ::proto::game::AckUserOnlineState* AckGameScene::add_useronlinestate() {
  // @@protoc_insertion_point(field_add:proto.game.AckGameScene.UserOnlinestate)
  return useronlinestate_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::AckUserOnlineState >&
AckGameScene::useronlinestate() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameScene.UserOnlinestate)
  return useronlinestate_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::AckUserOnlineState >*
AckGameScene::mutable_useronlinestate() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameScene.UserOnlinestate)
  return &useronlinestate_;
}

// repeated .proto.game.AckUserOvertimeState UserOvertime = 34;
inline int AckGameScene::userovertime_size() const {
  return userovertime_.size();
}
inline void AckGameScene::clear_userovertime() {
  userovertime_.Clear();
}
inline const ::proto::game::AckUserOvertimeState& AckGameScene::userovertime(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.UserOvertime)
  return userovertime_.Get(index);
}
inline ::proto::game::AckUserOvertimeState* AckGameScene::mutable_userovertime(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameScene.UserOvertime)
  return userovertime_.Mutable(index);
}
inline ::proto::game::AckUserOvertimeState* AckGameScene::add_userovertime() {
  // @@protoc_insertion_point(field_add:proto.game.AckGameScene.UserOvertime)
  return userovertime_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::AckUserOvertimeState >&
AckGameScene::userovertime() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameScene.UserOvertime)
  return userovertime_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::AckUserOvertimeState >*
AckGameScene::mutable_userovertime() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameScene.UserOvertime)
  return &userovertime_;
}

// optional bool IsZhuanZhuanRoom = 35;
inline bool AckGameScene::has_iszhuanzhuanroom() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void AckGameScene::set_has_iszhuanzhuanroom() {
  _has_bits_[1] |= 0x00000004u;
}
inline void AckGameScene::clear_has_iszhuanzhuanroom() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void AckGameScene::clear_iszhuanzhuanroom() {
  iszhuanzhuanroom_ = false;
  clear_has_iszhuanzhuanroom();
}
inline bool AckGameScene::iszhuanzhuanroom() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.IsZhuanZhuanRoom)
  return iszhuanzhuanroom_;
}
inline void AckGameScene::set_iszhuanzhuanroom(bool value) {
  set_has_iszhuanzhuanroom();
  iszhuanzhuanroom_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.IsZhuanZhuanRoom)
}

// optional .proto.game.tagReadyInfo UserReadyInfo = 36;
inline bool AckGameScene::has_userreadyinfo() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void AckGameScene::set_has_userreadyinfo() {
  _has_bits_[1] |= 0x00000008u;
}
inline void AckGameScene::clear_has_userreadyinfo() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void AckGameScene::clear_userreadyinfo() {
  if (userreadyinfo_ != NULL) userreadyinfo_->::proto::game::tagReadyInfo::Clear();
  clear_has_userreadyinfo();
}
inline const ::proto::game::tagReadyInfo& AckGameScene::userreadyinfo() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.UserReadyInfo)
  return userreadyinfo_ != NULL ? *userreadyinfo_ : *default_instance_->userreadyinfo_;
}
inline ::proto::game::tagReadyInfo* AckGameScene::mutable_userreadyinfo() {
  set_has_userreadyinfo();
  if (userreadyinfo_ == NULL) userreadyinfo_ = new ::proto::game::tagReadyInfo;
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameScene.UserReadyInfo)
  return userreadyinfo_;
}
inline ::proto::game::tagReadyInfo* AckGameScene::release_userreadyinfo() {
  clear_has_userreadyinfo();
  ::proto::game::tagReadyInfo* temp = userreadyinfo_;
  userreadyinfo_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_userreadyinfo(::proto::game::tagReadyInfo* userreadyinfo) {
  delete userreadyinfo_;
  userreadyinfo_ = userreadyinfo;
  if (userreadyinfo) {
    set_has_userreadyinfo();
  } else {
    clear_has_userreadyinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckGameScene.UserReadyInfo)
}

// optional int32 roomGolden = 37;
inline bool AckGameScene::has_roomgolden() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void AckGameScene::set_has_roomgolden() {
  _has_bits_[1] |= 0x00000010u;
}
inline void AckGameScene::clear_has_roomgolden() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void AckGameScene::clear_roomgolden() {
  roomgolden_ = 0;
  clear_has_roomgolden();
}
inline ::google::protobuf::int32 AckGameScene::roomgolden() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.roomGolden)
  return roomgolden_;
}
inline void AckGameScene::set_roomgolden(::google::protobuf::int32 value) {
  set_has_roomgolden();
  roomgolden_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.roomGolden)
}

// repeated int32 RoomConfigID = 38;
inline int AckGameScene::roomconfigid_size() const {
  return roomconfigid_.size();
}
inline void AckGameScene::clear_roomconfigid() {
  roomconfigid_.Clear();
}
inline ::google::protobuf::int32 AckGameScene::roomconfigid(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.RoomConfigID)
  return roomconfigid_.Get(index);
}
inline void AckGameScene::set_roomconfigid(int index, ::google::protobuf::int32 value) {
  roomconfigid_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.RoomConfigID)
}
inline void AckGameScene::add_roomconfigid(::google::protobuf::int32 value) {
  roomconfigid_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckGameScene.RoomConfigID)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameScene::roomconfigid() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameScene.RoomConfigID)
  return roomconfigid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameScene::mutable_roomconfigid() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameScene.RoomConfigID)
  return &roomconfigid_;
}

// optional .proto.game.TotalRoundScore totalRoundScore = 39;
inline bool AckGameScene::has_totalroundscore() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void AckGameScene::set_has_totalroundscore() {
  _has_bits_[1] |= 0x00000040u;
}
inline void AckGameScene::clear_has_totalroundscore() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void AckGameScene::clear_totalroundscore() {
  if (totalroundscore_ != NULL) totalroundscore_->::proto::game::TotalRoundScore::Clear();
  clear_has_totalroundscore();
}
inline const ::proto::game::TotalRoundScore& AckGameScene::totalroundscore() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.totalRoundScore)
  return totalroundscore_ != NULL ? *totalroundscore_ : *default_instance_->totalroundscore_;
}
inline ::proto::game::TotalRoundScore* AckGameScene::mutable_totalroundscore() {
  set_has_totalroundscore();
  if (totalroundscore_ == NULL) totalroundscore_ = new ::proto::game::TotalRoundScore;
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameScene.totalRoundScore)
  return totalroundscore_;
}
inline ::proto::game::TotalRoundScore* AckGameScene::release_totalroundscore() {
  clear_has_totalroundscore();
  ::proto::game::TotalRoundScore* temp = totalroundscore_;
  totalroundscore_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_totalroundscore(::proto::game::TotalRoundScore* totalroundscore) {
  delete totalroundscore_;
  totalroundscore_ = totalroundscore;
  if (totalroundscore) {
    set_has_totalroundscore();
  } else {
    clear_has_totalroundscore();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckGameScene.totalRoundScore)
}

// optional int32 encrypt_code = 40;
inline bool AckGameScene::has_encrypt_code() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void AckGameScene::set_has_encrypt_code() {
  _has_bits_[1] |= 0x00000080u;
}
inline void AckGameScene::clear_has_encrypt_code() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void AckGameScene::clear_encrypt_code() {
  encrypt_code_ = 0;
  clear_has_encrypt_code();
}
inline ::google::protobuf::int32 AckGameScene::encrypt_code() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.encrypt_code)
  return encrypt_code_;
}
inline void AckGameScene::set_encrypt_code(::google::protobuf::int32 value) {
  set_has_encrypt_code();
  encrypt_code_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.encrypt_code)
}

// optional int32 OpType2 = 41;
inline bool AckGameScene::has_optype2() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void AckGameScene::set_has_optype2() {
  _has_bits_[1] |= 0x00000100u;
}
inline void AckGameScene::clear_has_optype2() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void AckGameScene::clear_optype2() {
  optype2_ = 0;
  clear_has_optype2();
}
inline ::google::protobuf::int32 AckGameScene::optype2() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.OpType2)
  return optype2_;
}
inline void AckGameScene::set_optype2(::google::protobuf::int32 value) {
  set_has_optype2();
  optype2_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.OpType2)
}

// optional string md5 = 42;
inline bool AckGameScene::has_md5() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void AckGameScene::set_has_md5() {
  _has_bits_[1] |= 0x00000200u;
}
inline void AckGameScene::clear_has_md5() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void AckGameScene::clear_md5() {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_->clear();
  }
  clear_has_md5();
}
inline const ::std::string& AckGameScene::md5() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.md5)
  return *md5_;
}
inline void AckGameScene::set_md5(const ::std::string& value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.md5)
}
inline void AckGameScene::set_md5(const char* value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.AckGameScene.md5)
}
inline void AckGameScene::set_md5(const char* value, size_t size) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.AckGameScene.md5)
}
inline ::std::string* AckGameScene::mutable_md5() {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameScene.md5)
  return md5_;
}
inline ::std::string* AckGameScene::release_md5() {
  clear_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = md5_;
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AckGameScene::set_allocated_md5(::std::string* md5) {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete md5_;
  }
  if (md5) {
    set_has_md5();
    md5_ = md5;
  } else {
    clear_has_md5();
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckGameScene.md5)
}

// optional int32 operateid = 43;
inline bool AckGameScene::has_operateid() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void AckGameScene::set_has_operateid() {
  _has_bits_[1] |= 0x00000400u;
}
inline void AckGameScene::clear_has_operateid() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void AckGameScene::clear_operateid() {
  operateid_ = 0;
  clear_has_operateid();
}
inline ::google::protobuf::int32 AckGameScene::operateid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.operateid)
  return operateid_;
}
inline void AckGameScene::set_operateid(::google::protobuf::int32 value) {
  set_has_operateid();
  operateid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.operateid)
}

// optional int32 auto_disband_state = 44;
inline bool AckGameScene::has_auto_disband_state() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void AckGameScene::set_has_auto_disband_state() {
  _has_bits_[1] |= 0x00000800u;
}
inline void AckGameScene::clear_has_auto_disband_state() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void AckGameScene::clear_auto_disband_state() {
  auto_disband_state_ = 0;
  clear_has_auto_disband_state();
}
inline ::google::protobuf::int32 AckGameScene::auto_disband_state() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.auto_disband_state)
  return auto_disband_state_;
}
inline void AckGameScene::set_auto_disband_state(::google::protobuf::int32 value) {
  set_has_auto_disband_state();
  auto_disband_state_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.auto_disband_state)
}

// repeated int32 auto_disband_chairids = 45;
inline int AckGameScene::auto_disband_chairids_size() const {
  return auto_disband_chairids_.size();
}
inline void AckGameScene::clear_auto_disband_chairids() {
  auto_disband_chairids_.Clear();
}
inline ::google::protobuf::int32 AckGameScene::auto_disband_chairids(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.auto_disband_chairids)
  return auto_disband_chairids_.Get(index);
}
inline void AckGameScene::set_auto_disband_chairids(int index, ::google::protobuf::int32 value) {
  auto_disband_chairids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.auto_disband_chairids)
}
inline void AckGameScene::add_auto_disband_chairids(::google::protobuf::int32 value) {
  auto_disband_chairids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckGameScene.auto_disband_chairids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameScene::auto_disband_chairids() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameScene.auto_disband_chairids)
  return auto_disband_chairids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameScene::mutable_auto_disband_chairids() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameScene.auto_disband_chairids)
  return &auto_disband_chairids_;
}

// optional int32 auto_disband_remaintime = 46;
inline bool AckGameScene::has_auto_disband_remaintime() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void AckGameScene::set_has_auto_disband_remaintime() {
  _has_bits_[1] |= 0x00002000u;
}
inline void AckGameScene::clear_has_auto_disband_remaintime() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void AckGameScene::clear_auto_disband_remaintime() {
  auto_disband_remaintime_ = 0;
  clear_has_auto_disband_remaintime();
}
inline ::google::protobuf::int32 AckGameScene::auto_disband_remaintime() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.auto_disband_remaintime)
  return auto_disband_remaintime_;
}
inline void AckGameScene::set_auto_disband_remaintime(::google::protobuf::int32 value) {
  set_has_auto_disband_remaintime();
  auto_disband_remaintime_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.auto_disband_remaintime)
}

// optional int32 auto_disband_time = 47;
inline bool AckGameScene::has_auto_disband_time() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void AckGameScene::set_has_auto_disband_time() {
  _has_bits_[1] |= 0x00004000u;
}
inline void AckGameScene::clear_has_auto_disband_time() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void AckGameScene::clear_auto_disband_time() {
  auto_disband_time_ = 0;
  clear_has_auto_disband_time();
}
inline ::google::protobuf::int32 AckGameScene::auto_disband_time() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.auto_disband_time)
  return auto_disband_time_;
}
inline void AckGameScene::set_auto_disband_time(::google::protobuf::int32 value) {
  set_has_auto_disband_time();
  auto_disband_time_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.auto_disband_time)
}

// optional int32 totalcount = 48;
inline bool AckGameScene::has_totalcount() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void AckGameScene::set_has_totalcount() {
  _has_bits_[1] |= 0x00008000u;
}
inline void AckGameScene::clear_has_totalcount() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void AckGameScene::clear_totalcount() {
  totalcount_ = 0;
  clear_has_totalcount();
}
inline ::google::protobuf::int32 AckGameScene::totalcount() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.totalcount)
  return totalcount_;
}
inline void AckGameScene::set_totalcount(::google::protobuf::int32 value) {
  set_has_totalcount();
  totalcount_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.totalcount)
}

// optional int32 currentcount = 49;
inline bool AckGameScene::has_currentcount() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void AckGameScene::set_has_currentcount() {
  _has_bits_[1] |= 0x00010000u;
}
inline void AckGameScene::clear_has_currentcount() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void AckGameScene::clear_currentcount() {
  currentcount_ = 0;
  clear_has_currentcount();
}
inline ::google::protobuf::int32 AckGameScene::currentcount() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.currentcount)
  return currentcount_;
}
inline void AckGameScene::set_currentcount(::google::protobuf::int32 value) {
  set_has_currentcount();
  currentcount_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.currentcount)
}

// repeated int32 userchangemode = 50;
inline int AckGameScene::userchangemode_size() const {
  return userchangemode_.size();
}
inline void AckGameScene::clear_userchangemode() {
  userchangemode_.Clear();
}
inline ::google::protobuf::int32 AckGameScene::userchangemode(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.userchangemode)
  return userchangemode_.Get(index);
}
inline void AckGameScene::set_userchangemode(int index, ::google::protobuf::int32 value) {
  userchangemode_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckGameScene.userchangemode)
}
inline void AckGameScene::add_userchangemode(::google::protobuf::int32 value) {
  userchangemode_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckGameScene.userchangemode)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameScene::userchangemode() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameScene.userchangemode)
  return userchangemode_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameScene::mutable_userchangemode() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameScene.userchangemode)
  return &userchangemode_;
}

// optional .proto.game.ExMsg msg = 51;
inline bool AckGameScene::has_msg() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void AckGameScene::set_has_msg() {
  _has_bits_[1] |= 0x00040000u;
}
inline void AckGameScene::clear_has_msg() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void AckGameScene::clear_msg() {
  if (msg_ != NULL) msg_->::proto::game::ExMsg::Clear();
  clear_has_msg();
}
inline const ::proto::game::ExMsg& AckGameScene::msg() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.msg)
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::proto::game::ExMsg* AckGameScene::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) msg_ = new ::proto::game::ExMsg;
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameScene.msg)
  return msg_;
}
inline ::proto::game::ExMsg* AckGameScene::release_msg() {
  clear_has_msg();
  ::proto::game::ExMsg* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_msg(::proto::game::ExMsg* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckGameScene.msg)
}

// repeated .proto.game.CardArr cardList = 60;
inline int AckGameScene::cardlist_size() const {
  return cardlist_.size();
}
inline void AckGameScene::clear_cardlist() {
  cardlist_.Clear();
}
inline const ::proto::game::CardArr& AckGameScene::cardlist(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.cardList)
  return cardlist_.Get(index);
}
inline ::proto::game::CardArr* AckGameScene::mutable_cardlist(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameScene.cardList)
  return cardlist_.Mutable(index);
}
inline ::proto::game::CardArr* AckGameScene::add_cardlist() {
  // @@protoc_insertion_point(field_add:proto.game.AckGameScene.cardList)
  return cardlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::CardArr >&
AckGameScene::cardlist() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameScene.cardList)
  return cardlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::CardArr >*
AckGameScene::mutable_cardlist() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameScene.cardList)
  return &cardlist_;
}

// optional .proto.game.TestSvrConf test_svr_conf = 61;
inline bool AckGameScene::has_test_svr_conf() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void AckGameScene::set_has_test_svr_conf() {
  _has_bits_[1] |= 0x00100000u;
}
inline void AckGameScene::clear_has_test_svr_conf() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void AckGameScene::clear_test_svr_conf() {
  if (test_svr_conf_ != NULL) test_svr_conf_->::proto::game::TestSvrConf::Clear();
  clear_has_test_svr_conf();
}
inline const ::proto::game::TestSvrConf& AckGameScene::test_svr_conf() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.test_svr_conf)
  return test_svr_conf_ != NULL ? *test_svr_conf_ : *default_instance_->test_svr_conf_;
}
inline ::proto::game::TestSvrConf* AckGameScene::mutable_test_svr_conf() {
  set_has_test_svr_conf();
  if (test_svr_conf_ == NULL) test_svr_conf_ = new ::proto::game::TestSvrConf;
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameScene.test_svr_conf)
  return test_svr_conf_;
}
inline ::proto::game::TestSvrConf* AckGameScene::release_test_svr_conf() {
  clear_has_test_svr_conf();
  ::proto::game::TestSvrConf* temp = test_svr_conf_;
  test_svr_conf_ = NULL;
  return temp;
}
inline void AckGameScene::set_allocated_test_svr_conf(::proto::game::TestSvrConf* test_svr_conf) {
  delete test_svr_conf_;
  test_svr_conf_ = test_svr_conf;
  if (test_svr_conf) {
    set_has_test_svr_conf();
  } else {
    clear_has_test_svr_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckGameScene.test_svr_conf)
}

// repeated .proto.game.DaAnTing daan_ting = 80;
inline int AckGameScene::daan_ting_size() const {
  return daan_ting_.size();
}
inline void AckGameScene::clear_daan_ting() {
  daan_ting_.Clear();
}
inline const ::proto::game::DaAnTing& AckGameScene::daan_ting(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameScene.daan_ting)
  return daan_ting_.Get(index);
}
inline ::proto::game::DaAnTing* AckGameScene::mutable_daan_ting(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameScene.daan_ting)
  return daan_ting_.Mutable(index);
}
inline ::proto::game::DaAnTing* AckGameScene::add_daan_ting() {
  // @@protoc_insertion_point(field_add:proto.game.AckGameScene.daan_ting)
  return daan_ting_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::DaAnTing >&
AckGameScene::daan_ting() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameScene.daan_ting)
  return daan_ting_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::DaAnTing >*
AckGameScene::mutable_daan_ting() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameScene.daan_ting)
  return &daan_ting_;
}

// -------------------------------------------------------------------

// TestSvrConf

// optional bool client_anti_cheat = 1;
inline bool TestSvrConf::has_client_anti_cheat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestSvrConf::set_has_client_anti_cheat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestSvrConf::clear_has_client_anti_cheat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestSvrConf::clear_client_anti_cheat() {
  client_anti_cheat_ = false;
  clear_has_client_anti_cheat();
}
inline bool TestSvrConf::client_anti_cheat() const {
  // @@protoc_insertion_point(field_get:proto.game.TestSvrConf.client_anti_cheat)
  return client_anti_cheat_;
}
inline void TestSvrConf::set_client_anti_cheat(bool value) {
  set_has_client_anti_cheat();
  client_anti_cheat_ = value;
  // @@protoc_insertion_point(field_set:proto.game.TestSvrConf.client_anti_cheat)
}

// -------------------------------------------------------------------

// AckUserReady

// repeated int32 ready = 1;
inline int AckUserReady::ready_size() const {
  return ready_.size();
}
inline void AckUserReady::clear_ready() {
  ready_.Clear();
}
inline ::google::protobuf::int32 AckUserReady::ready(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserReady.ready)
  return ready_.Get(index);
}
inline void AckUserReady::set_ready(int index, ::google::protobuf::int32 value) {
  ready_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckUserReady.ready)
}
inline void AckUserReady::add_ready(::google::protobuf::int32 value) {
  ready_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckUserReady.ready)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckUserReady::ready() const {
  // @@protoc_insertion_point(field_list:proto.game.AckUserReady.ready)
  return ready_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckUserReady::mutable_ready() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckUserReady.ready)
  return &ready_;
}

// -------------------------------------------------------------------

// AckGameStart

// required int32 ChairID = 1;
inline bool AckGameStart::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckGameStart::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckGameStart::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckGameStart::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckGameStart::chairid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameStart.ChairID)
  return chairid_;
}
inline void AckGameStart::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameStart.ChairID)
}

// optional int32 IsChangBanker = 2;
inline bool AckGameStart::has_ischangbanker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckGameStart::set_has_ischangbanker() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckGameStart::clear_has_ischangbanker() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckGameStart::clear_ischangbanker() {
  ischangbanker_ = 0;
  clear_has_ischangbanker();
}
inline ::google::protobuf::int32 AckGameStart::ischangbanker() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameStart.IsChangBanker)
  return ischangbanker_;
}
inline void AckGameStart::set_ischangbanker(::google::protobuf::int32 value) {
  set_has_ischangbanker();
  ischangbanker_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameStart.IsChangBanker)
}

// repeated int32 TouZiInfo = 3;
inline int AckGameStart::touziinfo_size() const {
  return touziinfo_.size();
}
inline void AckGameStart::clear_touziinfo() {
  touziinfo_.Clear();
}
inline ::google::protobuf::int32 AckGameStart::touziinfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameStart.TouZiInfo)
  return touziinfo_.Get(index);
}
inline void AckGameStart::set_touziinfo(int index, ::google::protobuf::int32 value) {
  touziinfo_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckGameStart.TouZiInfo)
}
inline void AckGameStart::add_touziinfo(::google::protobuf::int32 value) {
  touziinfo_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckGameStart.TouZiInfo)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameStart::touziinfo() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameStart.TouZiInfo)
  return touziinfo_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameStart::mutable_touziinfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameStart.TouZiInfo)
  return &touziinfo_;
}

// optional int32 totalcount = 4;
inline bool AckGameStart::has_totalcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckGameStart::set_has_totalcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckGameStart::clear_has_totalcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckGameStart::clear_totalcount() {
  totalcount_ = 0;
  clear_has_totalcount();
}
inline ::google::protobuf::int32 AckGameStart::totalcount() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameStart.totalcount)
  return totalcount_;
}
inline void AckGameStart::set_totalcount(::google::protobuf::int32 value) {
  set_has_totalcount();
  totalcount_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameStart.totalcount)
}

// optional int32 currentcount = 5;
inline bool AckGameStart::has_currentcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckGameStart::set_has_currentcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckGameStart::clear_has_currentcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckGameStart::clear_currentcount() {
  currentcount_ = 0;
  clear_has_currentcount();
}
inline ::google::protobuf::int32 AckGameStart::currentcount() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameStart.currentcount)
  return currentcount_;
}
inline void AckGameStart::set_currentcount(::google::protobuf::int32 value) {
  set_has_currentcount();
  currentcount_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameStart.currentcount)
}

// -------------------------------------------------------------------

// AckFirstHandCard

// optional .proto.game.HandCards UserCard = 1;
inline bool AckFirstHandCard::has_usercard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckFirstHandCard::set_has_usercard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckFirstHandCard::clear_has_usercard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckFirstHandCard::clear_usercard() {
  if (usercard_ != NULL) usercard_->::proto::game::HandCards::Clear();
  clear_has_usercard();
}
inline const ::proto::game::HandCards& AckFirstHandCard::usercard() const {
  // @@protoc_insertion_point(field_get:proto.game.AckFirstHandCard.UserCard)
  return usercard_ != NULL ? *usercard_ : *default_instance_->usercard_;
}
inline ::proto::game::HandCards* AckFirstHandCard::mutable_usercard() {
  set_has_usercard();
  if (usercard_ == NULL) usercard_ = new ::proto::game::HandCards;
  // @@protoc_insertion_point(field_mutable:proto.game.AckFirstHandCard.UserCard)
  return usercard_;
}
inline ::proto::game::HandCards* AckFirstHandCard::release_usercard() {
  clear_has_usercard();
  ::proto::game::HandCards* temp = usercard_;
  usercard_ = NULL;
  return temp;
}
inline void AckFirstHandCard::set_allocated_usercard(::proto::game::HandCards* usercard) {
  delete usercard_;
  usercard_ = usercard;
  if (usercard) {
    set_has_usercard();
  } else {
    clear_has_usercard();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckFirstHandCard.UserCard)
}

// repeated int32 HandCardNums = 2;
inline int AckFirstHandCard::handcardnums_size() const {
  return handcardnums_.size();
}
inline void AckFirstHandCard::clear_handcardnums() {
  handcardnums_.Clear();
}
inline ::google::protobuf::int32 AckFirstHandCard::handcardnums(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckFirstHandCard.HandCardNums)
  return handcardnums_.Get(index);
}
inline void AckFirstHandCard::set_handcardnums(int index, ::google::protobuf::int32 value) {
  handcardnums_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckFirstHandCard.HandCardNums)
}
inline void AckFirstHandCard::add_handcardnums(::google::protobuf::int32 value) {
  handcardnums_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckFirstHandCard.HandCardNums)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckFirstHandCard::handcardnums() const {
  // @@protoc_insertion_point(field_list:proto.game.AckFirstHandCard.HandCardNums)
  return handcardnums_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckFirstHandCard::mutable_handcardnums() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckFirstHandCard.HandCardNums)
  return &handcardnums_;
}

// optional int32 CardNum = 3;
inline bool AckFirstHandCard::has_cardnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckFirstHandCard::set_has_cardnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckFirstHandCard::clear_has_cardnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckFirstHandCard::clear_cardnum() {
  cardnum_ = 0;
  clear_has_cardnum();
}
inline ::google::protobuf::int32 AckFirstHandCard::cardnum() const {
  // @@protoc_insertion_point(field_get:proto.game.AckFirstHandCard.CardNum)
  return cardnum_;
}
inline void AckFirstHandCard::set_cardnum(::google::protobuf::int32 value) {
  set_has_cardnum();
  cardnum_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckFirstHandCard.CardNum)
}

// optional int32 encrypt_code = 4;
inline bool AckFirstHandCard::has_encrypt_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckFirstHandCard::set_has_encrypt_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckFirstHandCard::clear_has_encrypt_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckFirstHandCard::clear_encrypt_code() {
  encrypt_code_ = 0;
  clear_has_encrypt_code();
}
inline ::google::protobuf::int32 AckFirstHandCard::encrypt_code() const {
  // @@protoc_insertion_point(field_get:proto.game.AckFirstHandCard.encrypt_code)
  return encrypt_code_;
}
inline void AckFirstHandCard::set_encrypt_code(::google::protobuf::int32 value) {
  set_has_encrypt_code();
  encrypt_code_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckFirstHandCard.encrypt_code)
}

// optional string md5 = 5;
inline bool AckFirstHandCard::has_md5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckFirstHandCard::set_has_md5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckFirstHandCard::clear_has_md5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckFirstHandCard::clear_md5() {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_->clear();
  }
  clear_has_md5();
}
inline const ::std::string& AckFirstHandCard::md5() const {
  // @@protoc_insertion_point(field_get:proto.game.AckFirstHandCard.md5)
  return *md5_;
}
inline void AckFirstHandCard::set_md5(const ::std::string& value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
  // @@protoc_insertion_point(field_set:proto.game.AckFirstHandCard.md5)
}
inline void AckFirstHandCard::set_md5(const char* value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.AckFirstHandCard.md5)
}
inline void AckFirstHandCard::set_md5(const char* value, size_t size) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.AckFirstHandCard.md5)
}
inline ::std::string* AckFirstHandCard::mutable_md5() {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.game.AckFirstHandCard.md5)
  return md5_;
}
inline ::std::string* AckFirstHandCard::release_md5() {
  clear_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = md5_;
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AckFirstHandCard::set_allocated_md5(::std::string* md5) {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete md5_;
  }
  if (md5) {
    set_has_md5();
    md5_ = md5;
  } else {
    clear_has_md5();
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckFirstHandCard.md5)
}

// optional int32 first_get_card = 6;
inline bool AckFirstHandCard::has_first_get_card() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AckFirstHandCard::set_has_first_get_card() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AckFirstHandCard::clear_has_first_get_card() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AckFirstHandCard::clear_first_get_card() {
  first_get_card_ = 0;
  clear_has_first_get_card();
}
inline ::google::protobuf::int32 AckFirstHandCard::first_get_card() const {
  // @@protoc_insertion_point(field_get:proto.game.AckFirstHandCard.first_get_card)
  return first_get_card_;
}
inline void AckFirstHandCard::set_first_get_card(::google::protobuf::int32 value) {
  set_has_first_get_card();
  first_get_card_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckFirstHandCard.first_get_card)
}

// optional int32 voice_room = 7;
inline bool AckFirstHandCard::has_voice_room() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AckFirstHandCard::set_has_voice_room() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AckFirstHandCard::clear_has_voice_room() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AckFirstHandCard::clear_voice_room() {
  voice_room_ = 0;
  clear_has_voice_room();
}
inline ::google::protobuf::int32 AckFirstHandCard::voice_room() const {
  // @@protoc_insertion_point(field_get:proto.game.AckFirstHandCard.voice_room)
  return voice_room_;
}
inline void AckFirstHandCard::set_voice_room(::google::protobuf::int32 value) {
  set_has_voice_room();
  voice_room_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckFirstHandCard.voice_room)
}

// optional string public_channel_id = 8;
inline bool AckFirstHandCard::has_public_channel_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AckFirstHandCard::set_has_public_channel_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AckFirstHandCard::clear_has_public_channel_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AckFirstHandCard::clear_public_channel_id() {
  if (public_channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_channel_id_->clear();
  }
  clear_has_public_channel_id();
}
inline const ::std::string& AckFirstHandCard::public_channel_id() const {
  // @@protoc_insertion_point(field_get:proto.game.AckFirstHandCard.public_channel_id)
  return *public_channel_id_;
}
inline void AckFirstHandCard::set_public_channel_id(const ::std::string& value) {
  set_has_public_channel_id();
  if (public_channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_channel_id_ = new ::std::string;
  }
  public_channel_id_->assign(value);
  // @@protoc_insertion_point(field_set:proto.game.AckFirstHandCard.public_channel_id)
}
inline void AckFirstHandCard::set_public_channel_id(const char* value) {
  set_has_public_channel_id();
  if (public_channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_channel_id_ = new ::std::string;
  }
  public_channel_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.AckFirstHandCard.public_channel_id)
}
inline void AckFirstHandCard::set_public_channel_id(const char* value, size_t size) {
  set_has_public_channel_id();
  if (public_channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_channel_id_ = new ::std::string;
  }
  public_channel_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.AckFirstHandCard.public_channel_id)
}
inline ::std::string* AckFirstHandCard::mutable_public_channel_id() {
  set_has_public_channel_id();
  if (public_channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    public_channel_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.game.AckFirstHandCard.public_channel_id)
  return public_channel_id_;
}
inline ::std::string* AckFirstHandCard::release_public_channel_id() {
  clear_has_public_channel_id();
  if (public_channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = public_channel_id_;
    public_channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AckFirstHandCard::set_allocated_public_channel_id(::std::string* public_channel_id) {
  if (public_channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete public_channel_id_;
  }
  if (public_channel_id) {
    set_has_public_channel_id();
    public_channel_id_ = public_channel_id;
  } else {
    clear_has_public_channel_id();
    public_channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckFirstHandCard.public_channel_id)
}

// repeated string group_channel_ids = 9;
inline int AckFirstHandCard::group_channel_ids_size() const {
  return group_channel_ids_.size();
}
inline void AckFirstHandCard::clear_group_channel_ids() {
  group_channel_ids_.Clear();
}
inline const ::std::string& AckFirstHandCard::group_channel_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckFirstHandCard.group_channel_ids)
  return group_channel_ids_.Get(index);
}
inline ::std::string* AckFirstHandCard::mutable_group_channel_ids(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckFirstHandCard.group_channel_ids)
  return group_channel_ids_.Mutable(index);
}
inline void AckFirstHandCard::set_group_channel_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.game.AckFirstHandCard.group_channel_ids)
  group_channel_ids_.Mutable(index)->assign(value);
}
inline void AckFirstHandCard::set_group_channel_ids(int index, const char* value) {
  group_channel_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.AckFirstHandCard.group_channel_ids)
}
inline void AckFirstHandCard::set_group_channel_ids(int index, const char* value, size_t size) {
  group_channel_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.AckFirstHandCard.group_channel_ids)
}
inline ::std::string* AckFirstHandCard::add_group_channel_ids() {
  return group_channel_ids_.Add();
}
inline void AckFirstHandCard::add_group_channel_ids(const ::std::string& value) {
  group_channel_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.game.AckFirstHandCard.group_channel_ids)
}
inline void AckFirstHandCard::add_group_channel_ids(const char* value) {
  group_channel_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.game.AckFirstHandCard.group_channel_ids)
}
inline void AckFirstHandCard::add_group_channel_ids(const char* value, size_t size) {
  group_channel_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.game.AckFirstHandCard.group_channel_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AckFirstHandCard::group_channel_ids() const {
  // @@protoc_insertion_point(field_list:proto.game.AckFirstHandCard.group_channel_ids)
  return group_channel_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AckFirstHandCard::mutable_group_channel_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckFirstHandCard.group_channel_ids)
  return &group_channel_ids_;
}

// -------------------------------------------------------------------

// VideoFirstHandCard

// repeated .proto.game.HandCards UserCard = 1;
inline int VideoFirstHandCard::usercard_size() const {
  return usercard_.size();
}
inline void VideoFirstHandCard::clear_usercard() {
  usercard_.Clear();
}
inline const ::proto::game::HandCards& VideoFirstHandCard::usercard(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.VideoFirstHandCard.UserCard)
  return usercard_.Get(index);
}
inline ::proto::game::HandCards* VideoFirstHandCard::mutable_usercard(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.VideoFirstHandCard.UserCard)
  return usercard_.Mutable(index);
}
inline ::proto::game::HandCards* VideoFirstHandCard::add_usercard() {
  // @@protoc_insertion_point(field_add:proto.game.VideoFirstHandCard.UserCard)
  return usercard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >&
VideoFirstHandCard::usercard() const {
  // @@protoc_insertion_point(field_list:proto.game.VideoFirstHandCard.UserCard)
  return usercard_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >*
VideoFirstHandCard::mutable_usercard() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.VideoFirstHandCard.UserCard)
  return &usercard_;
}

// optional int32 first_get_card = 2;
inline bool VideoFirstHandCard::has_first_get_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoFirstHandCard::set_has_first_get_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoFirstHandCard::clear_has_first_get_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoFirstHandCard::clear_first_get_card() {
  first_get_card_ = 0;
  clear_has_first_get_card();
}
inline ::google::protobuf::int32 VideoFirstHandCard::first_get_card() const {
  // @@protoc_insertion_point(field_get:proto.game.VideoFirstHandCard.first_get_card)
  return first_get_card_;
}
inline void VideoFirstHandCard::set_first_get_card(::google::protobuf::int32 value) {
  set_has_first_get_card();
  first_get_card_ = value;
  // @@protoc_insertion_point(field_set:proto.game.VideoFirstHandCard.first_get_card)
}

// -------------------------------------------------------------------

// tagHuInfo

// required int32 Card = 1;
inline bool tagHuInfo::has_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagHuInfo::set_has_card() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagHuInfo::clear_has_card() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagHuInfo::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 tagHuInfo::card() const {
  // @@protoc_insertion_point(field_get:proto.game.tagHuInfo.Card)
  return card_;
}
inline void tagHuInfo::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
  // @@protoc_insertion_point(field_set:proto.game.tagHuInfo.Card)
}

// optional int32 LeftNum = 2;
inline bool tagHuInfo::has_leftnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagHuInfo::set_has_leftnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagHuInfo::clear_has_leftnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagHuInfo::clear_leftnum() {
  leftnum_ = 0;
  clear_has_leftnum();
}
inline ::google::protobuf::int32 tagHuInfo::leftnum() const {
  // @@protoc_insertion_point(field_get:proto.game.tagHuInfo.LeftNum)
  return leftnum_;
}
inline void tagHuInfo::set_leftnum(::google::protobuf::int32 value) {
  set_has_leftnum();
  leftnum_ = value;
  // @@protoc_insertion_point(field_set:proto.game.tagHuInfo.LeftNum)
}

// optional int32 HuFanNum = 3;
inline bool tagHuInfo::has_hufannum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagHuInfo::set_has_hufannum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagHuInfo::clear_has_hufannum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagHuInfo::clear_hufannum() {
  hufannum_ = 0;
  clear_has_hufannum();
}
inline ::google::protobuf::int32 tagHuInfo::hufannum() const {
  // @@protoc_insertion_point(field_get:proto.game.tagHuInfo.HuFanNum)
  return hufannum_;
}
inline void tagHuInfo::set_hufannum(::google::protobuf::int32 value) {
  set_has_hufannum();
  hufannum_ = value;
  // @@protoc_insertion_point(field_set:proto.game.tagHuInfo.HuFanNum)
}

// -------------------------------------------------------------------

// tagListenInfo

// optional int32 OutCard = 1;
inline bool tagListenInfo::has_outcard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagListenInfo::set_has_outcard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagListenInfo::clear_has_outcard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagListenInfo::clear_outcard() {
  outcard_ = 0;
  clear_has_outcard();
}
inline ::google::protobuf::int32 tagListenInfo::outcard() const {
  // @@protoc_insertion_point(field_get:proto.game.tagListenInfo.OutCard)
  return outcard_;
}
inline void tagListenInfo::set_outcard(::google::protobuf::int32 value) {
  set_has_outcard();
  outcard_ = value;
  // @@protoc_insertion_point(field_set:proto.game.tagListenInfo.OutCard)
}

// repeated .proto.game.tagHuInfo HuInfo = 2;
inline int tagListenInfo::huinfo_size() const {
  return huinfo_.size();
}
inline void tagListenInfo::clear_huinfo() {
  huinfo_.Clear();
}
inline const ::proto::game::tagHuInfo& tagListenInfo::huinfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.tagListenInfo.HuInfo)
  return huinfo_.Get(index);
}
inline ::proto::game::tagHuInfo* tagListenInfo::mutable_huinfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.tagListenInfo.HuInfo)
  return huinfo_.Mutable(index);
}
inline ::proto::game::tagHuInfo* tagListenInfo::add_huinfo() {
  // @@protoc_insertion_point(field_add:proto.game.tagListenInfo.HuInfo)
  return huinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHuInfo >&
tagListenInfo::huinfo() const {
  // @@protoc_insertion_point(field_list:proto.game.tagListenInfo.HuInfo)
  return huinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHuInfo >*
tagListenInfo::mutable_huinfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.tagListenInfo.HuInfo)
  return &huinfo_;
}

// -------------------------------------------------------------------

// tagPreGangs

// optional int32 ancard = 1;
inline bool tagPreGangs::has_ancard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagPreGangs::set_has_ancard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagPreGangs::clear_has_ancard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagPreGangs::clear_ancard() {
  ancard_ = 0;
  clear_has_ancard();
}
inline ::google::protobuf::int32 tagPreGangs::ancard() const {
  // @@protoc_insertion_point(field_get:proto.game.tagPreGangs.ancard)
  return ancard_;
}
inline void tagPreGangs::set_ancard(::google::protobuf::int32 value) {
  set_has_ancard();
  ancard_ = value;
  // @@protoc_insertion_point(field_set:proto.game.tagPreGangs.ancard)
}

// repeated int32 outcards = 2;
inline int tagPreGangs::outcards_size() const {
  return outcards_.size();
}
inline void tagPreGangs::clear_outcards() {
  outcards_.Clear();
}
inline ::google::protobuf::int32 tagPreGangs::outcards(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.tagPreGangs.outcards)
  return outcards_.Get(index);
}
inline void tagPreGangs::set_outcards(int index, ::google::protobuf::int32 value) {
  outcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.tagPreGangs.outcards)
}
inline void tagPreGangs::add_outcards(::google::protobuf::int32 value) {
  outcards_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.tagPreGangs.outcards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagPreGangs::outcards() const {
  // @@protoc_insertion_point(field_list:proto.game.tagPreGangs.outcards)
  return outcards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagPreGangs::mutable_outcards() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.tagPreGangs.outcards)
  return &outcards_;
}

// -------------------------------------------------------------------

// AckUserGetCard

// required int32 ChairID = 1;
inline bool AckUserGetCard::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUserGetCard::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUserGetCard::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUserGetCard::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckUserGetCard::chairid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserGetCard.ChairID)
  return chairid_;
}
inline void AckUserGetCard::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserGetCard.ChairID)
}

// optional int32 LeftCardNum = 2;
inline bool AckUserGetCard::has_leftcardnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckUserGetCard::set_has_leftcardnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckUserGetCard::clear_has_leftcardnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckUserGetCard::clear_leftcardnum() {
  leftcardnum_ = 0;
  clear_has_leftcardnum();
}
inline ::google::protobuf::int32 AckUserGetCard::leftcardnum() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserGetCard.LeftCardNum)
  return leftcardnum_;
}
inline void AckUserGetCard::set_leftcardnum(::google::protobuf::int32 value) {
  set_has_leftcardnum();
  leftcardnum_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserGetCard.LeftCardNum)
}

// optional int32 Card = 3;
inline bool AckUserGetCard::has_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckUserGetCard::set_has_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckUserGetCard::clear_has_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckUserGetCard::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 AckUserGetCard::card() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserGetCard.Card)
  return card_;
}
inline void AckUserGetCard::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserGetCard.Card)
}

// optional int32 OpType = 4;
inline bool AckUserGetCard::has_optype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckUserGetCard::set_has_optype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckUserGetCard::clear_has_optype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckUserGetCard::clear_optype() {
  optype_ = 0;
  clear_has_optype();
}
inline ::google::protobuf::int32 AckUserGetCard::optype() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserGetCard.OpType)
  return optype_;
}
inline void AckUserGetCard::set_optype(::google::protobuf::int32 value) {
  set_has_optype();
  optype_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserGetCard.OpType)
}

// repeated .proto.game.tagGangInfo GangInfo = 5;
inline int AckUserGetCard::ganginfo_size() const {
  return ganginfo_.size();
}
inline void AckUserGetCard::clear_ganginfo() {
  ganginfo_.Clear();
}
inline const ::proto::game::tagGangInfo& AckUserGetCard::ganginfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserGetCard.GangInfo)
  return ganginfo_.Get(index);
}
inline ::proto::game::tagGangInfo* AckUserGetCard::mutable_ganginfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckUserGetCard.GangInfo)
  return ganginfo_.Mutable(index);
}
inline ::proto::game::tagGangInfo* AckUserGetCard::add_ganginfo() {
  // @@protoc_insertion_point(field_add:proto.game.AckUserGetCard.GangInfo)
  return ganginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >&
AckUserGetCard::ganginfo() const {
  // @@protoc_insertion_point(field_list:proto.game.AckUserGetCard.GangInfo)
  return ganginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >*
AckUserGetCard::mutable_ganginfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckUserGetCard.GangInfo)
  return &ganginfo_;
}

// repeated .proto.game.tagListenInfo ListenInfo = 6;
inline int AckUserGetCard::listeninfo_size() const {
  return listeninfo_.size();
}
inline void AckUserGetCard::clear_listeninfo() {
  listeninfo_.Clear();
}
inline const ::proto::game::tagListenInfo& AckUserGetCard::listeninfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserGetCard.ListenInfo)
  return listeninfo_.Get(index);
}
inline ::proto::game::tagListenInfo* AckUserGetCard::mutable_listeninfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckUserGetCard.ListenInfo)
  return listeninfo_.Mutable(index);
}
inline ::proto::game::tagListenInfo* AckUserGetCard::add_listeninfo() {
  // @@protoc_insertion_point(field_add:proto.game.AckUserGetCard.ListenInfo)
  return listeninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
AckUserGetCard::listeninfo() const {
  // @@protoc_insertion_point(field_list:proto.game.AckUserGetCard.ListenInfo)
  return listeninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
AckUserGetCard::mutable_listeninfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckUserGetCard.ListenInfo)
  return &listeninfo_;
}

// optional int32 OpType2 = 7;
inline bool AckUserGetCard::has_optype2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AckUserGetCard::set_has_optype2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AckUserGetCard::clear_has_optype2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AckUserGetCard::clear_optype2() {
  optype2_ = 0;
  clear_has_optype2();
}
inline ::google::protobuf::int32 AckUserGetCard::optype2() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserGetCard.OpType2)
  return optype2_;
}
inline void AckUserGetCard::set_optype2(::google::protobuf::int32 value) {
  set_has_optype2();
  optype2_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserGetCard.OpType2)
}

// optional int32 fz_type = 8;
inline bool AckUserGetCard::has_fz_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AckUserGetCard::set_has_fz_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AckUserGetCard::clear_has_fz_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AckUserGetCard::clear_fz_type() {
  fz_type_ = 0;
  clear_has_fz_type();
}
inline ::google::protobuf::int32 AckUserGetCard::fz_type() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserGetCard.fz_type)
  return fz_type_;
}
inline void AckUserGetCard::set_fz_type(::google::protobuf::int32 value) {
  set_has_fz_type();
  fz_type_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserGetCard.fz_type)
}

// optional int32 GetCardDir = 9;
inline bool AckUserGetCard::has_getcarddir() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AckUserGetCard::set_has_getcarddir() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AckUserGetCard::clear_has_getcarddir() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AckUserGetCard::clear_getcarddir() {
  getcarddir_ = 0;
  clear_has_getcarddir();
}
inline ::google::protobuf::int32 AckUserGetCard::getcarddir() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserGetCard.GetCardDir)
  return getcarddir_;
}
inline void AckUserGetCard::set_getcarddir(::google::protobuf::int32 value) {
  set_has_getcarddir();
  getcarddir_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserGetCard.GetCardDir)
}

// repeated .proto.game.tagPreGangs xy_pregang = 10;
inline int AckUserGetCard::xy_pregang_size() const {
  return xy_pregang_.size();
}
inline void AckUserGetCard::clear_xy_pregang() {
  xy_pregang_.Clear();
}
inline const ::proto::game::tagPreGangs& AckUserGetCard::xy_pregang(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserGetCard.xy_pregang)
  return xy_pregang_.Get(index);
}
inline ::proto::game::tagPreGangs* AckUserGetCard::mutable_xy_pregang(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckUserGetCard.xy_pregang)
  return xy_pregang_.Mutable(index);
}
inline ::proto::game::tagPreGangs* AckUserGetCard::add_xy_pregang() {
  // @@protoc_insertion_point(field_add:proto.game.AckUserGetCard.xy_pregang)
  return xy_pregang_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs >&
AckUserGetCard::xy_pregang() const {
  // @@protoc_insertion_point(field_list:proto.game.AckUserGetCard.xy_pregang)
  return xy_pregang_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs >*
AckUserGetCard::mutable_xy_pregang() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckUserGetCard.xy_pregang)
  return &xy_pregang_;
}

// optional int32 LockLaizi = 11;
inline bool AckUserGetCard::has_locklaizi() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AckUserGetCard::set_has_locklaizi() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AckUserGetCard::clear_has_locklaizi() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AckUserGetCard::clear_locklaizi() {
  locklaizi_ = 0;
  clear_has_locklaizi();
}
inline ::google::protobuf::int32 AckUserGetCard::locklaizi() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserGetCard.LockLaizi)
  return locklaizi_;
}
inline void AckUserGetCard::set_locklaizi(::google::protobuf::int32 value) {
  set_has_locklaizi();
  locklaizi_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserGetCard.LockLaizi)
}

// optional int32 getlaizi = 12;
inline bool AckUserGetCard::has_getlaizi() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AckUserGetCard::set_has_getlaizi() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AckUserGetCard::clear_has_getlaizi() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AckUserGetCard::clear_getlaizi() {
  getlaizi_ = 0;
  clear_has_getlaizi();
}
inline ::google::protobuf::int32 AckUserGetCard::getlaizi() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserGetCard.getlaizi)
  return getlaizi_;
}
inline void AckUserGetCard::set_getlaizi(::google::protobuf::int32 value) {
  set_has_getlaizi();
  getlaizi_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserGetCard.getlaizi)
}

// optional int32 encrypt_code = 13;
inline bool AckUserGetCard::has_encrypt_code() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AckUserGetCard::set_has_encrypt_code() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AckUserGetCard::clear_has_encrypt_code() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AckUserGetCard::clear_encrypt_code() {
  encrypt_code_ = 0;
  clear_has_encrypt_code();
}
inline ::google::protobuf::int32 AckUserGetCard::encrypt_code() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserGetCard.encrypt_code)
  return encrypt_code_;
}
inline void AckUserGetCard::set_encrypt_code(::google::protobuf::int32 value) {
  set_has_encrypt_code();
  encrypt_code_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserGetCard.encrypt_code)
}

// optional string md5 = 14;
inline bool AckUserGetCard::has_md5() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AckUserGetCard::set_has_md5() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AckUserGetCard::clear_has_md5() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AckUserGetCard::clear_md5() {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_->clear();
  }
  clear_has_md5();
}
inline const ::std::string& AckUserGetCard::md5() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserGetCard.md5)
  return *md5_;
}
inline void AckUserGetCard::set_md5(const ::std::string& value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
  // @@protoc_insertion_point(field_set:proto.game.AckUserGetCard.md5)
}
inline void AckUserGetCard::set_md5(const char* value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.AckUserGetCard.md5)
}
inline void AckUserGetCard::set_md5(const char* value, size_t size) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.AckUserGetCard.md5)
}
inline ::std::string* AckUserGetCard::mutable_md5() {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.game.AckUserGetCard.md5)
  return md5_;
}
inline ::std::string* AckUserGetCard::release_md5() {
  clear_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = md5_;
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AckUserGetCard::set_allocated_md5(::std::string* md5) {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete md5_;
  }
  if (md5) {
    set_has_md5();
    md5_ = md5;
  } else {
    clear_has_md5();
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckUserGetCard.md5)
}

// optional int32 operateid = 15;
inline bool AckUserGetCard::has_operateid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AckUserGetCard::set_has_operateid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AckUserGetCard::clear_has_operateid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AckUserGetCard::clear_operateid() {
  operateid_ = 0;
  clear_has_operateid();
}
inline ::google::protobuf::int32 AckUserGetCard::operateid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserGetCard.operateid)
  return operateid_;
}
inline void AckUserGetCard::set_operateid(::google::protobuf::int32 value) {
  set_has_operateid();
  operateid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserGetCard.operateid)
}

// repeated int32 cards = 16;
inline int AckUserGetCard::cards_size() const {
  return cards_.size();
}
inline void AckUserGetCard::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 AckUserGetCard::cards(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserGetCard.cards)
  return cards_.Get(index);
}
inline void AckUserGetCard::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckUserGetCard.cards)
}
inline void AckUserGetCard::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckUserGetCard.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckUserGetCard::cards() const {
  // @@protoc_insertion_point(field_list:proto.game.AckUserGetCard.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckUserGetCard::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckUserGetCard.cards)
  return &cards_;
}

// repeated .proto.game.CardArr cardList = 17;
inline int AckUserGetCard::cardlist_size() const {
  return cardlist_.size();
}
inline void AckUserGetCard::clear_cardlist() {
  cardlist_.Clear();
}
inline const ::proto::game::CardArr& AckUserGetCard::cardlist(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserGetCard.cardList)
  return cardlist_.Get(index);
}
inline ::proto::game::CardArr* AckUserGetCard::mutable_cardlist(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckUserGetCard.cardList)
  return cardlist_.Mutable(index);
}
inline ::proto::game::CardArr* AckUserGetCard::add_cardlist() {
  // @@protoc_insertion_point(field_add:proto.game.AckUserGetCard.cardList)
  return cardlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::CardArr >&
AckUserGetCard::cardlist() const {
  // @@protoc_insertion_point(field_list:proto.game.AckUserGetCard.cardList)
  return cardlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::CardArr >*
AckUserGetCard::mutable_cardlist() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckUserGetCard.cardList)
  return &cardlist_;
}

// repeated .proto.game.DaAnTing daan_ting = 20;
inline int AckUserGetCard::daan_ting_size() const {
  return daan_ting_.size();
}
inline void AckUserGetCard::clear_daan_ting() {
  daan_ting_.Clear();
}
inline const ::proto::game::DaAnTing& AckUserGetCard::daan_ting(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserGetCard.daan_ting)
  return daan_ting_.Get(index);
}
inline ::proto::game::DaAnTing* AckUserGetCard::mutable_daan_ting(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckUserGetCard.daan_ting)
  return daan_ting_.Mutable(index);
}
inline ::proto::game::DaAnTing* AckUserGetCard::add_daan_ting() {
  // @@protoc_insertion_point(field_add:proto.game.AckUserGetCard.daan_ting)
  return daan_ting_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::DaAnTing >&
AckUserGetCard::daan_ting() const {
  // @@protoc_insertion_point(field_list:proto.game.AckUserGetCard.daan_ting)
  return daan_ting_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::DaAnTing >*
AckUserGetCard::mutable_daan_ting() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckUserGetCard.daan_ting)
  return &daan_ting_;
}

// repeated .proto.game.tagListenInfo ListenInfo1 = 30;
inline int AckUserGetCard::listeninfo1_size() const {
  return listeninfo1_.size();
}
inline void AckUserGetCard::clear_listeninfo1() {
  listeninfo1_.Clear();
}
inline const ::proto::game::tagListenInfo& AckUserGetCard::listeninfo1(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserGetCard.ListenInfo1)
  return listeninfo1_.Get(index);
}
inline ::proto::game::tagListenInfo* AckUserGetCard::mutable_listeninfo1(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckUserGetCard.ListenInfo1)
  return listeninfo1_.Mutable(index);
}
inline ::proto::game::tagListenInfo* AckUserGetCard::add_listeninfo1() {
  // @@protoc_insertion_point(field_add:proto.game.AckUserGetCard.ListenInfo1)
  return listeninfo1_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
AckUserGetCard::listeninfo1() const {
  // @@protoc_insertion_point(field_list:proto.game.AckUserGetCard.ListenInfo1)
  return listeninfo1_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
AckUserGetCard::mutable_listeninfo1() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckUserGetCard.ListenInfo1)
  return &listeninfo1_;
}

// -------------------------------------------------------------------

// tagShowOutCard

// required int32 OutCardLen = 1;
inline bool tagShowOutCard::has_outcardlen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagShowOutCard::set_has_outcardlen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagShowOutCard::clear_has_outcardlen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagShowOutCard::clear_outcardlen() {
  outcardlen_ = 0;
  clear_has_outcardlen();
}
inline ::google::protobuf::int32 tagShowOutCard::outcardlen() const {
  // @@protoc_insertion_point(field_get:proto.game.tagShowOutCard.OutCardLen)
  return outcardlen_;
}
inline void tagShowOutCard::set_outcardlen(::google::protobuf::int32 value) {
  set_has_outcardlen();
  outcardlen_ = value;
  // @@protoc_insertion_point(field_set:proto.game.tagShowOutCard.OutCardLen)
}

// repeated int32 OutCard = 2;
inline int tagShowOutCard::outcard_size() const {
  return outcard_.size();
}
inline void tagShowOutCard::clear_outcard() {
  outcard_.Clear();
}
inline ::google::protobuf::int32 tagShowOutCard::outcard(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.tagShowOutCard.OutCard)
  return outcard_.Get(index);
}
inline void tagShowOutCard::set_outcard(int index, ::google::protobuf::int32 value) {
  outcard_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.tagShowOutCard.OutCard)
}
inline void tagShowOutCard::add_outcard(::google::protobuf::int32 value) {
  outcard_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.tagShowOutCard.OutCard)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagShowOutCard::outcard() const {
  // @@protoc_insertion_point(field_list:proto.game.tagShowOutCard.OutCard)
  return outcard_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagShowOutCard::mutable_outcard() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.tagShowOutCard.OutCard)
  return &outcard_;
}

// -------------------------------------------------------------------

// AckUserOutCard

// required int32 ChairID = 1;
inline bool AckUserOutCard::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUserOutCard::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUserOutCard::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUserOutCard::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckUserOutCard::chairid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserOutCard.ChairID)
  return chairid_;
}
inline void AckUserOutCard::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserOutCard.ChairID)
}

// optional int32 Card = 2;
inline bool AckUserOutCard::has_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckUserOutCard::set_has_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckUserOutCard::clear_has_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckUserOutCard::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 AckUserOutCard::card() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserOutCard.Card)
  return card_;
}
inline void AckUserOutCard::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserOutCard.Card)
}

// repeated .proto.game.tagShowOutCard ShowCard = 3;
inline int AckUserOutCard::showcard_size() const {
  return showcard_.size();
}
inline void AckUserOutCard::clear_showcard() {
  showcard_.Clear();
}
inline const ::proto::game::tagShowOutCard& AckUserOutCard::showcard(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserOutCard.ShowCard)
  return showcard_.Get(index);
}
inline ::proto::game::tagShowOutCard* AckUserOutCard::mutable_showcard(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckUserOutCard.ShowCard)
  return showcard_.Mutable(index);
}
inline ::proto::game::tagShowOutCard* AckUserOutCard::add_showcard() {
  // @@protoc_insertion_point(field_add:proto.game.AckUserOutCard.ShowCard)
  return showcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagShowOutCard >&
AckUserOutCard::showcard() const {
  // @@protoc_insertion_point(field_list:proto.game.AckUserOutCard.ShowCard)
  return showcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagShowOutCard >*
AckUserOutCard::mutable_showcard() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckUserOutCard.ShowCard)
  return &showcard_;
}

// optional .proto.game.HandCards UserCard = 4;
inline bool AckUserOutCard::has_usercard() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckUserOutCard::set_has_usercard() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckUserOutCard::clear_has_usercard() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckUserOutCard::clear_usercard() {
  if (usercard_ != NULL) usercard_->::proto::game::HandCards::Clear();
  clear_has_usercard();
}
inline const ::proto::game::HandCards& AckUserOutCard::usercard() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserOutCard.UserCard)
  return usercard_ != NULL ? *usercard_ : *default_instance_->usercard_;
}
inline ::proto::game::HandCards* AckUserOutCard::mutable_usercard() {
  set_has_usercard();
  if (usercard_ == NULL) usercard_ = new ::proto::game::HandCards;
  // @@protoc_insertion_point(field_mutable:proto.game.AckUserOutCard.UserCard)
  return usercard_;
}
inline ::proto::game::HandCards* AckUserOutCard::release_usercard() {
  clear_has_usercard();
  ::proto::game::HandCards* temp = usercard_;
  usercard_ = NULL;
  return temp;
}
inline void AckUserOutCard::set_allocated_usercard(::proto::game::HandCards* usercard) {
  delete usercard_;
  usercard_ = usercard;
  if (usercard) {
    set_has_usercard();
  } else {
    clear_has_usercard();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckUserOutCard.UserCard)
}

// repeated .proto.game.tagListenInfo ListenInfo = 5;
inline int AckUserOutCard::listeninfo_size() const {
  return listeninfo_.size();
}
inline void AckUserOutCard::clear_listeninfo() {
  listeninfo_.Clear();
}
inline const ::proto::game::tagListenInfo& AckUserOutCard::listeninfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserOutCard.ListenInfo)
  return listeninfo_.Get(index);
}
inline ::proto::game::tagListenInfo* AckUserOutCard::mutable_listeninfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckUserOutCard.ListenInfo)
  return listeninfo_.Mutable(index);
}
inline ::proto::game::tagListenInfo* AckUserOutCard::add_listeninfo() {
  // @@protoc_insertion_point(field_add:proto.game.AckUserOutCard.ListenInfo)
  return listeninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
AckUserOutCard::listeninfo() const {
  // @@protoc_insertion_point(field_list:proto.game.AckUserOutCard.ListenInfo)
  return listeninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
AckUserOutCard::mutable_listeninfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckUserOutCard.ListenInfo)
  return &listeninfo_;
}

// optional int32 da_type = 6;
inline bool AckUserOutCard::has_da_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AckUserOutCard::set_has_da_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AckUserOutCard::clear_has_da_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AckUserOutCard::clear_da_type() {
  da_type_ = 0;
  clear_has_da_type();
}
inline ::google::protobuf::int32 AckUserOutCard::da_type() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserOutCard.da_type)
  return da_type_;
}
inline void AckUserOutCard::set_da_type(::google::protobuf::int32 value) {
  set_has_da_type();
  da_type_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserOutCard.da_type)
}

// repeated .proto.game.tagPreGangs xy_pregang = 7;
inline int AckUserOutCard::xy_pregang_size() const {
  return xy_pregang_.size();
}
inline void AckUserOutCard::clear_xy_pregang() {
  xy_pregang_.Clear();
}
inline const ::proto::game::tagPreGangs& AckUserOutCard::xy_pregang(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserOutCard.xy_pregang)
  return xy_pregang_.Get(index);
}
inline ::proto::game::tagPreGangs* AckUserOutCard::mutable_xy_pregang(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckUserOutCard.xy_pregang)
  return xy_pregang_.Mutable(index);
}
inline ::proto::game::tagPreGangs* AckUserOutCard::add_xy_pregang() {
  // @@protoc_insertion_point(field_add:proto.game.AckUserOutCard.xy_pregang)
  return xy_pregang_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs >&
AckUserOutCard::xy_pregang() const {
  // @@protoc_insertion_point(field_list:proto.game.AckUserOutCard.xy_pregang)
  return xy_pregang_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs >*
AckUserOutCard::mutable_xy_pregang() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckUserOutCard.xy_pregang)
  return &xy_pregang_;
}

// optional bool XianNingLaiZi = 8;
inline bool AckUserOutCard::has_xianninglaizi() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AckUserOutCard::set_has_xianninglaizi() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AckUserOutCard::clear_has_xianninglaizi() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AckUserOutCard::clear_xianninglaizi() {
  xianninglaizi_ = false;
  clear_has_xianninglaizi();
}
inline bool AckUserOutCard::xianninglaizi() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserOutCard.XianNingLaiZi)
  return xianninglaizi_;
}
inline void AckUserOutCard::set_xianninglaizi(bool value) {
  set_has_xianninglaizi();
  xianninglaizi_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserOutCard.XianNingLaiZi)
}

// -------------------------------------------------------------------

// AckUserOutCardErr

// required int32 card = 1;
inline bool AckUserOutCardErr::has_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUserOutCardErr::set_has_card() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUserOutCardErr::clear_has_card() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUserOutCardErr::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 AckUserOutCardErr::card() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserOutCardErr.card)
  return card_;
}
inline void AckUserOutCardErr::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserOutCardErr.card)
}

// optional int32 code = 2;
inline bool AckUserOutCardErr::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckUserOutCardErr::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckUserOutCardErr::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckUserOutCardErr::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 AckUserOutCardErr::code() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserOutCardErr.code)
  return code_;
}
inline void AckUserOutCardErr::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserOutCardErr.code)
}

// repeated int32 usercard = 4;
inline int AckUserOutCardErr::usercard_size() const {
  return usercard_.size();
}
inline void AckUserOutCardErr::clear_usercard() {
  usercard_.Clear();
}
inline ::google::protobuf::int32 AckUserOutCardErr::usercard(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserOutCardErr.usercard)
  return usercard_.Get(index);
}
inline void AckUserOutCardErr::set_usercard(int index, ::google::protobuf::int32 value) {
  usercard_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckUserOutCardErr.usercard)
}
inline void AckUserOutCardErr::add_usercard(::google::protobuf::int32 value) {
  usercard_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckUserOutCardErr.usercard)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckUserOutCardErr::usercard() const {
  // @@protoc_insertion_point(field_list:proto.game.AckUserOutCardErr.usercard)
  return usercard_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckUserOutCardErr::mutable_usercard() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckUserOutCardErr.usercard)
  return &usercard_;
}

// repeated int32 outcards = 5;
inline int AckUserOutCardErr::outcards_size() const {
  return outcards_.size();
}
inline void AckUserOutCardErr::clear_outcards() {
  outcards_.Clear();
}
inline ::google::protobuf::int32 AckUserOutCardErr::outcards(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserOutCardErr.outcards)
  return outcards_.Get(index);
}
inline void AckUserOutCardErr::set_outcards(int index, ::google::protobuf::int32 value) {
  outcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckUserOutCardErr.outcards)
}
inline void AckUserOutCardErr::add_outcards(::google::protobuf::int32 value) {
  outcards_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckUserOutCardErr.outcards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckUserOutCardErr::outcards() const {
  // @@protoc_insertion_point(field_list:proto.game.AckUserOutCardErr.outcards)
  return outcards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckUserOutCardErr::mutable_outcards() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckUserOutCardErr.outcards)
  return &outcards_;
}

// -------------------------------------------------------------------

// DaAnTing

// optional int32 Key = 1;
inline bool DaAnTing::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DaAnTing::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DaAnTing::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DaAnTing::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 DaAnTing::key() const {
  // @@protoc_insertion_point(field_get:proto.game.DaAnTing.Key)
  return key_;
}
inline void DaAnTing::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:proto.game.DaAnTing.Key)
}

// optional int32 TingType = 2;
inline bool DaAnTing::has_tingtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DaAnTing::set_has_tingtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DaAnTing::clear_has_tingtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DaAnTing::clear_tingtype() {
  tingtype_ = 0;
  clear_has_tingtype();
}
inline ::google::protobuf::int32 DaAnTing::tingtype() const {
  // @@protoc_insertion_point(field_get:proto.game.DaAnTing.TingType)
  return tingtype_;
}
inline void DaAnTing::set_tingtype(::google::protobuf::int32 value) {
  set_has_tingtype();
  tingtype_ = value;
  // @@protoc_insertion_point(field_set:proto.game.DaAnTing.TingType)
}

// repeated int32 TingCards = 3;
inline int DaAnTing::tingcards_size() const {
  return tingcards_.size();
}
inline void DaAnTing::clear_tingcards() {
  tingcards_.Clear();
}
inline ::google::protobuf::int32 DaAnTing::tingcards(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.DaAnTing.TingCards)
  return tingcards_.Get(index);
}
inline void DaAnTing::set_tingcards(int index, ::google::protobuf::int32 value) {
  tingcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.DaAnTing.TingCards)
}
inline void DaAnTing::add_tingcards(::google::protobuf::int32 value) {
  tingcards_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.DaAnTing.TingCards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DaAnTing::tingcards() const {
  // @@protoc_insertion_point(field_list:proto.game.DaAnTing.TingCards)
  return tingcards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DaAnTing::mutable_tingcards() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.DaAnTing.TingCards)
  return &tingcards_;
}

// repeated int32 ShowCards = 4;
inline int DaAnTing::showcards_size() const {
  return showcards_.size();
}
inline void DaAnTing::clear_showcards() {
  showcards_.Clear();
}
inline ::google::protobuf::int32 DaAnTing::showcards(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.DaAnTing.ShowCards)
  return showcards_.Get(index);
}
inline void DaAnTing::set_showcards(int index, ::google::protobuf::int32 value) {
  showcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.DaAnTing.ShowCards)
}
inline void DaAnTing::add_showcards(::google::protobuf::int32 value) {
  showcards_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.DaAnTing.ShowCards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DaAnTing::showcards() const {
  // @@protoc_insertion_point(field_list:proto.game.DaAnTing.ShowCards)
  return showcards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DaAnTing::mutable_showcards() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.DaAnTing.ShowCards)
  return &showcards_;
}

// -------------------------------------------------------------------

// AckOpNotify

// required int32 ChairID = 1;
inline bool AckOpNotify::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckOpNotify::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckOpNotify::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckOpNotify::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckOpNotify::chairid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckOpNotify.ChairID)
  return chairid_;
}
inline void AckOpNotify::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckOpNotify.ChairID)
}

// optional int32 OpType = 2;
inline bool AckOpNotify::has_optype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckOpNotify::set_has_optype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckOpNotify::clear_has_optype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckOpNotify::clear_optype() {
  optype_ = 0;
  clear_has_optype();
}
inline ::google::protobuf::int32 AckOpNotify::optype() const {
  // @@protoc_insertion_point(field_get:proto.game.AckOpNotify.OpType)
  return optype_;
}
inline void AckOpNotify::set_optype(::google::protobuf::int32 value) {
  set_has_optype();
  optype_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckOpNotify.OpType)
}

// optional int32 Card = 3;
inline bool AckOpNotify::has_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckOpNotify::set_has_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckOpNotify::clear_has_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckOpNotify::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 AckOpNotify::card() const {
  // @@protoc_insertion_point(field_get:proto.game.AckOpNotify.Card)
  return card_;
}
inline void AckOpNotify::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckOpNotify.Card)
}

// repeated .proto.game.tagGangInfo Gang = 4;
inline int AckOpNotify::gang_size() const {
  return gang_.size();
}
inline void AckOpNotify::clear_gang() {
  gang_.Clear();
}
inline const ::proto::game::tagGangInfo& AckOpNotify::gang(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckOpNotify.Gang)
  return gang_.Get(index);
}
inline ::proto::game::tagGangInfo* AckOpNotify::mutable_gang(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckOpNotify.Gang)
  return gang_.Mutable(index);
}
inline ::proto::game::tagGangInfo* AckOpNotify::add_gang() {
  // @@protoc_insertion_point(field_add:proto.game.AckOpNotify.Gang)
  return gang_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >&
AckOpNotify::gang() const {
  // @@protoc_insertion_point(field_list:proto.game.AckOpNotify.Gang)
  return gang_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGangInfo >*
AckOpNotify::mutable_gang() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckOpNotify.Gang)
  return &gang_;
}

// optional int32 OpType2 = 5;
inline bool AckOpNotify::has_optype2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckOpNotify::set_has_optype2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckOpNotify::clear_has_optype2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckOpNotify::clear_optype2() {
  optype2_ = 0;
  clear_has_optype2();
}
inline ::google::protobuf::int32 AckOpNotify::optype2() const {
  // @@protoc_insertion_point(field_get:proto.game.AckOpNotify.OpType2)
  return optype2_;
}
inline void AckOpNotify::set_optype2(::google::protobuf::int32 value) {
  set_has_optype2();
  optype2_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckOpNotify.OpType2)
}

// repeated .proto.game.tagPreGangs xy_pregang = 6;
inline int AckOpNotify::xy_pregang_size() const {
  return xy_pregang_.size();
}
inline void AckOpNotify::clear_xy_pregang() {
  xy_pregang_.Clear();
}
inline const ::proto::game::tagPreGangs& AckOpNotify::xy_pregang(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckOpNotify.xy_pregang)
  return xy_pregang_.Get(index);
}
inline ::proto::game::tagPreGangs* AckOpNotify::mutable_xy_pregang(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckOpNotify.xy_pregang)
  return xy_pregang_.Mutable(index);
}
inline ::proto::game::tagPreGangs* AckOpNotify::add_xy_pregang() {
  // @@protoc_insertion_point(field_add:proto.game.AckOpNotify.xy_pregang)
  return xy_pregang_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs >&
AckOpNotify::xy_pregang() const {
  // @@protoc_insertion_point(field_list:proto.game.AckOpNotify.xy_pregang)
  return xy_pregang_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPreGangs >*
AckOpNotify::mutable_xy_pregang() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckOpNotify.xy_pregang)
  return &xy_pregang_;
}

// optional int32 LockLaizi = 7;
inline bool AckOpNotify::has_locklaizi() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AckOpNotify::set_has_locklaizi() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AckOpNotify::clear_has_locklaizi() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AckOpNotify::clear_locklaizi() {
  locklaizi_ = 0;
  clear_has_locklaizi();
}
inline ::google::protobuf::int32 AckOpNotify::locklaizi() const {
  // @@protoc_insertion_point(field_get:proto.game.AckOpNotify.LockLaizi)
  return locklaizi_;
}
inline void AckOpNotify::set_locklaizi(::google::protobuf::int32 value) {
  set_has_locklaizi();
  locklaizi_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckOpNotify.LockLaizi)
}

// repeated .proto.game.tagListenInfo ListenInfo = 8;
inline int AckOpNotify::listeninfo_size() const {
  return listeninfo_.size();
}
inline void AckOpNotify::clear_listeninfo() {
  listeninfo_.Clear();
}
inline const ::proto::game::tagListenInfo& AckOpNotify::listeninfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckOpNotify.ListenInfo)
  return listeninfo_.Get(index);
}
inline ::proto::game::tagListenInfo* AckOpNotify::mutable_listeninfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckOpNotify.ListenInfo)
  return listeninfo_.Mutable(index);
}
inline ::proto::game::tagListenInfo* AckOpNotify::add_listeninfo() {
  // @@protoc_insertion_point(field_add:proto.game.AckOpNotify.ListenInfo)
  return listeninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
AckOpNotify::listeninfo() const {
  // @@protoc_insertion_point(field_list:proto.game.AckOpNotify.ListenInfo)
  return listeninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
AckOpNotify::mutable_listeninfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckOpNotify.ListenInfo)
  return &listeninfo_;
}

// optional int32 operateid = 9;
inline bool AckOpNotify::has_operateid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AckOpNotify::set_has_operateid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AckOpNotify::clear_has_operateid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AckOpNotify::clear_operateid() {
  operateid_ = 0;
  clear_has_operateid();
}
inline ::google::protobuf::int32 AckOpNotify::operateid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckOpNotify.operateid)
  return operateid_;
}
inline void AckOpNotify::set_operateid(::google::protobuf::int32 value) {
  set_has_operateid();
  operateid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckOpNotify.operateid)
}

// repeated .proto.game.Cards OpCardsInfo = 10;
inline int AckOpNotify::opcardsinfo_size() const {
  return opcardsinfo_.size();
}
inline void AckOpNotify::clear_opcardsinfo() {
  opcardsinfo_.Clear();
}
inline const ::proto::game::Cards& AckOpNotify::opcardsinfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckOpNotify.OpCardsInfo)
  return opcardsinfo_.Get(index);
}
inline ::proto::game::Cards* AckOpNotify::mutable_opcardsinfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckOpNotify.OpCardsInfo)
  return opcardsinfo_.Mutable(index);
}
inline ::proto::game::Cards* AckOpNotify::add_opcardsinfo() {
  // @@protoc_insertion_point(field_add:proto.game.AckOpNotify.OpCardsInfo)
  return opcardsinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::Cards >&
AckOpNotify::opcardsinfo() const {
  // @@protoc_insertion_point(field_list:proto.game.AckOpNotify.OpCardsInfo)
  return opcardsinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::Cards >*
AckOpNotify::mutable_opcardsinfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckOpNotify.OpCardsInfo)
  return &opcardsinfo_;
}

// repeated int32 cards = 11;
inline int AckOpNotify::cards_size() const {
  return cards_.size();
}
inline void AckOpNotify::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 AckOpNotify::cards(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckOpNotify.cards)
  return cards_.Get(index);
}
inline void AckOpNotify::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckOpNotify.cards)
}
inline void AckOpNotify::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckOpNotify.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckOpNotify::cards() const {
  // @@protoc_insertion_point(field_list:proto.game.AckOpNotify.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckOpNotify::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckOpNotify.cards)
  return &cards_;
}

// repeated int32 bAnHuGang = 12;
inline int AckOpNotify::banhugang_size() const {
  return banhugang_.size();
}
inline void AckOpNotify::clear_banhugang() {
  banhugang_.Clear();
}
inline ::google::protobuf::int32 AckOpNotify::banhugang(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckOpNotify.bAnHuGang)
  return banhugang_.Get(index);
}
inline void AckOpNotify::set_banhugang(int index, ::google::protobuf::int32 value) {
  banhugang_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckOpNotify.bAnHuGang)
}
inline void AckOpNotify::add_banhugang(::google::protobuf::int32 value) {
  banhugang_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckOpNotify.bAnHuGang)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckOpNotify::banhugang() const {
  // @@protoc_insertion_point(field_list:proto.game.AckOpNotify.bAnHuGang)
  return banhugang_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckOpNotify::mutable_banhugang() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckOpNotify.bAnHuGang)
  return &banhugang_;
}

// repeated .proto.game.CardArr cardList = 13;
inline int AckOpNotify::cardlist_size() const {
  return cardlist_.size();
}
inline void AckOpNotify::clear_cardlist() {
  cardlist_.Clear();
}
inline const ::proto::game::CardArr& AckOpNotify::cardlist(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckOpNotify.cardList)
  return cardlist_.Get(index);
}
inline ::proto::game::CardArr* AckOpNotify::mutable_cardlist(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckOpNotify.cardList)
  return cardlist_.Mutable(index);
}
inline ::proto::game::CardArr* AckOpNotify::add_cardlist() {
  // @@protoc_insertion_point(field_add:proto.game.AckOpNotify.cardList)
  return cardlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::CardArr >&
AckOpNotify::cardlist() const {
  // @@protoc_insertion_point(field_list:proto.game.AckOpNotify.cardList)
  return cardlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::CardArr >*
AckOpNotify::mutable_cardlist() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckOpNotify.cardList)
  return &cardlist_;
}

// repeated .proto.game.DaAnTing daan_ting = 20;
inline int AckOpNotify::daan_ting_size() const {
  return daan_ting_.size();
}
inline void AckOpNotify::clear_daan_ting() {
  daan_ting_.Clear();
}
inline const ::proto::game::DaAnTing& AckOpNotify::daan_ting(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckOpNotify.daan_ting)
  return daan_ting_.Get(index);
}
inline ::proto::game::DaAnTing* AckOpNotify::mutable_daan_ting(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckOpNotify.daan_ting)
  return daan_ting_.Mutable(index);
}
inline ::proto::game::DaAnTing* AckOpNotify::add_daan_ting() {
  // @@protoc_insertion_point(field_add:proto.game.AckOpNotify.daan_ting)
  return daan_ting_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::DaAnTing >&
AckOpNotify::daan_ting() const {
  // @@protoc_insertion_point(field_list:proto.game.AckOpNotify.daan_ting)
  return daan_ting_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::DaAnTing >*
AckOpNotify::mutable_daan_ting() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckOpNotify.daan_ting)
  return &daan_ting_;
}

// -------------------------------------------------------------------

// AckBcOpResult

// required int32 ChairID = 1;
inline bool AckBcOpResult::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckBcOpResult::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckBcOpResult::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckBcOpResult::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckBcOpResult::chairid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckBcOpResult.ChairID)
  return chairid_;
}
inline void AckBcOpResult::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckBcOpResult.ChairID)
}

// optional int32 OutCardChairID = 2;
inline bool AckBcOpResult::has_outcardchairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckBcOpResult::set_has_outcardchairid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckBcOpResult::clear_has_outcardchairid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckBcOpResult::clear_outcardchairid() {
  outcardchairid_ = 0;
  clear_has_outcardchairid();
}
inline ::google::protobuf::int32 AckBcOpResult::outcardchairid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckBcOpResult.OutCardChairID)
  return outcardchairid_;
}
inline void AckBcOpResult::set_outcardchairid(::google::protobuf::int32 value) {
  set_has_outcardchairid();
  outcardchairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckBcOpResult.OutCardChairID)
}

// optional int32 OpType = 3;
inline bool AckBcOpResult::has_optype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckBcOpResult::set_has_optype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckBcOpResult::clear_has_optype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckBcOpResult::clear_optype() {
  optype_ = 0;
  clear_has_optype();
}
inline ::google::protobuf::int32 AckBcOpResult::optype() const {
  // @@protoc_insertion_point(field_get:proto.game.AckBcOpResult.OpType)
  return optype_;
}
inline void AckBcOpResult::set_optype(::google::protobuf::int32 value) {
  set_has_optype();
  optype_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckBcOpResult.OpType)
}

// optional int32 Card = 4;
inline bool AckBcOpResult::has_card() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckBcOpResult::set_has_card() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckBcOpResult::clear_has_card() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckBcOpResult::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 AckBcOpResult::card() const {
  // @@protoc_insertion_point(field_get:proto.game.AckBcOpResult.Card)
  return card_;
}
inline void AckBcOpResult::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckBcOpResult.Card)
}

// repeated int32 Score = 5;
inline int AckBcOpResult::score_size() const {
  return score_.size();
}
inline void AckBcOpResult::clear_score() {
  score_.Clear();
}
inline ::google::protobuf::int32 AckBcOpResult::score(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckBcOpResult.Score)
  return score_.Get(index);
}
inline void AckBcOpResult::set_score(int index, ::google::protobuf::int32 value) {
  score_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckBcOpResult.Score)
}
inline void AckBcOpResult::add_score(::google::protobuf::int32 value) {
  score_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckBcOpResult.Score)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckBcOpResult::score() const {
  // @@protoc_insertion_point(field_list:proto.game.AckBcOpResult.Score)
  return score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckBcOpResult::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckBcOpResult.Score)
  return &score_;
}

// optional int32 IsQiangganghu = 6;
inline bool AckBcOpResult::has_isqiangganghu() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AckBcOpResult::set_has_isqiangganghu() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AckBcOpResult::clear_has_isqiangganghu() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AckBcOpResult::clear_isqiangganghu() {
  isqiangganghu_ = 0;
  clear_has_isqiangganghu();
}
inline ::google::protobuf::int32 AckBcOpResult::isqiangganghu() const {
  // @@protoc_insertion_point(field_get:proto.game.AckBcOpResult.IsQiangganghu)
  return isqiangganghu_;
}
inline void AckBcOpResult::set_isqiangganghu(::google::protobuf::int32 value) {
  set_has_isqiangganghu();
  isqiangganghu_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckBcOpResult.IsQiangganghu)
}

// optional int32 OpType2 = 7;
inline bool AckBcOpResult::has_optype2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AckBcOpResult::set_has_optype2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AckBcOpResult::clear_has_optype2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AckBcOpResult::clear_optype2() {
  optype2_ = 0;
  clear_has_optype2();
}
inline ::google::protobuf::int32 AckBcOpResult::optype2() const {
  // @@protoc_insertion_point(field_get:proto.game.AckBcOpResult.OpType2)
  return optype2_;
}
inline void AckBcOpResult::set_optype2(::google::protobuf::int32 value) {
  set_has_optype2();
  optype2_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckBcOpResult.OpType2)
}

// optional int32 fz_hu_type = 8;
inline bool AckBcOpResult::has_fz_hu_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AckBcOpResult::set_has_fz_hu_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AckBcOpResult::clear_has_fz_hu_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AckBcOpResult::clear_fz_hu_type() {
  fz_hu_type_ = 0;
  clear_has_fz_hu_type();
}
inline ::google::protobuf::int32 AckBcOpResult::fz_hu_type() const {
  // @@protoc_insertion_point(field_get:proto.game.AckBcOpResult.fz_hu_type)
  return fz_hu_type_;
}
inline void AckBcOpResult::set_fz_hu_type(::google::protobuf::int32 value) {
  set_has_fz_hu_type();
  fz_hu_type_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckBcOpResult.fz_hu_type)
}

// repeated .proto.game.tagListenInfo ListenInfo = 9;
inline int AckBcOpResult::listeninfo_size() const {
  return listeninfo_.size();
}
inline void AckBcOpResult::clear_listeninfo() {
  listeninfo_.Clear();
}
inline const ::proto::game::tagListenInfo& AckBcOpResult::listeninfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckBcOpResult.ListenInfo)
  return listeninfo_.Get(index);
}
inline ::proto::game::tagListenInfo* AckBcOpResult::mutable_listeninfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckBcOpResult.ListenInfo)
  return listeninfo_.Mutable(index);
}
inline ::proto::game::tagListenInfo* AckBcOpResult::add_listeninfo() {
  // @@protoc_insertion_point(field_add:proto.game.AckBcOpResult.ListenInfo)
  return listeninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
AckBcOpResult::listeninfo() const {
  // @@protoc_insertion_point(field_list:proto.game.AckBcOpResult.ListenInfo)
  return listeninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
AckBcOpResult::mutable_listeninfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckBcOpResult.ListenInfo)
  return &listeninfo_;
}

// repeated int32 ChiNoOutCards = 10;
inline int AckBcOpResult::chinooutcards_size() const {
  return chinooutcards_.size();
}
inline void AckBcOpResult::clear_chinooutcards() {
  chinooutcards_.Clear();
}
inline ::google::protobuf::int32 AckBcOpResult::chinooutcards(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckBcOpResult.ChiNoOutCards)
  return chinooutcards_.Get(index);
}
inline void AckBcOpResult::set_chinooutcards(int index, ::google::protobuf::int32 value) {
  chinooutcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckBcOpResult.ChiNoOutCards)
}
inline void AckBcOpResult::add_chinooutcards(::google::protobuf::int32 value) {
  chinooutcards_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckBcOpResult.ChiNoOutCards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckBcOpResult::chinooutcards() const {
  // @@protoc_insertion_point(field_list:proto.game.AckBcOpResult.ChiNoOutCards)
  return chinooutcards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckBcOpResult::mutable_chinooutcards() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckBcOpResult.ChiNoOutCards)
  return &chinooutcards_;
}

// repeated int32 OpCards = 11;
inline int AckBcOpResult::opcards_size() const {
  return opcards_.size();
}
inline void AckBcOpResult::clear_opcards() {
  opcards_.Clear();
}
inline ::google::protobuf::int32 AckBcOpResult::opcards(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckBcOpResult.OpCards)
  return opcards_.Get(index);
}
inline void AckBcOpResult::set_opcards(int index, ::google::protobuf::int32 value) {
  opcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckBcOpResult.OpCards)
}
inline void AckBcOpResult::add_opcards(::google::protobuf::int32 value) {
  opcards_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckBcOpResult.OpCards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckBcOpResult::opcards() const {
  // @@protoc_insertion_point(field_list:proto.game.AckBcOpResult.OpCards)
  return opcards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckBcOpResult::mutable_opcards() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckBcOpResult.OpCards)
  return &opcards_;
}

// repeated int32 cardDel = 12;
inline int AckBcOpResult::carddel_size() const {
  return carddel_.size();
}
inline void AckBcOpResult::clear_carddel() {
  carddel_.Clear();
}
inline ::google::protobuf::int32 AckBcOpResult::carddel(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckBcOpResult.cardDel)
  return carddel_.Get(index);
}
inline void AckBcOpResult::set_carddel(int index, ::google::protobuf::int32 value) {
  carddel_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckBcOpResult.cardDel)
}
inline void AckBcOpResult::add_carddel(::google::protobuf::int32 value) {
  carddel_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckBcOpResult.cardDel)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckBcOpResult::carddel() const {
  // @@protoc_insertion_point(field_list:proto.game.AckBcOpResult.cardDel)
  return carddel_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckBcOpResult::mutable_carddel() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckBcOpResult.cardDel)
  return &carddel_;
}

// optional .proto.game.FixedCardChange fixedcardchange = 13;
inline bool AckBcOpResult::has_fixedcardchange() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AckBcOpResult::set_has_fixedcardchange() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AckBcOpResult::clear_has_fixedcardchange() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AckBcOpResult::clear_fixedcardchange() {
  if (fixedcardchange_ != NULL) fixedcardchange_->::proto::game::FixedCardChange::Clear();
  clear_has_fixedcardchange();
}
inline const ::proto::game::FixedCardChange& AckBcOpResult::fixedcardchange() const {
  // @@protoc_insertion_point(field_get:proto.game.AckBcOpResult.fixedcardchange)
  return fixedcardchange_ != NULL ? *fixedcardchange_ : *default_instance_->fixedcardchange_;
}
inline ::proto::game::FixedCardChange* AckBcOpResult::mutable_fixedcardchange() {
  set_has_fixedcardchange();
  if (fixedcardchange_ == NULL) fixedcardchange_ = new ::proto::game::FixedCardChange;
  // @@protoc_insertion_point(field_mutable:proto.game.AckBcOpResult.fixedcardchange)
  return fixedcardchange_;
}
inline ::proto::game::FixedCardChange* AckBcOpResult::release_fixedcardchange() {
  clear_has_fixedcardchange();
  ::proto::game::FixedCardChange* temp = fixedcardchange_;
  fixedcardchange_ = NULL;
  return temp;
}
inline void AckBcOpResult::set_allocated_fixedcardchange(::proto::game::FixedCardChange* fixedcardchange) {
  delete fixedcardchange_;
  fixedcardchange_ = fixedcardchange;
  if (fixedcardchange) {
    set_has_fixedcardchange();
  } else {
    clear_has_fixedcardchange();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckBcOpResult.fixedcardchange)
}

// optional int32 passhu = 14;
inline bool AckBcOpResult::has_passhu() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AckBcOpResult::set_has_passhu() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AckBcOpResult::clear_has_passhu() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AckBcOpResult::clear_passhu() {
  passhu_ = 0;
  clear_has_passhu();
}
inline ::google::protobuf::int32 AckBcOpResult::passhu() const {
  // @@protoc_insertion_point(field_get:proto.game.AckBcOpResult.passhu)
  return passhu_;
}
inline void AckBcOpResult::set_passhu(::google::protobuf::int32 value) {
  set_has_passhu();
  passhu_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckBcOpResult.passhu)
}

// -------------------------------------------------------------------

// AckListenNotify

// required int32 OpType = 1;
inline bool AckListenNotify::has_optype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckListenNotify::set_has_optype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckListenNotify::clear_has_optype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckListenNotify::clear_optype() {
  optype_ = 0;
  clear_has_optype();
}
inline ::google::protobuf::int32 AckListenNotify::optype() const {
  // @@protoc_insertion_point(field_get:proto.game.AckListenNotify.OpType)
  return optype_;
}
inline void AckListenNotify::set_optype(::google::protobuf::int32 value) {
  set_has_optype();
  optype_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckListenNotify.OpType)
}

// repeated .proto.game.tagListenInfo ListenInfo = 2;
inline int AckListenNotify::listeninfo_size() const {
  return listeninfo_.size();
}
inline void AckListenNotify::clear_listeninfo() {
  listeninfo_.Clear();
}
inline const ::proto::game::tagListenInfo& AckListenNotify::listeninfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckListenNotify.ListenInfo)
  return listeninfo_.Get(index);
}
inline ::proto::game::tagListenInfo* AckListenNotify::mutable_listeninfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckListenNotify.ListenInfo)
  return listeninfo_.Mutable(index);
}
inline ::proto::game::tagListenInfo* AckListenNotify::add_listeninfo() {
  // @@protoc_insertion_point(field_add:proto.game.AckListenNotify.ListenInfo)
  return listeninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
AckListenNotify::listeninfo() const {
  // @@protoc_insertion_point(field_list:proto.game.AckListenNotify.ListenInfo)
  return listeninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
AckListenNotify::mutable_listeninfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckListenNotify.ListenInfo)
  return &listeninfo_;
}

// repeated .proto.game.tagListenInfo ListenInfo1 = 3;
inline int AckListenNotify::listeninfo1_size() const {
  return listeninfo1_.size();
}
inline void AckListenNotify::clear_listeninfo1() {
  listeninfo1_.Clear();
}
inline const ::proto::game::tagListenInfo& AckListenNotify::listeninfo1(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckListenNotify.ListenInfo1)
  return listeninfo1_.Get(index);
}
inline ::proto::game::tagListenInfo* AckListenNotify::mutable_listeninfo1(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckListenNotify.ListenInfo1)
  return listeninfo1_.Mutable(index);
}
inline ::proto::game::tagListenInfo* AckListenNotify::add_listeninfo1() {
  // @@protoc_insertion_point(field_add:proto.game.AckListenNotify.ListenInfo1)
  return listeninfo1_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >&
AckListenNotify::listeninfo1() const {
  // @@protoc_insertion_point(field_list:proto.game.AckListenNotify.ListenInfo1)
  return listeninfo1_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagListenInfo >*
AckListenNotify::mutable_listeninfo1() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckListenNotify.ListenInfo1)
  return &listeninfo1_;
}

// repeated int32 cards = 4;
inline int AckListenNotify::cards_size() const {
  return cards_.size();
}
inline void AckListenNotify::clear_cards() {
  cards_.Clear();
}
inline ::google::protobuf::int32 AckListenNotify::cards(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckListenNotify.cards)
  return cards_.Get(index);
}
inline void AckListenNotify::set_cards(int index, ::google::protobuf::int32 value) {
  cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckListenNotify.cards)
}
inline void AckListenNotify::add_cards(::google::protobuf::int32 value) {
  cards_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckListenNotify.cards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckListenNotify::cards() const {
  // @@protoc_insertion_point(field_list:proto.game.AckListenNotify.cards)
  return cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckListenNotify::mutable_cards() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckListenNotify.cards)
  return &cards_;
}

// -------------------------------------------------------------------

// AckUserHu

// required int32 HuChairID = 1;
inline bool AckUserHu::has_huchairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUserHu::set_has_huchairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUserHu::clear_has_huchairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUserHu::clear_huchairid() {
  huchairid_ = 0;
  clear_has_huchairid();
}
inline ::google::protobuf::int32 AckUserHu::huchairid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserHu.HuChairID)
  return huchairid_;
}
inline void AckUserHu::set_huchairid(::google::protobuf::int32 value) {
  set_has_huchairid();
  huchairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserHu.HuChairID)
}

// optional int32 PasHuChairID = 2;
inline bool AckUserHu::has_pashuchairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckUserHu::set_has_pashuchairid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckUserHu::clear_has_pashuchairid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckUserHu::clear_pashuchairid() {
  pashuchairid_ = 0;
  clear_has_pashuchairid();
}
inline ::google::protobuf::int32 AckUserHu::pashuchairid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserHu.PasHuChairID)
  return pashuchairid_;
}
inline void AckUserHu::set_pashuchairid(::google::protobuf::int32 value) {
  set_has_pashuchairid();
  pashuchairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserHu.PasHuChairID)
}

// repeated int32 Score = 3;
inline int AckUserHu::score_size() const {
  return score_.size();
}
inline void AckUserHu::clear_score() {
  score_.Clear();
}
inline ::google::protobuf::int32 AckUserHu::score(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserHu.Score)
  return score_.Get(index);
}
inline void AckUserHu::set_score(int index, ::google::protobuf::int32 value) {
  score_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckUserHu.Score)
}
inline void AckUserHu::add_score(::google::protobuf::int32 value) {
  score_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckUserHu.Score)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckUserHu::score() const {
  // @@protoc_insertion_point(field_list:proto.game.AckUserHu.Score)
  return score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckUserHu::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckUserHu.Score)
  return &score_;
}

// repeated int32 fan = 4;
inline int AckUserHu::fan_size() const {
  return fan_.size();
}
inline void AckUserHu::clear_fan() {
  fan_.Clear();
}
inline ::google::protobuf::int32 AckUserHu::fan(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserHu.fan)
  return fan_.Get(index);
}
inline void AckUserHu::set_fan(int index, ::google::protobuf::int32 value) {
  fan_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckUserHu.fan)
}
inline void AckUserHu::add_fan(::google::protobuf::int32 value) {
  fan_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckUserHu.fan)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckUserHu::fan() const {
  // @@protoc_insertion_point(field_list:proto.game.AckUserHu.fan)
  return fan_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckUserHu::mutable_fan() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckUserHu.fan)
  return &fan_;
}

// -------------------------------------------------------------------

// tagEndGang

// optional int32 GangType = 1;
inline bool tagEndGang::has_gangtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagEndGang::set_has_gangtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagEndGang::clear_has_gangtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagEndGang::clear_gangtype() {
  gangtype_ = 0;
  clear_has_gangtype();
}
inline ::google::protobuf::int32 tagEndGang::gangtype() const {
  // @@protoc_insertion_point(field_get:proto.game.tagEndGang.GangType)
  return gangtype_;
}
inline void tagEndGang::set_gangtype(::google::protobuf::int32 value) {
  set_has_gangtype();
  gangtype_ = value;
  // @@protoc_insertion_point(field_set:proto.game.tagEndGang.GangType)
}

// optional int32 GangCard = 2;
inline bool tagEndGang::has_gangcard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagEndGang::set_has_gangcard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagEndGang::clear_has_gangcard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagEndGang::clear_gangcard() {
  gangcard_ = 0;
  clear_has_gangcard();
}
inline ::google::protobuf::int32 tagEndGang::gangcard() const {
  // @@protoc_insertion_point(field_get:proto.game.tagEndGang.GangCard)
  return gangcard_;
}
inline void tagEndGang::set_gangcard(::google::protobuf::int32 value) {
  set_has_gangcard();
  gangcard_ = value;
  // @@protoc_insertion_point(field_set:proto.game.tagEndGang.GangCard)
}

// -------------------------------------------------------------------

// tagEndGangInfo

// repeated .proto.game.tagEndGang Gang = 1;
inline int tagEndGangInfo::gang_size() const {
  return gang_.size();
}
inline void tagEndGangInfo::clear_gang() {
  gang_.Clear();
}
inline const ::proto::game::tagEndGang& tagEndGangInfo::gang(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.tagEndGangInfo.Gang)
  return gang_.Get(index);
}
inline ::proto::game::tagEndGang* tagEndGangInfo::mutable_gang(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.tagEndGangInfo.Gang)
  return gang_.Mutable(index);
}
inline ::proto::game::tagEndGang* tagEndGangInfo::add_gang() {
  // @@protoc_insertion_point(field_add:proto.game.tagEndGangInfo.Gang)
  return gang_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagEndGang >&
tagEndGangInfo::gang() const {
  // @@protoc_insertion_point(field_list:proto.game.tagEndGangInfo.Gang)
  return gang_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagEndGang >*
tagEndGangInfo::mutable_gang() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.tagEndGangInfo.Gang)
  return &gang_;
}

// optional int32 TotalGangScore = 2;
inline bool tagEndGangInfo::has_totalgangscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagEndGangInfo::set_has_totalgangscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagEndGangInfo::clear_has_totalgangscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagEndGangInfo::clear_totalgangscore() {
  totalgangscore_ = 0;
  clear_has_totalgangscore();
}
inline ::google::protobuf::int32 tagEndGangInfo::totalgangscore() const {
  // @@protoc_insertion_point(field_get:proto.game.tagEndGangInfo.TotalGangScore)
  return totalgangscore_;
}
inline void tagEndGangInfo::set_totalgangscore(::google::protobuf::int32 value) {
  set_has_totalgangscore();
  totalgangscore_ = value;
  // @@protoc_insertion_point(field_set:proto.game.tagEndGangInfo.TotalGangScore)
}

// -------------------------------------------------------------------

// AddFanInfo

// optional int32 AddType = 1;
inline bool AddFanInfo::has_addtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddFanInfo::set_has_addtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddFanInfo::clear_has_addtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddFanInfo::clear_addtype() {
  addtype_ = 0;
  clear_has_addtype();
}
inline ::google::protobuf::int32 AddFanInfo::addtype() const {
  // @@protoc_insertion_point(field_get:proto.game.AddFanInfo.AddType)
  return addtype_;
}
inline void AddFanInfo::set_addtype(::google::protobuf::int32 value) {
  set_has_addtype();
  addtype_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AddFanInfo.AddType)
}

// optional int32 AddNum = 2;
inline bool AddFanInfo::has_addnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddFanInfo::set_has_addnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddFanInfo::clear_has_addnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddFanInfo::clear_addnum() {
  addnum_ = 0;
  clear_has_addnum();
}
inline ::google::protobuf::int32 AddFanInfo::addnum() const {
  // @@protoc_insertion_point(field_get:proto.game.AddFanInfo.AddNum)
  return addnum_;
}
inline void AddFanInfo::set_addnum(::google::protobuf::int32 value) {
  set_has_addnum();
  addnum_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AddFanInfo.AddNum)
}

// optional int32 AddType2 = 3;
inline bool AddFanInfo::has_addtype2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddFanInfo::set_has_addtype2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddFanInfo::clear_has_addtype2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddFanInfo::clear_addtype2() {
  addtype2_ = 0;
  clear_has_addtype2();
}
inline ::google::protobuf::int32 AddFanInfo::addtype2() const {
  // @@protoc_insertion_point(field_get:proto.game.AddFanInfo.AddType2)
  return addtype2_;
}
inline void AddFanInfo::set_addtype2(::google::protobuf::int32 value) {
  set_has_addtype2();
  addtype2_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AddFanInfo.AddType2)
}

// -------------------------------------------------------------------

// FanInfo

// required int32 chairid = 1;
inline bool FanInfo::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FanInfo::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FanInfo::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FanInfo::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 FanInfo::chairid() const {
  // @@protoc_insertion_point(field_get:proto.game.FanInfo.chairid)
  return chairid_;
}
inline void FanInfo::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.FanInfo.chairid)
}

// required int32 SpecialType = 2;
inline bool FanInfo::has_specialtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FanInfo::set_has_specialtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FanInfo::clear_has_specialtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FanInfo::clear_specialtype() {
  specialtype_ = 0;
  clear_has_specialtype();
}
inline ::google::protobuf::int32 FanInfo::specialtype() const {
  // @@protoc_insertion_point(field_get:proto.game.FanInfo.SpecialType)
  return specialtype_;
}
inline void FanInfo::set_specialtype(::google::protobuf::int32 value) {
  set_has_specialtype();
  specialtype_ = value;
  // @@protoc_insertion_point(field_set:proto.game.FanInfo.SpecialType)
}

// required int32 FanNum = 3;
inline bool FanInfo::has_fannum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FanInfo::set_has_fannum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FanInfo::clear_has_fannum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FanInfo::clear_fannum() {
  fannum_ = 0;
  clear_has_fannum();
}
inline ::google::protobuf::int32 FanInfo::fannum() const {
  // @@protoc_insertion_point(field_get:proto.game.FanInfo.FanNum)
  return fannum_;
}
inline void FanInfo::set_fannum(::google::protobuf::int32 value) {
  set_has_fannum();
  fannum_ = value;
  // @@protoc_insertion_point(field_set:proto.game.FanInfo.FanNum)
}

// repeated .proto.game.AddFanInfo addfan = 4;
inline int FanInfo::addfan_size() const {
  return addfan_.size();
}
inline void FanInfo::clear_addfan() {
  addfan_.Clear();
}
inline const ::proto::game::AddFanInfo& FanInfo::addfan(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.FanInfo.addfan)
  return addfan_.Get(index);
}
inline ::proto::game::AddFanInfo* FanInfo::mutable_addfan(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.FanInfo.addfan)
  return addfan_.Mutable(index);
}
inline ::proto::game::AddFanInfo* FanInfo::add_addfan() {
  // @@protoc_insertion_point(field_add:proto.game.FanInfo.addfan)
  return addfan_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::AddFanInfo >&
FanInfo::addfan() const {
  // @@protoc_insertion_point(field_list:proto.game.FanInfo.addfan)
  return addfan_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::AddFanInfo >*
FanInfo::mutable_addfan() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.FanInfo.addfan)
  return &addfan_;
}

// optional int32 hucard = 5;
inline bool FanInfo::has_hucard() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FanInfo::set_has_hucard() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FanInfo::clear_has_hucard() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FanInfo::clear_hucard() {
  hucard_ = 0;
  clear_has_hucard();
}
inline ::google::protobuf::int32 FanInfo::hucard() const {
  // @@protoc_insertion_point(field_get:proto.game.FanInfo.hucard)
  return hucard_;
}
inline void FanInfo::set_hucard(::google::protobuf::int32 value) {
  set_has_hucard();
  hucard_ = value;
  // @@protoc_insertion_point(field_set:proto.game.FanInfo.hucard)
}

// repeated int32 DianPao = 6;
inline int FanInfo::dianpao_size() const {
  return dianpao_.size();
}
inline void FanInfo::clear_dianpao() {
  dianpao_.Clear();
}
inline ::google::protobuf::int32 FanInfo::dianpao(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.FanInfo.DianPao)
  return dianpao_.Get(index);
}
inline void FanInfo::set_dianpao(int index, ::google::protobuf::int32 value) {
  dianpao_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.FanInfo.DianPao)
}
inline void FanInfo::add_dianpao(::google::protobuf::int32 value) {
  dianpao_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.FanInfo.DianPao)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FanInfo::dianpao() const {
  // @@protoc_insertion_point(field_list:proto.game.FanInfo.DianPao)
  return dianpao_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FanInfo::mutable_dianpao() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.FanInfo.DianPao)
  return &dianpao_;
}

// -------------------------------------------------------------------

// AckGameEnd

// repeated .proto.game.HandCards UserCard = 1;
inline int AckGameEnd::usercard_size() const {
  return usercard_.size();
}
inline void AckGameEnd::clear_usercard() {
  usercard_.Clear();
}
inline const ::proto::game::HandCards& AckGameEnd::usercard(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameEnd.UserCard)
  return usercard_.Get(index);
}
inline ::proto::game::HandCards* AckGameEnd::mutable_usercard(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameEnd.UserCard)
  return usercard_.Mutable(index);
}
inline ::proto::game::HandCards* AckGameEnd::add_usercard() {
  // @@protoc_insertion_point(field_add:proto.game.AckGameEnd.UserCard)
  return usercard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >&
AckGameEnd::usercard() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameEnd.UserCard)
  return usercard_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::HandCards >*
AckGameEnd::mutable_usercard() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameEnd.UserCard)
  return &usercard_;
}

// repeated int32 Score = 2;
inline int AckGameEnd::score_size() const {
  return score_.size();
}
inline void AckGameEnd::clear_score() {
  score_.Clear();
}
inline ::google::protobuf::int32 AckGameEnd::score(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameEnd.Score)
  return score_.Get(index);
}
inline void AckGameEnd::set_score(int index, ::google::protobuf::int32 value) {
  score_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckGameEnd.Score)
}
inline void AckGameEnd::add_score(::google::protobuf::int32 value) {
  score_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckGameEnd.Score)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameEnd::score() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameEnd.Score)
  return score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameEnd::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameEnd.Score)
  return &score_;
}

// optional int32 EndState = 3;
inline bool AckGameEnd::has_endstate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckGameEnd::set_has_endstate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckGameEnd::clear_has_endstate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckGameEnd::clear_endstate() {
  endstate_ = 0;
  clear_has_endstate();
}
inline ::google::protobuf::int32 AckGameEnd::endstate() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameEnd.EndState)
  return endstate_;
}
inline void AckGameEnd::set_endstate(::google::protobuf::int32 value) {
  set_has_endstate();
  endstate_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameEnd.EndState)
}

// repeated .proto.game.tagEndGangInfo EndGangInfo = 4;
inline int AckGameEnd::endganginfo_size() const {
  return endganginfo_.size();
}
inline void AckGameEnd::clear_endganginfo() {
  endganginfo_.Clear();
}
inline const ::proto::game::tagEndGangInfo& AckGameEnd::endganginfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameEnd.EndGangInfo)
  return endganginfo_.Get(index);
}
inline ::proto::game::tagEndGangInfo* AckGameEnd::mutable_endganginfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameEnd.EndGangInfo)
  return endganginfo_.Mutable(index);
}
inline ::proto::game::tagEndGangInfo* AckGameEnd::add_endganginfo() {
  // @@protoc_insertion_point(field_add:proto.game.AckGameEnd.EndGangInfo)
  return endganginfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagEndGangInfo >&
AckGameEnd::endganginfo() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameEnd.EndGangInfo)
  return endganginfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagEndGangInfo >*
AckGameEnd::mutable_endganginfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameEnd.EndGangInfo)
  return &endganginfo_;
}

// repeated .proto.game.FanInfo faninfo = 5;
inline int AckGameEnd::faninfo_size() const {
  return faninfo_.size();
}
inline void AckGameEnd::clear_faninfo() {
  faninfo_.Clear();
}
inline const ::proto::game::FanInfo& AckGameEnd::faninfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameEnd.faninfo)
  return faninfo_.Get(index);
}
inline ::proto::game::FanInfo* AckGameEnd::mutable_faninfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameEnd.faninfo)
  return faninfo_.Mutable(index);
}
inline ::proto::game::FanInfo* AckGameEnd::add_faninfo() {
  // @@protoc_insertion_point(field_add:proto.game.AckGameEnd.faninfo)
  return faninfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::FanInfo >&
AckGameEnd::faninfo() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameEnd.faninfo)
  return faninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::FanInfo >*
AckGameEnd::mutable_faninfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameEnd.faninfo)
  return &faninfo_;
}

// repeated int32 money = 6;
inline int AckGameEnd::money_size() const {
  return money_.size();
}
inline void AckGameEnd::clear_money() {
  money_.Clear();
}
inline ::google::protobuf::int32 AckGameEnd::money(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameEnd.money)
  return money_.Get(index);
}
inline void AckGameEnd::set_money(int index, ::google::protobuf::int32 value) {
  money_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckGameEnd.money)
}
inline void AckGameEnd::add_money(::google::protobuf::int32 value) {
  money_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckGameEnd.money)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameEnd::money() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameEnd.money)
  return money_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameEnd::mutable_money() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameEnd.money)
  return &money_;
}

// optional int32 ts = 7;
inline bool AckGameEnd::has_ts() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AckGameEnd::set_has_ts() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AckGameEnd::clear_has_ts() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AckGameEnd::clear_ts() {
  ts_ = 0;
  clear_has_ts();
}
inline ::google::protobuf::int32 AckGameEnd::ts() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameEnd.ts)
  return ts_;
}
inline void AckGameEnd::set_ts(::google::protobuf::int32 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameEnd.ts)
}

// repeated string md5 = 8;
inline int AckGameEnd::md5_size() const {
  return md5_.size();
}
inline void AckGameEnd::clear_md5() {
  md5_.Clear();
}
inline const ::std::string& AckGameEnd::md5(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameEnd.md5)
  return md5_.Get(index);
}
inline ::std::string* AckGameEnd::mutable_md5(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameEnd.md5)
  return md5_.Mutable(index);
}
inline void AckGameEnd::set_md5(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.game.AckGameEnd.md5)
  md5_.Mutable(index)->assign(value);
}
inline void AckGameEnd::set_md5(int index, const char* value) {
  md5_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.AckGameEnd.md5)
}
inline void AckGameEnd::set_md5(int index, const char* value, size_t size) {
  md5_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.AckGameEnd.md5)
}
inline ::std::string* AckGameEnd::add_md5() {
  return md5_.Add();
}
inline void AckGameEnd::add_md5(const ::std::string& value) {
  md5_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.game.AckGameEnd.md5)
}
inline void AckGameEnd::add_md5(const char* value) {
  md5_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.game.AckGameEnd.md5)
}
inline void AckGameEnd::add_md5(const char* value, size_t size) {
  md5_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.game.AckGameEnd.md5)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AckGameEnd::md5() const {
  // @@protoc_insertion_point(field_list:proto.game.AckGameEnd.md5)
  return md5_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AckGameEnd::mutable_md5() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckGameEnd.md5)
  return &md5_;
}

// -------------------------------------------------------------------

// AckIsAuto

// required int32 ChairID = 1;
inline bool AckIsAuto::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckIsAuto::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckIsAuto::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckIsAuto::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckIsAuto::chairid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckIsAuto.ChairID)
  return chairid_;
}
inline void AckIsAuto::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckIsAuto.ChairID)
}

// optional int32 isAuto = 2;
inline bool AckIsAuto::has_isauto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckIsAuto::set_has_isauto() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckIsAuto::clear_has_isauto() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckIsAuto::clear_isauto() {
  isauto_ = 0;
  clear_has_isauto();
}
inline ::google::protobuf::int32 AckIsAuto::isauto() const {
  // @@protoc_insertion_point(field_get:proto.game.AckIsAuto.isAuto)
  return isauto_;
}
inline void AckIsAuto::set_isauto(::google::protobuf::int32 value) {
  set_has_isauto();
  isauto_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckIsAuto.isAuto)
}

// -------------------------------------------------------------------

// AckUpdateUserInfo

// required int32 chairid = 1;
inline bool AckUpdateUserInfo::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUpdateUserInfo::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUpdateUserInfo::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUpdateUserInfo::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckUpdateUserInfo::chairid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUpdateUserInfo.chairid)
  return chairid_;
}
inline void AckUpdateUserInfo::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUpdateUserInfo.chairid)
}

// optional int32 uid = 2;
inline bool AckUpdateUserInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckUpdateUserInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckUpdateUserInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckUpdateUserInfo::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 AckUpdateUserInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUpdateUserInfo.uid)
  return uid_;
}
inline void AckUpdateUserInfo::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUpdateUserInfo.uid)
}

// optional int32 money = 3;
inline bool AckUpdateUserInfo::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckUpdateUserInfo::set_has_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckUpdateUserInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckUpdateUserInfo::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 AckUpdateUserInfo::money() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUpdateUserInfo.money)
  return money_;
}
inline void AckUpdateUserInfo::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUpdateUserInfo.money)
}

// optional int32 rmb = 4;
inline bool AckUpdateUserInfo::has_rmb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckUpdateUserInfo::set_has_rmb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckUpdateUserInfo::clear_has_rmb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckUpdateUserInfo::clear_rmb() {
  rmb_ = 0;
  clear_has_rmb();
}
inline ::google::protobuf::int32 AckUpdateUserInfo::rmb() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUpdateUserInfo.rmb)
  return rmb_;
}
inline void AckUpdateUserInfo::set_rmb(::google::protobuf::int32 value) {
  set_has_rmb();
  rmb_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUpdateUserInfo.rmb)
}

// -------------------------------------------------------------------

// AckGameStartFail

// required int32 vid = 1;
inline bool AckGameStartFail::has_vid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckGameStartFail::set_has_vid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckGameStartFail::clear_has_vid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckGameStartFail::clear_vid() {
  vid_ = 0;
  clear_has_vid();
}
inline ::google::protobuf::int32 AckGameStartFail::vid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameStartFail.vid)
  return vid_;
}
inline void AckGameStartFail::set_vid(::google::protobuf::int32 value) {
  set_has_vid();
  vid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameStartFail.vid)
}

// optional string roomid = 2;
inline bool AckGameStartFail::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckGameStartFail::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckGameStartFail::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckGameStartFail::clear_roomid() {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_->clear();
  }
  clear_has_roomid();
}
inline const ::std::string& AckGameStartFail::roomid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameStartFail.roomid)
  return *roomid_;
}
inline void AckGameStartFail::set_roomid(const ::std::string& value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set:proto.game.AckGameStartFail.roomid)
}
inline void AckGameStartFail::set_roomid(const char* value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.AckGameStartFail.roomid)
}
inline void AckGameStartFail::set_roomid(const char* value, size_t size) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.AckGameStartFail.roomid)
}
inline ::std::string* AckGameStartFail::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    roomid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.game.AckGameStartFail.roomid)
  return roomid_;
}
inline ::std::string* AckGameStartFail::release_roomid() {
  clear_has_roomid();
  if (roomid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = roomid_;
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AckGameStartFail::set_allocated_roomid(::std::string* roomid) {
  if (roomid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomid_;
  }
  if (roomid) {
    set_has_roomid();
    roomid_ = roomid;
  } else {
    clear_has_roomid();
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckGameStartFail.roomid)
}

// optional int32 can_start = 3;
inline bool AckGameStartFail::has_can_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckGameStartFail::set_has_can_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckGameStartFail::clear_has_can_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckGameStartFail::clear_can_start() {
  can_start_ = 0;
  clear_has_can_start();
}
inline ::google::protobuf::int32 AckGameStartFail::can_start() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameStartFail.can_start)
  return can_start_;
}
inline void AckGameStartFail::set_can_start(::google::protobuf::int32 value) {
  set_has_can_start();
  can_start_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameStartFail.can_start)
}

// optional int32 code = 4;
inline bool AckGameStartFail::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckGameStartFail::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckGameStartFail::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckGameStartFail::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 AckGameStartFail::code() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameStartFail.code)
  return code_;
}
inline void AckGameStartFail::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameStartFail.code)
}

// optional int32 ts = 5;
inline bool AckGameStartFail::has_ts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckGameStartFail::set_has_ts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckGameStartFail::clear_has_ts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckGameStartFail::clear_ts() {
  ts_ = 0;
  clear_has_ts();
}
inline ::google::protobuf::int32 AckGameStartFail::ts() const {
  // @@protoc_insertion_point(field_get:proto.game.AckGameStartFail.ts)
  return ts_;
}
inline void AckGameStartFail::set_ts(::google::protobuf::int32 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckGameStartFail.ts)
}

// -------------------------------------------------------------------

// AckUpdateTimer

// required int32 ChairID = 1;
inline bool AckUpdateTimer::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUpdateTimer::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUpdateTimer::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUpdateTimer::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckUpdateTimer::chairid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUpdateTimer.ChairID)
  return chairid_;
}
inline void AckUpdateTimer::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUpdateTimer.ChairID)
}

// optional int32 lefttime = 2;
inline bool AckUpdateTimer::has_lefttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckUpdateTimer::set_has_lefttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckUpdateTimer::clear_has_lefttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckUpdateTimer::clear_lefttime() {
  lefttime_ = 0;
  clear_has_lefttime();
}
inline ::google::protobuf::int32 AckUpdateTimer::lefttime() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUpdateTimer.lefttime)
  return lefttime_;
}
inline void AckUpdateTimer::set_lefttime(::google::protobuf::int32 value) {
  set_has_lefttime();
  lefttime_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUpdateTimer.lefttime)
}

// -------------------------------------------------------------------

// AckDisbandChooseFaild

// required int32 chairid = 1;
inline bool AckDisbandChooseFaild::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckDisbandChooseFaild::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckDisbandChooseFaild::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckDisbandChooseFaild::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckDisbandChooseFaild::chairid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckDisbandChooseFaild.chairid)
  return chairid_;
}
inline void AckDisbandChooseFaild::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckDisbandChooseFaild.chairid)
}

// optional int32 code = 2;
inline bool AckDisbandChooseFaild::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckDisbandChooseFaild::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckDisbandChooseFaild::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckDisbandChooseFaild::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 AckDisbandChooseFaild::code() const {
  // @@protoc_insertion_point(field_get:proto.game.AckDisbandChooseFaild.code)
  return code_;
}
inline void AckDisbandChooseFaild::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckDisbandChooseFaild.code)
}

// -------------------------------------------------------------------

// AckDisbandApply

// required int32 ApplyChairid = 1;
inline bool AckDisbandApply::has_applychairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckDisbandApply::set_has_applychairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckDisbandApply::clear_has_applychairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckDisbandApply::clear_applychairid() {
  applychairid_ = 0;
  clear_has_applychairid();
}
inline ::google::protobuf::int32 AckDisbandApply::applychairid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckDisbandApply.ApplyChairid)
  return applychairid_;
}
inline void AckDisbandApply::set_applychairid(::google::protobuf::int32 value) {
  set_has_applychairid();
  applychairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckDisbandApply.ApplyChairid)
}

// optional int32 Waittime = 2;
inline bool AckDisbandApply::has_waittime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckDisbandApply::set_has_waittime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckDisbandApply::clear_has_waittime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckDisbandApply::clear_waittime() {
  waittime_ = 0;
  clear_has_waittime();
}
inline ::google::protobuf::int32 AckDisbandApply::waittime() const {
  // @@protoc_insertion_point(field_get:proto.game.AckDisbandApply.Waittime)
  return waittime_;
}
inline void AckDisbandApply::set_waittime(::google::protobuf::int32 value) {
  set_has_waittime();
  waittime_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckDisbandApply.Waittime)
}

// repeated int32 onlinechairid = 3;
inline int AckDisbandApply::onlinechairid_size() const {
  return onlinechairid_.size();
}
inline void AckDisbandApply::clear_onlinechairid() {
  onlinechairid_.Clear();
}
inline ::google::protobuf::int32 AckDisbandApply::onlinechairid(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.AckDisbandApply.onlinechairid)
  return onlinechairid_.Get(index);
}
inline void AckDisbandApply::set_onlinechairid(int index, ::google::protobuf::int32 value) {
  onlinechairid_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.AckDisbandApply.onlinechairid)
}
inline void AckDisbandApply::add_onlinechairid(::google::protobuf::int32 value) {
  onlinechairid_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.AckDisbandApply.onlinechairid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckDisbandApply::onlinechairid() const {
  // @@protoc_insertion_point(field_list:proto.game.AckDisbandApply.onlinechairid)
  return onlinechairid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckDisbandApply::mutable_onlinechairid() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.AckDisbandApply.onlinechairid)
  return &onlinechairid_;
}

// optional int32 totaltime = 4;
inline bool AckDisbandApply::has_totaltime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckDisbandApply::set_has_totaltime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckDisbandApply::clear_has_totaltime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckDisbandApply::clear_totaltime() {
  totaltime_ = 0;
  clear_has_totaltime();
}
inline ::google::protobuf::int32 AckDisbandApply::totaltime() const {
  // @@protoc_insertion_point(field_get:proto.game.AckDisbandApply.totaltime)
  return totaltime_;
}
inline void AckDisbandApply::set_totaltime(::google::protobuf::int32 value) {
  set_has_totaltime();
  totaltime_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckDisbandApply.totaltime)
}

// -------------------------------------------------------------------

// AckDisbandChooseBc

// required int32 chairid = 1;
inline bool AckDisbandChooseBc::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckDisbandChooseBc::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckDisbandChooseBc::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckDisbandChooseBc::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckDisbandChooseBc::chairid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckDisbandChooseBc.chairid)
  return chairid_;
}
inline void AckDisbandChooseBc::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckDisbandChooseBc.chairid)
}

// optional int32 Choosestate = 2;
inline bool AckDisbandChooseBc::has_choosestate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckDisbandChooseBc::set_has_choosestate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckDisbandChooseBc::clear_has_choosestate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckDisbandChooseBc::clear_choosestate() {
  choosestate_ = 0;
  clear_has_choosestate();
}
inline ::google::protobuf::int32 AckDisbandChooseBc::choosestate() const {
  // @@protoc_insertion_point(field_get:proto.game.AckDisbandChooseBc.Choosestate)
  return choosestate_;
}
inline void AckDisbandChooseBc::set_choosestate(::google::protobuf::int32 value) {
  set_has_choosestate();
  choosestate_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckDisbandChooseBc.Choosestate)
}

// -------------------------------------------------------------------

// AckDisbandResult

// required int32 Result = 1;
inline bool AckDisbandResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckDisbandResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckDisbandResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckDisbandResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 AckDisbandResult::result() const {
  // @@protoc_insertion_point(field_get:proto.game.AckDisbandResult.Result)
  return result_;
}
inline void AckDisbandResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckDisbandResult.Result)
}

// optional int32 uid = 2;
inline bool AckDisbandResult::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckDisbandResult::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckDisbandResult::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckDisbandResult::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 AckDisbandResult::uid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckDisbandResult.uid)
  return uid_;
}
inline void AckDisbandResult::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckDisbandResult.uid)
}

// optional string avatar = 3;
inline bool AckDisbandResult::has_avatar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckDisbandResult::set_has_avatar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckDisbandResult::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckDisbandResult::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& AckDisbandResult::avatar() const {
  // @@protoc_insertion_point(field_get:proto.game.AckDisbandResult.avatar)
  return *avatar_;
}
inline void AckDisbandResult::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set:proto.game.AckDisbandResult.avatar)
}
inline void AckDisbandResult::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.AckDisbandResult.avatar)
}
inline void AckDisbandResult::set_avatar(const char* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.AckDisbandResult.avatar)
}
inline ::std::string* AckDisbandResult::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.game.AckDisbandResult.avatar)
  return avatar_;
}
inline ::std::string* AckDisbandResult::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AckDisbandResult::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckDisbandResult.avatar)
}

// optional string clubname = 4;
inline bool AckDisbandResult::has_clubname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckDisbandResult::set_has_clubname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckDisbandResult::clear_has_clubname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckDisbandResult::clear_clubname() {
  if (clubname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clubname_->clear();
  }
  clear_has_clubname();
}
inline const ::std::string& AckDisbandResult::clubname() const {
  // @@protoc_insertion_point(field_get:proto.game.AckDisbandResult.clubname)
  return *clubname_;
}
inline void AckDisbandResult::set_clubname(const ::std::string& value) {
  set_has_clubname();
  if (clubname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clubname_ = new ::std::string;
  }
  clubname_->assign(value);
  // @@protoc_insertion_point(field_set:proto.game.AckDisbandResult.clubname)
}
inline void AckDisbandResult::set_clubname(const char* value) {
  set_has_clubname();
  if (clubname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clubname_ = new ::std::string;
  }
  clubname_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.AckDisbandResult.clubname)
}
inline void AckDisbandResult::set_clubname(const char* value, size_t size) {
  set_has_clubname();
  if (clubname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clubname_ = new ::std::string;
  }
  clubname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.AckDisbandResult.clubname)
}
inline ::std::string* AckDisbandResult::mutable_clubname() {
  set_has_clubname();
  if (clubname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clubname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.game.AckDisbandResult.clubname)
  return clubname_;
}
inline ::std::string* AckDisbandResult::release_clubname() {
  clear_has_clubname();
  if (clubname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = clubname_;
    clubname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AckDisbandResult::set_allocated_clubname(::std::string* clubname) {
  if (clubname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clubname_;
  }
  if (clubname) {
    set_has_clubname();
    clubname_ = clubname;
  } else {
    clear_has_clubname();
    clubname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckDisbandResult.clubname)
}

// optional int32 clubcode = 5;
inline bool AckDisbandResult::has_clubcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckDisbandResult::set_has_clubcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckDisbandResult::clear_has_clubcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckDisbandResult::clear_clubcode() {
  clubcode_ = 0;
  clear_has_clubcode();
}
inline ::google::protobuf::int32 AckDisbandResult::clubcode() const {
  // @@protoc_insertion_point(field_get:proto.game.AckDisbandResult.clubcode)
  return clubcode_;
}
inline void AckDisbandResult::set_clubcode(::google::protobuf::int32 value) {
  set_has_clubcode();
  clubcode_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckDisbandResult.clubcode)
}

// optional int32 closetype = 6;
inline bool AckDisbandResult::has_closetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AckDisbandResult::set_has_closetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AckDisbandResult::clear_has_closetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AckDisbandResult::clear_closetype() {
  closetype_ = 0;
  clear_has_closetype();
}
inline ::google::protobuf::int32 AckDisbandResult::closetype() const {
  // @@protoc_insertion_point(field_get:proto.game.AckDisbandResult.closetype)
  return closetype_;
}
inline void AckDisbandResult::set_closetype(::google::protobuf::int32 value) {
  set_has_closetype();
  closetype_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckDisbandResult.closetype)
}

// -------------------------------------------------------------------

// AckUserOnlineState

// required int32 chairid = 1;
inline bool AckUserOnlineState::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUserOnlineState::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUserOnlineState::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUserOnlineState::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckUserOnlineState::chairid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserOnlineState.chairid)
  return chairid_;
}
inline void AckUserOnlineState::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserOnlineState.chairid)
}

// optional int32 state = 2;
inline bool AckUserOnlineState::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckUserOnlineState::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckUserOnlineState::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckUserOnlineState::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 AckUserOnlineState::state() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserOnlineState.state)
  return state_;
}
inline void AckUserOnlineState::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserOnlineState.state)
}

// -------------------------------------------------------------------

// AckUserOvertimeState

// required int32 chairid = 1;
inline bool AckUserOvertimeState::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUserOvertimeState::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUserOvertimeState::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUserOvertimeState::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckUserOvertimeState::chairid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserOvertimeState.chairid)
  return chairid_;
}
inline void AckUserOvertimeState::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserOvertimeState.chairid)
}

// optional int32 state = 2;
inline bool AckUserOvertimeState::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckUserOvertimeState::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckUserOvertimeState::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckUserOvertimeState::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 AckUserOvertimeState::state() const {
  // @@protoc_insertion_point(field_get:proto.game.AckUserOvertimeState.state)
  return state_;
}
inline void AckUserOvertimeState::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckUserOvertimeState.state)
}

// -------------------------------------------------------------------

// AckMessage

// optional string message = 1;
inline bool AckMessage::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckMessage::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckMessage::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& AckMessage::message() const {
  // @@protoc_insertion_point(field_get:proto.game.AckMessage.message)
  return *message_;
}
inline void AckMessage::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:proto.game.AckMessage.message)
}
inline void AckMessage::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.AckMessage.message)
}
inline void AckMessage::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.AckMessage.message)
}
inline ::std::string* AckMessage::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.game.AckMessage.message)
  return message_;
}
inline ::std::string* AckMessage::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AckMessage::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.AckMessage.message)
}

// optional int32 chairid = 2;
inline bool AckMessage::has_chairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckMessage::set_has_chairid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckMessage::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckMessage::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckMessage::chairid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckMessage.chairid)
  return chairid_;
}
inline void AckMessage::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckMessage.chairid)
}

// -------------------------------------------------------------------

// OperateWaite

// optional int32 state = 1;
inline bool OperateWaite::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperateWaite::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OperateWaite::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OperateWaite::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 OperateWaite::state() const {
  // @@protoc_insertion_point(field_get:proto.game.OperateWaite.state)
  return state_;
}
inline void OperateWaite::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.game.OperateWaite.state)
}

// -------------------------------------------------------------------

// ReordInfo

// optional int32 banker_num = 1;
inline bool ReordInfo::has_banker_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReordInfo::set_has_banker_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReordInfo::clear_has_banker_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReordInfo::clear_banker_num() {
  banker_num_ = 0;
  clear_has_banker_num();
}
inline ::google::protobuf::int32 ReordInfo::banker_num() const {
  // @@protoc_insertion_point(field_get:proto.game.ReordInfo.banker_num)
  return banker_num_;
}
inline void ReordInfo::set_banker_num(::google::protobuf::int32 value) {
  set_has_banker_num();
  banker_num_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReordInfo.banker_num)
}

// optional int32 hu_num = 2;
inline bool ReordInfo::has_hu_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReordInfo::set_has_hu_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReordInfo::clear_has_hu_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReordInfo::clear_hu_num() {
  hu_num_ = 0;
  clear_has_hu_num();
}
inline ::google::protobuf::int32 ReordInfo::hu_num() const {
  // @@protoc_insertion_point(field_get:proto.game.ReordInfo.hu_num)
  return hu_num_;
}
inline void ReordInfo::set_hu_num(::google::protobuf::int32 value) {
  set_has_hu_num();
  hu_num_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReordInfo.hu_num)
}

// optional int32 piaolaizi_num = 3;
inline bool ReordInfo::has_piaolaizi_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReordInfo::set_has_piaolaizi_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReordInfo::clear_has_piaolaizi_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReordInfo::clear_piaolaizi_num() {
  piaolaizi_num_ = 0;
  clear_has_piaolaizi_num();
}
inline ::google::protobuf::int32 ReordInfo::piaolaizi_num() const {
  // @@protoc_insertion_point(field_get:proto.game.ReordInfo.piaolaizi_num)
  return piaolaizi_num_;
}
inline void ReordInfo::set_piaolaizi_num(::google::protobuf::int32 value) {
  set_has_piaolaizi_num();
  piaolaizi_num_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReordInfo.piaolaizi_num)
}

// optional int32 outtime_num = 4;
inline bool ReordInfo::has_outtime_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReordInfo::set_has_outtime_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReordInfo::clear_has_outtime_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReordInfo::clear_outtime_num() {
  outtime_num_ = 0;
  clear_has_outtime_num();
}
inline ::google::protobuf::int32 ReordInfo::outtime_num() const {
  // @@protoc_insertion_point(field_get:proto.game.ReordInfo.outtime_num)
  return outtime_num_;
}
inline void ReordInfo::set_outtime_num(::google::protobuf::int32 value) {
  set_has_outtime_num();
  outtime_num_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReordInfo.outtime_num)
}

// optional int32 totalscore = 5;
inline bool ReordInfo::has_totalscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReordInfo::set_has_totalscore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReordInfo::clear_has_totalscore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReordInfo::clear_totalscore() {
  totalscore_ = 0;
  clear_has_totalscore();
}
inline ::google::protobuf::int32 ReordInfo::totalscore() const {
  // @@protoc_insertion_point(field_get:proto.game.ReordInfo.totalscore)
  return totalscore_;
}
inline void ReordInfo::set_totalscore(::google::protobuf::int32 value) {
  set_has_totalscore();
  totalscore_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReordInfo.totalscore)
}

// optional int32 WinCounts = 6;
inline bool ReordInfo::has_wincounts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReordInfo::set_has_wincounts() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReordInfo::clear_has_wincounts() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReordInfo::clear_wincounts() {
  wincounts_ = 0;
  clear_has_wincounts();
}
inline ::google::protobuf::int32 ReordInfo::wincounts() const {
  // @@protoc_insertion_point(field_get:proto.game.ReordInfo.WinCounts)
  return wincounts_;
}
inline void ReordInfo::set_wincounts(::google::protobuf::int32 value) {
  set_has_wincounts();
  wincounts_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReordInfo.WinCounts)
}

// optional int32 GangTimes = 7;
inline bool ReordInfo::has_gangtimes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReordInfo::set_has_gangtimes() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReordInfo::clear_has_gangtimes() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReordInfo::clear_gangtimes() {
  gangtimes_ = 0;
  clear_has_gangtimes();
}
inline ::google::protobuf::int32 ReordInfo::gangtimes() const {
  // @@protoc_insertion_point(field_get:proto.game.ReordInfo.GangTimes)
  return gangtimes_;
}
inline void ReordInfo::set_gangtimes(::google::protobuf::int32 value) {
  set_has_gangtimes();
  gangtimes_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReordInfo.GangTimes)
}

// optional int32 DianGangTimes = 8;
inline bool ReordInfo::has_diangangtimes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReordInfo::set_has_diangangtimes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReordInfo::clear_has_diangangtimes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReordInfo::clear_diangangtimes() {
  diangangtimes_ = 0;
  clear_has_diangangtimes();
}
inline ::google::protobuf::int32 ReordInfo::diangangtimes() const {
  // @@protoc_insertion_point(field_get:proto.game.ReordInfo.DianGangTimes)
  return diangangtimes_;
}
inline void ReordInfo::set_diangangtimes(::google::protobuf::int32 value) {
  set_has_diangangtimes();
  diangangtimes_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReordInfo.DianGangTimes)
}

// optional int32 Ex1 = 9;
inline bool ReordInfo::has_ex1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReordInfo::set_has_ex1() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReordInfo::clear_has_ex1() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReordInfo::clear_ex1() {
  ex1_ = 0;
  clear_has_ex1();
}
inline ::google::protobuf::int32 ReordInfo::ex1() const {
  // @@protoc_insertion_point(field_get:proto.game.ReordInfo.Ex1)
  return ex1_;
}
inline void ReordInfo::set_ex1(::google::protobuf::int32 value) {
  set_has_ex1();
  ex1_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReordInfo.Ex1)
}

// optional int32 Ex2 = 10;
inline bool ReordInfo::has_ex2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReordInfo::set_has_ex2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReordInfo::clear_has_ex2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReordInfo::clear_ex2() {
  ex2_ = 0;
  clear_has_ex2();
}
inline ::google::protobuf::int32 ReordInfo::ex2() const {
  // @@protoc_insertion_point(field_get:proto.game.ReordInfo.Ex2)
  return ex2_;
}
inline void ReordInfo::set_ex2(::google::protobuf::int32 value) {
  set_has_ex2();
  ex2_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReordInfo.Ex2)
}

// optional int32 dissState = 11;
inline bool ReordInfo::has_dissstate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ReordInfo::set_has_dissstate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ReordInfo::clear_has_dissstate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ReordInfo::clear_dissstate() {
  dissstate_ = 0;
  clear_has_dissstate();
}
inline ::google::protobuf::int32 ReordInfo::dissstate() const {
  // @@protoc_insertion_point(field_get:proto.game.ReordInfo.dissState)
  return dissstate_;
}
inline void ReordInfo::set_dissstate(::google::protobuf::int32 value) {
  set_has_dissstate();
  dissstate_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReordInfo.dissState)
}

// optional int32 MoBaoTimes = 12;
inline bool ReordInfo::has_mobaotimes() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ReordInfo::set_has_mobaotimes() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ReordInfo::clear_has_mobaotimes() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ReordInfo::clear_mobaotimes() {
  mobaotimes_ = 0;
  clear_has_mobaotimes();
}
inline ::google::protobuf::int32 ReordInfo::mobaotimes() const {
  // @@protoc_insertion_point(field_get:proto.game.ReordInfo.MoBaoTimes)
  return mobaotimes_;
}
inline void ReordInfo::set_mobaotimes(::google::protobuf::int32 value) {
  set_has_mobaotimes();
  mobaotimes_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReordInfo.MoBaoTimes)
}

// optional int32 Ex4 = 13;
inline bool ReordInfo::has_ex4() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ReordInfo::set_has_ex4() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ReordInfo::clear_has_ex4() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ReordInfo::clear_ex4() {
  ex4_ = 0;
  clear_has_ex4();
}
inline ::google::protobuf::int32 ReordInfo::ex4() const {
  // @@protoc_insertion_point(field_get:proto.game.ReordInfo.Ex4)
  return ex4_;
}
inline void ReordInfo::set_ex4(::google::protobuf::int32 value) {
  set_has_ex4();
  ex4_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReordInfo.Ex4)
}

// optional int32 Ex5 = 14;
inline bool ReordInfo::has_ex5() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ReordInfo::set_has_ex5() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ReordInfo::clear_has_ex5() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ReordInfo::clear_ex5() {
  ex5_ = 0;
  clear_has_ex5();
}
inline ::google::protobuf::int32 ReordInfo::ex5() const {
  // @@protoc_insertion_point(field_get:proto.game.ReordInfo.Ex5)
  return ex5_;
}
inline void ReordInfo::set_ex5(::google::protobuf::int32 value) {
  set_has_ex5();
  ex5_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReordInfo.Ex5)
}

// -------------------------------------------------------------------

// GameEndRecord

// repeated .proto.game.ReordInfo UserRecoreInfo = 1;
inline int GameEndRecord::userrecoreinfo_size() const {
  return userrecoreinfo_.size();
}
inline void GameEndRecord::clear_userrecoreinfo() {
  userrecoreinfo_.Clear();
}
inline const ::proto::game::ReordInfo& GameEndRecord::userrecoreinfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.GameEndRecord.UserRecoreInfo)
  return userrecoreinfo_.Get(index);
}
inline ::proto::game::ReordInfo* GameEndRecord::mutable_userrecoreinfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.GameEndRecord.UserRecoreInfo)
  return userrecoreinfo_.Mutable(index);
}
inline ::proto::game::ReordInfo* GameEndRecord::add_userrecoreinfo() {
  // @@protoc_insertion_point(field_add:proto.game.GameEndRecord.UserRecoreInfo)
  return userrecoreinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::ReordInfo >&
GameEndRecord::userrecoreinfo() const {
  // @@protoc_insertion_point(field_list:proto.game.GameEndRecord.UserRecoreInfo)
  return userrecoreinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::ReordInfo >*
GameEndRecord::mutable_userrecoreinfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.GameEndRecord.UserRecoreInfo)
  return &userrecoreinfo_;
}

// repeated int32 MostDianPaoUser = 2;
inline int GameEndRecord::mostdianpaouser_size() const {
  return mostdianpaouser_.size();
}
inline void GameEndRecord::clear_mostdianpaouser() {
  mostdianpaouser_.Clear();
}
inline ::google::protobuf::int32 GameEndRecord::mostdianpaouser(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.GameEndRecord.MostDianPaoUser)
  return mostdianpaouser_.Get(index);
}
inline void GameEndRecord::set_mostdianpaouser(int index, ::google::protobuf::int32 value) {
  mostdianpaouser_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.GameEndRecord.MostDianPaoUser)
}
inline void GameEndRecord::add_mostdianpaouser(::google::protobuf::int32 value) {
  mostdianpaouser_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.GameEndRecord.MostDianPaoUser)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameEndRecord::mostdianpaouser() const {
  // @@protoc_insertion_point(field_list:proto.game.GameEndRecord.MostDianPaoUser)
  return mostdianpaouser_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameEndRecord::mutable_mostdianpaouser() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.GameEndRecord.MostDianPaoUser)
  return &mostdianpaouser_;
}

// repeated int32 MostWinScoreUser = 3;
inline int GameEndRecord::mostwinscoreuser_size() const {
  return mostwinscoreuser_.size();
}
inline void GameEndRecord::clear_mostwinscoreuser() {
  mostwinscoreuser_.Clear();
}
inline ::google::protobuf::int32 GameEndRecord::mostwinscoreuser(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.GameEndRecord.MostWinScoreUser)
  return mostwinscoreuser_.Get(index);
}
inline void GameEndRecord::set_mostwinscoreuser(int index, ::google::protobuf::int32 value) {
  mostwinscoreuser_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.GameEndRecord.MostWinScoreUser)
}
inline void GameEndRecord::add_mostwinscoreuser(::google::protobuf::int32 value) {
  mostwinscoreuser_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.GameEndRecord.MostWinScoreUser)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameEndRecord::mostwinscoreuser() const {
  // @@protoc_insertion_point(field_list:proto.game.GameEndRecord.MostWinScoreUser)
  return mostwinscoreuser_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameEndRecord::mutable_mostwinscoreuser() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.GameEndRecord.MostWinScoreUser)
  return &mostwinscoreuser_;
}

// optional int32 DataTime = 4;
inline bool GameEndRecord::has_datatime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameEndRecord::set_has_datatime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameEndRecord::clear_has_datatime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameEndRecord::clear_datatime() {
  datatime_ = 0;
  clear_has_datatime();
}
inline ::google::protobuf::int32 GameEndRecord::datatime() const {
  // @@protoc_insertion_point(field_get:proto.game.GameEndRecord.DataTime)
  return datatime_;
}
inline void GameEndRecord::set_datatime(::google::protobuf::int32 value) {
  set_has_datatime();
  datatime_ = value;
  // @@protoc_insertion_point(field_set:proto.game.GameEndRecord.DataTime)
}

// optional int32 autodiss = 5;
inline bool GameEndRecord::has_autodiss() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameEndRecord::set_has_autodiss() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameEndRecord::clear_has_autodiss() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameEndRecord::clear_autodiss() {
  autodiss_ = 0;
  clear_has_autodiss();
}
inline ::google::protobuf::int32 GameEndRecord::autodiss() const {
  // @@protoc_insertion_point(field_get:proto.game.GameEndRecord.autodiss)
  return autodiss_;
}
inline void GameEndRecord::set_autodiss(::google::protobuf::int32 value) {
  set_has_autodiss();
  autodiss_ = value;
  // @@protoc_insertion_point(field_set:proto.game.GameEndRecord.autodiss)
}

// optional int32 StartTime = 6;
inline bool GameEndRecord::has_starttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameEndRecord::set_has_starttime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameEndRecord::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameEndRecord::clear_starttime() {
  starttime_ = 0;
  clear_has_starttime();
}
inline ::google::protobuf::int32 GameEndRecord::starttime() const {
  // @@protoc_insertion_point(field_get:proto.game.GameEndRecord.StartTime)
  return starttime_;
}
inline void GameEndRecord::set_starttime(::google::protobuf::int32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:proto.game.GameEndRecord.StartTime)
}

// -------------------------------------------------------------------

// RoundScore

// repeated int32 Score = 1;
inline int RoundScore::score_size() const {
  return score_.size();
}
inline void RoundScore::clear_score() {
  score_.Clear();
}
inline ::google::protobuf::int32 RoundScore::score(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.RoundScore.Score)
  return score_.Get(index);
}
inline void RoundScore::set_score(int index, ::google::protobuf::int32 value) {
  score_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.RoundScore.Score)
}
inline void RoundScore::add_score(::google::protobuf::int32 value) {
  score_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.RoundScore.Score)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoundScore::score() const {
  // @@protoc_insertion_point(field_list:proto.game.RoundScore.Score)
  return score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoundScore::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.RoundScore.Score)
  return &score_;
}

// -------------------------------------------------------------------

// TotalRoundScore

// repeated .proto.game.RoundScore round = 1;
inline int TotalRoundScore::round_size() const {
  return round_.size();
}
inline void TotalRoundScore::clear_round() {
  round_.Clear();
}
inline const ::proto::game::RoundScore& TotalRoundScore::round(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.TotalRoundScore.round)
  return round_.Get(index);
}
inline ::proto::game::RoundScore* TotalRoundScore::mutable_round(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.TotalRoundScore.round)
  return round_.Mutable(index);
}
inline ::proto::game::RoundScore* TotalRoundScore::add_round() {
  // @@protoc_insertion_point(field_add:proto.game.TotalRoundScore.round)
  return round_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::RoundScore >&
TotalRoundScore::round() const {
  // @@protoc_insertion_point(field_list:proto.game.TotalRoundScore.round)
  return round_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::RoundScore >*
TotalRoundScore::mutable_round() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.TotalRoundScore.round)
  return &round_;
}

// optional int32 roundcount = 2;
inline bool TotalRoundScore::has_roundcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TotalRoundScore::set_has_roundcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TotalRoundScore::clear_has_roundcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TotalRoundScore::clear_roundcount() {
  roundcount_ = 0;
  clear_has_roundcount();
}
inline ::google::protobuf::int32 TotalRoundScore::roundcount() const {
  // @@protoc_insertion_point(field_get:proto.game.TotalRoundScore.roundcount)
  return roundcount_;
}
inline void TotalRoundScore::set_roundcount(::google::protobuf::int32 value) {
  set_has_roundcount();
  roundcount_ = value;
  // @@protoc_insertion_point(field_set:proto.game.TotalRoundScore.roundcount)
}

// -------------------------------------------------------------------

// ReqChangeMode

// required int32 num = 1;
inline bool ReqChangeMode::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqChangeMode::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqChangeMode::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqChangeMode::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 ReqChangeMode::num() const {
  // @@protoc_insertion_point(field_get:proto.game.ReqChangeMode.num)
  return num_;
}
inline void ReqChangeMode::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:proto.game.ReqChangeMode.num)
}

// -------------------------------------------------------------------

// AckChangeMode

// optional int32 chairid = 1;
inline bool AckChangeMode::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckChangeMode::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckChangeMode::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckChangeMode::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 AckChangeMode::chairid() const {
  // @@protoc_insertion_point(field_get:proto.game.AckChangeMode.chairid)
  return chairid_;
}
inline void AckChangeMode::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckChangeMode.chairid)
}

// optional int32 num = 2;
inline bool AckChangeMode::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckChangeMode::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckChangeMode::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckChangeMode::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 AckChangeMode::num() const {
  // @@protoc_insertion_point(field_get:proto.game.AckChangeMode.num)
  return num_;
}
inline void AckChangeMode::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:proto.game.AckChangeMode.num)
}

// -------------------------------------------------------------------

// RealTimeSpeech

// optional int32 code = 1;
inline bool RealTimeSpeech::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RealTimeSpeech::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RealTimeSpeech::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RealTimeSpeech::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 RealTimeSpeech::code() const {
  // @@protoc_insertion_point(field_get:proto.game.RealTimeSpeech.code)
  return code_;
}
inline void RealTimeSpeech::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:proto.game.RealTimeSpeech.code)
}

// -------------------------------------------------------------------

// RealTimeSpeechAck

// repeated int32 code = 1;
inline int RealTimeSpeechAck::code_size() const {
  return code_.size();
}
inline void RealTimeSpeechAck::clear_code() {
  code_.Clear();
}
inline ::google::protobuf::int32 RealTimeSpeechAck::code(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.RealTimeSpeechAck.code)
  return code_.Get(index);
}
inline void RealTimeSpeechAck::set_code(int index, ::google::protobuf::int32 value) {
  code_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.RealTimeSpeechAck.code)
}
inline void RealTimeSpeechAck::add_code(::google::protobuf::int32 value) {
  code_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.RealTimeSpeechAck.code)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RealTimeSpeechAck::code() const {
  // @@protoc_insertion_point(field_list:proto.game.RealTimeSpeechAck.code)
  return code_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RealTimeSpeechAck::mutable_code() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.RealTimeSpeechAck.code)
  return &code_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::game::ACTION> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::game::ACTION>() {
  return ::proto::game::ACTION_descriptor();
}
template <> struct is_proto_enum< ::proto::game::STATUS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::game::STATUS>() {
  return ::proto::game::STATUS_descriptor();
}
template <> struct is_proto_enum< ::proto::game::DISSBAND_ACTION> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::game::DISSBAND_ACTION>() {
  return ::proto::game::DISSBAND_ACTION_descriptor();
}
template <> struct is_proto_enum< ::proto::game::OverTimeState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::game::OverTimeState>() {
  return ::proto::game::OverTimeState_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gameproto_2eproto__INCLUDED
