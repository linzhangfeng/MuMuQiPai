// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jianligameproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "jianligameproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace jianlimj {

namespace {

const ::google::protobuf::Descriptor* Hua_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hua_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBuHua_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBuHua_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckStartPiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckStartPiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChoosePiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChoosePiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBroadPiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBroadPiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckChooseOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckChooseOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* tagCurGameScence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tagCurGameScence_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckCurGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckCurGameEnd_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_jianligameproto_2eproto() {
  protobuf_AddDesc_jianligameproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "jianligameproto.proto");
  GOOGLE_CHECK(file != NULL);
  Hua_descriptor_ = file->message_type(0);
  static const int Hua_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hua, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hua, hua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hua, getcard_),
  };
  Hua_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hua_descriptor_,
      Hua::default_instance_,
      Hua_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hua, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hua, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hua));
  AckBuHua_descriptor_ = file->message_type(1);
  static const int AckBuHua_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuHua, buhua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuHua, leftcount_),
  };
  AckBuHua_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBuHua_descriptor_,
      AckBuHua::default_instance_,
      AckBuHua_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuHua, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuHua, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBuHua));
  AckStartPiao_descriptor_ = file->message_type(2);
  static const int AckStartPiao_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, piaonum_),
  };
  AckStartPiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckStartPiao_descriptor_,
      AckStartPiao::default_instance_,
      AckStartPiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckStartPiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckStartPiao));
  ReqChoosePiao_descriptor_ = file->message_type(3);
  static const int ReqChoosePiao_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoosePiao, piaonum_),
  };
  ReqChoosePiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChoosePiao_descriptor_,
      ReqChoosePiao::default_instance_,
      ReqChoosePiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoosePiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoosePiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChoosePiao));
  AckBroadPiao_descriptor_ = file->message_type(4);
  static const int AckBroadPiao_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, piaonum_),
  };
  AckBroadPiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBroadPiao_descriptor_,
      AckBroadPiao::default_instance_,
      AckBroadPiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBroadPiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBroadPiao));
  AckChooseOver_descriptor_ = file->message_type(5);
  static const int AckChooseOver_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChooseOver, piaonum_),
  };
  AckChooseOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckChooseOver_descriptor_,
      AckChooseOver::default_instance_,
      AckChooseOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChooseOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChooseOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckChooseOver));
  tagCurGameScence_descriptor_ = file->message_type(6);
  static const int tagCurGameScence_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCurGameScence, gamesence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCurGameScence, ispaotouing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCurGameScence, ispaotouok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCurGameScence, userpaotou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCurGameScence, mingloustate_),
  };
  tagCurGameScence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tagCurGameScence_descriptor_,
      tagCurGameScence::default_instance_,
      tagCurGameScence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCurGameScence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagCurGameScence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tagCurGameScence));
  AckCurGameEnd_descriptor_ = file->message_type(7);
  static const int AckCurGameEnd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCurGameEnd, gameend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCurGameEnd, userpaotou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCurGameEnd, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCurGameEnd, malist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCurGameEnd, zhongmalist_),
  };
  AckCurGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckCurGameEnd_descriptor_,
      AckCurGameEnd::default_instance_,
      AckCurGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCurGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCurGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckCurGameEnd));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_jianligameproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hua_descriptor_, &Hua::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBuHua_descriptor_, &AckBuHua::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckStartPiao_descriptor_, &AckStartPiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChoosePiao_descriptor_, &ReqChoosePiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBroadPiao_descriptor_, &AckBroadPiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckChooseOver_descriptor_, &AckChooseOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tagCurGameScence_descriptor_, &tagCurGameScence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckCurGameEnd_descriptor_, &AckCurGameEnd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_jianligameproto_2eproto() {
  delete Hua::default_instance_;
  delete Hua_reflection_;
  delete AckBuHua::default_instance_;
  delete AckBuHua_reflection_;
  delete AckStartPiao::default_instance_;
  delete AckStartPiao_reflection_;
  delete ReqChoosePiao::default_instance_;
  delete ReqChoosePiao_reflection_;
  delete AckBroadPiao::default_instance_;
  delete AckBroadPiao_reflection_;
  delete AckChooseOver::default_instance_;
  delete AckChooseOver_reflection_;
  delete tagCurGameScence::default_instance_;
  delete tagCurGameScence_reflection_;
  delete AckCurGameEnd::default_instance_;
  delete AckCurGameEnd_reflection_;
}

void protobuf_AddDesc_jianligameproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto::game::protobuf_AddDesc_gameproto_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025jianligameproto.proto\022\023proto.game.jian"
    "limj\032\017gameproto.proto\"4\n\003Hua\022\017\n\007chairid\030"
    "\001 \001(\005\022\013\n\003hua\030\002 \003(\005\022\017\n\007getcard\030\003 \003(\005\"F\n\010A"
    "ckBuHua\022\'\n\005buhua\030\001 \001(\0132\030.proto.game.jian"
    "limj.Hua\022\021\n\tleftcount\030\002 \001(\005\"\037\n\014AckStartP"
    "iao\022\017\n\007piaonum\030\001 \003(\005\" \n\rReqChoosePiao\022\017\n"
    "\007piaonum\030\001 \001(\005\"0\n\014AckBroadPiao\022\017\n\007chairi"
    "d\030\001 \001(\005\022\017\n\007piaonum\030\002 \001(\005\" \n\rAckChooseOve"
    "r\022\017\n\007piaonum\030\001 \003(\005\"\222\001\n\020tagCurGameScence\022"
    "+\n\tGameSence\030\001 \001(\0132\030.proto.game.AckGameS"
    "cene\022\023\n\013ispaotouing\030\002 \001(\010\022\022\n\nispaotouok\030"
    "\003 \003(\005\022\022\n\nUserpaotou\030\004 \003(\005\022\024\n\014mingloustat"
    "e\030\005 \003(\005\"~\n\rAckCurGameEnd\022\'\n\007gameend\030\001 \001("
    "\0132\026.proto.game.AckGameEnd\022\022\n\nuserpaotou\030"
    "\002 \003(\005\022\013\n\003num\030\003 \003(\005\022\016\n\006malist\030\004 \003(\005\022\023\n\013zh"
    "ongmalist\030\005 \003(\005", 615);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "jianligameproto.proto", &protobuf_RegisterTypes);
  Hua::default_instance_ = new Hua();
  AckBuHua::default_instance_ = new AckBuHua();
  AckStartPiao::default_instance_ = new AckStartPiao();
  ReqChoosePiao::default_instance_ = new ReqChoosePiao();
  AckBroadPiao::default_instance_ = new AckBroadPiao();
  AckChooseOver::default_instance_ = new AckChooseOver();
  tagCurGameScence::default_instance_ = new tagCurGameScence();
  AckCurGameEnd::default_instance_ = new AckCurGameEnd();
  Hua::default_instance_->InitAsDefaultInstance();
  AckBuHua::default_instance_->InitAsDefaultInstance();
  AckStartPiao::default_instance_->InitAsDefaultInstance();
  ReqChoosePiao::default_instance_->InitAsDefaultInstance();
  AckBroadPiao::default_instance_->InitAsDefaultInstance();
  AckChooseOver::default_instance_->InitAsDefaultInstance();
  tagCurGameScence::default_instance_->InitAsDefaultInstance();
  AckCurGameEnd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_jianligameproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_jianligameproto_2eproto {
  StaticDescriptorInitializer_jianligameproto_2eproto() {
    protobuf_AddDesc_jianligameproto_2eproto();
  }
} static_descriptor_initializer_jianligameproto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Hua::kChairidFieldNumber;
const int Hua::kHuaFieldNumber;
const int Hua::kGetcardFieldNumber;
#endif  // !_MSC_VER

Hua::Hua()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.jianlimj.Hua)
}

void Hua::InitAsDefaultInstance() {
}

Hua::Hua(const Hua& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.jianlimj.Hua)
}

void Hua::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hua::~Hua() {
  // @@protoc_insertion_point(destructor:proto.game.jianlimj.Hua)
  SharedDtor();
}

void Hua::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Hua::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hua::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hua_descriptor_;
}

const Hua& Hua::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jianligameproto_2eproto();
  return *default_instance_;
}

Hua* Hua::default_instance_ = NULL;

Hua* Hua::New() const {
  return new Hua;
}

void Hua::Clear() {
  chairid_ = 0;
  hua_.Clear();
  getcard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hua::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.jianlimj.Hua)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chairid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hua;
        break;
      }

      // repeated int32 hua = 2;
      case 2: {
        if (tag == 16) {
         parse_hua:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_hua())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hua())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hua;
        if (input->ExpectTag(24)) goto parse_getcard;
        break;
      }

      // repeated int32 getcard = 3;
      case 3: {
        if (tag == 24) {
         parse_getcard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_getcard())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_getcard())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_getcard;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.jianlimj.Hua)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.jianlimj.Hua)
  return false;
#undef DO_
}

void Hua::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.jianlimj.Hua)
  // optional int32 chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // repeated int32 hua = 2;
  for (int i = 0; i < this->hua_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->hua(i), output);
  }

  // repeated int32 getcard = 3;
  for (int i = 0; i < this->getcard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->getcard(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.jianlimj.Hua)
}

::google::protobuf::uint8* Hua::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.jianlimj.Hua)
  // optional int32 chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // repeated int32 hua = 2;
  for (int i = 0; i < this->hua_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->hua(i), target);
  }

  // repeated int32 getcard = 3;
  for (int i = 0; i < this->getcard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->getcard(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.jianlimj.Hua)
  return target;
}

int Hua::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

  }
  // repeated int32 hua = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hua_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hua(i));
    }
    total_size += 1 * this->hua_size() + data_size;
  }

  // repeated int32 getcard = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->getcard_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->getcard(i));
    }
    total_size += 1 * this->getcard_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hua::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hua* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hua*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hua::MergeFrom(const Hua& from) {
  GOOGLE_CHECK_NE(&from, this);
  hua_.MergeFrom(from.hua_);
  getcard_.MergeFrom(from.getcard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hua::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hua::CopyFrom(const Hua& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hua::IsInitialized() const {

  return true;
}

void Hua::Swap(Hua* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    hua_.Swap(&other->hua_);
    getcard_.Swap(&other->getcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hua::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hua_descriptor_;
  metadata.reflection = Hua_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBuHua::kBuhuaFieldNumber;
const int AckBuHua::kLeftcountFieldNumber;
#endif  // !_MSC_VER

AckBuHua::AckBuHua()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.jianlimj.AckBuHua)
}

void AckBuHua::InitAsDefaultInstance() {
  buhua_ = const_cast< ::proto::game::jianlimj::Hua*>(&::proto::game::jianlimj::Hua::default_instance());
}

AckBuHua::AckBuHua(const AckBuHua& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.jianlimj.AckBuHua)
}

void AckBuHua::SharedCtor() {
  _cached_size_ = 0;
  buhua_ = NULL;
  leftcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBuHua::~AckBuHua() {
  // @@protoc_insertion_point(destructor:proto.game.jianlimj.AckBuHua)
  SharedDtor();
}

void AckBuHua::SharedDtor() {
  if (this != default_instance_) {
    delete buhua_;
  }
}

void AckBuHua::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBuHua::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBuHua_descriptor_;
}

const AckBuHua& AckBuHua::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jianligameproto_2eproto();
  return *default_instance_;
}

AckBuHua* AckBuHua::default_instance_ = NULL;

AckBuHua* AckBuHua::New() const {
  return new AckBuHua;
}

void AckBuHua::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_buhua()) {
      if (buhua_ != NULL) buhua_->::proto::game::jianlimj::Hua::Clear();
    }
    leftcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBuHua::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.jianlimj.AckBuHua)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.game.jianlimj.Hua buhua = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buhua()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_leftcount;
        break;
      }

      // optional int32 leftcount = 2;
      case 2: {
        if (tag == 16) {
         parse_leftcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftcount_)));
          set_has_leftcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.jianlimj.AckBuHua)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.jianlimj.AckBuHua)
  return false;
#undef DO_
}

void AckBuHua::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.jianlimj.AckBuHua)
  // optional .proto.game.jianlimj.Hua buhua = 1;
  if (has_buhua()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buhua(), output);
  }

  // optional int32 leftcount = 2;
  if (has_leftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leftcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.jianlimj.AckBuHua)
}

::google::protobuf::uint8* AckBuHua::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.jianlimj.AckBuHua)
  // optional .proto.game.jianlimj.Hua buhua = 1;
  if (has_buhua()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buhua(), target);
  }

  // optional int32 leftcount = 2;
  if (has_leftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leftcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.jianlimj.AckBuHua)
  return target;
}

int AckBuHua::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.game.jianlimj.Hua buhua = 1;
    if (has_buhua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buhua());
    }

    // optional int32 leftcount = 2;
    if (has_leftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBuHua::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBuHua* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBuHua*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBuHua::MergeFrom(const AckBuHua& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buhua()) {
      mutable_buhua()->::proto::game::jianlimj::Hua::MergeFrom(from.buhua());
    }
    if (from.has_leftcount()) {
      set_leftcount(from.leftcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBuHua::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBuHua::CopyFrom(const AckBuHua& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBuHua::IsInitialized() const {

  return true;
}

void AckBuHua::Swap(AckBuHua* other) {
  if (other != this) {
    std::swap(buhua_, other->buhua_);
    std::swap(leftcount_, other->leftcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBuHua::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBuHua_descriptor_;
  metadata.reflection = AckBuHua_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckStartPiao::kPiaonumFieldNumber;
#endif  // !_MSC_VER

AckStartPiao::AckStartPiao()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.jianlimj.AckStartPiao)
}

void AckStartPiao::InitAsDefaultInstance() {
}

AckStartPiao::AckStartPiao(const AckStartPiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.jianlimj.AckStartPiao)
}

void AckStartPiao::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckStartPiao::~AckStartPiao() {
  // @@protoc_insertion_point(destructor:proto.game.jianlimj.AckStartPiao)
  SharedDtor();
}

void AckStartPiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckStartPiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckStartPiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckStartPiao_descriptor_;
}

const AckStartPiao& AckStartPiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jianligameproto_2eproto();
  return *default_instance_;
}

AckStartPiao* AckStartPiao::default_instance_ = NULL;

AckStartPiao* AckStartPiao::New() const {
  return new AckStartPiao;
}

void AckStartPiao::Clear() {
  piaonum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckStartPiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.jianlimj.AckStartPiao)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 piaonum = 1;
      case 1: {
        if (tag == 8) {
         parse_piaonum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_piaonum())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_piaonum())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_piaonum;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.jianlimj.AckStartPiao)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.jianlimj.AckStartPiao)
  return false;
#undef DO_
}

void AckStartPiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.jianlimj.AckStartPiao)
  // repeated int32 piaonum = 1;
  for (int i = 0; i < this->piaonum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->piaonum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.jianlimj.AckStartPiao)
}

::google::protobuf::uint8* AckStartPiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.jianlimj.AckStartPiao)
  // repeated int32 piaonum = 1;
  for (int i = 0; i < this->piaonum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->piaonum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.jianlimj.AckStartPiao)
  return target;
}

int AckStartPiao::ByteSize() const {
  int total_size = 0;

  // repeated int32 piaonum = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->piaonum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->piaonum(i));
    }
    total_size += 1 * this->piaonum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckStartPiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckStartPiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckStartPiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckStartPiao::MergeFrom(const AckStartPiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  piaonum_.MergeFrom(from.piaonum_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckStartPiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckStartPiao::CopyFrom(const AckStartPiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckStartPiao::IsInitialized() const {

  return true;
}

void AckStartPiao::Swap(AckStartPiao* other) {
  if (other != this) {
    piaonum_.Swap(&other->piaonum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckStartPiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckStartPiao_descriptor_;
  metadata.reflection = AckStartPiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChoosePiao::kPiaonumFieldNumber;
#endif  // !_MSC_VER

ReqChoosePiao::ReqChoosePiao()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.jianlimj.ReqChoosePiao)
}

void ReqChoosePiao::InitAsDefaultInstance() {
}

ReqChoosePiao::ReqChoosePiao(const ReqChoosePiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.jianlimj.ReqChoosePiao)
}

void ReqChoosePiao::SharedCtor() {
  _cached_size_ = 0;
  piaonum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChoosePiao::~ReqChoosePiao() {
  // @@protoc_insertion_point(destructor:proto.game.jianlimj.ReqChoosePiao)
  SharedDtor();
}

void ReqChoosePiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqChoosePiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChoosePiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChoosePiao_descriptor_;
}

const ReqChoosePiao& ReqChoosePiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jianligameproto_2eproto();
  return *default_instance_;
}

ReqChoosePiao* ReqChoosePiao::default_instance_ = NULL;

ReqChoosePiao* ReqChoosePiao::New() const {
  return new ReqChoosePiao;
}

void ReqChoosePiao::Clear() {
  piaonum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChoosePiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.jianlimj.ReqChoosePiao)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 piaonum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaonum_)));
          set_has_piaonum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.jianlimj.ReqChoosePiao)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.jianlimj.ReqChoosePiao)
  return false;
#undef DO_
}

void ReqChoosePiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.jianlimj.ReqChoosePiao)
  // optional int32 piaonum = 1;
  if (has_piaonum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->piaonum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.jianlimj.ReqChoosePiao)
}

::google::protobuf::uint8* ReqChoosePiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.jianlimj.ReqChoosePiao)
  // optional int32 piaonum = 1;
  if (has_piaonum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->piaonum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.jianlimj.ReqChoosePiao)
  return target;
}

int ReqChoosePiao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 piaonum = 1;
    if (has_piaonum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaonum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChoosePiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChoosePiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChoosePiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChoosePiao::MergeFrom(const ReqChoosePiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_piaonum()) {
      set_piaonum(from.piaonum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChoosePiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChoosePiao::CopyFrom(const ReqChoosePiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChoosePiao::IsInitialized() const {

  return true;
}

void ReqChoosePiao::Swap(ReqChoosePiao* other) {
  if (other != this) {
    std::swap(piaonum_, other->piaonum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChoosePiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChoosePiao_descriptor_;
  metadata.reflection = ReqChoosePiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBroadPiao::kChairidFieldNumber;
const int AckBroadPiao::kPiaonumFieldNumber;
#endif  // !_MSC_VER

AckBroadPiao::AckBroadPiao()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.jianlimj.AckBroadPiao)
}

void AckBroadPiao::InitAsDefaultInstance() {
}

AckBroadPiao::AckBroadPiao(const AckBroadPiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.jianlimj.AckBroadPiao)
}

void AckBroadPiao::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  piaonum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBroadPiao::~AckBroadPiao() {
  // @@protoc_insertion_point(destructor:proto.game.jianlimj.AckBroadPiao)
  SharedDtor();
}

void AckBroadPiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBroadPiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBroadPiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBroadPiao_descriptor_;
}

const AckBroadPiao& AckBroadPiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jianligameproto_2eproto();
  return *default_instance_;
}

AckBroadPiao* AckBroadPiao::default_instance_ = NULL;

AckBroadPiao* AckBroadPiao::New() const {
  return new AckBroadPiao;
}

void AckBroadPiao::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AckBroadPiao*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(chairid_, piaonum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBroadPiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.jianlimj.AckBroadPiao)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chairid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_piaonum;
        break;
      }

      // optional int32 piaonum = 2;
      case 2: {
        if (tag == 16) {
         parse_piaonum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piaonum_)));
          set_has_piaonum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.jianlimj.AckBroadPiao)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.jianlimj.AckBroadPiao)
  return false;
#undef DO_
}

void AckBroadPiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.jianlimj.AckBroadPiao)
  // optional int32 chairid = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 piaonum = 2;
  if (has_piaonum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->piaonum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.jianlimj.AckBroadPiao)
}

::google::protobuf::uint8* AckBroadPiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.jianlimj.AckBroadPiao)
  // optional int32 chairid = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 piaonum = 2;
  if (has_piaonum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->piaonum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.jianlimj.AckBroadPiao)
  return target;
}

int AckBroadPiao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chairid = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 piaonum = 2;
    if (has_piaonum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piaonum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBroadPiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBroadPiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBroadPiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBroadPiao::MergeFrom(const AckBroadPiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_piaonum()) {
      set_piaonum(from.piaonum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBroadPiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBroadPiao::CopyFrom(const AckBroadPiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBroadPiao::IsInitialized() const {

  return true;
}

void AckBroadPiao::Swap(AckBroadPiao* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(piaonum_, other->piaonum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBroadPiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBroadPiao_descriptor_;
  metadata.reflection = AckBroadPiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckChooseOver::kPiaonumFieldNumber;
#endif  // !_MSC_VER

AckChooseOver::AckChooseOver()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.jianlimj.AckChooseOver)
}

void AckChooseOver::InitAsDefaultInstance() {
}

AckChooseOver::AckChooseOver(const AckChooseOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.jianlimj.AckChooseOver)
}

void AckChooseOver::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckChooseOver::~AckChooseOver() {
  // @@protoc_insertion_point(destructor:proto.game.jianlimj.AckChooseOver)
  SharedDtor();
}

void AckChooseOver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckChooseOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckChooseOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckChooseOver_descriptor_;
}

const AckChooseOver& AckChooseOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jianligameproto_2eproto();
  return *default_instance_;
}

AckChooseOver* AckChooseOver::default_instance_ = NULL;

AckChooseOver* AckChooseOver::New() const {
  return new AckChooseOver;
}

void AckChooseOver::Clear() {
  piaonum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckChooseOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.jianlimj.AckChooseOver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 piaonum = 1;
      case 1: {
        if (tag == 8) {
         parse_piaonum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_piaonum())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_piaonum())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_piaonum;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.jianlimj.AckChooseOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.jianlimj.AckChooseOver)
  return false;
#undef DO_
}

void AckChooseOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.jianlimj.AckChooseOver)
  // repeated int32 piaonum = 1;
  for (int i = 0; i < this->piaonum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->piaonum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.jianlimj.AckChooseOver)
}

::google::protobuf::uint8* AckChooseOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.jianlimj.AckChooseOver)
  // repeated int32 piaonum = 1;
  for (int i = 0; i < this->piaonum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->piaonum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.jianlimj.AckChooseOver)
  return target;
}

int AckChooseOver::ByteSize() const {
  int total_size = 0;

  // repeated int32 piaonum = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->piaonum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->piaonum(i));
    }
    total_size += 1 * this->piaonum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckChooseOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckChooseOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckChooseOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckChooseOver::MergeFrom(const AckChooseOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  piaonum_.MergeFrom(from.piaonum_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckChooseOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckChooseOver::CopyFrom(const AckChooseOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckChooseOver::IsInitialized() const {

  return true;
}

void AckChooseOver::Swap(AckChooseOver* other) {
  if (other != this) {
    piaonum_.Swap(&other->piaonum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckChooseOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckChooseOver_descriptor_;
  metadata.reflection = AckChooseOver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tagCurGameScence::kGameSenceFieldNumber;
const int tagCurGameScence::kIspaotouingFieldNumber;
const int tagCurGameScence::kIspaotouokFieldNumber;
const int tagCurGameScence::kUserpaotouFieldNumber;
const int tagCurGameScence::kMingloustateFieldNumber;
#endif  // !_MSC_VER

tagCurGameScence::tagCurGameScence()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.jianlimj.tagCurGameScence)
}

void tagCurGameScence::InitAsDefaultInstance() {
  gamesence_ = const_cast< ::proto::game::AckGameScene*>(&::proto::game::AckGameScene::default_instance());
}

tagCurGameScence::tagCurGameScence(const tagCurGameScence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.jianlimj.tagCurGameScence)
}

void tagCurGameScence::SharedCtor() {
  _cached_size_ = 0;
  gamesence_ = NULL;
  ispaotouing_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tagCurGameScence::~tagCurGameScence() {
  // @@protoc_insertion_point(destructor:proto.game.jianlimj.tagCurGameScence)
  SharedDtor();
}

void tagCurGameScence::SharedDtor() {
  if (this != default_instance_) {
    delete gamesence_;
  }
}

void tagCurGameScence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagCurGameScence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tagCurGameScence_descriptor_;
}

const tagCurGameScence& tagCurGameScence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jianligameproto_2eproto();
  return *default_instance_;
}

tagCurGameScence* tagCurGameScence::default_instance_ = NULL;

tagCurGameScence* tagCurGameScence::New() const {
  return new tagCurGameScence;
}

void tagCurGameScence::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_gamesence()) {
      if (gamesence_ != NULL) gamesence_->::proto::game::AckGameScene::Clear();
    }
    ispaotouing_ = false;
  }
  ispaotouok_.Clear();
  userpaotou_.Clear();
  mingloustate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tagCurGameScence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.jianlimj.tagCurGameScence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.game.AckGameScene GameSence = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamesence()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ispaotouing;
        break;
      }

      // optional bool ispaotouing = 2;
      case 2: {
        if (tag == 16) {
         parse_ispaotouing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispaotouing_)));
          set_has_ispaotouing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ispaotouok;
        break;
      }

      // repeated int32 ispaotouok = 3;
      case 3: {
        if (tag == 24) {
         parse_ispaotouok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_ispaotouok())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ispaotouok())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ispaotouok;
        if (input->ExpectTag(32)) goto parse_Userpaotou;
        break;
      }

      // repeated int32 Userpaotou = 4;
      case 4: {
        if (tag == 32) {
         parse_Userpaotou:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_userpaotou())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_userpaotou())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Userpaotou;
        if (input->ExpectTag(40)) goto parse_mingloustate;
        break;
      }

      // repeated int32 mingloustate = 5;
      case 5: {
        if (tag == 40) {
         parse_mingloustate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_mingloustate())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mingloustate())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mingloustate;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.jianlimj.tagCurGameScence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.jianlimj.tagCurGameScence)
  return false;
#undef DO_
}

void tagCurGameScence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.jianlimj.tagCurGameScence)
  // optional .proto.game.AckGameScene GameSence = 1;
  if (has_gamesence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gamesence(), output);
  }

  // optional bool ispaotouing = 2;
  if (has_ispaotouing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ispaotouing(), output);
  }

  // repeated int32 ispaotouok = 3;
  for (int i = 0; i < this->ispaotouok_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->ispaotouok(i), output);
  }

  // repeated int32 Userpaotou = 4;
  for (int i = 0; i < this->userpaotou_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->userpaotou(i), output);
  }

  // repeated int32 mingloustate = 5;
  for (int i = 0; i < this->mingloustate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->mingloustate(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.jianlimj.tagCurGameScence)
}

::google::protobuf::uint8* tagCurGameScence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.jianlimj.tagCurGameScence)
  // optional .proto.game.AckGameScene GameSence = 1;
  if (has_gamesence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gamesence(), target);
  }

  // optional bool ispaotouing = 2;
  if (has_ispaotouing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ispaotouing(), target);
  }

  // repeated int32 ispaotouok = 3;
  for (int i = 0; i < this->ispaotouok_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->ispaotouok(i), target);
  }

  // repeated int32 Userpaotou = 4;
  for (int i = 0; i < this->userpaotou_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->userpaotou(i), target);
  }

  // repeated int32 mingloustate = 5;
  for (int i = 0; i < this->mingloustate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->mingloustate(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.jianlimj.tagCurGameScence)
  return target;
}

int tagCurGameScence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.game.AckGameScene GameSence = 1;
    if (has_gamesence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamesence());
    }

    // optional bool ispaotouing = 2;
    if (has_ispaotouing()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 ispaotouok = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ispaotouok_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ispaotouok(i));
    }
    total_size += 1 * this->ispaotouok_size() + data_size;
  }

  // repeated int32 Userpaotou = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->userpaotou_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->userpaotou(i));
    }
    total_size += 1 * this->userpaotou_size() + data_size;
  }

  // repeated int32 mingloustate = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->mingloustate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mingloustate(i));
    }
    total_size += 1 * this->mingloustate_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagCurGameScence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tagCurGameScence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tagCurGameScence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tagCurGameScence::MergeFrom(const tagCurGameScence& from) {
  GOOGLE_CHECK_NE(&from, this);
  ispaotouok_.MergeFrom(from.ispaotouok_);
  userpaotou_.MergeFrom(from.userpaotou_);
  mingloustate_.MergeFrom(from.mingloustate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesence()) {
      mutable_gamesence()->::proto::game::AckGameScene::MergeFrom(from.gamesence());
    }
    if (from.has_ispaotouing()) {
      set_ispaotouing(from.ispaotouing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tagCurGameScence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagCurGameScence::CopyFrom(const tagCurGameScence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagCurGameScence::IsInitialized() const {

  if (has_gamesence()) {
    if (!this->gamesence().IsInitialized()) return false;
  }
  return true;
}

void tagCurGameScence::Swap(tagCurGameScence* other) {
  if (other != this) {
    std::swap(gamesence_, other->gamesence_);
    std::swap(ispaotouing_, other->ispaotouing_);
    ispaotouok_.Swap(&other->ispaotouok_);
    userpaotou_.Swap(&other->userpaotou_);
    mingloustate_.Swap(&other->mingloustate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tagCurGameScence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tagCurGameScence_descriptor_;
  metadata.reflection = tagCurGameScence_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckCurGameEnd::kGameendFieldNumber;
const int AckCurGameEnd::kUserpaotouFieldNumber;
const int AckCurGameEnd::kNumFieldNumber;
const int AckCurGameEnd::kMalistFieldNumber;
const int AckCurGameEnd::kZhongmalistFieldNumber;
#endif  // !_MSC_VER

AckCurGameEnd::AckCurGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.game.jianlimj.AckCurGameEnd)
}

void AckCurGameEnd::InitAsDefaultInstance() {
  gameend_ = const_cast< ::proto::game::AckGameEnd*>(&::proto::game::AckGameEnd::default_instance());
}

AckCurGameEnd::AckCurGameEnd(const AckCurGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.game.jianlimj.AckCurGameEnd)
}

void AckCurGameEnd::SharedCtor() {
  _cached_size_ = 0;
  gameend_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckCurGameEnd::~AckCurGameEnd() {
  // @@protoc_insertion_point(destructor:proto.game.jianlimj.AckCurGameEnd)
  SharedDtor();
}

void AckCurGameEnd::SharedDtor() {
  if (this != default_instance_) {
    delete gameend_;
  }
}

void AckCurGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckCurGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckCurGameEnd_descriptor_;
}

const AckCurGameEnd& AckCurGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jianligameproto_2eproto();
  return *default_instance_;
}

AckCurGameEnd* AckCurGameEnd::default_instance_ = NULL;

AckCurGameEnd* AckCurGameEnd::New() const {
  return new AckCurGameEnd;
}

void AckCurGameEnd::Clear() {
  if (has_gameend()) {
    if (gameend_ != NULL) gameend_->::proto::game::AckGameEnd::Clear();
  }
  userpaotou_.Clear();
  num_.Clear();
  malist_.Clear();
  zhongmalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckCurGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.game.jianlimj.AckCurGameEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.game.AckGameEnd gameend = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameend()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userpaotou;
        break;
      }

      // repeated int32 userpaotou = 2;
      case 2: {
        if (tag == 16) {
         parse_userpaotou:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_userpaotou())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_userpaotou())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userpaotou;
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // repeated int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_num())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_num())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        if (input->ExpectTag(32)) goto parse_malist;
        break;
      }

      // repeated int32 malist = 4;
      case 4: {
        if (tag == 32) {
         parse_malist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_malist())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_malist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_malist;
        if (input->ExpectTag(40)) goto parse_zhongmalist;
        break;
      }

      // repeated int32 zhongmalist = 5;
      case 5: {
        if (tag == 40) {
         parse_zhongmalist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_zhongmalist())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_zhongmalist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_zhongmalist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.game.jianlimj.AckCurGameEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.game.jianlimj.AckCurGameEnd)
  return false;
#undef DO_
}

void AckCurGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.game.jianlimj.AckCurGameEnd)
  // optional .proto.game.AckGameEnd gameend = 1;
  if (has_gameend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gameend(), output);
  }

  // repeated int32 userpaotou = 2;
  for (int i = 0; i < this->userpaotou_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->userpaotou(i), output);
  }

  // repeated int32 num = 3;
  for (int i = 0; i < this->num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->num(i), output);
  }

  // repeated int32 malist = 4;
  for (int i = 0; i < this->malist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->malist(i), output);
  }

  // repeated int32 zhongmalist = 5;
  for (int i = 0; i < this->zhongmalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->zhongmalist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.game.jianlimj.AckCurGameEnd)
}

::google::protobuf::uint8* AckCurGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.game.jianlimj.AckCurGameEnd)
  // optional .proto.game.AckGameEnd gameend = 1;
  if (has_gameend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gameend(), target);
  }

  // repeated int32 userpaotou = 2;
  for (int i = 0; i < this->userpaotou_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->userpaotou(i), target);
  }

  // repeated int32 num = 3;
  for (int i = 0; i < this->num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->num(i), target);
  }

  // repeated int32 malist = 4;
  for (int i = 0; i < this->malist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->malist(i), target);
  }

  // repeated int32 zhongmalist = 5;
  for (int i = 0; i < this->zhongmalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->zhongmalist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.game.jianlimj.AckCurGameEnd)
  return target;
}

int AckCurGameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto.game.AckGameEnd gameend = 1;
    if (has_gameend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameend());
    }

  }
  // repeated int32 userpaotou = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->userpaotou_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->userpaotou(i));
    }
    total_size += 1 * this->userpaotou_size() + data_size;
  }

  // repeated int32 num = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->num(i));
    }
    total_size += 1 * this->num_size() + data_size;
  }

  // repeated int32 malist = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->malist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->malist(i));
    }
    total_size += 1 * this->malist_size() + data_size;
  }

  // repeated int32 zhongmalist = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->zhongmalist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->zhongmalist(i));
    }
    total_size += 1 * this->zhongmalist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckCurGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckCurGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckCurGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckCurGameEnd::MergeFrom(const AckCurGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  userpaotou_.MergeFrom(from.userpaotou_);
  num_.MergeFrom(from.num_);
  malist_.MergeFrom(from.malist_);
  zhongmalist_.MergeFrom(from.zhongmalist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameend()) {
      mutable_gameend()->::proto::game::AckGameEnd::MergeFrom(from.gameend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckCurGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCurGameEnd::CopyFrom(const AckCurGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCurGameEnd::IsInitialized() const {

  if (has_gameend()) {
    if (!this->gameend().IsInitialized()) return false;
  }
  return true;
}

void AckCurGameEnd::Swap(AckCurGameEnd* other) {
  if (other != this) {
    std::swap(gameend_, other->gameend_);
    userpaotou_.Swap(&other->userpaotou_);
    num_.Swap(&other->num_);
    malist_.Swap(&other->malist_);
    zhongmalist_.Swap(&other->zhongmalist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckCurGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckCurGameEnd_descriptor_;
  metadata.reflection = AckCurGameEnd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace jianlimj
}  // namespace game
}  // namespace proto

// @@protoc_insertion_point(global_scope)
