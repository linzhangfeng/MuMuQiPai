// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: redisproto.proto

#ifndef PROTOBUF_redisproto_2eproto__INCLUDED
#define PROTOBUF_redisproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {
namespace redis {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_redisproto_2eproto();
void protobuf_AssignDesc_redisproto_2eproto();
void protobuf_ShutdownFile_redisproto_2eproto();

class tagPlayers;
class Seat;
class MJConfCommon;
class MJConfPiao;
class MJConfBuyHorse;
class MJConfZhuaniao;
class MJHuType;
class MJConfOther;
class MJCustomizedConf;
class RoundScore;
class Table_TotalRecordInfo;
class Shai_Set;
class FixedCard;
class HandCards;
class CCardTypePool;
class CCardPool;
class MultiOpInfo;
class RobAddInfo;
class LOWLEVELOPERATE;
class tagGangScore;
class tagGangScoreInfo;
class tagHuRecord;
class tagHuInfo;
class MJ_BUFFER;
class HuFanInfo;
class CGameAccout;
class ForbidWin;
class Fantype_to_FanNum;
class tagPlayerGPS;
class tagRedisInfo;

// ===================================================================

class tagPlayers : public ::google::protobuf::Message {
 public:
  tagPlayers();
  virtual ~tagPlayers();

  tagPlayers(const tagPlayers& from);

  inline tagPlayers& operator=(const tagPlayers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPlayers& default_instance();

  void Swap(tagPlayers* other);

  // implements Message ----------------------------------------------

  tagPlayers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagPlayers& from);
  void MergeFrom(const tagPlayers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional string tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  inline const ::std::string& tid() const;
  inline void set_tid(const ::std::string& value);
  inline void set_tid(const char* value);
  inline void set_tid(const char* value, size_t size);
  inline ::std::string* mutable_tid();
  inline ::std::string* release_tid();
  inline void set_allocated_tid(::std::string* tid);

  // optional string skey = 3;
  inline bool has_skey() const;
  inline void clear_skey();
  static const int kSkeyFieldNumber = 3;
  inline const ::std::string& skey() const;
  inline void set_skey(const ::std::string& value);
  inline void set_skey(const char* value);
  inline void set_skey(const char* value, size_t size);
  inline ::std::string* mutable_skey();
  inline ::std::string* release_skey();
  inline void set_allocated_skey(::std::string* skey);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string avatar = 5;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 5;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const char* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // optional int32 seatid = 6;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 6;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // optional int32 sex = 7;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 7;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 exp = 8;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 8;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 rmb = 9;
  inline bool has_rmb() const;
  inline void clear_rmb();
  static const int kRmbFieldNumber = 9;
  inline ::google::protobuf::int32 rmb() const;
  inline void set_rmb(::google::protobuf::int32 value);

  // optional int32 money = 10;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 10;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // optional int32 coin = 11;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 11;
  inline ::google::protobuf::int32 coin() const;
  inline void set_coin(::google::protobuf::int32 value);

  // optional int32 pcount = 12;
  inline bool has_pcount() const;
  inline void clear_pcount();
  static const int kPcountFieldNumber = 12;
  inline ::google::protobuf::int32 pcount() const;
  inline void set_pcount(::google::protobuf::int32 value);

  // optional int32 vlevel = 13;
  inline bool has_vlevel() const;
  inline void clear_vlevel();
  static const int kVlevelFieldNumber = 13;
  inline ::google::protobuf::int32 vlevel() const;
  inline void set_vlevel(::google::protobuf::int32 value);

  // optional int32 status = 14;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 14;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int32 logout_type = 15;
  inline bool has_logout_type() const;
  inline void clear_logout_type();
  static const int kLogoutTypeFieldNumber = 15;
  inline ::google::protobuf::int32 logout_type() const;
  inline void set_logout_type(::google::protobuf::int32 value);

  // optional int32 down_tag = 16;
  inline bool has_down_tag() const;
  inline void clear_down_tag();
  static const int kDownTagFieldNumber = 16;
  inline ::google::protobuf::int32 down_tag() const;
  inline void set_down_tag(::google::protobuf::int32 value);

  // optional int32 usertype = 17;
  inline bool has_usertype() const;
  inline void clear_usertype();
  static const int kUsertypeFieldNumber = 17;
  inline ::google::protobuf::int32 usertype() const;
  inline void set_usertype(::google::protobuf::int32 value);

  // optional int32 disbandcount = 18;
  inline bool has_disbandcount() const;
  inline void clear_disbandcount();
  static const int kDisbandcountFieldNumber = 18;
  inline ::google::protobuf::int32 disbandcount() const;
  inline void set_disbandcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.redis.tagPlayers)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_skey();
  inline void clear_has_skey();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_rmb();
  inline void clear_has_rmb();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_pcount();
  inline void clear_has_pcount();
  inline void set_has_vlevel();
  inline void clear_has_vlevel();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_logout_type();
  inline void clear_has_logout_type();
  inline void set_has_down_tag();
  inline void clear_has_down_tag();
  inline void set_has_usertype();
  inline void clear_has_usertype();
  inline void set_has_disbandcount();
  inline void clear_has_disbandcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* tid_;
  ::std::string* skey_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 seatid_;
  ::std::string* name_;
  ::std::string* avatar_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 rmb_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 coin_;
  ::google::protobuf::int32 pcount_;
  ::google::protobuf::int32 vlevel_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 logout_type_;
  ::google::protobuf::int32 down_tag_;
  ::google::protobuf::int32 usertype_;
  ::google::protobuf::int32 disbandcount_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static tagPlayers* default_instance_;
};
// -------------------------------------------------------------------

class Seat : public ::google::protobuf::Message {
 public:
  Seat();
  virtual ~Seat();

  Seat(const Seat& from);

  inline Seat& operator=(const Seat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Seat& default_instance();

  void Swap(Seat* other);

  // implements Message ----------------------------------------------

  Seat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Seat& from);
  void MergeFrom(const Seat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 seatid = 2;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 2;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // optional int32 action = 3;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 3;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);

  // optional int32 uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.redis.Seat)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 action_;
  ::google::protobuf::int32 uid_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static Seat* default_instance_;
};
// -------------------------------------------------------------------

class MJConfCommon : public ::google::protobuf::Message {
 public:
  MJConfCommon();
  virtual ~MJConfCommon();

  MJConfCommon(const MJConfCommon& from);

  inline MJConfCommon& operator=(const MJConfCommon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MJConfCommon& default_instance();

  void Swap(MJConfCommon* other);

  // implements Message ----------------------------------------------

  MJConfCommon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MJConfCommon& from);
  void MergeFrom(const MJConfCommon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool m_bsupportchi = 1;
  inline bool has_m_bsupportchi() const;
  inline void clear_m_bsupportchi();
  static const int kMBsupportchiFieldNumber = 1;
  inline bool m_bsupportchi() const;
  inline void set_m_bsupportchi(bool value);

  // optional bool m_bsupportwind = 2;
  inline bool has_m_bsupportwind() const;
  inline void clear_m_bsupportwind();
  static const int kMBsupportwindFieldNumber = 2;
  inline bool m_bsupportwind() const;
  inline void set_m_bsupportwind(bool value);

  // optional bool m_bsupportting = 3;
  inline bool has_m_bsupportting() const;
  inline void clear_m_bsupportting();
  static const int kMBsupporttingFieldNumber = 3;
  inline bool m_bsupportting() const;
  inline void set_m_bsupportting(bool value);

  // optional bool m_bzimohu = 4;
  inline bool has_m_bzimohu() const;
  inline void clear_m_bzimohu();
  static const int kMBzimohuFieldNumber = 4;
  inline bool m_bzimohu() const;
  inline void set_m_bzimohu(bool value);

  // optional bool m_byipaoduoxiang = 5;
  inline bool has_m_byipaoduoxiang() const;
  inline void clear_m_byipaoduoxiang();
  static const int kMByipaoduoxiangFieldNumber = 5;
  inline bool m_byipaoduoxiang() const;
  inline void set_m_byipaoduoxiang(bool value);

  // optional bool m_bqiangganghu = 6;
  inline bool has_m_bqiangganghu() const;
  inline void clear_m_bqiangganghu();
  static const int kMBqiangganghuFieldNumber = 6;
  inline bool m_bqiangganghu() const;
  inline void set_m_bqiangganghu(bool value);

  // optional bool m_bqiangzhigang = 7;
  inline bool has_m_bqiangzhigang() const;
  inline void clear_m_bqiangzhigang();
  static const int kMBqiangzhigangFieldNumber = 7;
  inline bool m_bqiangzhigang() const;
  inline void set_m_bqiangzhigang(bool value);

  // optional bool m_bqiangangang = 8;
  inline bool has_m_bqiangangang() const;
  inline void clear_m_bqiangangang();
  static const int kMBqiangangangFieldNumber = 8;
  inline bool m_bqiangangang() const;
  inline void set_m_bqiangangang(bool value);

  // optional bool m_bqangshangpao = 9;
  inline bool has_m_bqangshangpao() const;
  inline void clear_m_bqangshangpao();
  static const int kMBqangshangpaoFieldNumber = 9;
  inline bool m_bqangshangpao() const;
  inline void set_m_bqangshangpao(bool value);

  // optional bool m_bhuanggang = 10;
  inline bool has_m_bhuanggang() const;
  inline void clear_m_bhuanggang();
  static const int kMBhuanggangFieldNumber = 10;
  inline bool m_bhuanggang() const;
  inline void set_m_bhuanggang(bool value);

  // optional bool m_bzhuangxian = 11;
  inline bool has_m_bzhuangxian() const;
  inline void clear_m_bzhuangxian();
  static const int kMBzhuangxianFieldNumber = 11;
  inline bool m_bzhuangxian() const;
  inline void set_m_bzhuangxian(bool value);

  // optional bool m_bforcehuqiangganghu = 12;
  inline bool has_m_bforcehuqiangganghu() const;
  inline void clear_m_bforcehuqiangganghu();
  static const int kMBforcehuqiangganghuFieldNumber = 12;
  inline bool m_bforcehuqiangganghu() const;
  inline void set_m_bforcehuqiangganghu(bool value);

  // optional bool m_bfourcehumutilhu = 13;
  inline bool has_m_bfourcehumutilhu() const;
  inline void clear_m_bfourcehumutilhu();
  static const int kMBfourcehumutilhuFieldNumber = 13;
  inline bool m_bfourcehumutilhu() const;
  inline void set_m_bfourcehumutilhu(bool value);

  // optional int32 m_angangpoint = 14;
  inline bool has_m_angangpoint() const;
  inline void clear_m_angangpoint();
  static const int kMAngangpointFieldNumber = 14;
  inline ::google::protobuf::int32 m_angangpoint() const;
  inline void set_m_angangpoint(::google::protobuf::int32 value);

  // optional int32 m_wangangpoint = 15;
  inline bool has_m_wangangpoint() const;
  inline void clear_m_wangangpoint();
  static const int kMWangangpointFieldNumber = 15;
  inline ::google::protobuf::int32 m_wangangpoint() const;
  inline void set_m_wangangpoint(::google::protobuf::int32 value);

  // optional int32 m_zhigangpoint = 16;
  inline bool has_m_zhigangpoint() const;
  inline void clear_m_zhigangpoint();
  static const int kMZhigangpointFieldNumber = 16;
  inline ::google::protobuf::int32 m_zhigangpoint() const;
  inline void set_m_zhigangpoint(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.redis.MJConfCommon)
 private:
  inline void set_has_m_bsupportchi();
  inline void clear_has_m_bsupportchi();
  inline void set_has_m_bsupportwind();
  inline void clear_has_m_bsupportwind();
  inline void set_has_m_bsupportting();
  inline void clear_has_m_bsupportting();
  inline void set_has_m_bzimohu();
  inline void clear_has_m_bzimohu();
  inline void set_has_m_byipaoduoxiang();
  inline void clear_has_m_byipaoduoxiang();
  inline void set_has_m_bqiangganghu();
  inline void clear_has_m_bqiangganghu();
  inline void set_has_m_bqiangzhigang();
  inline void clear_has_m_bqiangzhigang();
  inline void set_has_m_bqiangangang();
  inline void clear_has_m_bqiangangang();
  inline void set_has_m_bqangshangpao();
  inline void clear_has_m_bqangshangpao();
  inline void set_has_m_bhuanggang();
  inline void clear_has_m_bhuanggang();
  inline void set_has_m_bzhuangxian();
  inline void clear_has_m_bzhuangxian();
  inline void set_has_m_bforcehuqiangganghu();
  inline void clear_has_m_bforcehuqiangganghu();
  inline void set_has_m_bfourcehumutilhu();
  inline void clear_has_m_bfourcehumutilhu();
  inline void set_has_m_angangpoint();
  inline void clear_has_m_angangpoint();
  inline void set_has_m_wangangpoint();
  inline void clear_has_m_wangangpoint();
  inline void set_has_m_zhigangpoint();
  inline void clear_has_m_zhigangpoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool m_bsupportchi_;
  bool m_bsupportwind_;
  bool m_bsupportting_;
  bool m_bzimohu_;
  bool m_byipaoduoxiang_;
  bool m_bqiangganghu_;
  bool m_bqiangzhigang_;
  bool m_bqiangangang_;
  bool m_bqangshangpao_;
  bool m_bhuanggang_;
  bool m_bzhuangxian_;
  bool m_bforcehuqiangganghu_;
  bool m_bfourcehumutilhu_;
  ::google::protobuf::int32 m_angangpoint_;
  ::google::protobuf::int32 m_wangangpoint_;
  ::google::protobuf::int32 m_zhigangpoint_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static MJConfCommon* default_instance_;
};
// -------------------------------------------------------------------

class MJConfPiao : public ::google::protobuf::Message {
 public:
  MJConfPiao();
  virtual ~MJConfPiao();

  MJConfPiao(const MJConfPiao& from);

  inline MJConfPiao& operator=(const MJConfPiao& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MJConfPiao& default_instance();

  void Swap(MJConfPiao* other);

  // implements Message ----------------------------------------------

  MJConfPiao* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MJConfPiao& from);
  void MergeFrom(const MJConfPiao& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool m_bsupportpiao = 1;
  inline bool has_m_bsupportpiao() const;
  inline void clear_m_bsupportpiao();
  static const int kMBsupportpiaoFieldNumber = 1;
  inline bool m_bsupportpiao() const;
  inline void set_m_bsupportpiao(bool value);

  // repeated int32 m_piao = 2;
  inline int m_piao_size() const;
  inline void clear_m_piao();
  static const int kMPiaoFieldNumber = 2;
  inline ::google::protobuf::int32 m_piao(int index) const;
  inline void set_m_piao(int index, ::google::protobuf::int32 value);
  inline void add_m_piao(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_piao() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_piao();

  // @@protoc_insertion_point(class_scope:proto.game.redis.MJConfPiao)
 private:
  inline void set_has_m_bsupportpiao();
  inline void clear_has_m_bsupportpiao();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_piao_;
  bool m_bsupportpiao_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static MJConfPiao* default_instance_;
};
// -------------------------------------------------------------------

class MJConfBuyHorse : public ::google::protobuf::Message {
 public:
  MJConfBuyHorse();
  virtual ~MJConfBuyHorse();

  MJConfBuyHorse(const MJConfBuyHorse& from);

  inline MJConfBuyHorse& operator=(const MJConfBuyHorse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MJConfBuyHorse& default_instance();

  void Swap(MJConfBuyHorse* other);

  // implements Message ----------------------------------------------

  MJConfBuyHorse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MJConfBuyHorse& from);
  void MergeFrom(const MJConfBuyHorse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool m_bsupportbuyhorse = 1;
  inline bool has_m_bsupportbuyhorse() const;
  inline void clear_m_bsupportbuyhorse();
  static const int kMBsupportbuyhorseFieldNumber = 1;
  inline bool m_bsupportbuyhorse() const;
  inline void set_m_bsupportbuyhorse(bool value);

  // optional int32 m_horsenum = 2;
  inline bool has_m_horsenum() const;
  inline void clear_m_horsenum();
  static const int kMHorsenumFieldNumber = 2;
  inline ::google::protobuf::int32 m_horsenum() const;
  inline void set_m_horsenum(::google::protobuf::int32 value);

  // optional int32 m_horsemaxnum = 3;
  inline bool has_m_horsemaxnum() const;
  inline void clear_m_horsemaxnum();
  static const int kMHorsemaxnumFieldNumber = 3;
  inline ::google::protobuf::int32 m_horsemaxnum() const;
  inline void set_m_horsemaxnum(::google::protobuf::int32 value);

  // optional int32 m_nbuyhorseincnum = 4;
  inline bool has_m_nbuyhorseincnum() const;
  inline void clear_m_nbuyhorseincnum();
  static const int kMNbuyhorseincnumFieldNumber = 4;
  inline ::google::protobuf::int32 m_nbuyhorseincnum() const;
  inline void set_m_nbuyhorseincnum(::google::protobuf::int32 value);

  // optional bool m_buyhorsemojijiangji = 5;
  inline bool has_m_buyhorsemojijiangji() const;
  inline void clear_m_buyhorsemojijiangji();
  static const int kMBuyhorsemojijiangjiFieldNumber = 5;
  inline bool m_buyhorsemojijiangji() const;
  inline void set_m_buyhorsemojijiangji(bool value);

  // @@protoc_insertion_point(class_scope:proto.game.redis.MJConfBuyHorse)
 private:
  inline void set_has_m_bsupportbuyhorse();
  inline void clear_has_m_bsupportbuyhorse();
  inline void set_has_m_horsenum();
  inline void clear_has_m_horsenum();
  inline void set_has_m_horsemaxnum();
  inline void clear_has_m_horsemaxnum();
  inline void set_has_m_nbuyhorseincnum();
  inline void clear_has_m_nbuyhorseincnum();
  inline void set_has_m_buyhorsemojijiangji();
  inline void clear_has_m_buyhorsemojijiangji();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 m_horsenum_;
  ::google::protobuf::int32 m_horsemaxnum_;
  bool m_bsupportbuyhorse_;
  bool m_buyhorsemojijiangji_;
  ::google::protobuf::int32 m_nbuyhorseincnum_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static MJConfBuyHorse* default_instance_;
};
// -------------------------------------------------------------------

class MJConfZhuaniao : public ::google::protobuf::Message {
 public:
  MJConfZhuaniao();
  virtual ~MJConfZhuaniao();

  MJConfZhuaniao(const MJConfZhuaniao& from);

  inline MJConfZhuaniao& operator=(const MJConfZhuaniao& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MJConfZhuaniao& default_instance();

  void Swap(MJConfZhuaniao* other);

  // implements Message ----------------------------------------------

  MJConfZhuaniao* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MJConfZhuaniao& from);
  void MergeFrom(const MJConfZhuaniao& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool m_bsupportzhuaniao = 1;
  inline bool has_m_bsupportzhuaniao() const;
  inline void clear_m_bsupportzhuaniao();
  static const int kMBsupportzhuaniaoFieldNumber = 1;
  inline bool m_bsupportzhuaniao() const;
  inline void set_m_bsupportzhuaniao(bool value);

  // optional bool m_bcalcallniao = 2;
  inline bool has_m_bcalcallniao() const;
  inline void clear_m_bcalcallniao();
  static const int kMBcalcallniaoFieldNumber = 2;
  inline bool m_bcalcallniao() const;
  inline void set_m_bcalcallniao(bool value);

  // optional int32 m_zhuaniaonum = 3;
  inline bool has_m_zhuaniaonum() const;
  inline void clear_m_zhuaniaonum();
  static const int kMZhuaniaonumFieldNumber = 3;
  inline ::google::protobuf::int32 m_zhuaniaonum() const;
  inline void set_m_zhuaniaonum(::google::protobuf::int32 value);

  // optional bool m_bjinniao = 4;
  inline bool has_m_bjinniao() const;
  inline void clear_m_bjinniao();
  static const int kMBjinniaoFieldNumber = 4;
  inline bool m_bjinniao() const;
  inline void set_m_bjinniao(bool value);

  // optional bool m_bmojijiangji = 5;
  inline bool has_m_bmojijiangji() const;
  inline void clear_m_bmojijiangji();
  static const int kMBmojijiangjiFieldNumber = 5;
  inline bool m_bmojijiangji() const;
  inline void set_m_bmojijiangji(bool value);

  // @@protoc_insertion_point(class_scope:proto.game.redis.MJConfZhuaniao)
 private:
  inline void set_has_m_bsupportzhuaniao();
  inline void clear_has_m_bsupportzhuaniao();
  inline void set_has_m_bcalcallniao();
  inline void clear_has_m_bcalcallniao();
  inline void set_has_m_zhuaniaonum();
  inline void clear_has_m_zhuaniaonum();
  inline void set_has_m_bjinniao();
  inline void clear_has_m_bjinniao();
  inline void set_has_m_bmojijiangji();
  inline void clear_has_m_bmojijiangji();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 m_zhuaniaonum_;
  bool m_bsupportzhuaniao_;
  bool m_bcalcallniao_;
  bool m_bjinniao_;
  bool m_bmojijiangji_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static MJConfZhuaniao* default_instance_;
};
// -------------------------------------------------------------------

class MJHuType : public ::google::protobuf::Message {
 public:
  MJHuType();
  virtual ~MJHuType();

  MJHuType(const MJHuType& from);

  inline MJHuType& operator=(const MJHuType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MJHuType& default_instance();

  void Swap(MJHuType* other);

  // implements Message ----------------------------------------------

  MJHuType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MJHuType& from);
  void MergeFrom(const MJHuType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool m_bhu7dui = 1;
  inline bool has_m_bhu7dui() const;
  inline void clear_m_bhu7dui();
  static const int kMBhu7DuiFieldNumber = 1;
  inline bool m_bhu7dui() const;
  inline void set_m_bhu7dui(bool value);

  // optional bool m_bhu13yao = 2;
  inline bool has_m_bhu13yao() const;
  inline void clear_m_bhu13yao();
  static const int kMBhu13YaoFieldNumber = 2;
  inline bool m_bhu13yao() const;
  inline void set_m_bhu13yao(bool value);

  // optional bool m_bnosupport_quanqiuren = 3;
  inline bool has_m_bnosupport_quanqiuren() const;
  inline void clear_m_bnosupport_quanqiuren();
  static const int kMBnosupportQuanqiurenFieldNumber = 3;
  inline bool m_bnosupport_quanqiuren() const;
  inline void set_m_bnosupport_quanqiuren(bool value);

  // @@protoc_insertion_point(class_scope:proto.game.redis.MJHuType)
 private:
  inline void set_has_m_bhu7dui();
  inline void clear_has_m_bhu7dui();
  inline void set_has_m_bhu13yao();
  inline void clear_has_m_bhu13yao();
  inline void set_has_m_bnosupport_quanqiuren();
  inline void clear_has_m_bnosupport_quanqiuren();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool m_bhu7dui_;
  bool m_bhu13yao_;
  bool m_bnosupport_quanqiuren_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static MJHuType* default_instance_;
};
// -------------------------------------------------------------------

class MJConfOther : public ::google::protobuf::Message {
 public:
  MJConfOther();
  virtual ~MJConfOther();

  MJConfOther(const MJConfOther& from);

  inline MJConfOther& operator=(const MJConfOther& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MJConfOther& default_instance();

  void Swap(MJConfOther* other);

  // implements Message ----------------------------------------------

  MJConfOther* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MJConfOther& from);
  void MergeFrom(const MJConfOther& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool m_bsupportchangemode = 1;
  inline bool has_m_bsupportchangemode() const;
  inline void clear_m_bsupportchangemode();
  static const int kMBsupportchangemodeFieldNumber = 1;
  inline bool m_bsupportchangemode() const;
  inline void set_m_bsupportchangemode(bool value);

  // optional bool m_bofflinedelayop = 2;
  inline bool has_m_bofflinedelayop() const;
  inline void clear_m_bofflinedelayop();
  static const int kMBofflinedelayopFieldNumber = 2;
  inline bool m_bofflinedelayop() const;
  inline void set_m_bofflinedelayop(bool value);

  // optional bool m_bmulitfirstopisover = 3;
  inline bool has_m_bmulitfirstopisover() const;
  inline void clear_m_bmulitfirstopisover();
  static const int kMBmulitfirstopisoverFieldNumber = 3;
  inline bool m_bmulitfirstopisover() const;
  inline void set_m_bmulitfirstopisover(bool value);

  // optional bool m_bfastmode = 4;
  inline bool has_m_bfastmode() const;
  inline void clear_m_bfastmode();
  static const int kMBfastmodeFieldNumber = 4;
  inline bool m_bfastmode() const;
  inline void set_m_bfastmode(bool value);

  // optional bool m_bautodisband = 5;
  inline bool has_m_bautodisband() const;
  inline void clear_m_bautodisband();
  static const int kMBautodisbandFieldNumber = 5;
  inline bool m_bautodisband() const;
  inline void set_m_bautodisband(bool value);

  // optional bool m_bbankerfirst14 = 6;
  inline bool has_m_bbankerfirst14() const;
  inline void clear_m_bbankerfirst14();
  static const int kMBbankerfirst14FieldNumber = 6;
  inline bool m_bbankerfirst14() const;
  inline void set_m_bbankerfirst14(bool value);

  // optional bool m_bangangnoshow = 7;
  inline bool has_m_bangangnoshow() const;
  inline void clear_m_bangangnoshow();
  static const int kMBangangnoshowFieldNumber = 7;
  inline bool m_bangangnoshow() const;
  inline void set_m_bangangnoshow(bool value);

  // optional bool m_bshowgangscore = 8;
  inline bool has_m_bshowgangscore() const;
  inline void clear_m_bshowgangscore();
  static const int kMBshowgangscoreFieldNumber = 8;
  inline bool m_bshowgangscore() const;
  inline void set_m_bshowgangscore(bool value);

  // @@protoc_insertion_point(class_scope:proto.game.redis.MJConfOther)
 private:
  inline void set_has_m_bsupportchangemode();
  inline void clear_has_m_bsupportchangemode();
  inline void set_has_m_bofflinedelayop();
  inline void clear_has_m_bofflinedelayop();
  inline void set_has_m_bmulitfirstopisover();
  inline void clear_has_m_bmulitfirstopisover();
  inline void set_has_m_bfastmode();
  inline void clear_has_m_bfastmode();
  inline void set_has_m_bautodisband();
  inline void clear_has_m_bautodisband();
  inline void set_has_m_bbankerfirst14();
  inline void clear_has_m_bbankerfirst14();
  inline void set_has_m_bangangnoshow();
  inline void clear_has_m_bangangnoshow();
  inline void set_has_m_bshowgangscore();
  inline void clear_has_m_bshowgangscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool m_bsupportchangemode_;
  bool m_bofflinedelayop_;
  bool m_bmulitfirstopisover_;
  bool m_bfastmode_;
  bool m_bautodisband_;
  bool m_bbankerfirst14_;
  bool m_bangangnoshow_;
  bool m_bshowgangscore_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static MJConfOther* default_instance_;
};
// -------------------------------------------------------------------

class MJCustomizedConf : public ::google::protobuf::Message {
 public:
  MJCustomizedConf();
  virtual ~MJCustomizedConf();

  MJCustomizedConf(const MJCustomizedConf& from);

  inline MJCustomizedConf& operator=(const MJCustomizedConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MJCustomizedConf& default_instance();

  void Swap(MJCustomizedConf* other);

  // implements Message ----------------------------------------------

  MJCustomizedConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MJCustomizedConf& from);
  void MergeFrom(const MJCustomizedConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.game.redis.MJConfCommon mjconfcommon = 1;
  inline bool has_mjconfcommon() const;
  inline void clear_mjconfcommon();
  static const int kMjconfcommonFieldNumber = 1;
  inline const ::proto::game::redis::MJConfCommon& mjconfcommon() const;
  inline ::proto::game::redis::MJConfCommon* mutable_mjconfcommon();
  inline ::proto::game::redis::MJConfCommon* release_mjconfcommon();
  inline void set_allocated_mjconfcommon(::proto::game::redis::MJConfCommon* mjconfcommon);

  // optional .proto.game.redis.MJConfPiao mjconfpiao = 2;
  inline bool has_mjconfpiao() const;
  inline void clear_mjconfpiao();
  static const int kMjconfpiaoFieldNumber = 2;
  inline const ::proto::game::redis::MJConfPiao& mjconfpiao() const;
  inline ::proto::game::redis::MJConfPiao* mutable_mjconfpiao();
  inline ::proto::game::redis::MJConfPiao* release_mjconfpiao();
  inline void set_allocated_mjconfpiao(::proto::game::redis::MJConfPiao* mjconfpiao);

  // optional .proto.game.redis.MJConfBuyHorse mjconfbuyhorse = 3;
  inline bool has_mjconfbuyhorse() const;
  inline void clear_mjconfbuyhorse();
  static const int kMjconfbuyhorseFieldNumber = 3;
  inline const ::proto::game::redis::MJConfBuyHorse& mjconfbuyhorse() const;
  inline ::proto::game::redis::MJConfBuyHorse* mutable_mjconfbuyhorse();
  inline ::proto::game::redis::MJConfBuyHorse* release_mjconfbuyhorse();
  inline void set_allocated_mjconfbuyhorse(::proto::game::redis::MJConfBuyHorse* mjconfbuyhorse);

  // optional .proto.game.redis.MJConfZhuaniao mjconfzhuaniao = 4;
  inline bool has_mjconfzhuaniao() const;
  inline void clear_mjconfzhuaniao();
  static const int kMjconfzhuaniaoFieldNumber = 4;
  inline const ::proto::game::redis::MJConfZhuaniao& mjconfzhuaniao() const;
  inline ::proto::game::redis::MJConfZhuaniao* mutable_mjconfzhuaniao();
  inline ::proto::game::redis::MJConfZhuaniao* release_mjconfzhuaniao();
  inline void set_allocated_mjconfzhuaniao(::proto::game::redis::MJConfZhuaniao* mjconfzhuaniao);

  // optional .proto.game.redis.MJHuType mjhutype = 5;
  inline bool has_mjhutype() const;
  inline void clear_mjhutype();
  static const int kMjhutypeFieldNumber = 5;
  inline const ::proto::game::redis::MJHuType& mjhutype() const;
  inline ::proto::game::redis::MJHuType* mutable_mjhutype();
  inline ::proto::game::redis::MJHuType* release_mjhutype();
  inline void set_allocated_mjhutype(::proto::game::redis::MJHuType* mjhutype);

  // optional .proto.game.redis.MJConfOther mjconfother = 6;
  inline bool has_mjconfother() const;
  inline void clear_mjconfother();
  static const int kMjconfotherFieldNumber = 6;
  inline const ::proto::game::redis::MJConfOther& mjconfother() const;
  inline ::proto::game::redis::MJConfOther* mutable_mjconfother();
  inline ::proto::game::redis::MJConfOther* release_mjconfother();
  inline void set_allocated_mjconfother(::proto::game::redis::MJConfOther* mjconfother);

  // @@protoc_insertion_point(class_scope:proto.game.redis.MJCustomizedConf)
 private:
  inline void set_has_mjconfcommon();
  inline void clear_has_mjconfcommon();
  inline void set_has_mjconfpiao();
  inline void clear_has_mjconfpiao();
  inline void set_has_mjconfbuyhorse();
  inline void clear_has_mjconfbuyhorse();
  inline void set_has_mjconfzhuaniao();
  inline void clear_has_mjconfzhuaniao();
  inline void set_has_mjhutype();
  inline void clear_has_mjhutype();
  inline void set_has_mjconfother();
  inline void clear_has_mjconfother();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::proto::game::redis::MJConfCommon* mjconfcommon_;
  ::proto::game::redis::MJConfPiao* mjconfpiao_;
  ::proto::game::redis::MJConfBuyHorse* mjconfbuyhorse_;
  ::proto::game::redis::MJConfZhuaniao* mjconfzhuaniao_;
  ::proto::game::redis::MJHuType* mjhutype_;
  ::proto::game::redis::MJConfOther* mjconfother_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static MJCustomizedConf* default_instance_;
};
// -------------------------------------------------------------------

class RoundScore : public ::google::protobuf::Message {
 public:
  RoundScore();
  virtual ~RoundScore();

  RoundScore(const RoundScore& from);

  inline RoundScore& operator=(const RoundScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoundScore& default_instance();

  void Swap(RoundScore* other);

  // implements Message ----------------------------------------------

  RoundScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoundScore& from);
  void MergeFrom(const RoundScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 score = 1;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int32 score(int index) const;
  inline void set_score(int index, ::google::protobuf::int32 value);
  inline void add_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_score();

  // @@protoc_insertion_point(class_scope:proto.game.redis.RoundScore)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > score_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static RoundScore* default_instance_;
};
// -------------------------------------------------------------------

class Table_TotalRecordInfo : public ::google::protobuf::Message {
 public:
  Table_TotalRecordInfo();
  virtual ~Table_TotalRecordInfo();

  Table_TotalRecordInfo(const Table_TotalRecordInfo& from);

  inline Table_TotalRecordInfo& operator=(const Table_TotalRecordInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table_TotalRecordInfo& default_instance();

  void Swap(Table_TotalRecordInfo* other);

  // implements Message ----------------------------------------------

  Table_TotalRecordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table_TotalRecordInfo& from);
  void MergeFrom(const Table_TotalRecordInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 banker = 1;
  inline int banker_size() const;
  inline void clear_banker();
  static const int kBankerFieldNumber = 1;
  inline ::google::protobuf::int32 banker(int index) const;
  inline void set_banker(int index, ::google::protobuf::int32 value);
  inline void add_banker(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      banker() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_banker();

  // repeated int32 hu = 2;
  inline int hu_size() const;
  inline void clear_hu();
  static const int kHuFieldNumber = 2;
  inline ::google::protobuf::int32 hu(int index) const;
  inline void set_hu(int index, ::google::protobuf::int32 value);
  inline void add_hu(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hu() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hu();

  // repeated int32 piao = 3;
  inline int piao_size() const;
  inline void clear_piao();
  static const int kPiaoFieldNumber = 3;
  inline ::google::protobuf::int32 piao(int index) const;
  inline void set_piao(int index, ::google::protobuf::int32 value);
  inline void add_piao(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      piao() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_piao();

  // repeated int32 timerout_op = 4;
  inline int timerout_op_size() const;
  inline void clear_timerout_op();
  static const int kTimeroutOpFieldNumber = 4;
  inline ::google::protobuf::int32 timerout_op(int index) const;
  inline void set_timerout_op(int index, ::google::protobuf::int32 value);
  inline void add_timerout_op(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      timerout_op() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_timerout_op();

  // repeated int32 total_score = 5;
  inline int total_score_size() const;
  inline void clear_total_score();
  static const int kTotalScoreFieldNumber = 5;
  inline ::google::protobuf::int32 total_score(int index) const;
  inline void set_total_score(int index, ::google::protobuf::int32 value);
  inline void add_total_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      total_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_total_score();

  // repeated int32 paohu = 6;
  inline int paohu_size() const;
  inline void clear_paohu();
  static const int kPaohuFieldNumber = 6;
  inline ::google::protobuf::int32 paohu(int index) const;
  inline void set_paohu(int index, ::google::protobuf::int32 value);
  inline void add_paohu(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      paohu() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_paohu();

  // repeated int32 zimo = 7;
  inline int zimo_size() const;
  inline void clear_zimo();
  static const int kZimoFieldNumber = 7;
  inline ::google::protobuf::int32 zimo(int index) const;
  inline void set_zimo(int index, ::google::protobuf::int32 value);
  inline void add_zimo(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      zimo() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_zimo();

  // repeated int32 dianpao = 8;
  inline int dianpao_size() const;
  inline void clear_dianpao();
  static const int kDianpaoFieldNumber = 8;
  inline ::google::protobuf::int32 dianpao(int index) const;
  inline void set_dianpao(int index, ::google::protobuf::int32 value);
  inline void add_dianpao(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dianpao() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dianpao();

  // repeated int32 win_counts = 9;
  inline int win_counts_size() const;
  inline void clear_win_counts();
  static const int kWinCountsFieldNumber = 9;
  inline ::google::protobuf::int32 win_counts(int index) const;
  inline void set_win_counts(int index, ::google::protobuf::int32 value);
  inline void add_win_counts(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      win_counts() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_win_counts();

  // repeated int32 gang_times = 10;
  inline int gang_times_size() const;
  inline void clear_gang_times();
  static const int kGangTimesFieldNumber = 10;
  inline ::google::protobuf::int32 gang_times(int index) const;
  inline void set_gang_times(int index, ::google::protobuf::int32 value);
  inline void add_gang_times(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gang_times() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gang_times();

  // repeated int32 dian_gang_times = 11;
  inline int dian_gang_times_size() const;
  inline void clear_dian_gang_times();
  static const int kDianGangTimesFieldNumber = 11;
  inline ::google::protobuf::int32 dian_gang_times(int index) const;
  inline void set_dian_gang_times(int index, ::google::protobuf::int32 value);
  inline void add_dian_gang_times(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dian_gang_times() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dian_gang_times();

  // repeated int32 piao_count = 12;
  inline int piao_count_size() const;
  inline void clear_piao_count();
  static const int kPiaoCountFieldNumber = 12;
  inline ::google::protobuf::int32 piao_count(int index) const;
  inline void set_piao_count(int index, ::google::protobuf::int32 value);
  inline void add_piao_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      piao_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_piao_count();

  // repeated int32 hongzhonggang_count = 13;
  inline int hongzhonggang_count_size() const;
  inline void clear_hongzhonggang_count();
  static const int kHongzhonggangCountFieldNumber = 13;
  inline ::google::protobuf::int32 hongzhonggang_count(int index) const;
  inline void set_hongzhonggang_count(int index, ::google::protobuf::int32 value);
  inline void add_hongzhonggang_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hongzhonggang_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hongzhonggang_count();

  // repeated int32 dahu_count = 14;
  inline int dahu_count_size() const;
  inline void clear_dahu_count();
  static const int kDahuCountFieldNumber = 14;
  inline ::google::protobuf::int32 dahu_count(int index) const;
  inline void set_dahu_count(int index, ::google::protobuf::int32 value);
  inline void add_dahu_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dahu_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dahu_count();

  // repeated int32 laizipigang_count = 15;
  inline int laizipigang_count_size() const;
  inline void clear_laizipigang_count();
  static const int kLaizipigangCountFieldNumber = 15;
  inline ::google::protobuf::int32 laizipigang_count(int index) const;
  inline void set_laizipigang_count(int index, ::google::protobuf::int32 value);
  inline void add_laizipigang_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      laizipigang_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_laizipigang_count();

  // repeated .proto.game.redis.RoundScore round_score = 16;
  inline int round_score_size() const;
  inline void clear_round_score();
  static const int kRoundScoreFieldNumber = 16;
  inline const ::proto::game::redis::RoundScore& round_score(int index) const;
  inline ::proto::game::redis::RoundScore* mutable_round_score(int index);
  inline ::proto::game::redis::RoundScore* add_round_score();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::RoundScore >&
      round_score() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::RoundScore >*
      mutable_round_score();

  // repeated int32 mobao_count = 17;
  inline int mobao_count_size() const;
  inline void clear_mobao_count();
  static const int kMobaoCountFieldNumber = 17;
  inline ::google::protobuf::int32 mobao_count(int index) const;
  inline void set_mobao_count(int index, ::google::protobuf::int32 value);
  inline void add_mobao_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mobao_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mobao_count();

  // @@protoc_insertion_point(class_scope:proto.game.redis.Table_TotalRecordInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > banker_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hu_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > piao_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > timerout_op_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > total_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > paohu_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > zimo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dianpao_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > win_counts_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gang_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dian_gang_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > piao_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hongzhonggang_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dahu_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > laizipigang_count_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::redis::RoundScore > round_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mobao_count_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static Table_TotalRecordInfo* default_instance_;
};
// -------------------------------------------------------------------

class Shai_Set : public ::google::protobuf::Message {
 public:
  Shai_Set();
  virtual ~Shai_Set();

  Shai_Set(const Shai_Set& from);

  inline Shai_Set& operator=(const Shai_Set& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Shai_Set& default_instance();

  void Swap(Shai_Set* other);

  // implements Message ----------------------------------------------

  Shai_Set* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Shai_Set& from);
  void MergeFrom(const Shai_Set& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // repeated int32 shai = 2;
  inline int shai_size() const;
  inline void clear_shai();
  static const int kShaiFieldNumber = 2;
  inline ::google::protobuf::int32 shai(int index) const;
  inline void set_shai(int index, ::google::protobuf::int32 value);
  inline void add_shai(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shai() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shai();

  // @@protoc_insertion_point(class_scope:proto.game.redis.Shai_Set)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shai_;
  ::google::protobuf::int32 num_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static Shai_Set* default_instance_;
};
// -------------------------------------------------------------------

class FixedCard : public ::google::protobuf::Message {
 public:
  FixedCard();
  virtual ~FixedCard();

  FixedCard(const FixedCard& from);

  inline FixedCard& operator=(const FixedCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FixedCard& default_instance();

  void Swap(FixedCard* other);

  // implements Message ----------------------------------------------

  FixedCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FixedCard& from);
  void MergeFrom(const FixedCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CardData = 1;
  inline bool has_carddata() const;
  inline void clear_carddata();
  static const int kCardDataFieldNumber = 1;
  inline ::google::protobuf::int32 carddata() const;
  inline void set_carddata(::google::protobuf::int32 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 chairID = 3;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 3;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // repeated int32 OpCards = 4;
  inline int opcards_size() const;
  inline void clear_opcards();
  static const int kOpCardsFieldNumber = 4;
  inline ::google::protobuf::int32 opcards(int index) const;
  inline void set_opcards(int index, ::google::protobuf::int32 value);
  inline void add_opcards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      opcards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_opcards();

  // @@protoc_insertion_point(class_scope:proto.game.redis.FixedCard)
 private:
  inline void set_has_carddata();
  inline void clear_has_carddata();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_chairid();
  inline void clear_has_chairid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 carddata_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > opcards_;
  ::google::protobuf::int32 chairid_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static FixedCard* default_instance_;
};
// -------------------------------------------------------------------

class HandCards : public ::google::protobuf::Message {
 public:
  HandCards();
  virtual ~HandCards();

  HandCards(const HandCards& from);

  inline HandCards& operator=(const HandCards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HandCards& default_instance();

  void Swap(HandCards* other);

  // implements Message ----------------------------------------------

  HandCards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HandCards& from);
  void MergeFrom(const HandCards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ChangeableCardsLen = 1;
  inline bool has_changeablecardslen() const;
  inline void clear_changeablecardslen();
  static const int kChangeableCardsLenFieldNumber = 1;
  inline ::google::protobuf::int32 changeablecardslen() const;
  inline void set_changeablecardslen(::google::protobuf::int32 value);

  // repeated int32 ChangeableCards = 2;
  inline int changeablecards_size() const;
  inline void clear_changeablecards();
  static const int kChangeableCardsFieldNumber = 2;
  inline ::google::protobuf::int32 changeablecards(int index) const;
  inline void set_changeablecards(int index, ::google::protobuf::int32 value);
  inline void add_changeablecards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      changeablecards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_changeablecards();

  // optional int32 FixedCardsLen = 3;
  inline bool has_fixedcardslen() const;
  inline void clear_fixedcardslen();
  static const int kFixedCardsLenFieldNumber = 3;
  inline ::google::protobuf::int32 fixedcardslen() const;
  inline void set_fixedcardslen(::google::protobuf::int32 value);

  // repeated .proto.game.redis.FixedCard stFixedCards = 4;
  inline int stfixedcards_size() const;
  inline void clear_stfixedcards();
  static const int kStFixedCardsFieldNumber = 4;
  inline const ::proto::game::redis::FixedCard& stfixedcards(int index) const;
  inline ::proto::game::redis::FixedCard* mutable_stfixedcards(int index);
  inline ::proto::game::redis::FixedCard* add_stfixedcards();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::FixedCard >&
      stfixedcards() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::FixedCard >*
      mutable_stfixedcards();

  // @@protoc_insertion_point(class_scope:proto.game.redis.HandCards)
 private:
  inline void set_has_changeablecardslen();
  inline void clear_has_changeablecardslen();
  inline void set_has_fixedcardslen();
  inline void clear_has_fixedcardslen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > changeablecards_;
  ::google::protobuf::int32 changeablecardslen_;
  ::google::protobuf::int32 fixedcardslen_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::redis::FixedCard > stfixedcards_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static HandCards* default_instance_;
};
// -------------------------------------------------------------------

class CCardTypePool : public ::google::protobuf::Message {
 public:
  CCardTypePool();
  virtual ~CCardTypePool();

  CCardTypePool(const CCardTypePool& from);

  inline CCardTypePool& operator=(const CCardTypePool& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCardTypePool& default_instance();

  void Swap(CCardTypePool* other);

  // implements Message ----------------------------------------------

  CCardTypePool* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCardTypePool& from);
  void MergeFrom(const CCardTypePool& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_jokercard = 1;
  inline bool has_m_jokercard() const;
  inline void clear_m_jokercard();
  static const int kMJokercardFieldNumber = 1;
  inline ::google::protobuf::int32 m_jokercard() const;
  inline void set_m_jokercard(::google::protobuf::int32 value);

  // repeated int32 m_pool = 2;
  inline int m_pool_size() const;
  inline void clear_m_pool();
  static const int kMPoolFieldNumber = 2;
  inline ::google::protobuf::int32 m_pool(int index) const;
  inline void set_m_pool(int index, ::google::protobuf::int32 value);
  inline void add_m_pool(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_pool() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_pool();

  // optional int32 m_maxcount = 3;
  inline bool has_m_maxcount() const;
  inline void clear_m_maxcount();
  static const int kMMaxcountFieldNumber = 3;
  inline ::google::protobuf::int32 m_maxcount() const;
  inline void set_m_maxcount(::google::protobuf::int32 value);

  // optional int32 m_mode = 4;
  inline bool has_m_mode() const;
  inline void clear_m_mode();
  static const int kMModeFieldNumber = 4;
  inline ::google::protobuf::int32 m_mode() const;
  inline void set_m_mode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.redis.CCardTypePool)
 private:
  inline void set_has_m_jokercard();
  inline void clear_has_m_jokercard();
  inline void set_has_m_maxcount();
  inline void clear_has_m_maxcount();
  inline void set_has_m_mode();
  inline void clear_has_m_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_pool_;
  ::google::protobuf::int32 m_jokercard_;
  ::google::protobuf::int32 m_maxcount_;
  ::google::protobuf::int32 m_mode_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static CCardTypePool* default_instance_;
};
// -------------------------------------------------------------------

class CCardPool : public ::google::protobuf::Message {
 public:
  CCardPool();
  virtual ~CCardPool();

  CCardPool(const CCardPool& from);

  inline CCardPool& operator=(const CCardPool& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCardPool& default_instance();

  void Swap(CCardPool* other);

  // implements Message ----------------------------------------------

  CCardPool* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCardPool& from);
  void MergeFrom(const CCardPool& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.game.redis.CCardTypePool m_cardtypepool = 1;
  inline bool has_m_cardtypepool() const;
  inline void clear_m_cardtypepool();
  static const int kMCardtypepoolFieldNumber = 1;
  inline const ::proto::game::redis::CCardTypePool& m_cardtypepool() const;
  inline ::proto::game::redis::CCardTypePool* mutable_m_cardtypepool();
  inline ::proto::game::redis::CCardTypePool* release_m_cardtypepool();
  inline void set_allocated_m_cardtypepool(::proto::game::redis::CCardTypePool* m_cardtypepool);

  // optional int32 m_seedid = 2;
  inline bool has_m_seedid() const;
  inline void clear_m_seedid();
  static const int kMSeedidFieldNumber = 2;
  inline ::google::protobuf::int32 m_seedid() const;
  inline void set_m_seedid(::google::protobuf::int32 value);

  // optional int32 m_mode = 3;
  inline bool has_m_mode() const;
  inline void clear_m_mode();
  static const int kMModeFieldNumber = 3;
  inline ::google::protobuf::int32 m_mode() const;
  inline void set_m_mode(::google::protobuf::int32 value);

  // repeated int32 m_pool = 4;
  inline int m_pool_size() const;
  inline void clear_m_pool();
  static const int kMPoolFieldNumber = 4;
  inline ::google::protobuf::int32 m_pool(int index) const;
  inline void set_m_pool(int index, ::google::protobuf::int32 value);
  inline void add_m_pool(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_pool() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_pool();

  // optional int32 m_maxcount = 5;
  inline bool has_m_maxcount() const;
  inline void clear_m_maxcount();
  static const int kMMaxcountFieldNumber = 5;
  inline ::google::protobuf::int32 m_maxcount() const;
  inline void set_m_maxcount(::google::protobuf::int32 value);

  // optional int32 m_count = 6;
  inline bool has_m_count() const;
  inline void clear_m_count();
  static const int kMCountFieldNumber = 6;
  inline ::google::protobuf::int32 m_count() const;
  inline void set_m_count(::google::protobuf::int32 value);

  // optional int32 m_current = 7;
  inline bool has_m_current() const;
  inline void clear_m_current();
  static const int kMCurrentFieldNumber = 7;
  inline ::google::protobuf::int32 m_current() const;
  inline void set_m_current(::google::protobuf::int32 value);

  // optional int32 m_last = 8;
  inline bool has_m_last() const;
  inline void clear_m_last();
  static const int kMLastFieldNumber = 8;
  inline ::google::protobuf::int32 m_last() const;
  inline void set_m_last(::google::protobuf::int32 value);

  // optional int32 m_jokercard = 9;
  inline bool has_m_jokercard() const;
  inline void clear_m_jokercard();
  static const int kMJokercardFieldNumber = 9;
  inline ::google::protobuf::int32 m_jokercard() const;
  inline void set_m_jokercard(::google::protobuf::int32 value);

  // optional int32 m_jokercount = 10;
  inline bool has_m_jokercount() const;
  inline void clear_m_jokercount();
  static const int kMJokercountFieldNumber = 10;
  inline ::google::protobuf::int32 m_jokercount() const;
  inline void set_m_jokercount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.redis.CCardPool)
 private:
  inline void set_has_m_cardtypepool();
  inline void clear_has_m_cardtypepool();
  inline void set_has_m_seedid();
  inline void clear_has_m_seedid();
  inline void set_has_m_mode();
  inline void clear_has_m_mode();
  inline void set_has_m_maxcount();
  inline void clear_has_m_maxcount();
  inline void set_has_m_count();
  inline void clear_has_m_count();
  inline void set_has_m_current();
  inline void clear_has_m_current();
  inline void set_has_m_last();
  inline void clear_has_m_last();
  inline void set_has_m_jokercard();
  inline void clear_has_m_jokercard();
  inline void set_has_m_jokercount();
  inline void clear_has_m_jokercount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::proto::game::redis::CCardTypePool* m_cardtypepool_;
  ::google::protobuf::int32 m_seedid_;
  ::google::protobuf::int32 m_mode_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_pool_;
  ::google::protobuf::int32 m_maxcount_;
  ::google::protobuf::int32 m_count_;
  ::google::protobuf::int32 m_current_;
  ::google::protobuf::int32 m_last_;
  ::google::protobuf::int32 m_jokercard_;
  ::google::protobuf::int32 m_jokercount_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static CCardPool* default_instance_;
};
// -------------------------------------------------------------------

class MultiOpInfo : public ::google::protobuf::Message {
 public:
  MultiOpInfo();
  virtual ~MultiOpInfo();

  MultiOpInfo(const MultiOpInfo& from);

  inline MultiOpInfo& operator=(const MultiOpInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiOpInfo& default_instance();

  void Swap(MultiOpInfo* other);

  // implements Message ----------------------------------------------

  MultiOpInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MultiOpInfo& from);
  void MergeFrom(const MultiOpInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_bmultiopusernum = 1;
  inline bool has_m_bmultiopusernum() const;
  inline void clear_m_bmultiopusernum();
  static const int kMBmultiopusernumFieldNumber = 1;
  inline ::google::protobuf::int32 m_bmultiopusernum() const;
  inline void set_m_bmultiopusernum(::google::protobuf::int32 value);

  // optional int32 m_bmultidoneopnum = 2;
  inline bool has_m_bmultidoneopnum() const;
  inline void clear_m_bmultidoneopnum();
  static const int kMBmultidoneopnumFieldNumber = 2;
  inline ::google::protobuf::int32 m_bmultidoneopnum() const;
  inline void set_m_bmultidoneopnum(::google::protobuf::int32 value);

  // optional int32 m_bmultihuopecount = 3;
  inline bool has_m_bmultihuopecount() const;
  inline void clear_m_bmultihuopecount();
  static const int kMBmultihuopecountFieldNumber = 3;
  inline ::google::protobuf::int32 m_bmultihuopecount() const;
  inline void set_m_bmultihuopecount(::google::protobuf::int32 value);

  // optional int32 m_bmultiophunum = 4;
  inline bool has_m_bmultiophunum() const;
  inline void clear_m_bmultiophunum();
  static const int kMBmultiophunumFieldNumber = 4;
  inline ::google::protobuf::int32 m_bmultiophunum() const;
  inline void set_m_bmultiophunum(::google::protobuf::int32 value);

  // optional int32 m_bmulitfirstoperate = 5;
  inline bool has_m_bmulitfirstoperate() const;
  inline void clear_m_bmulitfirstoperate();
  static const int kMBmulitfirstoperateFieldNumber = 5;
  inline ::google::protobuf::int32 m_bmulitfirstoperate() const;
  inline void set_m_bmulitfirstoperate(::google::protobuf::int32 value);

  // repeated int32 m_bmultiuserdoneop = 6;
  inline int m_bmultiuserdoneop_size() const;
  inline void clear_m_bmultiuserdoneop();
  static const int kMBmultiuserdoneopFieldNumber = 6;
  inline ::google::protobuf::int32 m_bmultiuserdoneop(int index) const;
  inline void set_m_bmultiuserdoneop(int index, ::google::protobuf::int32 value);
  inline void add_m_bmultiuserdoneop(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_bmultiuserdoneop() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_bmultiuserdoneop();

  // repeated int32 m_bmultiuserdoneopcard = 7;
  inline int m_bmultiuserdoneopcard_size() const;
  inline void clear_m_bmultiuserdoneopcard();
  static const int kMBmultiuserdoneopcardFieldNumber = 7;
  inline ::google::protobuf::int32 m_bmultiuserdoneopcard(int index) const;
  inline void set_m_bmultiuserdoneopcard(int index, ::google::protobuf::int32 value);
  inline void add_m_bmultiuserdoneopcard(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_bmultiuserdoneopcard() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_bmultiuserdoneopcard();

  // @@protoc_insertion_point(class_scope:proto.game.redis.MultiOpInfo)
 private:
  inline void set_has_m_bmultiopusernum();
  inline void clear_has_m_bmultiopusernum();
  inline void set_has_m_bmultidoneopnum();
  inline void clear_has_m_bmultidoneopnum();
  inline void set_has_m_bmultihuopecount();
  inline void clear_has_m_bmultihuopecount();
  inline void set_has_m_bmultiophunum();
  inline void clear_has_m_bmultiophunum();
  inline void set_has_m_bmulitfirstoperate();
  inline void clear_has_m_bmulitfirstoperate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 m_bmultiopusernum_;
  ::google::protobuf::int32 m_bmultidoneopnum_;
  ::google::protobuf::int32 m_bmultihuopecount_;
  ::google::protobuf::int32 m_bmultiophunum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_bmultiuserdoneop_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_bmultiuserdoneopcard_;
  ::google::protobuf::int32 m_bmulitfirstoperate_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static MultiOpInfo* default_instance_;
};
// -------------------------------------------------------------------

class RobAddInfo : public ::google::protobuf::Message {
 public:
  RobAddInfo();
  virtual ~RobAddInfo();

  RobAddInfo(const RobAddInfo& from);

  inline RobAddInfo& operator=(const RobAddInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobAddInfo& default_instance();

  void Swap(RobAddInfo* other);

  // implements Message ----------------------------------------------

  RobAddInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobAddInfo& from);
  void MergeFrom(const RobAddInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_roboperatenum = 1;
  inline bool has_m_roboperatenum() const;
  inline void clear_m_roboperatenum();
  static const int kMRoboperatenumFieldNumber = 1;
  inline ::google::protobuf::int32 m_roboperatenum() const;
  inline void set_m_roboperatenum(::google::protobuf::int32 value);

  // optional int32 m_robhunum = 2;
  inline bool has_m_robhunum() const;
  inline void clear_m_robhunum();
  static const int kMRobhunumFieldNumber = 2;
  inline ::google::protobuf::int32 m_robhunum() const;
  inline void set_m_robhunum(::google::protobuf::int32 value);

  // optional int32 m_wanggangplayer = 3;
  inline bool has_m_wanggangplayer() const;
  inline void clear_m_wanggangplayer();
  static const int kMWanggangplayerFieldNumber = 3;
  inline ::google::protobuf::int32 m_wanggangplayer() const;
  inline void set_m_wanggangplayer(::google::protobuf::int32 value);

  // optional int32 m_wanggangplayeroptype = 4;
  inline bool has_m_wanggangplayeroptype() const;
  inline void clear_m_wanggangplayeroptype();
  static const int kMWanggangplayeroptypeFieldNumber = 4;
  inline ::google::protobuf::int32 m_wanggangplayeroptype() const;
  inline void set_m_wanggangplayeroptype(::google::protobuf::int32 value);

  // repeated int32 m_robhudoneop = 5;
  inline int m_robhudoneop_size() const;
  inline void clear_m_robhudoneop();
  static const int kMRobhudoneopFieldNumber = 5;
  inline ::google::protobuf::int32 m_robhudoneop(int index) const;
  inline void set_m_robhudoneop(int index, ::google::protobuf::int32 value);
  inline void add_m_robhudoneop(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_robhudoneop() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_robhudoneop();

  // repeated bool m_baddfanflag = 6;
  inline int m_baddfanflag_size() const;
  inline void clear_m_baddfanflag();
  static const int kMBaddfanflagFieldNumber = 6;
  inline bool m_baddfanflag(int index) const;
  inline void set_m_baddfanflag(int index, bool value);
  inline void add_m_baddfanflag(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      m_baddfanflag() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_m_baddfanflag();

  // optional int32 m_robwangangcard = 7;
  inline bool has_m_robwangangcard() const;
  inline void clear_m_robwangangcard();
  static const int kMRobwangangcardFieldNumber = 7;
  inline ::google::protobuf::int32 m_robwangangcard() const;
  inline void set_m_robwangangcard(::google::protobuf::int32 value);

  // optional bool m_brobwangang = 8;
  inline bool has_m_brobwangang() const;
  inline void clear_m_brobwangang();
  static const int kMBrobwangangFieldNumber = 8;
  inline bool m_brobwangang() const;
  inline void set_m_brobwangang(bool value);

  // optional bool m_brobhu = 9;
  inline bool has_m_brobhu() const;
  inline void clear_m_brobhu();
  static const int kMBrobhuFieldNumber = 9;
  inline bool m_brobhu() const;
  inline void set_m_brobhu(bool value);

  // optional bool m_brobganghujudge = 10;
  inline bool has_m_brobganghujudge() const;
  inline void clear_m_brobganghujudge();
  static const int kMBrobganghujudgeFieldNumber = 10;
  inline bool m_brobganghujudge() const;
  inline void set_m_brobganghujudge(bool value);

  // @@protoc_insertion_point(class_scope:proto.game.redis.RobAddInfo)
 private:
  inline void set_has_m_roboperatenum();
  inline void clear_has_m_roboperatenum();
  inline void set_has_m_robhunum();
  inline void clear_has_m_robhunum();
  inline void set_has_m_wanggangplayer();
  inline void clear_has_m_wanggangplayer();
  inline void set_has_m_wanggangplayeroptype();
  inline void clear_has_m_wanggangplayeroptype();
  inline void set_has_m_robwangangcard();
  inline void clear_has_m_robwangangcard();
  inline void set_has_m_brobwangang();
  inline void clear_has_m_brobwangang();
  inline void set_has_m_brobhu();
  inline void clear_has_m_brobhu();
  inline void set_has_m_brobganghujudge();
  inline void clear_has_m_brobganghujudge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 m_roboperatenum_;
  ::google::protobuf::int32 m_robhunum_;
  ::google::protobuf::int32 m_wanggangplayer_;
  ::google::protobuf::int32 m_wanggangplayeroptype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_robhudoneop_;
  ::google::protobuf::RepeatedField< bool > m_baddfanflag_;
  ::google::protobuf::int32 m_robwangangcard_;
  bool m_brobwangang_;
  bool m_brobhu_;
  bool m_brobganghujudge_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static RobAddInfo* default_instance_;
};
// -------------------------------------------------------------------

class LOWLEVELOPERATE : public ::google::protobuf::Message {
 public:
  LOWLEVELOPERATE();
  virtual ~LOWLEVELOPERATE();

  LOWLEVELOPERATE(const LOWLEVELOPERATE& from);

  inline LOWLEVELOPERATE& operator=(const LOWLEVELOPERATE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LOWLEVELOPERATE& default_instance();

  void Swap(LOWLEVELOPERATE* other);

  // implements Message ----------------------------------------------

  LOWLEVELOPERATE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LOWLEVELOPERATE& from);
  void MergeFrom(const LOWLEVELOPERATE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ioptype = 1;
  inline bool has_ioptype() const;
  inline void clear_ioptype();
  static const int kIoptypeFieldNumber = 1;
  inline ::google::protobuf::int32 ioptype() const;
  inline void set_ioptype(::google::protobuf::int32 value);

  // optional int32 chairid = 2;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 2;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 bcard = 3;
  inline bool has_bcard() const;
  inline void clear_bcard();
  static const int kBcardFieldNumber = 3;
  inline ::google::protobuf::int32 bcard() const;
  inline void set_bcard(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.redis.LOWLEVELOPERATE)
 private:
  inline void set_has_ioptype();
  inline void clear_has_ioptype();
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_bcard();
  inline void clear_has_bcard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ioptype_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 bcard_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static LOWLEVELOPERATE* default_instance_;
};
// -------------------------------------------------------------------

class tagGangScore : public ::google::protobuf::Message {
 public:
  tagGangScore();
  virtual ~tagGangScore();

  tagGangScore(const tagGangScore& from);

  inline tagGangScore& operator=(const tagGangScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagGangScore& default_instance();

  void Swap(tagGangScore* other);

  // implements Message ----------------------------------------------

  tagGangScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagGangScore& from);
  void MergeFrom(const tagGangScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 card = 1;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 1;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // optional int32 chairid = 2;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairidFieldNumber = 2;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 itype = 3;
  inline bool has_itype() const;
  inline void clear_itype();
  static const int kItypeFieldNumber = 3;
  inline ::google::protobuf::int32 itype() const;
  inline void set_itype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.redis.tagGangScore)
 private:
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_itype();
  inline void clear_has_itype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 card_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 itype_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static tagGangScore* default_instance_;
};
// -------------------------------------------------------------------

class tagGangScoreInfo : public ::google::protobuf::Message {
 public:
  tagGangScoreInfo();
  virtual ~tagGangScoreInfo();

  tagGangScoreInfo(const tagGangScoreInfo& from);

  inline tagGangScoreInfo& operator=(const tagGangScoreInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagGangScoreInfo& default_instance();

  void Swap(tagGangScoreInfo* other);

  // implements Message ----------------------------------------------

  tagGangScoreInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagGangScoreInfo& from);
  void MergeFrom(const tagGangScoreInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itotalscore = 1;
  inline bool has_itotalscore() const;
  inline void clear_itotalscore();
  static const int kItotalscoreFieldNumber = 1;
  inline ::google::protobuf::int32 itotalscore() const;
  inline void set_itotalscore(::google::protobuf::int32 value);

  // repeated .proto.game.redis.tagGangScore gang = 2;
  inline int gang_size() const;
  inline void clear_gang();
  static const int kGangFieldNumber = 2;
  inline const ::proto::game::redis::tagGangScore& gang(int index) const;
  inline ::proto::game::redis::tagGangScore* mutable_gang(int index);
  inline ::proto::game::redis::tagGangScore* add_gang();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagGangScore >&
      gang() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagGangScore >*
      mutable_gang();

  // @@protoc_insertion_point(class_scope:proto.game.redis.tagGangScoreInfo)
 private:
  inline void set_has_itotalscore();
  inline void clear_has_itotalscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagGangScore > gang_;
  ::google::protobuf::int32 itotalscore_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static tagGangScoreInfo* default_instance_;
};
// -------------------------------------------------------------------

class tagHuRecord : public ::google::protobuf::Message {
 public:
  tagHuRecord();
  virtual ~tagHuRecord();

  tagHuRecord(const tagHuRecord& from);

  inline tagHuRecord& operator=(const tagHuRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagHuRecord& default_instance();

  void Swap(tagHuRecord* other);

  // implements Message ----------------------------------------------

  tagHuRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagHuRecord& from);
  void MergeFrom(const tagHuRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bhucard = 1;
  inline bool has_bhucard() const;
  inline void clear_bhucard();
  static const int kBhucardFieldNumber = 1;
  inline ::google::protobuf::int32 bhucard() const;
  inline void set_bhucard(::google::protobuf::int32 value);

  // optional int32 bpashuchairid = 2;
  inline bool has_bpashuchairid() const;
  inline void clear_bpashuchairid();
  static const int kBpashuchairidFieldNumber = 2;
  inline ::google::protobuf::int32 bpashuchairid() const;
  inline void set_bpashuchairid(::google::protobuf::int32 value);

  // optional int32 btype = 3;
  inline bool has_btype() const;
  inline void clear_btype();
  static const int kBtypeFieldNumber = 3;
  inline ::google::protobuf::int32 btype() const;
  inline void set_btype(::google::protobuf::int32 value);

  // optional int32 ifannum = 4;
  inline bool has_ifannum() const;
  inline void clear_ifannum();
  static const int kIfannumFieldNumber = 4;
  inline ::google::protobuf::int32 ifannum() const;
  inline void set_ifannum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.redis.tagHuRecord)
 private:
  inline void set_has_bhucard();
  inline void clear_has_bhucard();
  inline void set_has_bpashuchairid();
  inline void clear_has_bpashuchairid();
  inline void set_has_btype();
  inline void clear_has_btype();
  inline void set_has_ifannum();
  inline void clear_has_ifannum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 bhucard_;
  ::google::protobuf::int32 bpashuchairid_;
  ::google::protobuf::int32 btype_;
  ::google::protobuf::int32 ifannum_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static tagHuRecord* default_instance_;
};
// -------------------------------------------------------------------

class tagHuInfo : public ::google::protobuf::Message {
 public:
  tagHuInfo();
  virtual ~tagHuInfo();

  tagHuInfo(const tagHuInfo& from);

  inline tagHuInfo& operator=(const tagHuInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagHuInfo& default_instance();

  void Swap(tagHuInfo* other);

  // implements Message ----------------------------------------------

  tagHuInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagHuInfo& from);
  void MergeFrom(const tagHuInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itotalscore = 1;
  inline bool has_itotalscore() const;
  inline void clear_itotalscore();
  static const int kItotalscoreFieldNumber = 1;
  inline ::google::protobuf::int32 itotalscore() const;
  inline void set_itotalscore(::google::protobuf::int32 value);

  // repeated .proto.game.redis.tagHuRecord sthu = 2;
  inline int sthu_size() const;
  inline void clear_sthu();
  static const int kSthuFieldNumber = 2;
  inline const ::proto::game::redis::tagHuRecord& sthu(int index) const;
  inline ::proto::game::redis::tagHuRecord* mutable_sthu(int index);
  inline ::proto::game::redis::tagHuRecord* add_sthu();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagHuRecord >&
      sthu() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagHuRecord >*
      mutable_sthu();

  // @@protoc_insertion_point(class_scope:proto.game.redis.tagHuInfo)
 private:
  inline void set_has_itotalscore();
  inline void clear_has_itotalscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagHuRecord > sthu_;
  ::google::protobuf::int32 itotalscore_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static tagHuInfo* default_instance_;
};
// -------------------------------------------------------------------

class MJ_BUFFER : public ::google::protobuf::Message {
 public:
  MJ_BUFFER();
  virtual ~MJ_BUFFER();

  MJ_BUFFER(const MJ_BUFFER& from);

  inline MJ_BUFFER& operator=(const MJ_BUFFER& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MJ_BUFFER& default_instance();

  void Swap(MJ_BUFFER* other);

  // implements Message ----------------------------------------------

  MJ_BUFFER* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MJ_BUFFER& from);
  void MergeFrom(const MJ_BUFFER& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 card = 1;
  inline int card_size() const;
  inline void clear_card();
  static const int kCardFieldNumber = 1;
  inline ::google::protobuf::int32 card(int index) const;
  inline void set_card(int index, ::google::protobuf::int32 value);
  inline void add_card(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card();

  // @@protoc_insertion_point(class_scope:proto.game.redis.MJ_BUFFER)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static MJ_BUFFER* default_instance_;
};
// -------------------------------------------------------------------

class HuFanInfo : public ::google::protobuf::Message {
 public:
  HuFanInfo();
  virtual ~HuFanInfo();

  HuFanInfo(const HuFanInfo& from);

  inline HuFanInfo& operator=(const HuFanInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HuFanInfo& default_instance();

  void Swap(HuFanInfo* other);

  // implements Message ----------------------------------------------

  HuFanInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HuFanInfo& from);
  void MergeFrom(const HuFanInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool m_bishu = 1;
  inline int m_bishu_size() const;
  inline void clear_m_bishu();
  static const int kMBishuFieldNumber = 1;
  inline bool m_bishu(int index) const;
  inline void set_m_bishu(int index, bool value);
  inline void add_m_bishu(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      m_bishu() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_m_bishu();

  // repeated int32 m_hufannums = 2;
  inline int m_hufannums_size() const;
  inline void clear_m_hufannums();
  static const int kMHufannumsFieldNumber = 2;
  inline ::google::protobuf::int32 m_hufannums(int index) const;
  inline void set_m_hufannums(int index, ::google::protobuf::int32 value);
  inline void add_m_hufannums(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_hufannums() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_hufannums();

  // repeated .proto.game.redis.tagGangScoreInfo m_stgang = 3;
  inline int m_stgang_size() const;
  inline void clear_m_stgang();
  static const int kMStgangFieldNumber = 3;
  inline const ::proto::game::redis::tagGangScoreInfo& m_stgang(int index) const;
  inline ::proto::game::redis::tagGangScoreInfo* mutable_m_stgang(int index);
  inline ::proto::game::redis::tagGangScoreInfo* add_m_stgang();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagGangScoreInfo >&
      m_stgang() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagGangScoreInfo >*
      mutable_m_stgang();

  // repeated .proto.game.redis.tagHuInfo m_sthuscore = 4;
  inline int m_sthuscore_size() const;
  inline void clear_m_sthuscore();
  static const int kMSthuscoreFieldNumber = 4;
  inline const ::proto::game::redis::tagHuInfo& m_sthuscore(int index) const;
  inline ::proto::game::redis::tagHuInfo* mutable_m_sthuscore(int index);
  inline ::proto::game::redis::tagHuInfo* add_m_sthuscore();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagHuInfo >&
      m_sthuscore() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagHuInfo >*
      mutable_m_sthuscore();

  // repeated .proto.game.redis.MJ_BUFFER m_ofan = 5;
  inline int m_ofan_size() const;
  inline void clear_m_ofan();
  static const int kMOfanFieldNumber = 5;
  inline const ::proto::game::redis::MJ_BUFFER& m_ofan(int index) const;
  inline ::proto::game::redis::MJ_BUFFER* mutable_m_ofan(int index);
  inline ::proto::game::redis::MJ_BUFFER* add_m_ofan();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::MJ_BUFFER >&
      m_ofan() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::MJ_BUFFER >*
      mutable_m_ofan();

  // @@protoc_insertion_point(class_scope:proto.game.redis.HuFanInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< bool > m_bishu_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_hufannums_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagGangScoreInfo > m_stgang_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagHuInfo > m_sthuscore_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::redis::MJ_BUFFER > m_ofan_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static HuFanInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGameAccout : public ::google::protobuf::Message {
 public:
  CGameAccout();
  virtual ~CGameAccout();

  CGameAccout(const CGameAccout& from);

  inline CGameAccout& operator=(const CGameAccout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameAccout& default_instance();

  void Swap(CGameAccout* other);

  // implements Message ----------------------------------------------

  CGameAccout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGameAccout& from);
  void MergeFrom(const CGameAccout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_round = 1;
  inline bool has_m_round() const;
  inline void clear_m_round();
  static const int kMRoundFieldNumber = 1;
  inline ::google::protobuf::int32 m_round() const;
  inline void set_m_round(::google::protobuf::int32 value);

  // optional int32 m_roomid = 2;
  inline bool has_m_roomid() const;
  inline void clear_m_roomid();
  static const int kMRoomidFieldNumber = 2;
  inline ::google::protobuf::int32 m_roomid() const;
  inline void set_m_roomid(::google::protobuf::int32 value);

  // repeated int32 m_paly_id = 3;
  inline int m_paly_id_size() const;
  inline void clear_m_paly_id();
  static const int kMPalyIdFieldNumber = 3;
  inline ::google::protobuf::int32 m_paly_id(int index) const;
  inline void set_m_paly_id(int index, ::google::protobuf::int32 value);
  inline void add_m_paly_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_paly_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_paly_id();

  // repeated int32 m_score = 4;
  inline int m_score_size() const;
  inline void clear_m_score();
  static const int kMScoreFieldNumber = 4;
  inline ::google::protobuf::int32 m_score(int index) const;
  inline void set_m_score(int index, ::google::protobuf::int32 value);
  inline void add_m_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_score();

  // repeated int32 m_total_score = 5;
  inline int m_total_score_size() const;
  inline void clear_m_total_score();
  static const int kMTotalScoreFieldNumber = 5;
  inline ::google::protobuf::int32 m_total_score(int index) const;
  inline void set_m_total_score(int index, ::google::protobuf::int32 value);
  inline void add_m_total_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_total_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_total_score();

  // @@protoc_insertion_point(class_scope:proto.game.redis.CGameAccout)
 private:
  inline void set_has_m_round();
  inline void clear_has_m_round();
  inline void set_has_m_roomid();
  inline void clear_has_m_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 m_round_;
  ::google::protobuf::int32 m_roomid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_paly_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_score_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_total_score_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static CGameAccout* default_instance_;
};
// -------------------------------------------------------------------

class ForbidWin : public ::google::protobuf::Message {
 public:
  ForbidWin();
  virtual ~ForbidWin();

  ForbidWin(const ForbidWin& from);

  inline ForbidWin& operator=(const ForbidWin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForbidWin& default_instance();

  void Swap(ForbidWin* other);

  // implements Message ----------------------------------------------

  ForbidWin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForbidWin& from);
  void MergeFrom(const ForbidWin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 m_lockcard = 1;
  inline int m_lockcard_size() const;
  inline void clear_m_lockcard();
  static const int kMLockcardFieldNumber = 1;
  inline ::google::protobuf::int32 m_lockcard(int index) const;
  inline void set_m_lockcard(int index, ::google::protobuf::int32 value);
  inline void add_m_lockcard(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_lockcard() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_lockcard();

  // optional int32 m_lockpoints = 2;
  inline bool has_m_lockpoints() const;
  inline void clear_m_lockpoints();
  static const int kMLockpointsFieldNumber = 2;
  inline ::google::protobuf::int32 m_lockpoints() const;
  inline void set_m_lockpoints(::google::protobuf::int32 value);

  // optional bool m_lock = 3;
  inline bool has_m_lock() const;
  inline void clear_m_lock();
  static const int kMLockFieldNumber = 3;
  inline bool m_lock() const;
  inline void set_m_lock(bool value);

  // @@protoc_insertion_point(class_scope:proto.game.redis.ForbidWin)
 private:
  inline void set_has_m_lockpoints();
  inline void clear_has_m_lockpoints();
  inline void set_has_m_lock();
  inline void clear_has_m_lock();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_lockcard_;
  ::google::protobuf::int32 m_lockpoints_;
  bool m_lock_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static ForbidWin* default_instance_;
};
// -------------------------------------------------------------------

class Fantype_to_FanNum : public ::google::protobuf::Message {
 public:
  Fantype_to_FanNum();
  virtual ~Fantype_to_FanNum();

  Fantype_to_FanNum(const Fantype_to_FanNum& from);

  inline Fantype_to_FanNum& operator=(const Fantype_to_FanNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fantype_to_FanNum& default_instance();

  void Swap(Fantype_to_FanNum* other);

  // implements Message ----------------------------------------------

  Fantype_to_FanNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fantype_to_FanNum& from);
  void MergeFrom(const Fantype_to_FanNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 fan_num = 1;
  inline int fan_num_size() const;
  inline void clear_fan_num();
  static const int kFanNumFieldNumber = 1;
  inline ::google::protobuf::int32 fan_num(int index) const;
  inline void set_fan_num(int index, ::google::protobuf::int32 value);
  inline void add_fan_num(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fan_num() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fan_num();

  // repeated int32 special_fan_num = 2;
  inline int special_fan_num_size() const;
  inline void clear_special_fan_num();
  static const int kSpecialFanNumFieldNumber = 2;
  inline ::google::protobuf::int32 special_fan_num(int index) const;
  inline void set_special_fan_num(int index, ::google::protobuf::int32 value);
  inline void add_special_fan_num(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      special_fan_num() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_special_fan_num();

  // @@protoc_insertion_point(class_scope:proto.game.redis.Fantype_to_FanNum)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fan_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > special_fan_num_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static Fantype_to_FanNum* default_instance_;
};
// -------------------------------------------------------------------

class tagPlayerGPS : public ::google::protobuf::Message {
 public:
  tagPlayerGPS();
  virtual ~tagPlayerGPS();

  tagPlayerGPS(const tagPlayerGPS& from);

  inline tagPlayerGPS& operator=(const tagPlayerGPS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPlayerGPS& default_instance();

  void Swap(tagPlayerGPS* other);

  // implements Message ----------------------------------------------

  tagPlayerGPS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagPlayerGPS& from);
  void MergeFrom(const tagPlayerGPS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double latitude = 1;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  inline double latitude() const;
  inline void set_latitude(double value);

  // optional double longitude = 2;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  inline double longitude() const;
  inline void set_longitude(double value);

  // optional string city = 3;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 3;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const char* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // @@protoc_insertion_point(class_scope:proto.game.redis.tagPlayerGPS)
 private:
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_city();
  inline void clear_has_city();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double latitude_;
  double longitude_;
  ::std::string* city_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static tagPlayerGPS* default_instance_;
};
// -------------------------------------------------------------------

class tagRedisInfo : public ::google::protobuf::Message {
 public:
  tagRedisInfo();
  virtual ~tagRedisInfo();

  tagRedisInfo(const tagRedisInfo& from);

  inline tagRedisInfo& operator=(const tagRedisInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagRedisInfo& default_instance();

  void Swap(tagRedisInfo* other);

  // implements Message ----------------------------------------------

  tagRedisInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagRedisInfo& from);
  void MergeFrom(const tagRedisInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional int32 vid = 2;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVidFieldNumber = 2;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);

  // optional int32 zid = 3;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 3;
  inline ::google::protobuf::int32 zid() const;
  inline void set_zid(::google::protobuf::int32 value);

  // optional int32 base_money = 4;
  inline bool has_base_money() const;
  inline void clear_base_money();
  static const int kBaseMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 base_money() const;
  inline void set_base_money(::google::protobuf::int32 value);

  // optional int32 roomgold = 5;
  inline bool has_roomgold() const;
  inline void clear_roomgold();
  static const int kRoomgoldFieldNumber = 5;
  inline ::google::protobuf::int32 roomgold() const;
  inline void set_roomgold(::google::protobuf::int32 value);

  // optional int32 stand_money = 6;
  inline bool has_stand_money() const;
  inline void clear_stand_money();
  static const int kStandMoneyFieldNumber = 6;
  inline ::google::protobuf::int32 stand_money() const;
  inline void set_stand_money(::google::protobuf::int32 value);

  // optional int32 lose_exp = 7;
  inline bool has_lose_exp() const;
  inline void clear_lose_exp();
  static const int kLoseExpFieldNumber = 7;
  inline ::google::protobuf::int32 lose_exp() const;
  inline void set_lose_exp(::google::protobuf::int32 value);

  // optional int32 win_exp = 8;
  inline bool has_win_exp() const;
  inline void clear_win_exp();
  static const int kWinExpFieldNumber = 8;
  inline ::google::protobuf::int32 win_exp() const;
  inline void set_win_exp(::google::protobuf::int32 value);

  // optional int32 m_basescore = 9;
  inline bool has_m_basescore() const;
  inline void clear_m_basescore();
  static const int kMBasescoreFieldNumber = 9;
  inline ::google::protobuf::int32 m_basescore() const;
  inline void set_m_basescore(::google::protobuf::int32 value);

  // optional .proto.game.redis.MJCustomizedConf m_conf = 10;
  inline bool has_m_conf() const;
  inline void clear_m_conf();
  static const int kMConfFieldNumber = 10;
  inline const ::proto::game::redis::MJCustomizedConf& m_conf() const;
  inline ::proto::game::redis::MJCustomizedConf* mutable_m_conf();
  inline ::proto::game::redis::MJCustomizedConf* release_m_conf();
  inline void set_allocated_m_conf(::proto::game::redis::MJCustomizedConf* m_conf);

  // optional int32 m_room_owner_uid = 11;
  inline bool has_m_room_owner_uid() const;
  inline void clear_m_room_owner_uid();
  static const int kMRoomOwnerUidFieldNumber = 11;
  inline ::google::protobuf::int32 m_room_owner_uid() const;
  inline void set_m_room_owner_uid(::google::protobuf::int32 value);

  // optional int32 m_room_status = 12;
  inline bool has_m_room_status() const;
  inline void clear_m_room_status();
  static const int kMRoomStatusFieldNumber = 12;
  inline ::google::protobuf::int32 m_room_status() const;
  inline void set_m_room_status(::google::protobuf::int32 value);

  // optional .proto.game.redis.Table_TotalRecordInfo m_totalrecordinfo = 13;
  inline bool has_m_totalrecordinfo() const;
  inline void clear_m_totalrecordinfo();
  static const int kMTotalrecordinfoFieldNumber = 13;
  inline const ::proto::game::redis::Table_TotalRecordInfo& m_totalrecordinfo() const;
  inline ::proto::game::redis::Table_TotalRecordInfo* mutable_m_totalrecordinfo();
  inline ::proto::game::redis::Table_TotalRecordInfo* release_m_totalrecordinfo();
  inline void set_allocated_m_totalrecordinfo(::proto::game::redis::Table_TotalRecordInfo* m_totalrecordinfo);

  // optional int32 m_game_player = 14;
  inline bool has_m_game_player() const;
  inline void clear_m_game_player();
  static const int kMGamePlayerFieldNumber = 14;
  inline ::google::protobuf::int32 m_game_player() const;
  inline void set_m_game_player(::google::protobuf::int32 value);

  // repeated bool m_online_beat = 15;
  inline int m_online_beat_size() const;
  inline void clear_m_online_beat();
  static const int kMOnlineBeatFieldNumber = 15;
  inline bool m_online_beat(int index) const;
  inline void set_m_online_beat(int index, bool value);
  inline void add_m_online_beat(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      m_online_beat() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_m_online_beat();

  // optional string m_videostr = 16;
  inline bool has_m_videostr() const;
  inline void clear_m_videostr();
  static const int kMVideostrFieldNumber = 16;
  inline const ::std::string& m_videostr() const;
  inline void set_m_videostr(const ::std::string& value);
  inline void set_m_videostr(const char* value);
  inline void set_m_videostr(const char* value, size_t size);
  inline ::std::string* mutable_m_videostr();
  inline ::std::string* release_m_videostr();
  inline void set_allocated_m_videostr(::std::string* m_videostr);

  // optional bool m_randomseat = 17;
  inline bool has_m_randomseat() const;
  inline void clear_m_randomseat();
  static const int kMRandomseatFieldNumber = 17;
  inline bool m_randomseat() const;
  inline void set_m_randomseat(bool value);

  // optional bool m_offlinenoop = 18;
  inline bool has_m_offlinenoop() const;
  inline void clear_m_offlinenoop();
  static const int kMOfflinenoopFieldNumber = 18;
  inline bool m_offlinenoop() const;
  inline void set_m_offlinenoop(bool value);

  // optional int32 m_bdelaytime = 19;
  inline bool has_m_bdelaytime() const;
  inline void clear_m_bdelaytime();
  static const int kMBdelaytimeFieldNumber = 19;
  inline ::google::protobuf::int32 m_bdelaytime() const;
  inline void set_m_bdelaytime(::google::protobuf::int32 value);

  // repeated .proto.game.redis.Seat m_seatplayer = 20;
  inline int m_seatplayer_size() const;
  inline void clear_m_seatplayer();
  static const int kMSeatplayerFieldNumber = 20;
  inline const ::proto::game::redis::Seat& m_seatplayer(int index) const;
  inline ::proto::game::redis::Seat* mutable_m_seatplayer(int index);
  inline ::proto::game::redis::Seat* add_m_seatplayer();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::Seat >&
      m_seatplayer() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::Seat >*
      mutable_m_seatplayer();

  // optional .proto.game.redis.Shai_Set m_start_shai = 21;
  inline bool has_m_start_shai() const;
  inline void clear_m_start_shai();
  static const int kMStartShaiFieldNumber = 21;
  inline const ::proto::game::redis::Shai_Set& m_start_shai() const;
  inline ::proto::game::redis::Shai_Set* mutable_m_start_shai();
  inline ::proto::game::redis::Shai_Set* release_m_start_shai();
  inline void set_allocated_m_start_shai(::proto::game::redis::Shai_Set* m_start_shai);

  // optional int32 m_bcurplayers = 22;
  inline bool has_m_bcurplayers() const;
  inline void clear_m_bcurplayers();
  static const int kMBcurplayersFieldNumber = 22;
  inline ::google::protobuf::int32 m_bcurplayers() const;
  inline void set_m_bcurplayers(::google::protobuf::int32 value);

  // optional int32 m_bgamestate = 23;
  inline bool has_m_bgamestate() const;
  inline void clear_m_bgamestate();
  static const int kMBgamestateFieldNumber = 23;
  inline ::google::protobuf::int32 m_bgamestate() const;
  inline void set_m_bgamestate(::google::protobuf::int32 value);

  // optional int32 m_disband_resuser = 24;
  inline bool has_m_disband_resuser() const;
  inline void clear_m_disband_resuser();
  static const int kMDisbandResuserFieldNumber = 24;
  inline ::google::protobuf::int32 m_disband_resuser() const;
  inline void set_m_disband_resuser(::google::protobuf::int32 value);

  // repeated .proto.game.redis.HandCards m_handcard = 25;
  inline int m_handcard_size() const;
  inline void clear_m_handcard();
  static const int kMHandcardFieldNumber = 25;
  inline const ::proto::game::redis::HandCards& m_handcard(int index) const;
  inline ::proto::game::redis::HandCards* mutable_m_handcard(int index);
  inline ::proto::game::redis::HandCards* add_m_handcard();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::HandCards >&
      m_handcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::HandCards >*
      mutable_m_handcard();

  // repeated bool m_isoffline = 26;
  inline int m_isoffline_size() const;
  inline void clear_m_isoffline();
  static const int kMIsofflineFieldNumber = 26;
  inline bool m_isoffline(int index) const;
  inline void set_m_isoffline(int index, bool value);
  inline void add_m_isoffline(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      m_isoffline() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_m_isoffline();

  // repeated bool m_bistrustee = 27;
  inline int m_bistrustee_size() const;
  inline void clear_m_bistrustee();
  static const int kMBistrusteeFieldNumber = 27;
  inline bool m_bistrustee(int index) const;
  inline void set_m_bistrustee(int index, bool value);
  inline void add_m_bistrustee(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      m_bistrustee() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_m_bistrustee();

  // repeated bool m_bautohu = 28;
  inline int m_bautohu_size() const;
  inline void clear_m_bautohu();
  static const int kMBautohuFieldNumber = 28;
  inline bool m_bautohu(int index) const;
  inline void set_m_bautohu(int index, bool value);
  inline void add_m_bautohu(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      m_bautohu() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_m_bautohu();

  // optional bool m_bgangcalcimme = 29;
  inline bool has_m_bgangcalcimme() const;
  inline void clear_m_bgangcalcimme();
  static const int kMBgangcalcimmeFieldNumber = 29;
  inline bool m_bgangcalcimme() const;
  inline void set_m_bgangcalcimme(bool value);

  // optional int32 m_bbanker = 30;
  inline bool has_m_bbanker() const;
  inline void clear_m_bbanker();
  static const int kMBbankerFieldNumber = 30;
  inline ::google::protobuf::int32 m_bbanker() const;
  inline void set_m_bbanker(::google::protobuf::int32 value);

  // optional int32 m_last_banker = 31;
  inline bool has_m_last_banker() const;
  inline void clear_m_last_banker();
  static const int kMLastBankerFieldNumber = 31;
  inline ::google::protobuf::int32 m_last_banker() const;
  inline void set_m_last_banker(::google::protobuf::int32 value);

  // optional .proto.game.redis.CCardPool m_cardpool = 32;
  inline bool has_m_cardpool() const;
  inline void clear_m_cardpool();
  static const int kMCardpoolFieldNumber = 32;
  inline const ::proto::game::redis::CCardPool& m_cardpool() const;
  inline ::proto::game::redis::CCardPool* mutable_m_cardpool();
  inline ::proto::game::redis::CCardPool* release_m_cardpool();
  inline void set_allocated_m_cardpool(::proto::game::redis::CCardPool* m_cardpool);

  // repeated int32 m_bgetcardcount = 33;
  inline int m_bgetcardcount_size() const;
  inline void clear_m_bgetcardcount();
  static const int kMBgetcardcountFieldNumber = 33;
  inline ::google::protobuf::int32 m_bgetcardcount(int index) const;
  inline void set_m_bgetcardcount(int index, ::google::protobuf::int32 value);
  inline void add_m_bgetcardcount(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_bgetcardcount() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_bgetcardcount();

  // repeated int32 m_buseroperate = 34;
  inline int m_buseroperate_size() const;
  inline void clear_m_buseroperate();
  static const int kMBuseroperateFieldNumber = 34;
  inline ::google::protobuf::int32 m_buseroperate(int index) const;
  inline void set_m_buseroperate(int index, ::google::protobuf::int32 value);
  inline void add_m_buseroperate(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_buseroperate() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_buseroperate();

  // optional int32 m_bcurchairid = 35;
  inline bool has_m_bcurchairid() const;
  inline void clear_m_bcurchairid();
  static const int kMBcurchairidFieldNumber = 35;
  inline ::google::protobuf::int32 m_bcurchairid() const;
  inline void set_m_bcurchairid(::google::protobuf::int32 value);

  // optional int32 m_boutcardchairid = 36;
  inline bool has_m_boutcardchairid() const;
  inline void clear_m_boutcardchairid();
  static const int kMBoutcardchairidFieldNumber = 36;
  inline ::google::protobuf::int32 m_boutcardchairid() const;
  inline void set_m_boutcardchairid(::google::protobuf::int32 value);

  // optional int32 m_bcuroutcard = 37;
  inline bool has_m_bcuroutcard() const;
  inline void clear_m_bcuroutcard();
  static const int kMBcuroutcardFieldNumber = 37;
  inline ::google::protobuf::int32 m_bcuroutcard() const;
  inline void set_m_bcuroutcard(::google::protobuf::int32 value);

  // optional int32 m_bcurcard = 38;
  inline bool has_m_bcurcard() const;
  inline void clear_m_bcurcard();
  static const int kMBcurcardFieldNumber = 38;
  inline ::google::protobuf::int32 m_bcurcard() const;
  inline void set_m_bcurcard(::google::protobuf::int32 value);

  // repeated .proto.game.redis.MJ_BUFFER m_stuseroutcard = 39;
  inline int m_stuseroutcard_size() const;
  inline void clear_m_stuseroutcard();
  static const int kMStuseroutcardFieldNumber = 39;
  inline const ::proto::game::redis::MJ_BUFFER& m_stuseroutcard(int index) const;
  inline ::proto::game::redis::MJ_BUFFER* mutable_m_stuseroutcard(int index);
  inline ::proto::game::redis::MJ_BUFFER* add_m_stuseroutcard();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::MJ_BUFFER >&
      m_stuseroutcard() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::MJ_BUFFER >*
      mutable_m_stuseroutcard();

  // optional .proto.game.redis.MultiOpInfo multiopinfo = 40;
  inline bool has_multiopinfo() const;
  inline void clear_multiopinfo();
  static const int kMultiopinfoFieldNumber = 40;
  inline const ::proto::game::redis::MultiOpInfo& multiopinfo() const;
  inline ::proto::game::redis::MultiOpInfo* mutable_multiopinfo();
  inline ::proto::game::redis::MultiOpInfo* release_multiopinfo();
  inline void set_allocated_multiopinfo(::proto::game::redis::MultiOpInfo* multiopinfo);

  // repeated int32 m_passhuplayer = 41;
  inline int m_passhuplayer_size() const;
  inline void clear_m_passhuplayer();
  static const int kMPasshuplayerFieldNumber = 41;
  inline ::google::protobuf::int32 m_passhuplayer(int index) const;
  inline void set_m_passhuplayer(int index, ::google::protobuf::int32 value);
  inline void add_m_passhuplayer(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_passhuplayer() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_passhuplayer();

  // optional .proto.game.redis.RobAddInfo robaddinfo = 42;
  inline bool has_robaddinfo() const;
  inline void clear_robaddinfo();
  static const int kRobaddinfoFieldNumber = 42;
  inline const ::proto::game::redis::RobAddInfo& robaddinfo() const;
  inline ::proto::game::redis::RobAddInfo* mutable_robaddinfo();
  inline ::proto::game::redis::RobAddInfo* release_robaddinfo();
  inline void set_allocated_robaddinfo(::proto::game::redis::RobAddInfo* robaddinfo);

  // optional .proto.game.redis.LOWLEVELOPERATE m_brecordmultiop = 43;
  inline bool has_m_brecordmultiop() const;
  inline void clear_m_brecordmultiop();
  static const int kMBrecordmultiopFieldNumber = 43;
  inline const ::proto::game::redis::LOWLEVELOPERATE& m_brecordmultiop() const;
  inline ::proto::game::redis::LOWLEVELOPERATE* mutable_m_brecordmultiop();
  inline ::proto::game::redis::LOWLEVELOPERATE* release_m_brecordmultiop();
  inline void set_allocated_m_brecordmultiop(::proto::game::redis::LOWLEVELOPERATE* m_brecordmultiop);

  // optional .proto.game.redis.HuFanInfo hufaninfo = 44;
  inline bool has_hufaninfo() const;
  inline void clear_hufaninfo();
  static const int kHufaninfoFieldNumber = 44;
  inline const ::proto::game::redis::HuFanInfo& hufaninfo() const;
  inline ::proto::game::redis::HuFanInfo* mutable_hufaninfo();
  inline ::proto::game::redis::HuFanInfo* release_hufaninfo();
  inline void set_allocated_hufaninfo(::proto::game::redis::HuFanInfo* hufaninfo);

  // optional int32 m_applydisbandchairid = 45;
  inline bool has_m_applydisbandchairid() const;
  inline void clear_m_applydisbandchairid();
  static const int kMApplydisbandchairidFieldNumber = 45;
  inline ::google::protobuf::int32 m_applydisbandchairid() const;
  inline void set_m_applydisbandchairid(::google::protobuf::int32 value);

  // optional bool m_bisdisbandtable = 46;
  inline bool has_m_bisdisbandtable() const;
  inline void clear_m_bisdisbandtable();
  static const int kMBisdisbandtableFieldNumber = 46;
  inline bool m_bisdisbandtable() const;
  inline void set_m_bisdisbandtable(bool value);

  // repeated int32 m_disbandchoose = 47;
  inline int m_disbandchoose_size() const;
  inline void clear_m_disbandchoose();
  static const int kMDisbandchooseFieldNumber = 47;
  inline ::google::protobuf::int32 m_disbandchoose(int index) const;
  inline void set_m_disbandchoose(int index, ::google::protobuf::int32 value);
  inline void add_m_disbandchoose(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_disbandchoose() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_disbandchoose();

  // optional int32 m_bdisbandcount = 48;
  inline bool has_m_bdisbandcount() const;
  inline void clear_m_bdisbandcount();
  static const int kMBdisbandcountFieldNumber = 48;
  inline ::google::protobuf::int32 m_bdisbandcount() const;
  inline void set_m_bdisbandcount(::google::protobuf::int32 value);

  // repeated int32 m_bovertimestate = 49;
  inline int m_bovertimestate_size() const;
  inline void clear_m_bovertimestate();
  static const int kMBovertimestateFieldNumber = 49;
  inline ::google::protobuf::int32 m_bovertimestate(int index) const;
  inline void set_m_bovertimestate(int index, ::google::protobuf::int32 value);
  inline void add_m_bovertimestate(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_bovertimestate() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_bovertimestate();

  // optional int32 m_nplayingtimes = 50;
  inline bool has_m_nplayingtimes() const;
  inline void clear_m_nplayingtimes();
  static const int kMNplayingtimesFieldNumber = 50;
  inline ::google::protobuf::int32 m_nplayingtimes() const;
  inline void set_m_nplayingtimes(::google::protobuf::int32 value);

  // optional .proto.game.redis.CGameAccout m_account_info = 51;
  inline bool has_m_account_info() const;
  inline void clear_m_account_info();
  static const int kMAccountInfoFieldNumber = 51;
  inline const ::proto::game::redis::CGameAccout& m_account_info() const;
  inline ::proto::game::redis::CGameAccout* mutable_m_account_info();
  inline ::proto::game::redis::CGameAccout* release_m_account_info();
  inline void set_allocated_m_account_info(::proto::game::redis::CGameAccout* m_account_info);

  // repeated int32 m_userdissstate = 52;
  inline int m_userdissstate_size() const;
  inline void clear_m_userdissstate();
  static const int kMUserdissstateFieldNumber = 52;
  inline ::google::protobuf::int32 m_userdissstate(int index) const;
  inline void set_m_userdissstate(int index, ::google::protobuf::int32 value);
  inline void add_m_userdissstate(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_userdissstate() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_userdissstate();

  // optional bool m_bouttimer = 53;
  inline bool has_m_bouttimer() const;
  inline void clear_m_bouttimer();
  static const int kMBouttimerFieldNumber = 53;
  inline bool m_bouttimer() const;
  inline void set_m_bouttimer(bool value);

  // repeated .proto.game.redis.ForbidWin m_louhu = 54;
  inline int m_louhu_size() const;
  inline void clear_m_louhu();
  static const int kMLouhuFieldNumber = 54;
  inline const ::proto::game::redis::ForbidWin& m_louhu(int index) const;
  inline ::proto::game::redis::ForbidWin* mutable_m_louhu(int index);
  inline ::proto::game::redis::ForbidWin* add_m_louhu();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::ForbidWin >&
      m_louhu() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::ForbidWin >*
      mutable_m_louhu();

  // optional bool m_bdeletetable = 55;
  inline bool has_m_bdeletetable() const;
  inline void clear_m_bdeletetable();
  static const int kMBdeletetableFieldNumber = 55;
  inline bool m_bdeletetable() const;
  inline void set_m_bdeletetable(bool value);

  // optional bool m_bistestsvr = 56;
  inline bool has_m_bistestsvr() const;
  inline void clear_m_bistestsvr();
  static const int kMBistestsvrFieldNumber = 56;
  inline bool m_bistestsvr() const;
  inline void set_m_bistestsvr(bool value);

  // optional .proto.game.redis.MJ_BUFFER m_room_config = 57;
  inline bool has_m_room_config() const;
  inline void clear_m_room_config();
  static const int kMRoomConfigFieldNumber = 57;
  inline const ::proto::game::redis::MJ_BUFFER& m_room_config() const;
  inline ::proto::game::redis::MJ_BUFFER* mutable_m_room_config();
  inline ::proto::game::redis::MJ_BUFFER* release_m_room_config();
  inline void set_allocated_m_room_config(::proto::game::redis::MJ_BUFFER* m_room_config);

  // optional .proto.game.redis.MJ_BUFFER m_niao = 58;
  inline bool has_m_niao() const;
  inline void clear_m_niao();
  static const int kMNiaoFieldNumber = 58;
  inline const ::proto::game::redis::MJ_BUFFER& m_niao() const;
  inline ::proto::game::redis::MJ_BUFFER* mutable_m_niao();
  inline ::proto::game::redis::MJ_BUFFER* release_m_niao();
  inline void set_allocated_m_niao(::proto::game::redis::MJ_BUFFER* m_niao);

  // optional .proto.game.redis.MJ_BUFFER m_zhong_niao = 59;
  inline bool has_m_zhong_niao() const;
  inline void clear_m_zhong_niao();
  static const int kMZhongNiaoFieldNumber = 59;
  inline const ::proto::game::redis::MJ_BUFFER& m_zhong_niao() const;
  inline ::proto::game::redis::MJ_BUFFER* mutable_m_zhong_niao();
  inline ::proto::game::redis::MJ_BUFFER* release_m_zhong_niao();
  inline void set_allocated_m_zhong_niao(::proto::game::redis::MJ_BUFFER* m_zhong_niao);

  // optional int32 m_daniaoid = 60;
  inline bool has_m_daniaoid() const;
  inline void clear_m_daniaoid();
  static const int kMDaniaoidFieldNumber = 60;
  inline ::google::protobuf::int32 m_daniaoid() const;
  inline void set_m_daniaoid(::google::protobuf::int32 value);

  // repeated .proto.game.redis.MJ_BUFFER m_peng = 61;
  inline int m_peng_size() const;
  inline void clear_m_peng();
  static const int kMPengFieldNumber = 61;
  inline const ::proto::game::redis::MJ_BUFFER& m_peng(int index) const;
  inline ::proto::game::redis::MJ_BUFFER* mutable_m_peng(int index);
  inline ::proto::game::redis::MJ_BUFFER* add_m_peng();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::MJ_BUFFER >&
      m_peng() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::MJ_BUFFER >*
      mutable_m_peng();

  // optional .proto.game.redis.Fantype_to_FanNum g_ft2fn = 62;
  inline bool has_g_ft2fn() const;
  inline void clear_g_ft2fn();
  static const int kGFt2FnFieldNumber = 62;
  inline const ::proto::game::redis::Fantype_to_FanNum& g_ft2fn() const;
  inline ::proto::game::redis::Fantype_to_FanNum* mutable_g_ft2fn();
  inline ::proto::game::redis::Fantype_to_FanNum* release_g_ft2fn();
  inline void set_allocated_g_ft2fn(::proto::game::redis::Fantype_to_FanNum* g_ft2fn);

  // repeated .proto.game.redis.tagPlayerGPS m_mapplayergps = 63;
  inline int m_mapplayergps_size() const;
  inline void clear_m_mapplayergps();
  static const int kMMapplayergpsFieldNumber = 63;
  inline const ::proto::game::redis::tagPlayerGPS& m_mapplayergps(int index) const;
  inline ::proto::game::redis::tagPlayerGPS* mutable_m_mapplayergps(int index);
  inline ::proto::game::redis::tagPlayerGPS* add_m_mapplayergps();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagPlayerGPS >&
      m_mapplayergps() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagPlayerGPS >*
      mutable_m_mapplayergps();

  // repeated .proto.game.redis.tagPlayers players = 64;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 64;
  inline const ::proto::game::redis::tagPlayers& players(int index) const;
  inline ::proto::game::redis::tagPlayers* mutable_players(int index);
  inline ::proto::game::redis::tagPlayers* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagPlayers >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagPlayers >*
      mutable_players();

  // repeated int32 m_useroperateid = 65;
  inline int m_useroperateid_size() const;
  inline void clear_m_useroperateid();
  static const int kMUseroperateidFieldNumber = 65;
  inline ::google::protobuf::int32 m_useroperateid(int index) const;
  inline void set_m_useroperateid(int index, ::google::protobuf::int32 value);
  inline void add_m_useroperateid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_useroperateid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_useroperateid();

  // optional int32 m_autodisband = 66;
  inline bool has_m_autodisband() const;
  inline void clear_m_autodisband();
  static const int kMAutodisbandFieldNumber = 66;
  inline ::google::protobuf::int32 m_autodisband() const;
  inline void set_m_autodisband(::google::protobuf::int32 value);

  // optional bool m_bisautodisband = 67;
  inline bool has_m_bisautodisband() const;
  inline void clear_m_bisautodisband();
  static const int kMBisautodisbandFieldNumber = 67;
  inline bool m_bisautodisband() const;
  inline void set_m_bisautodisband(bool value);

  // optional int32 m_tablebranchid = 68;
  inline bool has_m_tablebranchid() const;
  inline void clear_m_tablebranchid();
  static const int kMTablebranchidFieldNumber = 68;
  inline ::google::protobuf::int32 m_tablebranchid() const;
  inline void set_m_tablebranchid(::google::protobuf::int32 value);

  // optional int32 m_ntotalcount = 69;
  inline bool has_m_ntotalcount() const;
  inline void clear_m_ntotalcount();
  static const int kMNtotalcountFieldNumber = 69;
  inline ::google::protobuf::int32 m_ntotalcount() const;
  inline void set_m_ntotalcount(::google::protobuf::int32 value);

  // optional int32 m_ncurrentcount = 70;
  inline bool has_m_ncurrentcount() const;
  inline void clear_m_ncurrentcount();
  static const int kMNcurrentcountFieldNumber = 70;
  inline ::google::protobuf::int32 m_ncurrentcount() const;
  inline void set_m_ncurrentcount(::google::protobuf::int32 value);

  // repeated int32 m_userchoosemode = 71;
  inline int m_userchoosemode_size() const;
  inline void clear_m_userchoosemode();
  static const int kMUserchoosemodeFieldNumber = 71;
  inline ::google::protobuf::int32 m_userchoosemode(int index) const;
  inline void set_m_userchoosemode(int index, ::google::protobuf::int32 value);
  inline void add_m_userchoosemode(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_userchoosemode() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_userchoosemode();

  // optional int32 m_voice_room = 72;
  inline bool has_m_voice_room() const;
  inline void clear_m_voice_room();
  static const int kMVoiceRoomFieldNumber = 72;
  inline ::google::protobuf::int32 m_voice_room() const;
  inline void set_m_voice_room(::google::protobuf::int32 value);

  // optional int32 m_start_time = 73;
  inline bool has_m_start_time() const;
  inline void clear_m_start_time();
  static const int kMStartTimeFieldNumber = 73;
  inline ::google::protobuf::int32 m_start_time() const;
  inline void set_m_start_time(::google::protobuf::int32 value);

  // repeated int32 m_vecopcards = 74;
  inline int m_vecopcards_size() const;
  inline void clear_m_vecopcards();
  static const int kMVecopcardsFieldNumber = 74;
  inline ::google::protobuf::int32 m_vecopcards(int index) const;
  inline void set_m_vecopcards(int index, ::google::protobuf::int32 value);
  inline void add_m_vecopcards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_vecopcards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_vecopcards();

  // repeated bool m_preofflinestate = 75;
  inline int m_preofflinestate_size() const;
  inline void clear_m_preofflinestate();
  static const int kMPreofflinestateFieldNumber = 75;
  inline bool m_preofflinestate(int index) const;
  inline void set_m_preofflinestate(int index, bool value);
  inline void add_m_preofflinestate(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      m_preofflinestate() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_m_preofflinestate();

  // optional int32 m_isclubroom = 76;
  inline bool has_m_isclubroom() const;
  inline void clear_m_isclubroom();
  static const int kMIsclubroomFieldNumber = 76;
  inline ::google::protobuf::int32 m_isclubroom() const;
  inline void set_m_isclubroom(::google::protobuf::int32 value);

  // optional string m_public_channel_id = 77;
  inline bool has_m_public_channel_id() const;
  inline void clear_m_public_channel_id();
  static const int kMPublicChannelIdFieldNumber = 77;
  inline const ::std::string& m_public_channel_id() const;
  inline void set_m_public_channel_id(const ::std::string& value);
  inline void set_m_public_channel_id(const char* value);
  inline void set_m_public_channel_id(const char* value, size_t size);
  inline ::std::string* mutable_m_public_channel_id();
  inline ::std::string* release_m_public_channel_id();
  inline void set_allocated_m_public_channel_id(::std::string* m_public_channel_id);

  // repeated string m_group_channel_ids = 78;
  inline int m_group_channel_ids_size() const;
  inline void clear_m_group_channel_ids();
  static const int kMGroupChannelIdsFieldNumber = 78;
  inline const ::std::string& m_group_channel_ids(int index) const;
  inline ::std::string* mutable_m_group_channel_ids(int index);
  inline void set_m_group_channel_ids(int index, const ::std::string& value);
  inline void set_m_group_channel_ids(int index, const char* value);
  inline void set_m_group_channel_ids(int index, const char* value, size_t size);
  inline ::std::string* add_m_group_channel_ids();
  inline void add_m_group_channel_ids(const ::std::string& value);
  inline void add_m_group_channel_ids(const char* value);
  inline void add_m_group_channel_ids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& m_group_channel_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_m_group_channel_ids();

  // repeated int32 m_voice_status = 79;
  inline int m_voice_status_size() const;
  inline void clear_m_voice_status();
  static const int kMVoiceStatusFieldNumber = 79;
  inline ::google::protobuf::int32 m_voice_status(int index) const;
  inline void set_m_voice_status(int index, ::google::protobuf::int32 value);
  inline void add_m_voice_status(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_voice_status() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_voice_status();

  // optional int32 m_maxhandcardsize = 80;
  inline bool has_m_maxhandcardsize() const;
  inline void clear_m_maxhandcardsize();
  static const int kMMaxhandcardsizeFieldNumber = 80;
  inline ::google::protobuf::int32 m_maxhandcardsize() const;
  inline void set_m_maxhandcardsize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.redis.tagRedisInfo)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_vid();
  inline void clear_has_vid();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_base_money();
  inline void clear_has_base_money();
  inline void set_has_roomgold();
  inline void clear_has_roomgold();
  inline void set_has_stand_money();
  inline void clear_has_stand_money();
  inline void set_has_lose_exp();
  inline void clear_has_lose_exp();
  inline void set_has_win_exp();
  inline void clear_has_win_exp();
  inline void set_has_m_basescore();
  inline void clear_has_m_basescore();
  inline void set_has_m_conf();
  inline void clear_has_m_conf();
  inline void set_has_m_room_owner_uid();
  inline void clear_has_m_room_owner_uid();
  inline void set_has_m_room_status();
  inline void clear_has_m_room_status();
  inline void set_has_m_totalrecordinfo();
  inline void clear_has_m_totalrecordinfo();
  inline void set_has_m_game_player();
  inline void clear_has_m_game_player();
  inline void set_has_m_videostr();
  inline void clear_has_m_videostr();
  inline void set_has_m_randomseat();
  inline void clear_has_m_randomseat();
  inline void set_has_m_offlinenoop();
  inline void clear_has_m_offlinenoop();
  inline void set_has_m_bdelaytime();
  inline void clear_has_m_bdelaytime();
  inline void set_has_m_start_shai();
  inline void clear_has_m_start_shai();
  inline void set_has_m_bcurplayers();
  inline void clear_has_m_bcurplayers();
  inline void set_has_m_bgamestate();
  inline void clear_has_m_bgamestate();
  inline void set_has_m_disband_resuser();
  inline void clear_has_m_disband_resuser();
  inline void set_has_m_bgangcalcimme();
  inline void clear_has_m_bgangcalcimme();
  inline void set_has_m_bbanker();
  inline void clear_has_m_bbanker();
  inline void set_has_m_last_banker();
  inline void clear_has_m_last_banker();
  inline void set_has_m_cardpool();
  inline void clear_has_m_cardpool();
  inline void set_has_m_bcurchairid();
  inline void clear_has_m_bcurchairid();
  inline void set_has_m_boutcardchairid();
  inline void clear_has_m_boutcardchairid();
  inline void set_has_m_bcuroutcard();
  inline void clear_has_m_bcuroutcard();
  inline void set_has_m_bcurcard();
  inline void clear_has_m_bcurcard();
  inline void set_has_multiopinfo();
  inline void clear_has_multiopinfo();
  inline void set_has_robaddinfo();
  inline void clear_has_robaddinfo();
  inline void set_has_m_brecordmultiop();
  inline void clear_has_m_brecordmultiop();
  inline void set_has_hufaninfo();
  inline void clear_has_hufaninfo();
  inline void set_has_m_applydisbandchairid();
  inline void clear_has_m_applydisbandchairid();
  inline void set_has_m_bisdisbandtable();
  inline void clear_has_m_bisdisbandtable();
  inline void set_has_m_bdisbandcount();
  inline void clear_has_m_bdisbandcount();
  inline void set_has_m_nplayingtimes();
  inline void clear_has_m_nplayingtimes();
  inline void set_has_m_account_info();
  inline void clear_has_m_account_info();
  inline void set_has_m_bouttimer();
  inline void clear_has_m_bouttimer();
  inline void set_has_m_bdeletetable();
  inline void clear_has_m_bdeletetable();
  inline void set_has_m_bistestsvr();
  inline void clear_has_m_bistestsvr();
  inline void set_has_m_room_config();
  inline void clear_has_m_room_config();
  inline void set_has_m_niao();
  inline void clear_has_m_niao();
  inline void set_has_m_zhong_niao();
  inline void clear_has_m_zhong_niao();
  inline void set_has_m_daniaoid();
  inline void clear_has_m_daniaoid();
  inline void set_has_g_ft2fn();
  inline void clear_has_g_ft2fn();
  inline void set_has_m_autodisband();
  inline void clear_has_m_autodisband();
  inline void set_has_m_bisautodisband();
  inline void clear_has_m_bisautodisband();
  inline void set_has_m_tablebranchid();
  inline void clear_has_m_tablebranchid();
  inline void set_has_m_ntotalcount();
  inline void clear_has_m_ntotalcount();
  inline void set_has_m_ncurrentcount();
  inline void clear_has_m_ncurrentcount();
  inline void set_has_m_voice_room();
  inline void clear_has_m_voice_room();
  inline void set_has_m_start_time();
  inline void clear_has_m_start_time();
  inline void set_has_m_isclubroom();
  inline void clear_has_m_isclubroom();
  inline void set_has_m_public_channel_id();
  inline void clear_has_m_public_channel_id();
  inline void set_has_m_maxhandcardsize();
  inline void clear_has_m_maxhandcardsize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[3];
  mutable int _cached_size_;
  ::google::protobuf::int32 tid_;
  ::google::protobuf::int32 vid_;
  ::google::protobuf::int32 zid_;
  ::google::protobuf::int32 base_money_;
  ::google::protobuf::int32 roomgold_;
  ::google::protobuf::int32 stand_money_;
  ::google::protobuf::int32 lose_exp_;
  ::google::protobuf::int32 win_exp_;
  ::proto::game::redis::MJCustomizedConf* m_conf_;
  ::google::protobuf::int32 m_basescore_;
  ::google::protobuf::int32 m_room_owner_uid_;
  ::proto::game::redis::Table_TotalRecordInfo* m_totalrecordinfo_;
  ::google::protobuf::int32 m_room_status_;
  ::google::protobuf::int32 m_game_player_;
  ::google::protobuf::RepeatedField< bool > m_online_beat_;
  ::std::string* m_videostr_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::redis::Seat > m_seatplayer_;
  ::google::protobuf::int32 m_bdelaytime_;
  ::google::protobuf::int32 m_bcurplayers_;
  ::proto::game::redis::Shai_Set* m_start_shai_;
  ::google::protobuf::int32 m_bgamestate_;
  ::google::protobuf::int32 m_disband_resuser_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::redis::HandCards > m_handcard_;
  ::google::protobuf::RepeatedField< bool > m_isoffline_;
  ::google::protobuf::RepeatedField< bool > m_bistrustee_;
  ::google::protobuf::RepeatedField< bool > m_bautohu_;
  bool m_randomseat_;
  bool m_offlinenoop_;
  bool m_bgangcalcimme_;
  bool m_bisdisbandtable_;
  ::google::protobuf::int32 m_bbanker_;
  ::proto::game::redis::CCardPool* m_cardpool_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_bgetcardcount_;
  ::google::protobuf::int32 m_last_banker_;
  ::google::protobuf::int32 m_bcurchairid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_buseroperate_;
  ::google::protobuf::int32 m_boutcardchairid_;
  ::google::protobuf::int32 m_bcuroutcard_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::redis::MJ_BUFFER > m_stuseroutcard_;
  ::proto::game::redis::MultiOpInfo* multiopinfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_passhuplayer_;
  ::google::protobuf::int32 m_bcurcard_;
  ::google::protobuf::int32 m_applydisbandchairid_;
  ::proto::game::redis::RobAddInfo* robaddinfo_;
  ::proto::game::redis::LOWLEVELOPERATE* m_brecordmultiop_;
  ::proto::game::redis::HuFanInfo* hufaninfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_disbandchoose_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_bovertimestate_;
  ::google::protobuf::int32 m_bdisbandcount_;
  ::google::protobuf::int32 m_nplayingtimes_;
  ::proto::game::redis::CGameAccout* m_account_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_userdissstate_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::redis::ForbidWin > m_louhu_;
  ::proto::game::redis::MJ_BUFFER* m_room_config_;
  ::proto::game::redis::MJ_BUFFER* m_niao_;
  bool m_bouttimer_;
  bool m_bdeletetable_;
  bool m_bistestsvr_;
  bool m_bisautodisband_;
  ::google::protobuf::int32 m_daniaoid_;
  ::proto::game::redis::MJ_BUFFER* m_zhong_niao_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::redis::MJ_BUFFER > m_peng_;
  ::proto::game::redis::Fantype_to_FanNum* g_ft2fn_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagPlayerGPS > m_mapplayergps_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagPlayers > players_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_useroperateid_;
  ::google::protobuf::int32 m_autodisband_;
  ::google::protobuf::int32 m_tablebranchid_;
  ::google::protobuf::int32 m_ntotalcount_;
  ::google::protobuf::int32 m_ncurrentcount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_userchoosemode_;
  ::google::protobuf::int32 m_voice_room_;
  ::google::protobuf::int32 m_start_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_vecopcards_;
  ::google::protobuf::RepeatedField< bool > m_preofflinestate_;
  ::std::string* m_public_channel_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> m_group_channel_ids_;
  ::google::protobuf::int32 m_isclubroom_;
  ::google::protobuf::int32 m_maxhandcardsize_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_voice_status_;
  friend void  protobuf_AddDesc_redisproto_2eproto();
  friend void protobuf_AssignDesc_redisproto_2eproto();
  friend void protobuf_ShutdownFile_redisproto_2eproto();

  void InitAsDefaultInstance();
  static tagRedisInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// tagPlayers

// optional int32 uid = 1;
inline bool tagPlayers::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagPlayers::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagPlayers::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagPlayers::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 tagPlayers::uid() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayers.uid)
  return uid_;
}
inline void tagPlayers::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayers.uid)
}

// optional string tid = 2;
inline bool tagPlayers::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagPlayers::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagPlayers::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagPlayers::clear_tid() {
  if (tid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tid_->clear();
  }
  clear_has_tid();
}
inline const ::std::string& tagPlayers::tid() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayers.tid)
  return *tid_;
}
inline void tagPlayers::set_tid(const ::std::string& value) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tid_ = new ::std::string;
  }
  tid_->assign(value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayers.tid)
}
inline void tagPlayers::set_tid(const char* value) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tid_ = new ::std::string;
  }
  tid_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.redis.tagPlayers.tid)
}
inline void tagPlayers::set_tid(const char* value, size_t size) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tid_ = new ::std::string;
  }
  tid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.redis.tagPlayers.tid)
}
inline ::std::string* tagPlayers::mutable_tid() {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagPlayers.tid)
  return tid_;
}
inline ::std::string* tagPlayers::release_tid() {
  clear_has_tid();
  if (tid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tid_;
    tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void tagPlayers::set_allocated_tid(::std::string* tid) {
  if (tid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tid_;
  }
  if (tid) {
    set_has_tid();
    tid_ = tid;
  } else {
    clear_has_tid();
    tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.tagPlayers.tid)
}

// optional string skey = 3;
inline bool tagPlayers::has_skey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagPlayers::set_has_skey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagPlayers::clear_has_skey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagPlayers::clear_skey() {
  if (skey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skey_->clear();
  }
  clear_has_skey();
}
inline const ::std::string& tagPlayers::skey() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayers.skey)
  return *skey_;
}
inline void tagPlayers::set_skey(const ::std::string& value) {
  set_has_skey();
  if (skey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skey_ = new ::std::string;
  }
  skey_->assign(value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayers.skey)
}
inline void tagPlayers::set_skey(const char* value) {
  set_has_skey();
  if (skey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skey_ = new ::std::string;
  }
  skey_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.redis.tagPlayers.skey)
}
inline void tagPlayers::set_skey(const char* value, size_t size) {
  set_has_skey();
  if (skey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skey_ = new ::std::string;
  }
  skey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.redis.tagPlayers.skey)
}
inline ::std::string* tagPlayers::mutable_skey() {
  set_has_skey();
  if (skey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagPlayers.skey)
  return skey_;
}
inline ::std::string* tagPlayers::release_skey() {
  clear_has_skey();
  if (skey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = skey_;
    skey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void tagPlayers::set_allocated_skey(::std::string* skey) {
  if (skey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skey_;
  }
  if (skey) {
    set_has_skey();
    skey_ = skey;
  } else {
    clear_has_skey();
    skey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.tagPlayers.skey)
}

// optional string name = 4;
inline bool tagPlayers::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tagPlayers::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tagPlayers::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tagPlayers::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& tagPlayers::name() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayers.name)
  return *name_;
}
inline void tagPlayers::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayers.name)
}
inline void tagPlayers::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.redis.tagPlayers.name)
}
inline void tagPlayers::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.redis.tagPlayers.name)
}
inline ::std::string* tagPlayers::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagPlayers.name)
  return name_;
}
inline ::std::string* tagPlayers::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void tagPlayers::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.tagPlayers.name)
}

// optional string avatar = 5;
inline bool tagPlayers::has_avatar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tagPlayers::set_has_avatar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tagPlayers::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tagPlayers::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& tagPlayers::avatar() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayers.avatar)
  return *avatar_;
}
inline void tagPlayers::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayers.avatar)
}
inline void tagPlayers::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.redis.tagPlayers.avatar)
}
inline void tagPlayers::set_avatar(const char* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.redis.tagPlayers.avatar)
}
inline ::std::string* tagPlayers::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avatar_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagPlayers.avatar)
  return avatar_;
}
inline ::std::string* tagPlayers::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void tagPlayers::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.tagPlayers.avatar)
}

// optional int32 seatid = 6;
inline bool tagPlayers::has_seatid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tagPlayers::set_has_seatid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tagPlayers::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tagPlayers::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 tagPlayers::seatid() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayers.seatid)
  return seatid_;
}
inline void tagPlayers::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayers.seatid)
}

// optional int32 sex = 7;
inline bool tagPlayers::has_sex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tagPlayers::set_has_sex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tagPlayers::clear_has_sex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tagPlayers::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 tagPlayers::sex() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayers.sex)
  return sex_;
}
inline void tagPlayers::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayers.sex)
}

// optional int32 exp = 8;
inline bool tagPlayers::has_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tagPlayers::set_has_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tagPlayers::clear_has_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tagPlayers::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 tagPlayers::exp() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayers.exp)
  return exp_;
}
inline void tagPlayers::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayers.exp)
}

// optional int32 rmb = 9;
inline bool tagPlayers::has_rmb() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tagPlayers::set_has_rmb() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tagPlayers::clear_has_rmb() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tagPlayers::clear_rmb() {
  rmb_ = 0;
  clear_has_rmb();
}
inline ::google::protobuf::int32 tagPlayers::rmb() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayers.rmb)
  return rmb_;
}
inline void tagPlayers::set_rmb(::google::protobuf::int32 value) {
  set_has_rmb();
  rmb_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayers.rmb)
}

// optional int32 money = 10;
inline bool tagPlayers::has_money() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tagPlayers::set_has_money() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tagPlayers::clear_has_money() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tagPlayers::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 tagPlayers::money() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayers.money)
  return money_;
}
inline void tagPlayers::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayers.money)
}

// optional int32 coin = 11;
inline bool tagPlayers::has_coin() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void tagPlayers::set_has_coin() {
  _has_bits_[0] |= 0x00000400u;
}
inline void tagPlayers::clear_has_coin() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void tagPlayers::clear_coin() {
  coin_ = 0;
  clear_has_coin();
}
inline ::google::protobuf::int32 tagPlayers::coin() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayers.coin)
  return coin_;
}
inline void tagPlayers::set_coin(::google::protobuf::int32 value) {
  set_has_coin();
  coin_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayers.coin)
}

// optional int32 pcount = 12;
inline bool tagPlayers::has_pcount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void tagPlayers::set_has_pcount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void tagPlayers::clear_has_pcount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void tagPlayers::clear_pcount() {
  pcount_ = 0;
  clear_has_pcount();
}
inline ::google::protobuf::int32 tagPlayers::pcount() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayers.pcount)
  return pcount_;
}
inline void tagPlayers::set_pcount(::google::protobuf::int32 value) {
  set_has_pcount();
  pcount_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayers.pcount)
}

// optional int32 vlevel = 13;
inline bool tagPlayers::has_vlevel() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void tagPlayers::set_has_vlevel() {
  _has_bits_[0] |= 0x00001000u;
}
inline void tagPlayers::clear_has_vlevel() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void tagPlayers::clear_vlevel() {
  vlevel_ = 0;
  clear_has_vlevel();
}
inline ::google::protobuf::int32 tagPlayers::vlevel() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayers.vlevel)
  return vlevel_;
}
inline void tagPlayers::set_vlevel(::google::protobuf::int32 value) {
  set_has_vlevel();
  vlevel_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayers.vlevel)
}

// optional int32 status = 14;
inline bool tagPlayers::has_status() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void tagPlayers::set_has_status() {
  _has_bits_[0] |= 0x00002000u;
}
inline void tagPlayers::clear_has_status() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void tagPlayers::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 tagPlayers::status() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayers.status)
  return status_;
}
inline void tagPlayers::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayers.status)
}

// optional int32 logout_type = 15;
inline bool tagPlayers::has_logout_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void tagPlayers::set_has_logout_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void tagPlayers::clear_has_logout_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void tagPlayers::clear_logout_type() {
  logout_type_ = 0;
  clear_has_logout_type();
}
inline ::google::protobuf::int32 tagPlayers::logout_type() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayers.logout_type)
  return logout_type_;
}
inline void tagPlayers::set_logout_type(::google::protobuf::int32 value) {
  set_has_logout_type();
  logout_type_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayers.logout_type)
}

// optional int32 down_tag = 16;
inline bool tagPlayers::has_down_tag() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void tagPlayers::set_has_down_tag() {
  _has_bits_[0] |= 0x00008000u;
}
inline void tagPlayers::clear_has_down_tag() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void tagPlayers::clear_down_tag() {
  down_tag_ = 0;
  clear_has_down_tag();
}
inline ::google::protobuf::int32 tagPlayers::down_tag() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayers.down_tag)
  return down_tag_;
}
inline void tagPlayers::set_down_tag(::google::protobuf::int32 value) {
  set_has_down_tag();
  down_tag_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayers.down_tag)
}

// optional int32 usertype = 17;
inline bool tagPlayers::has_usertype() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void tagPlayers::set_has_usertype() {
  _has_bits_[0] |= 0x00010000u;
}
inline void tagPlayers::clear_has_usertype() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void tagPlayers::clear_usertype() {
  usertype_ = 0;
  clear_has_usertype();
}
inline ::google::protobuf::int32 tagPlayers::usertype() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayers.usertype)
  return usertype_;
}
inline void tagPlayers::set_usertype(::google::protobuf::int32 value) {
  set_has_usertype();
  usertype_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayers.usertype)
}

// optional int32 disbandcount = 18;
inline bool tagPlayers::has_disbandcount() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void tagPlayers::set_has_disbandcount() {
  _has_bits_[0] |= 0x00020000u;
}
inline void tagPlayers::clear_has_disbandcount() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void tagPlayers::clear_disbandcount() {
  disbandcount_ = 0;
  clear_has_disbandcount();
}
inline ::google::protobuf::int32 tagPlayers::disbandcount() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayers.disbandcount)
  return disbandcount_;
}
inline void tagPlayers::set_disbandcount(::google::protobuf::int32 value) {
  set_has_disbandcount();
  disbandcount_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayers.disbandcount)
}

// -------------------------------------------------------------------

// Seat

// optional int32 state = 1;
inline bool Seat::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Seat::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Seat::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Seat::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 Seat::state() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Seat.state)
  return state_;
}
inline void Seat::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.Seat.state)
}

// optional int32 seatid = 2;
inline bool Seat::has_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Seat::set_has_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Seat::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Seat::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 Seat::seatid() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Seat.seatid)
  return seatid_;
}
inline void Seat::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.Seat.seatid)
}

// optional int32 action = 3;
inline bool Seat::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Seat::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Seat::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Seat::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 Seat::action() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Seat.action)
  return action_;
}
inline void Seat::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.Seat.action)
}

// optional int32 uid = 4;
inline bool Seat::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Seat::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Seat::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Seat::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 Seat::uid() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Seat.uid)
  return uid_;
}
inline void Seat::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.Seat.uid)
}

// -------------------------------------------------------------------

// MJConfCommon

// optional bool m_bsupportchi = 1;
inline bool MJConfCommon::has_m_bsupportchi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MJConfCommon::set_has_m_bsupportchi() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MJConfCommon::clear_has_m_bsupportchi() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MJConfCommon::clear_m_bsupportchi() {
  m_bsupportchi_ = false;
  clear_has_m_bsupportchi();
}
inline bool MJConfCommon::m_bsupportchi() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfCommon.m_bsupportchi)
  return m_bsupportchi_;
}
inline void MJConfCommon::set_m_bsupportchi(bool value) {
  set_has_m_bsupportchi();
  m_bsupportchi_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfCommon.m_bsupportchi)
}

// optional bool m_bsupportwind = 2;
inline bool MJConfCommon::has_m_bsupportwind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MJConfCommon::set_has_m_bsupportwind() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MJConfCommon::clear_has_m_bsupportwind() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MJConfCommon::clear_m_bsupportwind() {
  m_bsupportwind_ = false;
  clear_has_m_bsupportwind();
}
inline bool MJConfCommon::m_bsupportwind() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfCommon.m_bsupportwind)
  return m_bsupportwind_;
}
inline void MJConfCommon::set_m_bsupportwind(bool value) {
  set_has_m_bsupportwind();
  m_bsupportwind_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfCommon.m_bsupportwind)
}

// optional bool m_bsupportting = 3;
inline bool MJConfCommon::has_m_bsupportting() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MJConfCommon::set_has_m_bsupportting() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MJConfCommon::clear_has_m_bsupportting() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MJConfCommon::clear_m_bsupportting() {
  m_bsupportting_ = false;
  clear_has_m_bsupportting();
}
inline bool MJConfCommon::m_bsupportting() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfCommon.m_bsupportting)
  return m_bsupportting_;
}
inline void MJConfCommon::set_m_bsupportting(bool value) {
  set_has_m_bsupportting();
  m_bsupportting_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfCommon.m_bsupportting)
}

// optional bool m_bzimohu = 4;
inline bool MJConfCommon::has_m_bzimohu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MJConfCommon::set_has_m_bzimohu() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MJConfCommon::clear_has_m_bzimohu() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MJConfCommon::clear_m_bzimohu() {
  m_bzimohu_ = false;
  clear_has_m_bzimohu();
}
inline bool MJConfCommon::m_bzimohu() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfCommon.m_bzimohu)
  return m_bzimohu_;
}
inline void MJConfCommon::set_m_bzimohu(bool value) {
  set_has_m_bzimohu();
  m_bzimohu_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfCommon.m_bzimohu)
}

// optional bool m_byipaoduoxiang = 5;
inline bool MJConfCommon::has_m_byipaoduoxiang() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MJConfCommon::set_has_m_byipaoduoxiang() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MJConfCommon::clear_has_m_byipaoduoxiang() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MJConfCommon::clear_m_byipaoduoxiang() {
  m_byipaoduoxiang_ = false;
  clear_has_m_byipaoduoxiang();
}
inline bool MJConfCommon::m_byipaoduoxiang() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfCommon.m_byipaoduoxiang)
  return m_byipaoduoxiang_;
}
inline void MJConfCommon::set_m_byipaoduoxiang(bool value) {
  set_has_m_byipaoduoxiang();
  m_byipaoduoxiang_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfCommon.m_byipaoduoxiang)
}

// optional bool m_bqiangganghu = 6;
inline bool MJConfCommon::has_m_bqiangganghu() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MJConfCommon::set_has_m_bqiangganghu() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MJConfCommon::clear_has_m_bqiangganghu() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MJConfCommon::clear_m_bqiangganghu() {
  m_bqiangganghu_ = false;
  clear_has_m_bqiangganghu();
}
inline bool MJConfCommon::m_bqiangganghu() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfCommon.m_bqiangganghu)
  return m_bqiangganghu_;
}
inline void MJConfCommon::set_m_bqiangganghu(bool value) {
  set_has_m_bqiangganghu();
  m_bqiangganghu_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfCommon.m_bqiangganghu)
}

// optional bool m_bqiangzhigang = 7;
inline bool MJConfCommon::has_m_bqiangzhigang() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MJConfCommon::set_has_m_bqiangzhigang() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MJConfCommon::clear_has_m_bqiangzhigang() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MJConfCommon::clear_m_bqiangzhigang() {
  m_bqiangzhigang_ = false;
  clear_has_m_bqiangzhigang();
}
inline bool MJConfCommon::m_bqiangzhigang() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfCommon.m_bqiangzhigang)
  return m_bqiangzhigang_;
}
inline void MJConfCommon::set_m_bqiangzhigang(bool value) {
  set_has_m_bqiangzhigang();
  m_bqiangzhigang_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfCommon.m_bqiangzhigang)
}

// optional bool m_bqiangangang = 8;
inline bool MJConfCommon::has_m_bqiangangang() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MJConfCommon::set_has_m_bqiangangang() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MJConfCommon::clear_has_m_bqiangangang() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MJConfCommon::clear_m_bqiangangang() {
  m_bqiangangang_ = false;
  clear_has_m_bqiangangang();
}
inline bool MJConfCommon::m_bqiangangang() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfCommon.m_bqiangangang)
  return m_bqiangangang_;
}
inline void MJConfCommon::set_m_bqiangangang(bool value) {
  set_has_m_bqiangangang();
  m_bqiangangang_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfCommon.m_bqiangangang)
}

// optional bool m_bqangshangpao = 9;
inline bool MJConfCommon::has_m_bqangshangpao() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MJConfCommon::set_has_m_bqangshangpao() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MJConfCommon::clear_has_m_bqangshangpao() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MJConfCommon::clear_m_bqangshangpao() {
  m_bqangshangpao_ = false;
  clear_has_m_bqangshangpao();
}
inline bool MJConfCommon::m_bqangshangpao() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfCommon.m_bqangshangpao)
  return m_bqangshangpao_;
}
inline void MJConfCommon::set_m_bqangshangpao(bool value) {
  set_has_m_bqangshangpao();
  m_bqangshangpao_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfCommon.m_bqangshangpao)
}

// optional bool m_bhuanggang = 10;
inline bool MJConfCommon::has_m_bhuanggang() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MJConfCommon::set_has_m_bhuanggang() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MJConfCommon::clear_has_m_bhuanggang() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MJConfCommon::clear_m_bhuanggang() {
  m_bhuanggang_ = false;
  clear_has_m_bhuanggang();
}
inline bool MJConfCommon::m_bhuanggang() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfCommon.m_bhuanggang)
  return m_bhuanggang_;
}
inline void MJConfCommon::set_m_bhuanggang(bool value) {
  set_has_m_bhuanggang();
  m_bhuanggang_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfCommon.m_bhuanggang)
}

// optional bool m_bzhuangxian = 11;
inline bool MJConfCommon::has_m_bzhuangxian() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MJConfCommon::set_has_m_bzhuangxian() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MJConfCommon::clear_has_m_bzhuangxian() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MJConfCommon::clear_m_bzhuangxian() {
  m_bzhuangxian_ = false;
  clear_has_m_bzhuangxian();
}
inline bool MJConfCommon::m_bzhuangxian() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfCommon.m_bzhuangxian)
  return m_bzhuangxian_;
}
inline void MJConfCommon::set_m_bzhuangxian(bool value) {
  set_has_m_bzhuangxian();
  m_bzhuangxian_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfCommon.m_bzhuangxian)
}

// optional bool m_bforcehuqiangganghu = 12;
inline bool MJConfCommon::has_m_bforcehuqiangganghu() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MJConfCommon::set_has_m_bforcehuqiangganghu() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MJConfCommon::clear_has_m_bforcehuqiangganghu() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MJConfCommon::clear_m_bforcehuqiangganghu() {
  m_bforcehuqiangganghu_ = false;
  clear_has_m_bforcehuqiangganghu();
}
inline bool MJConfCommon::m_bforcehuqiangganghu() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfCommon.m_bforcehuqiangganghu)
  return m_bforcehuqiangganghu_;
}
inline void MJConfCommon::set_m_bforcehuqiangganghu(bool value) {
  set_has_m_bforcehuqiangganghu();
  m_bforcehuqiangganghu_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfCommon.m_bforcehuqiangganghu)
}

// optional bool m_bfourcehumutilhu = 13;
inline bool MJConfCommon::has_m_bfourcehumutilhu() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MJConfCommon::set_has_m_bfourcehumutilhu() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MJConfCommon::clear_has_m_bfourcehumutilhu() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MJConfCommon::clear_m_bfourcehumutilhu() {
  m_bfourcehumutilhu_ = false;
  clear_has_m_bfourcehumutilhu();
}
inline bool MJConfCommon::m_bfourcehumutilhu() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfCommon.m_bfourcehumutilhu)
  return m_bfourcehumutilhu_;
}
inline void MJConfCommon::set_m_bfourcehumutilhu(bool value) {
  set_has_m_bfourcehumutilhu();
  m_bfourcehumutilhu_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfCommon.m_bfourcehumutilhu)
}

// optional int32 m_angangpoint = 14;
inline bool MJConfCommon::has_m_angangpoint() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MJConfCommon::set_has_m_angangpoint() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MJConfCommon::clear_has_m_angangpoint() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MJConfCommon::clear_m_angangpoint() {
  m_angangpoint_ = 0;
  clear_has_m_angangpoint();
}
inline ::google::protobuf::int32 MJConfCommon::m_angangpoint() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfCommon.m_angangpoint)
  return m_angangpoint_;
}
inline void MJConfCommon::set_m_angangpoint(::google::protobuf::int32 value) {
  set_has_m_angangpoint();
  m_angangpoint_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfCommon.m_angangpoint)
}

// optional int32 m_wangangpoint = 15;
inline bool MJConfCommon::has_m_wangangpoint() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MJConfCommon::set_has_m_wangangpoint() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MJConfCommon::clear_has_m_wangangpoint() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MJConfCommon::clear_m_wangangpoint() {
  m_wangangpoint_ = 0;
  clear_has_m_wangangpoint();
}
inline ::google::protobuf::int32 MJConfCommon::m_wangangpoint() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfCommon.m_wangangpoint)
  return m_wangangpoint_;
}
inline void MJConfCommon::set_m_wangangpoint(::google::protobuf::int32 value) {
  set_has_m_wangangpoint();
  m_wangangpoint_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfCommon.m_wangangpoint)
}

// optional int32 m_zhigangpoint = 16;
inline bool MJConfCommon::has_m_zhigangpoint() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MJConfCommon::set_has_m_zhigangpoint() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MJConfCommon::clear_has_m_zhigangpoint() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MJConfCommon::clear_m_zhigangpoint() {
  m_zhigangpoint_ = 0;
  clear_has_m_zhigangpoint();
}
inline ::google::protobuf::int32 MJConfCommon::m_zhigangpoint() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfCommon.m_zhigangpoint)
  return m_zhigangpoint_;
}
inline void MJConfCommon::set_m_zhigangpoint(::google::protobuf::int32 value) {
  set_has_m_zhigangpoint();
  m_zhigangpoint_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfCommon.m_zhigangpoint)
}

// -------------------------------------------------------------------

// MJConfPiao

// optional bool m_bsupportpiao = 1;
inline bool MJConfPiao::has_m_bsupportpiao() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MJConfPiao::set_has_m_bsupportpiao() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MJConfPiao::clear_has_m_bsupportpiao() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MJConfPiao::clear_m_bsupportpiao() {
  m_bsupportpiao_ = false;
  clear_has_m_bsupportpiao();
}
inline bool MJConfPiao::m_bsupportpiao() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfPiao.m_bsupportpiao)
  return m_bsupportpiao_;
}
inline void MJConfPiao::set_m_bsupportpiao(bool value) {
  set_has_m_bsupportpiao();
  m_bsupportpiao_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfPiao.m_bsupportpiao)
}

// repeated int32 m_piao = 2;
inline int MJConfPiao::m_piao_size() const {
  return m_piao_.size();
}
inline void MJConfPiao::clear_m_piao() {
  m_piao_.Clear();
}
inline ::google::protobuf::int32 MJConfPiao::m_piao(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfPiao.m_piao)
  return m_piao_.Get(index);
}
inline void MJConfPiao::set_m_piao(int index, ::google::protobuf::int32 value) {
  m_piao_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfPiao.m_piao)
}
inline void MJConfPiao::add_m_piao(::google::protobuf::int32 value) {
  m_piao_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.MJConfPiao.m_piao)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MJConfPiao::m_piao() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.MJConfPiao.m_piao)
  return m_piao_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MJConfPiao::mutable_m_piao() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.MJConfPiao.m_piao)
  return &m_piao_;
}

// -------------------------------------------------------------------

// MJConfBuyHorse

// optional bool m_bsupportbuyhorse = 1;
inline bool MJConfBuyHorse::has_m_bsupportbuyhorse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MJConfBuyHorse::set_has_m_bsupportbuyhorse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MJConfBuyHorse::clear_has_m_bsupportbuyhorse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MJConfBuyHorse::clear_m_bsupportbuyhorse() {
  m_bsupportbuyhorse_ = false;
  clear_has_m_bsupportbuyhorse();
}
inline bool MJConfBuyHorse::m_bsupportbuyhorse() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfBuyHorse.m_bsupportbuyhorse)
  return m_bsupportbuyhorse_;
}
inline void MJConfBuyHorse::set_m_bsupportbuyhorse(bool value) {
  set_has_m_bsupportbuyhorse();
  m_bsupportbuyhorse_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfBuyHorse.m_bsupportbuyhorse)
}

// optional int32 m_horsenum = 2;
inline bool MJConfBuyHorse::has_m_horsenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MJConfBuyHorse::set_has_m_horsenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MJConfBuyHorse::clear_has_m_horsenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MJConfBuyHorse::clear_m_horsenum() {
  m_horsenum_ = 0;
  clear_has_m_horsenum();
}
inline ::google::protobuf::int32 MJConfBuyHorse::m_horsenum() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfBuyHorse.m_horsenum)
  return m_horsenum_;
}
inline void MJConfBuyHorse::set_m_horsenum(::google::protobuf::int32 value) {
  set_has_m_horsenum();
  m_horsenum_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfBuyHorse.m_horsenum)
}

// optional int32 m_horsemaxnum = 3;
inline bool MJConfBuyHorse::has_m_horsemaxnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MJConfBuyHorse::set_has_m_horsemaxnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MJConfBuyHorse::clear_has_m_horsemaxnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MJConfBuyHorse::clear_m_horsemaxnum() {
  m_horsemaxnum_ = 0;
  clear_has_m_horsemaxnum();
}
inline ::google::protobuf::int32 MJConfBuyHorse::m_horsemaxnum() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfBuyHorse.m_horsemaxnum)
  return m_horsemaxnum_;
}
inline void MJConfBuyHorse::set_m_horsemaxnum(::google::protobuf::int32 value) {
  set_has_m_horsemaxnum();
  m_horsemaxnum_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfBuyHorse.m_horsemaxnum)
}

// optional int32 m_nbuyhorseincnum = 4;
inline bool MJConfBuyHorse::has_m_nbuyhorseincnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MJConfBuyHorse::set_has_m_nbuyhorseincnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MJConfBuyHorse::clear_has_m_nbuyhorseincnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MJConfBuyHorse::clear_m_nbuyhorseincnum() {
  m_nbuyhorseincnum_ = 0;
  clear_has_m_nbuyhorseincnum();
}
inline ::google::protobuf::int32 MJConfBuyHorse::m_nbuyhorseincnum() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfBuyHorse.m_nbuyhorseincnum)
  return m_nbuyhorseincnum_;
}
inline void MJConfBuyHorse::set_m_nbuyhorseincnum(::google::protobuf::int32 value) {
  set_has_m_nbuyhorseincnum();
  m_nbuyhorseincnum_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfBuyHorse.m_nbuyhorseincnum)
}

// optional bool m_buyhorsemojijiangji = 5;
inline bool MJConfBuyHorse::has_m_buyhorsemojijiangji() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MJConfBuyHorse::set_has_m_buyhorsemojijiangji() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MJConfBuyHorse::clear_has_m_buyhorsemojijiangji() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MJConfBuyHorse::clear_m_buyhorsemojijiangji() {
  m_buyhorsemojijiangji_ = false;
  clear_has_m_buyhorsemojijiangji();
}
inline bool MJConfBuyHorse::m_buyhorsemojijiangji() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfBuyHorse.m_buyhorsemojijiangji)
  return m_buyhorsemojijiangji_;
}
inline void MJConfBuyHorse::set_m_buyhorsemojijiangji(bool value) {
  set_has_m_buyhorsemojijiangji();
  m_buyhorsemojijiangji_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfBuyHorse.m_buyhorsemojijiangji)
}

// -------------------------------------------------------------------

// MJConfZhuaniao

// optional bool m_bsupportzhuaniao = 1;
inline bool MJConfZhuaniao::has_m_bsupportzhuaniao() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MJConfZhuaniao::set_has_m_bsupportzhuaniao() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MJConfZhuaniao::clear_has_m_bsupportzhuaniao() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MJConfZhuaniao::clear_m_bsupportzhuaniao() {
  m_bsupportzhuaniao_ = false;
  clear_has_m_bsupportzhuaniao();
}
inline bool MJConfZhuaniao::m_bsupportzhuaniao() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfZhuaniao.m_bsupportzhuaniao)
  return m_bsupportzhuaniao_;
}
inline void MJConfZhuaniao::set_m_bsupportzhuaniao(bool value) {
  set_has_m_bsupportzhuaniao();
  m_bsupportzhuaniao_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfZhuaniao.m_bsupportzhuaniao)
}

// optional bool m_bcalcallniao = 2;
inline bool MJConfZhuaniao::has_m_bcalcallniao() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MJConfZhuaniao::set_has_m_bcalcallniao() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MJConfZhuaniao::clear_has_m_bcalcallniao() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MJConfZhuaniao::clear_m_bcalcallniao() {
  m_bcalcallniao_ = false;
  clear_has_m_bcalcallniao();
}
inline bool MJConfZhuaniao::m_bcalcallniao() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfZhuaniao.m_bcalcallniao)
  return m_bcalcallniao_;
}
inline void MJConfZhuaniao::set_m_bcalcallniao(bool value) {
  set_has_m_bcalcallniao();
  m_bcalcallniao_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfZhuaniao.m_bcalcallniao)
}

// optional int32 m_zhuaniaonum = 3;
inline bool MJConfZhuaniao::has_m_zhuaniaonum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MJConfZhuaniao::set_has_m_zhuaniaonum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MJConfZhuaniao::clear_has_m_zhuaniaonum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MJConfZhuaniao::clear_m_zhuaniaonum() {
  m_zhuaniaonum_ = 0;
  clear_has_m_zhuaniaonum();
}
inline ::google::protobuf::int32 MJConfZhuaniao::m_zhuaniaonum() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfZhuaniao.m_zhuaniaonum)
  return m_zhuaniaonum_;
}
inline void MJConfZhuaniao::set_m_zhuaniaonum(::google::protobuf::int32 value) {
  set_has_m_zhuaniaonum();
  m_zhuaniaonum_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfZhuaniao.m_zhuaniaonum)
}

// optional bool m_bjinniao = 4;
inline bool MJConfZhuaniao::has_m_bjinniao() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MJConfZhuaniao::set_has_m_bjinniao() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MJConfZhuaniao::clear_has_m_bjinniao() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MJConfZhuaniao::clear_m_bjinniao() {
  m_bjinniao_ = false;
  clear_has_m_bjinniao();
}
inline bool MJConfZhuaniao::m_bjinniao() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfZhuaniao.m_bjinniao)
  return m_bjinniao_;
}
inline void MJConfZhuaniao::set_m_bjinniao(bool value) {
  set_has_m_bjinniao();
  m_bjinniao_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfZhuaniao.m_bjinniao)
}

// optional bool m_bmojijiangji = 5;
inline bool MJConfZhuaniao::has_m_bmojijiangji() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MJConfZhuaniao::set_has_m_bmojijiangji() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MJConfZhuaniao::clear_has_m_bmojijiangji() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MJConfZhuaniao::clear_m_bmojijiangji() {
  m_bmojijiangji_ = false;
  clear_has_m_bmojijiangji();
}
inline bool MJConfZhuaniao::m_bmojijiangji() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfZhuaniao.m_bmojijiangji)
  return m_bmojijiangji_;
}
inline void MJConfZhuaniao::set_m_bmojijiangji(bool value) {
  set_has_m_bmojijiangji();
  m_bmojijiangji_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfZhuaniao.m_bmojijiangji)
}

// -------------------------------------------------------------------

// MJHuType

// optional bool m_bhu7dui = 1;
inline bool MJHuType::has_m_bhu7dui() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MJHuType::set_has_m_bhu7dui() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MJHuType::clear_has_m_bhu7dui() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MJHuType::clear_m_bhu7dui() {
  m_bhu7dui_ = false;
  clear_has_m_bhu7dui();
}
inline bool MJHuType::m_bhu7dui() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJHuType.m_bhu7dui)
  return m_bhu7dui_;
}
inline void MJHuType::set_m_bhu7dui(bool value) {
  set_has_m_bhu7dui();
  m_bhu7dui_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJHuType.m_bhu7dui)
}

// optional bool m_bhu13yao = 2;
inline bool MJHuType::has_m_bhu13yao() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MJHuType::set_has_m_bhu13yao() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MJHuType::clear_has_m_bhu13yao() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MJHuType::clear_m_bhu13yao() {
  m_bhu13yao_ = false;
  clear_has_m_bhu13yao();
}
inline bool MJHuType::m_bhu13yao() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJHuType.m_bhu13yao)
  return m_bhu13yao_;
}
inline void MJHuType::set_m_bhu13yao(bool value) {
  set_has_m_bhu13yao();
  m_bhu13yao_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJHuType.m_bhu13yao)
}

// optional bool m_bnosupport_quanqiuren = 3;
inline bool MJHuType::has_m_bnosupport_quanqiuren() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MJHuType::set_has_m_bnosupport_quanqiuren() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MJHuType::clear_has_m_bnosupport_quanqiuren() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MJHuType::clear_m_bnosupport_quanqiuren() {
  m_bnosupport_quanqiuren_ = false;
  clear_has_m_bnosupport_quanqiuren();
}
inline bool MJHuType::m_bnosupport_quanqiuren() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJHuType.m_bnosupport_quanqiuren)
  return m_bnosupport_quanqiuren_;
}
inline void MJHuType::set_m_bnosupport_quanqiuren(bool value) {
  set_has_m_bnosupport_quanqiuren();
  m_bnosupport_quanqiuren_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJHuType.m_bnosupport_quanqiuren)
}

// -------------------------------------------------------------------

// MJConfOther

// optional bool m_bsupportchangemode = 1;
inline bool MJConfOther::has_m_bsupportchangemode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MJConfOther::set_has_m_bsupportchangemode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MJConfOther::clear_has_m_bsupportchangemode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MJConfOther::clear_m_bsupportchangemode() {
  m_bsupportchangemode_ = false;
  clear_has_m_bsupportchangemode();
}
inline bool MJConfOther::m_bsupportchangemode() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfOther.m_bsupportchangemode)
  return m_bsupportchangemode_;
}
inline void MJConfOther::set_m_bsupportchangemode(bool value) {
  set_has_m_bsupportchangemode();
  m_bsupportchangemode_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfOther.m_bsupportchangemode)
}

// optional bool m_bofflinedelayop = 2;
inline bool MJConfOther::has_m_bofflinedelayop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MJConfOther::set_has_m_bofflinedelayop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MJConfOther::clear_has_m_bofflinedelayop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MJConfOther::clear_m_bofflinedelayop() {
  m_bofflinedelayop_ = false;
  clear_has_m_bofflinedelayop();
}
inline bool MJConfOther::m_bofflinedelayop() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfOther.m_bofflinedelayop)
  return m_bofflinedelayop_;
}
inline void MJConfOther::set_m_bofflinedelayop(bool value) {
  set_has_m_bofflinedelayop();
  m_bofflinedelayop_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfOther.m_bofflinedelayop)
}

// optional bool m_bmulitfirstopisover = 3;
inline bool MJConfOther::has_m_bmulitfirstopisover() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MJConfOther::set_has_m_bmulitfirstopisover() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MJConfOther::clear_has_m_bmulitfirstopisover() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MJConfOther::clear_m_bmulitfirstopisover() {
  m_bmulitfirstopisover_ = false;
  clear_has_m_bmulitfirstopisover();
}
inline bool MJConfOther::m_bmulitfirstopisover() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfOther.m_bmulitfirstopisover)
  return m_bmulitfirstopisover_;
}
inline void MJConfOther::set_m_bmulitfirstopisover(bool value) {
  set_has_m_bmulitfirstopisover();
  m_bmulitfirstopisover_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfOther.m_bmulitfirstopisover)
}

// optional bool m_bfastmode = 4;
inline bool MJConfOther::has_m_bfastmode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MJConfOther::set_has_m_bfastmode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MJConfOther::clear_has_m_bfastmode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MJConfOther::clear_m_bfastmode() {
  m_bfastmode_ = false;
  clear_has_m_bfastmode();
}
inline bool MJConfOther::m_bfastmode() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfOther.m_bfastmode)
  return m_bfastmode_;
}
inline void MJConfOther::set_m_bfastmode(bool value) {
  set_has_m_bfastmode();
  m_bfastmode_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfOther.m_bfastmode)
}

// optional bool m_bautodisband = 5;
inline bool MJConfOther::has_m_bautodisband() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MJConfOther::set_has_m_bautodisband() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MJConfOther::clear_has_m_bautodisband() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MJConfOther::clear_m_bautodisband() {
  m_bautodisband_ = false;
  clear_has_m_bautodisband();
}
inline bool MJConfOther::m_bautodisband() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfOther.m_bautodisband)
  return m_bautodisband_;
}
inline void MJConfOther::set_m_bautodisband(bool value) {
  set_has_m_bautodisband();
  m_bautodisband_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfOther.m_bautodisband)
}

// optional bool m_bbankerfirst14 = 6;
inline bool MJConfOther::has_m_bbankerfirst14() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MJConfOther::set_has_m_bbankerfirst14() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MJConfOther::clear_has_m_bbankerfirst14() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MJConfOther::clear_m_bbankerfirst14() {
  m_bbankerfirst14_ = false;
  clear_has_m_bbankerfirst14();
}
inline bool MJConfOther::m_bbankerfirst14() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfOther.m_bbankerfirst14)
  return m_bbankerfirst14_;
}
inline void MJConfOther::set_m_bbankerfirst14(bool value) {
  set_has_m_bbankerfirst14();
  m_bbankerfirst14_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfOther.m_bbankerfirst14)
}

// optional bool m_bangangnoshow = 7;
inline bool MJConfOther::has_m_bangangnoshow() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MJConfOther::set_has_m_bangangnoshow() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MJConfOther::clear_has_m_bangangnoshow() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MJConfOther::clear_m_bangangnoshow() {
  m_bangangnoshow_ = false;
  clear_has_m_bangangnoshow();
}
inline bool MJConfOther::m_bangangnoshow() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfOther.m_bangangnoshow)
  return m_bangangnoshow_;
}
inline void MJConfOther::set_m_bangangnoshow(bool value) {
  set_has_m_bangangnoshow();
  m_bangangnoshow_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfOther.m_bangangnoshow)
}

// optional bool m_bshowgangscore = 8;
inline bool MJConfOther::has_m_bshowgangscore() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MJConfOther::set_has_m_bshowgangscore() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MJConfOther::clear_has_m_bshowgangscore() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MJConfOther::clear_m_bshowgangscore() {
  m_bshowgangscore_ = false;
  clear_has_m_bshowgangscore();
}
inline bool MJConfOther::m_bshowgangscore() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJConfOther.m_bshowgangscore)
  return m_bshowgangscore_;
}
inline void MJConfOther::set_m_bshowgangscore(bool value) {
  set_has_m_bshowgangscore();
  m_bshowgangscore_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MJConfOther.m_bshowgangscore)
}

// -------------------------------------------------------------------

// MJCustomizedConf

// optional .proto.game.redis.MJConfCommon mjconfcommon = 1;
inline bool MJCustomizedConf::has_mjconfcommon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MJCustomizedConf::set_has_mjconfcommon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MJCustomizedConf::clear_has_mjconfcommon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MJCustomizedConf::clear_mjconfcommon() {
  if (mjconfcommon_ != NULL) mjconfcommon_->::proto::game::redis::MJConfCommon::Clear();
  clear_has_mjconfcommon();
}
inline const ::proto::game::redis::MJConfCommon& MJCustomizedConf::mjconfcommon() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJCustomizedConf.mjconfcommon)
  return mjconfcommon_ != NULL ? *mjconfcommon_ : *default_instance_->mjconfcommon_;
}
inline ::proto::game::redis::MJConfCommon* MJCustomizedConf::mutable_mjconfcommon() {
  set_has_mjconfcommon();
  if (mjconfcommon_ == NULL) mjconfcommon_ = new ::proto::game::redis::MJConfCommon;
  // @@protoc_insertion_point(field_mutable:proto.game.redis.MJCustomizedConf.mjconfcommon)
  return mjconfcommon_;
}
inline ::proto::game::redis::MJConfCommon* MJCustomizedConf::release_mjconfcommon() {
  clear_has_mjconfcommon();
  ::proto::game::redis::MJConfCommon* temp = mjconfcommon_;
  mjconfcommon_ = NULL;
  return temp;
}
inline void MJCustomizedConf::set_allocated_mjconfcommon(::proto::game::redis::MJConfCommon* mjconfcommon) {
  delete mjconfcommon_;
  mjconfcommon_ = mjconfcommon;
  if (mjconfcommon) {
    set_has_mjconfcommon();
  } else {
    clear_has_mjconfcommon();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.MJCustomizedConf.mjconfcommon)
}

// optional .proto.game.redis.MJConfPiao mjconfpiao = 2;
inline bool MJCustomizedConf::has_mjconfpiao() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MJCustomizedConf::set_has_mjconfpiao() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MJCustomizedConf::clear_has_mjconfpiao() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MJCustomizedConf::clear_mjconfpiao() {
  if (mjconfpiao_ != NULL) mjconfpiao_->::proto::game::redis::MJConfPiao::Clear();
  clear_has_mjconfpiao();
}
inline const ::proto::game::redis::MJConfPiao& MJCustomizedConf::mjconfpiao() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJCustomizedConf.mjconfpiao)
  return mjconfpiao_ != NULL ? *mjconfpiao_ : *default_instance_->mjconfpiao_;
}
inline ::proto::game::redis::MJConfPiao* MJCustomizedConf::mutable_mjconfpiao() {
  set_has_mjconfpiao();
  if (mjconfpiao_ == NULL) mjconfpiao_ = new ::proto::game::redis::MJConfPiao;
  // @@protoc_insertion_point(field_mutable:proto.game.redis.MJCustomizedConf.mjconfpiao)
  return mjconfpiao_;
}
inline ::proto::game::redis::MJConfPiao* MJCustomizedConf::release_mjconfpiao() {
  clear_has_mjconfpiao();
  ::proto::game::redis::MJConfPiao* temp = mjconfpiao_;
  mjconfpiao_ = NULL;
  return temp;
}
inline void MJCustomizedConf::set_allocated_mjconfpiao(::proto::game::redis::MJConfPiao* mjconfpiao) {
  delete mjconfpiao_;
  mjconfpiao_ = mjconfpiao;
  if (mjconfpiao) {
    set_has_mjconfpiao();
  } else {
    clear_has_mjconfpiao();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.MJCustomizedConf.mjconfpiao)
}

// optional .proto.game.redis.MJConfBuyHorse mjconfbuyhorse = 3;
inline bool MJCustomizedConf::has_mjconfbuyhorse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MJCustomizedConf::set_has_mjconfbuyhorse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MJCustomizedConf::clear_has_mjconfbuyhorse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MJCustomizedConf::clear_mjconfbuyhorse() {
  if (mjconfbuyhorse_ != NULL) mjconfbuyhorse_->::proto::game::redis::MJConfBuyHorse::Clear();
  clear_has_mjconfbuyhorse();
}
inline const ::proto::game::redis::MJConfBuyHorse& MJCustomizedConf::mjconfbuyhorse() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJCustomizedConf.mjconfbuyhorse)
  return mjconfbuyhorse_ != NULL ? *mjconfbuyhorse_ : *default_instance_->mjconfbuyhorse_;
}
inline ::proto::game::redis::MJConfBuyHorse* MJCustomizedConf::mutable_mjconfbuyhorse() {
  set_has_mjconfbuyhorse();
  if (mjconfbuyhorse_ == NULL) mjconfbuyhorse_ = new ::proto::game::redis::MJConfBuyHorse;
  // @@protoc_insertion_point(field_mutable:proto.game.redis.MJCustomizedConf.mjconfbuyhorse)
  return mjconfbuyhorse_;
}
inline ::proto::game::redis::MJConfBuyHorse* MJCustomizedConf::release_mjconfbuyhorse() {
  clear_has_mjconfbuyhorse();
  ::proto::game::redis::MJConfBuyHorse* temp = mjconfbuyhorse_;
  mjconfbuyhorse_ = NULL;
  return temp;
}
inline void MJCustomizedConf::set_allocated_mjconfbuyhorse(::proto::game::redis::MJConfBuyHorse* mjconfbuyhorse) {
  delete mjconfbuyhorse_;
  mjconfbuyhorse_ = mjconfbuyhorse;
  if (mjconfbuyhorse) {
    set_has_mjconfbuyhorse();
  } else {
    clear_has_mjconfbuyhorse();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.MJCustomizedConf.mjconfbuyhorse)
}

// optional .proto.game.redis.MJConfZhuaniao mjconfzhuaniao = 4;
inline bool MJCustomizedConf::has_mjconfzhuaniao() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MJCustomizedConf::set_has_mjconfzhuaniao() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MJCustomizedConf::clear_has_mjconfzhuaniao() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MJCustomizedConf::clear_mjconfzhuaniao() {
  if (mjconfzhuaniao_ != NULL) mjconfzhuaniao_->::proto::game::redis::MJConfZhuaniao::Clear();
  clear_has_mjconfzhuaniao();
}
inline const ::proto::game::redis::MJConfZhuaniao& MJCustomizedConf::mjconfzhuaniao() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJCustomizedConf.mjconfzhuaniao)
  return mjconfzhuaniao_ != NULL ? *mjconfzhuaniao_ : *default_instance_->mjconfzhuaniao_;
}
inline ::proto::game::redis::MJConfZhuaniao* MJCustomizedConf::mutable_mjconfzhuaniao() {
  set_has_mjconfzhuaniao();
  if (mjconfzhuaniao_ == NULL) mjconfzhuaniao_ = new ::proto::game::redis::MJConfZhuaniao;
  // @@protoc_insertion_point(field_mutable:proto.game.redis.MJCustomizedConf.mjconfzhuaniao)
  return mjconfzhuaniao_;
}
inline ::proto::game::redis::MJConfZhuaniao* MJCustomizedConf::release_mjconfzhuaniao() {
  clear_has_mjconfzhuaniao();
  ::proto::game::redis::MJConfZhuaniao* temp = mjconfzhuaniao_;
  mjconfzhuaniao_ = NULL;
  return temp;
}
inline void MJCustomizedConf::set_allocated_mjconfzhuaniao(::proto::game::redis::MJConfZhuaniao* mjconfzhuaniao) {
  delete mjconfzhuaniao_;
  mjconfzhuaniao_ = mjconfzhuaniao;
  if (mjconfzhuaniao) {
    set_has_mjconfzhuaniao();
  } else {
    clear_has_mjconfzhuaniao();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.MJCustomizedConf.mjconfzhuaniao)
}

// optional .proto.game.redis.MJHuType mjhutype = 5;
inline bool MJCustomizedConf::has_mjhutype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MJCustomizedConf::set_has_mjhutype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MJCustomizedConf::clear_has_mjhutype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MJCustomizedConf::clear_mjhutype() {
  if (mjhutype_ != NULL) mjhutype_->::proto::game::redis::MJHuType::Clear();
  clear_has_mjhutype();
}
inline const ::proto::game::redis::MJHuType& MJCustomizedConf::mjhutype() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJCustomizedConf.mjhutype)
  return mjhutype_ != NULL ? *mjhutype_ : *default_instance_->mjhutype_;
}
inline ::proto::game::redis::MJHuType* MJCustomizedConf::mutable_mjhutype() {
  set_has_mjhutype();
  if (mjhutype_ == NULL) mjhutype_ = new ::proto::game::redis::MJHuType;
  // @@protoc_insertion_point(field_mutable:proto.game.redis.MJCustomizedConf.mjhutype)
  return mjhutype_;
}
inline ::proto::game::redis::MJHuType* MJCustomizedConf::release_mjhutype() {
  clear_has_mjhutype();
  ::proto::game::redis::MJHuType* temp = mjhutype_;
  mjhutype_ = NULL;
  return temp;
}
inline void MJCustomizedConf::set_allocated_mjhutype(::proto::game::redis::MJHuType* mjhutype) {
  delete mjhutype_;
  mjhutype_ = mjhutype;
  if (mjhutype) {
    set_has_mjhutype();
  } else {
    clear_has_mjhutype();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.MJCustomizedConf.mjhutype)
}

// optional .proto.game.redis.MJConfOther mjconfother = 6;
inline bool MJCustomizedConf::has_mjconfother() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MJCustomizedConf::set_has_mjconfother() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MJCustomizedConf::clear_has_mjconfother() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MJCustomizedConf::clear_mjconfother() {
  if (mjconfother_ != NULL) mjconfother_->::proto::game::redis::MJConfOther::Clear();
  clear_has_mjconfother();
}
inline const ::proto::game::redis::MJConfOther& MJCustomizedConf::mjconfother() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJCustomizedConf.mjconfother)
  return mjconfother_ != NULL ? *mjconfother_ : *default_instance_->mjconfother_;
}
inline ::proto::game::redis::MJConfOther* MJCustomizedConf::mutable_mjconfother() {
  set_has_mjconfother();
  if (mjconfother_ == NULL) mjconfother_ = new ::proto::game::redis::MJConfOther;
  // @@protoc_insertion_point(field_mutable:proto.game.redis.MJCustomizedConf.mjconfother)
  return mjconfother_;
}
inline ::proto::game::redis::MJConfOther* MJCustomizedConf::release_mjconfother() {
  clear_has_mjconfother();
  ::proto::game::redis::MJConfOther* temp = mjconfother_;
  mjconfother_ = NULL;
  return temp;
}
inline void MJCustomizedConf::set_allocated_mjconfother(::proto::game::redis::MJConfOther* mjconfother) {
  delete mjconfother_;
  mjconfother_ = mjconfother;
  if (mjconfother) {
    set_has_mjconfother();
  } else {
    clear_has_mjconfother();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.MJCustomizedConf.mjconfother)
}

// -------------------------------------------------------------------

// RoundScore

// repeated int32 score = 1;
inline int RoundScore::score_size() const {
  return score_.size();
}
inline void RoundScore::clear_score() {
  score_.Clear();
}
inline ::google::protobuf::int32 RoundScore::score(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.RoundScore.score)
  return score_.Get(index);
}
inline void RoundScore::set_score(int index, ::google::protobuf::int32 value) {
  score_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.RoundScore.score)
}
inline void RoundScore::add_score(::google::protobuf::int32 value) {
  score_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.RoundScore.score)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RoundScore::score() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.RoundScore.score)
  return score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RoundScore::mutable_score() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.RoundScore.score)
  return &score_;
}

// -------------------------------------------------------------------

// Table_TotalRecordInfo

// repeated int32 banker = 1;
inline int Table_TotalRecordInfo::banker_size() const {
  return banker_.size();
}
inline void Table_TotalRecordInfo::clear_banker() {
  banker_.Clear();
}
inline ::google::protobuf::int32 Table_TotalRecordInfo::banker(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Table_TotalRecordInfo.banker)
  return banker_.Get(index);
}
inline void Table_TotalRecordInfo::set_banker(int index, ::google::protobuf::int32 value) {
  banker_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.Table_TotalRecordInfo.banker)
}
inline void Table_TotalRecordInfo::add_banker(::google::protobuf::int32 value) {
  banker_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.Table_TotalRecordInfo.banker)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Table_TotalRecordInfo::banker() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.Table_TotalRecordInfo.banker)
  return banker_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Table_TotalRecordInfo::mutable_banker() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.Table_TotalRecordInfo.banker)
  return &banker_;
}

// repeated int32 hu = 2;
inline int Table_TotalRecordInfo::hu_size() const {
  return hu_.size();
}
inline void Table_TotalRecordInfo::clear_hu() {
  hu_.Clear();
}
inline ::google::protobuf::int32 Table_TotalRecordInfo::hu(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Table_TotalRecordInfo.hu)
  return hu_.Get(index);
}
inline void Table_TotalRecordInfo::set_hu(int index, ::google::protobuf::int32 value) {
  hu_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.Table_TotalRecordInfo.hu)
}
inline void Table_TotalRecordInfo::add_hu(::google::protobuf::int32 value) {
  hu_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.Table_TotalRecordInfo.hu)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Table_TotalRecordInfo::hu() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.Table_TotalRecordInfo.hu)
  return hu_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Table_TotalRecordInfo::mutable_hu() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.Table_TotalRecordInfo.hu)
  return &hu_;
}

// repeated int32 piao = 3;
inline int Table_TotalRecordInfo::piao_size() const {
  return piao_.size();
}
inline void Table_TotalRecordInfo::clear_piao() {
  piao_.Clear();
}
inline ::google::protobuf::int32 Table_TotalRecordInfo::piao(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Table_TotalRecordInfo.piao)
  return piao_.Get(index);
}
inline void Table_TotalRecordInfo::set_piao(int index, ::google::protobuf::int32 value) {
  piao_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.Table_TotalRecordInfo.piao)
}
inline void Table_TotalRecordInfo::add_piao(::google::protobuf::int32 value) {
  piao_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.Table_TotalRecordInfo.piao)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Table_TotalRecordInfo::piao() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.Table_TotalRecordInfo.piao)
  return piao_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Table_TotalRecordInfo::mutable_piao() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.Table_TotalRecordInfo.piao)
  return &piao_;
}

// repeated int32 timerout_op = 4;
inline int Table_TotalRecordInfo::timerout_op_size() const {
  return timerout_op_.size();
}
inline void Table_TotalRecordInfo::clear_timerout_op() {
  timerout_op_.Clear();
}
inline ::google::protobuf::int32 Table_TotalRecordInfo::timerout_op(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Table_TotalRecordInfo.timerout_op)
  return timerout_op_.Get(index);
}
inline void Table_TotalRecordInfo::set_timerout_op(int index, ::google::protobuf::int32 value) {
  timerout_op_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.Table_TotalRecordInfo.timerout_op)
}
inline void Table_TotalRecordInfo::add_timerout_op(::google::protobuf::int32 value) {
  timerout_op_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.Table_TotalRecordInfo.timerout_op)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Table_TotalRecordInfo::timerout_op() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.Table_TotalRecordInfo.timerout_op)
  return timerout_op_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Table_TotalRecordInfo::mutable_timerout_op() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.Table_TotalRecordInfo.timerout_op)
  return &timerout_op_;
}

// repeated int32 total_score = 5;
inline int Table_TotalRecordInfo::total_score_size() const {
  return total_score_.size();
}
inline void Table_TotalRecordInfo::clear_total_score() {
  total_score_.Clear();
}
inline ::google::protobuf::int32 Table_TotalRecordInfo::total_score(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Table_TotalRecordInfo.total_score)
  return total_score_.Get(index);
}
inline void Table_TotalRecordInfo::set_total_score(int index, ::google::protobuf::int32 value) {
  total_score_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.Table_TotalRecordInfo.total_score)
}
inline void Table_TotalRecordInfo::add_total_score(::google::protobuf::int32 value) {
  total_score_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.Table_TotalRecordInfo.total_score)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Table_TotalRecordInfo::total_score() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.Table_TotalRecordInfo.total_score)
  return total_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Table_TotalRecordInfo::mutable_total_score() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.Table_TotalRecordInfo.total_score)
  return &total_score_;
}

// repeated int32 paohu = 6;
inline int Table_TotalRecordInfo::paohu_size() const {
  return paohu_.size();
}
inline void Table_TotalRecordInfo::clear_paohu() {
  paohu_.Clear();
}
inline ::google::protobuf::int32 Table_TotalRecordInfo::paohu(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Table_TotalRecordInfo.paohu)
  return paohu_.Get(index);
}
inline void Table_TotalRecordInfo::set_paohu(int index, ::google::protobuf::int32 value) {
  paohu_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.Table_TotalRecordInfo.paohu)
}
inline void Table_TotalRecordInfo::add_paohu(::google::protobuf::int32 value) {
  paohu_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.Table_TotalRecordInfo.paohu)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Table_TotalRecordInfo::paohu() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.Table_TotalRecordInfo.paohu)
  return paohu_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Table_TotalRecordInfo::mutable_paohu() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.Table_TotalRecordInfo.paohu)
  return &paohu_;
}

// repeated int32 zimo = 7;
inline int Table_TotalRecordInfo::zimo_size() const {
  return zimo_.size();
}
inline void Table_TotalRecordInfo::clear_zimo() {
  zimo_.Clear();
}
inline ::google::protobuf::int32 Table_TotalRecordInfo::zimo(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Table_TotalRecordInfo.zimo)
  return zimo_.Get(index);
}
inline void Table_TotalRecordInfo::set_zimo(int index, ::google::protobuf::int32 value) {
  zimo_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.Table_TotalRecordInfo.zimo)
}
inline void Table_TotalRecordInfo::add_zimo(::google::protobuf::int32 value) {
  zimo_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.Table_TotalRecordInfo.zimo)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Table_TotalRecordInfo::zimo() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.Table_TotalRecordInfo.zimo)
  return zimo_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Table_TotalRecordInfo::mutable_zimo() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.Table_TotalRecordInfo.zimo)
  return &zimo_;
}

// repeated int32 dianpao = 8;
inline int Table_TotalRecordInfo::dianpao_size() const {
  return dianpao_.size();
}
inline void Table_TotalRecordInfo::clear_dianpao() {
  dianpao_.Clear();
}
inline ::google::protobuf::int32 Table_TotalRecordInfo::dianpao(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Table_TotalRecordInfo.dianpao)
  return dianpao_.Get(index);
}
inline void Table_TotalRecordInfo::set_dianpao(int index, ::google::protobuf::int32 value) {
  dianpao_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.Table_TotalRecordInfo.dianpao)
}
inline void Table_TotalRecordInfo::add_dianpao(::google::protobuf::int32 value) {
  dianpao_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.Table_TotalRecordInfo.dianpao)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Table_TotalRecordInfo::dianpao() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.Table_TotalRecordInfo.dianpao)
  return dianpao_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Table_TotalRecordInfo::mutable_dianpao() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.Table_TotalRecordInfo.dianpao)
  return &dianpao_;
}

// repeated int32 win_counts = 9;
inline int Table_TotalRecordInfo::win_counts_size() const {
  return win_counts_.size();
}
inline void Table_TotalRecordInfo::clear_win_counts() {
  win_counts_.Clear();
}
inline ::google::protobuf::int32 Table_TotalRecordInfo::win_counts(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Table_TotalRecordInfo.win_counts)
  return win_counts_.Get(index);
}
inline void Table_TotalRecordInfo::set_win_counts(int index, ::google::protobuf::int32 value) {
  win_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.Table_TotalRecordInfo.win_counts)
}
inline void Table_TotalRecordInfo::add_win_counts(::google::protobuf::int32 value) {
  win_counts_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.Table_TotalRecordInfo.win_counts)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Table_TotalRecordInfo::win_counts() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.Table_TotalRecordInfo.win_counts)
  return win_counts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Table_TotalRecordInfo::mutable_win_counts() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.Table_TotalRecordInfo.win_counts)
  return &win_counts_;
}

// repeated int32 gang_times = 10;
inline int Table_TotalRecordInfo::gang_times_size() const {
  return gang_times_.size();
}
inline void Table_TotalRecordInfo::clear_gang_times() {
  gang_times_.Clear();
}
inline ::google::protobuf::int32 Table_TotalRecordInfo::gang_times(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Table_TotalRecordInfo.gang_times)
  return gang_times_.Get(index);
}
inline void Table_TotalRecordInfo::set_gang_times(int index, ::google::protobuf::int32 value) {
  gang_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.Table_TotalRecordInfo.gang_times)
}
inline void Table_TotalRecordInfo::add_gang_times(::google::protobuf::int32 value) {
  gang_times_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.Table_TotalRecordInfo.gang_times)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Table_TotalRecordInfo::gang_times() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.Table_TotalRecordInfo.gang_times)
  return gang_times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Table_TotalRecordInfo::mutable_gang_times() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.Table_TotalRecordInfo.gang_times)
  return &gang_times_;
}

// repeated int32 dian_gang_times = 11;
inline int Table_TotalRecordInfo::dian_gang_times_size() const {
  return dian_gang_times_.size();
}
inline void Table_TotalRecordInfo::clear_dian_gang_times() {
  dian_gang_times_.Clear();
}
inline ::google::protobuf::int32 Table_TotalRecordInfo::dian_gang_times(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Table_TotalRecordInfo.dian_gang_times)
  return dian_gang_times_.Get(index);
}
inline void Table_TotalRecordInfo::set_dian_gang_times(int index, ::google::protobuf::int32 value) {
  dian_gang_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.Table_TotalRecordInfo.dian_gang_times)
}
inline void Table_TotalRecordInfo::add_dian_gang_times(::google::protobuf::int32 value) {
  dian_gang_times_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.Table_TotalRecordInfo.dian_gang_times)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Table_TotalRecordInfo::dian_gang_times() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.Table_TotalRecordInfo.dian_gang_times)
  return dian_gang_times_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Table_TotalRecordInfo::mutable_dian_gang_times() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.Table_TotalRecordInfo.dian_gang_times)
  return &dian_gang_times_;
}

// repeated int32 piao_count = 12;
inline int Table_TotalRecordInfo::piao_count_size() const {
  return piao_count_.size();
}
inline void Table_TotalRecordInfo::clear_piao_count() {
  piao_count_.Clear();
}
inline ::google::protobuf::int32 Table_TotalRecordInfo::piao_count(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Table_TotalRecordInfo.piao_count)
  return piao_count_.Get(index);
}
inline void Table_TotalRecordInfo::set_piao_count(int index, ::google::protobuf::int32 value) {
  piao_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.Table_TotalRecordInfo.piao_count)
}
inline void Table_TotalRecordInfo::add_piao_count(::google::protobuf::int32 value) {
  piao_count_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.Table_TotalRecordInfo.piao_count)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Table_TotalRecordInfo::piao_count() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.Table_TotalRecordInfo.piao_count)
  return piao_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Table_TotalRecordInfo::mutable_piao_count() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.Table_TotalRecordInfo.piao_count)
  return &piao_count_;
}

// repeated int32 hongzhonggang_count = 13;
inline int Table_TotalRecordInfo::hongzhonggang_count_size() const {
  return hongzhonggang_count_.size();
}
inline void Table_TotalRecordInfo::clear_hongzhonggang_count() {
  hongzhonggang_count_.Clear();
}
inline ::google::protobuf::int32 Table_TotalRecordInfo::hongzhonggang_count(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Table_TotalRecordInfo.hongzhonggang_count)
  return hongzhonggang_count_.Get(index);
}
inline void Table_TotalRecordInfo::set_hongzhonggang_count(int index, ::google::protobuf::int32 value) {
  hongzhonggang_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.Table_TotalRecordInfo.hongzhonggang_count)
}
inline void Table_TotalRecordInfo::add_hongzhonggang_count(::google::protobuf::int32 value) {
  hongzhonggang_count_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.Table_TotalRecordInfo.hongzhonggang_count)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Table_TotalRecordInfo::hongzhonggang_count() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.Table_TotalRecordInfo.hongzhonggang_count)
  return hongzhonggang_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Table_TotalRecordInfo::mutable_hongzhonggang_count() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.Table_TotalRecordInfo.hongzhonggang_count)
  return &hongzhonggang_count_;
}

// repeated int32 dahu_count = 14;
inline int Table_TotalRecordInfo::dahu_count_size() const {
  return dahu_count_.size();
}
inline void Table_TotalRecordInfo::clear_dahu_count() {
  dahu_count_.Clear();
}
inline ::google::protobuf::int32 Table_TotalRecordInfo::dahu_count(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Table_TotalRecordInfo.dahu_count)
  return dahu_count_.Get(index);
}
inline void Table_TotalRecordInfo::set_dahu_count(int index, ::google::protobuf::int32 value) {
  dahu_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.Table_TotalRecordInfo.dahu_count)
}
inline void Table_TotalRecordInfo::add_dahu_count(::google::protobuf::int32 value) {
  dahu_count_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.Table_TotalRecordInfo.dahu_count)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Table_TotalRecordInfo::dahu_count() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.Table_TotalRecordInfo.dahu_count)
  return dahu_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Table_TotalRecordInfo::mutable_dahu_count() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.Table_TotalRecordInfo.dahu_count)
  return &dahu_count_;
}

// repeated int32 laizipigang_count = 15;
inline int Table_TotalRecordInfo::laizipigang_count_size() const {
  return laizipigang_count_.size();
}
inline void Table_TotalRecordInfo::clear_laizipigang_count() {
  laizipigang_count_.Clear();
}
inline ::google::protobuf::int32 Table_TotalRecordInfo::laizipigang_count(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Table_TotalRecordInfo.laizipigang_count)
  return laizipigang_count_.Get(index);
}
inline void Table_TotalRecordInfo::set_laizipigang_count(int index, ::google::protobuf::int32 value) {
  laizipigang_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.Table_TotalRecordInfo.laizipigang_count)
}
inline void Table_TotalRecordInfo::add_laizipigang_count(::google::protobuf::int32 value) {
  laizipigang_count_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.Table_TotalRecordInfo.laizipigang_count)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Table_TotalRecordInfo::laizipigang_count() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.Table_TotalRecordInfo.laizipigang_count)
  return laizipigang_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Table_TotalRecordInfo::mutable_laizipigang_count() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.Table_TotalRecordInfo.laizipigang_count)
  return &laizipigang_count_;
}

// repeated .proto.game.redis.RoundScore round_score = 16;
inline int Table_TotalRecordInfo::round_score_size() const {
  return round_score_.size();
}
inline void Table_TotalRecordInfo::clear_round_score() {
  round_score_.Clear();
}
inline const ::proto::game::redis::RoundScore& Table_TotalRecordInfo::round_score(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Table_TotalRecordInfo.round_score)
  return round_score_.Get(index);
}
inline ::proto::game::redis::RoundScore* Table_TotalRecordInfo::mutable_round_score(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.redis.Table_TotalRecordInfo.round_score)
  return round_score_.Mutable(index);
}
inline ::proto::game::redis::RoundScore* Table_TotalRecordInfo::add_round_score() {
  // @@protoc_insertion_point(field_add:proto.game.redis.Table_TotalRecordInfo.round_score)
  return round_score_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::RoundScore >&
Table_TotalRecordInfo::round_score() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.Table_TotalRecordInfo.round_score)
  return round_score_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::RoundScore >*
Table_TotalRecordInfo::mutable_round_score() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.Table_TotalRecordInfo.round_score)
  return &round_score_;
}

// repeated int32 mobao_count = 17;
inline int Table_TotalRecordInfo::mobao_count_size() const {
  return mobao_count_.size();
}
inline void Table_TotalRecordInfo::clear_mobao_count() {
  mobao_count_.Clear();
}
inline ::google::protobuf::int32 Table_TotalRecordInfo::mobao_count(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Table_TotalRecordInfo.mobao_count)
  return mobao_count_.Get(index);
}
inline void Table_TotalRecordInfo::set_mobao_count(int index, ::google::protobuf::int32 value) {
  mobao_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.Table_TotalRecordInfo.mobao_count)
}
inline void Table_TotalRecordInfo::add_mobao_count(::google::protobuf::int32 value) {
  mobao_count_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.Table_TotalRecordInfo.mobao_count)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Table_TotalRecordInfo::mobao_count() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.Table_TotalRecordInfo.mobao_count)
  return mobao_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Table_TotalRecordInfo::mutable_mobao_count() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.Table_TotalRecordInfo.mobao_count)
  return &mobao_count_;
}

// -------------------------------------------------------------------

// Shai_Set

// optional int32 num = 1;
inline bool Shai_Set::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Shai_Set::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Shai_Set::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Shai_Set::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 Shai_Set::num() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Shai_Set.num)
  return num_;
}
inline void Shai_Set::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.Shai_Set.num)
}

// repeated int32 shai = 2;
inline int Shai_Set::shai_size() const {
  return shai_.size();
}
inline void Shai_Set::clear_shai() {
  shai_.Clear();
}
inline ::google::protobuf::int32 Shai_Set::shai(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Shai_Set.shai)
  return shai_.Get(index);
}
inline void Shai_Set::set_shai(int index, ::google::protobuf::int32 value) {
  shai_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.Shai_Set.shai)
}
inline void Shai_Set::add_shai(::google::protobuf::int32 value) {
  shai_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.Shai_Set.shai)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Shai_Set::shai() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.Shai_Set.shai)
  return shai_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Shai_Set::mutable_shai() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.Shai_Set.shai)
  return &shai_;
}

// -------------------------------------------------------------------

// FixedCard

// required int32 CardData = 1;
inline bool FixedCard::has_carddata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FixedCard::set_has_carddata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FixedCard::clear_has_carddata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FixedCard::clear_carddata() {
  carddata_ = 0;
  clear_has_carddata();
}
inline ::google::protobuf::int32 FixedCard::carddata() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.FixedCard.CardData)
  return carddata_;
}
inline void FixedCard::set_carddata(::google::protobuf::int32 value) {
  set_has_carddata();
  carddata_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.FixedCard.CardData)
}

// optional int32 state = 2;
inline bool FixedCard::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FixedCard::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FixedCard::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FixedCard::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 FixedCard::state() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.FixedCard.state)
  return state_;
}
inline void FixedCard::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.FixedCard.state)
}

// optional int32 chairID = 3;
inline bool FixedCard::has_chairid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FixedCard::set_has_chairid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FixedCard::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FixedCard::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 FixedCard::chairid() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.FixedCard.chairID)
  return chairid_;
}
inline void FixedCard::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.FixedCard.chairID)
}

// repeated int32 OpCards = 4;
inline int FixedCard::opcards_size() const {
  return opcards_.size();
}
inline void FixedCard::clear_opcards() {
  opcards_.Clear();
}
inline ::google::protobuf::int32 FixedCard::opcards(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.FixedCard.OpCards)
  return opcards_.Get(index);
}
inline void FixedCard::set_opcards(int index, ::google::protobuf::int32 value) {
  opcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.FixedCard.OpCards)
}
inline void FixedCard::add_opcards(::google::protobuf::int32 value) {
  opcards_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.FixedCard.OpCards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
FixedCard::opcards() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.FixedCard.OpCards)
  return opcards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
FixedCard::mutable_opcards() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.FixedCard.OpCards)
  return &opcards_;
}

// -------------------------------------------------------------------

// HandCards

// required int32 ChangeableCardsLen = 1;
inline bool HandCards::has_changeablecardslen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HandCards::set_has_changeablecardslen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HandCards::clear_has_changeablecardslen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HandCards::clear_changeablecardslen() {
  changeablecardslen_ = 0;
  clear_has_changeablecardslen();
}
inline ::google::protobuf::int32 HandCards::changeablecardslen() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.HandCards.ChangeableCardsLen)
  return changeablecardslen_;
}
inline void HandCards::set_changeablecardslen(::google::protobuf::int32 value) {
  set_has_changeablecardslen();
  changeablecardslen_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.HandCards.ChangeableCardsLen)
}

// repeated int32 ChangeableCards = 2;
inline int HandCards::changeablecards_size() const {
  return changeablecards_.size();
}
inline void HandCards::clear_changeablecards() {
  changeablecards_.Clear();
}
inline ::google::protobuf::int32 HandCards::changeablecards(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.HandCards.ChangeableCards)
  return changeablecards_.Get(index);
}
inline void HandCards::set_changeablecards(int index, ::google::protobuf::int32 value) {
  changeablecards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.HandCards.ChangeableCards)
}
inline void HandCards::add_changeablecards(::google::protobuf::int32 value) {
  changeablecards_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.HandCards.ChangeableCards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HandCards::changeablecards() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.HandCards.ChangeableCards)
  return changeablecards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HandCards::mutable_changeablecards() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.HandCards.ChangeableCards)
  return &changeablecards_;
}

// optional int32 FixedCardsLen = 3;
inline bool HandCards::has_fixedcardslen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HandCards::set_has_fixedcardslen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HandCards::clear_has_fixedcardslen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HandCards::clear_fixedcardslen() {
  fixedcardslen_ = 0;
  clear_has_fixedcardslen();
}
inline ::google::protobuf::int32 HandCards::fixedcardslen() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.HandCards.FixedCardsLen)
  return fixedcardslen_;
}
inline void HandCards::set_fixedcardslen(::google::protobuf::int32 value) {
  set_has_fixedcardslen();
  fixedcardslen_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.HandCards.FixedCardsLen)
}

// repeated .proto.game.redis.FixedCard stFixedCards = 4;
inline int HandCards::stfixedcards_size() const {
  return stfixedcards_.size();
}
inline void HandCards::clear_stfixedcards() {
  stfixedcards_.Clear();
}
inline const ::proto::game::redis::FixedCard& HandCards::stfixedcards(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.HandCards.stFixedCards)
  return stfixedcards_.Get(index);
}
inline ::proto::game::redis::FixedCard* HandCards::mutable_stfixedcards(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.redis.HandCards.stFixedCards)
  return stfixedcards_.Mutable(index);
}
inline ::proto::game::redis::FixedCard* HandCards::add_stfixedcards() {
  // @@protoc_insertion_point(field_add:proto.game.redis.HandCards.stFixedCards)
  return stfixedcards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::FixedCard >&
HandCards::stfixedcards() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.HandCards.stFixedCards)
  return stfixedcards_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::FixedCard >*
HandCards::mutable_stfixedcards() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.HandCards.stFixedCards)
  return &stfixedcards_;
}

// -------------------------------------------------------------------

// CCardTypePool

// optional int32 m_jokercard = 1;
inline bool CCardTypePool::has_m_jokercard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCardTypePool::set_has_m_jokercard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CCardTypePool::clear_has_m_jokercard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CCardTypePool::clear_m_jokercard() {
  m_jokercard_ = 0;
  clear_has_m_jokercard();
}
inline ::google::protobuf::int32 CCardTypePool::m_jokercard() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.CCardTypePool.m_jokercard)
  return m_jokercard_;
}
inline void CCardTypePool::set_m_jokercard(::google::protobuf::int32 value) {
  set_has_m_jokercard();
  m_jokercard_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.CCardTypePool.m_jokercard)
}

// repeated int32 m_pool = 2;
inline int CCardTypePool::m_pool_size() const {
  return m_pool_.size();
}
inline void CCardTypePool::clear_m_pool() {
  m_pool_.Clear();
}
inline ::google::protobuf::int32 CCardTypePool::m_pool(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.CCardTypePool.m_pool)
  return m_pool_.Get(index);
}
inline void CCardTypePool::set_m_pool(int index, ::google::protobuf::int32 value) {
  m_pool_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.CCardTypePool.m_pool)
}
inline void CCardTypePool::add_m_pool(::google::protobuf::int32 value) {
  m_pool_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.CCardTypePool.m_pool)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CCardTypePool::m_pool() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.CCardTypePool.m_pool)
  return m_pool_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CCardTypePool::mutable_m_pool() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.CCardTypePool.m_pool)
  return &m_pool_;
}

// optional int32 m_maxcount = 3;
inline bool CCardTypePool::has_m_maxcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCardTypePool::set_has_m_maxcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CCardTypePool::clear_has_m_maxcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CCardTypePool::clear_m_maxcount() {
  m_maxcount_ = 0;
  clear_has_m_maxcount();
}
inline ::google::protobuf::int32 CCardTypePool::m_maxcount() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.CCardTypePool.m_maxcount)
  return m_maxcount_;
}
inline void CCardTypePool::set_m_maxcount(::google::protobuf::int32 value) {
  set_has_m_maxcount();
  m_maxcount_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.CCardTypePool.m_maxcount)
}

// optional int32 m_mode = 4;
inline bool CCardTypePool::has_m_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CCardTypePool::set_has_m_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CCardTypePool::clear_has_m_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CCardTypePool::clear_m_mode() {
  m_mode_ = 0;
  clear_has_m_mode();
}
inline ::google::protobuf::int32 CCardTypePool::m_mode() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.CCardTypePool.m_mode)
  return m_mode_;
}
inline void CCardTypePool::set_m_mode(::google::protobuf::int32 value) {
  set_has_m_mode();
  m_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.CCardTypePool.m_mode)
}

// -------------------------------------------------------------------

// CCardPool

// optional .proto.game.redis.CCardTypePool m_cardtypepool = 1;
inline bool CCardPool::has_m_cardtypepool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCardPool::set_has_m_cardtypepool() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CCardPool::clear_has_m_cardtypepool() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CCardPool::clear_m_cardtypepool() {
  if (m_cardtypepool_ != NULL) m_cardtypepool_->::proto::game::redis::CCardTypePool::Clear();
  clear_has_m_cardtypepool();
}
inline const ::proto::game::redis::CCardTypePool& CCardPool::m_cardtypepool() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.CCardPool.m_cardtypepool)
  return m_cardtypepool_ != NULL ? *m_cardtypepool_ : *default_instance_->m_cardtypepool_;
}
inline ::proto::game::redis::CCardTypePool* CCardPool::mutable_m_cardtypepool() {
  set_has_m_cardtypepool();
  if (m_cardtypepool_ == NULL) m_cardtypepool_ = new ::proto::game::redis::CCardTypePool;
  // @@protoc_insertion_point(field_mutable:proto.game.redis.CCardPool.m_cardtypepool)
  return m_cardtypepool_;
}
inline ::proto::game::redis::CCardTypePool* CCardPool::release_m_cardtypepool() {
  clear_has_m_cardtypepool();
  ::proto::game::redis::CCardTypePool* temp = m_cardtypepool_;
  m_cardtypepool_ = NULL;
  return temp;
}
inline void CCardPool::set_allocated_m_cardtypepool(::proto::game::redis::CCardTypePool* m_cardtypepool) {
  delete m_cardtypepool_;
  m_cardtypepool_ = m_cardtypepool;
  if (m_cardtypepool) {
    set_has_m_cardtypepool();
  } else {
    clear_has_m_cardtypepool();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.CCardPool.m_cardtypepool)
}

// optional int32 m_seedid = 2;
inline bool CCardPool::has_m_seedid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCardPool::set_has_m_seedid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CCardPool::clear_has_m_seedid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CCardPool::clear_m_seedid() {
  m_seedid_ = 0;
  clear_has_m_seedid();
}
inline ::google::protobuf::int32 CCardPool::m_seedid() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.CCardPool.m_seedid)
  return m_seedid_;
}
inline void CCardPool::set_m_seedid(::google::protobuf::int32 value) {
  set_has_m_seedid();
  m_seedid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.CCardPool.m_seedid)
}

// optional int32 m_mode = 3;
inline bool CCardPool::has_m_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCardPool::set_has_m_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CCardPool::clear_has_m_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CCardPool::clear_m_mode() {
  m_mode_ = 0;
  clear_has_m_mode();
}
inline ::google::protobuf::int32 CCardPool::m_mode() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.CCardPool.m_mode)
  return m_mode_;
}
inline void CCardPool::set_m_mode(::google::protobuf::int32 value) {
  set_has_m_mode();
  m_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.CCardPool.m_mode)
}

// repeated int32 m_pool = 4;
inline int CCardPool::m_pool_size() const {
  return m_pool_.size();
}
inline void CCardPool::clear_m_pool() {
  m_pool_.Clear();
}
inline ::google::protobuf::int32 CCardPool::m_pool(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.CCardPool.m_pool)
  return m_pool_.Get(index);
}
inline void CCardPool::set_m_pool(int index, ::google::protobuf::int32 value) {
  m_pool_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.CCardPool.m_pool)
}
inline void CCardPool::add_m_pool(::google::protobuf::int32 value) {
  m_pool_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.CCardPool.m_pool)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CCardPool::m_pool() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.CCardPool.m_pool)
  return m_pool_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CCardPool::mutable_m_pool() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.CCardPool.m_pool)
  return &m_pool_;
}

// optional int32 m_maxcount = 5;
inline bool CCardPool::has_m_maxcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CCardPool::set_has_m_maxcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CCardPool::clear_has_m_maxcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CCardPool::clear_m_maxcount() {
  m_maxcount_ = 0;
  clear_has_m_maxcount();
}
inline ::google::protobuf::int32 CCardPool::m_maxcount() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.CCardPool.m_maxcount)
  return m_maxcount_;
}
inline void CCardPool::set_m_maxcount(::google::protobuf::int32 value) {
  set_has_m_maxcount();
  m_maxcount_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.CCardPool.m_maxcount)
}

// optional int32 m_count = 6;
inline bool CCardPool::has_m_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CCardPool::set_has_m_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CCardPool::clear_has_m_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CCardPool::clear_m_count() {
  m_count_ = 0;
  clear_has_m_count();
}
inline ::google::protobuf::int32 CCardPool::m_count() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.CCardPool.m_count)
  return m_count_;
}
inline void CCardPool::set_m_count(::google::protobuf::int32 value) {
  set_has_m_count();
  m_count_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.CCardPool.m_count)
}

// optional int32 m_current = 7;
inline bool CCardPool::has_m_current() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CCardPool::set_has_m_current() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CCardPool::clear_has_m_current() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CCardPool::clear_m_current() {
  m_current_ = 0;
  clear_has_m_current();
}
inline ::google::protobuf::int32 CCardPool::m_current() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.CCardPool.m_current)
  return m_current_;
}
inline void CCardPool::set_m_current(::google::protobuf::int32 value) {
  set_has_m_current();
  m_current_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.CCardPool.m_current)
}

// optional int32 m_last = 8;
inline bool CCardPool::has_m_last() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CCardPool::set_has_m_last() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CCardPool::clear_has_m_last() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CCardPool::clear_m_last() {
  m_last_ = 0;
  clear_has_m_last();
}
inline ::google::protobuf::int32 CCardPool::m_last() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.CCardPool.m_last)
  return m_last_;
}
inline void CCardPool::set_m_last(::google::protobuf::int32 value) {
  set_has_m_last();
  m_last_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.CCardPool.m_last)
}

// optional int32 m_jokercard = 9;
inline bool CCardPool::has_m_jokercard() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CCardPool::set_has_m_jokercard() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CCardPool::clear_has_m_jokercard() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CCardPool::clear_m_jokercard() {
  m_jokercard_ = 0;
  clear_has_m_jokercard();
}
inline ::google::protobuf::int32 CCardPool::m_jokercard() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.CCardPool.m_jokercard)
  return m_jokercard_;
}
inline void CCardPool::set_m_jokercard(::google::protobuf::int32 value) {
  set_has_m_jokercard();
  m_jokercard_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.CCardPool.m_jokercard)
}

// optional int32 m_jokercount = 10;
inline bool CCardPool::has_m_jokercount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CCardPool::set_has_m_jokercount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CCardPool::clear_has_m_jokercount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CCardPool::clear_m_jokercount() {
  m_jokercount_ = 0;
  clear_has_m_jokercount();
}
inline ::google::protobuf::int32 CCardPool::m_jokercount() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.CCardPool.m_jokercount)
  return m_jokercount_;
}
inline void CCardPool::set_m_jokercount(::google::protobuf::int32 value) {
  set_has_m_jokercount();
  m_jokercount_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.CCardPool.m_jokercount)
}

// -------------------------------------------------------------------

// MultiOpInfo

// optional int32 m_bmultiopusernum = 1;
inline bool MultiOpInfo::has_m_bmultiopusernum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MultiOpInfo::set_has_m_bmultiopusernum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MultiOpInfo::clear_has_m_bmultiopusernum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MultiOpInfo::clear_m_bmultiopusernum() {
  m_bmultiopusernum_ = 0;
  clear_has_m_bmultiopusernum();
}
inline ::google::protobuf::int32 MultiOpInfo::m_bmultiopusernum() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MultiOpInfo.m_bmultiopusernum)
  return m_bmultiopusernum_;
}
inline void MultiOpInfo::set_m_bmultiopusernum(::google::protobuf::int32 value) {
  set_has_m_bmultiopusernum();
  m_bmultiopusernum_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MultiOpInfo.m_bmultiopusernum)
}

// optional int32 m_bmultidoneopnum = 2;
inline bool MultiOpInfo::has_m_bmultidoneopnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MultiOpInfo::set_has_m_bmultidoneopnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MultiOpInfo::clear_has_m_bmultidoneopnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MultiOpInfo::clear_m_bmultidoneopnum() {
  m_bmultidoneopnum_ = 0;
  clear_has_m_bmultidoneopnum();
}
inline ::google::protobuf::int32 MultiOpInfo::m_bmultidoneopnum() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MultiOpInfo.m_bmultidoneopnum)
  return m_bmultidoneopnum_;
}
inline void MultiOpInfo::set_m_bmultidoneopnum(::google::protobuf::int32 value) {
  set_has_m_bmultidoneopnum();
  m_bmultidoneopnum_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MultiOpInfo.m_bmultidoneopnum)
}

// optional int32 m_bmultihuopecount = 3;
inline bool MultiOpInfo::has_m_bmultihuopecount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MultiOpInfo::set_has_m_bmultihuopecount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MultiOpInfo::clear_has_m_bmultihuopecount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MultiOpInfo::clear_m_bmultihuopecount() {
  m_bmultihuopecount_ = 0;
  clear_has_m_bmultihuopecount();
}
inline ::google::protobuf::int32 MultiOpInfo::m_bmultihuopecount() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MultiOpInfo.m_bmultihuopecount)
  return m_bmultihuopecount_;
}
inline void MultiOpInfo::set_m_bmultihuopecount(::google::protobuf::int32 value) {
  set_has_m_bmultihuopecount();
  m_bmultihuopecount_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MultiOpInfo.m_bmultihuopecount)
}

// optional int32 m_bmultiophunum = 4;
inline bool MultiOpInfo::has_m_bmultiophunum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MultiOpInfo::set_has_m_bmultiophunum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MultiOpInfo::clear_has_m_bmultiophunum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MultiOpInfo::clear_m_bmultiophunum() {
  m_bmultiophunum_ = 0;
  clear_has_m_bmultiophunum();
}
inline ::google::protobuf::int32 MultiOpInfo::m_bmultiophunum() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MultiOpInfo.m_bmultiophunum)
  return m_bmultiophunum_;
}
inline void MultiOpInfo::set_m_bmultiophunum(::google::protobuf::int32 value) {
  set_has_m_bmultiophunum();
  m_bmultiophunum_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MultiOpInfo.m_bmultiophunum)
}

// optional int32 m_bmulitfirstoperate = 5;
inline bool MultiOpInfo::has_m_bmulitfirstoperate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MultiOpInfo::set_has_m_bmulitfirstoperate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MultiOpInfo::clear_has_m_bmulitfirstoperate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MultiOpInfo::clear_m_bmulitfirstoperate() {
  m_bmulitfirstoperate_ = 0;
  clear_has_m_bmulitfirstoperate();
}
inline ::google::protobuf::int32 MultiOpInfo::m_bmulitfirstoperate() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MultiOpInfo.m_bmulitfirstoperate)
  return m_bmulitfirstoperate_;
}
inline void MultiOpInfo::set_m_bmulitfirstoperate(::google::protobuf::int32 value) {
  set_has_m_bmulitfirstoperate();
  m_bmulitfirstoperate_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.MultiOpInfo.m_bmulitfirstoperate)
}

// repeated int32 m_bmultiuserdoneop = 6;
inline int MultiOpInfo::m_bmultiuserdoneop_size() const {
  return m_bmultiuserdoneop_.size();
}
inline void MultiOpInfo::clear_m_bmultiuserdoneop() {
  m_bmultiuserdoneop_.Clear();
}
inline ::google::protobuf::int32 MultiOpInfo::m_bmultiuserdoneop(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MultiOpInfo.m_bmultiuserdoneop)
  return m_bmultiuserdoneop_.Get(index);
}
inline void MultiOpInfo::set_m_bmultiuserdoneop(int index, ::google::protobuf::int32 value) {
  m_bmultiuserdoneop_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.MultiOpInfo.m_bmultiuserdoneop)
}
inline void MultiOpInfo::add_m_bmultiuserdoneop(::google::protobuf::int32 value) {
  m_bmultiuserdoneop_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.MultiOpInfo.m_bmultiuserdoneop)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MultiOpInfo::m_bmultiuserdoneop() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.MultiOpInfo.m_bmultiuserdoneop)
  return m_bmultiuserdoneop_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MultiOpInfo::mutable_m_bmultiuserdoneop() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.MultiOpInfo.m_bmultiuserdoneop)
  return &m_bmultiuserdoneop_;
}

// repeated int32 m_bmultiuserdoneopcard = 7;
inline int MultiOpInfo::m_bmultiuserdoneopcard_size() const {
  return m_bmultiuserdoneopcard_.size();
}
inline void MultiOpInfo::clear_m_bmultiuserdoneopcard() {
  m_bmultiuserdoneopcard_.Clear();
}
inline ::google::protobuf::int32 MultiOpInfo::m_bmultiuserdoneopcard(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MultiOpInfo.m_bmultiuserdoneopcard)
  return m_bmultiuserdoneopcard_.Get(index);
}
inline void MultiOpInfo::set_m_bmultiuserdoneopcard(int index, ::google::protobuf::int32 value) {
  m_bmultiuserdoneopcard_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.MultiOpInfo.m_bmultiuserdoneopcard)
}
inline void MultiOpInfo::add_m_bmultiuserdoneopcard(::google::protobuf::int32 value) {
  m_bmultiuserdoneopcard_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.MultiOpInfo.m_bmultiuserdoneopcard)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MultiOpInfo::m_bmultiuserdoneopcard() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.MultiOpInfo.m_bmultiuserdoneopcard)
  return m_bmultiuserdoneopcard_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MultiOpInfo::mutable_m_bmultiuserdoneopcard() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.MultiOpInfo.m_bmultiuserdoneopcard)
  return &m_bmultiuserdoneopcard_;
}

// -------------------------------------------------------------------

// RobAddInfo

// optional int32 m_roboperatenum = 1;
inline bool RobAddInfo::has_m_roboperatenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobAddInfo::set_has_m_roboperatenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobAddInfo::clear_has_m_roboperatenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobAddInfo::clear_m_roboperatenum() {
  m_roboperatenum_ = 0;
  clear_has_m_roboperatenum();
}
inline ::google::protobuf::int32 RobAddInfo::m_roboperatenum() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.RobAddInfo.m_roboperatenum)
  return m_roboperatenum_;
}
inline void RobAddInfo::set_m_roboperatenum(::google::protobuf::int32 value) {
  set_has_m_roboperatenum();
  m_roboperatenum_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.RobAddInfo.m_roboperatenum)
}

// optional int32 m_robhunum = 2;
inline bool RobAddInfo::has_m_robhunum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobAddInfo::set_has_m_robhunum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobAddInfo::clear_has_m_robhunum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobAddInfo::clear_m_robhunum() {
  m_robhunum_ = 0;
  clear_has_m_robhunum();
}
inline ::google::protobuf::int32 RobAddInfo::m_robhunum() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.RobAddInfo.m_robhunum)
  return m_robhunum_;
}
inline void RobAddInfo::set_m_robhunum(::google::protobuf::int32 value) {
  set_has_m_robhunum();
  m_robhunum_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.RobAddInfo.m_robhunum)
}

// optional int32 m_wanggangplayer = 3;
inline bool RobAddInfo::has_m_wanggangplayer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobAddInfo::set_has_m_wanggangplayer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobAddInfo::clear_has_m_wanggangplayer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobAddInfo::clear_m_wanggangplayer() {
  m_wanggangplayer_ = 0;
  clear_has_m_wanggangplayer();
}
inline ::google::protobuf::int32 RobAddInfo::m_wanggangplayer() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.RobAddInfo.m_wanggangplayer)
  return m_wanggangplayer_;
}
inline void RobAddInfo::set_m_wanggangplayer(::google::protobuf::int32 value) {
  set_has_m_wanggangplayer();
  m_wanggangplayer_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.RobAddInfo.m_wanggangplayer)
}

// optional int32 m_wanggangplayeroptype = 4;
inline bool RobAddInfo::has_m_wanggangplayeroptype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RobAddInfo::set_has_m_wanggangplayeroptype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RobAddInfo::clear_has_m_wanggangplayeroptype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RobAddInfo::clear_m_wanggangplayeroptype() {
  m_wanggangplayeroptype_ = 0;
  clear_has_m_wanggangplayeroptype();
}
inline ::google::protobuf::int32 RobAddInfo::m_wanggangplayeroptype() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.RobAddInfo.m_wanggangplayeroptype)
  return m_wanggangplayeroptype_;
}
inline void RobAddInfo::set_m_wanggangplayeroptype(::google::protobuf::int32 value) {
  set_has_m_wanggangplayeroptype();
  m_wanggangplayeroptype_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.RobAddInfo.m_wanggangplayeroptype)
}

// repeated int32 m_robhudoneop = 5;
inline int RobAddInfo::m_robhudoneop_size() const {
  return m_robhudoneop_.size();
}
inline void RobAddInfo::clear_m_robhudoneop() {
  m_robhudoneop_.Clear();
}
inline ::google::protobuf::int32 RobAddInfo::m_robhudoneop(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.RobAddInfo.m_robhudoneop)
  return m_robhudoneop_.Get(index);
}
inline void RobAddInfo::set_m_robhudoneop(int index, ::google::protobuf::int32 value) {
  m_robhudoneop_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.RobAddInfo.m_robhudoneop)
}
inline void RobAddInfo::add_m_robhudoneop(::google::protobuf::int32 value) {
  m_robhudoneop_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.RobAddInfo.m_robhudoneop)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RobAddInfo::m_robhudoneop() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.RobAddInfo.m_robhudoneop)
  return m_robhudoneop_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RobAddInfo::mutable_m_robhudoneop() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.RobAddInfo.m_robhudoneop)
  return &m_robhudoneop_;
}

// repeated bool m_baddfanflag = 6;
inline int RobAddInfo::m_baddfanflag_size() const {
  return m_baddfanflag_.size();
}
inline void RobAddInfo::clear_m_baddfanflag() {
  m_baddfanflag_.Clear();
}
inline bool RobAddInfo::m_baddfanflag(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.RobAddInfo.m_baddfanflag)
  return m_baddfanflag_.Get(index);
}
inline void RobAddInfo::set_m_baddfanflag(int index, bool value) {
  m_baddfanflag_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.RobAddInfo.m_baddfanflag)
}
inline void RobAddInfo::add_m_baddfanflag(bool value) {
  m_baddfanflag_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.RobAddInfo.m_baddfanflag)
}
inline const ::google::protobuf::RepeatedField< bool >&
RobAddInfo::m_baddfanflag() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.RobAddInfo.m_baddfanflag)
  return m_baddfanflag_;
}
inline ::google::protobuf::RepeatedField< bool >*
RobAddInfo::mutable_m_baddfanflag() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.RobAddInfo.m_baddfanflag)
  return &m_baddfanflag_;
}

// optional int32 m_robwangangcard = 7;
inline bool RobAddInfo::has_m_robwangangcard() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RobAddInfo::set_has_m_robwangangcard() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RobAddInfo::clear_has_m_robwangangcard() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RobAddInfo::clear_m_robwangangcard() {
  m_robwangangcard_ = 0;
  clear_has_m_robwangangcard();
}
inline ::google::protobuf::int32 RobAddInfo::m_robwangangcard() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.RobAddInfo.m_robwangangcard)
  return m_robwangangcard_;
}
inline void RobAddInfo::set_m_robwangangcard(::google::protobuf::int32 value) {
  set_has_m_robwangangcard();
  m_robwangangcard_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.RobAddInfo.m_robwangangcard)
}

// optional bool m_brobwangang = 8;
inline bool RobAddInfo::has_m_brobwangang() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RobAddInfo::set_has_m_brobwangang() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RobAddInfo::clear_has_m_brobwangang() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RobAddInfo::clear_m_brobwangang() {
  m_brobwangang_ = false;
  clear_has_m_brobwangang();
}
inline bool RobAddInfo::m_brobwangang() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.RobAddInfo.m_brobwangang)
  return m_brobwangang_;
}
inline void RobAddInfo::set_m_brobwangang(bool value) {
  set_has_m_brobwangang();
  m_brobwangang_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.RobAddInfo.m_brobwangang)
}

// optional bool m_brobhu = 9;
inline bool RobAddInfo::has_m_brobhu() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RobAddInfo::set_has_m_brobhu() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RobAddInfo::clear_has_m_brobhu() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RobAddInfo::clear_m_brobhu() {
  m_brobhu_ = false;
  clear_has_m_brobhu();
}
inline bool RobAddInfo::m_brobhu() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.RobAddInfo.m_brobhu)
  return m_brobhu_;
}
inline void RobAddInfo::set_m_brobhu(bool value) {
  set_has_m_brobhu();
  m_brobhu_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.RobAddInfo.m_brobhu)
}

// optional bool m_brobganghujudge = 10;
inline bool RobAddInfo::has_m_brobganghujudge() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RobAddInfo::set_has_m_brobganghujudge() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RobAddInfo::clear_has_m_brobganghujudge() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RobAddInfo::clear_m_brobganghujudge() {
  m_brobganghujudge_ = false;
  clear_has_m_brobganghujudge();
}
inline bool RobAddInfo::m_brobganghujudge() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.RobAddInfo.m_brobganghujudge)
  return m_brobganghujudge_;
}
inline void RobAddInfo::set_m_brobganghujudge(bool value) {
  set_has_m_brobganghujudge();
  m_brobganghujudge_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.RobAddInfo.m_brobganghujudge)
}

// -------------------------------------------------------------------

// LOWLEVELOPERATE

// optional int32 ioptype = 1;
inline bool LOWLEVELOPERATE::has_ioptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LOWLEVELOPERATE::set_has_ioptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LOWLEVELOPERATE::clear_has_ioptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LOWLEVELOPERATE::clear_ioptype() {
  ioptype_ = 0;
  clear_has_ioptype();
}
inline ::google::protobuf::int32 LOWLEVELOPERATE::ioptype() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.LOWLEVELOPERATE.ioptype)
  return ioptype_;
}
inline void LOWLEVELOPERATE::set_ioptype(::google::protobuf::int32 value) {
  set_has_ioptype();
  ioptype_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.LOWLEVELOPERATE.ioptype)
}

// optional int32 chairid = 2;
inline bool LOWLEVELOPERATE::has_chairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LOWLEVELOPERATE::set_has_chairid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LOWLEVELOPERATE::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LOWLEVELOPERATE::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 LOWLEVELOPERATE::chairid() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.LOWLEVELOPERATE.chairid)
  return chairid_;
}
inline void LOWLEVELOPERATE::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.LOWLEVELOPERATE.chairid)
}

// optional int32 bcard = 3;
inline bool LOWLEVELOPERATE::has_bcard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LOWLEVELOPERATE::set_has_bcard() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LOWLEVELOPERATE::clear_has_bcard() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LOWLEVELOPERATE::clear_bcard() {
  bcard_ = 0;
  clear_has_bcard();
}
inline ::google::protobuf::int32 LOWLEVELOPERATE::bcard() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.LOWLEVELOPERATE.bcard)
  return bcard_;
}
inline void LOWLEVELOPERATE::set_bcard(::google::protobuf::int32 value) {
  set_has_bcard();
  bcard_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.LOWLEVELOPERATE.bcard)
}

// -------------------------------------------------------------------

// tagGangScore

// optional int32 card = 1;
inline bool tagGangScore::has_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagGangScore::set_has_card() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagGangScore::clear_has_card() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagGangScore::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 tagGangScore::card() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagGangScore.card)
  return card_;
}
inline void tagGangScore::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagGangScore.card)
}

// optional int32 chairid = 2;
inline bool tagGangScore::has_chairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagGangScore::set_has_chairid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagGangScore::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagGangScore::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 tagGangScore::chairid() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagGangScore.chairid)
  return chairid_;
}
inline void tagGangScore::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagGangScore.chairid)
}

// optional int32 itype = 3;
inline bool tagGangScore::has_itype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagGangScore::set_has_itype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagGangScore::clear_has_itype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagGangScore::clear_itype() {
  itype_ = 0;
  clear_has_itype();
}
inline ::google::protobuf::int32 tagGangScore::itype() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagGangScore.itype)
  return itype_;
}
inline void tagGangScore::set_itype(::google::protobuf::int32 value) {
  set_has_itype();
  itype_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagGangScore.itype)
}

// -------------------------------------------------------------------

// tagGangScoreInfo

// optional int32 itotalscore = 1;
inline bool tagGangScoreInfo::has_itotalscore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagGangScoreInfo::set_has_itotalscore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagGangScoreInfo::clear_has_itotalscore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagGangScoreInfo::clear_itotalscore() {
  itotalscore_ = 0;
  clear_has_itotalscore();
}
inline ::google::protobuf::int32 tagGangScoreInfo::itotalscore() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagGangScoreInfo.itotalscore)
  return itotalscore_;
}
inline void tagGangScoreInfo::set_itotalscore(::google::protobuf::int32 value) {
  set_has_itotalscore();
  itotalscore_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagGangScoreInfo.itotalscore)
}

// repeated .proto.game.redis.tagGangScore gang = 2;
inline int tagGangScoreInfo::gang_size() const {
  return gang_.size();
}
inline void tagGangScoreInfo::clear_gang() {
  gang_.Clear();
}
inline const ::proto::game::redis::tagGangScore& tagGangScoreInfo::gang(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagGangScoreInfo.gang)
  return gang_.Get(index);
}
inline ::proto::game::redis::tagGangScore* tagGangScoreInfo::mutable_gang(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagGangScoreInfo.gang)
  return gang_.Mutable(index);
}
inline ::proto::game::redis::tagGangScore* tagGangScoreInfo::add_gang() {
  // @@protoc_insertion_point(field_add:proto.game.redis.tagGangScoreInfo.gang)
  return gang_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagGangScore >&
tagGangScoreInfo::gang() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagGangScoreInfo.gang)
  return gang_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagGangScore >*
tagGangScoreInfo::mutable_gang() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagGangScoreInfo.gang)
  return &gang_;
}

// -------------------------------------------------------------------

// tagHuRecord

// optional int32 bhucard = 1;
inline bool tagHuRecord::has_bhucard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagHuRecord::set_has_bhucard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagHuRecord::clear_has_bhucard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagHuRecord::clear_bhucard() {
  bhucard_ = 0;
  clear_has_bhucard();
}
inline ::google::protobuf::int32 tagHuRecord::bhucard() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagHuRecord.bhucard)
  return bhucard_;
}
inline void tagHuRecord::set_bhucard(::google::protobuf::int32 value) {
  set_has_bhucard();
  bhucard_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagHuRecord.bhucard)
}

// optional int32 bpashuchairid = 2;
inline bool tagHuRecord::has_bpashuchairid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagHuRecord::set_has_bpashuchairid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagHuRecord::clear_has_bpashuchairid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagHuRecord::clear_bpashuchairid() {
  bpashuchairid_ = 0;
  clear_has_bpashuchairid();
}
inline ::google::protobuf::int32 tagHuRecord::bpashuchairid() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagHuRecord.bpashuchairid)
  return bpashuchairid_;
}
inline void tagHuRecord::set_bpashuchairid(::google::protobuf::int32 value) {
  set_has_bpashuchairid();
  bpashuchairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagHuRecord.bpashuchairid)
}

// optional int32 btype = 3;
inline bool tagHuRecord::has_btype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagHuRecord::set_has_btype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagHuRecord::clear_has_btype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagHuRecord::clear_btype() {
  btype_ = 0;
  clear_has_btype();
}
inline ::google::protobuf::int32 tagHuRecord::btype() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagHuRecord.btype)
  return btype_;
}
inline void tagHuRecord::set_btype(::google::protobuf::int32 value) {
  set_has_btype();
  btype_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagHuRecord.btype)
}

// optional int32 ifannum = 4;
inline bool tagHuRecord::has_ifannum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tagHuRecord::set_has_ifannum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tagHuRecord::clear_has_ifannum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tagHuRecord::clear_ifannum() {
  ifannum_ = 0;
  clear_has_ifannum();
}
inline ::google::protobuf::int32 tagHuRecord::ifannum() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagHuRecord.ifannum)
  return ifannum_;
}
inline void tagHuRecord::set_ifannum(::google::protobuf::int32 value) {
  set_has_ifannum();
  ifannum_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagHuRecord.ifannum)
}

// -------------------------------------------------------------------

// tagHuInfo

// optional int32 itotalscore = 1;
inline bool tagHuInfo::has_itotalscore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagHuInfo::set_has_itotalscore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagHuInfo::clear_has_itotalscore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagHuInfo::clear_itotalscore() {
  itotalscore_ = 0;
  clear_has_itotalscore();
}
inline ::google::protobuf::int32 tagHuInfo::itotalscore() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagHuInfo.itotalscore)
  return itotalscore_;
}
inline void tagHuInfo::set_itotalscore(::google::protobuf::int32 value) {
  set_has_itotalscore();
  itotalscore_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagHuInfo.itotalscore)
}

// repeated .proto.game.redis.tagHuRecord sthu = 2;
inline int tagHuInfo::sthu_size() const {
  return sthu_.size();
}
inline void tagHuInfo::clear_sthu() {
  sthu_.Clear();
}
inline const ::proto::game::redis::tagHuRecord& tagHuInfo::sthu(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagHuInfo.sthu)
  return sthu_.Get(index);
}
inline ::proto::game::redis::tagHuRecord* tagHuInfo::mutable_sthu(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagHuInfo.sthu)
  return sthu_.Mutable(index);
}
inline ::proto::game::redis::tagHuRecord* tagHuInfo::add_sthu() {
  // @@protoc_insertion_point(field_add:proto.game.redis.tagHuInfo.sthu)
  return sthu_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagHuRecord >&
tagHuInfo::sthu() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagHuInfo.sthu)
  return sthu_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagHuRecord >*
tagHuInfo::mutable_sthu() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagHuInfo.sthu)
  return &sthu_;
}

// -------------------------------------------------------------------

// MJ_BUFFER

// repeated int32 card = 1;
inline int MJ_BUFFER::card_size() const {
  return card_.size();
}
inline void MJ_BUFFER::clear_card() {
  card_.Clear();
}
inline ::google::protobuf::int32 MJ_BUFFER::card(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.MJ_BUFFER.card)
  return card_.Get(index);
}
inline void MJ_BUFFER::set_card(int index, ::google::protobuf::int32 value) {
  card_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.MJ_BUFFER.card)
}
inline void MJ_BUFFER::add_card(::google::protobuf::int32 value) {
  card_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.MJ_BUFFER.card)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MJ_BUFFER::card() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.MJ_BUFFER.card)
  return card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MJ_BUFFER::mutable_card() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.MJ_BUFFER.card)
  return &card_;
}

// -------------------------------------------------------------------

// HuFanInfo

// repeated bool m_bishu = 1;
inline int HuFanInfo::m_bishu_size() const {
  return m_bishu_.size();
}
inline void HuFanInfo::clear_m_bishu() {
  m_bishu_.Clear();
}
inline bool HuFanInfo::m_bishu(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.HuFanInfo.m_bishu)
  return m_bishu_.Get(index);
}
inline void HuFanInfo::set_m_bishu(int index, bool value) {
  m_bishu_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.HuFanInfo.m_bishu)
}
inline void HuFanInfo::add_m_bishu(bool value) {
  m_bishu_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.HuFanInfo.m_bishu)
}
inline const ::google::protobuf::RepeatedField< bool >&
HuFanInfo::m_bishu() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.HuFanInfo.m_bishu)
  return m_bishu_;
}
inline ::google::protobuf::RepeatedField< bool >*
HuFanInfo::mutable_m_bishu() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.HuFanInfo.m_bishu)
  return &m_bishu_;
}

// repeated int32 m_hufannums = 2;
inline int HuFanInfo::m_hufannums_size() const {
  return m_hufannums_.size();
}
inline void HuFanInfo::clear_m_hufannums() {
  m_hufannums_.Clear();
}
inline ::google::protobuf::int32 HuFanInfo::m_hufannums(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.HuFanInfo.m_hufannums)
  return m_hufannums_.Get(index);
}
inline void HuFanInfo::set_m_hufannums(int index, ::google::protobuf::int32 value) {
  m_hufannums_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.HuFanInfo.m_hufannums)
}
inline void HuFanInfo::add_m_hufannums(::google::protobuf::int32 value) {
  m_hufannums_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.HuFanInfo.m_hufannums)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HuFanInfo::m_hufannums() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.HuFanInfo.m_hufannums)
  return m_hufannums_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HuFanInfo::mutable_m_hufannums() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.HuFanInfo.m_hufannums)
  return &m_hufannums_;
}

// repeated .proto.game.redis.tagGangScoreInfo m_stgang = 3;
inline int HuFanInfo::m_stgang_size() const {
  return m_stgang_.size();
}
inline void HuFanInfo::clear_m_stgang() {
  m_stgang_.Clear();
}
inline const ::proto::game::redis::tagGangScoreInfo& HuFanInfo::m_stgang(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.HuFanInfo.m_stgang)
  return m_stgang_.Get(index);
}
inline ::proto::game::redis::tagGangScoreInfo* HuFanInfo::mutable_m_stgang(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.redis.HuFanInfo.m_stgang)
  return m_stgang_.Mutable(index);
}
inline ::proto::game::redis::tagGangScoreInfo* HuFanInfo::add_m_stgang() {
  // @@protoc_insertion_point(field_add:proto.game.redis.HuFanInfo.m_stgang)
  return m_stgang_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagGangScoreInfo >&
HuFanInfo::m_stgang() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.HuFanInfo.m_stgang)
  return m_stgang_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagGangScoreInfo >*
HuFanInfo::mutable_m_stgang() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.HuFanInfo.m_stgang)
  return &m_stgang_;
}

// repeated .proto.game.redis.tagHuInfo m_sthuscore = 4;
inline int HuFanInfo::m_sthuscore_size() const {
  return m_sthuscore_.size();
}
inline void HuFanInfo::clear_m_sthuscore() {
  m_sthuscore_.Clear();
}
inline const ::proto::game::redis::tagHuInfo& HuFanInfo::m_sthuscore(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.HuFanInfo.m_sthuscore)
  return m_sthuscore_.Get(index);
}
inline ::proto::game::redis::tagHuInfo* HuFanInfo::mutable_m_sthuscore(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.redis.HuFanInfo.m_sthuscore)
  return m_sthuscore_.Mutable(index);
}
inline ::proto::game::redis::tagHuInfo* HuFanInfo::add_m_sthuscore() {
  // @@protoc_insertion_point(field_add:proto.game.redis.HuFanInfo.m_sthuscore)
  return m_sthuscore_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagHuInfo >&
HuFanInfo::m_sthuscore() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.HuFanInfo.m_sthuscore)
  return m_sthuscore_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagHuInfo >*
HuFanInfo::mutable_m_sthuscore() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.HuFanInfo.m_sthuscore)
  return &m_sthuscore_;
}

// repeated .proto.game.redis.MJ_BUFFER m_ofan = 5;
inline int HuFanInfo::m_ofan_size() const {
  return m_ofan_.size();
}
inline void HuFanInfo::clear_m_ofan() {
  m_ofan_.Clear();
}
inline const ::proto::game::redis::MJ_BUFFER& HuFanInfo::m_ofan(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.HuFanInfo.m_ofan)
  return m_ofan_.Get(index);
}
inline ::proto::game::redis::MJ_BUFFER* HuFanInfo::mutable_m_ofan(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.redis.HuFanInfo.m_ofan)
  return m_ofan_.Mutable(index);
}
inline ::proto::game::redis::MJ_BUFFER* HuFanInfo::add_m_ofan() {
  // @@protoc_insertion_point(field_add:proto.game.redis.HuFanInfo.m_ofan)
  return m_ofan_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::MJ_BUFFER >&
HuFanInfo::m_ofan() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.HuFanInfo.m_ofan)
  return m_ofan_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::MJ_BUFFER >*
HuFanInfo::mutable_m_ofan() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.HuFanInfo.m_ofan)
  return &m_ofan_;
}

// -------------------------------------------------------------------

// CGameAccout

// optional int32 m_round = 1;
inline bool CGameAccout::has_m_round() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameAccout::set_has_m_round() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGameAccout::clear_has_m_round() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGameAccout::clear_m_round() {
  m_round_ = 0;
  clear_has_m_round();
}
inline ::google::protobuf::int32 CGameAccout::m_round() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.CGameAccout.m_round)
  return m_round_;
}
inline void CGameAccout::set_m_round(::google::protobuf::int32 value) {
  set_has_m_round();
  m_round_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.CGameAccout.m_round)
}

// optional int32 m_roomid = 2;
inline bool CGameAccout::has_m_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameAccout::set_has_m_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGameAccout::clear_has_m_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGameAccout::clear_m_roomid() {
  m_roomid_ = 0;
  clear_has_m_roomid();
}
inline ::google::protobuf::int32 CGameAccout::m_roomid() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.CGameAccout.m_roomid)
  return m_roomid_;
}
inline void CGameAccout::set_m_roomid(::google::protobuf::int32 value) {
  set_has_m_roomid();
  m_roomid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.CGameAccout.m_roomid)
}

// repeated int32 m_paly_id = 3;
inline int CGameAccout::m_paly_id_size() const {
  return m_paly_id_.size();
}
inline void CGameAccout::clear_m_paly_id() {
  m_paly_id_.Clear();
}
inline ::google::protobuf::int32 CGameAccout::m_paly_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.CGameAccout.m_paly_id)
  return m_paly_id_.Get(index);
}
inline void CGameAccout::set_m_paly_id(int index, ::google::protobuf::int32 value) {
  m_paly_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.CGameAccout.m_paly_id)
}
inline void CGameAccout::add_m_paly_id(::google::protobuf::int32 value) {
  m_paly_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.CGameAccout.m_paly_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CGameAccout::m_paly_id() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.CGameAccout.m_paly_id)
  return m_paly_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CGameAccout::mutable_m_paly_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.CGameAccout.m_paly_id)
  return &m_paly_id_;
}

// repeated int32 m_score = 4;
inline int CGameAccout::m_score_size() const {
  return m_score_.size();
}
inline void CGameAccout::clear_m_score() {
  m_score_.Clear();
}
inline ::google::protobuf::int32 CGameAccout::m_score(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.CGameAccout.m_score)
  return m_score_.Get(index);
}
inline void CGameAccout::set_m_score(int index, ::google::protobuf::int32 value) {
  m_score_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.CGameAccout.m_score)
}
inline void CGameAccout::add_m_score(::google::protobuf::int32 value) {
  m_score_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.CGameAccout.m_score)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CGameAccout::m_score() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.CGameAccout.m_score)
  return m_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CGameAccout::mutable_m_score() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.CGameAccout.m_score)
  return &m_score_;
}

// repeated int32 m_total_score = 5;
inline int CGameAccout::m_total_score_size() const {
  return m_total_score_.size();
}
inline void CGameAccout::clear_m_total_score() {
  m_total_score_.Clear();
}
inline ::google::protobuf::int32 CGameAccout::m_total_score(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.CGameAccout.m_total_score)
  return m_total_score_.Get(index);
}
inline void CGameAccout::set_m_total_score(int index, ::google::protobuf::int32 value) {
  m_total_score_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.CGameAccout.m_total_score)
}
inline void CGameAccout::add_m_total_score(::google::protobuf::int32 value) {
  m_total_score_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.CGameAccout.m_total_score)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CGameAccout::m_total_score() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.CGameAccout.m_total_score)
  return m_total_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CGameAccout::mutable_m_total_score() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.CGameAccout.m_total_score)
  return &m_total_score_;
}

// -------------------------------------------------------------------

// ForbidWin

// repeated int32 m_lockcard = 1;
inline int ForbidWin::m_lockcard_size() const {
  return m_lockcard_.size();
}
inline void ForbidWin::clear_m_lockcard() {
  m_lockcard_.Clear();
}
inline ::google::protobuf::int32 ForbidWin::m_lockcard(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.ForbidWin.m_lockcard)
  return m_lockcard_.Get(index);
}
inline void ForbidWin::set_m_lockcard(int index, ::google::protobuf::int32 value) {
  m_lockcard_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.ForbidWin.m_lockcard)
}
inline void ForbidWin::add_m_lockcard(::google::protobuf::int32 value) {
  m_lockcard_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.ForbidWin.m_lockcard)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ForbidWin::m_lockcard() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.ForbidWin.m_lockcard)
  return m_lockcard_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ForbidWin::mutable_m_lockcard() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.ForbidWin.m_lockcard)
  return &m_lockcard_;
}

// optional int32 m_lockpoints = 2;
inline bool ForbidWin::has_m_lockpoints() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForbidWin::set_has_m_lockpoints() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForbidWin::clear_has_m_lockpoints() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForbidWin::clear_m_lockpoints() {
  m_lockpoints_ = 0;
  clear_has_m_lockpoints();
}
inline ::google::protobuf::int32 ForbidWin::m_lockpoints() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.ForbidWin.m_lockpoints)
  return m_lockpoints_;
}
inline void ForbidWin::set_m_lockpoints(::google::protobuf::int32 value) {
  set_has_m_lockpoints();
  m_lockpoints_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.ForbidWin.m_lockpoints)
}

// optional bool m_lock = 3;
inline bool ForbidWin::has_m_lock() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ForbidWin::set_has_m_lock() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ForbidWin::clear_has_m_lock() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ForbidWin::clear_m_lock() {
  m_lock_ = false;
  clear_has_m_lock();
}
inline bool ForbidWin::m_lock() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.ForbidWin.m_lock)
  return m_lock_;
}
inline void ForbidWin::set_m_lock(bool value) {
  set_has_m_lock();
  m_lock_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.ForbidWin.m_lock)
}

// -------------------------------------------------------------------

// Fantype_to_FanNum

// repeated int32 fan_num = 1;
inline int Fantype_to_FanNum::fan_num_size() const {
  return fan_num_.size();
}
inline void Fantype_to_FanNum::clear_fan_num() {
  fan_num_.Clear();
}
inline ::google::protobuf::int32 Fantype_to_FanNum::fan_num(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Fantype_to_FanNum.fan_num)
  return fan_num_.Get(index);
}
inline void Fantype_to_FanNum::set_fan_num(int index, ::google::protobuf::int32 value) {
  fan_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.Fantype_to_FanNum.fan_num)
}
inline void Fantype_to_FanNum::add_fan_num(::google::protobuf::int32 value) {
  fan_num_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.Fantype_to_FanNum.fan_num)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Fantype_to_FanNum::fan_num() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.Fantype_to_FanNum.fan_num)
  return fan_num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Fantype_to_FanNum::mutable_fan_num() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.Fantype_to_FanNum.fan_num)
  return &fan_num_;
}

// repeated int32 special_fan_num = 2;
inline int Fantype_to_FanNum::special_fan_num_size() const {
  return special_fan_num_.size();
}
inline void Fantype_to_FanNum::clear_special_fan_num() {
  special_fan_num_.Clear();
}
inline ::google::protobuf::int32 Fantype_to_FanNum::special_fan_num(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.Fantype_to_FanNum.special_fan_num)
  return special_fan_num_.Get(index);
}
inline void Fantype_to_FanNum::set_special_fan_num(int index, ::google::protobuf::int32 value) {
  special_fan_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.Fantype_to_FanNum.special_fan_num)
}
inline void Fantype_to_FanNum::add_special_fan_num(::google::protobuf::int32 value) {
  special_fan_num_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.Fantype_to_FanNum.special_fan_num)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Fantype_to_FanNum::special_fan_num() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.Fantype_to_FanNum.special_fan_num)
  return special_fan_num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Fantype_to_FanNum::mutable_special_fan_num() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.Fantype_to_FanNum.special_fan_num)
  return &special_fan_num_;
}

// -------------------------------------------------------------------

// tagPlayerGPS

// optional double latitude = 1;
inline bool tagPlayerGPS::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagPlayerGPS::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagPlayerGPS::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagPlayerGPS::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double tagPlayerGPS::latitude() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayerGPS.latitude)
  return latitude_;
}
inline void tagPlayerGPS::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayerGPS.latitude)
}

// optional double longitude = 2;
inline bool tagPlayerGPS::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagPlayerGPS::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagPlayerGPS::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagPlayerGPS::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double tagPlayerGPS::longitude() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayerGPS.longitude)
  return longitude_;
}
inline void tagPlayerGPS::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayerGPS.longitude)
}

// optional string city = 3;
inline bool tagPlayerGPS::has_city() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagPlayerGPS::set_has_city() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagPlayerGPS::clear_has_city() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagPlayerGPS::clear_city() {
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& tagPlayerGPS::city() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagPlayerGPS.city)
  return *city_;
}
inline void tagPlayerGPS::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagPlayerGPS.city)
}
inline void tagPlayerGPS::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.redis.tagPlayerGPS.city)
}
inline void tagPlayerGPS::set_city(const char* value, size_t size) {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.redis.tagPlayerGPS.city)
}
inline ::std::string* tagPlayerGPS::mutable_city() {
  set_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagPlayerGPS.city)
  return city_;
}
inline ::std::string* tagPlayerGPS::release_city() {
  clear_has_city();
  if (city_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void tagPlayerGPS::set_allocated_city(::std::string* city) {
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.tagPlayerGPS.city)
}

// -------------------------------------------------------------------

// tagRedisInfo

// optional int32 tid = 1;
inline bool tagRedisInfo::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagRedisInfo::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagRedisInfo::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagRedisInfo::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 tagRedisInfo::tid() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.tid)
  return tid_;
}
inline void tagRedisInfo::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.tid)
}

// optional int32 vid = 2;
inline bool tagRedisInfo::has_vid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagRedisInfo::set_has_vid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagRedisInfo::clear_has_vid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagRedisInfo::clear_vid() {
  vid_ = 0;
  clear_has_vid();
}
inline ::google::protobuf::int32 tagRedisInfo::vid() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.vid)
  return vid_;
}
inline void tagRedisInfo::set_vid(::google::protobuf::int32 value) {
  set_has_vid();
  vid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.vid)
}

// optional int32 zid = 3;
inline bool tagRedisInfo::has_zid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagRedisInfo::set_has_zid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagRedisInfo::clear_has_zid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagRedisInfo::clear_zid() {
  zid_ = 0;
  clear_has_zid();
}
inline ::google::protobuf::int32 tagRedisInfo::zid() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.zid)
  return zid_;
}
inline void tagRedisInfo::set_zid(::google::protobuf::int32 value) {
  set_has_zid();
  zid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.zid)
}

// optional int32 base_money = 4;
inline bool tagRedisInfo::has_base_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tagRedisInfo::set_has_base_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tagRedisInfo::clear_has_base_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tagRedisInfo::clear_base_money() {
  base_money_ = 0;
  clear_has_base_money();
}
inline ::google::protobuf::int32 tagRedisInfo::base_money() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.base_money)
  return base_money_;
}
inline void tagRedisInfo::set_base_money(::google::protobuf::int32 value) {
  set_has_base_money();
  base_money_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.base_money)
}

// optional int32 roomgold = 5;
inline bool tagRedisInfo::has_roomgold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tagRedisInfo::set_has_roomgold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tagRedisInfo::clear_has_roomgold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tagRedisInfo::clear_roomgold() {
  roomgold_ = 0;
  clear_has_roomgold();
}
inline ::google::protobuf::int32 tagRedisInfo::roomgold() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.roomgold)
  return roomgold_;
}
inline void tagRedisInfo::set_roomgold(::google::protobuf::int32 value) {
  set_has_roomgold();
  roomgold_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.roomgold)
}

// optional int32 stand_money = 6;
inline bool tagRedisInfo::has_stand_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tagRedisInfo::set_has_stand_money() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tagRedisInfo::clear_has_stand_money() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tagRedisInfo::clear_stand_money() {
  stand_money_ = 0;
  clear_has_stand_money();
}
inline ::google::protobuf::int32 tagRedisInfo::stand_money() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.stand_money)
  return stand_money_;
}
inline void tagRedisInfo::set_stand_money(::google::protobuf::int32 value) {
  set_has_stand_money();
  stand_money_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.stand_money)
}

// optional int32 lose_exp = 7;
inline bool tagRedisInfo::has_lose_exp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tagRedisInfo::set_has_lose_exp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tagRedisInfo::clear_has_lose_exp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tagRedisInfo::clear_lose_exp() {
  lose_exp_ = 0;
  clear_has_lose_exp();
}
inline ::google::protobuf::int32 tagRedisInfo::lose_exp() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.lose_exp)
  return lose_exp_;
}
inline void tagRedisInfo::set_lose_exp(::google::protobuf::int32 value) {
  set_has_lose_exp();
  lose_exp_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.lose_exp)
}

// optional int32 win_exp = 8;
inline bool tagRedisInfo::has_win_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tagRedisInfo::set_has_win_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tagRedisInfo::clear_has_win_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tagRedisInfo::clear_win_exp() {
  win_exp_ = 0;
  clear_has_win_exp();
}
inline ::google::protobuf::int32 tagRedisInfo::win_exp() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.win_exp)
  return win_exp_;
}
inline void tagRedisInfo::set_win_exp(::google::protobuf::int32 value) {
  set_has_win_exp();
  win_exp_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.win_exp)
}

// optional int32 m_basescore = 9;
inline bool tagRedisInfo::has_m_basescore() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void tagRedisInfo::set_has_m_basescore() {
  _has_bits_[0] |= 0x00000100u;
}
inline void tagRedisInfo::clear_has_m_basescore() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void tagRedisInfo::clear_m_basescore() {
  m_basescore_ = 0;
  clear_has_m_basescore();
}
inline ::google::protobuf::int32 tagRedisInfo::m_basescore() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_basescore)
  return m_basescore_;
}
inline void tagRedisInfo::set_m_basescore(::google::protobuf::int32 value) {
  set_has_m_basescore();
  m_basescore_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_basescore)
}

// optional .proto.game.redis.MJCustomizedConf m_conf = 10;
inline bool tagRedisInfo::has_m_conf() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void tagRedisInfo::set_has_m_conf() {
  _has_bits_[0] |= 0x00000200u;
}
inline void tagRedisInfo::clear_has_m_conf() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void tagRedisInfo::clear_m_conf() {
  if (m_conf_ != NULL) m_conf_->::proto::game::redis::MJCustomizedConf::Clear();
  clear_has_m_conf();
}
inline const ::proto::game::redis::MJCustomizedConf& tagRedisInfo::m_conf() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_conf)
  return m_conf_ != NULL ? *m_conf_ : *default_instance_->m_conf_;
}
inline ::proto::game::redis::MJCustomizedConf* tagRedisInfo::mutable_m_conf() {
  set_has_m_conf();
  if (m_conf_ == NULL) m_conf_ = new ::proto::game::redis::MJCustomizedConf;
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.m_conf)
  return m_conf_;
}
inline ::proto::game::redis::MJCustomizedConf* tagRedisInfo::release_m_conf() {
  clear_has_m_conf();
  ::proto::game::redis::MJCustomizedConf* temp = m_conf_;
  m_conf_ = NULL;
  return temp;
}
inline void tagRedisInfo::set_allocated_m_conf(::proto::game::redis::MJCustomizedConf* m_conf) {
  delete m_conf_;
  m_conf_ = m_conf;
  if (m_conf) {
    set_has_m_conf();
  } else {
    clear_has_m_conf();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.tagRedisInfo.m_conf)
}

// optional int32 m_room_owner_uid = 11;
inline bool tagRedisInfo::has_m_room_owner_uid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void tagRedisInfo::set_has_m_room_owner_uid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void tagRedisInfo::clear_has_m_room_owner_uid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void tagRedisInfo::clear_m_room_owner_uid() {
  m_room_owner_uid_ = 0;
  clear_has_m_room_owner_uid();
}
inline ::google::protobuf::int32 tagRedisInfo::m_room_owner_uid() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_room_owner_uid)
  return m_room_owner_uid_;
}
inline void tagRedisInfo::set_m_room_owner_uid(::google::protobuf::int32 value) {
  set_has_m_room_owner_uid();
  m_room_owner_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_room_owner_uid)
}

// optional int32 m_room_status = 12;
inline bool tagRedisInfo::has_m_room_status() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void tagRedisInfo::set_has_m_room_status() {
  _has_bits_[0] |= 0x00000800u;
}
inline void tagRedisInfo::clear_has_m_room_status() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void tagRedisInfo::clear_m_room_status() {
  m_room_status_ = 0;
  clear_has_m_room_status();
}
inline ::google::protobuf::int32 tagRedisInfo::m_room_status() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_room_status)
  return m_room_status_;
}
inline void tagRedisInfo::set_m_room_status(::google::protobuf::int32 value) {
  set_has_m_room_status();
  m_room_status_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_room_status)
}

// optional .proto.game.redis.Table_TotalRecordInfo m_totalrecordinfo = 13;
inline bool tagRedisInfo::has_m_totalrecordinfo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void tagRedisInfo::set_has_m_totalrecordinfo() {
  _has_bits_[0] |= 0x00001000u;
}
inline void tagRedisInfo::clear_has_m_totalrecordinfo() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void tagRedisInfo::clear_m_totalrecordinfo() {
  if (m_totalrecordinfo_ != NULL) m_totalrecordinfo_->::proto::game::redis::Table_TotalRecordInfo::Clear();
  clear_has_m_totalrecordinfo();
}
inline const ::proto::game::redis::Table_TotalRecordInfo& tagRedisInfo::m_totalrecordinfo() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_totalrecordinfo)
  return m_totalrecordinfo_ != NULL ? *m_totalrecordinfo_ : *default_instance_->m_totalrecordinfo_;
}
inline ::proto::game::redis::Table_TotalRecordInfo* tagRedisInfo::mutable_m_totalrecordinfo() {
  set_has_m_totalrecordinfo();
  if (m_totalrecordinfo_ == NULL) m_totalrecordinfo_ = new ::proto::game::redis::Table_TotalRecordInfo;
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.m_totalrecordinfo)
  return m_totalrecordinfo_;
}
inline ::proto::game::redis::Table_TotalRecordInfo* tagRedisInfo::release_m_totalrecordinfo() {
  clear_has_m_totalrecordinfo();
  ::proto::game::redis::Table_TotalRecordInfo* temp = m_totalrecordinfo_;
  m_totalrecordinfo_ = NULL;
  return temp;
}
inline void tagRedisInfo::set_allocated_m_totalrecordinfo(::proto::game::redis::Table_TotalRecordInfo* m_totalrecordinfo) {
  delete m_totalrecordinfo_;
  m_totalrecordinfo_ = m_totalrecordinfo;
  if (m_totalrecordinfo) {
    set_has_m_totalrecordinfo();
  } else {
    clear_has_m_totalrecordinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.tagRedisInfo.m_totalrecordinfo)
}

// optional int32 m_game_player = 14;
inline bool tagRedisInfo::has_m_game_player() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void tagRedisInfo::set_has_m_game_player() {
  _has_bits_[0] |= 0x00002000u;
}
inline void tagRedisInfo::clear_has_m_game_player() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void tagRedisInfo::clear_m_game_player() {
  m_game_player_ = 0;
  clear_has_m_game_player();
}
inline ::google::protobuf::int32 tagRedisInfo::m_game_player() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_game_player)
  return m_game_player_;
}
inline void tagRedisInfo::set_m_game_player(::google::protobuf::int32 value) {
  set_has_m_game_player();
  m_game_player_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_game_player)
}

// repeated bool m_online_beat = 15;
inline int tagRedisInfo::m_online_beat_size() const {
  return m_online_beat_.size();
}
inline void tagRedisInfo::clear_m_online_beat() {
  m_online_beat_.Clear();
}
inline bool tagRedisInfo::m_online_beat(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_online_beat)
  return m_online_beat_.Get(index);
}
inline void tagRedisInfo::set_m_online_beat(int index, bool value) {
  m_online_beat_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_online_beat)
}
inline void tagRedisInfo::add_m_online_beat(bool value) {
  m_online_beat_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_online_beat)
}
inline const ::google::protobuf::RepeatedField< bool >&
tagRedisInfo::m_online_beat() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_online_beat)
  return m_online_beat_;
}
inline ::google::protobuf::RepeatedField< bool >*
tagRedisInfo::mutable_m_online_beat() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_online_beat)
  return &m_online_beat_;
}

// optional string m_videostr = 16;
inline bool tagRedisInfo::has_m_videostr() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void tagRedisInfo::set_has_m_videostr() {
  _has_bits_[0] |= 0x00008000u;
}
inline void tagRedisInfo::clear_has_m_videostr() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void tagRedisInfo::clear_m_videostr() {
  if (m_videostr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    m_videostr_->clear();
  }
  clear_has_m_videostr();
}
inline const ::std::string& tagRedisInfo::m_videostr() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_videostr)
  return *m_videostr_;
}
inline void tagRedisInfo::set_m_videostr(const ::std::string& value) {
  set_has_m_videostr();
  if (m_videostr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    m_videostr_ = new ::std::string;
  }
  m_videostr_->assign(value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_videostr)
}
inline void tagRedisInfo::set_m_videostr(const char* value) {
  set_has_m_videostr();
  if (m_videostr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    m_videostr_ = new ::std::string;
  }
  m_videostr_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.redis.tagRedisInfo.m_videostr)
}
inline void tagRedisInfo::set_m_videostr(const char* value, size_t size) {
  set_has_m_videostr();
  if (m_videostr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    m_videostr_ = new ::std::string;
  }
  m_videostr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.redis.tagRedisInfo.m_videostr)
}
inline ::std::string* tagRedisInfo::mutable_m_videostr() {
  set_has_m_videostr();
  if (m_videostr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    m_videostr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.m_videostr)
  return m_videostr_;
}
inline ::std::string* tagRedisInfo::release_m_videostr() {
  clear_has_m_videostr();
  if (m_videostr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = m_videostr_;
    m_videostr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void tagRedisInfo::set_allocated_m_videostr(::std::string* m_videostr) {
  if (m_videostr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete m_videostr_;
  }
  if (m_videostr) {
    set_has_m_videostr();
    m_videostr_ = m_videostr;
  } else {
    clear_has_m_videostr();
    m_videostr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.tagRedisInfo.m_videostr)
}

// optional bool m_randomseat = 17;
inline bool tagRedisInfo::has_m_randomseat() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void tagRedisInfo::set_has_m_randomseat() {
  _has_bits_[0] |= 0x00010000u;
}
inline void tagRedisInfo::clear_has_m_randomseat() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void tagRedisInfo::clear_m_randomseat() {
  m_randomseat_ = false;
  clear_has_m_randomseat();
}
inline bool tagRedisInfo::m_randomseat() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_randomseat)
  return m_randomseat_;
}
inline void tagRedisInfo::set_m_randomseat(bool value) {
  set_has_m_randomseat();
  m_randomseat_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_randomseat)
}

// optional bool m_offlinenoop = 18;
inline bool tagRedisInfo::has_m_offlinenoop() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void tagRedisInfo::set_has_m_offlinenoop() {
  _has_bits_[0] |= 0x00020000u;
}
inline void tagRedisInfo::clear_has_m_offlinenoop() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void tagRedisInfo::clear_m_offlinenoop() {
  m_offlinenoop_ = false;
  clear_has_m_offlinenoop();
}
inline bool tagRedisInfo::m_offlinenoop() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_offlinenoop)
  return m_offlinenoop_;
}
inline void tagRedisInfo::set_m_offlinenoop(bool value) {
  set_has_m_offlinenoop();
  m_offlinenoop_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_offlinenoop)
}

// optional int32 m_bdelaytime = 19;
inline bool tagRedisInfo::has_m_bdelaytime() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void tagRedisInfo::set_has_m_bdelaytime() {
  _has_bits_[0] |= 0x00040000u;
}
inline void tagRedisInfo::clear_has_m_bdelaytime() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void tagRedisInfo::clear_m_bdelaytime() {
  m_bdelaytime_ = 0;
  clear_has_m_bdelaytime();
}
inline ::google::protobuf::int32 tagRedisInfo::m_bdelaytime() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_bdelaytime)
  return m_bdelaytime_;
}
inline void tagRedisInfo::set_m_bdelaytime(::google::protobuf::int32 value) {
  set_has_m_bdelaytime();
  m_bdelaytime_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_bdelaytime)
}

// repeated .proto.game.redis.Seat m_seatplayer = 20;
inline int tagRedisInfo::m_seatplayer_size() const {
  return m_seatplayer_.size();
}
inline void tagRedisInfo::clear_m_seatplayer() {
  m_seatplayer_.Clear();
}
inline const ::proto::game::redis::Seat& tagRedisInfo::m_seatplayer(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_seatplayer)
  return m_seatplayer_.Get(index);
}
inline ::proto::game::redis::Seat* tagRedisInfo::mutable_m_seatplayer(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.m_seatplayer)
  return m_seatplayer_.Mutable(index);
}
inline ::proto::game::redis::Seat* tagRedisInfo::add_m_seatplayer() {
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_seatplayer)
  return m_seatplayer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::Seat >&
tagRedisInfo::m_seatplayer() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_seatplayer)
  return m_seatplayer_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::Seat >*
tagRedisInfo::mutable_m_seatplayer() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_seatplayer)
  return &m_seatplayer_;
}

// optional .proto.game.redis.Shai_Set m_start_shai = 21;
inline bool tagRedisInfo::has_m_start_shai() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void tagRedisInfo::set_has_m_start_shai() {
  _has_bits_[0] |= 0x00100000u;
}
inline void tagRedisInfo::clear_has_m_start_shai() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void tagRedisInfo::clear_m_start_shai() {
  if (m_start_shai_ != NULL) m_start_shai_->::proto::game::redis::Shai_Set::Clear();
  clear_has_m_start_shai();
}
inline const ::proto::game::redis::Shai_Set& tagRedisInfo::m_start_shai() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_start_shai)
  return m_start_shai_ != NULL ? *m_start_shai_ : *default_instance_->m_start_shai_;
}
inline ::proto::game::redis::Shai_Set* tagRedisInfo::mutable_m_start_shai() {
  set_has_m_start_shai();
  if (m_start_shai_ == NULL) m_start_shai_ = new ::proto::game::redis::Shai_Set;
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.m_start_shai)
  return m_start_shai_;
}
inline ::proto::game::redis::Shai_Set* tagRedisInfo::release_m_start_shai() {
  clear_has_m_start_shai();
  ::proto::game::redis::Shai_Set* temp = m_start_shai_;
  m_start_shai_ = NULL;
  return temp;
}
inline void tagRedisInfo::set_allocated_m_start_shai(::proto::game::redis::Shai_Set* m_start_shai) {
  delete m_start_shai_;
  m_start_shai_ = m_start_shai;
  if (m_start_shai) {
    set_has_m_start_shai();
  } else {
    clear_has_m_start_shai();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.tagRedisInfo.m_start_shai)
}

// optional int32 m_bcurplayers = 22;
inline bool tagRedisInfo::has_m_bcurplayers() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void tagRedisInfo::set_has_m_bcurplayers() {
  _has_bits_[0] |= 0x00200000u;
}
inline void tagRedisInfo::clear_has_m_bcurplayers() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void tagRedisInfo::clear_m_bcurplayers() {
  m_bcurplayers_ = 0;
  clear_has_m_bcurplayers();
}
inline ::google::protobuf::int32 tagRedisInfo::m_bcurplayers() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_bcurplayers)
  return m_bcurplayers_;
}
inline void tagRedisInfo::set_m_bcurplayers(::google::protobuf::int32 value) {
  set_has_m_bcurplayers();
  m_bcurplayers_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_bcurplayers)
}

// optional int32 m_bgamestate = 23;
inline bool tagRedisInfo::has_m_bgamestate() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void tagRedisInfo::set_has_m_bgamestate() {
  _has_bits_[0] |= 0x00400000u;
}
inline void tagRedisInfo::clear_has_m_bgamestate() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void tagRedisInfo::clear_m_bgamestate() {
  m_bgamestate_ = 0;
  clear_has_m_bgamestate();
}
inline ::google::protobuf::int32 tagRedisInfo::m_bgamestate() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_bgamestate)
  return m_bgamestate_;
}
inline void tagRedisInfo::set_m_bgamestate(::google::protobuf::int32 value) {
  set_has_m_bgamestate();
  m_bgamestate_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_bgamestate)
}

// optional int32 m_disband_resuser = 24;
inline bool tagRedisInfo::has_m_disband_resuser() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void tagRedisInfo::set_has_m_disband_resuser() {
  _has_bits_[0] |= 0x00800000u;
}
inline void tagRedisInfo::clear_has_m_disband_resuser() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void tagRedisInfo::clear_m_disband_resuser() {
  m_disband_resuser_ = 0;
  clear_has_m_disband_resuser();
}
inline ::google::protobuf::int32 tagRedisInfo::m_disband_resuser() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_disband_resuser)
  return m_disband_resuser_;
}
inline void tagRedisInfo::set_m_disband_resuser(::google::protobuf::int32 value) {
  set_has_m_disband_resuser();
  m_disband_resuser_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_disband_resuser)
}

// repeated .proto.game.redis.HandCards m_handcard = 25;
inline int tagRedisInfo::m_handcard_size() const {
  return m_handcard_.size();
}
inline void tagRedisInfo::clear_m_handcard() {
  m_handcard_.Clear();
}
inline const ::proto::game::redis::HandCards& tagRedisInfo::m_handcard(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_handcard)
  return m_handcard_.Get(index);
}
inline ::proto::game::redis::HandCards* tagRedisInfo::mutable_m_handcard(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.m_handcard)
  return m_handcard_.Mutable(index);
}
inline ::proto::game::redis::HandCards* tagRedisInfo::add_m_handcard() {
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_handcard)
  return m_handcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::HandCards >&
tagRedisInfo::m_handcard() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_handcard)
  return m_handcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::HandCards >*
tagRedisInfo::mutable_m_handcard() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_handcard)
  return &m_handcard_;
}

// repeated bool m_isoffline = 26;
inline int tagRedisInfo::m_isoffline_size() const {
  return m_isoffline_.size();
}
inline void tagRedisInfo::clear_m_isoffline() {
  m_isoffline_.Clear();
}
inline bool tagRedisInfo::m_isoffline(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_isoffline)
  return m_isoffline_.Get(index);
}
inline void tagRedisInfo::set_m_isoffline(int index, bool value) {
  m_isoffline_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_isoffline)
}
inline void tagRedisInfo::add_m_isoffline(bool value) {
  m_isoffline_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_isoffline)
}
inline const ::google::protobuf::RepeatedField< bool >&
tagRedisInfo::m_isoffline() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_isoffline)
  return m_isoffline_;
}
inline ::google::protobuf::RepeatedField< bool >*
tagRedisInfo::mutable_m_isoffline() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_isoffline)
  return &m_isoffline_;
}

// repeated bool m_bistrustee = 27;
inline int tagRedisInfo::m_bistrustee_size() const {
  return m_bistrustee_.size();
}
inline void tagRedisInfo::clear_m_bistrustee() {
  m_bistrustee_.Clear();
}
inline bool tagRedisInfo::m_bistrustee(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_bistrustee)
  return m_bistrustee_.Get(index);
}
inline void tagRedisInfo::set_m_bistrustee(int index, bool value) {
  m_bistrustee_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_bistrustee)
}
inline void tagRedisInfo::add_m_bistrustee(bool value) {
  m_bistrustee_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_bistrustee)
}
inline const ::google::protobuf::RepeatedField< bool >&
tagRedisInfo::m_bistrustee() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_bistrustee)
  return m_bistrustee_;
}
inline ::google::protobuf::RepeatedField< bool >*
tagRedisInfo::mutable_m_bistrustee() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_bistrustee)
  return &m_bistrustee_;
}

// repeated bool m_bautohu = 28;
inline int tagRedisInfo::m_bautohu_size() const {
  return m_bautohu_.size();
}
inline void tagRedisInfo::clear_m_bautohu() {
  m_bautohu_.Clear();
}
inline bool tagRedisInfo::m_bautohu(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_bautohu)
  return m_bautohu_.Get(index);
}
inline void tagRedisInfo::set_m_bautohu(int index, bool value) {
  m_bautohu_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_bautohu)
}
inline void tagRedisInfo::add_m_bautohu(bool value) {
  m_bautohu_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_bautohu)
}
inline const ::google::protobuf::RepeatedField< bool >&
tagRedisInfo::m_bautohu() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_bautohu)
  return m_bautohu_;
}
inline ::google::protobuf::RepeatedField< bool >*
tagRedisInfo::mutable_m_bautohu() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_bautohu)
  return &m_bautohu_;
}

// optional bool m_bgangcalcimme = 29;
inline bool tagRedisInfo::has_m_bgangcalcimme() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void tagRedisInfo::set_has_m_bgangcalcimme() {
  _has_bits_[0] |= 0x10000000u;
}
inline void tagRedisInfo::clear_has_m_bgangcalcimme() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void tagRedisInfo::clear_m_bgangcalcimme() {
  m_bgangcalcimme_ = false;
  clear_has_m_bgangcalcimme();
}
inline bool tagRedisInfo::m_bgangcalcimme() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_bgangcalcimme)
  return m_bgangcalcimme_;
}
inline void tagRedisInfo::set_m_bgangcalcimme(bool value) {
  set_has_m_bgangcalcimme();
  m_bgangcalcimme_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_bgangcalcimme)
}

// optional int32 m_bbanker = 30;
inline bool tagRedisInfo::has_m_bbanker() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void tagRedisInfo::set_has_m_bbanker() {
  _has_bits_[0] |= 0x20000000u;
}
inline void tagRedisInfo::clear_has_m_bbanker() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void tagRedisInfo::clear_m_bbanker() {
  m_bbanker_ = 0;
  clear_has_m_bbanker();
}
inline ::google::protobuf::int32 tagRedisInfo::m_bbanker() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_bbanker)
  return m_bbanker_;
}
inline void tagRedisInfo::set_m_bbanker(::google::protobuf::int32 value) {
  set_has_m_bbanker();
  m_bbanker_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_bbanker)
}

// optional int32 m_last_banker = 31;
inline bool tagRedisInfo::has_m_last_banker() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void tagRedisInfo::set_has_m_last_banker() {
  _has_bits_[0] |= 0x40000000u;
}
inline void tagRedisInfo::clear_has_m_last_banker() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void tagRedisInfo::clear_m_last_banker() {
  m_last_banker_ = 0;
  clear_has_m_last_banker();
}
inline ::google::protobuf::int32 tagRedisInfo::m_last_banker() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_last_banker)
  return m_last_banker_;
}
inline void tagRedisInfo::set_m_last_banker(::google::protobuf::int32 value) {
  set_has_m_last_banker();
  m_last_banker_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_last_banker)
}

// optional .proto.game.redis.CCardPool m_cardpool = 32;
inline bool tagRedisInfo::has_m_cardpool() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void tagRedisInfo::set_has_m_cardpool() {
  _has_bits_[0] |= 0x80000000u;
}
inline void tagRedisInfo::clear_has_m_cardpool() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void tagRedisInfo::clear_m_cardpool() {
  if (m_cardpool_ != NULL) m_cardpool_->::proto::game::redis::CCardPool::Clear();
  clear_has_m_cardpool();
}
inline const ::proto::game::redis::CCardPool& tagRedisInfo::m_cardpool() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_cardpool)
  return m_cardpool_ != NULL ? *m_cardpool_ : *default_instance_->m_cardpool_;
}
inline ::proto::game::redis::CCardPool* tagRedisInfo::mutable_m_cardpool() {
  set_has_m_cardpool();
  if (m_cardpool_ == NULL) m_cardpool_ = new ::proto::game::redis::CCardPool;
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.m_cardpool)
  return m_cardpool_;
}
inline ::proto::game::redis::CCardPool* tagRedisInfo::release_m_cardpool() {
  clear_has_m_cardpool();
  ::proto::game::redis::CCardPool* temp = m_cardpool_;
  m_cardpool_ = NULL;
  return temp;
}
inline void tagRedisInfo::set_allocated_m_cardpool(::proto::game::redis::CCardPool* m_cardpool) {
  delete m_cardpool_;
  m_cardpool_ = m_cardpool;
  if (m_cardpool) {
    set_has_m_cardpool();
  } else {
    clear_has_m_cardpool();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.tagRedisInfo.m_cardpool)
}

// repeated int32 m_bgetcardcount = 33;
inline int tagRedisInfo::m_bgetcardcount_size() const {
  return m_bgetcardcount_.size();
}
inline void tagRedisInfo::clear_m_bgetcardcount() {
  m_bgetcardcount_.Clear();
}
inline ::google::protobuf::int32 tagRedisInfo::m_bgetcardcount(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_bgetcardcount)
  return m_bgetcardcount_.Get(index);
}
inline void tagRedisInfo::set_m_bgetcardcount(int index, ::google::protobuf::int32 value) {
  m_bgetcardcount_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_bgetcardcount)
}
inline void tagRedisInfo::add_m_bgetcardcount(::google::protobuf::int32 value) {
  m_bgetcardcount_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_bgetcardcount)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagRedisInfo::m_bgetcardcount() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_bgetcardcount)
  return m_bgetcardcount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagRedisInfo::mutable_m_bgetcardcount() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_bgetcardcount)
  return &m_bgetcardcount_;
}

// repeated int32 m_buseroperate = 34;
inline int tagRedisInfo::m_buseroperate_size() const {
  return m_buseroperate_.size();
}
inline void tagRedisInfo::clear_m_buseroperate() {
  m_buseroperate_.Clear();
}
inline ::google::protobuf::int32 tagRedisInfo::m_buseroperate(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_buseroperate)
  return m_buseroperate_.Get(index);
}
inline void tagRedisInfo::set_m_buseroperate(int index, ::google::protobuf::int32 value) {
  m_buseroperate_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_buseroperate)
}
inline void tagRedisInfo::add_m_buseroperate(::google::protobuf::int32 value) {
  m_buseroperate_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_buseroperate)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagRedisInfo::m_buseroperate() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_buseroperate)
  return m_buseroperate_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagRedisInfo::mutable_m_buseroperate() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_buseroperate)
  return &m_buseroperate_;
}

// optional int32 m_bcurchairid = 35;
inline bool tagRedisInfo::has_m_bcurchairid() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void tagRedisInfo::set_has_m_bcurchairid() {
  _has_bits_[1] |= 0x00000004u;
}
inline void tagRedisInfo::clear_has_m_bcurchairid() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void tagRedisInfo::clear_m_bcurchairid() {
  m_bcurchairid_ = 0;
  clear_has_m_bcurchairid();
}
inline ::google::protobuf::int32 tagRedisInfo::m_bcurchairid() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_bcurchairid)
  return m_bcurchairid_;
}
inline void tagRedisInfo::set_m_bcurchairid(::google::protobuf::int32 value) {
  set_has_m_bcurchairid();
  m_bcurchairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_bcurchairid)
}

// optional int32 m_boutcardchairid = 36;
inline bool tagRedisInfo::has_m_boutcardchairid() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void tagRedisInfo::set_has_m_boutcardchairid() {
  _has_bits_[1] |= 0x00000008u;
}
inline void tagRedisInfo::clear_has_m_boutcardchairid() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void tagRedisInfo::clear_m_boutcardchairid() {
  m_boutcardchairid_ = 0;
  clear_has_m_boutcardchairid();
}
inline ::google::protobuf::int32 tagRedisInfo::m_boutcardchairid() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_boutcardchairid)
  return m_boutcardchairid_;
}
inline void tagRedisInfo::set_m_boutcardchairid(::google::protobuf::int32 value) {
  set_has_m_boutcardchairid();
  m_boutcardchairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_boutcardchairid)
}

// optional int32 m_bcuroutcard = 37;
inline bool tagRedisInfo::has_m_bcuroutcard() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void tagRedisInfo::set_has_m_bcuroutcard() {
  _has_bits_[1] |= 0x00000010u;
}
inline void tagRedisInfo::clear_has_m_bcuroutcard() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void tagRedisInfo::clear_m_bcuroutcard() {
  m_bcuroutcard_ = 0;
  clear_has_m_bcuroutcard();
}
inline ::google::protobuf::int32 tagRedisInfo::m_bcuroutcard() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_bcuroutcard)
  return m_bcuroutcard_;
}
inline void tagRedisInfo::set_m_bcuroutcard(::google::protobuf::int32 value) {
  set_has_m_bcuroutcard();
  m_bcuroutcard_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_bcuroutcard)
}

// optional int32 m_bcurcard = 38;
inline bool tagRedisInfo::has_m_bcurcard() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void tagRedisInfo::set_has_m_bcurcard() {
  _has_bits_[1] |= 0x00000020u;
}
inline void tagRedisInfo::clear_has_m_bcurcard() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void tagRedisInfo::clear_m_bcurcard() {
  m_bcurcard_ = 0;
  clear_has_m_bcurcard();
}
inline ::google::protobuf::int32 tagRedisInfo::m_bcurcard() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_bcurcard)
  return m_bcurcard_;
}
inline void tagRedisInfo::set_m_bcurcard(::google::protobuf::int32 value) {
  set_has_m_bcurcard();
  m_bcurcard_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_bcurcard)
}

// repeated .proto.game.redis.MJ_BUFFER m_stuseroutcard = 39;
inline int tagRedisInfo::m_stuseroutcard_size() const {
  return m_stuseroutcard_.size();
}
inline void tagRedisInfo::clear_m_stuseroutcard() {
  m_stuseroutcard_.Clear();
}
inline const ::proto::game::redis::MJ_BUFFER& tagRedisInfo::m_stuseroutcard(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_stuseroutcard)
  return m_stuseroutcard_.Get(index);
}
inline ::proto::game::redis::MJ_BUFFER* tagRedisInfo::mutable_m_stuseroutcard(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.m_stuseroutcard)
  return m_stuseroutcard_.Mutable(index);
}
inline ::proto::game::redis::MJ_BUFFER* tagRedisInfo::add_m_stuseroutcard() {
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_stuseroutcard)
  return m_stuseroutcard_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::MJ_BUFFER >&
tagRedisInfo::m_stuseroutcard() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_stuseroutcard)
  return m_stuseroutcard_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::MJ_BUFFER >*
tagRedisInfo::mutable_m_stuseroutcard() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_stuseroutcard)
  return &m_stuseroutcard_;
}

// optional .proto.game.redis.MultiOpInfo multiopinfo = 40;
inline bool tagRedisInfo::has_multiopinfo() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void tagRedisInfo::set_has_multiopinfo() {
  _has_bits_[1] |= 0x00000080u;
}
inline void tagRedisInfo::clear_has_multiopinfo() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void tagRedisInfo::clear_multiopinfo() {
  if (multiopinfo_ != NULL) multiopinfo_->::proto::game::redis::MultiOpInfo::Clear();
  clear_has_multiopinfo();
}
inline const ::proto::game::redis::MultiOpInfo& tagRedisInfo::multiopinfo() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.multiopinfo)
  return multiopinfo_ != NULL ? *multiopinfo_ : *default_instance_->multiopinfo_;
}
inline ::proto::game::redis::MultiOpInfo* tagRedisInfo::mutable_multiopinfo() {
  set_has_multiopinfo();
  if (multiopinfo_ == NULL) multiopinfo_ = new ::proto::game::redis::MultiOpInfo;
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.multiopinfo)
  return multiopinfo_;
}
inline ::proto::game::redis::MultiOpInfo* tagRedisInfo::release_multiopinfo() {
  clear_has_multiopinfo();
  ::proto::game::redis::MultiOpInfo* temp = multiopinfo_;
  multiopinfo_ = NULL;
  return temp;
}
inline void tagRedisInfo::set_allocated_multiopinfo(::proto::game::redis::MultiOpInfo* multiopinfo) {
  delete multiopinfo_;
  multiopinfo_ = multiopinfo;
  if (multiopinfo) {
    set_has_multiopinfo();
  } else {
    clear_has_multiopinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.tagRedisInfo.multiopinfo)
}

// repeated int32 m_passhuplayer = 41;
inline int tagRedisInfo::m_passhuplayer_size() const {
  return m_passhuplayer_.size();
}
inline void tagRedisInfo::clear_m_passhuplayer() {
  m_passhuplayer_.Clear();
}
inline ::google::protobuf::int32 tagRedisInfo::m_passhuplayer(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_passhuplayer)
  return m_passhuplayer_.Get(index);
}
inline void tagRedisInfo::set_m_passhuplayer(int index, ::google::protobuf::int32 value) {
  m_passhuplayer_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_passhuplayer)
}
inline void tagRedisInfo::add_m_passhuplayer(::google::protobuf::int32 value) {
  m_passhuplayer_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_passhuplayer)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagRedisInfo::m_passhuplayer() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_passhuplayer)
  return m_passhuplayer_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagRedisInfo::mutable_m_passhuplayer() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_passhuplayer)
  return &m_passhuplayer_;
}

// optional .proto.game.redis.RobAddInfo robaddinfo = 42;
inline bool tagRedisInfo::has_robaddinfo() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void tagRedisInfo::set_has_robaddinfo() {
  _has_bits_[1] |= 0x00000200u;
}
inline void tagRedisInfo::clear_has_robaddinfo() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void tagRedisInfo::clear_robaddinfo() {
  if (robaddinfo_ != NULL) robaddinfo_->::proto::game::redis::RobAddInfo::Clear();
  clear_has_robaddinfo();
}
inline const ::proto::game::redis::RobAddInfo& tagRedisInfo::robaddinfo() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.robaddinfo)
  return robaddinfo_ != NULL ? *robaddinfo_ : *default_instance_->robaddinfo_;
}
inline ::proto::game::redis::RobAddInfo* tagRedisInfo::mutable_robaddinfo() {
  set_has_robaddinfo();
  if (robaddinfo_ == NULL) robaddinfo_ = new ::proto::game::redis::RobAddInfo;
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.robaddinfo)
  return robaddinfo_;
}
inline ::proto::game::redis::RobAddInfo* tagRedisInfo::release_robaddinfo() {
  clear_has_robaddinfo();
  ::proto::game::redis::RobAddInfo* temp = robaddinfo_;
  robaddinfo_ = NULL;
  return temp;
}
inline void tagRedisInfo::set_allocated_robaddinfo(::proto::game::redis::RobAddInfo* robaddinfo) {
  delete robaddinfo_;
  robaddinfo_ = robaddinfo;
  if (robaddinfo) {
    set_has_robaddinfo();
  } else {
    clear_has_robaddinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.tagRedisInfo.robaddinfo)
}

// optional .proto.game.redis.LOWLEVELOPERATE m_brecordmultiop = 43;
inline bool tagRedisInfo::has_m_brecordmultiop() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void tagRedisInfo::set_has_m_brecordmultiop() {
  _has_bits_[1] |= 0x00000400u;
}
inline void tagRedisInfo::clear_has_m_brecordmultiop() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void tagRedisInfo::clear_m_brecordmultiop() {
  if (m_brecordmultiop_ != NULL) m_brecordmultiop_->::proto::game::redis::LOWLEVELOPERATE::Clear();
  clear_has_m_brecordmultiop();
}
inline const ::proto::game::redis::LOWLEVELOPERATE& tagRedisInfo::m_brecordmultiop() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_brecordmultiop)
  return m_brecordmultiop_ != NULL ? *m_brecordmultiop_ : *default_instance_->m_brecordmultiop_;
}
inline ::proto::game::redis::LOWLEVELOPERATE* tagRedisInfo::mutable_m_brecordmultiop() {
  set_has_m_brecordmultiop();
  if (m_brecordmultiop_ == NULL) m_brecordmultiop_ = new ::proto::game::redis::LOWLEVELOPERATE;
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.m_brecordmultiop)
  return m_brecordmultiop_;
}
inline ::proto::game::redis::LOWLEVELOPERATE* tagRedisInfo::release_m_brecordmultiop() {
  clear_has_m_brecordmultiop();
  ::proto::game::redis::LOWLEVELOPERATE* temp = m_brecordmultiop_;
  m_brecordmultiop_ = NULL;
  return temp;
}
inline void tagRedisInfo::set_allocated_m_brecordmultiop(::proto::game::redis::LOWLEVELOPERATE* m_brecordmultiop) {
  delete m_brecordmultiop_;
  m_brecordmultiop_ = m_brecordmultiop;
  if (m_brecordmultiop) {
    set_has_m_brecordmultiop();
  } else {
    clear_has_m_brecordmultiop();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.tagRedisInfo.m_brecordmultiop)
}

// optional .proto.game.redis.HuFanInfo hufaninfo = 44;
inline bool tagRedisInfo::has_hufaninfo() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void tagRedisInfo::set_has_hufaninfo() {
  _has_bits_[1] |= 0x00000800u;
}
inline void tagRedisInfo::clear_has_hufaninfo() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void tagRedisInfo::clear_hufaninfo() {
  if (hufaninfo_ != NULL) hufaninfo_->::proto::game::redis::HuFanInfo::Clear();
  clear_has_hufaninfo();
}
inline const ::proto::game::redis::HuFanInfo& tagRedisInfo::hufaninfo() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.hufaninfo)
  return hufaninfo_ != NULL ? *hufaninfo_ : *default_instance_->hufaninfo_;
}
inline ::proto::game::redis::HuFanInfo* tagRedisInfo::mutable_hufaninfo() {
  set_has_hufaninfo();
  if (hufaninfo_ == NULL) hufaninfo_ = new ::proto::game::redis::HuFanInfo;
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.hufaninfo)
  return hufaninfo_;
}
inline ::proto::game::redis::HuFanInfo* tagRedisInfo::release_hufaninfo() {
  clear_has_hufaninfo();
  ::proto::game::redis::HuFanInfo* temp = hufaninfo_;
  hufaninfo_ = NULL;
  return temp;
}
inline void tagRedisInfo::set_allocated_hufaninfo(::proto::game::redis::HuFanInfo* hufaninfo) {
  delete hufaninfo_;
  hufaninfo_ = hufaninfo;
  if (hufaninfo) {
    set_has_hufaninfo();
  } else {
    clear_has_hufaninfo();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.tagRedisInfo.hufaninfo)
}

// optional int32 m_applydisbandchairid = 45;
inline bool tagRedisInfo::has_m_applydisbandchairid() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void tagRedisInfo::set_has_m_applydisbandchairid() {
  _has_bits_[1] |= 0x00001000u;
}
inline void tagRedisInfo::clear_has_m_applydisbandchairid() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void tagRedisInfo::clear_m_applydisbandchairid() {
  m_applydisbandchairid_ = 0;
  clear_has_m_applydisbandchairid();
}
inline ::google::protobuf::int32 tagRedisInfo::m_applydisbandchairid() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_applydisbandchairid)
  return m_applydisbandchairid_;
}
inline void tagRedisInfo::set_m_applydisbandchairid(::google::protobuf::int32 value) {
  set_has_m_applydisbandchairid();
  m_applydisbandchairid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_applydisbandchairid)
}

// optional bool m_bisdisbandtable = 46;
inline bool tagRedisInfo::has_m_bisdisbandtable() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void tagRedisInfo::set_has_m_bisdisbandtable() {
  _has_bits_[1] |= 0x00002000u;
}
inline void tagRedisInfo::clear_has_m_bisdisbandtable() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void tagRedisInfo::clear_m_bisdisbandtable() {
  m_bisdisbandtable_ = false;
  clear_has_m_bisdisbandtable();
}
inline bool tagRedisInfo::m_bisdisbandtable() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_bisdisbandtable)
  return m_bisdisbandtable_;
}
inline void tagRedisInfo::set_m_bisdisbandtable(bool value) {
  set_has_m_bisdisbandtable();
  m_bisdisbandtable_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_bisdisbandtable)
}

// repeated int32 m_disbandchoose = 47;
inline int tagRedisInfo::m_disbandchoose_size() const {
  return m_disbandchoose_.size();
}
inline void tagRedisInfo::clear_m_disbandchoose() {
  m_disbandchoose_.Clear();
}
inline ::google::protobuf::int32 tagRedisInfo::m_disbandchoose(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_disbandchoose)
  return m_disbandchoose_.Get(index);
}
inline void tagRedisInfo::set_m_disbandchoose(int index, ::google::protobuf::int32 value) {
  m_disbandchoose_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_disbandchoose)
}
inline void tagRedisInfo::add_m_disbandchoose(::google::protobuf::int32 value) {
  m_disbandchoose_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_disbandchoose)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagRedisInfo::m_disbandchoose() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_disbandchoose)
  return m_disbandchoose_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagRedisInfo::mutable_m_disbandchoose() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_disbandchoose)
  return &m_disbandchoose_;
}

// optional int32 m_bdisbandcount = 48;
inline bool tagRedisInfo::has_m_bdisbandcount() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void tagRedisInfo::set_has_m_bdisbandcount() {
  _has_bits_[1] |= 0x00008000u;
}
inline void tagRedisInfo::clear_has_m_bdisbandcount() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void tagRedisInfo::clear_m_bdisbandcount() {
  m_bdisbandcount_ = 0;
  clear_has_m_bdisbandcount();
}
inline ::google::protobuf::int32 tagRedisInfo::m_bdisbandcount() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_bdisbandcount)
  return m_bdisbandcount_;
}
inline void tagRedisInfo::set_m_bdisbandcount(::google::protobuf::int32 value) {
  set_has_m_bdisbandcount();
  m_bdisbandcount_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_bdisbandcount)
}

// repeated int32 m_bovertimestate = 49;
inline int tagRedisInfo::m_bovertimestate_size() const {
  return m_bovertimestate_.size();
}
inline void tagRedisInfo::clear_m_bovertimestate() {
  m_bovertimestate_.Clear();
}
inline ::google::protobuf::int32 tagRedisInfo::m_bovertimestate(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_bovertimestate)
  return m_bovertimestate_.Get(index);
}
inline void tagRedisInfo::set_m_bovertimestate(int index, ::google::protobuf::int32 value) {
  m_bovertimestate_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_bovertimestate)
}
inline void tagRedisInfo::add_m_bovertimestate(::google::protobuf::int32 value) {
  m_bovertimestate_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_bovertimestate)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagRedisInfo::m_bovertimestate() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_bovertimestate)
  return m_bovertimestate_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagRedisInfo::mutable_m_bovertimestate() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_bovertimestate)
  return &m_bovertimestate_;
}

// optional int32 m_nplayingtimes = 50;
inline bool tagRedisInfo::has_m_nplayingtimes() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void tagRedisInfo::set_has_m_nplayingtimes() {
  _has_bits_[1] |= 0x00020000u;
}
inline void tagRedisInfo::clear_has_m_nplayingtimes() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void tagRedisInfo::clear_m_nplayingtimes() {
  m_nplayingtimes_ = 0;
  clear_has_m_nplayingtimes();
}
inline ::google::protobuf::int32 tagRedisInfo::m_nplayingtimes() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_nplayingtimes)
  return m_nplayingtimes_;
}
inline void tagRedisInfo::set_m_nplayingtimes(::google::protobuf::int32 value) {
  set_has_m_nplayingtimes();
  m_nplayingtimes_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_nplayingtimes)
}

// optional .proto.game.redis.CGameAccout m_account_info = 51;
inline bool tagRedisInfo::has_m_account_info() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void tagRedisInfo::set_has_m_account_info() {
  _has_bits_[1] |= 0x00040000u;
}
inline void tagRedisInfo::clear_has_m_account_info() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void tagRedisInfo::clear_m_account_info() {
  if (m_account_info_ != NULL) m_account_info_->::proto::game::redis::CGameAccout::Clear();
  clear_has_m_account_info();
}
inline const ::proto::game::redis::CGameAccout& tagRedisInfo::m_account_info() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_account_info)
  return m_account_info_ != NULL ? *m_account_info_ : *default_instance_->m_account_info_;
}
inline ::proto::game::redis::CGameAccout* tagRedisInfo::mutable_m_account_info() {
  set_has_m_account_info();
  if (m_account_info_ == NULL) m_account_info_ = new ::proto::game::redis::CGameAccout;
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.m_account_info)
  return m_account_info_;
}
inline ::proto::game::redis::CGameAccout* tagRedisInfo::release_m_account_info() {
  clear_has_m_account_info();
  ::proto::game::redis::CGameAccout* temp = m_account_info_;
  m_account_info_ = NULL;
  return temp;
}
inline void tagRedisInfo::set_allocated_m_account_info(::proto::game::redis::CGameAccout* m_account_info) {
  delete m_account_info_;
  m_account_info_ = m_account_info;
  if (m_account_info) {
    set_has_m_account_info();
  } else {
    clear_has_m_account_info();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.tagRedisInfo.m_account_info)
}

// repeated int32 m_userdissstate = 52;
inline int tagRedisInfo::m_userdissstate_size() const {
  return m_userdissstate_.size();
}
inline void tagRedisInfo::clear_m_userdissstate() {
  m_userdissstate_.Clear();
}
inline ::google::protobuf::int32 tagRedisInfo::m_userdissstate(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_userdissstate)
  return m_userdissstate_.Get(index);
}
inline void tagRedisInfo::set_m_userdissstate(int index, ::google::protobuf::int32 value) {
  m_userdissstate_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_userdissstate)
}
inline void tagRedisInfo::add_m_userdissstate(::google::protobuf::int32 value) {
  m_userdissstate_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_userdissstate)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagRedisInfo::m_userdissstate() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_userdissstate)
  return m_userdissstate_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagRedisInfo::mutable_m_userdissstate() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_userdissstate)
  return &m_userdissstate_;
}

// optional bool m_bouttimer = 53;
inline bool tagRedisInfo::has_m_bouttimer() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void tagRedisInfo::set_has_m_bouttimer() {
  _has_bits_[1] |= 0x00100000u;
}
inline void tagRedisInfo::clear_has_m_bouttimer() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void tagRedisInfo::clear_m_bouttimer() {
  m_bouttimer_ = false;
  clear_has_m_bouttimer();
}
inline bool tagRedisInfo::m_bouttimer() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_bouttimer)
  return m_bouttimer_;
}
inline void tagRedisInfo::set_m_bouttimer(bool value) {
  set_has_m_bouttimer();
  m_bouttimer_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_bouttimer)
}

// repeated .proto.game.redis.ForbidWin m_louhu = 54;
inline int tagRedisInfo::m_louhu_size() const {
  return m_louhu_.size();
}
inline void tagRedisInfo::clear_m_louhu() {
  m_louhu_.Clear();
}
inline const ::proto::game::redis::ForbidWin& tagRedisInfo::m_louhu(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_louhu)
  return m_louhu_.Get(index);
}
inline ::proto::game::redis::ForbidWin* tagRedisInfo::mutable_m_louhu(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.m_louhu)
  return m_louhu_.Mutable(index);
}
inline ::proto::game::redis::ForbidWin* tagRedisInfo::add_m_louhu() {
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_louhu)
  return m_louhu_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::ForbidWin >&
tagRedisInfo::m_louhu() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_louhu)
  return m_louhu_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::ForbidWin >*
tagRedisInfo::mutable_m_louhu() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_louhu)
  return &m_louhu_;
}

// optional bool m_bdeletetable = 55;
inline bool tagRedisInfo::has_m_bdeletetable() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void tagRedisInfo::set_has_m_bdeletetable() {
  _has_bits_[1] |= 0x00400000u;
}
inline void tagRedisInfo::clear_has_m_bdeletetable() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void tagRedisInfo::clear_m_bdeletetable() {
  m_bdeletetable_ = false;
  clear_has_m_bdeletetable();
}
inline bool tagRedisInfo::m_bdeletetable() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_bdeletetable)
  return m_bdeletetable_;
}
inline void tagRedisInfo::set_m_bdeletetable(bool value) {
  set_has_m_bdeletetable();
  m_bdeletetable_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_bdeletetable)
}

// optional bool m_bistestsvr = 56;
inline bool tagRedisInfo::has_m_bistestsvr() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void tagRedisInfo::set_has_m_bistestsvr() {
  _has_bits_[1] |= 0x00800000u;
}
inline void tagRedisInfo::clear_has_m_bistestsvr() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void tagRedisInfo::clear_m_bistestsvr() {
  m_bistestsvr_ = false;
  clear_has_m_bistestsvr();
}
inline bool tagRedisInfo::m_bistestsvr() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_bistestsvr)
  return m_bistestsvr_;
}
inline void tagRedisInfo::set_m_bistestsvr(bool value) {
  set_has_m_bistestsvr();
  m_bistestsvr_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_bistestsvr)
}

// optional .proto.game.redis.MJ_BUFFER m_room_config = 57;
inline bool tagRedisInfo::has_m_room_config() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void tagRedisInfo::set_has_m_room_config() {
  _has_bits_[1] |= 0x01000000u;
}
inline void tagRedisInfo::clear_has_m_room_config() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void tagRedisInfo::clear_m_room_config() {
  if (m_room_config_ != NULL) m_room_config_->::proto::game::redis::MJ_BUFFER::Clear();
  clear_has_m_room_config();
}
inline const ::proto::game::redis::MJ_BUFFER& tagRedisInfo::m_room_config() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_room_config)
  return m_room_config_ != NULL ? *m_room_config_ : *default_instance_->m_room_config_;
}
inline ::proto::game::redis::MJ_BUFFER* tagRedisInfo::mutable_m_room_config() {
  set_has_m_room_config();
  if (m_room_config_ == NULL) m_room_config_ = new ::proto::game::redis::MJ_BUFFER;
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.m_room_config)
  return m_room_config_;
}
inline ::proto::game::redis::MJ_BUFFER* tagRedisInfo::release_m_room_config() {
  clear_has_m_room_config();
  ::proto::game::redis::MJ_BUFFER* temp = m_room_config_;
  m_room_config_ = NULL;
  return temp;
}
inline void tagRedisInfo::set_allocated_m_room_config(::proto::game::redis::MJ_BUFFER* m_room_config) {
  delete m_room_config_;
  m_room_config_ = m_room_config;
  if (m_room_config) {
    set_has_m_room_config();
  } else {
    clear_has_m_room_config();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.tagRedisInfo.m_room_config)
}

// optional .proto.game.redis.MJ_BUFFER m_niao = 58;
inline bool tagRedisInfo::has_m_niao() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void tagRedisInfo::set_has_m_niao() {
  _has_bits_[1] |= 0x02000000u;
}
inline void tagRedisInfo::clear_has_m_niao() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void tagRedisInfo::clear_m_niao() {
  if (m_niao_ != NULL) m_niao_->::proto::game::redis::MJ_BUFFER::Clear();
  clear_has_m_niao();
}
inline const ::proto::game::redis::MJ_BUFFER& tagRedisInfo::m_niao() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_niao)
  return m_niao_ != NULL ? *m_niao_ : *default_instance_->m_niao_;
}
inline ::proto::game::redis::MJ_BUFFER* tagRedisInfo::mutable_m_niao() {
  set_has_m_niao();
  if (m_niao_ == NULL) m_niao_ = new ::proto::game::redis::MJ_BUFFER;
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.m_niao)
  return m_niao_;
}
inline ::proto::game::redis::MJ_BUFFER* tagRedisInfo::release_m_niao() {
  clear_has_m_niao();
  ::proto::game::redis::MJ_BUFFER* temp = m_niao_;
  m_niao_ = NULL;
  return temp;
}
inline void tagRedisInfo::set_allocated_m_niao(::proto::game::redis::MJ_BUFFER* m_niao) {
  delete m_niao_;
  m_niao_ = m_niao;
  if (m_niao) {
    set_has_m_niao();
  } else {
    clear_has_m_niao();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.tagRedisInfo.m_niao)
}

// optional .proto.game.redis.MJ_BUFFER m_zhong_niao = 59;
inline bool tagRedisInfo::has_m_zhong_niao() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void tagRedisInfo::set_has_m_zhong_niao() {
  _has_bits_[1] |= 0x04000000u;
}
inline void tagRedisInfo::clear_has_m_zhong_niao() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void tagRedisInfo::clear_m_zhong_niao() {
  if (m_zhong_niao_ != NULL) m_zhong_niao_->::proto::game::redis::MJ_BUFFER::Clear();
  clear_has_m_zhong_niao();
}
inline const ::proto::game::redis::MJ_BUFFER& tagRedisInfo::m_zhong_niao() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_zhong_niao)
  return m_zhong_niao_ != NULL ? *m_zhong_niao_ : *default_instance_->m_zhong_niao_;
}
inline ::proto::game::redis::MJ_BUFFER* tagRedisInfo::mutable_m_zhong_niao() {
  set_has_m_zhong_niao();
  if (m_zhong_niao_ == NULL) m_zhong_niao_ = new ::proto::game::redis::MJ_BUFFER;
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.m_zhong_niao)
  return m_zhong_niao_;
}
inline ::proto::game::redis::MJ_BUFFER* tagRedisInfo::release_m_zhong_niao() {
  clear_has_m_zhong_niao();
  ::proto::game::redis::MJ_BUFFER* temp = m_zhong_niao_;
  m_zhong_niao_ = NULL;
  return temp;
}
inline void tagRedisInfo::set_allocated_m_zhong_niao(::proto::game::redis::MJ_BUFFER* m_zhong_niao) {
  delete m_zhong_niao_;
  m_zhong_niao_ = m_zhong_niao;
  if (m_zhong_niao) {
    set_has_m_zhong_niao();
  } else {
    clear_has_m_zhong_niao();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.tagRedisInfo.m_zhong_niao)
}

// optional int32 m_daniaoid = 60;
inline bool tagRedisInfo::has_m_daniaoid() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void tagRedisInfo::set_has_m_daniaoid() {
  _has_bits_[1] |= 0x08000000u;
}
inline void tagRedisInfo::clear_has_m_daniaoid() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void tagRedisInfo::clear_m_daniaoid() {
  m_daniaoid_ = 0;
  clear_has_m_daniaoid();
}
inline ::google::protobuf::int32 tagRedisInfo::m_daniaoid() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_daniaoid)
  return m_daniaoid_;
}
inline void tagRedisInfo::set_m_daniaoid(::google::protobuf::int32 value) {
  set_has_m_daniaoid();
  m_daniaoid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_daniaoid)
}

// repeated .proto.game.redis.MJ_BUFFER m_peng = 61;
inline int tagRedisInfo::m_peng_size() const {
  return m_peng_.size();
}
inline void tagRedisInfo::clear_m_peng() {
  m_peng_.Clear();
}
inline const ::proto::game::redis::MJ_BUFFER& tagRedisInfo::m_peng(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_peng)
  return m_peng_.Get(index);
}
inline ::proto::game::redis::MJ_BUFFER* tagRedisInfo::mutable_m_peng(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.m_peng)
  return m_peng_.Mutable(index);
}
inline ::proto::game::redis::MJ_BUFFER* tagRedisInfo::add_m_peng() {
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_peng)
  return m_peng_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::MJ_BUFFER >&
tagRedisInfo::m_peng() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_peng)
  return m_peng_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::MJ_BUFFER >*
tagRedisInfo::mutable_m_peng() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_peng)
  return &m_peng_;
}

// optional .proto.game.redis.Fantype_to_FanNum g_ft2fn = 62;
inline bool tagRedisInfo::has_g_ft2fn() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void tagRedisInfo::set_has_g_ft2fn() {
  _has_bits_[1] |= 0x20000000u;
}
inline void tagRedisInfo::clear_has_g_ft2fn() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void tagRedisInfo::clear_g_ft2fn() {
  if (g_ft2fn_ != NULL) g_ft2fn_->::proto::game::redis::Fantype_to_FanNum::Clear();
  clear_has_g_ft2fn();
}
inline const ::proto::game::redis::Fantype_to_FanNum& tagRedisInfo::g_ft2fn() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.g_ft2fn)
  return g_ft2fn_ != NULL ? *g_ft2fn_ : *default_instance_->g_ft2fn_;
}
inline ::proto::game::redis::Fantype_to_FanNum* tagRedisInfo::mutable_g_ft2fn() {
  set_has_g_ft2fn();
  if (g_ft2fn_ == NULL) g_ft2fn_ = new ::proto::game::redis::Fantype_to_FanNum;
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.g_ft2fn)
  return g_ft2fn_;
}
inline ::proto::game::redis::Fantype_to_FanNum* tagRedisInfo::release_g_ft2fn() {
  clear_has_g_ft2fn();
  ::proto::game::redis::Fantype_to_FanNum* temp = g_ft2fn_;
  g_ft2fn_ = NULL;
  return temp;
}
inline void tagRedisInfo::set_allocated_g_ft2fn(::proto::game::redis::Fantype_to_FanNum* g_ft2fn) {
  delete g_ft2fn_;
  g_ft2fn_ = g_ft2fn;
  if (g_ft2fn) {
    set_has_g_ft2fn();
  } else {
    clear_has_g_ft2fn();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.tagRedisInfo.g_ft2fn)
}

// repeated .proto.game.redis.tagPlayerGPS m_mapplayergps = 63;
inline int tagRedisInfo::m_mapplayergps_size() const {
  return m_mapplayergps_.size();
}
inline void tagRedisInfo::clear_m_mapplayergps() {
  m_mapplayergps_.Clear();
}
inline const ::proto::game::redis::tagPlayerGPS& tagRedisInfo::m_mapplayergps(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_mapplayergps)
  return m_mapplayergps_.Get(index);
}
inline ::proto::game::redis::tagPlayerGPS* tagRedisInfo::mutable_m_mapplayergps(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.m_mapplayergps)
  return m_mapplayergps_.Mutable(index);
}
inline ::proto::game::redis::tagPlayerGPS* tagRedisInfo::add_m_mapplayergps() {
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_mapplayergps)
  return m_mapplayergps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagPlayerGPS >&
tagRedisInfo::m_mapplayergps() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_mapplayergps)
  return m_mapplayergps_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagPlayerGPS >*
tagRedisInfo::mutable_m_mapplayergps() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_mapplayergps)
  return &m_mapplayergps_;
}

// repeated .proto.game.redis.tagPlayers players = 64;
inline int tagRedisInfo::players_size() const {
  return players_.size();
}
inline void tagRedisInfo::clear_players() {
  players_.Clear();
}
inline const ::proto::game::redis::tagPlayers& tagRedisInfo::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.players)
  return players_.Get(index);
}
inline ::proto::game::redis::tagPlayers* tagRedisInfo::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.players)
  return players_.Mutable(index);
}
inline ::proto::game::redis::tagPlayers* tagRedisInfo::add_players() {
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagPlayers >&
tagRedisInfo::players() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.players)
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::redis::tagPlayers >*
tagRedisInfo::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.players)
  return &players_;
}

// repeated int32 m_useroperateid = 65;
inline int tagRedisInfo::m_useroperateid_size() const {
  return m_useroperateid_.size();
}
inline void tagRedisInfo::clear_m_useroperateid() {
  m_useroperateid_.Clear();
}
inline ::google::protobuf::int32 tagRedisInfo::m_useroperateid(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_useroperateid)
  return m_useroperateid_.Get(index);
}
inline void tagRedisInfo::set_m_useroperateid(int index, ::google::protobuf::int32 value) {
  m_useroperateid_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_useroperateid)
}
inline void tagRedisInfo::add_m_useroperateid(::google::protobuf::int32 value) {
  m_useroperateid_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_useroperateid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagRedisInfo::m_useroperateid() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_useroperateid)
  return m_useroperateid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagRedisInfo::mutable_m_useroperateid() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_useroperateid)
  return &m_useroperateid_;
}

// optional int32 m_autodisband = 66;
inline bool tagRedisInfo::has_m_autodisband() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void tagRedisInfo::set_has_m_autodisband() {
  _has_bits_[2] |= 0x00000002u;
}
inline void tagRedisInfo::clear_has_m_autodisband() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void tagRedisInfo::clear_m_autodisband() {
  m_autodisband_ = 0;
  clear_has_m_autodisband();
}
inline ::google::protobuf::int32 tagRedisInfo::m_autodisband() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_autodisband)
  return m_autodisband_;
}
inline void tagRedisInfo::set_m_autodisband(::google::protobuf::int32 value) {
  set_has_m_autodisband();
  m_autodisband_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_autodisband)
}

// optional bool m_bisautodisband = 67;
inline bool tagRedisInfo::has_m_bisautodisband() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void tagRedisInfo::set_has_m_bisautodisband() {
  _has_bits_[2] |= 0x00000004u;
}
inline void tagRedisInfo::clear_has_m_bisautodisband() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void tagRedisInfo::clear_m_bisautodisband() {
  m_bisautodisband_ = false;
  clear_has_m_bisautodisband();
}
inline bool tagRedisInfo::m_bisautodisband() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_bisautodisband)
  return m_bisautodisband_;
}
inline void tagRedisInfo::set_m_bisautodisband(bool value) {
  set_has_m_bisautodisband();
  m_bisautodisband_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_bisautodisband)
}

// optional int32 m_tablebranchid = 68;
inline bool tagRedisInfo::has_m_tablebranchid() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void tagRedisInfo::set_has_m_tablebranchid() {
  _has_bits_[2] |= 0x00000008u;
}
inline void tagRedisInfo::clear_has_m_tablebranchid() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void tagRedisInfo::clear_m_tablebranchid() {
  m_tablebranchid_ = 0;
  clear_has_m_tablebranchid();
}
inline ::google::protobuf::int32 tagRedisInfo::m_tablebranchid() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_tablebranchid)
  return m_tablebranchid_;
}
inline void tagRedisInfo::set_m_tablebranchid(::google::protobuf::int32 value) {
  set_has_m_tablebranchid();
  m_tablebranchid_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_tablebranchid)
}

// optional int32 m_ntotalcount = 69;
inline bool tagRedisInfo::has_m_ntotalcount() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void tagRedisInfo::set_has_m_ntotalcount() {
  _has_bits_[2] |= 0x00000010u;
}
inline void tagRedisInfo::clear_has_m_ntotalcount() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void tagRedisInfo::clear_m_ntotalcount() {
  m_ntotalcount_ = 0;
  clear_has_m_ntotalcount();
}
inline ::google::protobuf::int32 tagRedisInfo::m_ntotalcount() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_ntotalcount)
  return m_ntotalcount_;
}
inline void tagRedisInfo::set_m_ntotalcount(::google::protobuf::int32 value) {
  set_has_m_ntotalcount();
  m_ntotalcount_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_ntotalcount)
}

// optional int32 m_ncurrentcount = 70;
inline bool tagRedisInfo::has_m_ncurrentcount() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void tagRedisInfo::set_has_m_ncurrentcount() {
  _has_bits_[2] |= 0x00000020u;
}
inline void tagRedisInfo::clear_has_m_ncurrentcount() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void tagRedisInfo::clear_m_ncurrentcount() {
  m_ncurrentcount_ = 0;
  clear_has_m_ncurrentcount();
}
inline ::google::protobuf::int32 tagRedisInfo::m_ncurrentcount() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_ncurrentcount)
  return m_ncurrentcount_;
}
inline void tagRedisInfo::set_m_ncurrentcount(::google::protobuf::int32 value) {
  set_has_m_ncurrentcount();
  m_ncurrentcount_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_ncurrentcount)
}

// repeated int32 m_userchoosemode = 71;
inline int tagRedisInfo::m_userchoosemode_size() const {
  return m_userchoosemode_.size();
}
inline void tagRedisInfo::clear_m_userchoosemode() {
  m_userchoosemode_.Clear();
}
inline ::google::protobuf::int32 tagRedisInfo::m_userchoosemode(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_userchoosemode)
  return m_userchoosemode_.Get(index);
}
inline void tagRedisInfo::set_m_userchoosemode(int index, ::google::protobuf::int32 value) {
  m_userchoosemode_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_userchoosemode)
}
inline void tagRedisInfo::add_m_userchoosemode(::google::protobuf::int32 value) {
  m_userchoosemode_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_userchoosemode)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagRedisInfo::m_userchoosemode() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_userchoosemode)
  return m_userchoosemode_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagRedisInfo::mutable_m_userchoosemode() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_userchoosemode)
  return &m_userchoosemode_;
}

// optional int32 m_voice_room = 72;
inline bool tagRedisInfo::has_m_voice_room() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void tagRedisInfo::set_has_m_voice_room() {
  _has_bits_[2] |= 0x00000080u;
}
inline void tagRedisInfo::clear_has_m_voice_room() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void tagRedisInfo::clear_m_voice_room() {
  m_voice_room_ = 0;
  clear_has_m_voice_room();
}
inline ::google::protobuf::int32 tagRedisInfo::m_voice_room() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_voice_room)
  return m_voice_room_;
}
inline void tagRedisInfo::set_m_voice_room(::google::protobuf::int32 value) {
  set_has_m_voice_room();
  m_voice_room_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_voice_room)
}

// optional int32 m_start_time = 73;
inline bool tagRedisInfo::has_m_start_time() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void tagRedisInfo::set_has_m_start_time() {
  _has_bits_[2] |= 0x00000100u;
}
inline void tagRedisInfo::clear_has_m_start_time() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void tagRedisInfo::clear_m_start_time() {
  m_start_time_ = 0;
  clear_has_m_start_time();
}
inline ::google::protobuf::int32 tagRedisInfo::m_start_time() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_start_time)
  return m_start_time_;
}
inline void tagRedisInfo::set_m_start_time(::google::protobuf::int32 value) {
  set_has_m_start_time();
  m_start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_start_time)
}

// repeated int32 m_vecopcards = 74;
inline int tagRedisInfo::m_vecopcards_size() const {
  return m_vecopcards_.size();
}
inline void tagRedisInfo::clear_m_vecopcards() {
  m_vecopcards_.Clear();
}
inline ::google::protobuf::int32 tagRedisInfo::m_vecopcards(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_vecopcards)
  return m_vecopcards_.Get(index);
}
inline void tagRedisInfo::set_m_vecopcards(int index, ::google::protobuf::int32 value) {
  m_vecopcards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_vecopcards)
}
inline void tagRedisInfo::add_m_vecopcards(::google::protobuf::int32 value) {
  m_vecopcards_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_vecopcards)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagRedisInfo::m_vecopcards() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_vecopcards)
  return m_vecopcards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagRedisInfo::mutable_m_vecopcards() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_vecopcards)
  return &m_vecopcards_;
}

// repeated bool m_preofflinestate = 75;
inline int tagRedisInfo::m_preofflinestate_size() const {
  return m_preofflinestate_.size();
}
inline void tagRedisInfo::clear_m_preofflinestate() {
  m_preofflinestate_.Clear();
}
inline bool tagRedisInfo::m_preofflinestate(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_preofflinestate)
  return m_preofflinestate_.Get(index);
}
inline void tagRedisInfo::set_m_preofflinestate(int index, bool value) {
  m_preofflinestate_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_preofflinestate)
}
inline void tagRedisInfo::add_m_preofflinestate(bool value) {
  m_preofflinestate_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_preofflinestate)
}
inline const ::google::protobuf::RepeatedField< bool >&
tagRedisInfo::m_preofflinestate() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_preofflinestate)
  return m_preofflinestate_;
}
inline ::google::protobuf::RepeatedField< bool >*
tagRedisInfo::mutable_m_preofflinestate() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_preofflinestate)
  return &m_preofflinestate_;
}

// optional int32 m_isclubroom = 76;
inline bool tagRedisInfo::has_m_isclubroom() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void tagRedisInfo::set_has_m_isclubroom() {
  _has_bits_[2] |= 0x00000800u;
}
inline void tagRedisInfo::clear_has_m_isclubroom() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void tagRedisInfo::clear_m_isclubroom() {
  m_isclubroom_ = 0;
  clear_has_m_isclubroom();
}
inline ::google::protobuf::int32 tagRedisInfo::m_isclubroom() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_isclubroom)
  return m_isclubroom_;
}
inline void tagRedisInfo::set_m_isclubroom(::google::protobuf::int32 value) {
  set_has_m_isclubroom();
  m_isclubroom_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_isclubroom)
}

// optional string m_public_channel_id = 77;
inline bool tagRedisInfo::has_m_public_channel_id() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void tagRedisInfo::set_has_m_public_channel_id() {
  _has_bits_[2] |= 0x00001000u;
}
inline void tagRedisInfo::clear_has_m_public_channel_id() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void tagRedisInfo::clear_m_public_channel_id() {
  if (m_public_channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    m_public_channel_id_->clear();
  }
  clear_has_m_public_channel_id();
}
inline const ::std::string& tagRedisInfo::m_public_channel_id() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_public_channel_id)
  return *m_public_channel_id_;
}
inline void tagRedisInfo::set_m_public_channel_id(const ::std::string& value) {
  set_has_m_public_channel_id();
  if (m_public_channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    m_public_channel_id_ = new ::std::string;
  }
  m_public_channel_id_->assign(value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_public_channel_id)
}
inline void tagRedisInfo::set_m_public_channel_id(const char* value) {
  set_has_m_public_channel_id();
  if (m_public_channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    m_public_channel_id_ = new ::std::string;
  }
  m_public_channel_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.redis.tagRedisInfo.m_public_channel_id)
}
inline void tagRedisInfo::set_m_public_channel_id(const char* value, size_t size) {
  set_has_m_public_channel_id();
  if (m_public_channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    m_public_channel_id_ = new ::std::string;
  }
  m_public_channel_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.redis.tagRedisInfo.m_public_channel_id)
}
inline ::std::string* tagRedisInfo::mutable_m_public_channel_id() {
  set_has_m_public_channel_id();
  if (m_public_channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    m_public_channel_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.m_public_channel_id)
  return m_public_channel_id_;
}
inline ::std::string* tagRedisInfo::release_m_public_channel_id() {
  clear_has_m_public_channel_id();
  if (m_public_channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = m_public_channel_id_;
    m_public_channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void tagRedisInfo::set_allocated_m_public_channel_id(::std::string* m_public_channel_id) {
  if (m_public_channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete m_public_channel_id_;
  }
  if (m_public_channel_id) {
    set_has_m_public_channel_id();
    m_public_channel_id_ = m_public_channel_id;
  } else {
    clear_has_m_public_channel_id();
    m_public_channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.game.redis.tagRedisInfo.m_public_channel_id)
}

// repeated string m_group_channel_ids = 78;
inline int tagRedisInfo::m_group_channel_ids_size() const {
  return m_group_channel_ids_.size();
}
inline void tagRedisInfo::clear_m_group_channel_ids() {
  m_group_channel_ids_.Clear();
}
inline const ::std::string& tagRedisInfo::m_group_channel_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_group_channel_ids)
  return m_group_channel_ids_.Get(index);
}
inline ::std::string* tagRedisInfo::mutable_m_group_channel_ids(int index) {
  // @@protoc_insertion_point(field_mutable:proto.game.redis.tagRedisInfo.m_group_channel_ids)
  return m_group_channel_ids_.Mutable(index);
}
inline void tagRedisInfo::set_m_group_channel_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_group_channel_ids)
  m_group_channel_ids_.Mutable(index)->assign(value);
}
inline void tagRedisInfo::set_m_group_channel_ids(int index, const char* value) {
  m_group_channel_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.game.redis.tagRedisInfo.m_group_channel_ids)
}
inline void tagRedisInfo::set_m_group_channel_ids(int index, const char* value, size_t size) {
  m_group_channel_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.game.redis.tagRedisInfo.m_group_channel_ids)
}
inline ::std::string* tagRedisInfo::add_m_group_channel_ids() {
  return m_group_channel_ids_.Add();
}
inline void tagRedisInfo::add_m_group_channel_ids(const ::std::string& value) {
  m_group_channel_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_group_channel_ids)
}
inline void tagRedisInfo::add_m_group_channel_ids(const char* value) {
  m_group_channel_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.game.redis.tagRedisInfo.m_group_channel_ids)
}
inline void tagRedisInfo::add_m_group_channel_ids(const char* value, size_t size) {
  m_group_channel_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.game.redis.tagRedisInfo.m_group_channel_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
tagRedisInfo::m_group_channel_ids() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_group_channel_ids)
  return m_group_channel_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
tagRedisInfo::mutable_m_group_channel_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_group_channel_ids)
  return &m_group_channel_ids_;
}

// repeated int32 m_voice_status = 79;
inline int tagRedisInfo::m_voice_status_size() const {
  return m_voice_status_.size();
}
inline void tagRedisInfo::clear_m_voice_status() {
  m_voice_status_.Clear();
}
inline ::google::protobuf::int32 tagRedisInfo::m_voice_status(int index) const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_voice_status)
  return m_voice_status_.Get(index);
}
inline void tagRedisInfo::set_m_voice_status(int index, ::google::protobuf::int32 value) {
  m_voice_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_voice_status)
}
inline void tagRedisInfo::add_m_voice_status(::google::protobuf::int32 value) {
  m_voice_status_.Add(value);
  // @@protoc_insertion_point(field_add:proto.game.redis.tagRedisInfo.m_voice_status)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagRedisInfo::m_voice_status() const {
  // @@protoc_insertion_point(field_list:proto.game.redis.tagRedisInfo.m_voice_status)
  return m_voice_status_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagRedisInfo::mutable_m_voice_status() {
  // @@protoc_insertion_point(field_mutable_list:proto.game.redis.tagRedisInfo.m_voice_status)
  return &m_voice_status_;
}

// optional int32 m_maxhandcardsize = 80;
inline bool tagRedisInfo::has_m_maxhandcardsize() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void tagRedisInfo::set_has_m_maxhandcardsize() {
  _has_bits_[2] |= 0x00008000u;
}
inline void tagRedisInfo::clear_has_m_maxhandcardsize() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void tagRedisInfo::clear_m_maxhandcardsize() {
  m_maxhandcardsize_ = 0;
  clear_has_m_maxhandcardsize();
}
inline ::google::protobuf::int32 tagRedisInfo::m_maxhandcardsize() const {
  // @@protoc_insertion_point(field_get:proto.game.redis.tagRedisInfo.m_maxhandcardsize)
  return m_maxhandcardsize_;
}
inline void tagRedisInfo::set_m_maxhandcardsize(::google::protobuf::int32 value) {
  set_has_m_maxhandcardsize();
  m_maxhandcardsize_ = value;
  // @@protoc_insertion_point(field_set:proto.game.redis.tagRedisInfo.m_maxhandcardsize)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace redis
}  // namespace game
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_redisproto_2eproto__INCLUDED
