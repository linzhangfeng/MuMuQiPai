var setLableStr = function(label,str){
    if (label){
        label.setString(str);
        label.ignoreContentAdaptWithSize(true);
    }
};

var setNodeVis = function(label,v){
    if (label){
        label.setVisible(v);
    }
};

var setNodeVisBut = function(parent,v,nodeName){
    var css = parent.getChildren();
    for (var i in css) {
        var btn = css[i];
        if (btn) {
            if (btn.getName() == nodeName){
                btn.setVisible(v);
            }else{
                btn.setVisible(!v);
            }
        }
    }
};

var setNodeSize = function(node,size){
    try{
        if (node){
            node.setContentSize(size);
            ccui.Helper.doLayout(node);
        }
    }catch(e){

    }
};

var GetChild = function(string){
    try {
        var args = arguments;
        var parent = args[0];
        for (var i = 1; i < args.length; i ++){
            parent = parent.getChildByName(args[i]);
        }
        return parent;
    } catch (e) {
        cc.log("createWithFormat error : " + e);
        return null;
    }
};

var setSpriteFrame = function(label,fname){
    if (label){
        var sp_frame = cc.spriteFrameCache.getSpriteFrame(fname);
        if (sp_frame)label.setSpriteFrame(sp_frame);
    }
};

var time = function (v) {
    var t = (new Date).valueOf();
    return t;
};

var getItem = function (k) {
    try {
        return cc.sys.localStorage.getItem(PackName + k);
    } catch (e) {
        return null;
    }
};

var setItem = function (k,v) {
    try {
        cc.sys.localStorage.setItem(PackName + k, v);
    } catch (e) {

    }
};

var __String =
{
    createWithFormat: function (string) {
        try {
            var args = arguments;
            var pattern = new RegExp("%([0-9]+)", "g");
            return String(string).replace(pattern
                , function (match, index) {
                    if (index == 0 || index >= args.length)
                        throw "Invalid index in format string";
                    return args[index];
                });
        } catch (e) {
            cc.log("createWithFormat error : " + e);
            return "";
        }
    }
};
var Utils = {

// 获取整形数值
    getValInt: function (val, key) {
        if (val.hasOwnProperty(key)) {
            return val[key];
        }
        return 0;
    },
// 获取字符串数值
    getValStr: function (val, key) {
        if (val.hasOwnProperty(key)) {
            return val[key];
        }
        return "";
    },

    //深拷贝对象
    clone: function (obj) {
        function Fn() {
        }

        Fn.prototype = obj;
        var o = new Fn();
        for (var a in o) {
            if (typeof o[a] == "object") {
                o[a] = Utils.clone(o[a]);
            }
        }

        return o;
    },
    //获取精灵帧
    spriteFrame: function (key) {
        return cc.spriteFrameCache.getSpriteFrame(key);
    },

    //转换16进制
    toHex2: function (num) {
        if (num < 0)return num;
        if (!num)return "00";
        if (num < 16) {
            return "0" + num.toString(16);
        }
        return num.toString(16);
    },

    to2d: function (num) {
        if (num < 10) {
            return "0" + num.toString(10);
        }
        return num.toString(10);
    },

    scaleToSize: function (node, w, h) {
        node.setScaleX(w / node.getContentSize().width);
        node.setScaleY(h / node.getContentSize().height);
    }
    ,
    removeListData: function (list, data) {
        for (var i in list) {
            if (list[i] == data) {
                list.splice(i, 1);
                break;
            }

        }
    },

    splitStr: function (str, max, maxL) {
        if (maxL == undefined)maxL = 2;
        if (str.length <= max){
            str.replace(","," ");
            return [str];
        }
        var str_array = str.split(" ");
        var result = [];
        var curStr = "";
        for (var i = 0; i < str_array.length; i++) {
            var str_i = str_array[i];
            if ((curStr.length + str_i.length) > max && result.length < (maxL - 1)) {
                result.push(curStr);
                curStr = "";
            }
            curStr += str_i + " ";
        }
        result.push(curStr);
        return result;
    },
    newAni: function (key, start, end, dt, loop) {
        var ani = new cc.Animation();
        for (var i = start; i < end; ++i) {
            ani.addSpriteFrame(this.spriteFrame(key + i + ".png"));
        }
        ani.setDelayPerUnit(dt);
        ani.setRestoreOriginalFrame(true);
        if (loop && loop > 0) {
            ani.setLoops(loop);
        }
        return cc.animate(ani);
    },
    newAni1: function (key, list, dt, loop) {
        var ani = new cc.Animation();
        for (var i in list) {
            ani.addSpriteFrame(this.spriteFrame(key + list[i] + ".png"));
        }
        ani.setDelayPerUnit(dt);
        ani.setRestoreOriginalFrame(true);
        if (loop && loop > 0) {
            ani.setLoops(loop);
        }
        return cc.animate(ani);
    },
    parseName: function (max, name) {
        try {
            var l = name.length;
            var blen = 0;
            var len = [];
            var n = 0;
            for (var i = 0; i < l; i++) {
                n = 0;
                if ((name.charCodeAt(i) & 0xff00) != 0) {
                    blen++;
                    n++;
                }
                blen++;
                n++;
                len[i] = n;
            }
            if (blen > max) {
                n = 0;
                for (var i = 0; i < l; i++) {
                    n += len[i];
                    if (n >= max) {
                        n = i + 1;
                        break;
                    }
                }
                return name.substr(0, n) + "..";
            }
            return name;
        } catch (e) {
            return "";
        }
    },
    getSavePath: function () {
        return jsb.fileUtils.getWritablePath() + "Assets/";
    },
    getImageSavePath: function (fileUrl) {
        if (!fileUrl) {
            return;
        }
        var findFlag = "/chess_img/";
        var cutPos = fileUrl.indexOf(findFlag);
        if (cutPos <= 0) {
            return fileUrl;
        } else {
            var localPath = fileUrl.slice(cutPos + findFlag.length);
            return this.getSavePath() + "images/" + localPath;
        }

    },
    hasImageFile: function (f) {
        return jsb.fileUtils.isFileExist(this.getImageSavePath(f));
    },
    format: function (string) {
        var args = arguments;
        var pattern = new RegExp("%([0-9]+)", "g");
        return String(string).replace(pattern
            , function (match, index) {
                if (index == 0 || index >= args.length)
                    throw "Invalid index in format string";
                return args[index];
            });
    },
    Random: function (start, end) {
        return Math.floor(Math.random() * (end - start + 1)) + start;
    },
    randomf: function (start, end) {
        return Math.random() * (end - start) + start;
    },
    findNode: function (node, name) {
        if (!node) {
            return null;
        }
        if (node.getName() == name) {
            return node;
        }
        var cs = node.getChildren();
        for (var i in cs) {
            var ret = Utils.findNode(cs[i], name);
            if (ret) {
                return ret;
            }
        }
        return null;
    },
    createCircleAvatar: function (url, defualtFile, clipfile, size) {
        try {
            var savePath = Utils.getImageSavePath(url);

            if (Utils.hasImageFile(url)) {
                var avatar = new cc.Sprite(savePath);
                if (avatar == null) {
                    avatar = new cc.Sprite(defualtFile);
                }
                Utils.makeCircleSprite(avatar, savePath, clipfile, size);
                return avatar;
            }
            else {
                var avatar = new cc.Sprite(defualtFile);
                Utils.makeCircleSprite(avatar, defualtFile, clipfile, size);
                var tag = savePath + time(null);
                CCHttpAgent.getInstance().sendHttpImage(url, savePath, tag, function (tag) {
                    if (Utils.hasImageFile(url)) {
                        Utils.makeCircleSprite(avatar, savePath, clipfile, size);
                    }
                    CCHttpAgent.getInstance().popPackets(tag);
                }, 15);

                return avatar;
            }
        } catch (e) {
            var avatar = new cc.Sprite(defualtFile);
            var s_izex = size.width / avatar.getContentSize().width;
            var s_izey = size.height / avatar.getContentSize().height;
            avatar.setScale(s_izex, s_izey);
            return avatar;
        }

    },

    makeCircleSprite: function (avatar_s, avatafile, clipfile, size) {
        try {
            var Stencil = new cc.Sprite(clipfile);
            var avatar = new cc.Sprite(avatafile);

            if (avatar == null) {
                var s_izex = size.width / avatar_s.getContentSize().width;
                var s_izey = size.height / avatar_s.getContentSize().height;
                avatar_s.setScale(s_izex, s_izey);
                return;
            }
            var a_rect = avatar.getContentSize();
            var cl_rect = Stencil.getContentSize();

            var scaleX = (a_rect.width) / cl_rect.width;
            var scaleY = (a_rect.height) / cl_rect.height;

            var minscale = Math.min(scaleX, scaleY);
            Stencil.setScale(minscale);

            var renderTexture = new cc.RenderTexture(a_rect.width, a_rect.height);

            Stencil.setPosition(cc.p(a_rect.width / 2, a_rect.height / 2));
            avatar.setPosition(cc.p(a_rect.width / 2, a_rect.height / 2));

            Stencil.setBlendFunc(cc.ONE, cc.ZERO);//Stencil.setBlendFunc((BlendFunc){GL_ONE, GL_ZERO});
            avatar.setBlendFunc(cc.DST_ALPHA, cc.ZERO);//avatar.setBlendFunc((BlendFunc){GL_DST_ALPHA, GL_ZERO});

            renderTexture.begin();
            Stencil.visit();
            avatar.visit();
            renderTexture.end();

            avatar_s.setTexture(renderTexture.getSprite().getTexture());
            avatar_s.setFlippedY(true);
            var texture = avatar_s.getTexture();
            if (typeof texture.setAntiAliasTexParameters === "function") texture.setAntiAliasTexParameters();

            var s_izex = size.width / avatar_s.getContentSize().width;
            var s_izey = size.height / avatar_s.getContentSize().height;
            avatar_s.setScale(s_izex, s_izey);
        } catch (e) {
            try {
                var s_izex = size.width / avatar_s.getContentSize().width;
                var s_izey = size.height / avatar_s.getContentSize().height;
                avatar_s.setScale(s_izex, s_izey);
            } catch (e) {

            }
        }
    },
    getFastChatSound: function (chat, sex) {

        var fastChat_map = [];
        fastChat_map["我等的花都谢了"] = getResPath("RoomMJ/sound/fastchat/huaerxiele.mp3");
        fastChat_map["让我再想想"] = getResPath("RoomMJ/sound/fastchat/zaixiangxiang.mp3");
        fastChat_map["我们交个朋友吧"] = getResPath("RoomMJ/sound/fastchat/jiaopengyong.mp3");
        fastChat_map["我有一百种办法胡你"] = getResPath("RoomMJ/sound/fastchat/yibaizhong.mp3");
        fastChat_map["下次咱们再玩吧"] = getResPath("RoomMJ/sound/fastchat/xiacizaiwan.mp3");
        fastChat_map["怎么又断线了"] = getResPath("RoomMJ/sound/fastchat/youduanxian.mp3");
        fastChat_map["我要离开一会儿"] = getResPath("RoomMJ/sound/fastchat/buhaoyisi.mp3");

        if (fastChat_map.hasOwnProperty(chat)) {
            return fastChat_map[chat];
        }
        return "";
    },
    getCCAnimate: function (buf, frameNums, frame, perunit, loop, to2d) {
        var SpriteAni = new cc.Animation();
        for (var i = 0; i < frame.length; i++) {
            var f = __String.createWithFormat(buf, to2d ? Utils.to2d(frame[i]) : frame[i]);
            SpriteAni.addSpriteFrameWithFile(f);
        }
        SpriteAni.setDelayPerUnit(perunit);

        return cc.animate(SpriteAni);
    },

    pad: function (num, n) {
        var len = num.toString().length;
        while (len < n) {
            num = "0" + num;
            len++;
        }
        return num + "";
    },

    getTime: function (t) {
        var date = new Date(t);
        return date.getFullYear() + "-" + this.pad(date.getMonth() + 1, 2) + "-" + this.pad(date.getDate(), 2) + "  "
            + this.pad(date.getHours(), 2) + ":" + this.pad(date.getMinutes(), 2) + ":" + this.pad(date.getSeconds(), 2);
    },

    getDayTime: function () {
        var date = new Date();
        return this.pad(date.getHours(), 2) + ":" + this.pad(date.getMinutes(), 2);
    },
    isNoGpsData: function (player) {
        if (player.city == null || player.city == "" ||
            player.latitude == null || player.longitude == null ||
            (player.latitude == 0 && player.longitude == 0)) {
            return true;
        }
        return false;
    },
    getDistance: function (latitude1, longitude1,latitude2, longitude2) {
        try {
            var dis = PlatformHelper.getDistanceByCoordinate(cc.p(latitude1, longitude1), cc.p(latitude2, longitude2));
            return parseInt(dis);
        } catch (e) {
            return 0;
        }
    },
    getPlayerGpsInfo: function (uid) {
        for (var i = 0; i < MJModel.gpsData.length; i++) {
            var player = MJModel.gpsData[i];
            if (player.userId == uid) {
                return player;
            }
        }
        return {"isNull": true, "city": null, "latitude": null, "longitude": null};
    },

    addCardSprites: function (f, isjiami) {
        Utils.removeSpriteFram(f);
        Utils.addSpriteFrame(f, isjiami);
    },
    addSpriteFrame: function (f, isjiami) {
        if (isjiami == true) {
            cc.spriteFrameCache.addSpriteFrames(getResPath(__String.createWithFormat("%1.plist", f)));
        } else {
            cc.spriteFrameCache.addSpriteFrames(getResPath(__String.createWithFormat("%1.plist", f)), getResPath(__String.createWithFormat("%1.png", f)));
        }
    },
    removeSpriteFram: function (f) {
        cc.spriteFrameCache.removeSpriteFramesFromFile(getResPath(__String.createWithFormat("%1.plist", f)));
    },
    getFCardValue:function(value,v){
        if (v == null || v == undefined)v = 0;
        return value ^ v;
    },
    isDebugEnv: function () {
        var curEnvUrl = CCHttpAgent.getInstance().getUrl();
        return curEnvUrl && curEnvUrl.contains("188.188");
    },
    doLayer: function (node) {
        node.setContentSize(cc.director.getWinSize());
        ccui.helper.doLayout(node);
    },

    isCheckIp : false,

    refreshGps: function () {
        if(this.isCheckIp){
            return;
        }
        sendBigface(MJModel.seatid , -1 , -1);
        this.isCheckIp = true;
        var json = {};
        var self = this;
        json.roomId = MJModel.curRoomID;
        CCHttpAgent.getInstance().sendHttpPost(function (tag) {
                self.isCheckIp = false;
                var data = CCHttpAgent.getInstance().getPacketData(tag);
                CCHttpAgent.getInstance().popPackets(tag);
                if (data != "") {
                    var recv = null;
                    try {
                        recv = JSON.parse(data);
                        if (recv) {
                            if (recv.status == 200) {
                                if (recv["resultMap"].hasOwnProperty("lookList") && recv["resultMap"]["lookList"].hasOwnProperty("result")) {
                                    var data = recv["resultMap"]["lookList"]["result"];
                                    MJModel.gpsData = data;
                                    var gpsInfo = cc.director.getRunningScene().getChildByName("gpsInfo");
                                    if (gpsInfo) {
                                        gpsInfo.updateInfo();
                                        return;
                                    }

                                    try {
                                        var gpsInfo = new PlayerInfo();
                                        gpsInfo.setName("gpsInfo");
                                        gpsInfo.updateInfo();
                                        cc.director.getRunningScene().addChild(gpsInfo);
                                    } catch (e) {
                                    }
                                    return true;
                                }
                            }
                            else {

                            }
                        }
                    }
                    catch (e) {
                    }
                }
            },
            "duiju/invite/lookList", JSON.stringify(json), "room_all_player");
    },

    copyRoomID:function(){
        var data = {};
        data["UserKey"] = ZJHModel.getInstance().UserKey;
        data["roomId"] = MJModel.curRoomID;
        CCHttpAgent.getInstance().sendHttpPost(function(tag) {
                var data = CCHttpAgent.getInstance().getPacketData(tag);
                if (data!="") {
                    var recv = null;
                    try{
                        recv = JSON.parse(data);
                        if(recv) {
                            if(recv.status == 200) {
                                if (recv["resultMap"].hasOwnProperty("content")) {
                                    var d = recv["resultMap"];
                                    var content = d["content"];
                                    PlatformHelper.sdkDoForVoid_C("copyToPasteboard", content);
                                    PlatformHelper.showToast("复制房号成功\n请在任意聊天中粘贴");
                                }

                            }
                            else {
                                PlatformHelper.showToast(recv["message"]);
                            }
                        }
                    }
                    catch(e)
                    {
                    }
                }
                CCHttpAgent.getInstance().popPackets(tag);
            }.bind(this),
            "duiju/getCopyRoomInfo", JSON.stringify(data), "getCopyRoomInfo");
    },

    getTime2: function (t) {
        var date = new Date(t);
        return date.getFullYear() + "/" + this.pad(date.getMonth() + 1, 2) + "/" + this.pad(date.getDate(), 2) + " "
            + this.pad(date.getHours(), 2) + ":" + this.pad(date.getMinutes(), 2);
    },

    getTime3: function (t) {
        var date = new Date(t);
        return this.pad(date.getHours(), 2) + ":" + this.pad(date.getMinutes(), 2);
    },

    //复制战绩
    copyRecordToOtherApp: function (appType) {
        require("club/scripts/clubUtils/ClubMatchUtils.js");
        require("club/scripts/clubUtils/ClubShareUtil.js");
        var clubShareUtil = new ClubShareUtil();
        clubShareUtil.shareForGame(3, MJModel.curRoomID, 1, "webpage");
    },
    copyGameRecord:function(){
        this.copyRecordToOtherApp();
        return;
        var data = {};
        data["UserKey"] = ZJHModel.getInstance().UserKey;
        data["roomId"] = MJModel.curRoomID;
        var self = this;
        CCHttpAgent.getInstance().sendHttpPost(function(tag) {
                var data = CCHttpAgent.getInstance().getPacketData(tag);
                if (data!="") {
                    var recv = null;
                    try{
                        recv = JSON.parse(data);
                        if(recv)
                        {
                            if(recv.status == 200)
                            {
                                var json = recv["resultMap"];
                                var json = recv["resultMap"];
                                var tempString = "";
                                tempString += "房号：" + json["code"] + "\n";
                                tempString += "游戏：" + json["gameTypeName"] + "(" + json["pkgName"] + ")" + "\n";
                                tempString += "局数：" + json["count"] + "局" + "\n";
                                var startTime = Utils.getTime2(json["startTime"]);
                                var endTime = Utils.getTime3(json["endTime"]);
                                var bufStr = startTime + " 至 ";
                                bufStr += endTime;
                                tempString += "时间：" + bufStr + "\n";

                                if (json["clubCode"]) tempString += "俱乐部号：" + json["clubCode"] + "\n";

                                tempString += "————————————————\n";
                                var list = json["playRank"];
                                var winValue = 0;
                                if (list[0]["integral"] > 0) {
                                    winValue = list[0]["integral"];
                                }
                                for (var k = 0; k < list.length; k++) {
                                    var temp = "";
                                    if (list[k]["integral"] > 0) {
                                        temp += "+";
                                    }
                                    temp += list[k]["integral"];

                                    if (list[k]["integral"] > 0 && list[k]["integral"] == winValue) {
                                        tempString += (k + 1) + "、🌹 " + list[k]["userName"] + "(ID: " + list[k]["userId"] + ")" + "   " + temp + "\n";
                                    } else {
                                        tempString += (k + 1) + "、" + list[k]["userName"] + "(ID: " + list[k]["userId"] + ")" + "   " + temp + "\n";

                                    }
                                }

                                tempString += "                \n";
                                tempString += "战绩链接：" + json["share"]["shareUrl"] + "\n";

                                PlatformHelper.sdkDoForVoid_C("copyToPasteboard", tempString);
                                PlatformHelper.showToast("复制战绩成功\n请在任意聊天中粘贴");
                                //if(json["clubId"] > 0)
                                //{
                                //    var tempString = "";
                                //    tempString += "房号：" + json["code"] + "\n";
                                //    tempString += "游戏：" + json["gameTypeName"] + "(" + json["pkgName"] + ")" + "\n";
                                //    tempString += "局数：" + json["count"] + "局" + "\n";
                                //    var startTime = Utils.getTime2(json["startTime"]);
                                //    var endTime = Utils.getTime3(json["endTime"]);
                                //    var bufStr = startTime + "  至  ";
                                //    bufStr += endTime;
                                //    tempString += "时间：" + bufStr + "\n";
                                //    tempString += "俱乐部号：" + json["clubCode"] + "\n";
                                //    tempString += "————————————————\n";
                                //    var list = json["playRank"];
                                //    for(var k = 0; k < list.length; k++)
                                //    {
                                //        var temp = "" + list[k]["integral"];
                                //        if(json["integral"] > 0)
                                //        {
                                //            temp += "+";
                                //        }
                                //        tempString += (k+1) + "、" + list[k]["userName"] + "(ID: " + list[k]["userId"] + ")" + "       " + temp + "\n";
                                //    }
                                //
                                //    tempString += "                \n";
                                //    tempString += "战绩链接：" + json["share"]["shareUrl"] + "\n";
                                //
                                //    PlatformHelper.sdkDoForVoid_C("copyToPasteboard", tempString);
                                //    PlatformHelper.showToast("复制战绩成功\n请在任意聊天中粘贴");
                                //}else{
                                //    var tempString = "";
                                //    tempString += "房号：" + json["code"] + "\n";
                                //    tempString += "游戏：" + json["gameTypeName"] + "(" + json["pkgName"] + ")" + "\n";
                                //    tempString += "局数：" + json["count"] + "局" + "\n";
                                //    var startTime = Utils.getTime2(json["startTime"]);
                                //    var endTime = Utils.getTime3(json["endTime"]);
                                //    var bufStr = startTime + "  至  ";
                                //    bufStr += endTime;
                                //    tempString += "时间：" + bufStr + "\n";
                                //
                                //    tempString += "————————————————\n";
                                //    var list = json["playRank"];
                                //    for(var k = 0; k < list.length; k++)
                                //    {
                                //        var temp = "" + list[k]["integral"];
                                //        if(json["integral"] > 0)
                                //        {
                                //            temp += "+";
                                //        }
                                //        tempString += (k+1) + "、" + list[k]["userName"] + "(ID: " + list[k]["userId"] + ")" + "       " + temp + "\n";
                                //    }
                                //
                                //    PlatformHelper.sdkDoForVoid_C("copyToPasteboard", tempString);
                                //    PlatformHelper.showToast("复制战绩成功\n请在任意聊天中粘贴");
                                //}

                            }else
                            {
                                PlatformHelper.showToast(recv["message"]);
                            }
                        }
                    }
                    catch(e)
                    {
                    }
                }
                CCHttpAgent.getInstance().popPackets(tag);
            }.bind(this),
            "duiju/integral/detail", JSON.stringify(data), "detail");
    },
    getNodeWorldPosition:function (node) {
        var parent = node.getParent();
        return parent.convertToWorldSpace(node.getPosition());
    },

    shareToXL: function (layer,shareBtn) {
        require("club/scripts/clubUtils/ClubMatchUtils.js");
        var self = layer;
        var size = self.getContentSize();
        shareBtn.setVisible(false);
        self.setScale(1);
        var renderTexture = new cc.RenderTexture(size.width , size.height, cc.Texture2D.PIXEL_FORMAT_RGBA8888);
        renderTexture.beginWithClear(255, 255, 255, 255);
        self.visit();
        renderTexture.end();
        renderTexture.saveToFile("record.jpg", cc.IMAGE_FORMAT_JPEG, false, function (text, path) {
            self.setScale(1);
            ClubMatchUtils.shareToXL("", "", "", path, "", "image","");
            self.runAction(cc.sequence(cc.delayTime(0.5), cc.callFunc(function () {
                shareBtn.setVisible(true);
                ZJHModel.getInstance().roomToHall();
            })));
        });
    },
    yaoqingToXL: function () {
        var data = {};
        data["roomId"] = MJModel.curRoomID;
        CCHttpAgent.getInstance().sendHttpPost(function (tag) {
            var data = CCHttpAgent.getInstance().getPacketData(tag);
            if (data != "") {
                var recv = null;
                try {
                    recv = JSON.parse(data);
                    if (recv && recv.status == 200) {
                        var data1 = recv["resultMap"];
                        require("club/scripts/clubUtils/ClubMatchUtils.js");
                        ClubMatchUtils.shareToXL(data1["gameRoom"]["shareTitle"], data1["gameRoom"]["shareContent"], "", "", data1["gameRoom"]["shareUrl"], "webpage" ,"");
                    }
                }
                catch (e) {
                }
            }
            CCHttpAgent.getInstance().popPackets(tag);
        }, "duiju/shareView", JSON.stringify(data), "shareVertical");
    },
    checkCard: function (ar, v) {
        if (ar[v]) {
            ar[v]++;
        } else {
            ar[v] = 1;
        }
    },

    //分享战绩至微信
    shareRecordToWX: function (layer) {
        var self = layer;
        var size = self.getContentSize();
        self.setScale(0.5);
        var renderTexture = new cc.RenderTexture(size.width / 2, size.height / 2, cc.Texture2D.PIXEL_FORMAT_RGBA8888);
        renderTexture.beginWithClear(255, 255, 255, 255);
        self.visit();
        renderTexture.end();
        renderTexture.saveToFile("record.jpg", cc.IMAGE_FORMAT_JPEG, false, function (text, path) {
            self.setScale(1);
            PlatformHelper.WeChatShareImage("", path);
            this.runAction(cc.sequence(cc.delayTime(0.5), cc.callFunc(function () {
                ZJHModel.getInstance().roomToHall();
            })));
        });
    },
    //分享战绩至乡聊
    shareRecordToXL: function (layer) {
        require("club/scripts/clubUtils/ClubMatchUtils.js");
        var self = layer;
        var size = self.getContentSize();
        self.setScale(1);
        var renderTexture = new cc.RenderTexture(size.width , size.height, cc.Texture2D.PIXEL_FORMAT_RGBA8888);
        renderTexture.beginWithClear(255, 255, 255, 255);
        self.visit();
        renderTexture.end();
        renderTexture.saveToFile("record.jpg", cc.IMAGE_FORMAT_JPEG, false, function (text, path) {
            self.setScale(1);
            ClubMatchUtils.shareToXL("", "", "", path, "", "image","");
            self.runAction(cc.sequence(cc.delayTime(0.5), cc.callFunc(function () {
                ZJHModel.getInstance().roomToHall();
            })));
        });
    },
    //分享链接至微信
    shareLinksToWX: function () {
        var data = {};
        data["UserKey"] = ZJHModel.getInstance().UserKey;
        data["roomId"] = MJModel.curRoomID;
        var self = this;
        CCHttpAgent.getInstance().sendHttpPost(function (tag) {
                var data = CCHttpAgent.getInstance().getPacketData(tag);
                if (data != "") {
                    var recv = null;
                    try {
                        recv = JSON.parse(data);
                        if (recv) {
                            if (recv.status == 200) {
                                var data = recv["resultMap"];
                                PlatformHelper.WeChatShare(data["share"]["shareTitle"], data["share"]["shareContent"], data["share"]["shareUrl"], data["share"]["shareLogo"]);
                            } else {
                                PlatformHelper.showToast(recv["message"]);
                            }
                        }
                    }
                    catch (e) {
                    }
                }
                CCHttpAgent.getInstance().popPackets(tag);
            }.bind(this),
            "duiju/integral/detail", JSON.stringify(data), "detail");
    },

    //分享战绩至各个平台
    shareRecordToOtherApp: function (layer, appType) {
        require("club/scripts/clubUtils/ClubMatchUtils.js");
        var self = layer;
        var size = self.getContentSize();
        if (self.btns["copy"])self.btns["copy"].setVisible(false);
        if (self.btns["sharezhanji"])self.btns["sharezhanji"].setVisible(false);
        if (self.btns["sharelink"])self.btns["sharelink"].setVisible(false);
        var anchorPoint = self.getAnchorPoint();
        self.setAnchorPoint(cc.p(0, 0));
        self.setScale(0.5);
        var renderTexture = new cc.RenderTexture(size.width / 2, size.height / 2, cc.Texture2D.PIXEL_FORMAT_RGBA8888);
        renderTexture.beginWithClear(255, 255, 255, 255);
        self.visit();
        renderTexture.end();
        renderTexture.saveToFile("record.jpg", cc.IMAGE_FORMAT_JPEG, false, function (text, path) {
            self.setScale(1);
            self.setAnchorPoint(anchorPoint);
            if (self.btns["copy"])self.btns["copy"].setVisible(true);
            if (self.btns["sharezhanji"])self.btns["sharezhanji"].setVisible(true);
            if (self.btns["sharelink"])self.btns["sharelink"].setVisible(true);
            ClubMatchUtils.shareToOtherApp("", "", "", path, "", "", "image", appType, "");
        });
    },

    // shareForGame: function (shareType, roomId, appType, type)
    // * @param shareType 1邀请 2战绩 3复制战绩链接
    // * @param roomId roomId
    // * @param appType 1微信 2支付宝 3钉钉 4闲聊 5乡聊
    // * @param type 分享内容类型
    //分享链接至各个平台 @param appType 1微信 2支付宝 3钉钉 4闲聊 5乡聊
    shareLinksToOtherApp: function (appType) {
        require("club/scripts/clubUtils/ClubMatchUtils.js");
        require("club/scripts/clubUtils/ClubShareUtil.js");
        var clubShareUtil = new ClubShareUtil();
        clubShareUtil.shareForGame(2, MJModel.curRoomID, appType, "webpage");
    },

    //各个平台邀请
    yaoqingToOtherApp: function (appType) {
        require("club/scripts/clubUtils/ClubMatchUtils.js");
        require("club/scripts/clubUtils/ClubShareUtil.js");
        var clubShareUtil = new ClubShareUtil();
        clubShareUtil.shareForGame(1, MJModel.curRoomID, appType, "webpage");
    },
    formatError: function (error) {
        return error + "\n \t at " + error.stack.replace(/[\n](?=.*[\n])/g, "\n \t at ");
    },
    isNewYear: function () {
        var strtime_begin = '2020/01/20 00:00:00';
        var strtime_end = '2020/02/08 00:00:00';
        var begindate = new Date(strtime_begin);
        var enddate = new Date(strtime_end);
        var curdate = new Date();
        return enddate > curdate && curdate > begindate;
    },
    isDebugServer:function(){
        var url = CCHttpAgent.getInstance().getUrl();
        if (url.indexOf("188.188.1.202") != -1)return true;//为了安全 仅匹配当前的测试服ip
        return false;
    },
};


