loadProtoFile("proto/ningxiangmajianggameproto.proto");


var HuType = {
    HU_INVALID: 0,
    HU_ZIMO: 1,
    HU_PAOHU: 2,
    HU_HeiMo: 2,
    Hu_RuanMo: 1,
    HU_DIANPAO: 3,
    HU_BEIZIMO: 4,
    HU_QIANG_GANG: 5,
    HU_BEI_QIANG_GANG: 6,
    HU_YI_PAO_DUO_XIANG: 7,
    HU_GANG_SHANG_HUA: 8,
    HU_GANG_HOU_PAO: 9,
};
var AddFanType = {
    HU_FAN_TYPE_PIHU: 0,          //屁胡
    HU_FAN_TYPE_YITIAOLONG: 1,          //一条龙
    HU_FAN_TYPE_QINGYISE: 2,          //清一色
    HU_FAN_TYPE_FENGYISE: 3,          //风一色
    HU_FAN_TYPE_7DUI: 4,            //7对
    HU_FAN_TYPE_HAOHUA7DUI: 5,          //豪华7对
    HU_FAN_TYPE_BIANKANDIAO: 6,        //边坎吊
    HU_FAN_TYPE_13YAO: 7,            //13幺
};
var NINGXIANG_MJ_TYPE = {
    11: "大四喜",
    12: "板板胡",
    13: "缺一色",
    14: "六六顺",
    15: "步步高",
    16: "金童玉女",
    17: "一枝花",
    18: "三同",
    19: "一点红",

};
NINGXIANG_MJ_END_TYPE = {
    38: "将将胡",
    58: "三豪华七对",
    53: "双豪华七对",
    27: "豪华七对",
    36: "七小对",
    16: "碰碰胡",
    17: "平胡",
    28: "全求人",
    14: "清一色",
    50: "门清",
    19: "天胡",
    20: "地胡",
    23: "海底捞月",
    21: "海底炮",
    24: "杠上花",
    29: "杠后炮",
    22: "抢杠胡",
};
var AddFanTypeArray = [
    AddFanType.HU_FAN_TYPE_PIHU,          //屁胡
    AddFanType.HU_FAN_TYPE_YITIAOLONG,          //一条龙
    AddFanType.HU_FAN_TYPE_QINGYISE,          //清一色
    AddFanType.HU_FAN_TYPE_FENGYISE,          //风一色
    AddFanType.HU_FAN_TYPE_7DUI,            //7对
    AddFanType.HU_FAN_TYPE_HAOHUA7DUI,          //豪华7对
    AddFanType.HU_FAN_TYPE_BIANKANDIAO,        //边坎吊
    AddFanType.HU_FAN_TYPE_13YAO,            //13幺
];

var AddFanNameArray = [
    "屁胡",
    "一条龙",
    "清一色",
    "风一色",
    "7对",
    "豪华7对",
    "边坎吊",
    "13幺",
];

var ActionTypeLingQiu =
{
    TYPE_MUST_HU: 0x200000,
}

var PZHActionType =
{
    TYPE_ZHI_BU: 0x200,                // 直杠补
    TYPE_WAN_BU: 0x400,                // 弯杠补
    TYPE_AN_BU: 0x800,                // 暗杠补
    TYPE_XIAO_HU: 0x1000,                   // 报听胡
    TYPE_BAOTING: 0x2000,                   // 报听胡
};


var selfCMD = {
    SERVER_SHOW_GANGHOUPAI: 5078,     //杠补
    SERVER_AckUserCanNotHu: 5079,   //赖子
    SERVER_SEND_HAIDIPAI_START: 5074,
    CLIENT_CHOOSE_HAIDIPAI: 5075,
    SERVER_SHOW_HAIDIPAI: 5076,
};
var PackageName = {
    NingXiangMJ: 1,
    KaiWangMJ: 2
};
var MJTable_NingXiang = MJTable.extend({
    tag: "MJTable_NingXiang",
    _curLaizi: -1,
    _curLaizipi: -1,
    _curLaizipi2: -1,
    _curLaizi_bg: null,
    isRecordShow: false,
    _pkg_id: 0,
    maxQuan: 1,
    _huaCard: [[], [], [], []],
    isForceTing: false,
    _huaValues: [],
    _piaoWaitLayer: null,
    _piaoLayer: null,
    _piaoState: [0, 0, 0, 0],
    _piaoResult: [],
    _isJieSan: false,
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        MJModel.mj_suport_fangyan = 0;
        MJModel.outCardEffect_style = 1;

        MJModel.mj_bg_use = 1;
        MJModel.mj_suport_change_bg = 1;
        MJModel.toupiaoTipsType = 1;
        MJModel.chi_layout = 3;
        MJModel.mj_touch_tip = 1;
        MJModel.isOutCard = true;
        MJModel.mj_chat_style = 5;
        MJModel.mj_public_style = 1;
        MJModel.mj_card_lib_type = 1;

        MJModel.mj_gps_type = 1;
        MJModel.mj_double_click_style = 1;

        MJModel.mj_font = "jianjie";
        MJModel.mj_fontSize = "dahao";
        MJModel.mj_style = "shishang";
        MJModel.yinyue = "jingdian";
        MJModel.mj_table_view = "2d";
        MJModel.has_hu_layout = 0;
        MJModel.shareType = 1;
        MJModel.needTipWhenPass = 1;
        MJModel.danjichupai = 0;
        MJModel.liangPaiStates = [-1, -1, -1, -1];
        MJModel.bu_info = []; //湖南麻将特有的补张操作
        MJModel.isZhuaNiao = false;
        MJModel.baotingStates = [-1, -1, -1, -1];
        this.isForceTing = false;
        this._huaValues = [0x41, 0x42, 0x43, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x60];
        this.mj_roomType = 0;
        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];
            cc.log("--this._pkg_id---: " + this._pkg_id);
            MJModel.GameType = PackageName.NingXiangMJ;
            if (this._pkg_id == 3425 || this._pkg_id == 3285) {//宁乡麻将
                MJModel.mj_roomType = 0;
                this.mj_roomType = 0;
                this._pkg_id = PKID.FOUR;
                MJModel.GameType = PackageName.NingXiangMJ;
            }
            if (this._pkg_id == 3426 || this._pkg_id == 3286) {//三人宁乡
                MJModel.mj_roomType = 1;
                this.mj_roomType = 1;
                this._pkg_id = PKID.THREE;
                MJModel.GameType = PackageName.NingXiangMJ;
            }
            if (this._pkg_id == 3427 || this._pkg_id == 3287) {//两人宁乡
                MJModel.mj_roomType = 2;
                this.mj_roomType = 2;
                this._pkg_id = PKID.TWO;
                MJModel.GameType = PackageName.NingXiangMJ;
            }
        } catch (e) {

        }

        this._init_extend();
        this._super();
        this._init_ui();
        this._update_action();
        //this.schedule(this.test, 1.0);
    },
    _init_ui: function () {
        var self = this;

        {
            var btn = new ccui.Button();
            // btn.loadTextures(getResPath("RoomMJ/action/mjop/op.png"), getResPath("RoomMJ/action/mjop/op.png"), "");
            btn.loadTextures(getResPath("ningxiangmj/ningxiang/buzhang1.png"), "", "");
            this.room_Action.actions["buzhang"] = btn;
            btn.setName("buzhang");
            btn.addClickEventListener(function (sender, evt) {
                self.room_Action.btnCallback(sender);
            });
            btn.setVisible(false);
            this.room_Action.addChild(btn);
            this.room_Action.opBtns.push(btn);
        }

        {
            var btn = new ccui.Button();
            btn.loadTextures(getResPath("RoomMJ/action/baoting1.png"), getResPath("RoomMJ/action/baoting1.png"), "");
            this.room_Action.actions["baoting"] = btn;
            btn.setName("baoting");
            btn.addClickEventListener(function (sender, evt) {
                self.room_Action.btnCallback(sender);
            });
            btn.setVisible(false);
            this.room_Action.addChild(btn);
            this.room_Action.opBtns.push(btn);
        }

        var self = this;
        {
            var btn = new ccui.Button();
            btn.loadTextures(getResPath("RoomMJ/action/hu1.png"), getResPath("RoomMJ/action/hu1.png"), "");
            this.room_Action.actions["xiaohu"] = btn;
            btn.setName("xiaohu");
            btn.addClickEventListener(function (sender, evt) {
                self.room_Action.btnCallback(sender);
            });
            btn.setVisible(false);
            this.room_Action.addChild(btn);
            this.room_Action.opBtns.push(btn);
        }


        {
            var btn = new ccui.Button();
            btn.loadTextures(getResPath("RoomMJ/action/pass1.png"), "", "");
            this.room_Action.actions["buyaopai"] = btn;
            btn.setName("buyaopai");
            btn.addClickEventListener(function (sender, evt) {
                self.room_Action.btnCallback(sender);
            });

            btn.setVisible(false);
            this.room_Action.addChild(btn);
            this.room_Action.opBtns.push(btn);
        }

        {
            var btn = new ccui.Button();
            // btn.loadTextures(getResPath("RoomMJ/action/mjop/op.png"), getResPath("RoomMJ/action/mjop/op.png"), "");
            btn.loadTextures(getResPath("ningxiangmj/ningxiang/yaopai1.png"), "", "");
            this.room_Action.actions["yaopai"] = btn;
            btn.setName("yaopai");
            btn.addClickEventListener(function (sender, evt) {
                self.room_Action.btnCallback(sender);
            });

            btn.setVisible(false);
            this.room_Action.addChild(btn);
            this.room_Action.opBtns.push(btn);
        }
    },
    _update_action: function () {

    },
    getMjTypePath: function () {
        return getResPath("ningxiangmj/ningxiang/ningxiang_mj_icon.png");
    },

    updateBg: function (isInit) {
        this._super(isInit);
        for (var i = 0; i < 4; i++) {
            var lable = this.getChildByName("qishouhutip" + i);
            if (lable) {
                if (i == 1) {
                    if (MJModel.mj_bg_use == 0) {
                        lable.setRotation(-103);
                    }
                    else {
                        lable.setRotation(-90);
                    }

                } else if (i == 3) {
                    if (MJModel.mj_bg_use == 0) {
                        lable.setRotation(103);
                    }
                    else {
                        lable.setRotation(90);
                    }
                }
            }
        }
    },

    isNewCards: function () {
        if (MJModel.mj_font == "jianjie" && MJModel.mj_fontSize == "dahao" && MJModel.mj_table_view == "2d" && MJModel.mj_paiban == "horizontal") {
            return true;
        }
        return false;
    },

    onEnter: function () {
        this._super();
    },

    isSupportPublicCard: function () {
        return true;
    },

    initUtils: function () {
    },
    initMJDialogs: function () {
        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(false);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };
    },
    initMJPlayer: function () {
        MJPlayer.prototype.setLiangPaiVisible = function (v) {
            if (!this.liangpai_flag) {
                this.liangpai_flag = new cc.Sprite(getResPath("RoomMJ/tingpai_flag.png"));
                this.liangpai_flag.setVisible(false);
                if (this.pid == 1) {
                    this.liangpai_flag.setPosition(cc.p(0, 90));
                }
                else {
                    this.liangpai_flag.setPosition(cc.p(this.m_size.width, 90));
                }
                this.addChild(this.liangpai_flag, 1);
            }
            if (this.liangpai_flag) {
                this.liangpai_flag.setVisible(v);
            }
        };
        var superreset = MJPlayer.prototype.reset;
        MJPlayer.prototype.reset = function (allClean, isGameStart) {
            superreset.call(this);
            this.setLiangPaiVisible(false);
        };
    },
    initMJVideo: function () {

    },
    initMJPreTable: function () {

    },

    initMJTips: function () {

    },
    _init_extend: function () {
        this.initMJTips();
        this.initMJVideo();
        this.initMJCard();
        this.initMJPublic();
        this.initMJConfig();
        this.initMJAction();
        this.initMJInfo();
        this.initUtils();
        this.initMJDialogs();
        this.initMJPlayer();
        this.initMJPreTable();
        this.initMJActionVideo();
        var self_table = this;
    },
    initMJInfo: function () {
    },
    initMJCard: function () {
        var self_table = this;

        //MJCard.prototype.showPai = function (isShow, value) {
        //    var cardBg = this.getChildByName("sprite");
        //    if (cardBg) {
        //        if (!isShow) {
        //            var bg_str = MJConfig.getCardStr_new(this.getValue(), this.pos, this.type, 0);
        //            cardBg.setSpriteFrame(bg_str);
        //            var ss = MJConfig.getScale_new(this.pos, CardType.Card_End, 1, true);
        //            cardBg.setScale(ss);
        //        } else {
        //            if (value == undefined) {
        //                var bg_str = MJConfig.getCardStr_new(this.getValue(), this.pos, CardType.Card_End, 0);
        //                cardBg.setSpriteFrame(bg_str);
        //            } else {
        //                var hasMoreCard = MJModel.mj_table.isDuoPai(this.pos);
        //                var bg_str = MJConfig.getCardStr_new(value, this.pos, CardType.Card_End, 0);
        //                var _vec = MJConfig.getEndCardPos(this.pos, this.index, MJModel.mj_table.room_Card.hand_card[this.pos].length, hasMoreCard);
        //                cardBg.setSpriteFrame(bg_str);
        //                var ss = MJConfig.getScale_new(this.pos, CardType.Card_End, 1, true);
        //                cardBg.setScale(ss);
        //                this.setMyPosition(_vec);
        //            }
        //        }
        //    }
        //};


        MJCards.prototype.sortCard = function (a, b) {
            return self_table._sortCard(a, b);
        };

        MJCard.prototype.check_addFlag = function () {
            self_table._checkAddCardFlag(this);
        };


        var super_addOutCard = MJCards.prototype.addOutCard;
        MJCards.prototype.addOutCard = function (pos, value, showPoint) {
            if (self_table.isHuaValue(value)) {
                var card = this.addHuCard(pos, value);
                return card;
            } else {
                if (MJModel.isMyPos(pos)) {
                    this.setSomeCardClickState();
                }
                return super_addOutCard.call(this, pos, value, showPoint);
            }
        };

        MJCards.prototype.getFapaiTmpCard = function (pos, index, position) {
            var card = new MJCard();
            card.setValue(0, pos, CardType.Card_Hand, index);
            card.setMyPosition(position);
            return card;
        };

        var super_setSomeCardClickState = MJCards.prototype.setSomeCardClickState;
        MJCards.prototype.setSomeCardClickState = function () {
            if (MJModel.mj_lockcard_type == 1) {
                var listen_cards = [];
                for (var i = 0; i < MJModel.listen_info.length; i++) {
                    var lsi = MJModel.listen_info[i];
                    listen_cards.push(lsi.OutCard);
                }

                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    if (listen_cards.indexOf(card.getValue()) == -1) {
                        card.setBlackVis(true);
                        card.setCardTouchEnable(false);
                    }
                }
            } else if (MJModel.mj_lockcard_type == 2) {
                if (this.isDuoPai(0) == false) {
                    for (var i = 0; i < this.hand_card[0].length; i++) {
                        var card = this.hand_card[0][i];
                        card.setBlackVis(true);
                        card.setCardTouchEnable(false);
                    }
                    return;
                }
                cc.log("lin=setSomeCardClickState=2");
                for (var i = 0; i < this.hand_card[0].length - 1; i++) {
                    var card = this.hand_card[0][i];
                    card.setBlackVis(true);
                    card.setCardTouchEnable(false);
                }
            }
        };

        //去掉出牌按钮
        MJCards.prototype.createOutCardBtn = function () {

        };
    },
    initMJAction: function () {
        var selfTable = this;
        //湖北麻将不要自动胡牌功能
        MJAction.prototype.setAutoOutCardVis = function (value) {

        };

        var super_setOperator = MJAction.prototype.setOperator;
        MJAction.prototype.setOperator = function (operat) {
            this.removeChildByName("ChooseGang_selectLayer");
            this.isBaoTingIng = false;
            if (operat != -1 && (operat & PZHActionType.TYPE_BAOTING) == PZHActionType.TYPE_BAOTING) {
                cc.log("lin=setOperator=1");
                if (this.actions["baoting"]) {
                    this.actions["baoting"].setVisible(true);
                }

                if (this.actions["pass"]) {
                    this.actions["pass"].setVisible(true);
                }
                MJModel.canTouchCard = false;
            }

            if (operat != -1 && (operat & PZHActionType.TYPE_XIAO_HU) == PZHActionType.TYPE_XIAO_HU) {
                this.isBaoTingIng = true;
                cc.log("lin=setOperator=2");
                MJModel.canTouchCard = false;
                if (this.actions["xiaohu"]) {
                    this.actions["xiaohu"].setVisible(true);
                }

                if (this.actions["pass"]) {
                    this.actions["pass"].setVisible(true);
                }

                this.reflashOpBtns();
                return;
            }
            if (operat != -1
                && ( (operat & PZHActionType.TYPE_ZHI_BU) == PZHActionType.TYPE_ZHI_BU
                || (operat & PZHActionType.TYPE_WAN_BU) == PZHActionType.TYPE_WAN_BU
                || (operat & PZHActionType.TYPE_AN_BU) == PZHActionType.TYPE_AN_BU)) {
                if (this.actions["buzhang"]) {
                    this.actions["buzhang"].setVisible(true);
                }
            }
            super_setOperator.call(this, operat);
        };

        var super_btnCallback = MJAction.prototype.btnCallback;
        MJAction.prototype.btnCallback = function (ref) {
            var n = ref;
            var name = n.getName();
            var self = this;
            var op = MJModel.curOperate;
            Log(this, "btnCallback:" + name);
            if (name == "baoting") {
                var type = PZHActionType.TYPE_BAOTING;
                sendOperateCard(type, MJModel.curOperateCard);
                this.setOperator(-1);
                return;
            }

            if (name == "xiaohu") {
                var type = PZHActionType.TYPE_XIAO_HU;
                sendOperateCard(type, MJModel.curOperateCard);
                this.setOperator(-1);
                return;
            }

            if (name == "buzhang") {
                var card = MJModel.curOperateCard;
                if (MJModel.bu_info.length > 1) {
                    var selectLayer = new ChooseGang();
                    selectLayer.setChoiceInfos(MJModel.bu_info);
                    selectLayer.setName("ChooseGang_selectLayer");
                    selectLayer.setPosition(cc.p(n.getPosition().x + 0, n.getPosition().y + 50));
                    selectLayer.setCallback(function (index) {
                        sendOperateCard(MJModel.bu_info[index].state, MJModel.bu_info[index].curCard);
                        self.setOperator(-1);
                        self.removeChildByName("ChooseGang_selectLayer");
                    });
                    this.addChild(selectLayer, 10000);
                    return;
                } else if (MJModel.bu_info.length == 1) {
                    card = MJModel.bu_info[0].curCard;
                    type = MJModel.bu_info[0].state;
                    sendOperateCard(type, card);
                    this.setOperator(-1);
                    return;
                }

                type = PZHActionType.TYPE_AN_BU;

                if ((op & PZHActionType.TYPE_WAN_BU) == PZHActionType.TYPE_WAN_BU) {
                    type = PZHActionType.TYPE_WAN_BU;
                }
                else if ((op & PZHActionType.TYPE_ZHI_BU) == PZHActionType.TYPE_ZHI_BU) {
                    type = PZHActionType.TYPE_ZHI_BU;
                }
                sendOperateCard(type, card);
                this.setOperator(-1);
                return;
            }

            if (name == "yaopai") {
                sendHaiDiLao(true);
                this.setOperator(-1);
                return;
            }

            if (name == "buyaopai") {
                sendHaiDiLao(false);
                this.setOperator(-1);
                return;
            }

            if ((name == "pass") && selfTable.isHu(MJModel.curOperate)) {
                var card = MJModel.curOperateCard;
                var type = ActionType.TYPE_PASS;
                if (name == "peng") type = ActionType.TYPE_PENG;
                self.sureOperate(type, card);
                return;
            }

            super_btnCallback.call(this, ref);
        };
        MJAction.prototype.showSelectHaiDiPai = function () {
            this.removeChildByName("ChooseGang_selectLayer");
            if (this.actions["yaopai"]) {
                this.actions["yaopai"].setVisible(true);
            }

            if (this.actions["buyaopai"]) {
                this.actions["buyaopai"].setVisible(true);
            }
            this.reflashOpBtns();
        };
        MJAction.prototype.sureOperate = function (type, card) {
            if (MJModel.needTipWhenPass == 1) {
                var op = MJModel.curOperate;
                if ((type == ActionType.TYPE_PASS) && selfTable.isHu(op)) {
                    this.showPassWarn(type, card, "确定放弃胡牌？");
                    return;
                }
            } else if (MJModel.needTipWhenPass == 2) {
                var op = MJModel.curOperate;
                if (type == ActionType.TYPE_PASS && (op & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                    if (MJModel.mj_table.room_Card.isDuoPai(0) || MJModel.gangMoPai) {
                        this.showPassWarn(type, card, "确定放弃胡牌？");
                        return;
                    }
                }
            }
            sendOperateCard(type, card);
            this.setOperator(-1);
        };

        MJAction.prototype.getOpBtnWidth = function () {
            var count = 0;
            for (var i = 0; i < this.opBtns.length; i++) {
                var opBtn = this.opBtns[i];
                if (opBtn.isVisible()) {
                    count++;
                }
            }
            if (count <= 4) {
                return 220;
            } else if (count <= 5) {
                return 180;
            } else {
                return 150;
            }
        };
    },
    isHu: function (op) {
        if ((op & ActionType.TYPE_HU) == ActionType.TYPE_HU
            || (op & PZHActionType.TYPE_XIAO_HU) == PZHActionType.TYPE_XIAO_HU) {
            return true;
        }
        return false;
    },
    initMJActionVideo: function () {
        var selfTable = this;
        var super_mjactionvideo_ctor = MJActionVideo.prototype.ctor;
        MJActionVideo.prototype.ctor = function () {
            super_mjactionvideo_ctor.call(this);
            for (var i = 0; i < 4; i++) {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("RoomMJ/action/baoting1.png"), getResPath("RoomMJ/action/baoting1.png"), "");
                btn.setName("baoting");
                btn.setVisible(false);
                btn.setTag(1);
                this.addChild(btn);

                this.actions[i]["baoting"] = btn;
                this.opBtns[i].push(btn);
            }

            for (var i = 0; i < 4; i++) {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("RoomMJ/action/hu1.png"), getResPath("RoomMJ/action/hu1.png"), "");
                btn.setName("xiaohu");
                btn.setVisible(false);
                btn.setTag(1);
                this.addChild(btn);

                this.actions[i]["xiaohu"] = btn;
                this.opBtns[i].push(btn);
            }

            for (var i = 0; i < 4; i++) {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("RoomMJ/action/pass1.png"), "", "");
                btn.setName("buyaopai");
                btn.setVisible(false);
                btn.setTag(1);
                this.addChild(btn);

                this.actions[i]["buyaopai"] = btn;
                this.opBtns[i].push(btn);
            }

            for (var i = 0; i < 4; i++) {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("ningxiangmj/ningxiang/yaopai1.png"), "", "");
                btn.setName("yaopai");
                btn.setVisible(false);
                btn.setTag(1);
                this.addChild(btn);

                this.actions[i]["yaopai"] = btn;
                this.opBtns[i].push(btn);
            }
        };

        MJActionVideo.prototype.setOperator = function (pos, operat) {
            for (var i = 0; i < this.opBtns[pos].length; i++) {
                this.opBtns[pos][i].setVisible(false);
            }

            if (operat == -1 || operat == 0 || operat == null || operat == undefined) {
                return false;
            }

            if (( operat & ActionType.TYPE_LISTEN) == ActionType.TYPE_LISTEN) {
                operat = operat - ActionType.TYPE_LISTEN;
            }

            if (operat <= 0) {
                return false;
            }

            if (this.actions[pos]["pass"]) {
                this.actions[pos]["pass"].setVisible(true);
            }

            if ((operat & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                if (this.actions[pos]["hu"]) {
                    this.actions[pos]["hu"].setVisible(true);
                }
            }

            if ((operat & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG || (operat & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (operat & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                if (this.actions[pos]["gang"]) {
                    this.actions[pos]["gang"].setVisible(true);
                }
            }

            if ((operat & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                if (this.actions[pos]["peng"]) {
                    this.actions[pos]["peng"].setVisible(true);
                }
            }

            if ((operat & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (operat & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI || (operat & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                if (this.actions[pos]["chi"]) {
                    this.actions[pos]["chi"].setVisible(true);
                }
            }


            if (operat != -1 && (operat & PZHActionType.TYPE_BAOTING) == PZHActionType.TYPE_BAOTING) {
                if (this.actions[pos]["baoting"]) {
                    this.actions[pos]["baoting"].setVisible(true);
                }
            }

            if (operat != -1 && (operat & PZHActionType.TYPE_XIAO_HU) == PZHActionType.TYPE_XIAO_HU) {
                if (this.actions[pos]["xiaohu"]) {
                    this.actions[pos]["xiaohu"].setVisible(true);
                }

                if (this.actions[pos]["pass"]) {
                    this.actions[pos]["pass"].setVisible(false);
                }
            }

            this.reflashOpBtns(pos);
            return true;
        };

        MJActionVideo.prototype.showSelectHaiDiPai = function (pos) {
            if (operat != -1 && (operat & PZHActionType.TYPE_XIAO_HU) == PZHActionType.TYPE_XIAO_HU) {
                if (this.actions[pos]["yaopai"]) {
                    this.actions[pos]["yaopai"].setVisible(true);
                }

                if (this.actions[pos]["buyaopai"]) {
                    this.actions[pos]["buyaopai"].setVisible(false);
                }
            }

            this.reflashOpBtns(pos);
        };
    },
    initMJConfig: function () {
    },
    initMJPublic: function () {
        var self_table = this;
    },
    ShowHuPaiTypeSound: function (dele, seatId, AddType) {
        var pos = MJModel.getPosBySeatid(seatId);
        var player = this.players[pos];
        if (player) {
            var callback = cc.callFunc(function () {
                var players = MJModel.players[seatId];
                var sounstr = __String.createWithFormat("ningxiangmj/sound/qishouhu/%1_%2.mp3", players.sex == SEX_ID.SEX_MAN ? "male" : "female", AddType);

                Sound.getInstance().playEffect(getResPath(sounstr));
            });
            this.runAction(cc.sequence(cc.delayTime(dele), callback));
        }


    },
    playBgSound: function () {
        if (MJModel.yinyue == "jingkuai") {
            Sound.getInstance().PlayBgSound(getResPath("RoomMJ/sound/csmj1.mp3"));
        } else if (MJModel.yinyue == "suhuan") {
            Sound.getInstance().PlayBgSound(getResPath("RoomMJ/sound/csmj2.mp3"));
        } else {
            Sound.getInstance().PlayBgSound(getResPath("lingqiu/sound/music_hall.mp3"));
        }
    },
    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.getValue();
            if (typeof b === "object") bv = b.getValue();
            if (av == this._curLaizi && bv != this._curLaizi)return 1;//赖子放在最前边
            if (av != this._curLaizi && bv == this._curLaizi)return -1;//赖子放在最前边
            return bv - av;
        } catch (e) {
            return 0;
        }
    },
    test: function (dt) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;

        if (tempCount == 5 && false) {
            //this._showPiaoLayer();
            //this._showPiaoWaitLayer();
            this.room_Action.showSelectHaiDiPai();
            //this.room_Action.showPassWarn(1, 1, "您可以胡了，如果选择过，要过圈或胡\n牌番数有变，确定过胡吗？");
            return;
            this._setPiaoNum(0, 0);
            this._setPiaoNum(0, 1);
            this._setPiaoNum(1, 2);
            this._setPiaoNum(1, 3);
        }
        if (tempCount == 5 && false) {
            if (this.room_Action.actions["chi"]) {
                this.room_Action.actions["chi"].setVisible(true);
            }
            if (this.room_Action.actions["peng"]) {
                this.room_Action.actions["peng"].setVisible(true);
            }
            if (this.room_Action.actions["gang"]) {
                this.room_Action.actions["gang"].setVisible(true);
            }
            if (this.room_Action.actions["bu"]) {
                this.room_Action.actions["bu"].setVisible(true);
            }
            if (this.room_Action.actions["hu"]) {
                this.room_Action.actions["hu"].setVisible(true);
            }

            if (this.room_Action.actions["pass"]) {
                this.room_Action.actions["pass"].setVisible(true);
            }
            this.room_Action.reflashOpBtns();
        }

        if (tempCount == 5 && false) {
            for (var i = 0; i < 4; i++) {
                //var arr = [0x41, 0x42, 0x42, 0x43, 0x51, 0x52, 0x53, 0x54, 0x55, 0x51, 0x52, 0x53, 0x54, 0x55, 0x31, 0x51, 0x52, 0x53, 0x54, 0x55, 0x51, 0x52, 0x53, 0x54, 0x55, 0x31];
                var arr = [0x41, 0x42, 0x42, 0x43, 0x51, 0x52, 0x53, 0x54, 0x55, 0x51, 0x52, 0x53, 0x54, 0x55, 0x31, 0x51, 0x52];

                for (var k = 0; k < arr.length; k++) {
                    this.room_Card.addOutCard(i, arr[k]);
                }
            }
        }


        if (tempCount == 5 && false) {
            for (var j = 0; j < 4; j++) {
                for (var i = 0; i < 8; i++) {
                    this.room_Card.addOutCard(j, 0x51);
                }
            }

        }

        if (tempCount == 5 && true) {
            var packet = {
                "gameend": {
                    "UserCard": [{
                        "ChangeableCardsLen": 11,
                        "ChangeableCards": [4, 4, 5, 6, 7, 21, 22, 23, 36, 36, 36],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{"CardData": 8, "state": 4, "chairID": 2, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 1,
                        "ChangeableCards": [17],
                        "FixedCardsLen": 4,
                        "stFixedCards": [{
                            "CardData": 24,
                            "state": 1,
                            "chairID": 2,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 37, "state": 1, "chairID": 0, "OpCards": [], "LaiziNum": null}, {
                            "CardData": 25,
                            "state": 1,
                            "chairID": 0,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 19, "state": 1, "chairID": 0, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 10,
                        "ChangeableCards": [7, 7, 20, 20, 21, 22, 23, 33, 34, 35],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{"CardData": 39, "state": 1, "chairID": 0, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }],
                    "Score": [9, -4, -5],
                    "EndState": 0,
                    "EndGangInfo": [{"Gang": [{"GangType": 4, "GangCard": 8}], "TotalGangScore": 1}, {
                        "Gang": [],
                        "TotalGangScore": 0
                    }, {"Gang": [{"GangType": 16, "GangCard": 8}], "TotalGangScore": -1}],
                    "faninfo": [{
                        "chairid": 0,
                        "SpecialType": 1,
                        "FanNum": 0,
                        "addfan": [{"AddType": 17, "AddNum": 1, "AddType2": 1}],
                        "hucard": 23,
                        "DianPao": []
                    }, {
                        "chairid": 1,
                        "SpecialType": 4,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {"chairid": 2, "SpecialType": 4, "FanNum": 0, "addfan": [], "hucard": 0, "DianPao": []}],
                    "money": [100009, 99996, 99995],
                    "ts": 1551337847,
                    "md5": []
                },
                "macards": [],
                "cardvecs": [{"cardnum": 0, "cards": []}, {"cardnum": 0, "cards": []}, {"cardnum": 0, "cards": []}]
            };
            this.handler_server_game_end_bc(packet);
        }
    },

    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.ningxiangmajiang.tagCDGameScence", jpacket);
            //var ackGameFree = parsePacket("proto.game.AckGameScene", jpacket);

            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.ningxiangmajiang.AckCDGameEnd", jpacket);
            //var ackGameEnd = parsePacket("proto.game.AckCDGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_Laizi_BC) {
            this._handler_server_laizi_bc(jpacket, canDelay);
            return;
        }

        if (cmd == selfCMD.SERVER_Start_Piao) {
            this.handler_server_start_piao(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_AckBroadChoose) {
            this.handler_server_broad_piao_choose(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_AckBroadChooseResult) {
            this.handler_server_broad_piao_result(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_SEND_HAIDIPAI_START) {
            this.handler_server_start_haidilao(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_SHOW_HAIDIPAI) {
            this.handler_server_show_haidilao(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_SHOW_GANGHOUPAI) {
            this.handler_server_gang_bu(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_AckUserCanNotHu) {
            this.handler_server_AckUserCanNotHu_msg(jpacket, canDelay);
            return;
        }
        this._super(cmd, jpacket, canDelay, svrid);
    },
    handler_server_AckUserCanNotHu_msg: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.ningxiangmajiang.AckUserCanNotHu", data);
        var chairid = jpacket.chairid;
        var msg = "当前未过庄，不能胡";
        if(MJModel.isMyPlayer(chairid) && canDelay){
            this.room_Tip.showMyTip(msg);
        }
    },
    handler_server_start_haidilao: function (jpacket, canDelay) {
        var packet = parsePacket("proto.game.ningxiangmajiang.AckUserIsNeedHaiDiCard", jpacket);
        var chairID = packet.chairID;
        if (MJModel.isMyPlayer(chairID)) {
            this.room_Action.showSelectHaiDiPai();
        }
        if (MJModel.isOnVideo) {
            this.room_Action_video.showSelectHaiDiPai(MJModel.getPosBySeatid(chairID));
        }
    },
    handler_server_show_haidilao: function (jpacket, canDelay) {
        var packet = parsePacket("proto.game.ningxiangmajiang.ResUserNeedHaiDiCard", jpacket);
        var chairID = packet.chairID;
        var bNeedCard = packet.bNeedCard;
        var nHaiDiCard = packet.nHaiDiCard;
        var pos = MJModel.getPosBySeatid(chairID);


        if (MJModel.isOnVideo) {
            if (this.room_Action_video) this.room_Action_video.reset();
        }

        if (!bNeedCard) {
            return;
        }

        this.room_Info.showCardNums(0);

        var self = this;
        var card = null;
        if (MJModel.isMyPlayer(chairID)) {
            MJModel.canTouchCard = false;
            card = new MJCard();
            card.setValue(nHaiDiCard, pos, CardType.Card_End, -1);
            card.setMyPosition(MJConfig.getMoCardPos(pos));
            this.addChild(card, MJConfig.getMoCardOrder(pos));
        } else {
            card = new MJCard();
            card.setValue(0, pos, CardType.Card_Hand, -1);
            card.setMyPosition(MJConfig.getMoCardPos(pos));
            this.addChild(card, MJConfig.getMoCardOrder(pos));
        }
        var show_haidipai = cc.callFunc(function () {
            self.room_Card.addOutCard(pos, nHaiDiCard);
        });

        card.runAction(cc.sequence(cc.delayTime(1), show_haidipai, cc.removeSelf()));
    },
    handler_server_gang_bu: function (data, canDelay) {
        var gangMo = parsePacket("proto.game.ningxiangmajiang.tagShowGangHouMoPai", data);
        var seatId = gangMo.chairID;
        var cardnums = gangMo.cardnums;
        var ganghoucards = gangMo.ganghoucards;
        var gangshai = gangMo.gangshai;
        var pos = MJModel.getPosBySeatid(seatId);

        //var leftCardNum = gangMo.LeftCardNum;
        this.room_Info.showCardNums(this.room_Info.curCardNums - cardnums);

        for (var i = 0; i < ganghoucards.length; i++) {
            this.room_Card.addOutCard(pos, ganghoucards[i]);
        }

        if (MJModel.isMyPlayer(seatId)) {
            MJModel.mj_lockcard_type = 2;
        }

        if (this.room_Card) {
            this.room_Card.setSomeCardClickState();
        }

        if (gangshai) {
            this.room_Card.removePublicCardByJumpNums(cardnums, true, (gangshai[0] + gangshai[1]), true);
        }

        if (!canDelay) {
            return;
        }

        var isGangNull = true;
        if (ganghoucards && ganghoucards.length > 0) {
            isGangNull = false;
        }

        if (gangshai) {
            this.gang_bu_da_shaizi(gangshai, isGangNull, canDelay);
        }

        if (isGangNull) {
            return;
        }

        var paiTips = new GangPaiTips();
        paiTips.setName("GangPaiTips");
        paiTips.showGangPai(ganghoucards);
        paiTips.setVisible(false);
        this.addChild(paiTips, 10000);

        paiTips.runAction(cc.sequence(cc.delayTime(3), cc.show(), cc.delayTime(2), cc.removeSelf()));

        //this._handler_gangchu_op(gangMo.OpNotify);
    },
    gang_bu_da_shaizi: function (ShaiZis, isGangNull, canDelay) {

        if (!canDelay) {
            return;
        }

        var shai = ShaiZis;

        var self = this;

        //杠牌打色子摸牌
        this.removeChildByName("GangPaiTips")
        this._showDaShai(shai);
        if (isGangNull) {
            var callback = cc.callFunc(function () {
                self.room_Tip.showMyTip("很抱歉，本次打色没有投中牌！");
            });
            this.runAction(cc.sequence(cc.delayTime(2), callback));
        }
    },
    _showDaShai: function (shai, seatIds) {
        var needMove = seatIds != undefined;
        for (var m = 0; m < shai.length; m++) {
            var path = this._getShaiZiPath(shai[m]);
            var animation = new cc.Animation();
            var start = Utils.Random(0, 2);
            for (var i = start; i <= start + 4; i++) {
                animation.addSpriteFrameWithFile(getResPath(__String.createWithFormat("ningxiangmj/shaizi/shai_anim%1.png", i)));
            }
            animation.addSpriteFrameWithFile(path);
            animation.setDelayPerUnit(0.1);
            var animate = cc.animate(animation);

            var sp = new cc.Sprite(path);
            sp.setPosition(MJConfig.getShaiZiPos(m, shai.length));

            if (needMove) {
                var zhongSeatId = seatIds[m];
                var zhongLength = 0;
                var zhongIndex = 0;
                var pos = MJModel.getPosBySeatid(zhongSeatId);
                for (var n = 0; n < shai.length; n++) {
                    if (zhongSeatId == seatIds[n]) {
                        zhongLength++;
                        if (n < m) {
                            zhongIndex++;
                        }
                    }
                }
                var endPos = MJConfig.getNiaoEndCardPos(pos, zhongIndex, zhongLength, true);
                sp.runAction(cc.sequence(animate.repeat(2), cc.delayTime(1), cc.moveTo(0.5, endPos), cc.delayTime(3), cc.removeSelf()));

            } else {
                sp.runAction(cc.sequence(animate.repeat(2), cc.delayTime(3), cc.removeSelf()));
            }
            this.addChild(sp, 1000);
        }
        Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/dashaizi.mp3"));
    },
    _getShaiZiPath: function (shaiNum) {
        var sp = "";
        if (shaiNum == 1) {
            sp = getResPath("ningxiangmj/shaizi/shai1.png");
        } else if (shaiNum == 2) {
            sp = getResPath("ningxiangmj/shaizi/shai2.png");
        } else if (shaiNum == 3) {
            sp = getResPath("ningxiangmj/shaizi/shai3.png");
        } else if (shaiNum == 4) {
            sp = getResPath("ningxiangmj/shaizi/shai4.png");
        } else if (shaiNum == 5) {
            sp = getResPath("ningxiangmj/shaizi/shai5.png");
        } else if (shaiNum == 6) {
            sp = getResPath("ningxiangmj/shaizi/shai6.png");
        }
        return sp;
    },
    handler_server_start_piao: function (jpacket, canDelay) {
        cc.log("lin=handler_server_start_piao");
        MJModel.roomState = 1;
        MJModel.liangPaiStates = [-1, -1, -1, -1];
        MJModel.bu_info = [], //湖南麻将特有的补张操作
            this.resetGame(false);
        this.room_Info.setVisible(true);
        if (this.room_Action.actions["yaoqing"]) {
            this.room_Action.actions["yaoqing"].setVisible(false);
        }
        if (this.room_Action.actions["copyshare"]) {
            this.room_Action.actions["copyshare"].setVisible(false);
        }

        if (this.pre_scene) {
            this.pre_scene.removeFromParent(true);
            this.pre_scene = null;
        }

        this._showPiaoLayer();
    },
    handlerAutoUpTableReady: function (nums, selfIsReady) {
        cc.log("lin=handlerAutoUpTableReady=" + MJModel.roomState);
        if (MJModel.seatid == -1 && nums < 4) {
            this.actionCallBack("uptable");
        }
        else if (selfIsReady == false) {
            if (MJModel.canQuxiaoZhun()) {
                if (MJModel.roomState != 0) this.actionCallBack("ready");
            } else {
                this.actionCallBack("ready");
            }
        }
    },
    handler_server_operate_notify_bc: function (data, canDelay) {
        var ackOpNotify = parsePacket("proto.game.AckOpNotify", data);
        var seatid = ackOpNotify.ChairID;
        var optype = ackOpNotify.OpType;
        var optype2 = ackOpNotify.OpType2;
        var card = ackOpNotify.Card;

        if (MJModel.isMyPlayer(seatid)) {
            MJModel.bu_info = [];
        }

        this._super(data, canDelay);

        this.init_bu_info();
    },
    handler_server_mo_card_bc: function (data, canDelay) {
        var userGetCard = parsePacket("proto.game.AckUserGetCard", data);
        var seatId = userGetCard.ChairID;
        var card = userGetCard.Card;
        var encrypt_code = userGetCard.encrypt_code;
        var pos = MJModel.getPosBySeatid(seatId);
        if (card == null)encrypt_code = 0;
        if (MJModel.isMyPlayer(seatId)) {
            MJModel.bu_info = [];
        }

        this._super(data, canDelay);

        if (MJModel.isMyPlayer(seatId) && card > 0 && card != 255) {
            cc.log("lin=showHandCards=handler_server_mo_card_bc");
            this.showHandCards(pos);
        } else if (card != 255) {
            this.showHandCards(pos);
        }

        this.init_bu_info();
    },
    init_bu_info: function () {
        var temp = [];
        for (var i = 0; i < MJModel.gang_info.length; i++) {
            var tgInfo = MJModel.gang_info[i];
            if ((tgInfo.state & PZHActionType.TYPE_AN_BU) == PZHActionType.TYPE_AN_BU
                || (tgInfo.state & PZHActionType.TYPE_WAN_BU) == PZHActionType.TYPE_WAN_BU
                || (tgInfo.state & PZHActionType.TYPE_ZHI_BU) == PZHActionType.TYPE_ZHI_BU) {
                var tgInfo1 = Utils.clone(tagGangInfo);
                tgInfo1.curCard = tgInfo.curCard;
                tgInfo1.state = tgInfo.state;
                if ((tgInfo.state & PZHActionType.TYPE_AN_BU) == PZHActionType.TYPE_AN_BU)tgInfo1.state = PZHActionType.TYPE_AN_BU;
                if ((tgInfo.state & PZHActionType.TYPE_WAN_BU) == PZHActionType.TYPE_WAN_BU)tgInfo1.state = PZHActionType.TYPE_WAN_BU;
                if ((tgInfo.state & PZHActionType.TYPE_ZHI_BU) == PZHActionType.TYPE_ZHI_BU)tgInfo1.state = PZHActionType.TYPE_ZHI_BU;
                MJModel.bu_info.push(tgInfo1);
            }

            if ((tgInfo.state & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG
                || (tgInfo.state & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG
                || (tgInfo.state & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                var tgInfo1 = Utils.clone(tagGangInfo);
                tgInfo1.curCard = tgInfo.curCard;
                tgInfo1.state = tgInfo.state;
                if ((tgInfo.state & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG)tgInfo1.state = ActionType.TYPE_ZHIGANG;
                if ((tgInfo.state & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG)tgInfo1.state = ActionType.TYPE_WANGANG;
                if ((tgInfo.state & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG)tgInfo1.state = ActionType.TYPE_ANGANG;
                temp.push(tgInfo1);
            }
        }
        MJModel.gang_info = temp;
        cc.log("lin=bu_info=" + JSON.stringify(MJModel.bu_info));
        cc.log("lin=gang_info=" + JSON.stringify(MJModel.gang_info));
    },
    handler_server_broad_piao_choose: function (jpacket, canDelay) {
        var packet = parsePacket("proto.game.ningxiangmajiang.AckBroadChoose", jpacket);
        var chair_id = packet.chair_id;
        this._piaoState[chair_id] = 1;
        this._showPiaoWaitLayer(this._piaoState);
    },
    handler_server_broad_piao_result: function (jpacket, canDelay) {
        var packet = parsePacket("proto.game.ningxiangmajiang.AckBroadChooseResult", jpacket);
        var result = packet.result;
        this._piaoResult = result;
        if (this.getChildByName("linqiu_PiaoWaitLayer")) {
            this.removeChildByName("linqiu_PiaoWaitLayer");
        }

        for (var i = 0; i < result.length; i++) {
            var pos = MJModel.getPosBySeatid(i);
            var player = this.players[pos];
            if (player) {
                player.addPiaoIcon(pos, result[i]);
            }
        }
    },

    handler_server_update_info_uc: function (data, canDelay) {
    },
    _handler_game_record: function (data, canDelay) {
        if (this.isjieshan) {
            ZJHModel.getInstance().roomToHall();
        }
        if (MJModel.gpsInfo) {
            MJModel.gpsInfo.removeFromParent(true);
            MJModel.gpsInfo = null;
        }

        //-----新总结算界面
        var gpsInfo = cc.director.getRunningScene().getChildByName("gpsInfo");
        if (gpsInfo) {
            gpsInfo.removeFromParent(true);
        }

        cc.log("------big End");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var pkgId = this._pkg_id;
        var gameType = "新宁乡麻将";
        if (this.mj_roomType == 1) {
            gameType = gameType + " 3人"
        } else if (this.mj_roomType == 2) {
            gameType = gameType + " 2人"
        } else {
            gameType = gameType + " 4人"
        }
        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];
        //gameType += " · " + MJModel.base_money + "分底";

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        //var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;

        var max_score = 0;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            if (recoreInfo.totalscore > max_score) {
                max_score = recoreInfo.totalscore;
            }
        }

        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            //var playerRecord = totalRecord.player_records[i];
            var player = MJModel.players[i];
            var arrStr = [];
            //次数
            var arrcount = [];

            arrStr = ["坐庄次数", "胡牌次数", "点炮次数", "超时次数", "小胡次数"];
            arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.Ex1, recoreInfo.outtime_num, recoreInfo.Ex2];

            if (player && player.uid != -1 && player.uid != 0) {
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var isWin = false;
                if (max_score > 0 && recoreInfo.totalscore == max_score) {
                    isWin = true;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, isWin, _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner, recoreInfo.dissState);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }
        }
        bigResult.refresh(PlayerNumber);
        this.release();
    }
    ,

    handler_server_game_end_bc: function (hubeiGameend, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            var ackGameEnd = hubeiGameend.gameend;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);

            if (MJModel.mj_table.getChildByName("tingpai_layer")) {
                MJModel.mj_table.removeChildByName("tingpai_layer")
            }

            this.room_Info.stopTime();
            this.room_Tip.hideOutCardTip();

            var show_all_handcard = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var show_liuju = cc.callFunc(function () {
                if (ackGameEnd.EndState == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
            });

            var show_end_score = cc.callFunc(function () {
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var update_all_money = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var game_end_reset = cc.callFunc(function () {
                self.room_Action.setReady2Visible(false);
                var result = new MJResult_XinYu();
                result.updateContentView(hubeiGameend);
                result.setName("reset_remove");
                self.addChild(result, 100000);
                return;
                try {
                    var result = new MJResult_XinYu();
                    result.updateContentView(hubeiGameend);
                    result.setName("reset_remove");
                    self.addChild(result, 100000);
                    if (MJModel.mj_table._isJieSan) {
                        result.setName("xxxxx");
                    }
                } catch (e) {
                    cc.log("game end:", e);
                    self.room_Action.setReady2Visible(true);
                }
            });

            var show_all_public_card = cc.callFunc(function () {
                self.gameend_showAllPublicCard(ackGameEnd);
            });

            if (MJModel.isOnVideo && canDelay == false) {
                this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(2), update_all_money, cc.delayTime(1), game_end_reset));
                return;
            }
            if (MJModel.mj_table._isJieSan) {
                this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(0.5), show_end_score, cc.delayTime(0), update_all_money, cc.delayTime(0.5), game_end_reset));
                return;
            }
            this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(1), show_liuju, cc.delayTime(ackGameEnd.EndState == 1 ? 1 : 0), show_end_score, cc.delayTime(0), update_all_money, cc.delayTime(1), game_end_reset));
        } catch (e) {
            ERROR(this, "handler_server_game_end_bc" + e);
        }
    },

    timeEnd: function (dt) {

        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    },

    _handler_server_laizi_bc: function (data, canDelay) {
        var packet = parsePacket("proto.game.ningxiangmajiang.AckLaiZi", data);
        var self = this;
        var curLaizi = packet.card;
        this._setLaizi(curLaizi, -1, -1, canDelay ? true : false);
        if (canDelay == false) {
            this._showHandcardFlag(false);
            this.room_Card.reflashHandCard(0, true);
            this.room_Card.reflashHandCard(1, true);
            this.room_Card.reflashHandCard(2, true);
            this.room_Card.reflashHandCard(3, true);
            return;
        }
        MJModel.isEnterWait = true;

        var move_end = cc.callFunc(function () {
            self._showHandcardFlag(false);

            var mo_card = null;
            if (self.room_Card.isDuoPai(0)) {
                mo_card = self.room_Card.hand_card[0][self.room_Card.hand_card[0].length - 1];
                self.room_Card.hand_card[0].splice(self.room_Card.hand_card[0].length - 1, 1);
            }

            var allPreCars = [];
            var allLaiZi = [];
            var dd = 0;

            for (var i = self.room_Card.hand_card[0].length - 1; i >= 0; i--) {
                var card = self.room_Card.hand_card[0][i];
                if (card.getValue() == curLaizi) {
                    allLaiZi.push(card);
                } else {
                    if (allLaiZi.length > 0) {
                        break;
                    }
                    allPreCars.push(card);
                }
            }

            if (allLaiZi.length > 0 && allPreCars.length > 0) {
                var allDelay = 0;
                for (var i = 0; i < allLaiZi.length; i++) {
                    var card = allLaiZi[i];
                    var begin_pos = card.getPosition();
                    var end_pos = MJConfig.getHandCardPos(0, self.room_Card.hand_card[0].length - 1 - i, self.room_Card.hand_card[0].length, self.room_Card.isDuoPai(0));
                    var allL = Math.abs(end_pos.x - begin_pos.x);

                    //if (MJModel.outCardEffect_style == 0 || true) {
                    var time = allL / 1000;
                    if (time < 0.17) time = 0.17;
                    if (time > 0.3) time = 0.3;
                    card.runAction(cc.sequence(cc.spawn(cc.rotateTo(0.1, 15), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + 100))), cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y + 100)).easing(cc.easeSineOut()), cc.spawn(cc.rotateTo(0.1, 0), cc.moveTo(0.17, end_pos))));
                    allDelay += 1;
                }
                for (var i = 0; i < allPreCars.length; i++) {
                    var card = allPreCars[i];
                    //card.runAction(cc.sequence(cc.moveBy(0.3, cc.p(83, 0)), cc.delayTime(1 - 0.3)).repeat(allLaiZi.length));
                    card.runAction(cc.moveBy(0.3, cc.p(83 * allLaiZi.length, 0)));
                }

                var callback = cc.callFunc(function () {
                    MJModel.isEnterWait = false;
                    self.room_Card.reflashHandCard(0, true);
                    if (mo_card) {
                        mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                        self.room_Card.hand_card[0].push(mo_card);
                    }
                });
                self.runAction(cc.sequence(cc.delayTime(0.5), callback));
            } else {
                MJModel.isEnterWait = false;
                self.room_Card.reflashHandCard(0, true);
                if (mo_card) {
                    mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                    self.room_Card.hand_card[0].push(mo_card);
                }
            }
        });
        this.runAction(cc.sequence(cc.delayTime(1), move_end));
    },

    _setGameType: function () {
        var pkg_id = 1;
        var play_id = [];
        //甩字胡不可炮胡
        //play_id.push(MJModel.base_money + "分底");
        if (this.mj_roomType == 0) {
            play_id.push("4人");
        } else if (this.mj_roomType == 1) {
            play_id.push("3人");
        } else if (this.mj_roomType == 2) {
            play_id.push("2人");
        }


        if (MJModel.RoomConfigID.indexOf(2821002) != -1) {
            play_id.push("全开放");
        }

        if (MJModel.RoomConfigID.indexOf(2821003) != -1) {
            play_id.push("半开放");
        }

        if (MJModel.RoomConfigID.indexOf(2822001) != -1) {
            play_id.push("不抓鸟");
        }

        if (MJModel.RoomConfigID.indexOf(2822002) != -1) {
            play_id.push("抓1鸟");
            MJModel.isZhuaNiao = true;
        }

        if (MJModel.RoomConfigID.indexOf(2822003) != -1) {
            play_id.push("抓2鸟");
            MJModel.isZhuaNiao = true;
        }

        if (MJModel.RoomConfigID.indexOf(2822004) != -1) {
            play_id.push("抓4鸟");
            MJModel.isZhuaNiao = true;
        }

        if (MJModel.RoomConfigID.indexOf(2822005) != -1) {
            play_id.push("抓6鸟");
            MJModel.isZhuaNiao = true;
        }

        if (MJModel.RoomConfigID.indexOf(2823001) != -1) {
            play_id.push("门清");
        }

        if (MJModel.RoomConfigID.indexOf(2823002) != -1) {
            play_id.push("平胡不接炮");
        }

        if (MJModel.RoomConfigID.indexOf(2824001) != -1) {
            play_id.push("杠后抓两张");
        }

        if (MJModel.RoomConfigID.indexOf(2824002) != -1) {
            play_id.push("杠后抓四张");
        }

        if (MJModel.RoomConfigID.indexOf(2000001) != -1) {
            play_id.push("可少人开局");
        }

        if (MJModel.RoomConfigID.indexOf(2000002) != -1) {
            play_id.push("可少人开局");
        }

        if (MJModel.RoomConfigID.indexOf(2000003) != -1) {
            play_id.push("可少人开局");
        }

        MJModel.play_id_str = play_id;

        var gameDes = "";
        for (var i = 0; i < play_id.length; i++) {
            gameDes += play_id[i];
            if (i != play_id.length - 1) {
                gameDes += " ";
            }
        }
        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);
        //this._setFastChat();
    },
    fastChat3: [
        "我等的花儿都谢了!",
        "让我想一下",
        "我们交个朋友吧!",
        "我有一百种方法胡你！",
        "下次咱们再玩吧!",
        "怎么又断线了",
        "我要离开一会!"
    ],
    _setFastChat: function () {
        var chatList = [];
        chatList = this.fastChat3;
        MJModel.mj_fastChat = this.fastChat3;
        var self = this;
        Utils.getFastChatSound = function (chat, sex) {
            for (var i = 0; i < chatList.length; i++) {
                if (chatList[i] == chat) {
                    var sounstr = __String.createWithFormat("ningxiangmj/sound/fast/%1_liaotian%2.mp3", sex == SEX_ID.SEX_MAN ? "male" : "female", i + 1);
                    return getResPath(sounstr);
                }
            }
            return "";
        };
    },

    _showLaizi_effect: function (name) {
        ccs.armatureDataManager.addArmatureFileInfo(getResPath("lingqiu/effect/laizi/effects_mjhunancx.ExportJson"));
        var size = cc.director.getWinSize();
        if (true) {
            var armature = new ccs.Armature("effects_mjhunancx");
            var animation = armature.getAnimation();
            if (animation) {
                if (typeof animation.playWithIndex === "function") {
                    animation.playWithIndex(0, -1, 0);
                    armature.setPosition(cc.p(size.width / 2, size.height / 2));
                    this.addChild(armature, 100);
                    armature.runAction(cc.sequence(cc.delayTime(1.0), cc.removeSelf()));
                }
            }
        }
        Sound.getInstance().playEffect(__String.createWithFormat(getResPath("lingqiu/sound/laizi.mp3")));
        return armature;
    },
    _setLaizi: function (laizi, laizipi, laizipi2, gamestart) {
        this._curLaizi = laizi;
        this._curLaizipi = laizipi;
        this._curLaizipi2 = laizipi2;

        var size = cc.director.getWinSize();
        if (laizi == null || laizi == undefined || laizi == -1 || laizi == 255) {
            if (this._curLaizi_bg) this._curLaizi_bg.setVisible(false);
            return;
        }
        if (gamestart == undefined) gamestart = false;

        if (this._curLaizi_bg == null) {
            this._curLaizi_bg = new cc.Sprite(getResPath("lingqiu/flag/laizi_bg3.png"));
            this._curLaizi_bg.setPosition(cc.p(size.width - 220, size.height - 70));
            this.addChild(this._curLaizi_bg, 200);
        }
        this._curLaizi_bg.removeAllChildren();
        this._curLaizi_bg.setVisible(true);

        if (this._curLaizi > 0) {
            var card = new MJCard();
            card.setValue(this._curLaizi, 0, CardType.Card_Out, 0);
            card.setPosition(cc.p(this._curLaizi_bg.getContentSize().width / 2, this._curLaizi_bg.getContentSize().height / 2));
            card.setScale(1);
            //card.setStoreColor(cc.color(255, 249, 137));
            this._curLaizi_bg.addChild(card);
            this.room_Card.other_card.push(card);

            if (gamestart) {
                var dl = 0;
                var ppos = card.getPosition();
                card.setScale(0);
                card.setVisible(false);
                var self = this;
                var callFunc = cc.CallFunc(function () {
                    self._showLaizi_effect("赖子皮");
                });
                card.setPosition(cc.p(size.width / 2 - this._curLaizi_bg.getPositionX() + this._curLaizi_bg.getContentSize().width / 2, size.height / 2 - this._curLaizi_bg.getPositionY() + this._curLaizi_bg.getContentSize().height / 2));
                card.runAction(cc.sequence(cc.delayTime(0 + dl), cc.show(), callFunc, cc.scaleTo(0.1, 2), cc.delayTime(1.0), cc.spawn(cc.moveTo(0.17, ppos), cc.scaleTo(0.17, 1))));
            }
        }
    },

    _showHandcardFlag: function (isEndShow) {
        if (MJModel.isOnVideo) {
            for (var j = 0; j < 4; j++) {
                var allcards = this.room_Card.hand_card[j];
                if (allcards) {
                    for (var i = 0; i < allcards.length; i++) {
                        var card = allcards[i];
                        this._checkAddCardFlag(card);
                    }
                }
            }
            return;
        }
        var allcards = this.room_Card.hand_card[0];
        if (allcards) {
            for (var i = 0; i < allcards.length; i++) {
                var card = allcards[i];
                this._checkAddCardFlag(card);
            }
        }
    },
    _checkAddCardFlag: function (card) {
        try {
            if (card.type == CardType.Card_Outing)return;
            if (card.type == CardType.Card_Peng)return;
            if (card.getValue() == 0)return;
            var flag_str = "";
            if (card.getValue() == this._curLaizi)flag_str = "lingqiu/flag/lai_flag2.png";
            if (card.getValue() == this._curLaizipi)flag_str = "lingqiu/flag/laipi_flag2.png";
            if (card.getValue() == this._curLaizipi2)flag_str = "lingqiu/flag/laipi_flag2.png";
            if (flag_str != "") {
                if (card.getValue() == this._curLaizi)card.setStoreColor(cc.color(255, 249, 137));
                var p = card.getChildByName("sprite");
                p.removeChildByName("laizi_flag");
                var flag = null;

                flag = new cc.Sprite(getResPath(flag_str));

                var m_size = p.getContentSize();
                if (flag) {
                    flag.setPosition(cc.p(0, m_size.height));
                    flag.setAnchorPoint(cc.p(0, 1));
                    flag.setName("laizi_flag");
                    p.addChild(flag);
                    this._flagDirection(card.pos, flag, m_size);
                    flag.setScale(0.5);
                    if (card.pos == 0 && card.type != CardType.Card_Out)flag.setScale(1);
                }
                return;
            }
        } catch (e) {
            Log(this, e);
        }
    },
    //每个方向角标对应
    _flagDirection: function (pos, flag, m_size) {
        if (MJModel.mj_table_view == "2d") {
            if (MJModel.mj_paiban == "vertical" || pos == 2) {
                return;
            }
        }
        if (pos == 1) {
            flag.setPosition(cc.p(0, 15));
            flag.setRotation(-90);
        } else if (pos == 2) {
            flag.setPosition(cc.p(m_size.width, 5));
            flag.setRotation(180);
        } else if (pos == 3) {
            flag.setPosition(cc.p(m_size.width, m_size.height));
            flag.setRotation(90);
        }
    },
    resetGame: function (allClean) {
        this._super(allClean);
        this._setLaizi(-1, -1, -1);
        this.isForceTing = false;
        MJModel.mj_lockcard_type = 0;
        this._huaCard = [[], [], [], []];
        MJModel.baotingStates = [-1, -1, -1, -1];
        this._huaValues = [0x41, 0x42, 0x43, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x60];
        this._piaoState = [0, 0, 0, 0];

        for (var i = 0; i < 4; i++) {
            this.removeChildByName("qishouhutip" + i);
        }
    },
    handler_server_scene_info_uc: function (hubei_scene, canDelay) {
        if (hubei_scene) {
            this.updateBg(false);
            MJModel.RoomConfigID = hubei_scene.gamesence.RoomConfigID;
            MJModel.banker_seatid = hubei_scene.gamesence.BankerChairid;
            var ackGameFree = hubei_scene.gamesence;
            if (ackGameFree.RoomConfigID.indexOf(2000001) != -1)MJModel.changMode = 2;
            if (ackGameFree.RoomConfigID.indexOf(2000002) != -1)MJModel.changMode = 1;
            if (ackGameFree.RoomConfigID.indexOf(2000003) != -1)MJModel.changMode = 3;

            if (hubei_scene.lai_zi) {
                this._setLaizi(hubei_scene.lai_zi, -1, false);
            }
            //锁住手牌
            this._setGameType();

            var fang_result = hubei_scene.fang_result;
            var is_choose_fang = hubei_scene.is_choose_fang;

            var is_choose_fang = hubei_scene.is_choose_fang;

            if (is_choose_fang && is_choose_fang.length > 0) {
                this._piaoState = is_choose_fang;
                for (var i = 0; i < is_choose_fang.length; i++) {
                    var state = is_choose_fang[i];
                    if (MJModel.isMyPlayer(i)) {
                        if (state == 0) {
                            this._showPiaoLayer();
                        } else {
                            this._showPiaoWaitLayer(is_choose_fang);
                        }
                    }
                }
            }


            if (fang_result) {
                this._piaoResult = fang_result;
                for (var i = 0; i < fang_result.length; i++) {
                    var pos = MJModel.getPosBySeatid(i);
                    var player = this.players[pos];
                    if (player) {
                        player.addPiaoIcon(pos, fang_result[i]);
                    }
                }
            }
        }

        this._super(hubei_scene.gamesence, canDelay);

        if (hubei_scene.gamesence.sceneStatus != 0) {
            var baoting = hubei_scene.baotingstates;
            if (baoting) {
                for (var i = 0; i < baoting.length; i++) {
                    var pos = MJModel.getPosBySeatid(i);
                    var isbaoting = baoting[i];
                    if (MJModel.isMyPlayer(i)) {
                        if (isbaoting == 1) {
                            MJModel.mj_lockcard_type = 2;
                        } else if (isbaoting == 2) {
                            MJModel.mj_lockcard_type = 1;
                        }
                    }

                    if (isbaoting == 1 || isbaoting == 2) {
                        MJModel.baotingStates[i] = 1;
                        this.players[pos].setLiangPaiVisible(true);
                    }
                }

            }

            var userhavegang = hubei_scene.userhavegang;
            if (userhavegang) {
                for (var i = 0; i < userhavegang.length; i++) {
                    var pos = MJModel.getPosBySeatid(i);
                    var ishavegane = userhavegang[i];
                    if (MJModel.isMyPlayer(i)) {
                        if (ishavegane == 1) {
                            MJModel.mj_lockcard_type = 2;
                        }
                    }
                }
            }
        }

        if (this.room_Card) {
            this.room_Card.setSomeCardClickState();
        }

        var xiaohumsg = hubei_scene.xiaohumsg;
        if (xiaohumsg) {
            for (var i = 0; i < xiaohumsg.length; i++) {
                var msg = xiaohumsg[i];
                var xiaohustate = msg.xiaohustate;
                var xiaohuliangcards = msg.xiaohuliangcards;
                var xiaohufantypes = msg.xiaohufantypes;
                if (xiaohustate == 1) {
                    MJModel.liangPaiStates[MJModel.getPosBySeatid(i)] = 1;
                    this._showBanPai(i, xiaohuliangcards, xiaohufantypes, false);
                }
            }
        }

        var nHaiDiMsg = hubei_scene.nHaiDiMsg;

        if (nHaiDiMsg) {
            var chairID = nHaiDiMsg.chairID;
            if (MJModel.isMyPlayer(chairID)) {
                this.room_Action.showSelectHaiDiPai();
            }
        }

        this.init_bu_info();

        // p还原排队
        this.setPublicCardScene1(hubei_scene);
    },

    handler_server_out_card_bc: function (data, canDelay) {
        var userOutCard = parsePacket("proto.game.AckUserOutCard", data);
        var seatId = userOutCard.ChairID;
        var card = userOutCard.Card;
        var da_type = userOutCard.da_type;
        var pos = MJModel.getPosBySeatid(seatId);
        this._super(data, canDelay)

        if (card > 0 && card != 255) {
            cc.log("lin=showHandCards=handler_server_out_card_bc");
            this.showHandCards(pos);
        }

        if (MJModel.isMyPlayer(seatId) && MJModel.mj_lockcard_type == 1) {
            MJModel.mj_lockcard_type = 2;
            MJModel.baotingStates[seatId] = 1;
        }

        if (this.room_Card) {
            this.room_Card.setSomeCardClickState();
        }

    },
    showHandCards: function (pos) {
        if (MJModel.isOnVideo) {
            return;
        }
        if (MJModel.liangPaiStates[pos] != 1) {
            return;
        }

        this.removeChildByName("qishouhutip" + pos);

        MJModel.liangPaiStates[pos] = -1;
        if (this.room_Card.hand_card[pos]) {
            for (var i = 0; i < this.room_Card.hand_card[pos].length; i++) {
                var card = this.room_Card.hand_card[pos][i];
                card.showPai(false);
            }
        }
    },
    handler_server_peng_kang_bc: function (data, canDelay) {
        this.room_Tip.showTextTip("");
        this.check_tip_operate_card(0, 0);
        var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);
        this.unschedule(this.autoOutCardTimeOut);
        this.unschedule(this.autoHuCardTimeOut);

        var seatid = ackBcOpResult.ChairID;
        var out_seatid = ackBcOpResult.OutCardChairID;
        var OpType = ackBcOpResult.OpType;
        var OpType2 = ackBcOpResult.OpType2;
        var card = ackBcOpResult.Card;
        var cardList = ackBcOpResult.OpCards;
        var removeHandcards1 = ackBcOpResult.cardDel;
        var specialCard = ackBcOpResult.SpecialCard;
        var LaiziNum = ackBcOpResult.LaiziNum;


        var scores = ackBcOpResult.Score;
        this.handler_gang_scores(scores, OpType, OpType2, canDelay);

        if (MJModel.isMyPlayer(seatid)) {
            if (this.room_Action) this.room_Action.setOperator(-1);
        }

        if (this.room_Action_video) this.room_Action_video.reset();

        var pos = MJModel.getPosBySeatid(seatid);
        var out_pos = MJModel.getPosBySeatid(out_seatid);

        this.players[pos].setTimeOut(false);
        this.players[pos].setOffline(false);

        if ((OpType & PZHActionType.TYPE_BAOTING) == PZHActionType.TYPE_BAOTING) {
            if (this.room_Action_video && MJModel.isOnVideo) {
                this.room_Action_video.reset();
            }
            var player = MJModel.players[seatid];
            if (player && canDelay) {
                this.room_Tip.showSimpleEffect(pos, out_pos, PZHActionType.TYPE_BAOTING, "baoting");
                if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
                    Sound.getInstance().playEffect(__String.createWithFormat(getResPath("ningxiangmj/sound/operator/%1_%2.mp3"), sex == SEX_ID.SEX_MAN ? "male" : "female", "ting"));
                } else {
                    Sound.getInstance().playEffect(__String.createWithFormat(getResPath("RoomMJ/sound/operator/%1_%2.mp3"), player.sex == SEX_ID.SEX_FEMALE ? "w" : "m", "ting"));
                }
            }
            this.players[pos].setLiangPaiVisible(true);
            MJModel.baotingStates[seatid] = 1;
            if (MJModel.isMyPlayer(seatid)) {
                if (this.room_Card.isDuoPai(0)) {
                    MJModel.mj_lockcard_type = 1;
                } else {

                    MJModel.mj_lockcard_type = 2;
                }
                this.myselfOpenOutCard(false);
            }
            return;
        } else if (((OpType & PZHActionType.TYPE_XIAO_HU) == PZHActionType.TYPE_XIAO_HU)) {
            if (this.room_Action_video && MJModel.isOnVideo) {
                this.room_Action_video.reset();
            }
            //this.players[pos].setLiangPaiVisible(false);
            //if (MJModel.isMyPlayer(seatid)) {
            //    MJModel.mj_lockcard_type = 0;
            //}
            //this.room_Card.setSomeCardClickState();
            cc.log("lin=handler_server_peng_kang_bc=2");
            var showCards = ackBcOpResult.OpCards;
            var addFans = ackBcOpResult.cardDel;
            var ChiNoOutCards = ackBcOpResult.ChiNoOutCards;
            MJModel.liangPaiStates[MJModel.getPosBySeatid(seatid)] = 1;
            this._showBanPai(seatid, showCards, addFans, ChiNoOutCards, canDelay)
            return;
        }

        if (MJModel.outtimeplayers.length > 1 && MJModel.outtimeplayers.indexOf(seatid) != -1) {
            MJModel.outtimeplayers.splice(MJModel.outtimeplayers.indexOf(seatid), 1);
        }

        if ((OpType & ActionType.TYPE_PASS) == ActionType.TYPE_PASS) {

            if (MJModel.isMyPlayer(seatid) && seatid == out_seatid && this.room_Card.isDuoPai(0))//如果是我自己摸的牌  自己过 则放开选牌功能
            {
                this.room_Info.showTime(MJModel.outCardTime);
                MJModel.cur_seat = seatid;
                this.myselfOpenOutCard(true);
            }

            return;
        }

        var needRemoveOutCard = false;
        var needOpenOutCard = false;
        var removeHandcards2 = [];
        if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG || (OpType & PZHActionType.TYPE_AN_BU) == PZHActionType.TYPE_AN_BU) {
            var ok = this.room_Card.addPengCard(pos, PengType.Peng_AnKang, card, out_pos, OpType, specialCard, LaiziNum, cardList);
            if (!ok)return;
            //this.room_Card.removeHandCard(pos, card, 4);
            removeHandcards2.push(card);
            removeHandcards2.push(card);
            removeHandcards2.push(card);
            removeHandcards2.push(card);
        }
        else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
            this.room_Card.addPengCard(pos, PengType.Peng_Peng, card, out_pos, OpType, specialCard, LaiziNum, cardList);
            this.room_Card.removeHandCard(pos, card, 2);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG || (OpType & PZHActionType.TYPE_ZHI_BU) == PZHActionType.TYPE_ZHI_BU) {
            var ok = this.room_Card.addPengCard(pos, PengType.Peng_Kang, card, out_pos, OpType, specialCard, LaiziNum, cardList);
            if (!ok)return;
            //this.room_Card.removeHandCard(pos, card, 3);
            removeHandcards2.push(card);
            removeHandcards2.push(card);
            removeHandcards2.push(card);
            needRemoveOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (OpType & PZHActionType.TYPE_WAN_BU) == PZHActionType.TYPE_WAN_BU) {
            var ok = this.room_Card.changPengCard(pos, PengType.Peng_Kang, card, out_pos, OpType, specialCard);
            if (!ok)return;
            //this.room_Card.removeHandCard(pos, card, 1);
            removeHandcards2.push(card);
        }
        else if ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
            this.room_Card.addPengCard(pos, PengType.Chi_L, card, out_pos, OpType, specialCard, LaiziNum, cardList);
            //this.room_Card.removeHandCard(pos, card + 1, 1);
            //this.room_Card.removeHandCard(pos, card + 2, 1);
            removeHandcards2.push(card + 1);
            removeHandcards2.push(card + 2);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
            this.room_Card.addPengCard(pos, PengType.Chi_M, card, out_pos, OpType, specialCard, LaiziNum, cardList);
            //this.room_Card.removeHandCard(pos, card - 1, 1);
            //this.room_Card.removeHandCard(pos, card + 1, 1);
            removeHandcards2.push(card - 1);
            removeHandcards2.push(card + 1);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
            this.room_Card.addPengCard(pos, PengType.Chi_R, card, out_pos, OpType, specialCard, LaiziNum, cardList);
            //this.room_Card.removeHandCard(pos, card - 1, 1);
            //this.room_Card.removeHandCard(pos, card - 2, 1);
            removeHandcards2.push(card - 1);
            removeHandcards2.push(card - 2);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
            this.room_Info.showDirectionTip(-1);
            this.room_Info.stopTime();
            MJModel.canTouchCard = false;
            //抢弯杠
            if ((OpType2 && OpType2 == 5)) {
                this.room_Card.changeWanGang(out_pos, PengType.Peng_Peng, card);
                if (this.room_Card.isDuoPai(out_pos)) this.room_Card.removeHandCard(out_pos, card, 1);
            }
            //抢直杠
            if ((OpType2 && OpType2 == 11)) {
                var ok = this.room_Card.changeZhiGang(out_pos, PengType.Peng_Peng, card);
                if (ok) {
                    this.room_Card.initMoCard(out_pos, (out_pos == 0 || MJModel.isOnVideo ) ? card : 0);
                    this.room_Card.initMoCard(out_pos, (out_pos == 0 || MJModel.isOnVideo ) ? card : 0);
                    this.room_Card.initMoCard(out_pos, (out_pos == 0 || MJModel.isOnVideo ) ? card : 0);
                    this.room_Card.reflashHandCard(out_pos, true, false);
                }
            }

            if ((OpType2 && OpType2 == 5) || (OpType2 && OpType2 == 11)) {
                //避免双抢杠的时候 会出两次牌
                if (this.room_Card.out_card[out_pos].length == 0 || this.room_Card.out_card[out_pos][this.room_Card.out_card[out_pos].length - 1].getValue() != card) {
                    this.room_Card.addOutCard(out_pos, card);
                }
            }
        }

        if (removeHandcards2.length > 0) {
            if (removeHandcards1 && removeHandcards1.length > 0) {
                for (var i = 0; i < removeHandcards1.length; i++) {
                    this.room_Card.removeHandCard(pos, removeHandcards1[i], 1);
                }
            } else {
                for (var i = 0; i < removeHandcards2.length; i++) {
                    this.room_Card.removeHandCard(pos, removeHandcards2[i], 1);
                }
            }
        }

        if (MJModel.isMyPlayer(seatid)) {
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            MJModel.isAutoOutCard = false;
            this.room_Card.setAutoOutCard(false);
        }

        if (needRemoveOutCard) {
            MJModel.cur_seat = seatid;
            var isok = this.room_Card.removeOutCard(out_pos, card, canDelay);
            this.room_Card.setCurCardTip(false);
            if (isok == false) {
                try {
                    ERROR(this, "removeOutCard error card:" + card + "lastoutcard:" + this.room_Card.out_card[out_pos][this.room_Card.out_card[out_pos].length - 1].getValue());
                } catch (e) {
                    ERROR(this, "needRemoveOutCard" + e);
                }
                this.reConnect("", false);
            }
        }

        if (needOpenOutCard) {
            this.room_Info.showDirectionTip(pos);
            if (MJModel.isMyPlayer(seatid)) {
                this.myselfOpenOutCard();
            }
        }

        var player = MJModel.players[seatid];
        if (player && canDelay) {

            var effect = "gang";
            if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                var zimo = this.room_Card.isDuoPai(pos);
                effect = "hu";
                if (zimo) {
                    effect = "zimo";
                }

                if (OpType2 == 5 || OpType2 == 11) {
                    effect = "qiangganghu";
                }
            }
            else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                effect = "peng";
            }
            else if ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI || (OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                effect = "chi";
            }

            this.handler_op_sound(pos, player.sex, OpType, OpType2, effect);
            this.handler_op_effect(pos, out_pos, player.sex, OpType, OpType2, effect);
        }

        this.room_Card.checkCardSafe();

        if (OpType > 0 && OpType < 0x100) {
            this.showHandCards(pos);
        }

        ////杠补播放杠补动画
        //if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG || (OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
        //    this.show_gang_bu(seatid, cardList, canDelay);
        //}
    },

    //场景还原牌堆
    setPublicCardScene1: function (hubei_scene) {
        var tagBuPaiMsg = hubei_scene.tagBuPaiMsg;  //补牌的信息
        var ackGameFree = hubei_scene.gamesence;
        var shaiPaiCounts = tagBuPaiMsg;
        var totalShaiPaiNums = 0;
        if (shaiPaiCounts && shaiPaiCounts.length > 0) {
            for (var i = 0; i < shaiPaiCounts.length; i++) {
                totalShaiPaiNums += shaiPaiCounts[i].cardnums;
            }
        }
        this.room_Card.initPublicCard(true);

        if (shaiPaiCounts && shaiPaiCounts.length > 0) {
            for (var i = 0; i < shaiPaiCounts.length; i++) {
                cc.log("lin=setPublicCardScene1=1");
                var shaiPaiCount = shaiPaiCounts[i];
                var count = shaiPaiCount.gangshai[0] + shaiPaiCount.gangshai[1];
                cc.log("lin=setPublicCardScene1=1=" + count + "  " + shaiPaiCount.cardnums + MJModel.buCardNums);
                this.room_Card.removePublicCardByJumpNums(shaiPaiCount.cardnums, true, count, true);
            }
        }
        cc.log("lin=setPublicCardScene1=1=" + totalShaiPaiNums);
        this.room_Card.removePublicCardByNums(MJModel.cardLibNums - ackGameFree.PoolCardLeftNums - MJModel.buCardNums, false);
        this.room_Card.removePublicCardByNums(MJModel.buCardNums - totalShaiPaiNums, true);
    },
    ///////////////////////////公牌//////////////////////////////
    setPublicCardScene: function (hubei_scene) {

    },
    _showBanPai: function (seatId, showCards, addFans, ChiNoOutCards, canDelay) {

        var player = MJModel.players[seatId];

        var pos = MJModel.getPosBySeatid(seatId);
        if (canDelay)this.room_Tip.showSimpleEffect(pos, pos, ActionType.TYPE_HU);

        var tips = "";
        var dele = 0;
        for (var i = 0; i < addFans.length; i++) {
            tips += NINGXIANG_MJ_TYPE[addFans[i]] + "x" + ChiNoOutCards[i] + " "
            this.ShowHuPaiTypeSound(dele, seatId, addFans[i]);
            dele += 1.5;
        }

        var lable = new cc.LabelTTF(tips, "Arial", 30);
        lable.setColor(cc.color(0xf4, 0xc3, 0x1f, 255));
        lable.setAnchorPoint(cc.p(0.5, 0.5));
        lable.setName("qishouhutip" + pos);
        if (pos == 1) {
            if (MJModel.mj_bg_use == 0) {
                lable.setRotation(-103);
            }
            else {
                lable.setRotation(-90);
            }

        } else if (pos == 3) {

            if (MJModel.mj_bg_use == 0) {
                lable.setRotation(103);
            }
            else {
                lable.setRotation(90);
            }
        }
        lable.setPosition(MJConfig.getQiShouHuTipPos(pos));
        this.addChild(lable, 2);

        if (MJModel.isOnVideo) {
            return;
        }

        if (MJModel.isMyPlayer(seatId)) {
            for (var i = 0; i < this.room_Card.hand_card[0].length; i++) {
                var card = this.room_Card.hand_card[0][i];

                for (var j = 0; j < showCards.length; j++) {
                    if (card.getValue() == showCards[j]) {
                        card.showPai(true);
                        showCards[j] = -1;
                        break;
                    }
                }
            }
        } else {
            for (var i = 0; i < showCards.length; i++) {
                cc.log("length : " + showCards.length + ";cardLength" + this.room_Card.hand_card[pos].length);
                this.room_Card.hand_card[pos][i].showPai(true, showCards[i]);
            }
        }
    },
    handler_out_card_sound: function (sex, card) {
        if (this.isHuaValue(card)) {
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("RoomMJ/sound/operator/%1_buhua.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m"));
        } else {
            if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
                Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
                Sound.getInstance().playEffect(__String.createWithFormat(getResPath("ningxiangmj/sound/chupai/%1_%2.mp3"), sex == SEX_ID.SEX_MAN ? "male" : "female", Utils.toHex2(card)));
            } else {
                this._super(sex, card);
            }
        }
    },

    handler_op_sound: function (pos, sex, OpType, OpType2, effect) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
            if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU && effect == "") {
                var zimo = this.room_Card.isDuoPai(pos);
                effect = "hu";
                if (zimo) {
                    effect = "zimo";
                }
            } else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                effect = "peng";
            }
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("ningxiangmj/sound/operator/%1_%2.mp3"), sex == SEX_ID.SEX_MAN ? "male" : "female", effect));
        } else {
            this._super(pos, sex, OpType, OpType2, effect);
        }
    },

    handler_op_effect: function (pos, out_pos, sex, OpType, OpType2, effect) {
        this.room_Tip.showEffect(pos, OpType, this.room_Card.isDuoPai(pos));
        // this.room_Tip.showSimpleEffect(pos, out_pos, OpType, effect);
    },
    reflashSetting: function (isInit) {
        this._super(isInit);
    },
    isHuaValue: function (card) {
        if (this._curLaizi == card) {
            return true;
        }
        return false;
    },

    _showPiaoLayer: function () {
        if (this.getChildByName("linqiu_PiaoLayer")) {
            this.removeChildByName("linqiu_PiaoLayer");
        }
        var layer = new PiaoLayer();
        layer.setName("linqiu_PiaoLayer");
        layer.initPiao();
        this.addChild(layer, 299);
    },
    _showPiaoWaitLayer: function (result) {
        if (this.getChildByName("linqiu_PiaoLayer")) {
            return;
        }

        if (this.getChildByName("linqiu_PiaoWaitLayer")) {
            this.removeChildByName("linqiu_PiaoWaitLayer");
        }
        var layer = new PiaoWaitLayer();
        layer.setName("linqiu_PiaoWaitLayer");
        layer.initPiao(result);
        this.addChild(layer, 299);
    },

    //自动出牌
    autoOutCardTimeOut: function (dt) {
        this.unschedule(this.autoOutCardTimeOut);
        if (MJModel.isAutoOutCard == false && MJModel.mj_lockcard_type != 2)return;
        if (MJModel.TouPiaoING == true) return;//投票期间 该功能不起作用
        sendOutCard(MJModel.curOperateCard);
    },
    autoOutCard: function () {
        this.schedule(this.autoOutCardTimeOut, 0.5);
    },
    myselfOpenOutCard: function (IsMoCard, showTip) {
        if (IsMoCard == undefined) IsMoCard = false;
        if (showTip == undefined) showTip = true;
        if (MJModel.isOnVideo) {
            return;
        }

        if ((MJModel.isAutoOutCard && IsMoCard) || (MJModel.mj_lockcard_type == 2)) {
            this.autoOutCard();
            this.room_Card.resetAllCardClickState();
            this.room_Card.setSomeCardClickState();
            return;
        }
        this.room_Card.resetAllCardClickState();
        MJModel.canTouchCard = true;
        MJModel.canChoiceMore = false;
        this.room_Card.setTingPaiFlag(true);

        if (this.room_Action) this.room_Action.setTingPaiVis(false);
        if (this.room_Action) this.room_Action.setAutoOutCardVis(false);

        this.room_Card.setSomeCardClickState();

        if (showTip)this.room_Tip.showOutCardTip();
    },
});

var MJResult_XinYu = MJCommonResult.extend({
        _cur_time: 0,
        btns: {},
        ctor: function () {
            this._super();
            var size = this.bgSpr.getContentSize();
            var y = 62;
        }
        ,

        updateContentView: function (ackGameEndJS) {
            this.ackGameEnd = ackGameEndJS.gameend;
            this.ackGameEndJS = ackGameEndJS;
            //输赢标志
            var seatId = MJModel.seatid;
            var score = this.ackGameEnd.Score[seatId];
            var effectName = "lose";
            if (score > 0) {
                effectName = "win";
            }
            this._win_effect(effectName);

            var size = cc.director.getWinSize();
            var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
            LayerBg.setContentSize(cc.size(size.width, size.height));
            LayerBg.setAnchorPoint(cc.p(0, 0));
            LayerBg.setPosition(cc.p(0, 0));
            this.addChild(LayerBg, -2);

            var itemHeight = 120;

            var count = 0;
            for (var m = 0; m < 4; m++) {
                var pos = m - 1 < 0 ? 3 : m - 1;

                var countY = m;

                if (MJModel.mj_roomType == 1) {
                    if (pos == 2) {
                        continue;
                    }
                }

                if (MJModel.mj_roomType == 2) {
                    if (pos == 1 || pos == 3) {
                        continue;
                    }

                    if (pos == 0) {
                        countY = 1;
                    } else if (pos == 2) {
                        countY = 2;
                    }
                }

                var seatid = MJModel.getSeatidByPos(pos);

                var startY = 495 - count * itemHeight;
                var startX = 40;

                //头像
                var headLayer = this.createAvatar(pos);
                headLayer.setPosition(cc.p(startX + 60, startY + 55));
                this.bgSpr.addChild(headLayer, 10);

                //上排牌 杠
                var ganghuLayer = this.createFanTypeLayer(seatid);
                this.bgSpr.addChild(ganghuLayer, 10);
                ganghuLayer.setPosition(cc.p(startX + 230, startY + 65));

                //下排牌
                var handCardLayer = this.createHandCard(seatid);
                handCardLayer.setPosition(cc.p(startX + 0, startY));
                this.bgSpr.addChild(handCardLayer);

                // this.createSpecialHuTip(startX + 785, startY + 40, seatid);
                if (MJModel.isZhuaNiao) {
                    this.createSpecialHuTip(startX + 740, startY + 40, seatid);
                } else {
                    this.createSpecialHuTip(startX + 900, startY + 40 + 15, seatid);
                }

                this.createAllScoreLabel(startX + 865, startY + 70, seatid);

                // 输赢分
                var scoreLayer = this.createScoreLayer(seatid);
                scoreLayer.setPosition(cc.p(startX + 1100, startY + 40));
                this.bgSpr.addChild(scoreLayer);

                //中马列表
                var maLayer = this.createMaLayer(seatid);
                if (maLayer) {
                    maLayer.setPosition(cc.p(startX + 845, startY + 85));
                    this.bgSpr.addChild(maLayer);
                }
                count++;
            }
            this.createBottomMaLayer();

            if (!MJModel.isOnVideo) {
                this._cur_time = 10;
                var size = this.bgSpr.getContentSize();
                this.readyLable = new cc.LabelTTF(this.getReadyTip(), "Arial", 25);
                this.readyLable.setAnchorPoint(cc.p(0.5, 0.5));
                this.readyLable.setColor(this.leftColor);
                this.readyLable.setPosition(cc.p(size.width * 0.5, 60));
                this.bgSpr.addChild(this.readyLable);
                this.schedule(this.updateTime, 1.0);
            }
        }
        ,
        createAvatar: function (pos) {
            var seatid = MJModel.getSeatidByPos(pos);
            var player = MJModel.players[seatid];
            var layer = new cc.Layer();

            var headPic = Utils.createCircleAvatar(player.avatar, "Avatars/user4_unlogin.png", "Avatars/user4_unlogin.png", cc.size(96, 96));
            layer.addChild(headPic);

            var framepath = getResPath("RoomMJ/result2/head_bg.png");
            var scale = 1;

            var headFrame = new cc.Sprite(framepath);
            headFrame.setAnchorPoint(cc.p(0.5, 0.5));
            headFrame.setScale(scale);
            headFrame.setPosition(cc.p(0, 0));
            layer.addChild(headFrame, -1);

            var headSize = cc.size(96, 96);

            //是否是庄家
            if (MJModel.banker_seatid == seatid) {
                var bankerPic = new cc.Sprite(getResPath("RoomMJ/banker.png"));
                bankerPic.setAnchorPoint(cc.p(0.5, 0));
                bankerPic.setPosition(cc.p(-headSize.width / 2 + 5, 0));
                layer.addChild(bankerPic);
            }

            cc.log("lin=baotingStates="+JSON.stringify(MJModel.baotingStates));
            if(MJModel.baotingStates[seatid] == 1){
                var tingpai_flag = new cc.Sprite(getResPath("RoomMJ/tingpai_flag.png"));
                tingpai_flag.setAnchorPoint(cc.p(0.5, 0));
                tingpai_flag.setPosition(cc.p(headSize.width / 2 - 5, 0));
                layer.addChild(tingpai_flag);
            }

            //位置
            var posPic = new cc.Sprite(__String.createWithFormat(getResPath("RoomMJ/result2/result_detail_pos_%1.png"), pos));
            posPic.setAnchorPoint(cc.p(0, 0));
            posPic.setPosition(cc.p(-headSize.width / 2 - 10, -headSize.height / 2 - 10));
            layer.addChild(posPic);

            //玩家名字
            var nameLabel = new cc.LabelTTF(Utils.parseName(6, player.name), "Arial", 24);
            nameLabel.setColor(this.leftColor);
            nameLabel.setAnchorPoint(cc.p(0, 0));
            nameLabel.setPosition(cc.p(65, -30));
            layer.addChild(nameLabel);

            return layer;
        }
        ,
        getReadyTip: function () {
            return "准备到计时：" + this._cur_time;
        }
        ,
        updateTime: function (dt) {
            if (this._cur_time > 0) {
                this._cur_time = this._cur_time - 1;
                this.readyLable.setString(this.getReadyTip());
                if (this._cur_time == 0) {
                    this.unschedule(this.updateTime);
                    this.continueClick();
                }
            }
        }
        ,
        createBottomMaLayer: function () {
            var tagJiangma = this.ackGameEndJS.macards;
            var ma_cards = [];
            if (tagJiangma)ma_cards = tagJiangma;
            var maLength = 0;
            var marginWidth = 0;
            if (tagJiangma && ma_cards.length > 0) {
                maLength = ma_cards.length;
                var label = new cc.LabelTTF(this.getMaTips(), "Arial", 25);
                label.setAnchorPoint(cc.p(0.0, 0.5));
                label.setColor(this.leftColor);
                label.setPosition(cc.p(85, 50));
                this.bgSpr.addChild(label);

                for (var i = 0; i < ma_cards.length; i++) {
                    var card = new MJCard();
                    card.setValue(ma_cards[i], 0, CardType.Card_End, 0);
                    card.setAnchorPoint(cc.p(0.0, 0.5));
                    card.setScale(0.5);
                    card.setPosition(cc.p(150 + (card.getBoundingBox().width) * i, 50));
                    this.bgSpr.addChild(card);

                    if (marginWidth == 0) {
                        marginWidth = card.getBoundingBox().width * maLength;
                    }
                }

            }

            this.configLayout = new ccui.Layout();
            this.configLayout.setPosition(150 + marginWidth, 50);
            this.bgSpr.addChild(this.configLayout);
        }
        ,
        getMaTips: function () {
            return "鸟牌:";
        }
        ,
        createMaLayer: function (seatid) {
            var layer = null;
            var tagJiangma = [];
            if (this.ackGameEndJS.cardvecs) {
                tagJiangma = this.ackGameEndJS.cardvecs[seatid];
            }
            if (tagJiangma) {
                var niaoCards = tagJiangma.cards;
                cc.log("lin=createMaLayer=" + JSON.stringify(niaoCards));
                if (niaoCards.length > 0) {
                    layer = new cc.Layer();
                    var length = niaoCards.length;
                    for (var i = 0; i < niaoCards.length; i++) {
                        var card = new MJCard();
                        card.setValue(niaoCards[i], 0, CardType.Card_End, 0);
                        card.setAnchorPoint(cc.p(0.0, 1));
                        card.setScale(0.45);
                        var startX = 5;
                        var startY = -10;
                        var count = 6;
                        if (length > count) {
                            startY = length <= 14 ? 5 : 50;
                        }
                        card.setPosition(cc.p(startX + parseInt((i % count)) * card.getBoundingBox().width, startY - parseInt(i / count) * 35));
                        layer.addChild(card);
                    }
                }
            }
            return layer;
        }
        ,
        createFanTypeLayer: function (seatid) {
            //牌型
            //---
            var huType = ["", "", "", ""];
            for (var i = 0; i < this.ackGameEnd.faninfo.length; i++) {
                var specialType = this.ackGameEnd.faninfo[i].SpecialType;

                switch (specialType) {
                    case HuType.HU_ZIMO:
                    case HuType.HU_PAOHU:
                    case HuType.HU_QIANG_GANG:
                    case HuType.HU_GANG_SHANG_HUA:
                    case HuType.HU_DIANPAO:
                        for (var j = 0; j < this.ackGameEnd.faninfo[i].addfan.length; j++) {
                            var add_fan = this.ackGameEnd.faninfo[i].addfan[j];
                            var add_type = add_fan.AddType;
                            var add_num = add_fan.AddNum;
                            huType[i] += this.getFanStr(add_type, add_num);
                        }
                        break;
                }
            }

            //if (this.ackGameEnd.EndGangInfo) {
            //    for (var i = 0; i < this.ackGameEnd.EndGangInfo.length; i++) {
            //        var gangscore = this.ackGameEnd.EndGangInfo[i].TotalGangScore;
            //        if (gangscore) {
            //            var str = "";
            //            if (gangscore > 0)str = "+" + gangscore;
            //            if (gangscore < 0)str = gangscore;
            //            huType[i] = huType[i] + "杠分" + str + " ";
            //        }
            //    }
            //}

            var layer = new cc.Layer();
            var startx = 0;
            var y = 0;
            var maPic = new cc.LabelTTF(huType[seatid], "Arial", 24);
            maPic.setColor(this.leftColor);
            maPic.setAnchorPoint(cc.p(0.0, 0));
            maPic.setPosition(cc.p(startx, y + 7));
            layer.addChild(maPic);

            startx = maPic.getContentSize().width + 10;
            return layer;
        }
        ,
        getFanStr: function (fanType, num) {
            var str = NINGXIANG_MJ_END_TYPE[fanType];
            if (!str) {
                return "";
            }
            return "" + str + " ";
            return "" + str + "x" + num + " ";
        }
        ,
        createSpecialHuTip: function (startX, startY, seatid) {
            if (this.ackGameEnd.faninfo.length > seatid) {
                //胡牌类型
                var fanInfo = this.ackGameEnd.faninfo[seatid];
                var path = "";
                //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5天和 6地和 7抢杠胡 8杠上开花 9花上添花
                switch (fanInfo.SpecialType) {
                    case 1:
                        path = "RoomMJ/result2/zi_mo_icon.png";
                        break;
                    case 2:
                        path = "RoomMJ/result2/pao_hu_icon.png";
                        break;
                    case 3:
                        path = "RoomMJ/result2/dian_pao_icon.png";
                        break;
                    case 5:
                        path = "RoomMJ/result2/qiang_gang_icon.png";
                        break;
                    case 7:
                        path = "RoomMJ/result2/dian_pao_icon.png";
                        break;
                    default:
                        break;
                }

                if (path != "") {
                    var typeSprite = new cc.Sprite(getResPath(path));
                    typeSprite.setAnchorPoint(cc.p(0, 0.5));
                    typeSprite.setPosition(cc.p(startX, startY));
                    this.bgSpr.addChild(typeSprite);
                    typeSprite.setScale(1);
                    if(fanInfo.SpecialType == 5 && MJModel.isZhuaNiao){
                        typeSprite.setScale(0.7);
                    }
                }
            }
        }
        ,
        createAllScoreLabel: function (startX, startY, seatid) {
            return;
            var ackGameEnd = this.ackGameEndJS;
            var endinfo = ackGameEnd.endinfo[seatid]


            var tagHu = this.ackGameEnd.faninfo[seatid].hucard;

            var gang_add = endinfo.gang_add;
            var lianbanker_add = endinfo.lianbanker_add;
            var hua_add = endinfo.hua_add;
            var sihua_add = endinfo.sihua_add;

            var hutypeStr = "";
            if (MJModel.banker_seatid == seatid) {
                hutypeStr += "连庄:" + ((lianbanker_add != null) ? lianbanker_add : 0);
            }
            if (tagHu) {
                if (hutypeStr != "") {
                    hutypeStr += " ";
                }
                hutypeStr += "杠:" + ((gang_add != null) ? gang_add : 0);
                hutypeStr += " 花:" + ((hua_add != null) ? hua_add : 0);
                //hutypeStr += " 四花:" + ((sihua_add != null) ? sihua_add : 0);
            }

            var maPic = new cc.LabelTTF(hutypeStr, "Arial", 20);
            maPic.setColor(this.leftColor);
            maPic.setAnchorPoint(cc.p(0, 0));
            maPic.setPosition(cc.p(startX, startY));
            this.bgSpr.addChild(maPic);
        }
        ,
//输赢分
        createScoreLayer: function (seatid) {
            var layer = new cc.Layer();
            var score = 0;
            if (this.ackGameEnd.Score && this.ackGameEnd.Score.length > seatid) score = this.ackGameEnd.Score[seatid];
            var width = 0;
            var path = getResPath("RoomMJ/result2/result_small_label_lose.png");
            if (score > 0) {
                path = getResPath("RoomMJ/result2/result_small_label_win.png");
            }
            var scoredes = ":";
            if (score == 0) scoredes = "";

            var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), path, 29, 37, '0');

            scoreLabel.setAnchorPoint(cc.p(0.0, 0.5));

            scoreLabel.setPosition(cc.p(width, 15));
            scoreLabel.setName("scoreLabel");
            layer.addChild(scoreLabel);

            if (Math.abs(score) >= 10000) {
                scoreLabel.setScale(0.8);
            }
            return layer;
        }
        ,
    })
    ;

var NingXiangWarn = cc.Layer.extend({
    // tag: "NingXiangWarn",
    _callback: null,
    _Cancelcallback: null,
    ctor: function () {
        this._super();
        var size = cc.director.getWinSize();
        var layout = new ccui.Layout();
        layout.setContentSize(size);
        layout.setAnchorPoint(cc.p(0, 0));
        layout.setPosition(cc.p(0, 0));
        layout.setTouchEnabled(true);
        layout.setSwallowTouches(true);
        layout.addClickEventListener(function (btn) {
        });
        this.addChild(layout);

        var box = new cc.LayerColor(cc.color(0, 0, 0, 100));
        box.setContentSize(size);
        box.setAnchorPoint(cc.p(0, 0));
        box.setPosition(cc.p(0, 0));
        this.addChild(box);
    },
    setCallback: function (callback) {
        this._callback = callback;
    },
    setCancelCallback: function (callback) {
        this._Cancelcallback = callback;
    },
    setChoiceInfos: function (tipstr) {
        if (tipstr == undefined) tipstr = "是否确定要封东";
        var size = cc.director.getWinSize();
        var bg = new ccui.ImageView(getResPath("RoomMJ/mj_public/common/dialog/public/bg2.png"));
        bg.setPosition(cc.p(size.width / 2, size.height / 2));
        bg.setScale9Enabled(true);
        bg.setContentSize(cc.size(675, 338));
        this.addChild(bg);

        var csize = bg.getContentSize();

        var str = tipstr;
        str += "?";
        var label = new cc.LabelTTF(str, "Thonburi", 34);
        label.setAnchorPoint(cc.p(0.5, 0.5));
        label.setPosition(cc.p(csize.width / 2, csize.height / 2 + 50));
        label.setColor(cc.color(115, 46, 7));
        bg.addChild(label);

        var self = this;
        {
            var btn = new ccui.Button();
            btn.loadTextures(getResPath("RoomMJ/mj_public/common/dialog/public/btn_yellow.png"), getResPath("RoomMJ/mj_public/common/dialog/public/btn_yellow.png"), "");
            btn.addClickEventListener(function (sender, evt) {

                self.removeFromParent();
                if (self._callback)self._callback();
            });
            btn.setPosition(cc.p(csize.width / 2 + 140, 70));
            bg.addChild(btn);
            var btntext = new cc.Sprite(getResPath("RoomMJ/mj_public/common/dialog/public/sure.png"));
            btntext.setPosition(cc.p(btn.getContentSize().width / 2, btn.getContentSize().height / 2 + 8));
            btn.addChild(btntext);
        }

        {


            var btn = new ccui.Button();
            btn.loadTextures(getResPath("RoomMJ/mj_public/common/dialog/public/btn_green.png"), getResPath("RoomMJ/mj_public/common/dialog/public/btn_green.png"), "");
            btn.addClickEventListener(function (sender, evt) {

                self.removeFromParent();
                if (self._Cancelcallback)self._Cancelcallback();
            });
            btn.setPosition(cc.p(csize.width / 2 - 140, 70));
            bg.addChild(btn);
            var btntext = new cc.Sprite(getResPath("RoomMJ/mj_public/common/dialog/public/cancel.png"));
            btntext.setPosition(cc.p(btn.getContentSize().width / 2, btn.getContentSize().height / 2 + 8));
            btn.addChild(btntext);
        }
    }
});

var JiangmaTips = cc.Layer.extend({
    ctor: function () {
        this._super();
    },


    showZhongNiaoBigTips: function (cards, ZhongChairID, type) {

        var length = cards.length;
        for (var i = 0; i < length; i++) {
            var zhongSeatId = ZhongChairID[i];
            var zhongLength = 0;
            var zhongIndex = 0;
            for (var m = 0; m < ZhongChairID.length; m++) {
                if (zhongSeatId == ZhongChairID[m]) {
                    zhongLength++;
                    if (m < i) {
                        zhongIndex++;
                    }
                }
            }
            var zhongPos = MJModel.getPosBySeatid(zhongSeatId);
            var cardValue = cards[i];

            var card = new MJCard();
            card.setValue(cardValue, 0, CardType.Card_Hand, i);
            card.setMyPosition(MJConfig.getNiaoBigCardPos(i, length));
            this.addChild(card);
            var endPos = MJConfig.getNiaoBigCardPos(i, length);
            if (zhongSeatId >= 0 && zhongSeatId <= 3) {
                card.setLocalZOrder(100);
                card.runAction(cc.sequence(cc.delayTime(1), cc.moveTo(0.5, endPos)));
            } else {
                endPos = MJConfig.getNiaoBigCardPos(zhongIndex, zhongLength);
                (function (obj) {
                    var callback = cc.callFunc(function () {
                        obj.setBlackVis(true);
                    });
                    obj.runAction(cc.sequence(cc.delayTime(1), callback, cc.moveTo(0.5, endPos)));
                })(card);


            }
        }
        this.playJiangmaSound();
    },

    playJiangmaSound: function () {
        Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/niaojiao.mp3"));
    },
});

var GangPaiTips = cc.Layer.extend({
    ctor: function () {
        this._super();
        var size = cc.director.getWinSize();
        var tipsBg = cc.Sprite(getResPath("ningxiangmj/ningxiang/tips_gradient_bg.png"));
        tipsBg.setPosition(cc.p(size.width / 2, size.height / 2 + 20));
        this.addChild(tipsBg);

    },

    showGangPai: function (cards) {
        var length = cards.length;

        for (var i = 0; i < length; i++) {
            var cardValue = cards[i];
            var card = new MJCard();
            card.setValue(cardValue, 0, CardType.Card_Hand, i);
            card.setMyPosition(MJConfig.getNiaoBigCardPos(i, length));
            this.addChild(card);
        }
    },
});

var sendLingQiuPao = function (v) {
    var packet = createPacket("proto.game.ningxiangmajiang.ReqChoosePiao");
    packet.num = v;
    sendPacket(packet, selfCMD.CLENT_ReqChoosePiao);
};
var sendHaiDiLao = function (v) {
    var packet = createPacket("proto.game.ningxiangmajiang.ResUserNeedHaiDiCard");
    packet.chairID = MJModel.seatid;
    packet.bNeedCard = v;
    sendPacket(packet, selfCMD.CLIENT_CHOOSE_HAIDIPAI);
};