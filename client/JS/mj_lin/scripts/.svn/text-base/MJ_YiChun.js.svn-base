loadProtoFile("proto/yichungameproto.proto");
var sendPaoNums = function (v1 , v2) {
    var packet = createPacket("proto.game.yichunmj.ReqChoosePiao");
    packet.userhuo = parseInt(v1);
    packet.userpiao = parseInt(v2);
    sendPacket(packet , CMD.CLIENT_MJ_CHOOSE_PIAO);
};

var selfCMD = {
    SERVER_CP_BANKER: 5025, //跟庄广播
};

var HONGZHONG = 0x41;

var HuType = {
    HU_INVALID: 0,
    HU_ZIMO: 1,
    HU_PAOHU: 2,
    HU_HeiMo: 2,
    Hu_RuanMo: 1,
    HU_DIANPAO: 3,
    HU_BEIZIMO: 4,
    HU_QIANG_GANG: 5,
    HU_BEI_QIANG_GANG: 6,
    HU_YI_PAO_DUO_XIANG: 7,
    HU_GANG_SHANG_HUA: 8,
    HU_GANG_HOU_PAO: 9,
};
var AddFanType = {
    MJ_FAN_TYPE_ZIYISE:8,						//字一色
    MJ_FAN_TYPE_QINGPENG:12,					//清碰， 清一色 + 碰碰胡
    MJ_FAN_TYPE_QINGYISE:14,					//清一色
    MJ_FAN_TYPE_PENGPENGHU:16,				    //碰碰胡
    MJ_FAN_TYPE_PINGHU:17,					    //平胡
    MJ_FAN_TYPE_TIANHU:19,					    //天胡
    MJ_FAN_TYPE_DIHU:20,						//地胡
    MJ_FAN_TYPE_QIANGGANGHU:22,				    //抢杠胡
    MJ_FAN_TYPE_HAIDILAOYUE:23,				    //海底捞月
    MJ_FAN_TYPE_GANGSHANGHUA:24,				//杠上开花
    MJ_FAN_TYPE_QINGQIDUI:25,					//清七对
    MJ_FAN_TYPE_QINGLONGQIDUI:26,				//清龙七对
    MJ_FAN_TYPE_LONGQIDUI:27,					//龙七对
    MJ_FAN_TYPE_QUANQIUREN:28,				    //全求人 单吊
    MJ_FAN_TYPE_GANGHOUPAO:29,				    //杠上炮
    MJ_FAN_TYPE_MENQIANQING:30,				    //门前清
    MJ_FAN_TYPE_QIDUI:36,						//七对
    MJ_FAN_TYPE_YITIAOLONG:39,				    //一条龙
    MJ_FAN_TYPE_QINGQUANQIUREN:43,			    //清全求人
    MJ_FAN_TYPE_QINGPENGDIAO:51,				//清碰钓 清一色 + 碰碰胡 + 单调
    MJ_FAN_TYPE_JINGOUDIAO:52,			    	//金钩钓
    MJ_FAN_TYPE_JINGOUPAO:53,					//金钩炮
    MJ_FAN_TYPE_SHUANGLONGQIDUI:61,		    	//双龙七对
    MJ_FAN_TYPE_QINGSHUANGLONGQIDUI:62,		    //清双龙七对
    MJ_FAN_TYPE_SANLONGQIDUI:63,				//三龙七对
    MJ_FAN_TYPE_QINGSANLONGQIDUI:64,			//清三龙七对
    MJ_FAN_TYPE_PENGPENGQUANQIUREN:67,		    //碰碰全球人
    MJ_FAN_TYPE_QINGPENGQUANQIUREN:68,		    //清一色碰碰胡全球人
    MJ_FAN_TYPE_ZIPENGHU:69,					//字一色碰碰胡
    MJ_FAN_TYPE_ZIPENGQUANQIUREN:70,			//字一色碰碰全球人
    MJ_FAN_TYPE_ZIQIDUI:71,				    	//字一色七对
    MJ_FAN_TYPE_ZILONGQIDUI:72,			    	//字一色龙七对
    MJ_FAN_TYPE_ZISHUANGLONGQIDUI:73,			//字一色双龙七对
    MJ_FAN_TYPE_ZISANLONGQIDUI:74,		    	//字一色三龙七对
    MJ_FAN_TYPE_SHISANLAN:75,					//十三烂
    MJ_FAN_TYPE_QIXINGSHISANLAN:76,			    //七星十三烂
    MJ_FAN_TYPE_ZIQUANQIUREN:77,                //字一色单吊
    MJ_FAN_TYPE_HUBIAN:101, 					//胡边
    MJ_FAN_TYPE_HUKA:103, 						//胡卡
};

var AddFanTypeArray = [
    AddFanType.MJ_FAN_TYPE_ZIYISE,              //字一色
    AddFanType.MJ_FAN_TYPE_QINGPENG,			//清碰， 清一色 + 碰碰胡
    AddFanType.MJ_FAN_TYPE_QINGYISE,			//清一色
    AddFanType.MJ_FAN_TYPE_PENGPENGHU,			//碰碰胡
    AddFanType.MJ_FAN_TYPE_PINGHU,				//平胡
    AddFanType.MJ_FAN_TYPE_TIANHU,              //天胡
    AddFanType.MJ_FAN_TYPE_DIHU,                //地胡
    AddFanType.MJ_FAN_TYPE_QIANGGANGHU,			//抢杠胡
    AddFanType.MJ_FAN_TYPE_HAIDILAOYUE,         //海底捞月
    AddFanType.MJ_FAN_TYPE_GANGSHANGHUA,		//杠上开花
    AddFanType.MJ_FAN_TYPE_QINGQIDUI,           //清七对
    AddFanType.MJ_FAN_TYPE_QINGLONGQIDUI,		//清龙七对
    AddFanType.MJ_FAN_TYPE_LONGQIDUI,			//龙七对
    AddFanType.MJ_FAN_TYPE_QUANQIUREN,          //全求人 单吊
    AddFanType.MJ_FAN_TYPE_GANGHOUPAO,	        //杠上炮
    AddFanType.MJ_FAN_TYPE_MENQIANQING,		    //门前清
    AddFanType.MJ_FAN_TYPE_QIDUI,		        //七对
    AddFanType.MJ_FAN_TYPE_YITIAOLONG,			//一条龙
    AddFanType.MJ_FAN_TYPE_QINGQUANQIUREN,      //清全求人
    AddFanType.MJ_FAN_TYPE_QINGPENGDIAO,		//清碰钓 清一色 + 碰碰胡 + 单调
    AddFanType.MJ_FAN_TYPE_JINGOUDIAO,	        //金钩钓
    AddFanType.MJ_FAN_TYPE_JINGOUPAO,	        //金钩炮
    AddFanType.MJ_FAN_TYPE_SHUANGLONGQIDUI,     //双龙七对
    AddFanType.MJ_FAN_TYPE_QINGSHUANGLONGQIDUI, //清双龙七对
    AddFanType.MJ_FAN_TYPE_SANLONGQIDUI,        //三龙七对
    AddFanType.MJ_FAN_TYPE_QINGSANLONGQIDUI,    //清三龙七对
    AddFanType.MJ_FAN_TYPE_PENGPENGQUANQIUREN,  //碰碰全球人
    AddFanType.MJ_FAN_TYPE_QINGPENGQUANQIUREN,  //清一色碰碰胡全球人
    AddFanType.MJ_FAN_TYPE_ZIPENGHU,            //字一色碰碰胡
    AddFanType.MJ_FAN_TYPE_ZIPENGQUANQIUREN,    //字一色碰碰全球人
    AddFanType.MJ_FAN_TYPE_ZIQIDUI,             //字一色七对
    AddFanType.MJ_FAN_TYPE_ZILONGQIDUI,         //字一色龙七对
    AddFanType.MJ_FAN_TYPE_ZISHUANGLONGQIDUI,   //字一色双龙七对
    AddFanType.MJ_FAN_TYPE_ZISANLONGQIDUI,      //字一色三龙七对
    AddFanType.MJ_FAN_TYPE_SHISANLAN,           //十三烂
    AddFanType.MJ_FAN_TYPE_QIXINGSHISANLAN,     //七星十三烂
    AddFanType.MJ_FAN_TYPE_ZIQUANQIUREN,        //字一色单吊
    AddFanType.MJ_FAN_TYPE_HUBIAN,              //胡边
    AddFanType.MJ_FAN_TYPE_HUKA,                //胡卡
];

var WzHuTypeArray = [
    "字一色",
    "清一色大对",
    "清一色",
    "大对",
    "平胡",
    "天胡",
    "地胡",
    "抢杠胡",
    "海底捞月",
    "杠上开花",
    "清一色七对",
    "清一色豪华七对",
    "豪华七对",
    "平胡全求人",
    "杠上炮",
    "门清",
    "七对",
    "一条龙",
    "清一色全求人",
    "清碰钓",
    "金钩钓",
    "金钩炮",
    "双豪华七对",
    "清一色双豪华七对",
    "三豪华七对",
    "清一色三豪华七对",
    "大对全球人",
    "清一色大对全求人",
    "字一色大对",
    "字一色大对全求人",
    "字一色七对",
    "字一色豪华七对",
    "字一色双豪华七对",
    "字一色三豪华七对",
    "十三烂",
    "七星十三烂",
    "字一色单吊",
    "胡边",
    "胡卡",
];

var TtHuTypeArray = [
    "字一色",
    "清一色碰碰胡",
    "清一色",
    "碰碰胡",
    "平胡",
    "天胡",
    "地胡",
    "抢杠胡",
    "海底捞月",
    "杠上开花",
    "清一色七对",
    "清一色豪华七对",
    "豪华七对",
    "平胡全求人",
    "杠上炮",
    "门清",
    "七对",
    "一条龙",
    "清一色全求人",
    "清碰钓",
    "金钩钓",
    "金钩炮",
    "双豪华七对",
    "清一色双豪华七对",
    "三豪华七对",
    "清一色三豪华七对",
    "碰碰胡全球人",
    "清一色碰碰胡全求人",
    "字一色碰碰胡",
    "字一色碰碰胡全求人",
    "字一色七对",
    "字一色豪华七对",
    "字一色双豪华七对",
    "字一色三豪华七对",
    "十三烂",
    "七星十三烂",
    "字一色单吊",
    "胡边",
    "胡卡",
];

var YfHuTypeArray = [
    "字一色",
    "清一色大七",
    "清一色",
    "大七",
    "平胡",
    "天胡",
    "地胡",
    "抢杠胡",
    "海底捞月",
    "杠上开花",
    "清一色小七对",
    "清一色豪华小七对",
    "豪华小七对",
    "单吊",
    "杠上炮",
    "门清",
    "小七对",
    "一条龙",
    "清一色单吊",
    "清碰钓",
    "金钩钓",
    "金钩炮",
    "双豪华小七对",
    "清一色双豪华小七对",
    "三豪华小七对",
    "清一色三豪华小七对",
    "大七单吊",
    "清一色大七单吊",
    "字一色大七",
    "字一色大七单吊",
    "字一色小七对",
    "字一色豪华小七对",
    "字一色双豪华小七对",
    "字一色三豪华小七对",
    "十三烂",
    "七星十三烂",
    "字一色单吊",
    "胡边",
    "胡卡",
];

var YcHuTypeArray = [
    "字一色",
    "清一色大七对",
    "清一色",
    "大七对",
    "平胡",
    "天胡",
    "地胡",
    "抢杠胡",
    "海底捞月",
    "杠上开花",
    "清一色小七对",
    "清一色豪华小七对",
    "豪华小七对",
    "全求人",
    "杠上炮",
    "门清",
    "小七对",
    "一条龙",
    "清一色单吊",
    "清碰钓",
    "金钩钓",
    "金钩炮",
    "双豪华小七对",
    "清一色双豪华小七对",
    "三豪华小七对",
    "清一色三豪华小七对",
    "大七对单吊",
    "清一色大七对单吊",
    "字一色",
    "字一色大七对单吊",
    "字一色小七对",
    "字一色豪华小七对",
    "字一色双豪华小七对",
    "字一色三豪华小七对",
    "十三烂",
    "七星十三烂",
    "字一色单吊",
    "胡边",
    "胡卡",
];

var PackgName = {
    WZMJ: 0,    //万载麻将
    TTMJ: 1,    //跳跳麻将
    YFMJ: 2,    //宜丰麻将
    YCMJ: 3,    //宜春麻将
};

var MJTable_YiChun = MJTable.extend({
    tag: "MJTable_YiChun",
    _curLaizi: -1,
    isRecordShow: false,
    _pkg_id: 0,
    _curChiPai: 255,
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];

            if(this._pkg_id == 2928 || this._pkg_id == 2806) this._pkg_id = PackgName.WZMJ;
            if(this._pkg_id == 2931 || this._pkg_id == 2809) this._pkg_id = PackgName.TTMJ;
            if(this._pkg_id == 2934 || this._pkg_id == 2812) this._pkg_id = PackgName.YFMJ;
            if(this._pkg_id == 2937 || this._pkg_id == 2816) this._pkg_id = PackgName.YCMJ;

            if(this._pkg_id == 2929 || this._pkg_id == 2807){
                this._pkg_id = PackgName.WZMJ;
                MJModel.mj_roomType = 1;
            }
            if(this._pkg_id == 2932 || this._pkg_id == 2810){
                this._pkg_id = PackgName.TTMJ;
                MJModel.mj_roomType = 1;
            }
            if(this._pkg_id == 2935 || this._pkg_id == 2813){
                this._pkg_id = PackgName.YFMJ;
                MJModel.mj_roomType = 1;
            }
            if(this._pkg_id == 2938 || this._pkg_id == 2815){
                this._pkg_id = PackgName.YCMJ;
                MJModel.mj_roomType = 1;
            }

            if(this._pkg_id == 2930 || this._pkg_id == 2808){
                this._pkg_id = PackgName.WZMJ;
                MJModel.mj_roomType = 2;
            }
            if(this._pkg_id == 2933 || this._pkg_id == 2811){
                this._pkg_id = PackgName.TTMJ;
                MJModel.mj_roomType = 2;
            }
            if(this._pkg_id == 2936 || this._pkg_id == 2814){
                this._pkg_id = PackgName.YFMJ;
                MJModel.mj_roomType = 2;
            }
            if(this._pkg_id == 2939 || this._pkg_id == 2817){
                this._pkg_id = PackgName.YCMJ;
                MJModel.mj_roomType = 2;
            }

        } catch (e) {
            Log(this, e);
        }
        MJModel.mj_suport_fangyan = 0;
        MJModel.otherOutCardEffect = false;
        MJModel.outCardEffect_style = 1;
        //MJModel.mj_style = 1;
        MJModel.mj_suport_change_bg = 0;
        MJModel.toupiaoTipsType = 1;
        MJModel.needTipWhenPass = 1;
        MJModel.isOutCard = true;
        MJModel.mj_card_lib_type = 1;
        MJModel.Is_yipaoduoxiang = true;
        MJModel.mj_public_style = 1;
        MJModel.mj_chat_style = 5;
        MJModel.mj_hu_type = 1;
        MJModel.mj_gps_type = 1;//lq
        //MJModel.mj_layout = 0;
        MJModel.chi_layout = 3;
        MJModel.mj_font = "jianjie";
        MJModel.mj_fontSize = "dahao";
        MJModel.mj_style = "huaijiu";
        MJModel.mj_table_view ="2d";
        MJModel.shareType = 1;
        MJModel.mj_touch_tip = 1;

        var chupai = getItem("mj_chupai");
        if(!chupai) {
            MJModel.chupaiType = "danji";
            setItem("mj_chupai", MJModel.chupaiType);
        } else {
            MJModel.chupaiType = chupai;
        }

        MJModel.mj_double_click_style = MJModel.chupaiType == "danji" ? 1 :0;

        MJModel.mj_huo_num = 0;
        MJModel.mj_piao_num = 0;
        setItem("huo_num", MJModel.mj_huo_num);
        setItem("piao_num", MJModel.mj_piao_num);
        // MJModel.fangyan = "putonghua";
        var size = cc.director.getWinSize();
        this._init_extend();
        this._super();
        var self = this;
        this._setFastChat();
        //this.schedule(this.test, 1.0);
        {
            self.room_Action.autoOutCard = new ccui.Button();
            self.room_Action.autoOutCard.loadTextures(getResPath("RoomMJ/action/auto_hu_sound_bg1.png"), getResPath("RoomMJ/action/auto_hu_sound_bg2.png"), "");
            self.room_Action.autoOutCard.setPosition(cc.p(size.width - 5 - self.room_Action.autoOutCard.getContentSize().width / 2, 100 + self.room_Action.autoOutCard.getContentSize().height / 2));
            self.room_Action.autoOutCard.setName("auto_out_card");
            self.room_Action.autoOutCard.setVisible(false);
            self.room_Action.autoOutCard.addClickEventListener(function (sender, evt) {
                self.room_Action.btnCallback(sender);
            });
            self.room_Action.addChild(self.room_Action.autoOutCard);

            var huOkBg = new cc.Sprite(getResPath("RoomMJ/action/auto_hu_ok_bg.png"));
            huOkBg.setPosition(cc.p(8 + huOkBg.getContentSize().width / 2, self.room_Action.autoOutCard.getContentSize().height / 2));
            self.room_Action.autoOutCard.addChild(huOkBg);

            var ok = new cc.Sprite(getResPath("RoomMJ/action/auto_hu_ok.png"));
            ok.setPosition(cc.p(30, self.room_Action.autoOutCard.getContentSize().height / 2 + 5));
            ok.setName("ok");
            ok.setVisible(false);
            self.room_Action.autoOutCard.addChild(ok);
        }
    },
    test: function (d) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;
        if (tempCount == 5 && true) {
            //var packet = {"gameend":{"UserCard":[{"ChangeableCardsLen":10,"ChangeableCards":[19,20,21,23,23,33,34,35,37,38],"FixedCardsLen":1,"stFixedCards":[{"CardData":36,"state":1,"chairID":2}]},{"ChangeableCardsLen":13,"ChangeableCards":[1,2,4,5,17,18,19,33,33,34,34,39,39],"FixedCardsLen":0,"stFixedCards":[]},{"ChangeableCardsLen":10,"ChangeableCards":[2,3,4,5,6,22,22,38,39,40],"FixedCardsLen":1,"stFixedCards":[{"CardData":25,"state":1,"chairID":3}]},{"ChangeableCardsLen":13,"ChangeableCards":[1,1,1,2,17,18,19,33,35,35,37,40,41],"FixedCardsLen":0,"stFixedCards":[]}],"Score":[0,-1,1,0],"EndState":0,"EndGangInfo":[{"Gang":[],"TotalGangScore":0},{"Gang":[],"TotalGangScore":0},{"Gang":[],"TotalGangScore":0},{"Gang":[],"TotalGangScore":0}],"faninfo":[{"chairid":0,"SpecialType":0,"FanNum":0,"addfan":[],"hucard":0,"DianPao":[]},{"chairid":1,"SpecialType":3,"FanNum":0,"addfan":[],"hucard":0,"DianPao":[]},{"chairid":2,"SpecialType":2,"FanNum":1,"addfan":[{"AddType":17,"AddNum":1,"AddType2":null},{"AddType":17,"AddNum":1,"AddType2":null}],"hucard":7,"DianPao":[]},{"chairid":3,"SpecialType":0,"FanNum":0,"addfan":[],"hucard":0,"DianPao":[]}],"money":[100000,99999,100001,100000]},"piao_score":[0,0,0,0],"put_score":[],"bigcall_score":[]};
            //this.handler_server_game_end_bc(packet);

            var piaoData = {
                userhuo:0,
                userpiao:-1,
            }
            MJModel.roomState = 1;
            this.resetGame(false);
            this.room_Info.setVisible(true);
            JsUtils.postNotifi("notify_game_check_end");//为了刷新局数 或者  开始倒计时`
            cc.eventManager.dispatchCustomEvent("hide_copy_room");
            if (this.room_Action.actions["yaoqing"]) {
                this.room_Action.actions["yaoqing"].setVisible(false);
            }
            if (this.room_Action.actions["copyshare"]) {
                this.room_Action.actions["copyshare"].setVisible(false);
            }
            if (this.pre_scene) {
                this.pre_scene.removeFromParent(true);
                this.pre_scene = null;
            }
            this.room_Info.showTime(1);
            this._show_piao_layer(piaoData.userhuo, piaoData.userpiao);
        }
    },
    fastChat5: ["我等的花都谢了", "让我再想想", "我们交个朋友吧", "我有一百种办法胡你", "下次咱们再玩吧", "怎么又断线了", "我要离开一会儿"],
    _setFastChat: function () {
        MJModel.mj_fastChat = this.fastChat5;
    },
    resetGame: function (allClean,isGameStart) {
        if (isGameStart == undefined) {
            isGameStart = false;
        }
        this._super(allClean,isGameStart);
        this._removeAllScoreEffect();
        //if (isGameStart == false){
        //    if (allClean)this._clearAllFag("all");
        //}
        this._curChiPai = 255;
        this.removeChildByName("piao_layer");
    },
    _removeAllScoreEffect: function () {
        try {
            while (this.getChildByName("hubeimj_score_effect")) {
                this.removeChildByName("hubeimj_score_effect");
            }
        } catch (e) {

        }
    },
    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.yichunmj.tagCurGameScence", jpacket);
            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.yichunmj.AckCurGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_START_PIAO) {
            this._handler_start_piao(jpacket, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_BROAD_PIAO) {
            this._handler_piao_result(jpacket, canDelay);
            return;
        }
        if(cmd == selfCMD.SERVER_CP_BANKER) {
            this._handler_cp_banker(jpacket, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_OPERATE_RESULT2) {
            this._handler_server_operate_notify_bc(jpacket, canDelay);
            return;
        }
        this._super(cmd, jpacket, canDelay, svrid);
    },

    updateBg: function (isInit) {
        if (isInit == undefined)isInit = false;
        var size = cc.director.getWinSize();
        if (this.bg == null) {
            this.bg = new ccui.ImageView(getResPath(this.getBgStr()));
            this.bg.setAnchorPoint(cc.p(0.5, 0.5));
            this.bg.setContentSize(size);
            this.bg.setScale9Enabled(true);
            this.bg.setPosition(size.width / 2, size.height / 2);
            this.addChild(this.bg, -100);
        } else {
            this.bg.loadTexture(getResPath(this.getBgStr()));
        }

        Utils.addCardSprites(__String.createWithFormat("%1/cards/%2_%3_%4_debug", MJModel.mj_fontSize == "dahao" ? "yichunmj" : "RoomMJ", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));

        if (MJModel.mj_roomType == 2) {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "yichunmj/config/card_config_2ren.json" : "yichunmj/config/card_config2d_2ren.json");
        } else {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "yichunmj/config/card_config.json" : "yichunmj/config/card_config2d.json");
        }

        if (isInit)return;

        this.room_Card.reflashAllCardUI();
        for (var i = 0; i < 4; i++) {
            this.players[i].setPosition(MJConfig.getPlayerPos(i));
            this.players[i].reflashNameMoneyPosition();
        }
        if (this.room_Info)this.room_Info.reflash();
    },

    loadCardConfig: function (path) {
        if (MJModel.mj_roomType == 2) {
            if(MJModel.mj_bg_use == 0){
                path = "yichunmj/config/card_config_2ren.json";
            }
            else{
                path = "yichunmj/config/card_config2d_2ren.json";
            }
        }else{
            if(MJModel.mj_bg_use == 0){
                path = "yichunmj/config/card_config.json";
            }
            else{
                path = "yichunmj/config/card_config2d.json";
            }
        }
        this._super(path);
    },

    getMjTypePath: function () {
        var pkg_id = "wzmj";
        if(this._pkg_id == PackgName.TTMJ){
            pkg_id = "ttmj";
        }
        if (this._pkg_id == PackgName.YFMJ){
            pkg_id = "yfmj";
        }
        if (this._pkg_id == PackgName.YCMJ){
            pkg_id = "ycmj";
        }
        var bgPath = "yichunmj/flag/" + pkg_id + ".png";
        return getResPath(bgPath);
    },

    _gameType_sp:null,
    _setGameType: function () {
        if (this._gameType_sp == null) {
            MJModel.play_id_str = [];

            if (MJModel.mj_roomType == 0) {
                MJModel.play_id_str.push("4人");
            }
            if (MJModel.mj_roomType == 1) {
                MJModel.play_id_str.push("3人");
            }
            if (MJModel.mj_roomType == 2) {
                MJModel.play_id_str.push("2人");
            }

            if (MJModel.RoomConfigID.indexOf(5051001) != -1) {
                MJModel.play_id_str.push("对火");
            }
            if (MJModel.RoomConfigID.indexOf(5051002) != -1) {
                MJModel.play_id_str.push("对飘");
            }
            if (MJModel.RoomConfigID.indexOf(5051003) != -1) {
                MJModel.play_id_str.push("天胡地胡10分起");
            }
            if (MJModel.RoomConfigID.indexOf(5053001) != -1) {
                MJModel.play_id_str.push("可追庄");
            }
            if (MJModel.RoomConfigID.indexOf(5053002) != -1) {
                MJModel.play_id_str.push("不可追庄");
            }
            if(MJModel.RoomConfigID.indexOf(5055001) != -1) {
                MJModel.play_id_str.push("必火必飘2");
            }
            if(MJModel.RoomConfigID.indexOf(5055002) != -1) {
                MJModel.play_id_str.push("不过手可胡");
            }
            if(MJModel.RoomConfigID.indexOf(5055003) != -1) {
                MJModel.play_id_str.push("不可吃牌");
            }
            if(MJModel.RoomConfigID.indexOf(5055004) != -1) {
                MJModel.play_id_str.push("必火");
            }
            if(MJModel.RoomConfigID.indexOf(5055005) != -1) {
                MJModel.play_id_str.push("必飘2");
            }
            if(MJModel.RoomConfigID.indexOf(5056001) != -1) {
                MJModel.play_id_str.push("字一色成牌型");
            }
            if(MJModel.RoomConfigID.indexOf(5056002) != -1) {
                MJModel.play_id_str.push("字一色不成牌型");
            }

            if (MJModel.RoomConfigID.indexOf(5091001) != -1) {
                MJModel.play_id_str.push("抓2鸟");
            }
            if (MJModel.RoomConfigID.indexOf(5091002) != -1) {
                MJModel.play_id_str.push("抓4鸟");
            }
            if (MJModel.RoomConfigID.indexOf(5091003) != -1) {
                MJModel.play_id_str.push("抓6鸟");
            }
            if (MJModel.RoomConfigID.indexOf(5091004) != -1) {
                MJModel.play_id_str.push("抓8鸟");
            }
            if (MJModel.RoomConfigID.indexOf(5091005) != -1) {
                MJModel.play_id_str.push("一张定鸟");
            }
            if (MJModel.RoomConfigID.indexOf(5092001) != -1) {
                MJModel.play_id_str.push("不加鸟");
            }
            if (MJModel.RoomConfigID.indexOf(5092002) != -1) {
                MJModel.play_id_str.push("加1鸟");
            }
            if (MJModel.RoomConfigID.indexOf(5092003) != -1) {
                MJModel.play_id_str.push("加2鸟");
            }
            if (MJModel.RoomConfigID.indexOf(5093001) != -1) {
                MJModel.play_id_str.push("4红中奖全鸟");
            }
            if (MJModel.RoomConfigID.indexOf(5093002) != -1) {
                MJModel.play_id_str.push("飘");
            }
            if (MJModel.RoomConfigID.indexOf(5093003) != -1) {
                MJModel.play_id_str.push("抢杠全包");
            }
            if (MJModel.RoomConfigID.indexOf(5094001) != -1) {
                MJModel.play_id_str.push("对飘");
            }
            if (MJModel.RoomConfigID.indexOf(5094002) != -1) {
                MJModel.play_id_str.push("不对飘");
            }
            if (MJModel.RoomConfigID.indexOf(5095001) != -1) {
                MJModel.play_id_str.push("可抢杠胡");
            }
            if (MJModel.RoomConfigID.indexOf(5095002) != -1) {
                MJModel.play_id_str.push("不可抢杠胡");
            }
            if (MJModel.RoomConfigID.indexOf(5096001) != -1) {
                MJModel.play_id_str.push("庄闲算分");
            }

            if (MJModel.RoomConfigID.indexOf(5111001) != -1) {
                MJModel.play_id_str.push("对买");
            }
            if (MJModel.RoomConfigID.indexOf(5111002) != -1) {
                MJModel.play_id_str.push("不对买");
            }
            if (MJModel.RoomConfigID.indexOf(5112001) != -1) {
                MJModel.play_id_str.push("对飘");
            }
            if (MJModel.RoomConfigID.indexOf(5112002) != -1) {
                MJModel.play_id_str.push("不对飘");
            }
            if (MJModel.RoomConfigID.indexOf(5113001) != -1) {
                MJModel.play_id_str.push("可追庄");
            }
            if (MJModel.RoomConfigID.indexOf(5113002) != -1) {
                MJModel.play_id_str.push("不可追庄");
            }
            if (MJModel.RoomConfigID.indexOf(5114001) != -1) {
                MJModel.play_id_str.push("必买必飘2");
            }
            if (MJModel.RoomConfigID.indexOf(5114002) != -1) {
                MJModel.play_id_str.push("必买");
            }
            if (MJModel.RoomConfigID.indexOf(5114003) != -1) {
                MJModel.play_id_str.push("必飘2");
            }

            if (MJModel.RoomConfigID.indexOf(5122001) != -1) {
                MJModel.play_id_str.push("带庄");
            }
            if (MJModel.RoomConfigID.indexOf(5122002) != -1) {
                MJModel.play_id_str.push("不带庄");
            }
            if (MJModel.RoomConfigID.indexOf(5124001) != -1) {
                MJModel.play_id_str.push("自选飘买");
            }
            if (MJModel.RoomConfigID.indexOf(5124002) != -1) {
                MJModel.play_id_str.push("必买必飘2");
            }
            if (MJModel.RoomConfigID.indexOf(5124003) != -1) {
                MJModel.play_id_str.push("必买必飘3");
            }

            if(MJModel.base_money) {
                var basescoreStr = MJModel.base_money + "分底";
                MJModel.play_id_str.push(basescoreStr);
            }

            var gameDes = "";
            for (var i = 0; i < MJModel.play_id_str.length; i++) {
                gameDes += MJModel.play_id_str[i];
                if (i != MJModel.play_id_str.length - 1){
                    gameDes += ",";
                }
            }
            cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);
        }
    },
    handler_server_scene_info_uc: function (chengdu_scene, canDelay) {
        var ackGameFree = chengdu_scene.gamescene;
        var sceneStatus = ackGameFree.SceneStatus;
        var ispiaoing = chengdu_scene.ispiaoing;
        var userhuo = chengdu_scene.userhuo;
        var userpiao = chengdu_scene.userpiao;
        var chicard = chengdu_scene.chicard;
        this._curChiPai = chicard;
        if (ackGameFree.RoomConfigID.indexOf(2000002) != -1)MJModel.changMode = 1;
        if (ackGameFree.RoomConfigID.indexOf(2000003) != -1)MJModel.changMode = 3;
        this.loadCardConfig();
        if(this._pkg_id == PackgName.TTMJ) {
            this._curLaizi = HONGZHONG;
        }
        if (ispiaoing) {
            MJModel.roomState = 1;
        }
        this._super(ackGameFree, canDelay);
        this._setGameType();

        if (ispiaoing){
            for (var i = 0; i < 4; i ++){
                this.players[i].setReadyFlag(false);
            }
        }
        if (userpiao) {
            for (var i = 0; i < userpiao.length; i++) {
                var pos = MJModel.getPosBySeatid(i);
                var value = userpiao[i];
                if(MJModel.isMyPlayer(i) && this._pkg_id != PackgName.TTMJ) {
                    setItem("huo_num", userhuo[i] < 0 ? 0 : userhuo[i]);
                    setItem("piao_num", userpiao[i] < 0 ? 0 :userpiao[i]);
                }
                if (value == -1) {
                    if (ispiaoing) {
                        if (MJModel.isMyPlayer(i)) {
                            this._show_piao_layer(userhuo[MJModel.seatid], userpiao[MJModel.seatid]);
                        }
                    }
                } else {
                    var player = this.players[pos];
                    player.setPiaoNum(userhuo[i], userpiao[i]);
                }
            }
        }

        if (MJModel.isMyPlayer(MJModel.cur_seat)) {
            this.myselfOpenOutCard();
        }
    },

    _init_extend: function () {
        var self_table = this;

        MJConfig.getHandCardPos = function (pos, index, all, needRestri) {
            if (needRestri == undefined)needRestri = false;
            if (MJModel.isOnVideo) {
                return this.getEndCardPos(pos, index, all, needRestri);
            }
            var findex = index;
            if (needRestri) {
                findex = index - 1;
            }
            if(MJModel.mj_fontSize == "dahao" && pos == 0) {
                return this.getWorldPosition("hand_" + pos + "_dahao", "h_" + findex);
            } else {
                return this.getWorldPosition("hand_" + pos, "h_" + findex);
            }
        };

        MJConfig.getMoCardPos = function (pos) {
            if (MJModel.isOnVideo) {
                return this.getEndCardMoPos(pos);
            }
            if(MJModel.mj_fontSize == "dahao" && pos == 0) {
                return this.getWorldPosition("hand_" + pos + "_dahao", "h_mo");
            } else {
                return this.getWorldPosition("hand_" + pos, "h_mo");
            }
        };

        MJConfig.getEndCardPos = function (pos, index, all, needRestri) {
            if (needRestri == undefined)needRestri = false;
            var findex = index;
            if (needRestri) {
                findex = index - 1;
            }
            if(MJModel.mj_fontSize == "dahao" && pos == 0) {
                return this.getWorldPosition("end_" + pos + "_dahao", "e_" + findex);
            } else {
                return this.getWorldPosition("end_" + pos, "e_" + findex);
            }
        };

        MJConfig.getEndCardMoPos = function (pos) {
            if(MJModel.mj_fontSize == "dahao" && pos == 0) {
                return this.getWorldPosition("end_" + pos + "_dahao", "e_mo");
            } else {
                return this.getWorldPosition("end_" + pos, "e_mo");
            }
            return this.getWorldPosition("end_" + pos, "e_mo");
        };

        MJConfig.getNiaoPaiPos = function(index, nums) {
            var p = this.getInfoPos();
            p.x += (index > (nums / 2 - 1)) ? ((index - nums / 2) * 100 + 50) : ((index - (nums / 2 - 1)) * 100 - 50);
            return p;
        };

        MJConfig.getZhongNiaoPos = function(index, nums, pos) {
            var p = this.getOutingCardPos(pos);
            p.x += (index > (nums / 2 - 1)) ? ((index - nums / 2) * 100 + 50) : ((index - (nums / 2 - 1)) * 100 - 50);
            if(pos == 0) {
                p.y -= 20;
            } else if(pos == 2) {
                p.y += 20;
            } else {
                p.y += 60;
            }
            return p;
        };

        MJCard.prototype.check_addFlag = function () {
            self_table._checkAddCardFlag(this);
        };

        //MJCards.prototype.outMyCard = function(out_card, isServer) {
        //    this.curOutCard = null;
        //    if (isServer == undefined) {
        //        isServer = false;
        //    }
        //    if (out_card) {
        //        if (this.outCardBtn) this.outCardBtn.setVisible(false);
        //        if (isServer == false && MJModel.mj_self_outCard_type == 1) {
        //            out_card.goBack();
        //            return;
        //        }
        //        out_card = removeCardByCard(out_card, this.hand_card[0]);
        //        var card = out_card;
        //        var pos = 0;
        //        if (card) {
        //            card.reset();
        //            var delay = MJModel.speeds[MJModel.mj_speed - 1];
        //            if(delay == 0){
        //                card.removeFromParent(true);
        //                MJModel.mj_mo_cards[pos] = -1;
        //                this.reflashHandCard(pos, true, true);
        //                this.addOutCard(pos, card.value);
        //                this.handler_out_card_sound(MJModel.players[MJModel.seatid].sex, card.value);
        //            }else {
        //                var self = this;
        //                MJModel.isEnterWait = true;
        //                var move_callbck = cc.callFunc(function () {
        //                    card.removeFromParent(true);
        //                    self.reflashHandCard(pos, true, true);
        //                    self.addOutCard(pos, card.value);
        //                    self.handler_out_card_sound(MJModel.players[MJModel.seatid].sex, card.value);
        //                    MJModel.isEnterWait = false;
        //                });
        //                card.runAction(cc.sequence(cc.moveTo(delay, MJConfig.getOutCardPos(pos, this.out_card[pos].length)), move_callbck));
        //            }
        //        }
        //    }
        //};

        MJCards.prototype.outHandCardEffct2 = function (pos, value) {
            this.addOutCard(pos, value);
            this.reflashHandCard(pos, true, true);
        };

        var super_setSomeCardClickState = MJCards.prototype.setSomeCardClickState;
        MJCards.prototype.setSomeCardClickState = function () {
            super_setSomeCardClickState.call(this);
            //跳跳麻将才有癞子，癞子不能打
            for (var i = 0; i < this.hand_card[0].length; i++) {
                var card = this.hand_card[0][i];
                if (card.getValue() == self_table._curLaizi) {
                    card.setCardTouchEnable(false);
                }
                //if (self_table._pkg_id == PackgName.YCMJ && card.getValue() == self_table._curChiPai && this.hand_card[0].length != 2) {
                //    card.setCardTouchEnable(false);
                //}
            }
        };

        //Cards 碰杠去掉闪电
        MJCards.prototype.showLightAnim = function (position) {
        };

        Setting.prototype.initUI = function () {
            var uiJson = ccs.load(getResPath("yichunmj/setting.json"));
            var uiNode = uiJson.node;
            var self = this;
            var size = cc.director.getWinSize();
            var bg = uiNode.getChildByName("bg");
            bg.removeFromParent();
            bg.setPosition(size.width / 2, size.height / 2);
            this.addChild(bg);
            this._bg = bg;
            this._settingLayer = bg.getChildByName("setting");
            this._gameSettingLayer = bg.getChildByName("gamesetting");

            //init button
            {
                var btns_node = bg.getChildByName("btns");
                var cs = btns_node.getChildren();
                for (var i in cs) {
                    var btn = cs[i];
                    if (btn) {
                        btn.addClickEventListener(function (sender, evt) {
                            self.btnsCallBack(sender);
                        });
                        this.btns[btn.getName()] = btn;
                    }
                }
            }
            this.initSetting();
            this.initGameSetting();
            this.showPaiBanView(MJModel.mj_table_view == "2d");
        };

        Setting.prototype.initSetting = function () {
            var self = this;
            //init slider
            {
                var btns_node = this._settingLayer.getChildByName("slider");
                var cs = btns_node.getChildren();
                for (var i in cs) {
                    var btn = cs[i];
                    if (btn) {
                        btn.addEventListener(function (slider, event) {
                            self.setting_slidersCallBack(slider, event);
                        });

                        if (btn.getName() == "yinxiao") {
                            btn.setPercent(ZJHModel.getInstance().sound * 100);
                        }

                        if (btn.getName() == "yinyue") {
                            btn.setPercent(ZJHModel.getInstance().bgMusic * 100);
                        }
                    }
                }
            }

            //init checkboxs
            {
                var btns_node = this._settingLayer.getChildByName("checkbox");
                var cs = btns_node.getChildren();
                for (var i in cs) {
                    var btn = cs[i];
                    if (btn) {
                        btn.addEventListener(function (slider, event) {
                            self.setting_selectedStateEvent(slider, event);
                        });
                        this.checkboxs_setting[btn.getName()] = btn;
                    }

                    btn.setEnabled(true);
                    btn.setSelected(false);

                    if (btn.getName().indexOf(MJModel.fangyan) != -1) {
                        btn.setSelected(true);
                        btn.setEnabled(false);
                    }

                    if (btn.getName().indexOf(MJModel.yinyue) != -1) {
                        btn.setSelected(true);
                        btn.setEnabled(false);
                    }

                    if (btn.getName().indexOf(MJModel.chupaiType) != -1) {
                        btn.setSelected(true);
                        btn.setEnabled(false);
                    }
                }
            }

            this.checkboxs_setting["zhendong"].setSelected(ZJHModel.getInstance().vibrate == 1);
            this.checkboxs_setting["hudong"].setSelected(MJModel.hudong == 1);

            this.doSupportFangYan();
            this.doSupportYinYue();

        };

        var super_setting_selectedStateEvent = Setting.prototype.setting_selectedStateEvent;
        Setting.prototype.setting_selectedStateEvent = function (sender, type) {
            super_setting_selectedStateEvent.call(this, sender, type);
            var name = sender.getName();
            switch (type) {
                case  ccui.CheckBox.EVENT_UNSELECTED:
                    break;

                case ccui.CheckBox.EVENT_SELECTED:
                    if (name.indexOf("chupai_") != -1) {
                        for (var i in this.checkboxs_setting) {
                            var btn = this.checkboxs_setting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("chupai_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        MJModel.chupaiType = name.split("_")[1];
                        setItem("mj_chupai", MJModel.chupaiType);
                        self_table.reflashChupaiType();
                    }
                    break;

                default:
                    break;
            }
        };

        Setting.prototype.showPaiBanView = function (is) {
            is = false;
            this._gameSettingLayer.getChildByName("light_title").setVisible(is);
            this.checkboxs_gamesetting["paiban_horizontal"].setVisible(is);
            this.checkboxs_gamesetting["paiban_vertical"].setVisible(is);
        };

        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(false);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("成都");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };

        MJCards.prototype.sortCard = function (a, b) {
            return self_table._sortCard(a, b);
        };

        MJPlayer.prototype.setPiaoNum = function (userhuo, userpiao) {
            if (!this.huo_flag){
                this.huo_flag = new cc.Sprite(getResPath("yichunmj/piao/flag_huo_0.png"));
                this.huo_flag.setVisible(false);
                if (this.pid == 2) {
                    this.huo_flag.setPosition(cc.p(this.m_size.width / 2 + 40, this.m_size.height / 2 - 20));
                } else if(this.pid == 1) {
                    this.huo_flag.setPosition(cc.p(this.m_size.width / 2 - 40, this.m_size.height / 2 + 20));
                } else {
                    this.huo_flag.setPosition(cc.p(this.m_size.width / 2 + 40, this.m_size.height / 2 + 20));
                }
                this.addChild(this.huo_flag);
            }
            if (this.huo_flag){
                this.huo_flag.setVisible(userhuo != -1);
                if (userhuo != -1){
                    var huoPath = "";
                    if(self_table._pkg_id == PackgName.YCMJ || self_table._pkg_id == PackgName.YFMJ) {
                        huoPath = getResPath("yichunmj/piao/flag_mai_" + userhuo + ".png");
                    } else {
                        huoPath = getResPath("yichunmj/piao/flag_huo_" + userhuo + ".png")
                    }
                    this.huo_flag.setTexture(huoPath);
                }
            }

            if (!this.piao_flag){
                this.piao_flag = new cc.Sprite(getResPath("yichunmj/piao/flag_ge_0.png"));
                this.piao_flag.setVisible(false);
                if (this.pid == 2) {
                    this.piao_flag.setPosition(cc.p(this.m_size.width + this.piao_flag.getContentSize().width / 2 - 30, this.m_size.height - 20));
                } else {
                    this.piao_flag.setPosition(cc.p(this.m_size.width / 2, this.m_size.height + 10));
                }
                this.addChild(this.piao_flag);
            }
            if (this.piao_flag){
                this.piao_flag.setVisible(userpiao != -1);
                if (userpiao != -1){
                    this.piao_flag.setTexture(getResPath("yichunmj/piao/flag_ge_" + userpiao + ".png"));
                }
            }
        };

        var superreset = MJPlayer.prototype.reset;
        MJPlayer.prototype.reset = function (allClean,isGameStart) {
            superreset.call(this);
            if (allClean && !isGameStart)this.setPiaoNum(-1, -1);
        };

        MJAction.prototype.showPassWarn = function (type, card, tips) {
            var self = this;
            var checkLayer = new PassWarn();
            checkLayer.setChoiceInfos(false, false, tips);
            checkLayer.setName("checkLayer_selectLayer");
            checkLayer.setCallback(function () {
                sendOperateCard(type, card, [1]);
                self.setOperator(-1);
            });
            this.addChild(checkLayer, 10000);
        };

        MJAction.prototype.btnCallback = function (ref) {
            if (MJModel.outtimeplayers.length > 1){
                MJModel.mj_table.room_Tip.setAutoEndRoomVis(true);
            }
            var n = ref;
            var name = n.getName();
            Log(this, "btnCallback:" + name);
            var self = this;

            if (name == "yaoqing") {
                if (MJModel.shareType == 1) {
                    var myposition = cc.p(n.getContentSize().width / 2, n.getContentSize().height / 2);
                    var sharelist = new ShareList();
                    sharelist.initList(this, 0, myposition);
                    n.addChild(sharelist);
                    return;
                }
            }
            if (name == "pass" || name == "hu" || name == "gang" || name == "peng" || name == "chi" || name == "huaHu") {
                var type = 0;
                if (name == "pass") {
                    type = ActionType.TYPE_PASS;
                    var op = MJModel.curOperate;
                    var card = MJModel.curOperateCard;
                    var hasGang = false;
                    var hasHu = false;
                    if ((op & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG
                        || (op & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG
                        || (op & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
                        hasGang = true;
                    }

                    if ((op & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                        hasHu = true;
                    }

                    hasGang = false;//暂时不要杠
                    if (MJModel.needTipWhenPass == 1 && (hasGang || hasHu)) {
                        this.removeChildByName("checkLayer_selectLayer");
                        var checkLayer = new PassWarn();
                        checkLayer.setChoiceInfos(hasGang, hasHu);
                        checkLayer.setName("checkLayer_selectLayer");
                        checkLayer.setCallback(function () {
                            sendOperateCard(type, card, [1]);
                            self.setOperator(-1);
                            self.removeChildByName("checkLayer_selectLayer");
                        });
                        this.addChild(checkLayer, 10000);
                        return;
                    }
                    sendOperateCard(type, card);
                    this.setOperator(-1);
                    return;
                }
                if (name == "hu") type = ActionType.TYPE_HU;
                if (name == "peng") type = ActionType.TYPE_PENG;
                if (name == "huaHu") type = ActionType.TYPE_HUA_HU;
                if (name == "gang") {
                    var op = MJModel.curOperate;
                    if ((op & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG || (op & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
                        if (MJModel.gang_info.length > 1) {
                            var selectLayer = new ChooseGang();
                            selectLayer.setChoiceInfos(MJModel.gang_info);
                            selectLayer.setName("ChooseGang_selectLayer");
                            selectLayer.setTitle("请点击选择要杠的牌");
                            selectLayer.setPosition(cc.p(n.getPosition().x + 0, n.getPosition().y + 50));
                            selectLayer.setCallback(function (index) {
                                self.removeChildByName("ChooseGang_selectLayer");

                                self.sureOperate(MJModel.gang_info[index].state, MJModel.gang_info[index].curCard);
                            });
                            this.addChild(selectLayer, 10000);
                            return;
                        }
                        else if (MJModel.gang_info.length > 0) {
                            MJModel.curOperateCard = MJModel.gang_info[0].curCard;
                        }
                        else {
                            return;
                        }
                    }

                    type = ActionType.TYPE_ZHIGANG;

                    if ((op & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
                        type = ActionType.TYPE_WANGANG;
                    }
                    else if ((op & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                        type = ActionType.TYPE_ANGANG;
                    }
                }

                if (name == "chi") {
                    var op = MJModel.curOperate;
                    var op_nums = 0;
                    var op_type = ActionType.TYPE_LEFT_CHI;
                    if ((op & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                        op_nums++;
                        op_type = ActionType.TYPE_LEFT_CHI;
                    }
                    if ((op & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                        op_nums++;
                        op_type = ActionType.TYPE_CENTER_CHI;
                    }
                    if ((op & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                        op_nums++;
                        op_type = ActionType.TYPE_RIGHT_CHI;
                    }

                    if (op_nums > 1) {
                        var selectLayer = new ChooseChi();
                        selectLayer.setChoiceInfos(MJModel.curOperate, MJModel.curOperateCard)
                        selectLayer.setName("ChooseGang_selectLayer");
                        selectLayer.setPosition(cc.p(n.getPosition().x, n.getPosition().y + 50));
                        selectLayer.setCallback(function (type) {
                            sendOperateCard(type, MJModel.curOperateCard);
                            self.setOperator(-1);
                            self.removeChildByName("ChooseGang_selectLayer");
                        });
                        this.addChild(selectLayer, 10000);
                        return;
                    }
                    type = op_type;
                }
                var card = MJModel.curOperateCard;
                sendOperateCard(type, card);
                this.setOperator(-1);
                return;
            }

            if (this.callback) this.callback(name);
        };

        var super_setOperator = MJAction.prototype.setOperator;
        MJAction.prototype.setOperator = function (operat) {
            try {
                this.removeChildByName("ChooseGang_selectLayer");

                super_setOperator.call(this, operat);

                if ((operat & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                    if (self_table.room_Card.isDuoPai(0)) {
                        this.actions["hu"].loadTextures(getResPath("yichunmj/action/zimo.png"), "", "");
                    } else {
                        this.actions["hu"].loadTextures(getResPath("RoomMJ/action/hu1.png"), "", "");
                    }4
                }

                if (self_table.room_Card.isDuoPai(0) && ((operat & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (operat & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG)) {
                    self_table.myselfOpenOutCard();
                }

                //跳跳麻将胡的时候手上的牌是两个癞子，这个时候去掉过的按钮
                if (self_table.room_Card.isDuoPai(0) && (operat & ActionType.TYPE_HU) == ActionType.TYPE_HU && self_table.room_Card.hand_card[0].length == 2 &&
                    self_table.room_Card.hand_card[0][0].getValue() == self_table.room_Card.hand_card[0][1].getValue() && self_table.room_Card.hand_card[0][0].getValue() == self_table._curLaizi) {
                    //if (this.actions["hu"]) {
                    //    this.actions["hu"].setVisible(true);
                    //}

                    if (this.actions["pass"]) {
                        this.actions["pass"].setVisible(false);
                    }

                    this.reflashOpBtns();
                }
            } catch(e) {
                ERROR(this, "setOperator:" + e);
            }
        };

        var super_setOperator_v = MJActionVideo.prototype.setOperator;
        MJActionVideo.prototype.setOperator = function (pos , operat, operat2) {
            super_setOperator_v.call(this, pos, operat);
            cc.log("luxi===:" + pos);

            if((operat & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                if(self_table.room_Card.isDuoPai(pos)) {
                    this.actions[pos]["hu"].loadTextures(getResPath("yichunmj/action/zimo.png"), "", "");
                } else {
                    this.actions[pos]["hu"].loadTextures(getResPath("RoomMJ/action/hu1.png"), "", "");
                }
            }

            if(self_table.room_Card.hand_card[pos].length == 2) {
                cc.log("======MJActionVideo=========operat:" + operat + "===:" + self_table.room_Card.isDuoPai(pos) + "===:" + (self_table.room_Card.hand_card[pos].length == 2) +
                    "===:" + (self_table.room_Card.hand_card[pos][0].getValue() == self_table.room_Card.hand_card[pos][1].getValue()) + "===:" + (self_table.room_Card.hand_card[pos][0].getValue() == self_table._curLaizi));

                if (self_table.room_Card.isDuoPai(pos) && (operat & ActionType.TYPE_HU) == ActionType.TYPE_HU && self_table.room_Card.hand_card[pos].length == 2 &&
                    self_table.room_Card.hand_card[pos][0].getValue() == self_table.room_Card.hand_card[pos][1].getValue() && self_table.room_Card.hand_card[pos][0].getValue() == self_table._curLaizi) {
                    //if (this.actions[pos]["hu"]) {
                    //    this.actions[pos]["hu"].setVisible(true);
                    //}

                    if (this.actions[pos]["pass"]) {
                        this.actions[pos]["pass"].setVisible(false);
                    }

                    this.reflashOpBtns(pos);
                }
            }
        };

        var super_reset = MJActionVideo.prototype.reset;
        MJActionVideo.prototype.reset = function () {
            super_reset.call(this);

            this.removeChildByName("checkLayer_selectLayer");
        };

        var supersetValue = MJPeng.prototype.setValue;
        MJPeng.prototype.setValue = function (type, pos, value, index, out_pos, isEnd, OpType) {
            //特殊吃的类型 特殊处理一下 吃的白板 要以当前赖子去处理其它牌
            if ((type == PengType.Chi_L || type == PengType.Chi_M || type == PengType.Chi_R)) {
                var values = [];
                var card1 = 0;
                var card2 = 0;
                cc.log("LX=======value:" + value);
                if (parseInt(value / 16)== 3) {
                    var fengArray = [52, 49, 50, 51];
                    if (type == PengType.Chi_L) {
                        card1 = fengArray[(value + 1) % 4];
                        card2 = fengArray[(value + 2) % 4];
                    }
                    else if (type == PengType.Chi_M) {
                        card1 = fengArray[(value + 1) % 4];
                        card2 = fengArray[(value + 3) % 4];
                    }
                    else if (type == PengType.Chi_R) {
                        card2 = fengArray[(value + 2) % 4];
                        card1 = fengArray[(value + 3) % 4];
                    }
                } else {
                    if (type == PengType.Chi_L) {
                        card1 = value + 1;
                        card2 = value + 2;
                    }
                    else if (type == PengType.Chi_M) {
                        card1 = value - 1;
                        card2 = value + 1;
                    }
                    else if (type == PengType.Chi_R) {
                        card2 = value - 1;
                        card1 = value - 2;
                    }
                }

                if (MJModel.chi_layout == 0) {
                    if (type == PengType.Chi_L) {
                        values.push(value);
                        values.push(card1);
                        values.push(card2);
                    } else if (type == PengType.Chi_M) {
                        values.push(card1);
                        values.push(value);
                        values.push(card2);
                    } else if (type == PengType.Chi_R) {
                        values.push(card1);
                        values.push(card2);
                        values.push(value);
                    }
                } else {
                    values.push(card1);
                    values.push(value);
                    values.push(card2);
                }
                this.showUI(type, pos, values, index, out_pos, isEnd, OpType, value);
            } else {
                supersetValue.call(this, type, pos, value, index, out_pos, isEnd, OpType);
            }
        };

        ChooseChi.prototype.setChoiceInfos = function (curOperate, curOperateCard) {
            var op_type_v = [];
            var op_cards_v = [];
            var op = curOperate;
            var cur_card = curOperateCard;
            cc.log("LX=======cur_card:" + cur_card);

            if ((op & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                op_type_v.push(ActionType.TYPE_LEFT_CHI);
            }
            if ((op & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                op_type_v.push(ActionType.TYPE_CENTER_CHI);
            }
            if ((op & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                op_type_v.push(ActionType.TYPE_RIGHT_CHI);
            }

            for (var i = 0; i < op_type_v.length; i++) {
                op_cards_v[i] = [];
                var opType = op_type_v[i];
                //把白板当成癞子的点数使用
                if (parseInt(cur_card / 16) == 3) {
                    var fengArray = [52, 49, 50, 51];
                    if (opType == ActionType.TYPE_LEFT_CHI) {
                        op_cards_v[i].push(cur_card);
                        op_cards_v[i].push(fengArray[(cur_card + 1) % 4]);
                        op_cards_v[i].push(fengArray[(cur_card + 2) % 4]);
                    }
                    else if (opType == ActionType.TYPE_CENTER_CHI) {
                        op_cards_v[i].push(fengArray[(cur_card + 1) % 4]);
                        op_cards_v[i].push(cur_card);
                        op_cards_v[i].push(fengArray[(cur_card + 3) % 4]);
                    }
                    else if (opType == ActionType.TYPE_RIGHT_CHI) {
                        op_cards_v[i].push(fengArray[(cur_card + 2) % 4]);
                        op_cards_v[i].push(fengArray[(cur_card + 3) % 4]);
                        op_cards_v[i].push(cur_card);
                    }
                } else {
                    //把癞子点数显示成白板
                    if (opType == ActionType.TYPE_LEFT_CHI) {
                        op_cards_v[i].push(cur_card);
                        op_cards_v[i].push(cur_card + 1);
                        op_cards_v[i].push(cur_card + 2);
                    }
                    else if (opType == ActionType.TYPE_CENTER_CHI) {
                        op_cards_v[i].push(cur_card - 1);
                        op_cards_v[i].push(cur_card);
                        op_cards_v[i].push(cur_card + 1);
                    }
                    else if (opType == ActionType.TYPE_RIGHT_CHI) {
                        op_cards_v[i].push(cur_card - 2);
                        op_cards_v[i].push(cur_card - 1);
                        op_cards_v[i].push(cur_card);
                    }
                }
            }
            this.showUI(op_type_v, op_cards_v, cur_card);
        };

        BigFaceMenu.prototype.getIconsIndexArray = function (seatid) {
            var icons = [1, 3, 7, 8, 20, 21];//需要显示的动画表情
            return icons;
        };

        var super_show = BigFaceMenu.prototype.show;
        BigFaceMenu.prototype.show = function (rotation, seatid) {
            if(Utils.isNewYear()) {
                super_show.call(this, rotation, seatid);
                return;
            }
            var self = this;
            var radius = 150;
            var M_PI = 3.14159;
            var allicons =
                    [
                        "RoomMJ/bigface/facechat_text.png",//0
                        "RoomMJ/bigface/hua/hua.png",//1
                        "RoomMJ/bigface/yanhua/fireworks.png",//2
                        "RoomMJ/bigface/kiss/kiss.png",//3
                        "RoomMJ/bigface/pianbao/firecrackers.png",//4
                        "RoomMJ/bigface/cheers/cheers.png",//5
                        "RoomMJ/bigface/hongbao/redbag.png",//6
                        "RoomMJ/bigface/diyan/xuejia.png",//7
                        "RoomMJ/bigface/huaxie/flower1.png",//8
                        "RoomMJ/bigface/bomb/bomb.png",//9
                        "RoomMJ/bigface/eggs/egg1.png",//10
                        "RoomMJ/bigface/jinyong_hudong.png",//11
                        "RoomMJ/bigface/kaifang_hudong.png",//12
                        "RoomMJ/bigface/orange/orange.png",//13
                        "RoomMJ/bigface/shanxi/icon/smoke.png",//14
                        "RoomMJ/bigface/shanxi/icon/shoes.png",//15
                        "RoomMJ/bigface/shanxi/icon/kiss.png",//16
                        "RoomMJ/bigface/shanxi/icon/hua.png",//17
                        "RoomMJ/bigface/shanxi/icon/cheers.png",//18
                        "RoomMJ/bigface/shanxi/icon/bullion.png",//19
                        "yichunmj/bigface/facai/facai.png",
                        "yichunmj/bigface/longxia/longxia.png"
                    ]
                ;//所有的表情列表 已有的资源的 部分资源先不删除

            var icons = this.getIconsIndexArray(seatid);
            var dv = 180 / icons.length;
            var offsets = [];
            for (var i = 0; i < icons.length; i++) {
                offsets.push(cc.p(radius * Math.cos((-90.0 + rotation + dv * i + dv / 2) / 180.0 * M_PI), radius * Math.sin((-90.0 + rotation + dv * i + dv / 2) / 180.0 * M_PI)));
            }

            for (var i = 0; i < icons.length; i++) {
                var layout = new ccui.Layout();
                layout.setTouchEnabled(true);
                layout.setContentSize(cc.size(60, 60));
                layout.setAnchorPoint(0.5, 0.5);
                layout.setSwallowTouches(true);
                layout.setPosition(offsets[i]);
                layout.setTag(icons[i]);
                layout.addTouchEventListener(function (sender, type) {
                    var up = sender.getChildByName("up");
                    var down = sender.getChildByName("down");
                    if (type == ccui.Widget.TOUCH_BEGAN) {
                        up.setVisible(false);
                        down.setVisible(true);
                    }
                    else if (type == ccui.Widget.TOUCH_ENDED || type == ccui.Widget.TOUCH_CANCELED) {
                        up.setVisible(true);
                        down.setVisible(false);
                    }
                });
                layout.addClickEventListener(function (btn) {
                    if (self.m_pCallback) self.m_pCallback(btn.getTag());
                    self.removeFromParent(true);
                });
                this.addChild(layout);

                var up = new cc.Sprite(getResPath("RoomMJ/bigface/facechat1.png"));
                up.setName("up");
                up.setPosition(cc.p(30, 30));
                layout.addChild(up);

                var down = new cc.Sprite(getResPath("RoomMJ/bigface/facechat2.png"));
                down.setName("down");
                down.setPosition(cc.p(30, 30));
                down.setVisible(false);
                layout.addChild(down);

                var img = new cc.Sprite(getResPath(allicons[icons[i]]));
                img.setPosition(cc.p(30, 30));
                if (icons[i] != 0 && icons[i] != 11 && icons[i] != 12) img.setScale(0.7);
                layout.addChild(img);
            }

            this.setScale(0);
            this.runAction(cc.scaleTo(0.1, 1));
        };

        var super_showBigfaceNew = MJTips.prototype.showBigfaceNew;
        MJTips.prototype.showBigfaceNew = function(bpos, epos, fid, sex) {
            if (bpos == epos) {
                return;
            }
            try{
                var face = "";
                var effects = "";
                var shanxieffect = "";
                var action = "";
                var effect_time = 3;
                var fade_time = 0.2;//淡入时间
                var move_time = 0.5;//飞行时间
                var begin;
                var beginSound = getResPath(__String.createWithFormat("RoomMJ/bigface/sound/%1_%2.mp3", sex == SEX_ID.SEX_MAN ? "m" : "w", fid));
                var effect_sound = "";//特效音效
                var dx = 0;
                var end;
                begin = MJConfig.getPlayerPos(bpos);
                end = MJConfig.getPlayerPos(epos);
                switch (fid) {
                    case 20:
                        face = getResPath("yichunmj/bigface/facai/facai.png");
                        effects = getResPath("yichunmj/bigface/facai/effectsxbq_facai.ExportJson");
                        shanxieffect = "effectsxbq_facai"
                        action = "effectsxbq_facai";
                        effect_time = 2.5;
                        effect_sound = getResPath("yichunmj/bigface/facai/facai.mp3");
                        break;
                    case 21:
                        face = getResPath("yichunmj/bigface/longxia/longxia.png");
                        effects = getResPath("yichunmj/bigface/longxia/effectsxbq_xia.ExportJson");
                        shanxieffect = "effectsxbq_xia"
                        action = "effectsxbq_xia";
                        effect_time = 2;
                        effect_sound = getResPath("yichunmj/bigface/longxia/longxia.mp3");
                        break;
                    default :
                        break;
                }
                if(fid == 20 || fid == 21) {
                    var face_sp = new cc.Sprite(face);
                    if (face_sp != null) {
                        face_sp.setPosition(begin);
                        var self = this;
                        var playeffect = cc.callFunc(function () {
                            ccs.armatureDataManager.addArmatureFileInfo(effects);
                            var armature = new ccs.Armature(shanxieffect);
                            var animation = armature.getAnimation();
                            if (animation) {
                                if (typeof animation.play === "function") {
                                    animation.play(action);
                                    armature.setPosition(cc.p(end.x + dx, end.y));
                                    self.addChild(armature, 10000);

                                    if (fid == 20) {
                                        armature.setScale(0.6);
                                    }
                                }
                            }
                            armature.runAction(cc.sequence(cc.delayTime(effect_time), cc.removeSelf()));
                            if (effect_sound != "") Sound.getInstance().playEffect(effect_sound);
                        });
                        face_sp.runAction(cc.sequence(cc.spawn(cc.fadeIn(fade_time), cc.moveTo(move_time, end).easing(cc.easeSineIn())), cc.removeSelf(), playeffect));
                        face_sp.setOpacity(0);
                        this.addChild(face_sp);
                    }
                    return;
                }
            } catch(e) {
                Log(this, e);
            }
            super_showBigfaceNew.call(this, bpos, epos, fid, sex);
        }
        //TingPaiLayer.prototype.onTouchEnded = function (touch, event) {
        //    if (this._isTouchInside(touch)) {
        //        return;
        //    }
        //};
    },

    reflashChupaiType: function () {
        MJModel.mj_double_click_style = MJModel.chupaiType == "danji" ? 1 : 0;
    },

    autoOutCard: function () {
        this.schedule(this.autoOutCardTimeOut, 0.8);
    },

    autoHuCard: function () {
        var operate = MJModel.curOperate;
        if (( operate & ActionType.TYPE_LISTEN) == ActionType.TYPE_LISTEN) {
            operate = operate - ActionType.TYPE_LISTEN;
        }

        if (operate > 0) {
            //有操作  取消自动胡牌功能
            if((operate & ActionType.TYPE_HU) == ActionType.TYPE_HU){
                this.schedule(this.autoHuCardTimeOut, 1);
            } else if ((operate & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG || (operate & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (operate & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG ||
                (operate & ActionType.TYPE_PENG) == ActionType.TYPE_PENG || (operate & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (operate & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI ||
                (operate & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                //有杠  取消自动胡牌功能
                MJModel.isAutoOutCard = false;
                if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
                this.room_Card.setAutoOutCard(false);
            } else {
                this.schedule(this.autoHuCardTimeOut, 1);
            }
        }
        //this.schedule(this.autoHuCardTimeOut, 1.0);
    },

    autoHuCardTimeOut: function (dt) {
        this.unschedule(this.autoHuCardTimeOut);
        if (MJModel.isAutoOutCard == false)return;
        if (MJModel.TouPiaoING == true) return;//投票期间 该功能不起作用
        var operate = MJModel.curOperate;
        if (( operate & ActionType.TYPE_LISTEN) == ActionType.TYPE_LISTEN) {
            operate = operate - ActionType.TYPE_LISTEN;
        }

        if (operate > 0) {
            //有操作  取消自动胡牌功能
            if((operate & ActionType.TYPE_HU) == ActionType.TYPE_HU){
                var type = ActionType.TYPE_HU;
                sendOperateCard(type, 0);
                if (this.room_Action) this.room_Action.setOperator(-1);
            } else if ((operate & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG || (operate & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (operate & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG ||
                (operate & ActionType.TYPE_PENG) == ActionType.TYPE_PENG || (operate & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (operate & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI ||
                (operate & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                //有杠  取消自动胡牌功能
                MJModel.isAutoOutCard = false;
                if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
                this.room_Card.setAutoOutCard(false);
            } else {
                var type = ActionType.TYPE_PASS;
                sendOperateCard(type, 0);
                if (this.room_Action) this.room_Action.setOperator(-1);
            }
        }
    },

    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.value;
            if (typeof b === "object") bv = b.value;
            if (av == this._curLaizi && bv != this._curLaizi)return 1;//赖子放在最前边
            if (av != this._curLaizi && bv == this._curLaizi)return -1;//赖子放在最前边
            return bv - av;
        } catch (e) {
            return 0;
        }
    },

    handler_op_sound: function (pos, sex, OpType, OpType2, effect) {
        var effect = "gang";
        if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
            effect = "hu";
        }
        else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
            effect = "peng";
        }
        else if ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI || (OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
            effect = "chi";
        }
        Sound.getInstance().playEffect(getResPath("RoomMJ/sound/give.mp3"));
        if (MJModel.fangyan == "fangyan1") {
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("yichunmj/sound/operator/%1_%2.mp3"), sex == SEX_ID.SEX_MAN ? "male" : "female", effect));
        } else {
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("RoomMJ/sound/operator/%1_%2.mp3"), sex == SEX_ID.SEX_MAN ? "m" : "w", effect));
        }
    },

    handler_server_mo_card_bc: function (data, canDelay) {
        this._super(data, canDelay);

        var userGetCard = parsePacket("proto.game.AckUserGetCard", data);
        var seatId = userGetCard.ChairID;
        var card = userGetCard.Card;
        var operate = userGetCard.OpType;
        var operate2 = userGetCard.OpType2;
        var leftCardNum = userGetCard.LeftCardNum;
        var encrypt_code = userGetCard.encrypt_code;
        if (card == null)encrypt_code = 0;

        var pos = MJModel.getPosBySeatid(seatId);

        if (this.room_Action_video) {
            this.room_Action_video.reset();
            this.room_Action_video.setOperator(pos, operate);
        }
    },

    handler_server_game_start_bc2:function(data, canDelay) {
        this._super(data, canDelay);
        this._handler_server_laizi_bc(canDelay);
    },

    handler_server_peng_kang_bc: function (data, canDelay) {
        this.room_Tip.showTextTip("");
        this.check_tip_operate_card(0, 0);

        var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);
        var seatid = ackBcOpResult.ChairID;
        var out_seatid = ackBcOpResult.OutCardChairID;
        var OpType = ackBcOpResult.OpType;
        var OpType2 = ackBcOpResult.OpType2;
        var card = ackBcOpResult.Card;
        var scores = ackBcOpResult.Score;
        var pos = MJModel.getPosBySeatid(seatid);
        var out_pos = MJModel.getPosBySeatid(out_seatid);
        var cardList = ackBcOpResult.OpCards;

        var self = this;
        if(MJModel.isOnVideo && (OpType & ActionType.TYPE_PASS) == ActionType.TYPE_PASS && cardList.length == 1 && cardList[0] == 1 && MJModel.isMyPlayer(seatid)) {
            if (MJModel.needTipWhenPass == 1) {
                var checkLayer = new PassWarn();
                checkLayer.setChoiceInfos(false, true);
                checkLayer.setName("checkLayer_selectLayer");
                checkLayer.setCallback(function () {
                    sendOperateCard(type, card);
                    self.room_Action_video.setOperator(-1);
                    self.room_Action_video.removeChildByName("checkLayer_selectLayer");
                });
                this.room_Action_video.addChild(checkLayer, 10000);
                return;
            }
        }

        if ((OpType & ActionType.TYPE_PASS) != ActionType.TYPE_PASS && ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI || (OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI)) {
            var needRemoveOutCard = false;
            var needOpenOutCard = false;
            var t = 0;
            var card1 = 0;
            var card2 = 0;
            this._curChiPai = card;
            if (parseInt(card / 16) == 3) {
                var fengArray = [52, 49, 50, 51];
                if ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                    card1 = fengArray[(card + 1) % 4];
                    card2 = fengArray[(card + 2) % 4];
                    needRemoveOutCard = true;
                    needOpenOutCard = true;
                    t = PengType.Chi_L;
                }
                else if ((OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                    card1 = fengArray[(card + 1) % 4];
                    card2 = fengArray[(card + 3) % 4];
                    needRemoveOutCard = true;
                    needOpenOutCard = true;
                    t = PengType.Chi_M;
                }
                else if ((OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                    card1 = fengArray[(card + 2) % 4];
                    card2 = fengArray[(card + 3) % 4];
                    needRemoveOutCard = true;
                    needOpenOutCard = true;
                    t = PengType.Chi_R;
                }
            } else {
                if ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                    card1 = card + 1;
                    card2 = card + 2;
                    needRemoveOutCard = true;
                    needOpenOutCard = true;
                    t = PengType.Chi_L;
                }
                else if ((OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                    card1 = card - 1;
                    card2 = card + 1;
                    needRemoveOutCard = true;
                    needOpenOutCard = true;
                    t = PengType.Chi_M;
                }
                else if ((OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                    card1 = card - 1;
                    card2 = card - 2;
                    needRemoveOutCard = true;
                    needOpenOutCard = true;
                    t = PengType.Chi_R;
                }
            }
            cc.log("LX======OpType:" + OpType + "====card:" + card + "===t:" + t);
            this.room_Card.addPengCard(pos, t, card, out_pos, OpType);
            this.room_Card.removeHandCard(pos, card1, 1);
            this.room_Card.removeHandCard(pos, card2, 1);

            if (needRemoveOutCard) {
                MJModel.cur_seat = seatid;
                this.room_Card.removeOutCard(out_pos, card, canDelay);
                this.room_Card.setCurCardTip(false);
            }

            if (needOpenOutCard) {
                this.room_Info.showDirectionTip(pos);
                if (MJModel.isMyPlayer(seatid)) {
                    this.myselfOpenOutCard();
                }
            }

            if (MJModel.isMyPlayer(seatid)) {
                if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
                MJModel.isAutoOutCard = false;
                this.room_Card.setAutoOutCard(false);
            }

            var player = MJModel.players[seatid];
            if (player && canDelay) {
                var effect = "chi";
                this.handler_op_sound(pos, player.sex, OpType, OpType2, effect);
                this.handler_op_effect(pos, out_pos, player.sex, OpType, OpType2, effect);
            }
            this.room_Card.reflashHandCard(pos);
            return;
        }
        this._super(data, canDelay);
    },

    _showHandcardFlag: function (isEndShow) {
        if (MJModel.isOnVideo) {
            for (var j = 0; j < 4; j++) {
                var allcards = this.room_Card.hand_card[j];
                if (allcards) {
                    for (var i = 0; i < allcards.length; i++) {
                        var card = allcards[i];
                        this._checkAddCardFlag(card);
                    }
                }
            }
            return;
        }
        var allcards = this.room_Card.hand_card[0];
        if (allcards) {
            for (var i = 0; i < allcards.length; i++) {
                var card = allcards[i];
                this._checkAddCardFlag(card);
            }
        }
    },

    _checkAddCardFlag: function (card) {
        try {
            if (card.type == CardType.Card_Outing)return;
            if (card.type == CardType.Card_Peng)return;
            if (card.getValue() == 0)return;
            var flag_str = "";
            if (card.getValue() == this._curLaizi)flag_str = "yichunmj/lai_flag2.png";    //只有跳跳麻将有癞子
            if (flag_str != "") {
                var p = card.getChildByName("sprite");
                p.removeChildByName("laizi_flag");
                var flag = null;

                flag = new cc.Sprite(getResPath(flag_str));

                var m_size = p.getContentSize();
                if (flag) {
                    flag.setPosition(cc.p(0, m_size.height));
                    flag.setAnchorPoint(cc.p(0, 1));
                    flag.setName("laizi_flag");
                    p.addChild(flag);
                    this._flagDirection(card.pos, flag, m_size);
                    flag.setScale(0.5);
                    if (card.pos == 0 && card.type != CardType.Card_Out)flag.setScale(1);
                }
                return;
            }
        } catch (e) {
            Log(this, e);
        }
    },

    //每个方向角标对应
    _flagDirection: function (pos, flag, m_size) {
        if (MJModel.mj_table_view == "2d") {
            if (MJModel.mj_paiban == "vertical" || pos == 2) {
                return;
            }
        }
        if (pos == 1) {
            flag.setPosition(cc.p(0, 15));
            flag.setRotation(-90);
        } else if (pos == 2) {
            flag.setPosition(cc.p(m_size.width, 5));
            flag.setRotation(180);
        } else if (pos == 3) {
            flag.setPosition(cc.p(m_size.width, m_size.height));
            flag.setRotation(90);
        }
    },

    _handler_server_laizi_bc: function (canDelay) {
        var self = this;
        if(this._pkg_id == PackgName.TTMJ) {
            this._curLaizi = HONGZHONG;
        }

        if (canDelay == false) {
            this._showHandcardFlag(false);
            this.room_Card.reflashHandCard(0, true);
            this.room_Card.reflashHandCard(1, true);
            this.room_Card.reflashHandCard(2, true);
            this.room_Card.reflashHandCard(3, true);
            return;
        }
        MJModel.isEnterWait = true;

        var move_end = cc.callFunc(function () {
            self._showHandcardFlag(false);

            var mo_card = null;
            if (self.room_Card.isDuoPai(0)) {
                mo_card = self.room_Card.hand_card[0][self.room_Card.hand_card[0].length - 1];
                self.room_Card.hand_card[0].splice(self.room_Card.hand_card[0].length - 1, 1);
            }

            var allPreCars = [];
            var allLaiZi = [];
            var dd = 0;

            for (var i = self.room_Card.hand_card[0].length - 1; i >= 0; i--) {
                var card = self.room_Card.hand_card[0][i];
                if (card.getValue() == this._curLaizi) {
                    allLaiZi.push(card);
                } else {
                    if (allLaiZi.length > 0) {
                        break;
                    }
                    allPreCars.push(card);
                }
            }

            if (allLaiZi.length > 0 && allPreCars.length > 0) {
                var allDelay = 0;
                for (var i = 0; i < allLaiZi.length; i++) {
                    var card = allLaiZi[i];
                    var begin_pos = card.getPosition();
                    var end_pos = MJConfig.getHandCardPos(0, self.room_Card.hand_card[0].length - 1 - i, self.room_Card.hand_card[0].length, self.room_Card.isDuoPai(0));
                    var allL = Math.abs(end_pos.x - begin_pos.x);

                    //if (MJModel.outCardEffect_style == 0 || true) {
                    var time = allL / 1000;
                    if (time < 0.17) time = 0.17;
                    if (time > 0.3) time = 0.3;
                    card.runAction(cc.sequence(cc.spawn(cc.rotateTo(0.1, 15), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + 100))), cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y + 100)).easing(cc.easeSineOut()), cc.spawn(cc.rotateTo(0.1, 0), cc.moveTo(0.17, end_pos))));
                    allDelay += 1;
                }
                for (var i = 0; i < allPreCars.length; i++) {
                    var card = allPreCars[i];
                    //card.runAction(cc.sequence(cc.moveBy(0.3, cc.p(83, 0)), cc.delayTime(1 - 0.3)).repeat(allLaiZi.length));
                    card.runAction(cc.moveBy(0.3, cc.p(83 * allLaiZi.length, 0)));
                }

                var callback = cc.callFunc(function () {
                    MJModel.isEnterWait = false;
                    self.room_Card.reflashHandCard(0, true);
                    if (mo_card) {
                        mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                        self.room_Card.hand_card[0].push(mo_card);
                    }
                });
                self.runAction(cc.sequence(cc.delayTime(0.5), callback));
            } else {
                MJModel.isEnterWait = false;
                self.room_Card.reflashHandCard(0, true);
                if (mo_card) {
                    mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                    self.room_Card.hand_card[0].push(mo_card);
                }
            }
        });
        this.runAction(cc.sequence(cc.delayTime(1), move_end));
    },

    //天门出牌跟有操作的通知合在一个接口里
    _handler_server_operate_notify_bc: function (data, canDelay) {
        var ackOpNotify = parsePacket("proto.game.AckOpNotify", data);
        var seatid = ackOpNotify.ChairID;
        var operat = ackOpNotify.OpType;
        var card = ackOpNotify.Card;

        var packet = createPacket("proto.game.AckUserOutCard");
        packet.ChairID = seatid;
        packet.Card = card;
        var sendData = packet.encode64();
        this.handler_server_out_card_bc(sendData, canDelay);

        if (MJModel.seatid != -1) {
            ackOpNotify.ChairID = MJModel.seatid;
            this.handler_server_operate_notify_bc(ackOpNotify.encode64(), canDelay);
        }
    },

    handler_server_out_card_bc: function (data, canDelay) {
        this._super(data, canDelay);
        var userOutCard = parsePacket("proto.game.AckUserOutCard", data);
        var seatId = userOutCard.ChairID;

        if (MJModel.isMyPlayer(seatId)) {
            this._curChiPai = 255;
        }

        if (MJModel.isMyPlayer(seatId)) {
            var selectLayer = MJModel.mj_table.getChildByName("tingpai_layer");

            if (selectLayer) {
                return;
            }

            var can_show_listen_info = true;
            for (var j = 0; j < MJModel.final_listen_info.length; j++) {
                if (MJModel.final_listen_info[j].Card == 255) {
                    can_show_listen_info = false;
                    break;
                }
            }

            if (can_show_listen_info) {
                if (MJModel.final_listen_info.length > 0) {
                    MJModel.mj_listenLayer_autoshow = false;
                    MJModel.mj_listenLayer_need_autoshow = true;
                    selectLayer = new TingPaiLayer();
                    selectLayer.show2(MJModel.final_listen_info);
                    selectLayer.setName("tingpai_layer");
                    MJModel.mj_table.addChild(selectLayer, 100);//一定要在MJAction下边
                }
            } else {
                PlatformHelper.showToast("见字胡不显示听牌张");
            }

        }
    },

    showNiaoPaiEffect:function(chengduGameEnd) {
        var niaocards = chengduGameEnd.niaocards;
        var zhongniao = chengduGameEnd.zhongniao;
        var size = cc.director.getWinSize();
        var by = size.height / 2;
        var dx = 50;
        var bx = size.width / 2 - 100;
        var self = this;
        var zhongniaoPos = 0;
        var zhongniaoCards = [];
        for(var j = 0; j < zhongniao.length; j++) {
            var niaoCards = zhongniao[j].card;
            for(var k = 0; k < niaoCards.length; k++) {
                zhongniaoPos = MJModel.getPosBySeatid(j);
                zhongniaoCards.push(niaoCards[k]);
            }
        }
        var zhongniaoNums = 0;
        for (var i = 0; i < niaocards.length; i++) {
            (function (i) {
                var v = niaocards[i];
                var card = new MJCard();
                card.setValue(v, 0, CardType.Card_Hand, 0);
                card.setPosition(MJConfig.getNiaoPaiPos(i, niaocards.length));
                self.room_Card.addChild(card, 1000 - i);
                if(zhongniaoCards.length) {
                    if(zhongniaoCards.indexOf(v) != -1) {
                        card.runAction(cc.sequence(cc.delayTime(0.5), cc.moveTo(0.3, MJConfig.getZhongNiaoPos(zhongniaoNums, zhongniaoCards.length, zhongniaoPos)), cc.delayTime(0.5), cc.removeSelf()));
                        zhongniaoNums ++;
                    } else {
                        card.runAction(cc.sequence(cc.delayTime(1.3), cc.removeSelf()));
                    }
                } else {
                    card.runAction(cc.sequence(cc.delayTime(1.3), cc.removeSelf()));
                }
            })(i);
        }
    },

    handler_server_game_end_bc: function (chengduGameEnd, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            var ackGameEnd = chengduGameEnd.gameend;
            //this._super(ackGameEnd, canDelay);
            var self = this;
            this.room_Card.setAutoOutCard(false);
            this.room_Card.hideOutCardBtn();
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);
            this.room_Info.stopTime();

            var callback0 = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var callback2 = cc.callFunc(function () {
                if (state == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                } else {
                    if(self._pkg_id == PackgName.TTMJ) {
                        self.showNiaoPaiEffect(chengduGameEnd);
                    }
                }
            });

            var callback4 = cc.callFunc(function () {
                self.room_Tip.reset();
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var callback5 = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var callback3 = cc.callFunc(function () {
                self.room_Action.setReady2Visible(false);
                var result = new MJResult_YiChun();
                result.updateContentView(chengduGameEnd);
                result.setName("reset_remove");
                self.addChild(result, 100000);

                return;
            });

            if (MJModel.isOnVideo) {
                if (canDelay) {
                    this.runAction(cc.sequence(callback4, cc.delayTime(1), callback5, cc.delayTime(2), callback3));
                } else {
                    this.runAction(cc.sequence(callback5, cc.delayTime(2), callback3));
                }
                return;
            }

            this.runAction(cc.sequence(cc.delayTime(0), callback0, cc.delayTime(0), callback4, cc.delayTime(1), callback5, cc.delayTime(0), callback2, cc.delayTime(1.5), callback3));
        } catch (e) {
            ERROR(this, e);
        }
    },

    handler_out_card_sound: function (sex, card) {
        if (MJModel.fangyan == "fangyan1") {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("yichunmj/sound/chupai/%1_%2.mp3"), sex == SEX_ID.SEX_MAN ? "male" : "female", Utils.toHex2(card)));
        } else {
            this._super(sex, card);
        }
    },

    _clearAllFag: function (state) {
        if (state == undefined)state = "all";
        if (state == "all" || state == "piao") {
            while (this.getChildByName("piao_tip")) {
                this.removeChildByName("piao_tip");
            }
        }
        if (state == "all" || state == "piao_layer") {
            this.removeChildByName("piao_layer");
        }
    },
    _handler_start_piao: function (data, canDelay) {
        //this.resetGame(true);
        MJModel.roomState = 1;
        this.resetGame(false);
        JsUtils.postNotifi("notify_game_check_end");//为了刷新局数 或者  开始倒计时
        cc.eventManager.dispatchCustomEvent("hide_copy_room");
        if (this.room_Action.actions["yaoqing"]) {
            this.room_Action.actions["yaoqing"].setVisible(false);
        }
        if (this.room_Action.actions["copyshare"]) {
            this.room_Action.actions["copyshare"].setVisible(false);
        }
        if (this.pre_scene) {
            this.pre_scene.removeFromParent(true);
            this.pre_scene = null;
        }
        this.room_Info.showTime(1);
        if (canDelay) {
            var jpacket = parsePacket("proto.game.yichunmj.AckStartPiao", data);
            this._show_piao_layer(jpacket.userhuo, jpacket.userpiao);
        }
    },
    _handler_piao_result: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.yichunmj.AckBroadPiao", data);
        var seatid = jpacket.chairid;
        var pos = MJModel.getPosBySeatid(seatid);
        var userhuo = jpacket.userhuo;
        var userpiao = jpacket.userpiao;
        if(MJModel.isMyPlayer(seatid) && this._pkg_id != PackgName.TTMJ) {
            setItem("huo_num", userhuo);
            setItem("piao_num", userpiao);
        }
        var player = this.players[pos];
        player.setPiaoNum(userhuo, userpiao);
    },
    _show_piao_layer: function (userhuo, userpiao) {
        Log(this,"userhuo:" + userhuo + "===userpiao:" + userpiao);

        this.removeChildByName("piao_layer");
        var layer = new PiaoLayer();
        layer.initPiao(userhuo, userpiao);
        layer.setName("piao_layer");
        this.addChild(layer, 100);
    },
    _handler_cp_banker:function(data, canDelay){
        var jpacket = parsePacket("proto.game.yichunmj.AckGenZhuang", data);
        var scores = jpacket.score;
        if(canDelay) {
            this.room_Tip.showSimpleEffect(0, 0, 0, "genzhuang");
        }
        this.handler_gang_scores(scores, 0, 0, canDelay);
    },
    timeEnd: function (dt) {
        if (MJModel.isEnd)return;
        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    },
    isRecordShow:false,
    _handler_game_record: function (data, canDelay) {
        //-----新总结算界面
        cc.log("------big End");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var pkgId = this._pkg_id;
        var gameType = "";
        var gameName = "";
        if(pkgId == PackgName.WZMJ) {
            gameName = "万载麻将";
        } else if(pkgId == PackgName.TTMJ) {
            gameName = "宜春红中";
        } else if(pkgId == PackgName.YFMJ) {
            gameName = "宜丰麻将";
        } else {
            gameName = "宜春麻将";
        }
        var player_num = "";
        if(MJModel.mj_roomType == 1) {
            player_num = "3人";
        } else if(MJModel.mj_roomType == 2) {
            player_num = "2人";
        } else {
            player_num = "4人";
        }

        gameType = gameName + player_num;

        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        cc.director.getRunningScene().addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = time;
        if(!MJModel.isOnVideo) {
            startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);
        }

        var roomId = "房间号:" + MJModel.roomCode;
        gameType += " · " + MJModel.base_money + "分底";

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        //var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;

        var max_score = 0;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            if (recoreInfo.totalscore > max_score) {
                max_score = recoreInfo.totalscore;
            }
        }

        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            //var playerRecord = totalRecord.player_records[i];
            var player = MJModel.players[i];
            var arrStr = ["坐庄次数", "胡牌次数", "点炮次数", "超时次数"];
            //次数
            var arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.Ex1, recoreInfo.outtime_num];

            if (player && player.uid != -1 && player.uid != 0) {
                addX = 39 + (i * 302);
                if (!MJModel.isOnVideo && MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var isWin = false;
                if (max_score > 0 && recoreInfo.totalscore == max_score) {
                    isWin = true;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, isWin, _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner, recoreInfo.dissState);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }

            if (recoreInfo.totalscore != 0) {
                has_result = true;
            }

        }
        bigResult.refresh(PlayerNumber);
        this.release();
    },
});

var HuoArray = [
    "不上火",
    "上火"
]

var PiaoArray = [
    "不漂",
    "漂1分",
    "漂2分",
    "漂3分",
]

var MaiArray = [
    "不买",
    "买",
]

var PiaoType = {
    huo: 1,
    piao:2,
    mai:3,
}

var PiaoLayer = cc.Layer.extend({
    _isSelectTongYon: false,
    _recordHuo:0,
    _recordPiao:0,
    _gap: 26,
    _ckboxs:[],
    _maiboxs:[],
    _piaobtns:[],
    ctor: function () {
        this._super();
    },
    initPiao: function (userhuo, userpiao) {
        this._recordHuo = userhuo;
        this._recordPiao = userpiao;
        var huo_num = getItem("huo_num");
        if (huo_num)   MJModel.mj_table.mj_huo_num = huo_num;
        var piao_num = getItem("piao_num");
        if (piao_num)   MJModel.mj_table.mj_piao_num = piao_num;

        var self = this;
        var size = cc.director.getWinSize();
        if(MJModel.mj_table._pkg_id != PackgName.TTMJ) {
            var bg = new cc.Sprite(getResPath("yichunmj/piao/selectBg.png"));
            bg.setName("selectBg");
            bg.setPosition(cc.p(size.width / 2, size.height / 2));
            this.addChild(bg, 100);
            var dx = parseInt((bg.getContentSize().width - 40) / 4);

            this._maiboxs = [];
            if (this._recordHuo != null) {
                if (this._recordHuo <= 0) {
                    this._recordHuo = MJModel.mj_table.mj_huo_num;
                    for (var i = 0; i < 2; i++) {
                        var huoNum = i;
                        var layout = null;
                        if (MJModel.mj_table._pkg_id == PackgName.YCMJ || MJModel.mj_table._pkg_id == PackgName.YFMJ) {
                            layout = this._createCheckBoxItem(huoNum, PiaoType.mai, (huoNum == this._recordHuo) ? true : false, true); //默认选择不买
                        } else {
                            layout = this._createCheckBoxItem(huoNum, PiaoType.huo, (huoNum == this._recordHuo) ? true : false, true); //默认选择不火
                        }
                        layout.setPosition(cc.p(20 + dx * 2 * i, 300));
                        bg.addChild(layout);
                        this._maiboxs.push(layout);
                    }
                } else {
                    for (var i = 0; i < 2; i++) {
                        var huoNum = i;
                        var layout = null;
                        if (MJModel.mj_table._pkg_id == PackgName.YCMJ || MJModel.mj_table._pkg_id == PackgName.YFMJ) {
                            layout = this._createCheckBoxItem(huoNum, PiaoType.mai, (huoNum == this._recordHuo) ? true : false, (huoNum == 1) ? true : false); //默认选择不买
                        } else {
                            layout = this._createCheckBoxItem(huoNum, PiaoType.huo, (huoNum == this._recordHuo) ? true : false, (huoNum == 1) ? true : false); //默认选择不买
                        }
                        layout.setPosition(cc.p(20 + dx * 2 * i, 300));
                        bg.addChild(layout);
                        this._maiboxs.push(layout);
                    }
                }
            } else {
                this._recordHuo = 0;
            }

            this._ckboxs = [];
            var piaoTypeNum = 3;
            if (MJModel.mj_table._pkg_id == PackgName.YCMJ) {
                piaoTypeNum = 4;
            }
            if (piaoTypeNum == 3) {
                dx += 80;
            }
            if (this._recordPiao != null) {
                if (this._recordPiao <= 0) {
                    this._recordPiao = MJModel.mj_table.mj_piao_num;
                    for (var i = 0; i < piaoTypeNum; i++) {
                        var piaoNum = i;
                        var layout = this._createCheckBoxItem(piaoNum, PiaoType.piao, (piaoNum == this._recordPiao) ? true : false, true); //默认选择不飘
                        if (userhuo == null) {
                            layout.setPosition(cc.p(20 + dx * i, 220));
                        } else {
                            layout.setPosition(cc.p(20 + dx * i, 180));
                        }
                        bg.addChild(layout);
                        this._ckboxs.push(layout);
                    }
                } else {
                    for (var i = 0; i < piaoTypeNum; i++) {
                        var piaoNum = i;
                        var layout = this._createCheckBoxItem(piaoNum, PiaoType.piao, (piaoNum == this._recordPiao) ? true : false, (piaoNum == this._recordPiao) ? true : false); //默认选择不飘
                        if (userhuo == null) {
                            layout.setPosition(cc.p(20 + dx * i, 220));
                        } else {
                            layout.setPosition(cc.p(20 + dx * i, 180));
                        }
                        bg.addChild(layout);
                        this._ckboxs.push(layout);
                    }
                }
            } else {
                this._recordPiao = 0;
            }

            var submitBtn = new ccui.Button(getResPath("yichunmj/piao/submit_0.png"), getResPath("yichunmj/piao/submit_1.png"));
            submitBtn.setPosition(cc.p(bg.getContentSize().width / 2, submitBtn.getContentSize().height - 15));
            submitBtn.addClickEventListener(function (sender, evt) {
                self.setVisible(false);
                cc.log("LX======_recordHuo:" + self._recordHuo + "======_recordPiao:" + self._recordPiao);
                sendPaoNums(self._recordHuo, self._recordPiao);
            });
            bg.addChild(submitBtn);
        } else {
            this._piaobtns = [];
            var btn_piao_0 = new ccui.Button(getResPath("yichunmj/piao/piaoNo_normal.png"), getResPath("yichunmj/piao/piaoNo_pressed.png"), "");
            btn_piao_0.setPosition(cc.p(size.width / 2 - 260, size.height / 2 - 100));
            this._piaobtns.push(btn_piao_0);
            this.addChild(btn_piao_0);

            var btn_piao_1 = new ccui.Button(getResPath("yichunmj/piao/piao1_1.png"), getResPath("yichunmj/piao/piao1_2.png"), "");
            btn_piao_1.setPosition(cc.p(size.width / 2, size.height / 2 - 100));
            this._piaobtns.push(btn_piao_1);
            this.addChild(btn_piao_1);

            var btn_piao_2 = new ccui.Button(getResPath("yichunmj/piao/piao2_normal.png"), getResPath("yichunmj/piao/piao2_pressed.png"), "");
            btn_piao_2.setPosition(cc.p(size.width / 2 + 260, size.height / 2 - 100));
            this._piaobtns.push(btn_piao_2);
            this.addChild(btn_piao_2);

            for(var i = 0; i < this._piaobtns.length; i++) {
                var btn = this._piaobtns[i];
                btn.setTag(i);
                if (btn) {
                    btn.addClickEventListener(function (sender, evt) {
                        self.btnsCallBack(sender);
                    });
                }
            }
        }
    },

    btnsCallBack:function(sender) {
        var name = sender.getName();
        var tag = sender.getTag();
        cc.log("LX====TAG:" + tag);
        sendPaoNums(0, tag);
        for(var i in this._piaobtns) {
            var btn = this._piaobtns[i];
            btn.setVisible(false);
        }
    },

    _createCheckBoxItem: function (num, type, ison, cantouch) {
        var percent = 1;
        var name = "";
        switch (type){
            case PiaoType.huo:
                name = HuoArray[num];
                break;
            case PiaoType.piao:
                name = PiaoArray[num];
                break;
            case PiaoType.mai:
                name = MaiArray[num];
                break;
            default :
                break;
        }
        var self = this;

        var layout = new ccui.Layout();
        layout.setAnchorPoint(0, 0.5);
        layout.setSwallowTouches(true);
        layout.setName(name);
        layout.setTag(num);
        layout.addClickEventListener(function (btn) {
            self._layoutCallbck(btn);
        });
        layout.setScale(percent);

        var bg = new cc.Sprite(getResPath("yichunmj/piao/ok_bg.png"));
        bg.setScale(0.79);
        bg.setPosition(cc.p(14 + this._gap, 40));
        layout.addChild(bg);

        var ok = new cc.Sprite(getResPath("yichunmj/piao/ok.png"));
        var icon_ok = new cc.Sprite(getResPath("yichunmj/piao/icon_ok.png"));
        icon_ok.setPosition(cc.p(ok.getContentSize().width / 2, ok.getContentSize().height / 2));
        ok.addChild(icon_ok);
        ok.setName("ok");
        ok.setPosition(cc.p(14 + this._gap, 40));
        layout.addChild(ok);
        var no = new cc.Sprite(getResPath("yichunmj/piao/no.png"));
        no.setName("no");
        no.setVisible(false);
        no.setPosition(cc.p(14 + this._gap, 40));
        layout.addChild(no);
        if (ison) {
            ok.setVisible(true);
            layout.setTouchEnabled(false);
        } else {
            ok.setVisible(false);
            layout.setTouchEnabled(true);
            if(!cantouch) {
                no.setVisible(true);
                layout.setTouchEnabled(false);
            }
        }

        var label = new cc.LabelTTF(name, "Thonburi", 24);
        label.setAnchorPoint(cc.p(0.0, 0.5));
        label.setColor(cc.color(0, 22, 0));
        label.setPosition(cc.p(44 + this._gap, 40));
        layout.addChild(label);
        layout.setContentSize(cc.size(label.getPositionX() + label.getContentSize().width,80));

        return layout;
    },
    _layoutCallbck: function (obj) {
        var selectName = obj.getName();

        if(HuoArray.indexOf(selectName) != -1) {
            for (var i = 0; i < this._maiboxs.length; i++) {
                var item = this._maiboxs[i];
                if (item.getName() == selectName) {
                    this._recordHuo = obj.getTag();
                    this._setCheckBoxOn(item.getName(), true);
                } else {
                    this._setCheckBoxOn(item.getName(), false);
                }
            }
        }

        if(PiaoArray.indexOf(selectName) != -1) {
            for (var i = 0; i < this._ckboxs.length; i++) {
                var item = this._ckboxs[i];
                if (item.getName() == selectName) {
                    this._recordPiao = obj.getTag();
                    this._setCheckBoxOn(item.getName(), true);
                } else {
                    this._setCheckBoxOn(item.getName(), false);
                }
            }
        }

        if(MaiArray.indexOf(selectName) != -1) {
            for (var i = 0; i < this._maiboxs.length; i++) {
                var item = this._maiboxs[i];
                if (item.getName() == selectName) {
                    this._recordHuo = obj.getTag();
                    this._setCheckBoxOn(item.getName(), true);
                } else {
                    this._setCheckBoxOn(item.getName(), false);
                }
            }
        }
    },
    _setCheckBoxOn: function (name, ison) {
        var layout = this.getChildByName("selectBg").getChildByName(name);
        if (layout) {
            layout.getChildByName("ok").setVisible(ison);
            layout.setTouchEnabled(!ison);
        }
    },
});

var MJResult_YiChun = MJCommonResult.extend({
    _recordHuo:[],
    _recordPiao:[],
    _sort_fun: function (a, b) {
        return a.nums - b.nums;
    },
    updateContentView: function (ackGameEndJS) {
        this._recordHuo = [];
        this._recordPiao = [];
        this.ackGameEnd = ackGameEndJS.gameend;
        this.shanxiGameEnd = ackGameEndJS;
        var userhuo = ackGameEndJS.userhuo;
        var userpiao = ackGameEndJS.userpiao;
        var niaocards = ackGameEndJS.niaocards;
        var zhongniao = ackGameEndJS.zhongniao;

        for(var i = 0; i < userhuo.length; i ++) {
            this._recordHuo.push(userhuo[i]);
        }
        for(var i = 0; i < userpiao.length; i ++) {
            this._recordPiao.push(userpiao[i]);
        }

        //输赢标志
        var seatId = MJModel.seatid;
        var score = this.ackGameEnd.Score[seatId];
        var effectName = "lose";
        if (score > 0) {
            effectName = "win";
        }
        this._win_effect(effectName);

        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);

        var itemHeight = 120;

        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;

            var countY = m;

            if (MJModel.mj_roomType == 1) {
                if (pos == 2) {
                    continue;
                }
            }

            if (MJModel.mj_roomType == 2) {
                if (pos == 1 || pos == 3) {
                    continue;
                }

                if (pos == 0) {
                    countY = 1;
                } else if (pos == 2) {
                    countY = 2;
                }
            }

            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 495 - count * itemHeight;
            var startX = 40;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX + 60, startY + 55));
            this.bgSpr.addChild(headLayer, 10);

            var hutypeLayer = this.createHutypeLayer(seatid);
            this.bgSpr.addChild(hutypeLayer, 10);
            hutypeLayer.setPosition(cc.p(startX + 230, startY + 70));

            if(MJModel.mj_table._pkg_id == PackgName.YFMJ || MJModel.mj_table._pkg_id == PackgName.YCMJ) {
                //杠分 胡分
                var ganghuLayer = this.createGangHuLayer(seatid);
                this.bgSpr.addChild(ganghuLayer, 10);
                ganghuLayer.setPosition(cc.p(startX + 970, startY + 40));
            }

            //下排牌
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX + 0, startY));
            this.bgSpr.addChild(handCardLayer);

            // this.createSpecialHuTip(startX + 785, startY + 40, seatid);
            this.createSpecialHuTip(startX + 770, startY + 40, seatid);

            if(zhongniao.length) {
                var zhongniaoLayer = this.createZhongniao(zhongniao, seatid);
                zhongniaoLayer.setPosition(cc.p(startX + 970, startY + 40));
                this.bgSpr.addChild(zhongniaoLayer);
            }

            // 输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX + 1100, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            count++;
        }

        //鸟牌
        if(niaocards.length) {
            var niaocardsLayer = this.createNiaopai(niaocards);
            niaocardsLayer.setPosition(cc.p(startX + 50, 50));
            this.bgSpr.addChild(niaocardsLayer);
        }
    },

    createHutypeLayer:function(seatid) {
        var layer = new cc.Layer();
        var x = 0;
        var y = 0;

        var addFanType = [];
        var addfan = this.ackGameEnd.faninfo[seatid].addfan;
        for (var i = 0; i < addfan.length; i++) {
            var add_fan = addfan[i];
            var add_type = add_fan.AddType;
            var add_value = add_fan.AddNum;
            if (AddFanTypeArray.indexOf(add_type) != -1) {
                var hutypeStr = "";
                if(MJModel.mj_table._pkg_id == PackgName.WZMJ) {
                    hutypeStr = WzHuTypeArray[AddFanTypeArray.indexOf(add_type)];
                } else if(MJModel.mj_table._pkg_id == PackgName.TTMJ) {
                    hutypeStr = TtHuTypeArray[AddFanTypeArray.indexOf(add_type)];
                } else if(MJModel.mj_table._pkg_id == PackgName.YFMJ) {
                    hutypeStr = YfHuTypeArray[AddFanTypeArray.indexOf(add_type)];
                } else {
                    hutypeStr = YcHuTypeArray[AddFanTypeArray.indexOf(add_type)];
                }
                addFanType.push(hutypeStr);
            }
        }

        for (var i = 0; i < addFanType.length; i++) {
            var fanType = new cc.LabelTTF(addFanType[i], "Arial", 20);
            fanType.setColor(this.leftColor);
            fanType.setAnchorPoint(cc.p(0, 0));
            fanType.setPosition(cc.p(x, y + 10));
            layer.addChild(fanType);
            x += fanType.getContentSize().width + 10;
        }
        return layer;
    },

    createZhongniao:function(zhongniao, seatid) {
        var layer = new cc.Layer();
        var niaocards = zhongniao[seatid].card;
        var zhongniao_flag = new cc.Sprite(getResPath("yichunmj/result-small/result_small_zhongniao.png"));
        zhongniao_flag.setPosition(cc.p(0, 50));
        if(niaocards.length) {
            zhongniao_flag.setVisible(true);
        } else {
            zhongniao_flag.setVisible(false);
        }
        layer.addChild(zhongniao_flag);

        for(var i = 0; i < niaocards.length; i++) {
            var v = niaocards[i];
            var card = new MJCard();
            card.setValue(v, 0, CardType.Card_Hand, 0);
            card.setScale(0.4);
            card.setPosition(this.getNiaopaiPos(i, niaocards.length));
            layer.addChild(card);
        }
        return layer;
    },

    getNiaopaiPos:function(index, nums) {
        var p = cc.p(0, -10);
        p.x += (index > (nums / 2 - 1)) ? ((index - nums / 2) * 40 + 20) : ((index - (nums / 2 - 1)) * 40 - 20);
        return p;
    },

    createNiaopai:function(niaocards) {
        var layer = new cc.Layer();
        var zhongniao_text = new cc.LabelTTF("鸟牌：", "Arial", 20);
        zhongniao_text.setPosition(cc.p(0, 0));
        if(niaocards.length) {
            zhongniao_text.setVisible(true);
        } else {
            zhongniao_text.setVisible(false);
        }
        layer.addChild(zhongniao_text);

        for(var i = 0; i < niaocards.length; i++) {
            var v = niaocards[i];
            var card = new MJCard();
            card.setValue(v, 0, CardType.Card_Hand, 0);
            card.setScale(0.4);
            card.setPosition(cc.p(50 + 40 * i, 0));
            layer.addChild(card);
        }
        return layer;
    },

    createAvatar: function (pos) {
        var seatid = MJModel.getSeatidByPos(pos);
        var player = MJModel.players[seatid];
        var layer = new cc.Layer();

        var headPic = Utils.createCircleAvatar(player.avatar, "Avatars/user4_unlogin.png", "Avatars/user4_unlogin.png", cc.size(96, 96));
        layer.addChild(headPic);

        var framepath = getResPath("RoomMJ/result2/head_bg.png");
        var scale = 1;

        var headFrame = new cc.Sprite(framepath);
        headFrame.setAnchorPoint(cc.p(0.5, 0.5));
        headFrame.setScale(scale);
        headFrame.setPosition(cc.p(0, 0));
        layer.addChild(headFrame, -1);

        var headSize = cc.size(96, 96);

        //是否是庄家
        if (MJModel.banker_seatid == seatid) {
            var bankerPic = new cc.Sprite(getResPath("RoomMJ/banker.png"));
            bankerPic.setAnchorPoint(cc.p(0.5, 0));
            bankerPic.setPosition(cc.p(-headSize.width / 2 + 5, 0));
            layer.addChild(bankerPic);
        }

        //位置
        var posPic = new cc.Sprite(__String.createWithFormat(getResPath("RoomMJ/result2/result_detail_pos_%1.png"), pos));
        posPic.setAnchorPoint(cc.p(0, 0));
        posPic.setPosition(cc.p(-headSize.width / 2 - 10, -headSize.height / 2 - 10));
        layer.addChild(posPic);

        //玩家名字
        var nameLabel = new cc.LabelTTF(Utils.parseName(6, player.name), "Arial", 24);
        nameLabel.setColor(this.leftColor);
        nameLabel.setAnchorPoint(cc.p(0, 0));
        nameLabel.setPosition(cc.p(60, -10));
        layer.addChild(nameLabel);

        var huoflagStr = "";
        if((MJModel.mj_table._pkg_id == PackgName.YCMJ || MJModel.mj_table._pkg_id == PackgName.YFMJ) && this._recordHuo.length > 0) {
            huoflagStr = getResPath("yichunmj/piao/flag_mai_" + this._recordHuo[seatid] + ".png");
        } else {
            huoflagStr = getResPath("yichunmj/piao/flag_huo_" + this._recordHuo[seatid] + ".png")
        }
        var huo_flag = new cc.Sprite(huoflagStr);
        huo_flag.setPosition(cc.p(headSize.width / 2, 30));
        huo_flag.setVisible(this._recordHuo[seatid] != -1);
        layer.addChild(huo_flag);

        var piaoflagStr = "";
        if(this._recordPiao.length > 0) {
            piaoflagStr = getResPath("yichunmj/piao/flag_ge_" + this._recordPiao[seatid] + ".png")
        }
        var piao_flag = new cc.Sprite(piaoflagStr);
        piao_flag.setPosition(cc.p(headSize.width / 2, -30));
        piao_flag.setVisible(this._recordPiao[seatid] != -1);
        layer.addChild(piao_flag);

        return layer;
    },

    createGangHuLayer: function (seatid) {
        var layer = new cc.Layer();
        var x = -66;
        var y = 0;
        var sxendInfo = this.shanxiGameEnd;

        //杠牌分
        var gangScore = this.ackGameEnd.EndGangInfo[seatid].TotalGangScore;
        var txt = "杠牌分:  +";
        if (gangScore < 0) {
            txt = "杠牌分:  ";
        }
        var gangfen = new cc.LabelTTF(txt + gangScore, "Arial", 24);
        gangfen.setColor(this.leftColor);
        gangfen.setAnchorPoint(cc.p(0, 0));
        gangfen.setPosition(cc.p(x, y + 26));
        layer.addChild(gangfen);

        //胡牌分
        var huScore = this.ackGameEnd.Score[seatid] - this.ackGameEnd.EndGangInfo[seatid].TotalGangScore;
        var txt = "胡牌分:  +";
        if (huScore < 0) {
            txt = "胡牌分:  ";
        }
        var hufen = new cc.LabelTTF(txt + huScore, "Arial", 24);
        hufen.setColor(this.leftColor);
        hufen.setAnchorPoint(cc.p(0, 0));
        hufen.setPosition(cc.p(x, y - 20));
        layer.addChild(hufen);


        return layer;
    },

    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var path = "";
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5抢杠胡 6被抢杠 7一炮多响
            switch (fanInfo.SpecialType) {
                case 1:
                    path = "yichunmj/result-detail/result_detail_zimo.png";
                    break;
                case 2:
                    path = "yichunmj/result-detail/result_detail_paohu.png";
                    break;
                case 3:
                    path = "yichunmj/result-detail/result_detail_dianpao.png";
                    break;
                case 4:
                    path = "yichunmj/result-detail/result_detail_beizimo.png";
                    break;
                case 5:
                    path = "yichunmj/result-detail/result_detail_qiangganghu.png";
                    break;
                case 6:
                    path = "yichunmj/result-detail/result_detail_beiqianggang.png";
                    break;
                case 7:
                    path = "yichunmj/result-detail/result_detail_dianpao.png";
                    break;
                case 8:
                    path = "yichunmj/result-detail/result_detail_hangkaihua.png";
                    break;
                default:
                    break;
            }
            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setPosition(cc.p(startX + 20, startY + 20));
                this.bgSpr.addChild(typeSprite);

            }
        }
    },
    getStringByType: function (stype) {
        var type = Number(stype);
        var str = "";
        switch (type) {
            case 2:
                str = "明杠";
                break;
            case 4:
                str = "明杠";
                break;
            case 8:
                str = "暗杠";
                break;
            case 16:
                str = "被明杠";
                break;
            case 32:
                str = "被明杠";
                break;
            case 64:
                str = "点杠";
                break;
            case 128:
                str = "被暗杠";
                break;
            default:
                break;
        }
        return str;
    },
});