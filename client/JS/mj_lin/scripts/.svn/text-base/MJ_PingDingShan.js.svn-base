/**
 * Created by pengzhifang on 2018/11/16.
 */

loadProtoFile("proto/pingdingshangameproto.proto");


getTimeByMin = function (t1, t2) {
    var date1 = new Date(t1);
    var day1 = date1.getDate();
    var hours1 = date1.getHours();
    var min1 = date1.getMinutes();

    var date2 = new Date(t2);
    var day2 = date2.getDate();
    var hours2 = date2.getHours();
    var min2 = date2.getMinutes();

    var day = (day2 == day1) ? 0 : 1;

    var mins = ((( day * 24) + hours2) - hours1) * 60 + min2 - min1;

    return mins;
};


createCircleAvatarBypng = function (url, defualtFile, clipfile, size) {
    try {
        savePath = url;
        var avatar = new cc.Sprite(savePath);
        if (avatar == null) {
            avatar = new cc.Sprite(defualtFile);
        }
        Utils.makeCircleSprite(avatar, savePath, clipfile, size);
        return avatar;

    } catch (e) {
        var avatar = new cc.Sprite(defualtFile);
        var s_izex = size.width / avatar.getContentSize().width;
        var s_izey = size.height / avatar.getContentSize().height;
        avatar.setScale(s_izex, s_izey);
        return avatar;
    }

};

var HuType = {
    HU_INVALID: 0,
    HU_ZIMO: 1,
    HU_PAOHU: 2,
    HU_HeiMo: 2,
    Hu_RuanMo: 1,
    HU_DIANPAO: 3,
    HU_BEIZIMO: 4,
    HU_QIANG_GANG: 5,
    HU_BEI_QIANG_GANG: 6,
    HU_YI_PAO_DUO_XIANG: 7,
    HU_GANG_SHANG_HUA: 8,
    HU_GANG_HOU_PAO: 9,
};
var AddFanType = {
    HY_FAN_TYPE_PINGHU: 17,		//   平胡
    HY_FAN_TYPE_ZIMO: 18,
    HY_FAN_TYPE_GANGSHANGHUA: 24,
    HY_FAN_TYPE_QIDUI: 36,
    HY_FAN_TYPE_SIHUERHU: 41,
    HY_FAN_TYPE_BAHUNERHU: 67,
    HY_FAN_TYPE_YINGPAO: 50,
    HY_FAN_TYPE_GANGPAO: 51,
    HY_FAN_TYPE_ZHUANGJIA: 44,

};

var AddFanTypeArray = [
    AddFanType.HY_FAN_TYPE_PINGHU,
    AddFanType.HY_FAN_TYPE_ZIMO,
    AddFanType.HY_FAN_TYPE_GANGSHANGHUA,
    AddFanType.HY_FAN_TYPE_QIDUI,
    AddFanType.HY_FAN_TYPE_SIHUERHU,
    AddFanType.HY_FAN_TYPE_BAHUNERHU,
    AddFanType.HY_FAN_TYPE_YINGPAO,
    AddFanType.HY_FAN_TYPE_GANGPAO,
    AddFanType.HY_FAN_TYPE_ZHUANGJIA,
];

var AddFanNameArray = [
    "平胡",
    "自摸",
    "杠上花",
    "七对",
    "四混儿胡",
    "八混儿胡",
    "赢跑",
    "杠跑",
    "庄家",
];

var selfCMD = {
    SERVER_START_PIAO: 5024,//开始选择飘
    CLIENT_MJ_CHOOSE_PIAO: 1108, //选择飘
    SERVER_BROAD_PIAO: 5022,//广播玩家选择的飘

    SERVER_ENSURE_JOKER: 5019,  //开始翻癞子
};

var MJPiao = cc.Layer.extend({
    oPiaoBtn1: null,
    oPiaoBtn2: null,
    oPiaoBtn3: null,
    oPiaoBtn4: null,
    oPiaoBtn5: null,
    oPiaoBtn6: null,
    oPiaoBtnNo: null,
    oPiaoBtnNo1: null,
    PiaoImage: null,
    PiaoImage1: null,
    ctor: function () {
        this._super();

        this.init();
    },

    init: function () {
        var size = cc.director.getWinSize();

        this.PiaoImage = new ccui.ImageView(getResPath("pingdingshanmj/action/pao_bg.png"));
        this.PiaoImage.setScale9Enabled(true);
        this.PiaoImage.setAnchorPoint(cc.p(0.5, 0.5));
        this.PiaoImage.setContentSize(cc.size(630, 120));
        this.PiaoImage.setPosition(cc.p(size.width / 2, size.height / 2 - 140));
        this.PiaoImage.setVisible(false);
        this.addChild(this.PiaoImage);

        this.oPiaoBtnNo = new ccui.Button(getResPath("pingdingshanmj/action/nopao1.png"), getResPath("pingdingshanmj/action/nopao_press.png"));
        this.oPiaoBtnNo.setPosition(cc.p(this.oPiaoBtnNo.getContentSize().width * 0.8 / 2, this.oPiaoBtnNo.getContentSize().height * 0.8 / 2));
        this.oPiaoBtnNo.setName(PiaoType.PIAO_NO);
        this.oPiaoBtnNo.setScale(0.8);
        this.PiaoImage.addChild(this.oPiaoBtnNo);

        this.oPiaoBtn1 = new ccui.Button(getResPath("pingdingshanmj/action/pao1.png"), getResPath("pingdingshanmj/action/pao1_press.png"));
        this.oPiaoBtn1.setPosition(cc.p(this.oPiaoBtnNo.getPositionX() + this.oPiaoBtnNo.getContentSize().width * 0.8 + 45, this.oPiaoBtn1.getContentSize().height * 0.8 / 2));
        this.oPiaoBtn1.setName(PiaoType.PIAO_1);
        this.oPiaoBtn1.setScale(0.8);
        this.PiaoImage.addChild(this.oPiaoBtn1);

        this.oPiaoBtn2 = new ccui.Button(getResPath("pingdingshanmj/action/pao2.png"), getResPath("pingdingshanmj/action/pao2_press.png"));
        this.oPiaoBtn2.setPosition(cc.p(this.oPiaoBtn1.getPositionX() + this.oPiaoBtn1.getContentSize().width * 0.8 + 45, this.oPiaoBtn1.getContentSize().height * 0.8 / 2));
        this.oPiaoBtn2.setName(PiaoType.PIAO_2);
        this.oPiaoBtn2.setScale(0.8);
        this.PiaoImage.addChild(this.oPiaoBtn2);

        this.oPiaoBtn3 = new ccui.Button(getResPath("pingdingshanmj/action/pao3.png"), getResPath("pingdingshanmj/action/pao3_press.png"));
        this.oPiaoBtn3.setPosition(cc.p(this.oPiaoBtn2.getPositionX() + this.oPiaoBtn2.getContentSize().width * 0.8 + 45, this.oPiaoBtn1.getContentSize().height * 0.8 / 2));
        this.oPiaoBtn3.setName(PiaoType.PIAO_3);
        this.oPiaoBtn3.setScale(0.8);
        this.PiaoImage.addChild(this.oPiaoBtn3);


        this.PiaoImage1 = new ccui.ImageView(getResPath("pingdingshanmj/action/pao_bg.png"));
        this.PiaoImage1.setScale9Enabled(true);
        this.PiaoImage1.setAnchorPoint(cc.p(0.5, 0.5));
        this.PiaoImage1.setContentSize(cc.size(630, 120));
        this.PiaoImage1.setPosition(cc.p(size.width / 2, size.height / 2 - 140 + this.PiaoImage.getContentSize().height + 30));
        this.PiaoImage1.setVisible(false);
        this.addChild(this.PiaoImage1);

        this.oPiaoBtnNo1 = new ccui.Button(getResPath("pingdingshanmj/action/nopao1.png"), getResPath("pingdingshanmj/action/nopao_press.png"));
        this.oPiaoBtnNo1.setPosition(cc.p(this.oPiaoBtnNo1.getContentSize().width * 0.8 / 2, this.oPiaoBtnNo1.getContentSize().height * 0.8 / 2));
        this.oPiaoBtnNo1.setName(PiaoType.PIAO_NO1);
        this.oPiaoBtnNo1.setScale(0.8);
        this.PiaoImage1.addChild(this.oPiaoBtnNo1);

        this.oPiaoBtn4 = new ccui.Button(getResPath("pingdingshanmj/action/pao1.png"), getResPath("pingdingshanmj/action/pao1_press.png"));
        this.oPiaoBtn4.setPosition(cc.p(this.oPiaoBtnNo1.getPositionX() + this.oPiaoBtnNo1.getContentSize().width * 0.8 + 45, this.oPiaoBtnNo1.getContentSize().height * 0.8 / 2));
        this.oPiaoBtn4.setName(PiaoType.PIAO_4);
        this.oPiaoBtn4.setScale(0.8);
        this.PiaoImage1.addChild(this.oPiaoBtn4);

        this.oPiaoBtn5 = new ccui.Button(getResPath("pingdingshanmj/action/pao2.png"), getResPath("pingdingshanmj/action/pao2_press.png"));
        this.oPiaoBtn5.setPosition(cc.p(this.oPiaoBtn4.getPositionX() + this.oPiaoBtn4.getContentSize().width * 0.8 + 45, this.oPiaoBtn4.getContentSize().height * 0.8 / 2));
        this.oPiaoBtn5.setName(PiaoType.PIAO_5);
        this.oPiaoBtn5.setScale(0.8);
        this.PiaoImage1.addChild(this.oPiaoBtn5);

        this.oPiaoBtn6 = new ccui.Button(getResPath("pingdingshanmj/action/pao3.png"), getResPath("pingdingshanmj/action/pao3_press.png"));
        this.oPiaoBtn6.setPosition(cc.p(this.oPiaoBtn5.getPositionX() + this.oPiaoBtn5.getContentSize().width * 0.8 + 45, this.oPiaoBtn5.getContentSize().height * 0.8 / 2));
        this.oPiaoBtn6.setName(PiaoType.PIAO_6);
        this.oPiaoBtn6.setScale(0.8);
        this.PiaoImage1.addChild(this.oPiaoBtn6);
    },


    addClickEventListener: function (callback) {
        this.oPiaoBtn1.addClickEventListener(callback);
        this.oPiaoBtn2.addClickEventListener(callback);
        this.oPiaoBtn3.addClickEventListener(callback);
        this.oPiaoBtnNo.addClickEventListener(callback);
        this.oPiaoBtn4.addClickEventListener(callback);
        this.oPiaoBtn5.addClickEventListener(callback);
        this.oPiaoBtn6.addClickEventListener(callback);
        this.oPiaoBtnNo1.addClickEventListener(callback);
    }
});


var TextTip = cc.Layer.extend({
    tip: null,
    tip_effect: null,
    tip_text: null,

    ctor: function () {
        this._super();

        var size = cc.director.getWinSize();

        this.ignoreAnchorPointForPosition(false);
        this.setAnchorPoint(cc.p(0.5, 0.5));
        this.setContentSize(cc.size(size.width, size.height));
        var self = this;
        {
            this.tip = new cc.Sprite(getResPath("RoomMJ/text_bg.png"));
            this.tip.setPosition(cc.p(size.width / 2, 274));
            this.tip.setVisible(false);
            this.addChild(this.tip, 10000);

            this.tip_text = new ccui.Text("", "", 30);
            this.tip_text.setTextColor(cc.color(255, 249, 141));
            this.tip_text.setAnchorPoint(cc.p(0.5, 0.5));
            this.tip_text.setPosition(cc.p(this.tip.getContentSize().width / 2, this.tip.getContentSize().height / 2));
            this.tip.addChild(this.tip_text);

            this.tip_effect = new ccui.Text(".", "", 30);
            this.tip_effect.setTextColor(cc.color(255, 249, 141));
            this.tip_effect.setAnchorPoint(cc.p(0.0, 0.5));
            this.tip_effect.setPosition(cc.p(this.tip.getContentSize().width / 2, this.tip.getContentSize().height / 2));
            this.tip.addChild(this.tip_effect);


            this.count = 0;
            var cl = cc.callFunc(function () {

                self.count++;
                if (self.count > 2) {
                    self.count = 0;
                }

                if (self.count == 0) {
                    self.tip_effect.setString(".");
                }
                else if (self.count == 1) {
                    self.tip_effect.setString("..");
                }
                else if (self.count == 2) {
                    self.tip_effect.setString("...");
                }
            });
            this.tip_effect.runAction(cc.sequence(cc.delayTime(0.2), cl).repeatForever());
        }
    },

    reset: function () {
        this.showTextTip("");
    },
    showTextTip: function (str) {
        if (str == "") {
            this.tip.setVisible(false);
        }
        else {
            this.tip.setVisible(true);
            this.tip_text.setString(str);
            this.tip_effect.setPositionX(this.tip_text.getPositionX() + this.tip_text.getContentSize().width / 2);
        }
    },
});

var sendPiaoNums = function (v, paoflag) {
    //Log(this,"kaifeng v="+v);
    var packet = createPacket("proto.game.pingdingshanmj.ReqChoosePiao");
    packet.piaonum = v;
    packet.flag = paoflag;
    sendPacket(packet, selfCMD.CLIENT_MJ_CHOOSE_PIAO);
}


var PiaoType = {
    PIAO_1: "piao_1",
    PIAO_2: "piao_2",
    PIAO_3: "piao_3",
    PIAO_4: "piao_4",
    PIAO_5: "piao_5",
    PIAO_6: "piao_6",
    PIAO_NO: "piao_no",
    PIAO_NO1: "piao_no1",
    getValue: function (type) {
        if (type == this.PIAO_1 || type == this.PIAO_4) {
            return 1;
        } else if (type == this.PIAO_2 || type == this.PIAO_5) {
            return 2;
        } else if (type == this.PIAO_3 || type == this.PIAO_6) {
            return 3;
        } else {
            return 0;
        }
    }
};

var MJTable_PingDingShan = MJTable.extend({
    tag: "MJTable_PingDingShan",
    _curLaizi: -1,
    _curLaizipi: -1,
    _curLaizi2: -1,
    _curLaizi_bg: null,
    isRecordShow: false,
    _pkg_id: 0,
    maxQuan: 1,
    _huaCard: [[], [], [], []],
    isForceTing: false,
    _huaValues: [],
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        MJModel.outCardEffect_style = 1;

        MJModel.mj_bg_use = 1;
        MJModel.mj_suport_change_bg = 1;
        MJModel.toupiaoTipsType = 1;
        MJModel.chi_layout = 3;
        MJModel.mj_touch_tip = 1;
        MJModel.isOutCard = true;
        MJModel.mj_chat_style = 5;
        MJModel.mj_public_style = 1;
        MJModel.mj_card_lib_type = 1;
        MJModel.mj_gps_type = 1;
        MJModel.mj_double_click_style = 1;
        MJModel.yinyue = "jingdian";
        MJModel.has_hu_layout = 0;


        MJModel.mj_suport_fangyan = 1;
        MJModel.op_Anim_flag = 0;
        MJModel.mj_table_view = "2d";
        //MJModel.mj_font = "xieshi";      //圆润就是写实

        MJModel.mj_style = "shishang";
        MJModel.mj_font = "jianjie";
        MJModel.mj_fontSize = "dahao";
        MJModel.card_luminance = 80;
        MJModel.mj_isFZB = false;
        MJModel.table_gps_init = 0;

        // var mj_card_luminance = cc.sys.localStorage.getItem("card_luminance");
        // if(mj_card_luminance) MJModel.card_luminance = mj_card_luminance;

        MJModel.cardLight = 1;
        var cardLight = cc.sys.localStorage.getItem("cardLight");
        if (cardLight) MJModel.cardLight = cardLight;

        cc.log("lin=MJModel.cardLight=" + MJModel.cardLight);

        MJModel.shareType = 1;
        this.KaiMen = [0, 0, 0, 0];


        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];

            MJModel.mj_roomType = 0;

            if (this._pkg_id == 3170 || this._pkg_id == 3033) { //4人
                MJModel.mj_roomType = 0;
            }
            if (this._pkg_id == 3171 || this._pkg_id == 3034) { //3人
                MJModel.mj_roomType = 1;
            }

        } catch (e) {
            Log(this, e);
        }

        try {
            var help = this.roomPublic.getChildByName("game_help");
            help.setVisible(false);
        } catch (e) {

        }


        if (!MJModel.isOnVideo) {
            var roomData1 = roomData["gameRoom"]["innerWayRecommend"][0];
            var fistBao = roomData1["gameCustomClassifyVOList"];
            for (var i = 0; i < fistBao.length; i++) {
                var pointJson = fistBao[i]["gameCustomPlayValInfoList"];
                if (!fistBao[i]["platformVisible"]) {
                    continue;
                }

                for (var k = 0; k < pointJson.length; k++) {
                    if (pointJson[k]["iptValue"] == 8580001) {
                        MJModel.table_gps_init = 1;
                    }
                }

            }
        }


        this._init_extend();
        this._super();
        //this.schedule(this.test, 1.0);

        //重新设置桌标的位置
        var size = cc.director.getWinSize();
        this.mjType.setPosition(cc.p(size.width / 2 + 25, size.height / 2 + 170));

        var self = this;
        this.oMJPiao = new MJPiao();
        this.oMJPiao.setVisible(false);
        this.oMJPiao.addClickEventListener(function (node) {
            self.onPiaoClick(node);
        });
        this.addChild(this.oMJPiao, 100);

        this.piaoTip = new TextTip();
        this.piaoTip.setPosition(cc.p(size.width / 2, 580));
        this.addChild(this.piaoTip, 100);

        this.createCardNumView();
    },


    getMjTypePath: function () {
        return getResPath("pingdingshanmj/mj_pingdingshan.png");
    },


    isSupportBigFace: true,        //是否支持大表情互动
    oMJPiao: null,
    jiesanTime: 90,        //申请解散时间

    leftCardNum: 0, //剩余的排数
    cardNumBg: null,
    cardNumLab: null,
    jushuNumBg: null,
    jushuNumLab: null,

    piaoState: false,      //是否是选飘阶段


    createCardNumView: function () {  //处理外部游戏需要重构 剩余排数与局数的操作
        var winSize = cc.director.getWinSize();
        //cc.log("createCardNumView=====1" +MJModel.mj_table_view);
        for (var i = 0; i < 2; i++) {
            var bgwidth = 166, bgHeight = 48;
            var fontsize = 28;
            var bg = new ccui.ImageView(getResPath("RoomMJ/bg.9.png"));
            bg.setScale9Enabled(true);
            bg.setAnchorPoint(cc.p(0.5, 0.5));
            bg.setContentSize(cc.size(bgwidth, bgHeight));
            bg.setVisible(false);
            bg.setOpacity(0);
            this.addChild(bg, 99);

            var lab1Text = (i == 0) ? "剩:       张" : "剩:       局";
            var lab1 = new cc.LabelTTF(lab1Text, "Arial", fontsize);
            lab1.setColor(cc.color(5, 70, 40));
            bg.addChild(lab1);

            var lab2 = new cc.LabelTTF("100", "Arial", fontsize);
            lab2.setColor(cc.color(230, 219, 116));
            bg.addChild(lab2);

            if (i == 0) {
                this.cardNumBg = bg;
                this.cardNumLab = lab2;
                lab1.setAnchorPoint(0.5, 0.5);
                lab1.setPosition(cc.p(bgwidth / 2, bgHeight / 2));
                lab2.setAnchorPoint(cc.p(0.5, 0.5));
                lab2.setPosition(cc.p(bgwidth / 2 + 5, bgHeight / 2));
                bg.setPosition(cc.p(winSize.width / 2 - 140, winSize.height / 2 + 20));
            } else {
                this.jushuNumBg = bg;
                this.jushuNumLab = lab2;
                lab1.setAnchorPoint(0, 0.5);
                lab1.setPosition(cc.p(27, bgHeight / 2));
                lab2.setAnchorPoint(cc.p(0.5, 0.5));
                lab2.setPosition(cc.p(85, bgHeight / 2));
                lab2.setString(0);
                bg.setPosition(cc.p(winSize.width / 2 + 140, winSize.height / 2 + 20));
            }
        }
    },


    onPiaoClick: function (ref) {
        //Log(this,"kaifeng come this");
        var sPiaoName = ref.getName();
        cc.log("sPiaoName:" + sPiaoName);
        cc.log("iPiaoValue:" + PiaoType.getValue(sPiaoName));
        var paoflag = 1;
        if (sPiaoName == PiaoType.PIAO_4 || sPiaoName == PiaoType.PIAO_5 || sPiaoName == PiaoType.PIAO_6 || sPiaoName == PiaoType.PIAO_NO1) {
            paoflag = 0;
        }
        sendPiaoNums(PiaoType.getValue(sPiaoName), paoflag);

        cc.log("pingdingshan clean=" + paoflag);
        if (paoflag == 0) {
            this.oMJPiao.PiaoImage1.setVisible(false);
        } else {
            this.oMJPiao.PiaoImage.setVisible(false);
        }

    },


    handler_out_card_sound: function (sex, card) {
        if (MJModel.fangyan == "fangyan1") {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/out_card.mp3"));
            this.handler_out_card_fangyan(sex, card);
        } else {
            this._super(sex, card);
        }
    },

    handler_out_card_fangyan: function (sex, card) {
        Sound.getInstance().playEffect(__String.createWithFormat(getResPath("pingdingshanmj/sound/chupai/%1_%2.mp3"), sex == SEX_ID.SEX_MAN ? "male" : "female", Utils.toHex2(card)));
    },

    handler_op_sound: function (pos, sex, OpType, OpType2, name) {
        if (MJModel.fangyan != "putonghua") {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/give.mp3"));
            this.handler_op_fangyan(pos, sex, OpType, OpType2, name);
        } else {
            this._super(pos, sex, OpType, OpType2, name);
        }
    },

    handler_op_fangyan: function (pos, sex, OpType, OpType2, name) {
        var action = name;
        if (name == "zimo" || name == "qiangganghu") {
            action = "hu";
        }
        if (action == "gang") {
            if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                Sound.getInstance().playEffect(__String.createWithFormat(getResPath("pingdingshanmj/sound/operator/%1_%2.mp3"), sex == SEX_ID.SEX_MAN ? "male" : "female", "angang"));
            }
            else {
                Sound.getInstance().playEffect(__String.createWithFormat(getResPath("pingdingshanmj/sound/operator/%1_%2.mp3"), sex == SEX_ID.SEX_MAN ? "male" : "female", action));
            }
        } else if (action == "zimo") {
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("pingdingshanmj/sound/operator/%1_%2.mp3"), sex == SEX_ID.SEX_MAN ? "male" : "female", action));
        } else {
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("pingdingshanmj/sound/operator/%1_%2.mp3"), sex == SEX_ID.SEX_MAN ? "male" : "female", action));
        }
    },

    fastChat: ["这两天啥手气啊，老背了！", "哎呀~我这又打错了！", "打张牌让我碰一个！", "还叫不叫我摸牌啦！", "好歹也让我胡一个呗",
        "快点吧等到花都谢了！", "你的牌打得真中！", "你这是啥网啊？太差了！", "弄啥呢,打牌要快！", "啥意思啊，又是你胡？", "我有一百种方法胡你！"],

    setFastChat: function () {
        MJModel.mj_fastChat = this.fastChat;
        ZJHModel.getInstance().gameUseDefaultChat = false;
        ZJHModel.getInstance().gameDefaultChat = JSON.stringify(this.fastChat);
        var self = this;
        Utils.getFastChatSound = function (chat, sex) {
            for (var i = 0; i < self.fastChat.length; i++) {
                if (self.fastChat[i] == chat) {
                    return getResPath(__String.createWithFormat("pingdingshanmj/sound/fast/%1_%2.mp3", sex == SEX_ID.SEX_MAN ? "male" : "female", Utils.to2d(i + 1)));
                }
            }
            return "";
        };
    },


    _init_extend: function () {
        var self_table = this;
        this.initSetting();
        this.initPublic();
        this.initTips();
        this.initMJCard();
        this.initMJPlayer();
        this.initMJConfig();
        this.initMJResult();
        this.initMJPreTable();

        //去掉出牌按钮
        MJCards.prototype.createOutCardBtn = function () {

        };

        var superCtor = MJAction.prototype.ctor;
        MJAction.prototype.ctor = function () {
            superCtor.call(this);
            this.btns["gps"].setVisible(false);
        };

        var superctor = MJCard.prototype.setValue;
        MJCard.prototype.setValue = function (value, pos, type, index, _value1) {
            superctor.call(this, value, pos, type, index, _value1);
            this.reflashColor();
        };

        MJAction.prototype.setTingPaiVis = function (v) {
            if (this.tingpai) {
                this.tingpai.setVisible(false);
                if (v == false) cc.director.getRunningScene().removeChildByName("tingpai_layer");
            }
        };

        //去掉出牌放大的效果
        MJCards.prototype.outHandCardEffct2 = function (pos, value) {
            var size = cc.director.getWinSize();
            this.addOutCard(pos, value);
            this.reflashHandCard(pos, true, true);
        };


        ////湖北麻将不要自动胡牌功能
        //MJAction.prototype.setAutoOutCardVis = function (value) {
        //};
    },

    initMJPreTable: function () {
        var superInit = MJPreTable.prototype.ctor;
        MJPreTable.prototype.ctor = function () {
            superInit.call(this);
            this.bg.loadTexture(getResPath("pingdingshanmj/bgs/jingdian_2d.png"));
            this.btns["gps"].setVisible(false);
        };
    },
    initMJResult: function () {
        CommonTotalResult.prototype.initUI = function (gameType, roomId, time, startTime, countSum, count) {
            var size = cc.director.getWinSize();
            this.setContentSize(size);
            this.setAnchorPoint(cc.p(0, 0));
            this.setPosition(cc.p(0, 0));

            var roomName = this.rootNode.getChildByName("roomName");
            roomName.setString(gameType);
            roomName.ignoreContentAdaptWithSize(true);

            var roomCode = this.rootNode.getChildByName("roomCode");
            roomCode.setString(roomId);
            roomCode.ignoreContentAdaptWithSize(true);
            roomCode.setPosition(cc.p(roomName.getPosition().x + 165, roomName.getPosition().y));

            var jushu = this.rootNode.getChildByName("jushu");
            jushu.setString(count + "/" + countSum + "局");
            jushu.ignoreContentAdaptWithSize(true);
            jushu.setPosition(cc.p(roomName.getPosition().x + 335, roomName.getPosition().y));

            var time_begin = this.rootNode.getChildByName("time_begin");
            time_begin.setString(startTime);
            time_begin.ignoreContentAdaptWithSize(true);
            time_begin.setPosition(cc.p(roomName.getPosition().x, roomName.getPosition().y - 35));
            time_begin.setColor(cc.color(214, 212, 213));
            time_begin.setFontSize(22);

            var time_end = this.rootNode.getChildByName("time_end");
            time_end.setString("游戏时间:" + time + "分钟");
            time_end.ignoreContentAdaptWithSize(true);
            time_end.setPosition(cc.p(time_begin.getPosition().x + 230, time_begin.getPosition().y));
            time_end.setColor(cc.color(214, 212, 213));
            time_end.setFontSize(22);


            var jinzhi = new cc.Sprite(getResPath("pingdingshanmj/jinzhi.png"));
            jinzhi.setPosition(cc.p(size.width - jinzhi.getContentSize().width / 2, size.height - jinzhi.getContentSize().height / 2));
            this.addChild(jinzhi, 1000);

            //处理分析界面
            this.btns["sharelink"].setVisible(false);
            this.btns["sharezhanji"].setPosition(cc.p(size.width - 330, 52));
        };

        CommonTotalResult.prototype.addItem = function (avatars, names, ids, isWin, isPao, arrStr, count, score, Ishouse) {
            var uiJson = ccs.load(getResPath("RoomMJ/mj_public/gameRecord_Item.json"));
            var node = uiJson.node;
            this.items.push(node);
            if (score > 0) {
                node.getChildByName("bg").setVisible(true);
            }

            if (isWin) {
                node.getChildByName("dayingjia").setVisible(true);
            }

            if (isPao) {
                node.getChildByName("dianpaowang").setVisible(true);
            }

            if (Ishouse) {
                node.getChildByName("fangzhu").setVisible(true);
            }

            var avatar = node.getChildByName("avatar");
            var name = node.getChildByName("name");
            var id = node.getChildByName("id");

            var m_pAvatar = Utils.createCircleAvatar(avatars, getResPath("RoomMJ/mj_public/common/dialog/zhanji/head_default.png"), "Avatars/user4_unlogin.png", cc.size(100, 100));
            avatar.removeAllChildren();
            avatar.addChild(m_pAvatar);
            name.setString(names);
            name.ignoreContentAdaptWithSize(true);

            id.setString("ID:" + ids);
            id.ignoreContentAdaptWithSize(true);

            for (var i = 0; i < arrStr.length; i++) {
                var title = node.getChildByName("title" + (i + 1));
                var num = node.getChildByName("num" + (i + 1));
                title.setVisible(true);
                num.setVisible(true);

                title.setFontSize(32);
                title.setPosition(cc.p(title.getPosition().x, title.getPosition().y - i * 10));
                num.setFontSize(32);
                num.setPosition(cc.p(num.getPosition().x + 5, num.getPosition().y - i * 10));

                title.setString(arrStr[i]);
                title.ignoreContentAdaptWithSize(true);

                num.setString(count[i]);
                num.ignoreContentAdaptWithSize(true);

                //title.setColor(score > 0 ? cc.color(222, 182, 120) : cc.color(148, 191, 207));
                //num.setColor(score > 0 ? cc.color(255, 206, 85) : cc.color(222, 222, 222));
            }

            if (score > 0) {
                node.getChildByName("zongfen_win").setVisible(true);
                node.getChildByName("zongfen_win").ignoreContentAdaptWithSize(true);
                node.getChildByName("zongfen_win").setString(":" + Math.abs(score));
            } else {
                node.getChildByName("zongfen_lose").setVisible(true);
                node.getChildByName("zongfen_lose").ignoreContentAdaptWithSize(true);
                node.getChildByName("zongfen_lose").setString(score == 0 ? score : (":" + Math.abs(score)));
            }
            return node;
        };
    },

    initMJConfig: function () {

        MJConfig.getHuCardOrder = function (pos, index) {
            index = index % 16
            var order = [
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                ],
            ];
            if (MJModel.mj_bg_use == 1) {             //2d界面
                order = [
                    [
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ],
                    [
                        15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                    ],
                    [
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ],
                    [
                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                    ],
                ];
            }
            if (MJModel.mj_font == "jianjie" && MJModel.mj_fontSize == "dahao") {
                order = [
                    [
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ],
                    [
                        15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                    ],
                    [
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ],
                    [
                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                    ],
                ];
            }
            return order[pos][index] + 200;
        };

        MJConfig.getOutCardPos = function (pos, index) {
            if (MJModel.mj_font == "jianjie" && MJModel.mj_fontSize == "dahao" && MJModel.mj_bg_use == 0) {
                if (pos == 0 || pos == 2) {
                    index = index % 18;
                }
                else {
                    index = index % 16;
                }
                return this.getWorldPosition("out_" + pos, "o_" + index);
            } else {
                if (MJModel.mj_bg_use == 1) {
                    if (pos == 0 || pos == 2) {
                        index = index % 20;
                    } else {
                        if (MJModel.mj_paiban == "vertical") {
                            index = index % 28;
                        } else {
                            index = index % 30;
                        }
                    }
                } else {
                    index = index % 26;
                }
                if ((pos == 1 || pos == 3) && MJModel.mj_bg_use == 1 && MJModel.mj_paiban == "vertical") {
                    return this.getWorldPosition("out_v_" + pos, "o_" + index);
                } else {
                    return this.getWorldPosition("out_" + pos, "o_" + index);
                }
            }
        };

        MJConfig.getOutCardOrder = function (pos, index) {
            if (MJModel.mj_font == "jianjie" && MJModel.mj_fontSize == "dahao" && MJModel.mj_bg_use == 0) {
                if (pos == 0 || pos == 2) {
                    index = index % 18;
                }
                else {
                    index = index % 16;
                }

                var order = [
                    [
                        57, 56, 55, 54, 53, 52, 51, 50, 49, 48,
                        47, 46, 45, 44, 43, 42, 41, 40,
                    ],
                    [
                        28, 27, 26, 25, 24, 23, 22, 21, 20,
                        35, 34, 33, 32, 31, 30, 29,
                    ],
                    [
                        9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                        17, 16, 15, 14, 13, 12, 11, 10,
                    ],
                    [
                        20, 21, 22, 23, 24, 25, 26, 27, 28,
                        29, 30, 31, 32, 33, 34, 35,
                    ],
                ];
                return order[pos][index];
            } else {
                if (MJModel.mj_bg_use == 1) {
                    if (pos == 0 || pos == 2) {
                        index = index % 20;
                    } else {
                        if (MJModel.mj_paiban == "vertical") {
                            index = index % 28;
                        } else {
                            index = index % 30;
                        }
                    }
                    var order = null;
                    if ((pos == 1 || pos == 3) && MJModel.mj_paiban == "vertical") {
                        order = [
                            [
                                3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                                2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                1, 1, 1, 1, 1, 1,
                                0, 0, 0, 0, 0, 0,
                            ],
                            [
                                6, 5, 4, 3, 2, 1, 0,
                                6, 5, 4, 3, 2, 1, 0,
                                6, 5, 4, 3, 2, 1, 0,
                                6, 5, 4, 3, 2, 1, 0,
                            ],
                            [
                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                2, 2, 2, 2, 2, 2,
                                3, 3, 3, 3, 3, 3,
                            ],
                            [
                                0, 1, 2, 3, 4, 5, 6,
                                0, 1, 2, 3, 4, 5, 6,
                                0, 1, 2, 3, 4, 5, 6,
                                0, 1, 2, 3, 4, 5, 6,
                            ],
                        ];
                    } else {
                        order = [
                            [
                                3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                                2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                                1, 1, 1, 1, 1, 1,
                                0, 0, 0, 0, 0, 0,
                            ],
                            [
                                9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                                9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                                9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                            ],
                            [
                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                2, 2, 2, 2, 2, 2,
                                3, 3, 3, 3, 3, 3,
                            ],
                            [
                                0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                                0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                                0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                            ],
                        ];
                    }
                    return order[pos][index];
                } else {

                    index = index % 26;

                    var order = [
                        [
                            0, 1, 2, 3, 4, 5,
                            6, 7, 8, 9, 10, 11, 12, 13,
                            14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
                        ],
                        [
                            25, 24, 23, 22, 21, 20,
                            19, 18, 17, 16, 15, 14, 13, 12,
                            11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                        ],
                        [
                            25, 24, 23, 22, 21, 20,
                            19, 18, 17, 16, 15, 14, 13, 12,
                            11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                        ],
                        [
                            20, 21, 22, 23, 24, 25,
                            12, 13, 14, 15, 16, 17, 18, 19,
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                        ],
                    ];
                    return order[pos][index];
                }
            }
        };
    },


    initMJCard: function () {

        var selfTable = this;
        // var super_initmoCard =  MJCards.prototype.initMoCard;
        // MJCards.prototype.initMoCard = function (pos, value, isDiretor, encrypt_code) {
        //     super_initmoCard.call(this,pos, value, isDiretor, encrypt_code);
        //     var self = this;
        //     var callback = cc.callFunc(function () {
        //         self.reflashHandCard(pos,true);
        //         selfTable.myselfOpenOutCard(true);
        //     });
        //     this.runAction(cc.sequence(cc.delayTime(0.3),callback));
        //     //this.reflashHandCard(pos,true);
        // };
        //
        // MJCards.prototype.reflashCardLuminance = function(color){
        //     var allCards = [];
        //     allCards.push(this.hand_card);
        //     allCards.push(this.peng_card);
        //     allCards.push(this.hu_card);
        //     allCards.push(this.out_card);
        //     allCards.push(this.public_card);
        //
        //     for(var i = 0;i<allCards.length;i++){
        //         var diffTypeCards = allCards[i];   //hand_card
        //         for (var j = 0;j<diffTypeCards.length;j++){
        //             var diffPlayerCards = diffTypeCards[j]; // hand_card[0]
        //             for (var k = 0;k<diffPlayerCards.length;k++){
        //                 var diffPlayerCards_card = diffPlayerCards[k]; // hand_card[0][0]
        //                 if(diffPlayerCards_card instanceof MJCard){
        //                     diffPlayerCards_card.setStoreColor(color);
        //                 }else if(diffPlayerCards_card instanceof MJPeng){
        //                     for(var s = 0;s<diffPlayerCards_card.cardList.length;s++){
        //                         var peng_card = diffPlayerCards_card.cardList[s];
        //                         peng_card.setStoreColor(color);
        //                     }
        //                 }
        //             }
        //         }
        //     }
        //
        //
        //     for(var i = 0;i < this.other_card.length;i++){
        //         var peng_card = this.other_card[i];
        //         peng_card.setStoreColor(color);
        //     }
        // };


        MJCards.prototype.reflashAllCardColor = function () {
            for (var i = 0; i < this.hand_card.length; i++) {
                for (var j = 0; j < this.hand_card[i].length; j++) {
                    try {
                        var card = this.hand_card[i][j];
                        card.reflashColor();
                    } catch (e) {
                    }
                }
            }

            for (var i = 0; i < this.out_card.length; i++) {
                for (var j = 0; j < this.out_card[i].length; j++) {
                    try {
                        var card = this.out_card[i][j];
                        card.reflashColor();
                    } catch (e) {

                    }
                }
            }

            for (var i = 0; i < this.hu_card.length; i++) {
                for (var j = 0; j < this.hu_card[i].length; j++) {
                    try {
                        var card = this.hu_card[i][j];
                        card.reflashColor();
                    } catch (e) {
                    }
                }
            }

            for (var i = 0; i < this.peng_card.length; i++) {
                for (var j = 0; j < this.peng_card[i].length; j++) {
                    try {
                        var peng = this.peng_card[i][j];
                        peng.reflashColors();
                    } catch (e) {

                    }
                }
            }

            for (var i = 0; i < this.other_card.length; i++) {
                try {
                    var card = this.other_card[i];
                    card.reflashColor();
                } catch (e) {

                }
            }

            for (var i = 0; i < this.public_card.length; i++) {
                for (var j = 0; j < this.public_card[i].length; j++) {
                    try {
                        var card = this.public_card[i][j];
                        card.reflashColor();
                    } catch (e) {
                        Log(this, e);
                    }
                }
            }
        };


        MJCard.prototype.has_temp_color = false;

        MJCard.prototype.reflashColor = function () {
            if (this.has_temp_color)return;
            try {
                var bg_sp = this.getChildByName("sprite");
                if (this.store_color == null) {
                    var bd = 130;
                    var dbd = 255 - bd;
                    var dd = dbd * MJModel.cardLight;

                    if (dd < 0)dd = 0;
                    if (dd > dbd)dd = dbd;
                    bg_sp.setColor(cc.color(bd + dd, bd + dd, bd + dd));
                } else {
                    var db = 0.5;
                    var dbd = 1 - db;
                    var dd = db + dbd * MJModel.cardLight;
                    if (dd < db)dd = db;
                    if (dd > 1)dd = 1;
                    bg_sp.setColor(cc.color(this.store_color.r * dd, this.store_color.g * dd, this.store_color.b * dd));
                }
            } catch (e) {
                Log(this, e);
            }
        };

        MJCard.prototype.setChoiceTipShow = function (isShow) {
            try {
                var bg_sp = this.getChildByName("sprite");

                if (isShow) {
                    bg_sp.setColor(cc.color(252, 171, 250));
                    this.has_temp_color = true;
                } else {

                    if (this.black_color) {
                        bg_sp.setColor(this.black_color);
                        this.has_temp_color = true;
                        return;
                    }

                    this.has_temp_color = false;
                    this.reflashColor();
                }
            } catch (e) {
                Log(this, e);
            }
        };


        MJPeng.prototype.reflashColors = function () {
            for (var k = 0; k < this.cardList.length; k++) {
                var card = this.cardList[k];
                card.reflashColor();
            }
        };


        MJCard.prototype.setTempColor = function (color) {
            try {
                var bg_sp = this.getChildByName("sprite");
                bg_sp.setColor(color);
                this.has_temp_color = true;
            } catch (e) {
                Log(this, e);
            }
        };

        MJCard.prototype.resetColor = function () {
            this.has_temp_color = false;
            this.reflashColor();
        };


        MJCard.prototype.reset = function () {
            this.setTingPai(false);
            this.stopAllActions();
            this.setRotation(0);
            this.resetColor();
        };


        MJCard.prototype.setBlackVis = function (v) {
            if (v == true) {
                if (this.tingpai_flag) this.tingpai_flag.setVisible(false);
            }
            var bg_sp = this.getChildByName("sprite");
            if (bg_sp) {
                if (v) {
                    this.black_color = cc.color(130, 120, 130);
                    bg_sp.setColor(this.black_color);
                    this.has_temp_color = true;
                } else {
                    this.black_color = null;
                    this.has_temp_color = false;
                    this.reflashColor();
                }
            }
        };


        MJCards.prototype.sortCard = function (a, b) {
            return selfTable._sortCard(a, b);
        };

        MJCard.prototype.check_addFlag = function () {
            selfTable._checkAddCardFlag(this);
        };

        MJCards.prototype.reflashAllCardUI = function () {
            this.setCurCardTip(false);
            var has_do_mo = false;
            for (var i = 0; i < this.hand_card.length; i++) {
                has_do_mo = false;
                for (var j = 0; j < this.hand_card[i].length; j++) {
                    try {
                        var card = this.hand_card[i][j];
                        card.reflashUI();
                        if (has_do_mo == false && card.getValue() == MJModel.mj_mo_cards[i] && j == (this.hand_card[i].length - 1)) {
                            if (card.type == CardType.Card_End) {
                                card.setMyPosition(MJConfig.getEndCardMoPos(i));
                            } else {
                                card.setMyPosition(MJConfig.getMoCardPos(i));
                            }

                            this.reorderChild(card, MJConfig.getMoCardOrder(i));
                            has_do_mo = true;
                        } else {
                            if (card.type == CardType.Card_End) {
                                card.setMyPosition(MJConfig.getEndCardPos(i, has_do_mo == true ? j - 1 : j, 0, MJModel.mj_mo_cards[i] == -1 && this.isDuoPai(i)));
                            } else {
                                card.setMyPosition(MJConfig.getHandCardPos(i, has_do_mo == true ? j - 1 : j, 0, MJModel.mj_mo_cards[i] == -1 && this.isDuoPai(i)));
                            }
                            this.reorderChild(card, MJConfig.getHandCardOrder(i, j));
                        }
                        card.stopAllActions();
                    } catch (e) {
                    }
                }
            }

            for (var i = 0; i < this.out_card.length; i++) {
                for (var j = 0; j < this.out_card[i].length; j++) {
                    try {
                        var card = this.out_card[i][j];
                        card.reflashUI();
                        card.setMyPosition(MJConfig.getOutCardPos(i, j));
                        this.reorderChild(card, MJConfig.getOutCardOrder(i, j));
                        card.stopAllActions();
                    } catch (e) {

                    }
                }
            }

            for (var i = 0; i < this.hu_card.length; i++) {
                for (var j = 0; j < this.hu_card[i].length; j++) {
                    try {
                        var card = this.hu_card[i][j];
                        card.reflashUI();
                        card.setMyPosition(MJConfig.getHuCardPos(i, j));
                        this.reorderChild(card, MJConfig.getHuCardOrder(i, j));
                        card.stopAllActions();
                    } catch (e) {
                    }
                }
            }

            for (var i = 0; i < this.peng_card.length; i++) {
                for (var j = 0; j < this.peng_card[i].length; j++) {
                    try {
                        var peng = this.peng_card[i][j];
                        peng.reflashUI();
                        peng.setPosition(MJConfig.getPengKangCardPos(i, j));
                        peng.setScale(MJConfig.getScale_new(i, CardType.Card_Peng, j, false));
                        this.reorderChild(peng, MJConfig.getPengKangCardOrder(i, j));
                    } catch (e) {

                    }
                }
            }

            for (var i = 0; i < this.other_card.length; i++) {
                try {
                    var card = this.other_card[i];
                    card.reflashUI();
                } catch (e) {

                }
            }

            for (var i = 0; i < this.hua_card.length; i++) {
                for (var j = 0; j < this.hua_card[i].length; j++) {
                    try {
                        var card = this.hua_card[i][j];
                        card.reflashUI();
                    } catch (e) {

                    }
                }
            }
            // this.reflashHuaPos();

            for (var i = 0; i < this.public_card.length; i++) {
                for (var j = 0; j < this.public_card[i].length; j++) {
                    try {
                        var card = this.public_card[i][j];
                        if (card.isVisible() == false) {
                            continue;
                        }
                        card.setMyPosition(MJConfig.getPublicCardPos(i, j));
                        card.reflashUI();
                        card.stopAllActions();
                    } catch (e) {
                        Log(this, e);
                    }
                }
            }
            selfTable.players[2].showPaofenTip();
        };

        MJCard.prototype.reflashUI = function () {
            this.setValue(this._value ^ this._randomValue, this.pos, this.type, this.index, this._value1 ^ this._randomValue1);

            try {
                var bg_sp = this.getChildByName("sprite");
                bg_sp.setColor(this.store_color);
            } catch (e) {
                Log(this, e);
            }
        };

        MJCard.prototype.onTouchMoved = function (touch, event) {
            if (!touch.getLocation) {
                return;
            }
            if (MJModel.canTouchCard == false || MJModel.canChoiceMore || this.touchEnd == true)return;
            var touchPoint = touch.getLocation();
            if (Math.abs(touchPoint.x - this.touchBegin.x) > 10 || Math.abs(touchPoint.y - this.touchBegin.y) > 10) {
                this.isMove = true;
            }

            {
                if (touchPoint.y < this.initPos.y) {
                    touchPoint.y = this.initPos.y;
                }
                this.setPosition(touchPoint);
                this.setLocalZOrder(10000);
            }
            if (this.isMove) {
                try {
                    MJModel.mj_table.room_Tip.hideOutCardTip();
                    MJModel.mj_table.removeChildByName("tingpai_layer");
                    for (var i = 0; i < MJModel.listen_info.length; i++) {
                        var tli = MJModel.listen_info[i];
                        if (this.value == tli.OutCard) {
                            var can_show_listen_info = true;
                            for (var j = 0; j < tli.HuInfo.length; j++) {
                                if (tli.HuInfo[j].Card == 255) {
                                    can_show_listen_info = false;
                                    break;
                                }
                            }

                            if (can_show_listen_info) {
                                MJModel.mj_listenLayer_autoshow = false;
                                var curTingPaiLayer = new TingPaiLayer();
                                curTingPaiLayer.show2(tli.HuInfo);

                                curTingPaiLayer.setName("tingpai_layer");
                                MJModel.mj_table.addChild(curTingPaiLayer, 100);
                                hasTingPaiInfo = true;
                            } else {
                                PlatformHelper.showToast("见字胡不显示听牌张");
                            }
                            break;
                        }
                    }
                } catch (e) {
                    Log(this, e);
                }
            }
        };

        MJCard.prototype.onTouchEnded = function (touch, event) {
            if (!touch.getLocation) {
                return;
            }
            if (MJModel.canTouchCard == false || this.touchEnd == true)return;
            if (this.isMove) {
                var dy = this.getPositionY() - this.initPos.y;
                if (dy >= 30) {
                    if (this._outcallback) this._outcallback(this);
                    this.isAlreadyOut = true;
                }
                else {
                    this.goBack();
                    MJModel.mj_table.removeChildByName("tingpai_layer");
                }

                return;
            }
            if (!this._isTouchInside(touch)) {
                this.goBack();
                return;
            }

            this.schedule(this.checkUp, 0.2);
            this.isCheckUp = true;
            if (this._upcallback) this._upcallback(this);
        };

        MJPeng.prototype.showUI = function (type, pos, values, index, out_pos, isEnd, OpType, value, value1) {
            if (isEnd == undefined)isEnd = false;
            if (OpType == undefined)OpType = ActionType.TYPE_PASS;
            if (value1 == null || value1 == undefined)value1 = 0;
            this.pengType = type;
            this.value = value;
            this._value1 = value1;
            this.out_pos = out_pos;
            this.isEnd = isEnd;
            this.OpType = OpType;
            this.pointSp = null;
            this.removeAllChildren();
            this.cardList = [];
            this.pos = pos;
            this.index = index;
            var temp_pos = pos;
            if (isEnd)pos = 0;
            for (var i = 0; i < 3; i++) {
                var card = new MJCard();
                card.setValue(values[i], pos, CardType.Card_Peng, i, value1);
                card.setMyPosition(MJConfig.getPengKangCardPos2(pos, index, i));
                this.addChild(card, MJConfig.getPengKangCardOrder2(pos, index, i));
                this.cardList[i] = card;
            }

            if (type == PengType.Peng_Kang || type == PengType.Peng_AnKang) {
                var card = new MJCard();
                card.setValue(values[3], pos, CardType.Card_Peng, 3, value1);
                card.setMyPosition(MJConfig.getPengKangCardPos2(pos, index, 3));
                this.addChild(card, MJConfig.getPengKangCardOrder2(pos, index, 3));
                this.cardList[3] = card;
            }

            //如果该牌可以加半透明层 且该游戏支持该设定 则添加
            if (MJModel.chi_layout == 2) {
                try {
                    var playerNums = 4;
                    if (MJModel.mj_roomType == 1) playerNums = 3;
                    if (MJModel.mj_roomType == 2) playerNums = 2;

                    var card = null;
                    var cardIndex = -1;
                    var seatid = MJModel.getSeatidByPos(temp_pos);
                    var pre_seatid = seatid - 1;
                    if (pre_seatid < 0)pre_seatid += playerNums;

                    var next_seatid = seatid + 1;
                    if (next_seatid >= playerNums)next_seatid = 0;

                    var out_seatid = MJModel.getSeatidByPos(out_pos);

                    if (this.pengType == PengType.Peng_Peng) {
                        if (out_seatid == pre_seatid) {
                            cardIndex = 0;
                        }
                        else if (out_seatid == next_seatid) {
                            cardIndex = 2;
                        }
                        else {
                            cardIndex = 1;
                        }
                    } else if (this.pengType == PengType.Peng_Kang) {
                        if (out_seatid == pre_seatid) {
                            cardIndex = 0;
                        }
                        else if (out_seatid == next_seatid) {
                            cardIndex = 2;
                        }
                        else {
                            cardIndex = 3;
                        }
                    }
                    else if (this.pengType == PengType.Chi_L || this.pengType == PengType.Chi_M || this.pengType == PengType.Chi_R) {
                        //cardIndex = 1;
                    }
                    if (cardIndex != -1) {
                        card = this.cardList[cardIndex];
                    }

                    if (card) {
                        card.setStoreColor(cc.color(200, 200, 200));
                    }
                } catch (e) {

                }
            }

            //碰扛牌要显示指向箭头
            if (isEnd) return;
            if (MJModel.chi_layout == 3) {
                try {
                    if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                        if (temp_pos == 0) return;
                        out_pos = 0;
                    }

                    if (this.pengType == PengType.Peng_Peng) {
                        cardIndex = 1;
                    } else {
                        cardIndex = 3;
                    }
                    if (cardIndex != -1) {
                        card = this.cardList[cardIndex];
                    }

                    if (card) {
                        var black_bg = new cc.Sprite(getResPath("RoomMJ/point/peng_gang_point" + out_pos + ".png"));
                        black_bg.setPosition(this.getPointPos(temp_pos));
                        black_bg.setAnchorPoint(cc.p(0.5, 0.5));
                        black_bg.setScale(0.8);
                        this.addChild(black_bg, 10);
                        this.pointSp = black_bg;
                    }

                    if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                        if (this.pointSp) {
                            this.pointSp.setVisible(false);
                        }
                    }
                } catch (e) {

                }
            }
        };
    },

    initMJPlayer: function () {

        var super_setId = MJPlayer.prototype.setId;
        MJPlayer.prototype.setId = function (id) {
            super_setId.call(this, id);
            this.ready_flag.setPosition(cc.p(this.m_size.width / 2, this.m_size.height / 2));
            this.ready_flag.setScale(1.3);
        };

        MJPlayer.prototype.login = function (seatid) {
            try {
                this.seatid = seatid;
                var player = MJModel.players[this.seatid];
                if (!player)return;
                this.uid = player.uid;
                var dm = player.money - MJModel.take_in;
                this.m_pMoney.setString(dm);
                this.m_pMoney.ignoreContentAdaptWithSize(true);
                var pos = MJModel.getPosBySeatid(seatid);
                cc.log("pingdingshan pos ==" + pos, MJModel.mj_isFZB);
                if (pos != 0 && MJModel.mj_isFZB && !MJModel.isOnVideo) {
                    this.name_label.setString(Utils.parseName(6, __String.createWithFormat("玩家%1", pos)));
                } else {
                    this.name_label.setString(Utils.parseName(6, player.name));
                }
                this.name_label.ignoreContentAdaptWithSize(true);

                this.m_pAvatar.removeAllChildren();
                var avatar = null;
                if (pos != 0 && MJModel.mj_isFZB && !MJModel.isOnVideo) {
                    avatar = createCircleAvatarBypng(getResPath("pingdingshanmj/head_room2.png"), "Avatars/user4_unlogin.png", "Avatars/user4_unlogin.png", cc.size(90, 90));
                } else {
                    avatar = Utils.createCircleAvatar(player.avatar, "Avatars/user4_unlogin.png", "Avatars/user4_unlogin.png", cc.size(90, 90));
                }
                avatar.setPosition(cc.p(0, 0))
                this.m_pAvatar.addChild(avatar);

                this.setVisible(true);
                this.setPosition(MJConfig.getPlayerPos(this.pid));

                this.setBankerFlag(false);
                this.setReadyFlag(false);
                this.setTimeOut(false);
                this.setOffline(false);
            } catch (e) {

            }
        };

        MJPlayer.prototype.paofen_tip = null;
        MJPlayer.prototype.paofen_tip1 = null;
        MJPlayer.prototype.paofen_tip2 = null;

        MJPlayer.prototype.showPaofenTip = function (score, paoflag) {
            if (score == -1) return;
            if (paoflag == undefined) paoflag = 0;
            if (this.paofen_tip == null && paoflag == 0) {
                this.paofen_tip = new cc.Sprite(getResPath(__String.createWithFormat("pingdingshanmj/pao%1_flag.png", score)));
                this.paofen_tip.setName("paofentip");
                this.paofen_tip.setScale(1.4);
                var pos = MJModel.getPosBySeatid(this.seatid);

                if (pos == 2) {
                    if (MJModel.mj_table_view == "2d") {
                        this.paofen_tip.setPosition(cc.p(-this.paofen_tip.getContentSize().width / 2 - 6, this.m_size.height / 2));
                    } else {
                        this.paofen_tip.setPosition(cc.p(this.m_size.height + this.paofen_tip.getContentSize().width / 2 + 6, this.m_size.height / 2));
                    }
                } else if (pos == 0) {
                    if (MJModel.mj_table_view == "2d") {
                        this.paofen_tip.setPosition(cc.p(this.m_size.width / 2, this.m_size.height + this.paofen_tip.getContentSize().height / 2 + 3));
                    } else {
                        this.paofen_tip.setPosition(cc.p(this.m_size.width / 2, -this.paofen_tip.getContentSize().height / 2 + 3));
                    }
                }
                else {
                    this.paofen_tip.setPosition(cc.p(this.m_size.width / 2, this.m_size.height + this.paofen_tip.getContentSize().height / 2 + 3));
                }
                this.addChild(this.paofen_tip, 100);
            } else if (paoflag == 0) {
                this.paofen_tip.setVisible(true);
                var pos = MJModel.getPosBySeatid(this.seatid);
                if (pos == 2) {
                    if (MJModel.mj_table_view == "2d") {
                        this.paofen_tip.setPosition(cc.p(-this.paofen_tip.getContentSize().width / 2 - 6, this.m_size.height / 2));
                    } else {
                        this.paofen_tip.setPosition(cc.p(this.m_size.height + this.paofen_tip.getContentSize().width / 2 + 6, this.m_size.height / 2));
                    }
                } else if (pos == 0) {
                    if (MJModel.mj_table_view == "2d") {
                        this.paofen_tip.setPosition(cc.p(this.m_size.width / 2, this.m_size.height + this.paofen_tip.getContentSize().height / 2 + 3));
                    } else {
                        this.paofen_tip.setPosition(cc.p(this.m_size.width / 2, -this.paofen_tip.getContentSize().height / 2 + 3));
                    }
                }
                else {
                    this.paofen_tip.setPosition(cc.p(this.m_size.width / 2, this.m_size.height + this.paofen_tip.getContentSize().height / 2 + 3));
                }
            }


            if (this.paofen_tip1 == null && paoflag == 1) {
                this.paofen_tip1 = new cc.Sprite(getResPath(__String.createWithFormat("pingdingshanmj/paoflag/gang_pao%1.png", score)));
                this.paofen_tip1.setName("paofentip1");
                this.paofen_tip1.setScale(1.4);
                var pos = MJModel.getPosBySeatid(this.seatid);
                if (pos == 2) {
                    if (MJModel.mj_table_view == "2d") {
                        this.paofen_tip1.setPosition(cc.p(-this.paofen_tip1.getContentSize().width / 2 - 6, this.m_size.height / 2 - 20));
                    } else {
                        this.paofen_tip1.setPosition(cc.p(this.m_size.height + this.paofen_tip1.getContentSize().width / 2 + 6, this.m_size.height / 2 - 20));
                    }
                } else if (pos == 0) {
                    if (MJModel.mj_table_view == "2d") {
                        this.paofen_tip1.setPosition(cc.p(this.m_size.width / 2, this.m_size.height + this.paofen_tip1.getContentSize().height / 2 + 3));
                    } else {
                        this.paofen_tip1.setPosition(cc.p(this.m_size.width / 2, -this.paofen_tip1.getContentSize().height / 2 + 3));
                    }
                }
                else {
                    this.paofen_tip1.setPosition(cc.p(this.m_size.width / 2, this.m_size.height + this.paofen_tip1.getContentSize().height / 2 + 3));
                }
                this.addChild(this.paofen_tip1, 100);
            } else if (paoflag == 1) {
                this.paofen_tip1.setVisible(true);
                var pos = MJModel.getPosBySeatid(this.seatid);
                if (pos == 2) {
                    if (MJModel.mj_table_view == "2d") {
                        this.paofen_tip1.setPosition(cc.p(-this.paofen_tip1.getContentSize().width / 2 - 6, this.m_size.height / 2 - 20));
                    } else {
                        this.paofen_tip1.setPosition(cc.p(this.m_size.height + this.paofen_tip1.getContentSize().width / 2 + 6, this.m_size.height / 2 - 20));
                    }
                } else if (pos == 0) {
                    if (MJModel.mj_table_view == "2d") {
                        this.paofen_tip1.setPosition(cc.p(this.m_size.width / 2, this.m_size.height + this.paofen_tip1.getContentSize().height / 2 + 3));
                    } else {
                        this.paofen_tip1.setPosition(cc.p(this.m_size.width / 2, -this.paofen_tip1.getContentSize().height / 2 + 3));
                    }
                }
                else {
                    this.paofen_tip1.setPosition(cc.p(this.m_size.width / 2, this.m_size.height + this.paofen_tip1.getContentSize().height / 2 + 3));
                }
            }


            if (this.paofen_tip2 == null && paoflag == 2) {
                this.paofen_tip2 = new cc.Sprite(getResPath(__String.createWithFormat("pingdingshanmj/paoflag/yin_pao%1.png", score)));
                this.paofen_tip2.setName("paofentip2");
                this.paofen_tip2.setScale(1.4);
                var pos = MJModel.getPosBySeatid(this.seatid);
                if (pos == 2) {
                    if (MJModel.mj_table_view == "2d") {
                        if (this.paofen_tip1 != null) {
                            this.paofen_tip2.setPosition(cc.p(-this.paofen_tip2.getContentSize().width / 2 - 6, this.m_size.height / 2 + this.paofen_tip1.getContentSize().height - 20));
                        } else {
                            this.paofen_tip2.setPosition(cc.p(-this.paofen_tip2.getContentSize().width / 2 - 6, this.m_size.height / 2 - 20));
                        }
                    } else {
                        if (this.paofen_tip1 != null) {
                            this.paofen_tip2.setPosition(cc.p(this.m_size.height + this.paofen_tip2.getContentSize().width / 2 + 6, this.m_size.height / 2 + this.paofen_tip1.getContentSize().height - 20));
                        } else {
                            this.paofen_tip2.setPosition(cc.p(this.m_size.height + this.paofen_tip2.getContentSize().width / 2 + 6, this.m_size.height / 2 - 20));
                        }
                    }
                } else if (pos == 0) {


                    if (MJModel.mj_table_view == "2d") {
                        if (this.paofen_tip1 != null) {
                            this.paofen_tip2.setPosition(cc.p(this.m_size.width / 2, this.m_size.height + this.paofen_tip2.getContentSize().height / 2 + 3 + this.paofen_tip1.getContentSize().height));
                        } else {
                            this.paofen_tip2.setPosition(cc.p(this.m_size.width / 2, this.m_size.height + this.paofen_tip2.getContentSize().height / 2 + 3));
                        }
                    } else {
                        if (this.paofen_tip1 != null) {
                            this.paofen_tip2.setPosition(cc.p(this.m_size.width / 2 + this.paofen_tip1.getContentSize().width + 8, -this.paofen_tip2.getContentSize().height / 2 + 3));
                        } else {
                            this.paofen_tip2.setPosition(cc.p(this.m_size.width / 2, -this.paofen_tip2.getContentSize().height / 2 + 3));
                        }
                    }

                }
                else {
                    if (this.paofen_tip1 != null) {
                        this.paofen_tip2.setPosition(cc.p(this.m_size.width / 2, this.m_size.height + this.paofen_tip2.getContentSize().height / 2 + 3 + this.paofen_tip1.getContentSize().height));
                    } else {
                        this.paofen_tip2.setPosition(cc.p(this.m_size.width / 2, this.m_size.height + this.paofen_tip2.getContentSize().height / 2 + 3));
                    }
                }
                this.addChild(this.paofen_tip2, 100);
            } else if (paoflag == 2) {
                this.paofen_tip2.setVisible(true);
                var pos = MJModel.getPosBySeatid(this.seatid);
                if (pos == 2) {
                    if (MJModel.mj_table_view == "2d") {
                        if (this.paofen_tip1 != null) {
                            this.paofen_tip2.setPosition(cc.p(-this.paofen_tip2.getContentSize().width / 2 - 6, this.m_size.height / 2 + this.paofen_tip1.getContentSize().height - 20));
                        } else {
                            this.paofen_tip2.setPosition(cc.p(-this.paofen_tip2.getContentSize().width / 2 - 6, this.m_size.height / 2 - 20));
                        }
                    } else {
                        if (this.paofen_tip1 != null) {
                            this.paofen_tip2.setPosition(cc.p(this.m_size.height + this.paofen_tip2.getContentSize().width / 2 + 6, this.m_size.height / 2 + this.paofen_tip1.getContentSize().height - 20));
                        } else {
                            this.paofen_tip2.setPosition(cc.p(this.m_size.height + this.paofen_tip2.getContentSize().width / 2 + 6, this.m_size.height / 2 - 20));
                        }
                    }
                } else if (pos == 0) {

                    if (MJModel.mj_table_view == "2d") {
                        if (this.paofen_tip1 != null) {
                            this.paofen_tip2.setPosition(cc.p(this.m_size.width / 2, this.m_size.height + this.paofen_tip2.getContentSize().height / 2 + 3 + this.paofen_tip1.getContentSize().height));
                        } else {
                            this.paofen_tip2.setPosition(cc.p(this.m_size.width / 2, this.m_size.height + this.paofen_tip2.getContentSize().height / 2 + 3));
                        }
                    } else {
                        if (this.paofen_tip1 != null) {
                            this.paofen_tip2.setPosition(cc.p(this.m_size.width / 2 + this.paofen_tip1.getContentSize().width + 8, -this.paofen_tip2.getContentSize().height / 2 + 3));
                        } else {
                            this.paofen_tip2.setPosition(cc.p(this.m_size.width / 2, -this.paofen_tip2.getContentSize().height / 2 + 3));
                        }
                    }
                }
                else {
                    if (this.paofen_tip1 != null) {
                        this.paofen_tip2.setPosition(cc.p(this.m_size.width / 2, this.m_size.height + this.paofen_tip2.getContentSize().height / 2 + 3 + this.paofen_tip1.getContentSize().height));
                    } else {
                        this.paofen_tip2.setPosition(cc.p(this.m_size.width / 2, this.m_size.height + this.paofen_tip2.getContentSize().height / 2 + 3));
                    }
                }
            }

        };
        MJPlayer.prototype.hidePaofenTip = function () {
            this.removeChildByName("paofentip");
            this.removeChildByName("paofentip1");
            this.removeChildByName("paofentip2");
            this.paofen_tip = null;
            this.paofen_tip1 = null;
            this.paofen_tip2 = null;
        };

        MJPlayer.prototype.tingFlag = null;
        MJPlayer.prototype.showTingFlag = function () {
            if (!this.tingFlag) {
                this.tingFlag = new cc.Sprite(getResPath("RoomMJ/ting_tip.png"));
                this.tingFlag.setAnchorPoint(cc.p(0, 1));
                this.tingFlag.setPosition(cc.p(0, this.m_size.height + 3));
                this.addChild(this.tingFlag);
            }
            this.tingFlag.setVisible(true);
        };

        // var superReset = MJPlayer.prototype.reset;
        // MJPlayer.prototype.reset = function () {
        //     superReset.call(this);
        //     // this.hidePaofenTip();
        //
        //     if (this.tingFlag) {
        //         this.tingFlag.setVisible(false);
        //     }
        // };
    },


    initPublic: function () {
        var selfTabel = this;
        EndRoomLayer.prototype.getMaxTime = function () {
            return selfTabel.jiesanTime;
        };


        BigFaceMenu.prototype.getIconsIndexArray = function (seatid) {
            var icons = [1, 3, 19, 18, 15, 20];//需要显示的动画表情
            // var icons = [1 , 2 , 3, 4 , 6 , 7]; //过年表情更换
            return icons;
        };


        EndRoomLayer.prototype.initWithJsonStr = function (data) {
            cc.log("data:" + data);
            /*

             json["ownerid"] = player.uid;
             json["ownername"] = player.name;
             json["time_left"] = time;
             json["players"] = [];
             for (var i = 0; i < jpacket.onlinechairid.length; i++) {
             var seatid = jpacket.onlinechairid[i];
             var p = MJModel.players[seatid];
             var d = {}
             d["uid"] = p.uid;
             d["name"] = p.name + "";
             d["avatar"] = p.avatar;
             d["state"] = 0;
             json["players"].push(d);
             }
             */
            var self = this;
            var size = cc.director.getWinSize();

            var layout = new ccui.Layout();
            layout.setContentSize(size);
            layout.setAnchorPoint(cc.p(0, 0));
            layout.setPosition(cc.p(0, 0));
            layout.setTouchEnabled(true);
            layout.setSwallowTouches(true);
            layout.addClickEventListener(function (btn) {
            });
            this.addChild(layout);

            var uiJson = ccs.load(getResPath("RoomMJ/mj_public/jiesanfangjian.json"));
            var rootNode = uiJson.node;
            this._bg = rootNode.getChildByName("jiesantoupiao");
            this._bg.removeFromParent();
            this._bg.setPosition(size.width / 2, size.height / 2);
            this.addChild(this._bg);
            var json = JSON.parse(data);

            this._ownerid = json["ownerid"];

            if (MJModel.mj_isFZB && MJModel.getPosByUID(this._ownerid) != 0) {
                this._bg.getChildByName("tip1").setString("玩家 " + MJModel.getPosByUID(this._ownerid) + " 正在申请解散房间，全部同意后房间会被解散");
            } else {
                this._bg.getChildByName("tip1").setString("玩家 " + json["ownername"] + " 正在申请解散房间，全部同意后房间会被解散");
            }
            this._bg.getChildByName("tip1").ignoreContentAdaptWithSize(true);

            this._time_loading = this._bg.getChildByName("time_loading");
            this._time_label = this._bg.getChildByName("time_label").getChildByName("text");
            this._time_label.ignoreContentAdaptWithSize(true);

            //init button
            {
                var btns_node = this._bg.getChildByName("btns");
                var cs = btns_node.getChildren();
                for (var i in cs) {
                    var btn = cs[i];
                    if (btn) {
                        btn.addClickEventListener(function (sender, evt) {
                            self.btnsCallBack(sender);
                        });
                        this.btns[btn.getName()] = btn;
                    }
                }
            }

            var allL = json["players"].length;
            if (allL <= 0)return;
            var useLayer = null;
            var pos = [];
            if (allL % 2 != 0) {
                useLayer = this._bg.getChildByName("player3");
                if (allL == 1) {
                    pos.push(1);
                } else if (allL == 3) {
                    pos.push(0);
                    pos.push(1);
                    pos.push(2);
                }
            } else {
                useLayer = this._bg.getChildByName("player4");
                if (allL == 2) {
                    pos.push(1);
                    pos.push(2);
                } else if (allL == 4) {
                    pos.push(0);
                    pos.push(1);
                    pos.push(2);
                    pos.push(3);
                }
            }

            var realIndex = 0;
            for (var i = 0; i < json["players"].length; i++) {
                var uid = json["players"][i]["uid"];
                if (uid == this._ownerid) {
                    // continue;
                    json["players"][i]["state"] = 3;
                }
                var item = this.addItem(json["players"][i]["avatar"], json["players"][i]["name"], uid);
                var state = json["players"][i]["state"];
                this.items[uid] = item;
                var item_node = useLayer.getChildByName("player" + pos[realIndex]);
                item_node.addChild(item);
                realIndex++;
                if (state != 0) {
                    this.updateState(uid, state);
                    continue;
                }
                // if (state == 2) {
                //     this.updateState(uid, 2);
                //     continue;
                // }

                if (uid == ZJHModel.getInstance().uid) {
                    this.showChoose(true);
                } else {
                    //this.updateState(uid, 0);
                }
            }

            this._cur_time = json["time_left"];
            this._all_time = json["time_all"];
            this.showTimer();
        };

        EndRoomLayer.prototype.addItem = function (avatars, names, uid) {
            var uiJson = ccs.load(getResPath("RoomMJ/mj_public/jiesanfangjian_item.json"));
            var node = uiJson.node;
            var avatar = node.getChildByName("avatar");
            var m_pAvatar = null;
            var pos = MJModel.getPosByUID(uid);
            if (pos != 0 && MJModel.mj_isFZB && !MJModel.isOnVideo) {
                m_pAvatar = createCircleAvatarBypng(getResPath("pingdingshanmj/head_room2.png"), "Avatars/user4_unlogin.png", "Avatars/user4_unlogin.png", cc.size(85, 85));
            } else {
                m_pAvatar = Utils.createCircleAvatar(avatars, "Avatars/user4_unlogin.png", "Avatars/user4_unlogin.png", cc.size(85, 85));
            }
            avatar.removeAllChildren();
            avatar.addChild(m_pAvatar);
            if (pos != 0 && MJModel.mj_isFZB && !MJModel.isOnVideo) {
                node.getChildByName("name").setString(__String.createWithFormat("玩家%1", pos));
            } else {
                node.getChildByName("name").setString(Utils.parseName(6, names));
            }
            node.getChildByName("name").ignoreContentAdaptWithSize(true);
            return node;
        };


        MJRecordDetail.prototype.updateAvatar = function (pos) {
            var headIcon = this.headIcons[pos];
            var seatid = MJModel.getSeatidByPos(pos);
            var player = MJModel.players[seatid];
            var headPic = null;
            if (pos != 0 && MJModel.mj_isFZB && !MJModel.isOnVideo) {
                headPic = createCircleAvatarBypng(getResPath("pingdingshanmj/head_room2.png"), getResPath("RoomMJ/mj_public/common/dialog/zhanji/head_default.png"), "Avatars/user4_unlogin.png", cc.size(85, 85));
            } else {
                headPic = Utils.createCircleAvatar(player.avatar, getResPath("RoomMJ/mj_public/common/dialog/zhanji/head_default.png"), "Avatars/user4_unlogin.png", cc.size(85, 85));
            }
            Utils.findNode(headIcon, "head").addChild(headPic);

            var nameText = Utils.findNode(headIcon, "text");
            nameText.ignoreContentAdaptWithSize(true);
            if (player.name != "") {
                Utils.findNode(headIcon, "nameBg").setVisible(true);
                if (pos != 0 && MJModel.mj_isFZB && !MJModel.isOnVideo) {
                    nameText.setString(Utils.parseName(6, __String.createWithFormat("玩家%1", pos)));
                } else {
                    nameText.setString(Utils.parseName(6, player.name));
                }
            } else {
                Utils.findNode(headIcon, "nameBg").setVisible(false);
            }
        };


        PlayerInfo.prototype.updateInfo = function () {
            var hasnocity = false;
            var hastoonear = false;
            var playerNums = 4;
            if (MJModel.mj_roomType == 1) {
                playerNums = 3;
            } else if (MJModel.mj_roomType == 2) {
                playerNums = 2;
            }
            for (var i = 0; i < playerNums; i++) {
                var player = MJModel.players[i];
                var playerData = this.getPlayerData(player.uid);
                var pos = MJModel.getPosBySeatid(i);
                var playerUI = this.players.getChildByName("player" + pos);
                var avatar = playerUI.getChildByName("avatar");
                var name = playerUI.getChildByName("name");
                var city = playerUI.getChildByName("city");
                city.stopAllActions();
                avatar.removeAllChildren();
                name.setString("");
                name.ignoreContentAdaptWithSize(true);

                city.setString("");
                city.ignoreContentAdaptWithSize(true);
                if (player.uid <= 0) {
                    city.setString("");
                    var m_pAvatar = new cc.Sprite("Avatars/user4_unlogin.png");
                    m_pAvatar.setScale(85 / m_pAvatar.getContentSize().width, 85 / m_pAvatar.getContentSize().height);
                    avatar.addChild(m_pAvatar);
                } else {
                    var m_pAvatar = null;
                    if (pos != 0 && MJModel.mj_isFZB && !MJModel.isOnVideo) {
                        m_pAvatar = createCircleAvatarBypng(getResPath("pingdingshanmj/head_room2.png"), "Avatars/user4_unlogin.png", "Avatars/user4_unlogin.png", cc.size(85, 85));
                    } else {
                        m_pAvatar = Utils.createCircleAvatar(player.avatar, "Avatars/user4_unlogin.png", "Avatars/user4_unlogin.png", cc.size(85, 85));
                    }
                    avatar.addChild(m_pAvatar);

                    if (pos != 0 && MJModel.mj_isFZB && !MJModel.isOnVideo) {
                        name.setString(__String.createWithFormat("玩家%1", pos));
                    } else {
                        name.setString(Utils.parseName(8, player.name));
                    }
                    //city.setColor(cc.color(255, 255, 255));
                    if (this.isNoData(playerData)) {
                        hasnocity = true;
                        //city.setColor(cc.color(255, 0, 0));
                        city.setString("未检测到位置");
                        //city.runAction(cc.sequence(cc.moveBy(0.5, cc.p(0, 5)), cc.moveBy(0.5, cc.p(0, -5))).repeatForever());
                    } else {
                        city.setString(Utils.parseName(10, playerData.city));
                    }
                }
            }
            var cs = this.julitips.getChildren();
            for (var i in cs) {
                var tips = cs[i];
                if (!tips)continue;
                var name = tips.getName();
                var ps = name.split("_");
                var label = tips.getChildByName("num");
                var s1 = MJModel.getSeatidByPos(parseInt(ps[0]));
                var s2 = MJModel.getSeatidByPos(parseInt(ps[1]));
                var p1 = MJModel.players[s1];
                var p2 = MJModel.players[s2];

                tips.getChildByName("hong").setVisible(false);
                tips.getChildByName("lv").setVisible(false);
                tips.getChildByName("hong").setScaleX(1);
                tips.getChildByName("lv").setScaleX(1);
                tips.getChildByName("hong").stopAllActions();
                tips.getChildByName("lv").stopAllActions();
                label.setString("");
                label.ignoreContentAdaptWithSize(true);

                if (!p1 || !p2 || p1.uid <= 0 || p2.uid <= 0) {
                    continue;
                }

                var playerData1 = this.getPlayerData(p1.uid);
                var playerData2 = this.getPlayerData(p2.uid);

                if (this.isNoData(playerData1)) {
                    continue;
                }

                if (this.isNoData(playerData2)) {
                    continue;
                }

                if (playerData1.city != playerData2.city) {
                    continue;
                }

                var dis = Utils.getDistance(playerData1.latitude, playerData1.longitude, playerData2.latitude, playerData2.longitude);
                tips.setVisible(true);
                if (dis >= 1000) {
                    var tip = tips.getChildByName("lv");
                    tip.setVisible(true);
                    var dis_f = parseFloat(dis / 1000);
                    label.setString(dis_f.toFixed(1) + "千米");
                    tip.setScaleX((label.getContentSize().width + 20) / tip.getContentSize().width);
                    label.setScaleX(1 / tip.getScaleX());
                } else {
                    label.setString(dis + "米");
                }

                if (dis <= 100) {
                    tips.getChildByName("hong").setVisible(true);
                    //tip.runAction(cc.sequence(cc.moveBy(0.5, cc.p(0, 5)), cc.moveBy(0.5, cc.p(0, -5))).repeatForever());
                    hastoonear = true;
                } else {
                    tips.getChildByName("lv").setVisible(true);
                }
            }

            this.warningTip.setVisible(false);
            this.btns["jieshan"].setVisible(false);
            this.btns["continue"].setVisible(false);
            this.warningTip.stopAllActions();
            if (hasnocity || hastoonear) {
                this.warningTip.setVisible(true);
                this.btns["jieshan"].setVisible(true);
                this.btns["continue"].setVisible(true);
                this.warningTip.runAction(cc.sequence(cc.delayTime(1), cc.hide(), cc.delayTime(0.1), cc.show()).repeatForever());
                this.warningTip.ignoreContentAdaptWithSize(true);
                if (hasnocity && hastoonear) {
                    this.warningTip.setString("* 发现距离过近、未检测到位置的玩家，是否解散？");
                } else if (hasnocity) {
                    this.warningTip.setString("* 发现未检测到位置的玩家，是否解散？");
                } else if (hastoonear) {
                    this.warningTip.setString("* 发现距离过近的玩家，是否解散？");
                }
            }

            MJModel.mj_table.room_Action.updateGPSTip(hasnocity, hastoonear);
            if (MJModel.mj_table.pre_scene) {
                MJModel.mj_table.pre_scene.updateGPSTip(hasnocity, hastoonear);
            }
        };


        MJPublic.prototype.leftcardcount = null;
        MJPublic.prototype.initPublic = function () {
            var size = cc.director.getWinSize();
            var uiJson = ccs.load(getResPath("pingdingshanmj/mj_public/gameHead_0.json"));
            var uiNode = uiJson.node;
            uiNode.setPosition(size.width / 2, size.height);
            this.addChild(uiNode);
            this.rootNode = uiNode;

            this.schedule(this.updatePower, 60.0);
            this.schedule(this.updateTime, 60.0);

            var self = this;
            this.code = uiNode.getChildByName("code");
            this.code.ignoreContentAdaptWithSize(true);
            this.jushu = uiNode.getChildByName("jushu");
            this.jushu.ignoreContentAdaptWithSize(true);
            this.time = uiNode.getChildByName("time");
            this.time.ignoreContentAdaptWithSize(true);
            this.power = uiNode.getChildByName("power");
            this.roomConfig = uiNode.getChildByName("roomConfig");
            this.roomConfig.ignoreContentAdaptWithSize(true);
            this.roomConfig.setString("");
            this.roomConfig2 = uiNode.getChildByName("roomConfig2");
            this.roomConfig2.ignoreContentAdaptWithSize(true);
            this.roomConfig2.setString("");
            this.bg_up = uiNode.getChildByName("bg_up");
            this.bg_down = uiNode.getChildByName("bg_down");

            this.cardNumView = uiNode.getChildByName("card_num_bg");
            this.cardNumView.setPosition(uiNode.convertToNodeSpace(cc.p(100, size.height - 55)));
            this.cardNumText = this.cardNumView.getChildByName("card_num");
            this.cardNumText.ignoreContentAdaptWithSize(true);
            this.cardNumText.setString(0);
            this.showCardNum(-1);

            this.leftcardcount = uiNode.getChildByName("leftCard");
            this.leftcardcount.ignoreContentAdaptWithSize(true);
            this.leftcardcount.setString("");

            if (!MJModel.isOnVideo) {
                var roomId = "房号:" + MJModel.roomData["gameRoom"]["code"];
                this.code.setString(roomId);

                this.updateJuShu();
                this.updateTime();
                this.updatePower();

                var _listener_end = cc.EventListener.create({
                    event: cc.EventListener.CUSTOM,
                    eventName: "notify_game_check_end",
                    callback: function (evt) {
                        self.updateJuShu();
                    }
                });
                if (_listener_end) cc.eventManager.addListener(_listener_end, this);
            } else {
                this.time.setVisible(false);
                this.power.setVisible(false);
                this.rootNode.getChildByName("netTip").setVisible(false);
            }

            //btn
            {
                this.btns = [];
                var btnLayer = uiNode.getChildByName("btns");
                var cs = btnLayer.getChildren();
                for (var i in cs) {
                    var btn = cs[i];
                    if (btn) {
                        btn.addClickEventListener(function (sender, evt) {
                            self.actionCallBack(sender);
                        });
                        this.btns[btn.getName()] = btn;
                    }
                }
            }


            var _listener_config = cc.EventListener.create({
                event: cc.EventListener.CUSTOM,
                eventName: "notify_mjpublic_roomConfig",
                callback: function (evt) {
                    var msg = evt.getUserData();
                    self.updateRoomConfig(msg);
                }
            });
            if (_listener_config) cc.eventManager.addListener(_listener_config, this);

            var layout_hide = new ccui.Layout();
            layout_hide.setContentSize(size);
            layout_hide.setAnchorPoint(cc.p(0.0, 0));
            layout_hide.setPosition(0, 0);
            layout_hide.setTouchEnabled(true);
            layout_hide.setSwallowTouches(false);
            layout_hide.setVisible(false);
            layout_hide.addClickEventListener(function (sender, type) {
                self.hide();
            });
            MJModel.mj_table.addChild(layout_hide, 1000000);
            this.layout_hide = layout_hide;
        };

        MJPublic.prototype.showCardNum = function (num) {
            //cc.log("showCardNum ===" + MJModel.mj_table_view + " num:"+ num);
            selfTabel.leftCardNum = num;
            if (num >= 0) {
                if (MJModel.mj_table_view == "2d") {
                    this.cardNumView.setVisible(false);
                    this.cardNumText.setString(num);
                    selfTabel.cardNumLab.setString(num);
                    // if(MJModel.roomState >= 1){
                    //     self.cardNumBg.setVisible(true);
                    // }else{
                    //     self.cardNumBg.setVisible(false);
                    // }

                } else {
                    if (this.leftcardcount) {
                        //this.leftcardcount.setVisible(true);
                        this.leftcardcount.setString("剩:" + num + "张");
                    }

                    this.cardNumView.setVisible(false);
                    this.cardNumText.setString(num);
                    if (selfTabel.cardNumBg && selfTabel.cardNumLab) {
                        selfTabel.cardNumLab.setString(0);
                        selfTabel.cardNumBg.setVisible(false);
                    }
                }
            } else {
                if (this.leftcardcount) {
                    this.leftcardcount.setVisible(false);
                    this.leftcardcount.setString("");
                }

                this.cardNumText.setString(0);
                this.cardNumView.setVisible(false);
                if (MJModel.mj_table_view == "2d") {
                    if (selfTabel.cardNumBg && selfTabel.cardNumLab) {
                        selfTabel.cardNumLab.setString(0);
                        3
                        selfTabel.cardNumBg.setVisible(false);
                    }
                }
            }
        };
        MJPublic.prototype.showJuShuTip = function () {
            //cc.log("showJuShuTip ===" + MJModel.mj_table_view);
            if (MJModel.mj_table_view == "2d" && MJModel.roomState >= 1) {
                this.jushu.setVisible(false);
                selfTabel.jushuNumLab.setString(MJModel.RoomCountSum - MJModel.currentCount);
                // if(MJModel.roomState >= 1){
                //     self.jushuNumBg.setVisible(true);
                // }else{
                //     self.jushuNumBg.setVisible(false);
                // }
            } else {
                this.jushu.setString("剩: " + (MJModel.RoomCountSum - MJModel.currentCount) + " 局");
                //this.jushu.setVisible(true);
                if (selfTabel.jushuNumBg && selfTabel.jushuNumBg.isVisible()) {
                    selfTabel.jushuNumBg.setVisible(false);
                }
            }
        };

    },


    initSetting: function () {


        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };


        Setting.prototype.initUI = function () {
            var uiJson = ccs.load(getResPath("pingdingshanmj/mj_public/setting_0.json"));
            var uiNode = uiJson.node;
            var self = this;
            var size = cc.director.getWinSize();
            var bg = uiNode.getChildByName("bg");
            bg.removeFromParent();
            bg.setPosition(size.width / 2, size.height / 2);
            this.addChild(bg);
            this._bg = bg;
            this._settingLayer = bg.getChildByName("setting");
            this._gameSettingLayer = bg.getChildByName("gamesetting");

            //init button
            {
                var btns_node = bg.getChildByName("btns");
                var cs = btns_node.getChildren();
                for (var i in cs) {
                    var btn = cs[i];
                    if (btn) {
                        btn.addClickEventListener(function (sender, evt) {
                            self.btnsCallBack(sender);
                        });
                        this.btns[btn.getName()] = btn;
                    }
                }
            }

            this.initSetting();
            this.initGameSetting();
            this.showPaiBanView(MJModel.mj_table_view == "2d");
        };

        Setting.prototype.initSetting = function () {
            var self = this;

            //init slider
            {
                var btns_node = this._settingLayer.getChildByName("slider");
                var cs = btns_node.getChildren();
                for (var i in cs) {
                    var btn = cs[i];
                    if (btn) {
                        btn.addEventListener(function (slider, event) {
                            self.setting_slidersCallBack(slider, event);
                        });

                        if (btn.getName() == "yinxiao") {
                            btn.setPercent(ZJHModel.getInstance().sound * 100);
                        }

                        if (btn.getName() == "yinyue") {
                            btn.setPercent(ZJHModel.getInstance().bgMusic * 100);
                        }

                        if (btn.getName() == "liangdu") {
                            // btn.setPercent(MJModel.card_luminance);
                            cc.log("lin=initSetting=" + (MJModel.cardLight * 100));
                            btn.setPercent(MJModel.cardLight * 100);
                        }
                    }
                }
            }

            //init checkboxs
            {
                var btns_node = this._settingLayer.getChildByName("checkbox");
                var cs = btns_node.getChildren();
                for (var i in cs) {
                    var btn = cs[i];
                    if (btn) {
                        btn.addEventListener(function (slider, event) {
                            self.setting_selectedStateEvent(slider, event);
                        });
                        this.checkboxs_setting[btn.getName()] = btn;
                    }

                    btn.setEnabled(true);
                    btn.setSelected(false);

                    if (btn.getName().indexOf(MJModel.fangyan) != -1) {
                        btn.setSelected(true);
                        btn.setEnabled(false);
                    }

                    if (btn.getName().indexOf(MJModel.yinyue) != -1) {
                        btn.setSelected(true);
                        btn.setEnabled(false);
                    }
                }
            }

            this.checkboxs_setting["zhendong"].setSelected(ZJHModel.getInstance().vibrate == 1);
            this.checkboxs_setting["hudong"].setSelected(MJModel.hudong == 1);

            this.doSupportFangYan();
            this.doSupportYinYue();

        };

        Setting.prototype.btnsCallBack = function (sender) {
            var name = sender.getName();
            if (name == "close") {
                this.removeFromParent();
                MJModel.saveGameSetting();
            } else if (name == "gamesetting") {
                this._settingLayer.setVisible(false);
                this._gameSettingLayer.setVisible(true);
                this.btns["gamesetting"].setEnabled(false);
                this.btns["setting"].setEnabled(true);
            } else if (name == "setting") {
                this._settingLayer.setVisible(true);
                this._gameSettingLayer.setVisible(false);
                this.btns["gamesetting"].setEnabled(true);
                this.btns["setting"].setEnabled(false);
            }
        };

        Setting.prototype.gamesetting_btnsCallBack = function (sender) {
            var name = sender.getName();
            if (name == "more") {
            } else if (name == "reset") {
                this.mj_font = "xieshi";
                this.mj_fontSize = "dahao";
                this.mj_light = "baitian";
                this.mj_style = "shishang";
                this.mj_paiban = "horizontal";
                this.mj_table_view = "2d";
                this.gamesetting_reset();
            } else if (name == "ok") {
                MJModel.mj_font = this.mj_font;
                MJModel.mj_fontSize = this.mj_fontSize;
                MJModel.mj_light = this.mj_light;
                MJModel.mj_style = this.mj_style;
                MJModel.mj_paiban = this.mj_paiban;
                MJModel.mj_table_view = this.mj_table_view;

                this.removeFromParent();
                MJModel.saveGameSetting();
                MJModel.mj_table.reflashSetting();
            }
        };

        Setting.prototype.setting_slidersCallBack = function (slider, event) {
            var name = slider.getName();
            if (name == "yinxiao") {
                var s = slider.getPercent() / 100.0;
                cc.audioEngine.setEffectsVolume(s);
                if (event == 2) {
                    cc.sys.localStorage.setItem("sound", s);
                    ZJHModel.getInstance().sound = s;
                    JsUtils.postNotifi("save_setting");
                }
            } else if (name == "yinyue") {
                var s = slider.getPercent() / 100.0;
                cc.audioEngine.setMusicVolume(s);
                if (event == 2) {
                    cc.sys.localStorage.setItem("bgMusic", s);
                    ZJHModel.getInstance().bgMusic = s;
                    JsUtils.postNotifi("save_setting");
                }
            } else if (name == "liangdu") {
                // var num = slider.getPercent();
                // var delta = num - MJModel.card_luminance;
                // if (delta > 5 || delta < -5) {
                //     cc.sys.localStorage.setItem("card_luminance", num);
                //     MJModel.card_luminance = num;
                //     var color = MJModel.num_to_color(num);
                //     MJModel.mj_table.room_Card.reflashCardLuminance(color);
                // }
                var s = slider.getPercent() / 100.0;
                if (Math.abs(s - MJModel.cardLight) >= 0.05) {
                    MJModel.cardLight = s;
                    MJModel.mj_table.room_Card.reflashAllCardColor();
                }
                cc.sys.localStorage.setItem("cardLight", s);
            }
        };
    },

    initTips: function () {
        MJTips.prototype.ShowGameState = function (type) {
            if (type == 1) return;
            this.showGameStateEffect(type);
        };

        // MJTips.prototype.faces = ["effects_zzmjbq_sweat", "effects_zzmjbq_laugh", "effects_zzmjbq_crazy", "effects_zzmjbq_affect",
        //     "effects_zzmjbq_surprised", "effects_zzmjbq_angry","effects_zzmjbq_praise", "effects_zzmjbq_lewd",
        //     "effects_zzmjbq_shy","effects_zzmjbq_smile","effects_zzmjbq_cry","effects_zzmjbq_vomit",
        //     "effects_zzmjbq_sad","effects_zzmjbq_great","effects_zzmjbq_proud","effects_zzmjbq_mat"];
        //
        //
        // MJTips.prototype.showFaceSelf = function (type, pos) {
        //     try {
        //         cc.log("type:" + type + ";name:" + this.faces[type]);
        //         ccs.armatureDataManager.addArmatureFileInfo(getResPath("pingdingshanmj/effect/face/face" + type + "/" + this.faces[type] + ".ExportJson"));
        //         var begin = MJConfig.getPlayerPos(pos);
        //         if(MJModel.mj_table.pre_scene){
        //             begin = MJModel.mj_table.pre_scene.getPlayerPos(pos);
        //         }
        //         var armature = new ccs.Armature(this.faces[type]);
        //         if (armature) {
        //             var animation = armature.getAnimation();
        //             if (animation) {
        //                 if (typeof animation.playWithIndex === "function") {
        //                     animation.playWithIndex(0,-1,0);
        //                     armature.setPosition(begin);
        //                     armature.setScale(1.5);
        //                     MJModel.mj_table.addChild(armature, 10000);
        //                 }
        //             }
        //         }
        //     } catch (e) {
        //         Log(this, e);
        //     }
        // };

    },


    reflashSetting: function (isInit) {
        this._super(isInit);
        if (isInit)  return;
        if (MJModel.mj_table_view == "2d") {
            if (this.cardNumBg && this.cardNumLab && MJModel.roomState >= 1) {
                if (!this.piaoState) {
                    this.cardNumBg.setVisible(true);
                }
                this.cardNumLab.setString(this.leftCardNum);
            }
            if (this.jushuNumBg && this.jushuNumLab && MJModel.roomState >= 1) {
                if (!this.piaoState) {
                    this.jushuNumBg.setVisible(true);
                }
                this.jushuNumLab.setString(MJModel.RoomCountSum - MJModel.currentCount);
            }

            if (this.roomPublic.cardNumView && this.roomPublic.cardNumText) {
                this.roomPublic.cardNumView.setVisible(false);
                this.roomPublic.cardNumText.setString("");
            }

            if (this.roomPublic.leftcardcount) {
                this.roomPublic.leftcardcount.setString("");
            }

            if (this.roomPublic.jushu) {
                this.roomPublic.jushu.setString("");
            }

        } else {
            if (this.cardNumBg) {
                this.cardNumBg.setVisible(false);
            }
            if (this.jushuNumBg) {
                this.jushuNumBg.setVisible(false);
            }

            if (this.roomPublic.leftcardcount) {
                if (!this.piaoState) {
                    this.roomPublic.leftcardcount.setVisible(true);
                }
                this.roomPublic.leftcardcount.setString("剩:" + this.leftCardNum + "张");
            }

            if (this.roomPublic.cardNumView && this.roomPublic.cardNumText) {
                this.roomPublic.cardNumView.setVisible(false);
                this.roomPublic.cardNumText.setString(this.leftCardNum);
            }
            if (this.roomPublic.jushu) {
                if (!this.piaoState) {
                    this.roomPublic.jushu.setVisible(true);
                }
                this.roomPublic.jushu.setString("剩: " + (MJModel.RoomCountSum - MJModel.currentCount) + " 局");
            }
        }
    },


    updateBg: function (isInit) {
        if (isInit == undefined)isInit = false;
        var size = cc.director.getWinSize();
        var bgRes = this.getBgStr();
        if (MJModel.mj_style == "shishang") {
            bgRes = __String.createWithFormat("pingdingshanmj/cards/%1_%2.png", MJModel.mj_style, MJModel.mj_table_view);
        }
        if (this.bg == null) {
            this.bg = new ccui.ImageView(getResPath(bgRes));
            this.bg.setAnchorPoint(cc.p(0.5, 0.5));
            this.bg.setContentSize(size);
            this.bg.setScale9Enabled(true);
            this.bg.setPosition(size.width / 2, size.height / 2);
            this.addChild(this.bg, -100);
        } else {
            this.bg.loadTexture(getResPath(bgRes));
        }
        var cardsRes1 = __String.createWithFormat("RoomMJ/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view);
        var cardsRes2 = __String.createWithFormat("pingdingshanmj/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view);
        if (MJModel.mj_font == "jianjie" && MJModel.mj_fontSize == "dahao") {
            Utils.removeSpriteFram(cardsRes1);
            Utils.addCardSprites(cardsRes2);
        } else {
            Utils.removeSpriteFram(cardsRes2);
            Utils.addCardSprites(cardsRes1);
        }
        if (MJModel.mj_font == "jianjie" && MJModel.mj_fontSize == "dahao") {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "pingdingshanmj/config/card_config.json" : "pingdingshanmj/config/card_config2d.json");
        } else {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config.json" : "RoomMJ/config/card_config2d.json");
        }
        if (isInit)return;
        this.room_Card.reflashAllCardUI();
        this.players[3].setPosition(MJConfig.getPlayerPos(3));
        if (this.room_Info)this.room_Info.reflash();
    },


    getBgStr: function () {
        return __String.createWithFormat("pingdingshanmj/bgs/%1_%2.png", MJModel.mj_style, MJModel.mj_table_view);
    },

    handler_gang_scores: function (scores, OpType, OpType2, canDelay) {

    },


    _handler_server_laizi_bc: function (data, canDelay) {
        var packet = parsePacket("proto.game.pingdingshanmj.AckLaiziCard", data);
        var self = this;
        var curLaizi = packet.opencard;
        var laizi = packet.laizicard;
        var laizi1 = packet.laizicard2;
        // cc.log("pingdingshan laizi="+laizi,laizi1);
        //var cardLeft = packet.cardnum;
        //this.room_Info.showCardNums(cardLeft);
        this._setLaizi(curLaizi, laizi, laizi1, canDelay ? true : false);
        if (canDelay == false) {
            this._showHandcardFlag(false);
            this.room_Card.reflashHandCard(0, true);
            this.room_Card.reflashHandCard(1, true);
            this.room_Card.reflashHandCard(2, true);
            this.room_Card.reflashHandCard(3, true);
            return;
        }
        MJModel.isEnterWait = true;

        var move_end = cc.callFunc(function () {
            self._showHandcardFlag(false);

            var mo_card = null;
            if (self.room_Card.isDuoPai(0)) {
                mo_card = self.room_Card.hand_card[0][self.room_Card.hand_card[0].length - 1];
                self.room_Card.hand_card[0].splice(self.room_Card.hand_card[0].length - 1, 1);
            }

            var allPreCars = [];
            var allLaiZi = [];
            var dd = 0;

            for (var i = self.room_Card.hand_card[0].length - 1; i >= 0; i--) {
                var card = self.room_Card.hand_card[0][i];
                if (card.getValue() == curLaizi) {
                    allLaiZi.push(card);
                } else {
                    if (allLaiZi.length > 0) {
                        break;
                    }
                    allPreCars.push(card);
                }
            }

            if (allLaiZi.length > 0 && allPreCars.length > 0) {
                var allDelay = 0;
                for (var i = 0; i < allLaiZi.length; i++) {
                    var card = allLaiZi[i];
                    var begin_pos = card.getPosition();
                    var end_pos = MJConfig.getHandCardPos(0, self.room_Card.hand_card[0].length - 1 - i, self.room_Card.hand_card[0].length, self.room_Card.isDuoPai(0));
                    var allL = Math.abs(end_pos.x - begin_pos.x);

                    //if (MJModel.outCardEffect_style == 0 || true) {
                    var time = allL / 1000;
                    if (time < 0.17) time = 0.17;
                    if (time > 0.3) time = 0.3;
                    card.runAction(cc.sequence(cc.spawn(cc.rotateTo(0.1, 15), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + 100))), cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y + 100)).easing(cc.easeSineOut()), cc.spawn(cc.rotateTo(0.1, 0), cc.moveTo(0.17, end_pos))));
                    allDelay += 1;
                }
                for (var i = 0; i < allPreCars.length; i++) {
                    var card = allPreCars[i];
                    //card.runAction(cc.sequence(cc.moveBy(0.3, cc.p(83, 0)), cc.delayTime(1 - 0.3)).repeat(allLaiZi.length));
                    card.runAction(cc.moveBy(0.3, cc.p(83 * allLaiZi.length, 0)));
                }

                var callback = cc.callFunc(function () {
                    MJModel.isEnterWait = false;
                    self.room_Card.reflashHandCard(0, true);
                    if (mo_card) {
                        mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                        self.room_Card.hand_card[0].push(mo_card);
                    }
                });
                self.runAction(cc.sequence(cc.delayTime(0.5), callback));
            } else {
                MJModel.isEnterWait = false;
                self.room_Card.reflashHandCard(0, true);
                if (mo_card) {
                    mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                    self.room_Card.hand_card[0].push(mo_card);
                }
            }
        });
        this.runAction(cc.sequence(cc.delayTime(1), move_end));
    },

    isJokerValue: function (value) {
        if (this._curLaizi > 0) {
            if (value == this._curLaizi) {
                return true;
            }
            if (value == this._curLaizi2) {
                return true;
            }
        }
        return false;
    },


    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.value;
            if (typeof b === "object") bv = b.value;
            if (this.isJokerValue(av) && !this.isJokerValue(bv))return 1;//赖子放在最前边
            if (!this.isJokerValue(av) && this.isJokerValue(bv))return -1;//赖子放在最前边
            return bv - av;
        } catch (e) {
            return 0;
        }
    },


    _setLaizi: function (laizi, laizipi, laizipi2, gamestart) {
        this._curLaizipi = laizi;
        this._curLaizi = laizipi;
        this._curLaizi2 = laizipi2;

        var size = cc.director.getWinSize();
        if (laizi == null || laizi == undefined || laizi == -1 || laizi == 255) {
            if (this._curLaizi_bg) this._curLaizi_bg.setVisible(false);
            return;
        }
        if (gamestart == undefined) gamestart = false;

        if (this._curLaizi_bg == null) {

            if (this.IsShuang) {
                this._curLaizi_bg = new ccui.ImageView(getResPath("pingdingshanmj/hunpai_bg.png"));
                this._curLaizi_bg.setContentSize(cc.size(100, 90));
                this._curLaizi_bg.setPosition(cc.p(0, size.height - 40));
            } else {
                this._curLaizi_bg = new ccui.ImageView(getResPath("pingdingshanmj/guipai_bg.png"));
                this._curLaizi_bg.setPosition(cc.p(25, size.height - 40));
                this._curLaizi_bg.setContentSize(cc.size(75, 100));
            }


            this.addChild(this._curLaizi_bg, 200);
        }
        this._curLaizi_bg.setScale9Enabled(true);
        this._curLaizi_bg.setAnchorPoint(cc.p(0, 1));
        this._curLaizi_bg.removeAllChildren();
        this._curLaizi_bg.setVisible(true);

        if (this._curLaizipi > 0) {
            var card = new MJCard();
            if (gamestart) {
                card.setValue(this._curLaizipi, 0, CardType.Card_Hand, 0);
            } else {
                card.setValue(this._curLaizi, 0, CardType.Card_Hand, 0);
            }

            var scale1 = 0.6;
            // if(this._JokerType == GUI_TYPE.LAIZI_FAN_DOUBLE_JOKER || this._JokerType == GUI_TYPE.LAIZI_COMMON_DOUBLE_JOKER){
            //     scale1 = 0.5;
            // }
            card.setPosition(cc.p(this._curLaizi_bg.getContentSize().width / 2, this._curLaizi_bg.getContentSize().height / 2));
            card.setScale(scale1);

            if (this.IsShuang) {
                var card2 = new MJCard();
                card2.setValue(this._curLaizi2, 0, CardType.Card_Hand, 0);
                card2.setPosition(cc.p(85, 40));
                card2.setScale(scale1);
                this._curLaizi_bg.addChild(card2, 1);
                this.room_Card.other_card.push(card2);

                card.setPosition(cc.p(30, 40));
            }
            //card.setStoreColor(cc.color(255, 249, 137));
            this._curLaizi_bg.addChild(card);
            this.room_Card.other_card.push(card);


            if (gamestart) {
                var dl = 0;
                var ppos = card.getPosition();
                card.setScale(0);
                card.setVisible(false);
                if (this.IsShuang) {
                    card2.setVisible(false);
                }
                var self = this;
                var callFunc = cc.CallFunc(function () {
                    self._showLaizi_effect("赖子皮");
                });
                var callFunc1 = cc.CallFunc(function () {
                    card.setValue(self._curLaizi, 0, CardType.Card_Hand, 0);
                });


                card.setPosition(cc.p(size.width / 2 - this._curLaizi_bg.getPositionX() + this._curLaizi_bg.getContentSize().width / 2, size.height / 2 - this._curLaizi_bg.getPositionY() + this._curLaizi_bg.getContentSize().height / 2));

                if (this.IsShuang) {
                    var callFunc2 = cc.CallFunc(function () {
                        card2.setVisible(true);
                    });

                    card.runAction(cc.sequence(cc.delayTime(0 + dl), cc.show(), callFunc, cc.scaleTo(0.1, 2), cc.delayTime(1.0), cc.spawn(cc.moveTo(0.17, ppos), callFunc1, cc.scaleTo(0.17, scale1), callFunc2)));
                } else {
                    card.runAction(cc.sequence(cc.delayTime(0 + dl), cc.show(), callFunc, cc.scaleTo(0.1, 2), cc.delayTime(1.0), cc.spawn(cc.moveTo(0.17, ppos), callFunc1, cc.scaleTo(0.17, scale1))));
                }
            }
        }
    },


    _showLaizi_effect: function (name) {
        ccs.armatureDataManager.addArmatureFileInfo(getResPath("pingdingshanmj/effect/laizi/effects_mjhunancx.ExportJson"));
        var size = cc.director.getWinSize();
        if (true) {
            var armature = new ccs.Armature("effects_mjhunancx");
            var animation = armature.getAnimation();
            if (animation) {
                if (typeof animation.playWithIndex === "function") {
                    animation.playWithIndex(0, -1, 0);
                    armature.setPosition(cc.p(size.width / 2, size.height / 2));
                    this.addChild(armature, 100);
                    armature.runAction(cc.sequence(cc.delayTime(1.0), cc.removeSelf()));
                }
            }
        }

        Sound.getInstance().playEffect(__String.createWithFormat(getResPath("pingdingshanmj/sound/laizi.mp3")));
        return armature;
    },


    _showHandcardFlag: function (isEndShow) {
        if (MJModel.isOnVideo) {
            for (var j = 0; j < 4; j++) {
                var allcards = this.room_Card.hand_card[j];
                if (allcards) {
                    for (var i = 0; i < allcards.length; i++) {
                        var card = allcards[i];
                        this._checkAddCardFlag(card);
                    }
                }
            }
            return;
        }
        var allcards = this.room_Card.hand_card[0];
        if (allcards) {
            for (var i = 0; i < allcards.length; i++) {
                var card = allcards[i];
                this._checkAddCardFlag(card);
            }
        }
    },
    _checkAddCardFlag: function (card) {
        try {
            if (card.type == CardType.Card_Outing)return;
            if (card.type == CardType.Card_Peng)return;
            // if(card.type == CardType.Card_End)  return;
            if (card.getValue() == 0)return;
            var flag_str = "";
            if (card.getValue() == this._curLaizi || card.getValue() == this._curLaizi2)flag_str = "pingdingshanmj/hun_flag.png";
            if (flag_str != "") {
                // cc.log("pingdingshan come value");
                if (card.getValue() == this._curLaizi || card.getValue() == this._curLaizi2)card.setStoreColor(cc.color(255, 249, 137));
                var p = card.getChildByName("sprite");
                p.removeChildByName("laizi_flag");
                var flag = null;

                flag = new cc.Sprite(getResPath(flag_str));

                var m_size = p.getContentSize();
                if (flag) {
                    flag.setPosition(cc.p(0, m_size.height));
                    flag.setAnchorPoint(cc.p(0, 1));
                    flag.setName("laizi_flag");
                    p.addChild(flag);
                    this._flagDirection(card.pos, flag, m_size);
                    flag.setScale(0.5);
                    if (card.pos == 0 && card.type != CardType.Card_Out)flag.setScale(1);
                }
                return;
            }
        } catch (e) {
            Log(this, e);
        }
    },
    //每个方向角标对应
    _flagDirection: function (pos, flag, m_size) {
        if (MJModel.mj_table_view == "2d") {
            if (MJModel.mj_paiban == "vertical" || pos == 2) {
                return;
            }
        }

        if (MJModel.mj_bg_use == 1) {
            if (pos == 1) {
                flag.setPosition(cc.p(0, 15));
                flag.setRotation(-90);
            } else if (pos == 2) {
                flag.setPosition(cc.p(m_size.width, 5));
                flag.setRotation(180);
            } else if (pos == 3) {
                flag.setPosition(cc.p(m_size.width, m_size.height));
                flag.setRotation(90);
            }
        } else {
            if (pos == 1) {
                flag.setPosition(cc.p(15, 15));
                flag.setRotation(-90);
            } else if (pos == 2) {
                flag.setPosition(cc.p(m_size.width, 15));
                flag.setRotation(180);
            } else if (pos == 3) {
                flag.setPosition(cc.p(m_size.width - 10, m_size.height));
                flag.setRotation(90);
            }
        }

    },

    playerClickCallback: function (pos) {
        var seatid = MJModel.getSeatidByPos(pos);

        if (seatid == MJModel.seatid) {
            if (PackName == "mjnew225d") {
                this.release();
                ZJHModel.getInstance().roomToHall();
            } else {
                sendRecordReq();
            }
        }
        else {
            if (!this.isSupportBigFace) return;
            if (MJModel.seatid == -1) {
                var player = MJModel.players[MJModel.getSeatidByPos(pos)];
                var userInfo = new MJUserInfo();
                userInfo.init(player);
                this.addChild(userInfo, 1000000);
            }
            else {

                if (MJModel.hudong == 0) {
                    return;
                }

                this.showBigfaceMenu(pos);
            }
        }
    },


    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            var ackGameFree = parsePacket("proto.game.pingdingshanmj.tagCurGameScence", jpacket);
            if (ackGameFree.GameSence.RoomConfigID.indexOf(8573001) != -1) {  //上桌之前获取防作弊信息
                MJModel.mj_isFZB = true;
            }
            this.handlerTableInfo(this.tableData);
            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.pingdingshanmj.AckCurGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
            return;
        }

        if (cmd == selfCMD.SERVER_ENSURE_JOKER) {
            this._handler_server_laizi_bc(jpacket, canDelay);
            return;
        }

        if (cmd == selfCMD.SERVER_START_PIAO) {
            this.handler_server_start_piao(jpacket, canDelay);
            return;
        }

        if (cmd == selfCMD.SERVER_BROAD_PIAO) {
            this.handler_server_broad_piao(jpacket, canDelay);
            return;
        }

        this._super(cmd, jpacket, canDelay, svrid);
    },


    handler_server_game_start_bc2: function (data, canDelay) {
        this._super(data, canDelay);
        if (MJModel.mj_table_view == "2d") {
            this.cardNumBg.setVisible(true);
            this.jushuNumBg.setVisible(true);
        } else {
            this.roomPublic.jushu.setVisible(true);
            this.roomPublic.leftcardcount.setVisible(true);
        }
        this.piaoState = false;
    },

    handler_server_end_room_result_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.AckDisbandResult", data);
        var result = jpacket.Result;
        if (result == 1) {
            PlatformHelper.showToast("房间解散成功，3秒后房间自动结束");
        }
        else {
            PlatformHelper.showToast("解散失败，稍后游戏继续！");
        }
        var self = this;
        var callback = cc.callFunc(function () {
            if (self.room_EndTouPiao) self.room_EndTouPiao.removeFromParent(true);
            self.room_EndTouPiao = null;
            MJModel.TouPiaoING = false;
        });
        this.runAction(cc.sequence(cc.delayTime(1.5), callback));
    },


    handler_server_start_piao: function (data, canDelay) {
        cc.log("_handler_start_piao");
        var startPiao = parsePacket("proto.game.pingdingshanmj.AckStartPiao", data);
        MJModel.roomState = 1;
        this.resetGame(false);
        this.room_Info.setVisible(false);
        JsUtils.postNotifi("notify_game_check_end");//为了刷新局数 或者  开始倒计时
        cc.eventManager.dispatchCustomEvent("hide_copy_room");
        if (this.room_Action.actions["yaoqing"]) {
            this.room_Action.actions["yaoqing"].setVisible(false);
        }
        if (this.room_Action.actions["copyshare"]) {
            this.room_Action.actions["copyshare"].setVisible(false);
        }
        if (this.pre_scene) {
            this.pre_scene.removeFromParent(true);
            this.pre_scene = null;
        }

        this.room_Info.showTime(1);

        for (var i = 0; i < MJModel.Play_num; i++) {
            var pos = MJModel.getPosBySeatid(i);
            var player = this.players[pos];
            if (player) {
                player.hidePaofenTip();
            }
        }

        cc.log("pingdingshan flag=" + startPiao.flag);
        if (MJModel.seatid != -1 && canDelay) {
            this.room_Info.showTime(MJModel.piaoTime);
            this.oMJPiao.setVisible(true);
            this.oMJPiao.PiaoImage.setVisible(true);
            if (startPiao.flag == 1) {
                this.oMJPiao.PiaoImage1.setVisible(true);
            }
        }
        this.piaoState = true;
    },

    handler_server_broad_piao: function (data, canDelay) {
        var broadPiao = parsePacket("proto.game.pingdingshanmj.AckBroadPiao", data);
        var seatId = broadPiao.chairid;
        var pos = MJModel.getPosBySeatid(seatId);
        var paoflag = 0;
        if (this.IsGangYing) {
            paoflag = 1;
        }
        cc.log("pingdingshan broad", broadPiao.UserPiao, broadPiao.GangPiao);
        if (!this.IsGangYing) {
            this.players[pos].showPaofenTip(broadPiao.UserPiao, 0);
        } else {
            this.players[pos].showPaofenTip(broadPiao.GangPiao, 1);
            this.players[pos].showPaofenTip(broadPiao.UserPiao, 2);
        }
        if (broadPiao.UserPiao == 0 && broadPiao.GangPiao == 0) {
            this.players[pos].showPaofenTip(0, 0);
        }
        this.piaoTip.showTextTip("");
    },


    handler_server_scene_info_uc: function (guangxi_scene, canDelay) {
        var ackGameFree = guangxi_scene.GameSence;


        if (ackGameFree.RoomConfigID.indexOf(8568002) != -1) {
            this.IsShuang = true;
        }


        if (ackGameFree.RoomConfigID.indexOf(8573001) != -1) {
            MJModel.mj_isFZB = true;
        }

        if (ackGameFree.RoomConfigID.indexOf(85700002) != -1) {
            this.IsGangYing = true;
        }

        if (ackGameFree.RoomConfigID.indexOf(2000001) != -1)MJModel.changMode = 2;
        if (ackGameFree.RoomConfigID.indexOf(2000002) != -1)MJModel.changMode = 1;
        if (ackGameFree.RoomConfigID.indexOf(2000003) != -1)MJModel.changMode = 3;

        if (guangxi_scene.laizicard && guangxi_scene.laizicard > 0) {
            this._setLaizi(guangxi_scene.opencard, guangxi_scene.laizicard, guangxi_scene.laizicard2, false);
        }


        this._super(ackGameFree, canDelay);
        this._setGameType();


        cc.log("pingdingshan gangyin=" + this.IsGangYing);
        if (this.IsGangYing) {
            this.oMJPiao.oPiaoBtnNo.loadTextures(getResPath("pingdingshanmj/action/bugangpao.png"), "", "");
            this.oMJPiao.oPiaoBtnNo1.loadTextures(getResPath("pingdingshanmj/action/buyinpao.png"), "", "");
        }


        var sceneStatus = ackGameFree.SceneStatus;
        this.oMJPiao.setVisible(false);
        this.piaoTip.showTextTip("");

        var paoflag = 0;
        cc.log("pingdingshan 1111=" + guangxi_scene.PiaoFlag);
        if (guangxi_scene.PiaoFlag == 1) {
            paoflag = 1;
        }

        if (guangxi_scene.ispiaoing) {
            this.resetGame(false);
            this.oMJPiao.setVisible(true);
            cc.eventManager.dispatchCustomEvent("hide_copy_room");
            if (this.room_Action.actions["yaoqing"]) {
                this.room_Action.actions["yaoqing"].setVisible(false);
            }
            if (this.room_Action.actions["copyshare"]) {
                this.room_Action.actions["copyshare"].setVisible(false);
            }
            if (this.pre_scene) {
                this.pre_scene.removeFromParent(true);
                this.pre_scene = null;
            }


            if (paoflag == 1) {
                for (var i = 0; i < guangxi_scene.GangPiao.length; i++) {
                    var piao = guangxi_scene.GangPiao[i];
                    var piao1 = guangxi_scene.UserPiao[i];

                    if (MJModel.isMyPlayer(i)) {
                        if ((piao == 255 || piao == -1)) {
                            this.oMJPiao.PiaoImage.setVisible(true);
                        } else {
                            var pos = MJModel.getPosBySeatid(i);

                            if (piao == 0 && piao1 == 0) {
                                this.players[pos].showPaofenTip(0, 0);
                            } else {
                                this.players[pos].showPaofenTip(piao, paoflag);
                            }
                        }
                    } else {
                        var pos = MJModel.getPosBySeatid(i);
                        if (piao == 0 && piao1 == 0) {
                            this.players[pos].showPaofenTip(0, 0);
                        } else {
                            this.players[pos].showPaofenTip(piao, paoflag);
                        }
                    }
                }


                for (var i = 0; i < guangxi_scene.UserPiao.length; i++) {
                    var piao = guangxi_scene.UserPiao[i];

                    if (MJModel.isMyPlayer(i)) {
                        cc.log("pingdingshan piao=" + piao);
                        if ((piao == 255 || piao == -1)) {
                            this.oMJPiao.PiaoImage1.setVisible(true);
                        } else {
                            var pos = MJModel.getPosBySeatid(i);
                            this.players[pos].showPaofenTip(piao, 2);
                        }
                    } else {
                        var pos = MJModel.getPosBySeatid(i);
                        this.players[pos].showPaofenTip(piao, 2);
                    }
                }

            } else {
                for (var i = 0; i < guangxi_scene.UserPiao.length; i++) {
                    var piao = guangxi_scene.UserPiao[i];

                    if (MJModel.isMyPlayer(i)) {
                        cc.log("pingdingshan piao=" + piao);
                        if ((piao == 255 || piao == -1)) {
                            this.oMJPiao.PiaoImage.setVisible(true);
                        } else {
                            var pos = MJModel.getPosBySeatid(i);
                            this.players[pos].showPaofenTip(piao, 0);
                        }
                    } else {
                        var pos = MJModel.getPosBySeatid(i);
                        this.players[pos].showPaofenTip(piao, 0);
                    }
                }
            }

            this.piaoTip.showTextTip("正在选跑中");
        }


        if (sceneStatus != 0 && sceneStatus != 4) {


            if (paoflag == 1) {

                for (var i = 0; i < guangxi_scene.GangPiao.length; i++) {
                    var piao = guangxi_scene.GangPiao[i];
                    var piao1 = guangxi_scene.UserPiao[i];
                    var pos = MJModel.getPosBySeatid(i);
                    if (piao == 0 && piao1 == 0) {
                        this.players[pos].showPaofenTip(0, 0);
                    } else {
                        this.players[pos].showPaofenTip(piao, paoflag);
                    }
                }


                for (var i = 0; i < guangxi_scene.UserPiao.length; i++) {
                    var piao = guangxi_scene.UserPiao[i];
                    var pos = MJModel.getPosBySeatid(i);
                    this.players[pos].showPaofenTip(piao, 2);
                }

            } else {
                for (var i = 0; i < guangxi_scene.UserPiao.length; i++) {
                    var piao = guangxi_scene.UserPiao[i];
                    var pos = MJModel.getPosBySeatid(i);
                    this.players[pos].showPaofenTip(piao, 0);
                }
            }
        }

        this.piaoState = guangxi_scene.ispiaoing;

        if (MJModel.roomState >= 1 && !this.piaoState) {
            if (MJModel.mj_table_view == "2d") {
                this.cardNumBg.setVisible(true);
                this.jushuNumBg.setVisible(true);
                this.roomPublic.jushu.setVisible(false);
                this.roomPublic.leftcardcount.setVisible(false);
            } else {
                this.roomPublic.jushu.setVisible(true);
                this.roomPublic.leftcardcount.setVisible(true);
                this.cardNumBg.setVisible(false);
                this.jushuNumBg.setVisible(false);
            }

        } else {
            this.cardNumBg.setVisible(false);
            this.jushuNumBg.setVisible(false);
            this.roomPublic.jushu.setVisible(false);
            this.roomPublic.leftcardcount.setVisible(false);
        }

        // this.room_Card.reflashCardLuminance(MJModel.num_to_color(MJModel.card_luminance));
    },


    IsShuang: false,
    IsGangYing: false,
    DiFen: 1,
    _setGameType: function () {
        var pkg_id = 1;
        var play_id = [];
        //甩字胡不可炮胡
        //play_id.push(MJModel.base_money + "分底");

        cc.log("lin=MJModel.RoomConfigID=" + JSON.stringify(MJModel.RoomConfigID));

        if (MJModel.RoomConfigID.indexOf(8566001) != -1) {
            play_id.push("自摸胡");
        }

        if (MJModel.RoomConfigID.indexOf(8566002) != -1) {
            play_id.push("点炮胡");
        }

        if (MJModel.RoomConfigID.indexOf(8567001) != -1) {
            play_id.push("带混");
        }

        if (MJModel.RoomConfigID.indexOf(8567002) != -1) {
            play_id.push("不带混");
        }

        if (MJModel.RoomConfigID.indexOf(8568001) != -1) {
            play_id.push("单混");
        }

        if (MJModel.RoomConfigID.indexOf(8568002) != -1) {
            play_id.push("双混");
            this.IsShuang = true;
        }

        if (MJModel.RoomConfigID.indexOf(8569001) != -1) {
            play_id.push("带风");
        }

        if (MJModel.RoomConfigID.indexOf(8569002) != -1) {
            play_id.push("不带风");
        }

        if (MJModel.RoomConfigID.indexOf(8570001) != -1) {
            play_id.push("30秒解散");
            this.jiesanTime = 30;
        }

        if (MJModel.RoomConfigID.indexOf(8570002) != -1) {
            play_id.push("1分钟解散");
            this.jiesanTime = 60;
        }

        if (MJModel.RoomConfigID.indexOf(8570003) != -1) {
            play_id.push("2分钟解散");
            this.jiesanTime = 120;
        }

        if (MJModel.RoomConfigID.indexOf(8570004) != -1) {
            play_id.push("5分钟解散");
            this.jiesanTime = 300;
        }


        if (MJModel.RoomConfigID.indexOf(85800001) != -1) {
            play_id.push("杠跑");
        }

        if (MJModel.RoomConfigID.indexOf(8571002) != -1) {
            play_id.push("庄家加底");
        }

        if (MJModel.RoomConfigID.indexOf(8571003) != -1) {
            play_id.push("杠上花加倍");
        }

        if (MJModel.RoomConfigID.indexOf(8571004) != -1) {
            play_id.push("七对加倍");
        }

        if (MJModel.RoomConfigID.indexOf(8572001) != -1) {
            play_id.push("禁用互动表情");
            MJModel.hudong = 0;
        }


        if (MJModel.RoomConfigID.indexOf(8573001) != -1) {
            play_id.push("防作弊开");
            MJModel.mj_isFZB = true;
        }

        if (MJModel.RoomConfigID.indexOf(8573002) != -1) {
            play_id.push("防作弊关");
        }

        if (MJModel.RoomConfigID.indexOf(85800002) != -1) {
            play_id.push("杠跑赢跑");
            this.IsGangYing = true;
        }

        if (MJModel.RoomConfigID.indexOf(85810001) != -1) {
            play_id.push("1分");
            this.DiFen = 1;
        }

        if (MJModel.RoomConfigID.indexOf(85810002) != -1) {
            play_id.push("2分");
            this.DiFen = 2;
        }

        if (MJModel.RoomConfigID.indexOf(85810003) != -1) {
            play_id.push("5分");
            this.DiFen = 5;
        }

        if (MJModel.RoomConfigID.indexOf(85810004) != -1) {
            play_id.push("10分");
            this.DiFen = 10;
        }

        if (MJModel.RoomConfigID.indexOf(8571005) != -1) {
            play_id.push("一炮多响");
        }

        if (MJModel.RoomConfigID.indexOf(2000001) != -1) {
            play_id.push("可少人开局");
        }
        if (MJModel.RoomConfigID.indexOf(2000002) != -1) {
            play_id.push("可少人开局");
        }
        if (MJModel.RoomConfigID.indexOf(2000003) != -1) {
            play_id.push("可少人开局");
        }

        MJModel.play_id_str = play_id;

        var gameDes = "";
        for (var i = 0; i < play_id.length; i++) {
            gameDes += play_id[i];
            if (i != play_id.length - 1) {
                gameDes += " ";
            }
        }
        cc.log("pingdingshan msg=" + gameDes);
        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);
    },


    _handler_game_record: function (data, canDelay) {

        if (MJModel.gpsInfo) {
            MJModel.gpsInfo.removeFromParent(true);
            MJModel.gpsInfo = null;
        }

        //-----新总结算界面
        var gpsInfo = cc.director.getRunningScene().getChildByName("gpsInfo");
        if (gpsInfo) {
            gpsInfo.removeFromParent(true);
        }


        cc.log("------big End");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);

        var gameType = "平顶山麻将";

        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        time = getTimeByMin(MJModel.roomData["gameRoom"]["createTime"], gameRecord.DataTime * 1000);
        startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }

        for (var i = 0; i < gameRecord.MostWinScoreUser.length; i++) {
            var seatId = gameRecord.MostWinScoreUser[i];
            if (seatId != 255) {
                _winSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;
        var arrStr = ["坐庄次数", "胡牌次数", "赢分次数", "超时次数"];
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            //var playerRecord = totalRecord.player_records[i];
            var player = MJModel.players[i];
            var arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.WinCounts, recoreInfo.outtime_num];
            if (player && player.uid != -1) {
                addX = 39 + (i * 302);
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, _winSeatid[i],
                    _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[PlayerNumber] = Item;
                PlayerNumber++;
            }

            if (recoreInfo.totalscore != 0) {
                has_result = true;
            }

        }

        var totalPlayer = 4;
        if (MJModel.mj_roomType == 1) {
            totalPlayer = 3;
        } else if (MJModel.mj_roomType == 2) {
            totalPlayer = 2;
        }
        for (var i = PlayerNumber; i < totalPlayer; i++) {
            var arrcount = [];
            for (var j = 0; j < arrStr.length; j++) {
                arrcount[j] = 0;
            }
            var Item = bigResult.addItem("", "", "0", false,
                false, arrStr, arrcount, 0, false);
            Item.setAnchorPoint(cc.p(0.5, 0.5));
            bigResult.player_records[i] = Item;
        }
        PlayerNumber = totalPlayer;

        bigResult.refresh(PlayerNumber);
        if (has_result) {
            if ((MJModel.mj_roomType == 0 && PlayerNumber != 4) ||
                (MJModel.mj_roomType == 1 && PlayerNumber != 3) ||
                (MJModel.mj_roomType == 2 && PlayerNumber != 2)) {
                ERROR(this, "pId:" + pkgId + "type:" + MJModel.mj_roomType + "num:" + PlayerNumber + "d:" + data);
            }
        }
        this.release();
        return 0;
    },

    resetGame: function (allClean) {
        this._super(allClean);
        this._curLaizi = -1;
        this._curLaizi2 = -1;
        this._curLaizipi = -1;
        this._setLaizi(-1);
        this.piaoState = false;
    },


    timeEnd: function (dt) {

        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    },

    //自动准备
    handlerAutoUpTableReady: function (nums, selfIsReady) {
        if (MJModel.seatid == -1 && nums < 4) {
            this.actionCallBack("uptable");
        }
        else if (selfIsReady == false) {
            if (MJModel.canQuxiaoZhun()) {
                if (MJModel.roomState != 0) this.actionCallBack("ready");
            } else {
                // this.actionCallBack("ready");
            }
        }
    },
    handlerTableInfo: function (data) {
        this._super(data);
    },
    handler_player_gps: function (data, canDelay) {
        this._super(data, canDelay);
        if (MJModel.table_gps_init == 1 && this.pre_scene)this.pre_scene.updatePlayersGpsInfo();
    },
    handler_server_game_end_bc: function (hubeiGameend, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            var ackGameEnd = hubeiGameend.gameend;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);
            this.room_Info.stopTime();
            this.room_Tip.hideOutCardTip();

            var show_all_handcard = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var show_liuju = cc.callFunc(function () {
                if (ackGameEnd.EndState == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
            });

            var show_end_score = cc.callFunc(function () {
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var update_all_money = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var game_end_reset = cc.callFunc(function () {
                self.room_Action.setReady2Visible(false);
                try {
                    var result = new MJResult_PingDing();
                    result.updateContentView(hubeiGameend);
                    result.setName("reset_remove");
                    self.addChild(result, 100000);
                } catch (e) {
                    cc.log("game end:", e);
                    self.room_Action.setReady2Visible(true);
                }
            });

            var show_all_public_card = cc.callFunc(function () {
                self.gameend_showAllPublicCard(ackGameEnd);
            });

            if (MJModel.isOnVideo && canDelay == false) {
                this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(2), update_all_money));
                return;
            }

            this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(1), show_liuju, cc.delayTime(ackGameEnd.EndState == 1 ? 1 : 0), show_end_score, cc.delayTime(0), update_all_money, cc.delayTime(1), game_end_reset));
        } catch (e) {
            ERROR(this, "handler_server_game_end_bc" + e);
        }
    },
});

var MJPreTable = cc.Layer.extend({
    //tag: "MJPreTable",

    rootNode: null,
    btns: {},
    players: {},

    allPlayerChat: [null, null, null, null],
    ctor: function () {
        this._super();
        var size = cc.director.getWinSize();
        this.bg = new ccui.ImageView(getResPath("RoomMJ/mj_public/common/pretable/bg.png"));
        this.bg.setAnchorPoint(cc.p(0.5, 0.5));
        this.bg.setPosition(size.width / 2, size.height / 2);
        this.bg.setScale(size.width / this.bg.getContentSize().width, size.height / this.bg.getContentSize().height);
        this.addChild(this.bg, -100);
        this.bg.setTouchEnabled(true);
        this.bg.addClickEventListener(function () {

        });

        this.setTableIcon();

        var uiJson = null;
        if(MJModel.table_gps_init == 1){
            uiJson = ccs.load(getResPath("pingdingshanmj/studio/mj_public/preScene_gps.json"));
        } else{
            uiJson = ccs.load(getResPath("RoomMJ/mj_public/preScene.json"));
        }
        var uiNode = uiJson.node;
        Utils.doLayer(uiNode);

        if(MJModel.table_gps_init == 1){
            this.addChild(uiNode);
        }else{
            this.addChild(uiNode,1);
        }
        this.rootNode = uiNode;

        var self = this;
        //btn
        {
            this.btns = [];
            var btnLayer = uiNode.getChildByName("btns");
            this.rootNode.reorderChild(btnLayer, 10000);
            var cs = btnLayer.getChildren();
            for (var i in cs) {
                var btn = cs[i];
                if (btn) {
                    btn.addClickEventListener(function (sender, evt) {
                        self.actionCallBack(sender);
                    });
                    this.btns[btn.getName()] = btn;
                }
            }

            if (MJModel.shareType == 1) {
                var size = cc.director.getWinSize();
                var yaoqing = this.btns["yaoqing"];
                var copy = this.btns["copyshare"];
                var parent = yaoqing.getParent();
                var yaoqingPos = yaoqing.getPosition();
                var copyPos = copy.getPosition();
                yaoqing.removeFromParent();
                copy.removeFromParent();

                var parentPath = "RoomMJ/platformshare/";

                {
                    var btn = new ccui.Button();
                    btn.loadTextures(getResPath(parentPath + "btn_yaoqing1.png"), getResPath(parentPath + "btn_yaoqing2.png"), "");
                    parent.addChild(btn);
                    btn.setName("yaoqing");
                    btn.addClickEventListener(function (sender, evt) {
                        self.actionCallBack(sender);
                    });
                    this.btns[btn.getName()] = btn;
                    btn.setPosition(yaoqingPos);
                }

                {
                    var btn = new ccui.Button();
                    btn.loadTextures(getResPath(parentPath + "btn_copyroom1.png"), getResPath(parentPath + "btn_copyroom2.png"), "");
                    parent.addChild(btn);
                    btn.setName("copyshare");
                    btn.addClickEventListener(function (sender, evt) {
                        self.actionCallBack(sender);
                    });
                    this.btns[btn.getName()] = btn;
                    btn.setPosition(copyPos);
                }
            }

            var btnNames = ["gps", "more", "chat", "sound"];
            for (var i in btnNames) {
                var btn = uiNode.getChildByName(btnNames[i]);
                if (btn) {
                    if (btn.getName() == "sound") {
                        btn.addTouchEventListener(function (sender, evt) {
                            if (self.callback) {
                                self.callback(sender.getName(), evt);
                            }
                        });
                    } else {
                        btn.addClickEventListener(function (sender, evt) {
                            self.actionCallBack(sender);
                        });
                    }
                    this.btns[btn.getName()] = btn;
                }
            }
        }

        if (MJModel.table_gps_init == 1) {
            if (ZJHModel.getInstance().uid == MJModel.roomData["gameRoom"]["userId"]) {
                this.btns["disband"].setVisible(true);
                this.btns["exit"].setVisible(false);
            } else {
                this.btns["disband"].setVisible(false);
                this.btns["exit"].setVisible(true);
            }
            this.playerGPS4 = this.rootNode.getChildByName("players4");
            this.playerGPS3 = this.rootNode.getChildByName("players3");
            this.playerGPS2 = this.rootNode.getChildByName("players2");

            {
                this.selectNodeThree = uiNode.getChildByName("lessStartLayout").getChildByName("Node_3");
                this.selectNodeTwo = uiNode.getChildByName("lessStartLayout").getChildByName("Node_2");
                this.selectNodeThree.setVisible(false);
                this.selectNodeTwo.setVisible(false);

                var btn3 = this.selectNodeThree.getChildByName("Button");
                var selectSp3 = this.selectNodeThree.getChildByName("selected");

                var btn2 = this.selectNodeTwo.getChildByName("Button");
                var selectSp2 = this.selectNodeTwo.getChildByName("selected");


                btn3.addClickEventListener(function (sender, evt) {
                    selectSp3.setVisible(true);
                    sendReady();
                    sendLessStart(1);
                    btn3.setEnabled(false);
                });

                btn2.addClickEventListener(function (sender, evt) {
                    selectSp2.setVisible(true);
                    sendReady();
                    if (MJModel.mj_roomType == 0)sendLessStart(4);
                    if (MJModel.mj_roomType == 1)sendLessStart(2);
                    btn2.setEnabled(false);
                });
            }
        } else {

            //桌上玩家初始化
            for (var i = 0; i < MJModel.Play_num; i++) {
                var player = new MJPlayer();
                player.setVisible(false);
                player.setId(i);
                player.showMoneyVisible(false);
                player.setPosition(this.getPlayerPos(i));
                this.addChild(player, 0);
                this.players[i] = player;
            }
        }

        {
            this.mode_btn = new ccui.Button();
            this.mode_btn.loadTextures(getResPath("RoomMJ/shaorenmoshi/mode_btn.png"), getResPath("RoomMJ/shaorenmoshi/mode_btn.png"), "");
            this.mode_btn.setPosition(cc.p(size.width / 2, 430));
            this.mode_btn.setName("shaorenmoshi");
            this.mode_btn.setVisible(false);
            this.mode_btn.addClickEventListener(function (sender, evt) {
                self.modeCallback(sender);
            });
            this.addChild(this.mode_btn, 10000);

            var no = new cc.Sprite(getResPath("RoomMJ/shaorenmoshi/mode_no.png"));
            no.setPosition(45, this.mode_btn.getContentSize().height / 2 + 5);
            no.setName("no");
            no.setVisible(false);
            this.mode_btn.addChild(no);

            var ok = new cc.Sprite(getResPath("RoomMJ/shaorenmoshi/mode_ok.png"));
            ok.setPosition(45, this.mode_btn.getContentSize().height / 2 + 5);
            ok.setName("ok");
            ok.setVisible(false);
            this.mode_btn.addChild(ok);

            var mode_2 = new cc.Sprite(getResPath("RoomMJ/shaorenmoshi/mode_2.png"));
            mode_2.setPosition(203, this.mode_btn.getContentSize().height / 2 + 5);
            mode_2.setName("mode_2");
            mode_2.setVisible(false);
            this.mode_btn.addChild(mode_2);

            var mode_3 = new cc.Sprite(getResPath("RoomMJ/shaorenmoshi/mode_3.png"));
            mode_3.setPosition(203, this.mode_btn.getContentSize().height / 2 + 5);
            mode_3.setName("mode_3");
            mode_3.setVisible(false);
            this.mode_btn.addChild(mode_3);
        }
        if (MJModel.isSupportOnlineYaoqing == true) {
            var testbtn = new ccui.Button();
            testbtn.loadTextures(getResPath("RoomMJ/action/yaoqing_line.png"), "", "");
            var size = cc.director.getWinSize();
            testbtn.setPosition(cc.p(size.width - 65, 80));
            testbtn.addClickEventListener(function (sender, evt) {
                require("club/scripts/clubUtils/ClubScene.js");
                ClubScene.showBoxDialog(0.66);
            });
            testbtn.setScale(0.65);
            this.rootNode.addChild(testbtn);
        }

        if(MJModel.table_gps_init == 1){
            this.mode_btn.setAnchorPoint(cc.p( 0, 0.5));
            this.mode_btn.setScale(0.8);
            this.mode_btn.setPosition(cc.p(20, 80));
        }
    },

    resetMode: function (isOK, gameReset) {
        if (MJModel.changMode == 0 || MJModel.isOnVideo)return;
        if (gameReset == undefined)gameReset = false;
        if (gameReset) {
            this.mode_btn.setVisible(false);
            return;
        }
        var ok = this.mode_btn.getChildByName("ok");
        var no = this.mode_btn.getChildByName("no");
        if (isOK == undefined) {
            ok.setVisible(false);
            no.setVisible(true);
        } else {
            ok.setVisible(isOK);
            no.setVisible(!isOK);
        }

        var cur_p = 0;
        for (var i = 0; i < MJModel.Play_num; i++) {
            if (MJModel.players[i].uid > 0)cur_p++;
        }
        this.mode_btn.setVisible(false);
        if (MJModel.changMode == 1 && cur_p != 2)return;
        if (MJModel.changMode == 2 && cur_p != 3)return;
        if (MJModel.changMode == 3 && cur_p != 2 && cur_p != 3)return;
        this.mode_btn.setVisible((cur_p == 2 && MJModel.mj_roomType != 2) || (cur_p == 3 && MJModel.mj_roomType != 1));
        this.mode_btn.getChildByName("mode_2").setVisible(cur_p == 2 && MJModel.mj_roomType != 2);
        this.mode_btn.getChildByName("mode_3").setVisible(cur_p == 3 && MJModel.mj_roomType != 1);
    },

    modeCallback: function (ref) {
        var ok = ref.getChildByName("ok");
        var no = ref.getChildByName("no");
        ok.setVisible(!ok.isVisible());
        no.setVisible(!no.isVisible());

        var cur_p = 0;
        for (var i = 0; i < MJModel.Play_num; i++) {
            if (MJModel.players[i].uid > 0)cur_p++;
        }

        sendSelectMode(ok.isVisible() ? cur_p : 0);
    },

    showSelectMode: function (pos, mode) {
        try {
            this.removeChildByName("select_mode_" + pos);
            if (mode != 2 && mode != 3)return;
            var cur_p = 0;
            for (var i = 0; i < MJModel.Play_num; i++) {
                if (MJModel.players[i].uid > 0)cur_p++;
            }
            if (mode != cur_p)return;
            var p_pos = this.getPlayerPos(pos);
            var sx = 1;
            var sy = 1;
            //if (pos == 2){
            //    p_pos.y -= 70;
            //    p_pos.x += 100;
            //}
            //if (pos == 1){
            //    p_pos.y -= 70;
            //    p_pos.x -= 100;
            //}
            //if (pos == 0 || pos == 3){
            //    p_pos.y -= 50;
            //    p_pos.x += 100;
            //}
            var tempPos = 1;
            if (MJModel.table_gps_init == 1) {
                tempPos = 3;
            }

            var tip = new cc.Sprite(getResPath("RoomMJ/shaorenmoshi/tip_bg.png"));
            tip.setScaleX(pos == tempPos ? -1 : 1);
            tip.setName("select_mode_" + pos);
            if (pos == tempPos)p_pos.x -= tip.getContentSize().width;
            tip.setPosition(p_pos);
            tip.setAnchorPoint(cc.p(pos == tempPos ? 1 : 0, 0));
            this.addChild(tip, 1000);

            var mode_2 = new cc.Sprite(getResPath("RoomMJ/shaorenmoshi/tip_" + mode + ".png"));
            mode_2.setPosition(tip.getContentSize().width / 2, tip.getContentSize().height / 2);
            mode_2.setName("mode");
            mode_2.setScaleX(pos == tempPos ? -1 : 1);
            tip.addChild(mode_2);
        } catch (e) {
            Log(this, e);
        }
    },
    resetSelectMode: function () {
        for (var i = 0; i < MJModel.Play_num; i++) {
            this.removeChildByName("select_mode_" + i);
        }
    },

    setTableIcon: function () {
        var size = cc.director.getWinSize();
        var mjType = new cc.Sprite(MJModel.mj_table.getMjTypePath());
        if (mjType != null) {
            mjType.setPosition(cc.p(size.width / 2, size.height / 2 + 120));
            this.addChild(mjType, 0);
        }
    },

    updateGPSTip: function (hasnocity, hastoonear) {
        if (hastoonear) {
            this.btns["gps"].loadTextures(getResPath("RoomMJ/mj_public/common/table/gps2.png"), "", "")
        } else if (hasnocity) {
            this.btns["gps"].loadTextures(getResPath("RoomMJ/mj_public/common/table/gps1.png"), "", "")
        } else {
            this.btns["gps"].loadTextures(getResPath("RoomMJ/mj_public/common/table/gps.png"), "", "")
        }
    },


    actionCallBack: function (sender) {
        var name = sender.getName();
        if (name == "yaoqing") {
            if (MJModel.shareType == 1) {
                var myposition = cc.p(sender.getContentSize().width / 2, sender.getContentSize().height / 2);
                var sharelist = new ShareList();
                sharelist.initList(this, 0, myposition);
                sender.addChild(sharelist);
                return;
            }
        }else if (name == "disband") {
            sendEndRoomREQ(1);
        } else if (name == "exit") {
            sendLogout();
            MJModel.mj_table.release();
            ZJHModel.getInstance().roomToHall();
        }
        if (this.callback) this.callback(name);
    },


    setCallback: function (callback) {
        this.callback = callback;
    },

    setReadyVisible: function (v) {
        if (this.btns["ready"])this.btns["ready"].setVisible(v);
    },

    handler_server_table_info_uc: function (ackGameFree, canDelay) {
        if (MJModel.table_gps_init == 1) {
            this.initPlayers();
            var playerNumber = 4;
            if (MJModel.mj_roomType == 1) playerNumber = 3;
            if (MJModel.mj_roomType == 2) playerNumber = 2;
            for (var i = 0; i < playerNumber; i++) {
                var pos = MJModel.getPosBySeatid(i);
                var mjPlayer = this.players[pos];
                if(mjPlayer)mjPlayer.logout();
            }
        } else {
            for (var i = 0; i < MJModel.Play_num; i++) {
                var mjPlayer = this.players[i];
                if(mjPlayer)mjPlayer.logout();
            }
        }

        for (var i = 0; i < MJModel.Play_num; i++) {
            var player = MJModel.players[i];
            if (player.uid > 0) {
                var pos = MJModel.getPosBySeatid(i);
                cc.log("lin=mjPlayer="+JSON.stringify(this.players));
                var mjPlayer = this.players[pos];
                mjPlayer.login(i);
                if (MJModel.table_gps_init == 1) {

                }
                else {
                    mjPlayer.setPosition(this.getPlayerPos(pos));
                }
                if (player.ready) {
                    var pos = MJModel.getPosBySeatid(i);
                    var mp = this.players[pos];
                    mp.setReadyFlag(true);
                    if (player.uid == ZJHModel.getInstance().uid) {
                        this.setReadyVisible(false);
                    }
                }
                else {
                    if (player.uid == ZJHModel.getInstance().uid) {
                        this.setReadyVisible(true);
                    }
                }
            }
        }
        if (MJModel.table_gps_init == 1)this.updatePlayersGpsInfo();
    },

    handler_server_ready_succ_bc: function (data, canDelay) {
        var ackUserReady = parsePacket("proto.game.AckUserReady", data);
        var ready_size = ackUserReady.ready.length;
        for (var i = 0; i < ready_size; i++) {
            var ready = ackUserReady.ready[i];
            var pos = MJModel.getPosBySeatid(i);
            var player = MJModel.players[i];
            if (player.uid != -1) {
                var mp = this.players[pos];
                if (mp.getReadyState() == ready) {
                    //和之前的状态相同
                    continue;
                }
                if (ready != 0) {
                    mp.setReadyFlag(true);
                } else {
                    mp.setReadyFlag(false);
                }
            }
            if (player.uid == ZJHModel.getInstance().uid) {
                if (ready != 0) {
                    this.setReadyVisible(false);
                } else {
                    this.setReadyVisible(true);
                }
            }
        }
    },

    handler_server_up_table_bc: function (data, canDelay) {
        var ackUpTableSuccess = parsePacket("proto.login.AckUpTableSuccess", data);
        var seatid = ackUpTableSuccess.seatid;
        if (ackUpTableSuccess.uid == ZJHModel.getInstance().uid) {
        }
        else {
            var pos = MJModel.getPosBySeatid(seatid);
            var rPlayer = this.players[pos];
            rPlayer.login(seatid);
            if (MJModel.table_gps_init == 1) {
                this.updatePlayersGpsInfo();
            } else {
                var point = this.getPlayerPos(pos);
                var startPoint = cc.p(point.x, point.y);
                if (pos == 0) {
                    startPoint.y -= 200;
                } else if (pos == 1) {
                    startPoint.x += 200;
                } else if (pos == 2) {
                    startPoint.y += 200;
                } else if (pos == 3) {
                    startPoint.x -= 200;
                }
                rPlayer.setPosition(startPoint);
                rPlayer.runAction(cc.sequence(cc.moveTo(0.2, point)));
            }

        }
    },

    handler_server_down_table_bc: function (data, canDelay) {
        var ackDownTableSuccess = parsePacket("proto.login.AckDownTableSuccess", data);
        var seatid = ackDownTableSuccess.seatid;
        var pos = MJModel.getPosBySeatid(seatid);
        var roomPlayer = this.players[pos];
        if (MJModel.table_gps_init == 1) {
            roomPlayer.logout();
            this.updatePlayersGpsInfo();
        }
        else {
            var point = this.getPlayerPos(pos);
            if (pos == 0) {
                point.y -= 200;
            } else if (pos == 1) {
                point.x += 200;
            } else if (pos == 2) {
                point.y += 200;
            } else if (pos == 3) {
                point.x -= 200;
            }
            var callBack = cc.callFunc(function (target) {
                target.logout();
            }, roomPlayer);
            roomPlayer.runAction(cc.sequence(cc.moveTo(0.2, point), callBack));
        }
    },

    showSound: function (pos, filepath, time) {
        try {
            if (this.allPlayerChat[pos]) {
                this.allPlayerChat[pos].removeFromParent();
                this.allPlayerChat[pos] = null;
            }

            var showTime = 3;
            if (time && time != 0) {
                showTime = time;
            }
            var chat = new MJPlayerChat();
            chat.initSound(pos, filepath, pos != 2, pos == 1, time);
            chat.setPosition(this.getPlayerChatPos(pos));
            this.addChild(chat);

            this.allPlayerChat[pos] = chat;
            var self = this;
            var callback = cc.callFunc(function () {
                self.allPlayerChat[pos] = null;
                chat.removeFromParent();
            });
            chat.runAction(cc.sequence(cc.delayTime(showTime), callback));
        } catch (e) {

        }
    },
    showChat: function (pos, content) {
        try {
            if (this.allPlayerChat[pos]) {
                this.allPlayerChat[pos].removeFromParent();
                this.allPlayerChat[pos] = null;
            }

            var chat = new MJPlayerChat();
            chat.initChat(pos, content, pos != 2, pos == 1);
            chat.setPosition(this.getPlayerChatPos(pos));
            this.addChild(chat);

            this.allPlayerChat[pos] = chat;
            var self = this;
            var callback = cc.callFunc(function () {
                self.allPlayerChat[pos] = null;
                chat.removeFromParent();
            });
            chat.runAction(cc.sequence(cc.delayTime(3), callback));
        } catch (e) {
            Log(this, e);
        }
    },

    getPlayerPos: function (pos) {
        if (MJModel.table_gps_init == 1) {
            var playerNode = this.playerGPS4;
            if (MJModel.mj_roomType === 1) playerNode = this.playerGPS3;
            if (MJModel.mj_roomType === 2) playerNode = this.playerGPS2;
            return Utils.getNodeWorldPosition(playerNode.getChildByName("players").getChildByName("player" + pos));
        } else {
            return Utils.getNodeWorldPosition(this.rootNode.getChildByName("players").getChildByName("player" + pos));
        }

    },

    getPlayerChatPos: function (pos) {
        var p = this.getPlayerPos(pos);
        if (pos == 0) {
            p.y += 50;
        } else if (pos == 1) {
            p.y += 50;
        }
        else if (pos == 2) {

        }
        else if (pos == 3) {
            p.y += 50;
        }
        return p;
    },
    initPlayers: function () {

        var playerNode = this.playerGPS4;
        if (MJModel.mj_roomType === 1) playerNode = this.playerGPS3;
        if (MJModel.mj_roomType === 2) playerNode = this.playerGPS2;

        if (this.players["root"] !== playerNode) {
            if (this.players["root"] !== undefined) {
                this.players["root"].setVisible(false);
                this.players = {};
            }

            this.players["root"] = playerNode;
            var playersNode = playerNode.getChildByName("players");
            var children = playersNode.getChildren();
            for (var index in children) {
                var child = children[index];
                var childName = child.getName();
                var pos = parseInt(childName.replace("player", ""));
                var prePlayer = new MJPrePlayer(pos, child);
                prePlayer.reset();
                this.players[pos] = prePlayer;
            }
            var tipsNode = playerNode.getChildByName("tips");
            this.players["tips"] = tipsNode;

            var cs = tipsNode.getChildren();
            for (var i in cs) {
                var tips = cs[i];
                if (!tips) continue;
                var name = tips.getName();
                var ps = name.split("_");
                var label = tips.getChildByName("num");
                var s1 = MJModel.getSeatidByPos(parseInt(ps[0]));
                var s2 = MJModel.getSeatidByPos(parseInt(ps[1]));
                var p1 = MJModel.players[s1];
                var p2 = MJModel.players[s2];

                tips.getChildByName("hong").setVisible(false);
                tips.getChildByName("lv").setVisible(false);
                tips.getChildByName("hong").setScaleX(1);
                tips.getChildByName("lv").setScaleX(1);
                tips.getChildByName("hong").stopAllActions();
                tips.getChildByName("lv").stopAllActions();
                label.setString("");
                label.ignoreContentAdaptWithSize(true);
            }

            playerNode.setVisible(true);
        }
        cc.log("lin=initPlayers=2");
    },
    updatePlayersGpsInfo: function () {
        if (!this.players["tips"]) return;
        var hasnocity = false;
        var hastoonear = false;

        var playerNums = 4;
        var playerGpsNode = this.playerGPS4;
        if (MJModel.mj_roomType == 1)  playerNums = 3;
        if (MJModel.mj_roomType == 2)  playerNums = 2;

        for (var i = 0; i < playerNums; i++) {
            var player = MJModel.players[i];
            var playerData = Utils.getPlayerGpsInfo(player.uid);
            var pos = MJModel.getPosBySeatid(i);
            var playerUI = this.players[pos];

            if (player.uid > 0) {
                if (Utils.isNoGpsData(playerData)) {
                    hasnocity = true;
                    playerUI.setGetLocationFailFlag(true);
                    playerUI.setUserName(cc.formatStr("[%s] %s", "未知", player.name));
                } else {
                    playerUI.setGetLocationFailFlag(false);
                    playerUI.setUserName(cc.formatStr("[%s] %s", Utils.parseName(10, playerData.city), player.name));
                }
            }
        }

        var tipsNode = this.players["tips"];
        var cs = tipsNode.getChildren();
        for (var i in cs) {
            var tips = cs[i];
            if (!tips)continue;
            var name = tips.getName();
            var ps = name.split("_");
            var label = tips.getChildByName("num");
            var s1 = MJModel.getSeatidByPos(parseInt(ps[0]));
            var s2 = MJModel.getSeatidByPos(parseInt(ps[1]));
            var p1 = MJModel.players[s1];
            var p2 = MJModel.players[s2];

            tips.getChildByName("hong").setVisible(false);
            tips.getChildByName("lv").setVisible(false);
            tips.getChildByName("hong").setScaleX(1);
            tips.getChildByName("lv").setScaleX(1);
            tips.getChildByName("hong").stopAllActions();
            tips.getChildByName("lv").stopAllActions();
            label.ignoreContentAdaptWithSize(true);
            label.setString("");

            if (!p1 || !p2 || p1.uid <= 0 || p2.uid <= 0) {
                continue;
            }

            var playerData1 = Utils.getPlayerGpsInfo(p1.uid);
            var playerData2 = Utils.getPlayerGpsInfo(p2.uid);

            if (Utils.isNoGpsData(playerData1)) {
                continue;
            }

            if (Utils.isNoGpsData(playerData2)) {
                continue;
            }

            // if (playerData1.city != playerData2.city) {
            //     continue;
            // }

            var dis = Utils.getDistance(playerData1.latitude, playerData1.longitude, playerData2.latitude, playerData2.longitude);
            tips.setVisible(true);
            if (dis >= 1000) {
                var tip = tips.getChildByName("lv");
                tip.setVisible(true);
                var dis_f = parseInt(dis / 1000);
                label.setString(dis_f + "千米");
                tip.setScaleX((label.getContentSize().width + 20) / tip.getContentSize().width);
                label.setScaleX(1 / tip.getScaleX());
            } else {
                label.setString(dis + "米");
            }

            if (dis <= 100) {
                tips.getChildByName("hong").setVisible(true);
                //tip.runAction(cc.sequence(cc.moveBy(0.5, cc.p(0, 5)), cc.moveBy(0.5, cc.p(0, -5))).repeatForever());
                hastoonear = true;
            } else {
                tips.getChildByName("lv").setVisible(true);
            }
        }

        if (MJModel.mj_table.room_Action) {
            MJModel.mj_table.room_Action.updateGPSTip(hasnocity, hastoonear);
        }

    },
});

var MJPrePlayer = function (pos, node) {

    var mPos = pos;
    var mNode = node;

    var avatarNode = node.getChildByName("avatar_node");
    var userName = node.getChildByName("user_name");
    userName.ignoreContentAdaptWithSize(true);

    var lessStartTips2 = node.getChildByName("less_start_tips2");
    var lessStartTips3 = node.getChildByName("less_start_tips3");
    var getLocationFailFlag = node.getChildByName("get_location_fail_flag");
    var roomOwnerFlag = node.getChildByName("room_owner_flag");
    var readyFlag = node.getChildByName("ready_flag");

    var DEFAULT_AVATAR_ICON = "Avatars/user4_unlogin.png";

    return {

        getRootNode: function() {
            return mNode;
        },

        setAvatar: function (playerModel) {
            avatarNode.removeAllChildren();
            if (playerModel) {
                if (playerModel.uid <= 0) {
                    var m_pAvatar = new cc.Sprite(DEFAULT_AVATAR_ICON);
                    m_pAvatar.setScale(
                        106 / m_pAvatar.getContentSize().width,
                        106 / m_pAvatar.getContentSize().height
                    );
                    avatarNode.addChild(m_pAvatar);
                } else {
                    var m_pAvatar = Utils.createCircleAvatar(playerModel.avatar,
                        DEFAULT_AVATAR_ICON, DEFAULT_AVATAR_ICON,
                        cc.size(106, 106));
                    avatarNode.addChild(m_pAvatar);
                }
            }
        },

        setUserName: function (username) {
            userName.setString(username);
        },

        setLessStartTipsTwo: function (is) {
            lessStartTips2.setVisible(is);
        },

        setLessStartTipsThree: function (is) {
            lessStartTips3.setVisible(is);
        },

        setGetLocationFailFlag: function (is) {
            getLocationFailFlag.setVisible(is);
        },

        setRoomOwnerFlag: function (is) {
            roomOwnerFlag.setVisible(is);
        },

        setReadyFlag: function (is) {
            readyFlag.setVisible(is);
        },

        getReadyState: function() {
            return readyFlag.isVisible();
        },

        login: function () {
            var seatId = MJModel.getSeatidByPos(mPos);
            var playerModel = MJModel.players[seatId];
            var playerGpsInfo = Utils.getPlayerGpsInfo(playerModel.uid);
            var nameWithCity = cc.formatStr("[%s] %s",
                Utils.isNoGpsData(playerGpsInfo) ? "未知" :
                    Utils.parseName(10, playerGpsInfo.city),
                playerModel.name);
            this.setUserName(nameWithCity);
            this.setAvatar(playerModel);
        },

        logout: function () {
            this.reset();
        },

        reset: function () {
            this.setAvatar();
            this.setUserName("");
            this.setLessStartTipsTwo(false);
            this.setLessStartTipsThree(false);
            this.setGetLocationFailFlag(false);
            this.setRoomOwnerFlag(false);
            this.setReadyFlag(false);
        },
    };
};
var MJResult_PingDing = MJCommonResult.extend({
    configLayout: null,
    updateContentView: function (ackGameEndJS) {
        this.ackGameEnd = ackGameEndJS.gameend;
        this.ackGameEndJS = ackGameEndJS;
        //输赢标志
        var seatId = MJModel.seatid;
        var score = this.ackGameEnd.Score[seatId];
        var effectName = "lose";
        if (score > 0) {
            effectName = "win";
        }
        this._win_effect(effectName);

        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);

        var itemHeight = 120;

        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;

            var countY = m;

            if (MJModel.mj_roomType == 1) {
                if (pos == 2) {
                    continue;
                }
            }

            if (MJModel.mj_roomType == 2) {
                if (pos == 1 || pos == 3) {
                    continue;
                }

                if (pos == 0) {
                    countY = 1;
                } else if (pos == 2) {
                    countY = 2;
                }
            }

            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 495 - count * itemHeight;
            var startX = 40;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX + 60, startY + 55));
            this.bgSpr.addChild(headLayer, 10);

            //上排牌 杠
            var ganghuLayer = this.createGangHuLayer(seatid);
            this.bgSpr.addChild(ganghuLayer, 10);
            ganghuLayer.setPosition(cc.p(startX + 230, startY + 65));

            //下排牌
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX + 0, startY));
            this.bgSpr.addChild(handCardLayer);

            // this.createSpecialHuTip(startX + 785, startY + 40, seatid);
            this.createSpecialHuTip(startX + 785, startY + 40, seatid);

            // 输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX + 1100, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            //中马列表
            var maLayer = this.createMaLayer(seatid);
            if (maLayer) {
                maLayer.setPosition(cc.p(startX + 845, startY + 85));
                this.bgSpr.addChild(maLayer);
            }
            count++;
        }


    },

    createGangHuLayer: function (seatid) {
        var layer = new cc.Layer();
        var x = 0;
        var y = 0;

        var addFanType = [];
        //var specialType = this.ackGameEnd.faninfo[seatid].SpecialType;

        var addfan = this.ackGameEnd.faninfo[seatid].addfan;
        for (var i = 0; i < addfan.length; i++) {
            var add_fan = addfan[i];
            var add_type = add_fan.AddType;
            var add_value = add_fan.AddNum;
            if (AddFanTypeArray.indexOf(add_type) != -1) {
                cc.log("pingdingshan addtype=" + add_type);
                if (add_type == 50 || add_type == 51) {
                    addFanType.push(AddFanNameArray[AddFanTypeArray.indexOf(add_type)] + " +" + add_value);
                } else if (add_type == 44) {
                    addFanType.push(AddFanNameArray[AddFanTypeArray.indexOf(add_type)] + " +" + add_value);
                }
                else {
                    addFanType.push(AddFanNameArray[AddFanTypeArray.indexOf(add_type)] + " X" + add_value);
                }

            }
        }

        for (var i = 0; i < addFanType.length; i++) {
            var fanType = new cc.LabelTTF(addFanType[i], "Arial", 20);
            fanType.setColor(this.leftColor);
            fanType.setAnchorPoint(cc.p(0, 0));
            fanType.setPosition(cc.p(x, y + 10));
            layer.addChild(fanType);
            x += fanType.getContentSize().width + 10;
        }
        this.createEndInfoTip(x, y, layer, seatid);
        return layer;
    },


    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var path = "";
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5天和 6地和 7抢杠胡 8杠上开花 9花上添花
            switch (fanInfo.SpecialType) {
                case 1:
                    path = "RoomMJ/result2/zi_mo_icon.png";
                    break;
                case 2:
                    path = "RoomMJ/result2/pao_hu_icon.png";
                    break;
                case 3:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                case 5:
                    path = "RoomMJ/result2/qiang_gang_icon.png";
                    break;
                case 7:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                default:
                    break;
            }
            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setScale(1.2);
                if (fanInfo.SpecialType == 5) {
                    typeSprite.setScale(0.8);
                }
                typeSprite.setPosition(cc.p(startX, startY));
                this.bgSpr.addChild(typeSprite);

            }
        }
    },
    //输赢分
    createScoreLayer: function (seatid) {
        var layer = new cc.Layer();
        var score = 0;
        if (this.ackGameEnd.Score && this.ackGameEnd.Score.length > seatid) score = this.ackGameEnd.Score[seatid];
        var width = 0;
        var path = getResPath("RoomMJ/result2/result_small_label_lose.png");
        if (score > 0) {
            path = getResPath("RoomMJ/result2/result_small_label_win.png");
        }
        var scoredes = ":";
        if (score == 0) scoredes = "";
        var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), path, 29, 37, '0');

        scoreLabel.setAnchorPoint(cc.p(0.0, 0.5));

        scoreLabel.setPosition(cc.p(width, 15));
        scoreLabel.setName("scoreLabel");
        layer.addChild(scoreLabel);

        if (Math.abs(score) >= 10000) {
            scoreLabel.setScale(0.8);
        }


        var label = layer.getChildByName("scoreLabel");
        label.setVisible(false);

        var score = this.ackGameEnd.Score[seatid];
        var path = getResPath("RoomMJ/result2/result_small_label_lose.png");
        if (score > 0) {
            path = getResPath("RoomMJ/result2/result_small_label_win.png");
        }
        var scoredes = ":";
        if (score == 0) scoredes = "";
        var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), path, 29, 37, '0');
        scoreLabel.setAnchorPoint(cc.p(0.5, 0.5));
        scoreLabel.setPosition(cc.p(label.getPosition().x + 60, label.getPosition().y - 25));
        scoreLabel.setName("scoreLabel3");
        layer.addChild(scoreLabel);

        var gangfen = this.ackGameEnd.EndGangInfo[seatid].TotalGangScore;
        var path_gang = getResPath("RoomMJ/result2/result_small_label_lose.png");
        if (gangfen > 0) {
            path_gang = getResPath("RoomMJ/result2/result_small_label_win.png");
        }
        var gangdes = ":";
        if (gangfen == 0) gangdes = "";
        var gangLabel = new cc.LabelAtlas(gangdes + Math.abs(gangfen), path_gang, 29, 37, '0');
        gangLabel.setAnchorPoint(cc.p(0.5, 0.5));
        gangLabel.setPosition(cc.p(label.getPosition().x - 70, label.getPosition().y - 25));
        gangLabel.setName("gangLabel");
        layer.addChild(gangLabel);

        var hufen = this.ackGameEnd.Score[seatid] - this.ackGameEnd.EndGangInfo[seatid].TotalGangScore;
        var path_hu = getResPath("RoomMJ/result2/result_small_label_lose.png");
        if (hufen > 0) {
            path_hu = getResPath("RoomMJ/result2/result_small_label_win.png");
        }
        var hudes = ":";
        if (hufen == 0) hudes = "";
        var huLabel = new cc.LabelAtlas(hudes + Math.abs(hufen), path_hu, 29, 37, '0');
        huLabel.setAnchorPoint(cc.p(0.5, 0.5));
        huLabel.setPosition(cc.p(label.getPosition().x - 220, label.getPosition().y - 25));
        huLabel.setName("huLabel");
        layer.addChild(huLabel);

        var zong_text = new cc.LabelTTF("总分", "Arial", 36);
        zong_text.setAnchorPoint(cc.p(0.5, 0.5));
        zong_text.setColor(this.leftColor);
        zong_text.setPosition(cc.p(label.getPosition().x + 60, label.getPosition().y + 40));
        layer.addChild(zong_text);

        var gang_text = new cc.LabelTTF("杠分", "Arial", 36);
        gang_text.setAnchorPoint(cc.p(0.5, 0.5));
        gang_text.setColor(this.leftColor);
        gang_text.setPosition(cc.p(label.getPosition().x - 70, label.getPosition().y + 40));
        layer.addChild(gang_text);

        var hutext = new cc.LabelTTF("胡分", "Arial", 36);
        hutext.setAnchorPoint(cc.p(0.5, 0.5));
        hutext.setColor(this.leftColor);
        hutext.setPosition(cc.p(label.getPosition().x - 220, label.getPosition().y + 40));
        layer.addChild(hutext);

        return layer;

    },

    getStringByType: function (stype) {
        var type = Number(stype);
        var str = "";
        switch (type) {
            case HUGANG.HUGANG_ZHIGANG:
                str = "直杠";
                break;
            case HUGANG.HUGANG_WANGANG:
                str = "弯杠";
                break;
            case HUGANG.HUGANG_ANGANG:
                str = "暗杠";
                break;
            case HUGANG.HUGANG_DIANGANG:
                str = "点杠";
                break;
            case HUGANG.HUGANG_DIANPAO:
                str = "点炮";
                break;
            case HUGANG.HUGANG_PAOHU:
                str = "炮胡";
                break;
            case HUGANG.HUGANG_BEIZIMO:
                str = "被自摸";
                break;
            case HUGANG.HUGANG_ZIMO:
                str = "自摸";
                break;
            case HUGANG.HUGANG_DIANPENGGANG:
                str = "点碰杠";
                break;
            default:
                break;
        }
        return str;
    }
    ,

    createAvatar: function (pos) {
        var seatid = MJModel.getSeatidByPos(pos);
        var player = MJModel.players[seatid];
        var layer = new cc.Layer();

        var headPic = null;
        if (pos != 0 && MJModel.mj_isFZB && !MJModel.isOnVideo) {
            headPic = createCircleAvatarBypng(getResPath("pingdingshanmj/head_room2.png"), "Avatars/user4_unlogin.png", "Avatars/user4_unlogin.png", cc.size(96, 96));
        } else {
            headPic = Utils.createCircleAvatar(player.avatar, "Avatars/user4_unlogin.png", "Avatars/user4_unlogin.png", cc.size(96, 96));
        }
        layer.addChild(headPic);

        var framepath = getResPath("RoomMJ/result2/head_bg.png");
        var scale = 1;

        var headFrame = new cc.Sprite(framepath);
        headFrame.setAnchorPoint(cc.p(0.5, 0.5));
        headFrame.setScale(scale);
        headFrame.setPosition(cc.p(0, 0));
        layer.addChild(headFrame, -1);

        var headSize = cc.size(96, 96);

        //是否是庄家
        if (MJModel.banker_seatid == seatid) {
            var bankerPic = new cc.Sprite(getResPath("RoomMJ/banker.png"));
            bankerPic.setAnchorPoint(cc.p(0.5, 0));
            bankerPic.setPosition(cc.p(-headSize.width / 2 + 5, 0));
            layer.addChild(bankerPic);
        }

        //位置
        var posPic = new cc.Sprite(__String.createWithFormat(getResPath("RoomMJ/result2/result_detail_pos_%1.png"), pos));
        posPic.setAnchorPoint(cc.p(0, 0));
        posPic.setPosition(cc.p(-headSize.width / 2 - 10, -headSize.height / 2 - 10));
        layer.addChild(posPic);

        //玩家名字
        var nameLabel = null;
        if (pos != 0 && MJModel.mj_isFZB && !MJModel.isOnVideo) {
            nameLabel = new cc.LabelTTF(Utils.parseName(6, __String.createWithFormat("玩家%1", pos)), "Arial", 24);
        } else {
            nameLabel = new cc.LabelTTF(Utils.parseName(6, player.name), "Arial", 24);
        }
        nameLabel.setColor(this.leftColor);
        nameLabel.setAnchorPoint(cc.p(0, 0));
        nameLabel.setPosition(cc.p(65, -30));
        layer.addChild(nameLabel);

        return layer;
    }
    ,


});