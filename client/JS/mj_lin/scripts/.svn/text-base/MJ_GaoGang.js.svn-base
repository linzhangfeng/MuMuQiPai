loadProtoFile("proto/gaogangmajiang.proto");


var HuType = {
    HU_INVALID: 0,
    HU_ZIMO: 1,
    HU_PAOHU: 2,
    HU_HeiMo: 2,
    Hu_RuanMo: 1,
    HU_DIANPAO: 3,
    HU_BEIZIMO: 4,
    HU_QIANG_GANG: 5,
    HU_BEI_QIANG_GANG: 6,
    HU_YI_PAO_DUO_XIANG: 7,
    HU_GANG_SHANG_HUA: 8,
    HU_GANG_HOU_PAO: 9,
};
var PackgName = {
    TaiXingMJ: 149,//202  149，线上157
    TaiXingZHY: 150,//202  150，线上158
};
var AddFanType = {
    MJ_FAN_TYPE_PIHU: 121,  //屁胡
    MJ_FAN_TYPE_PENGPENGHU: 16,				//碰碰胡
    MJ_FAN_TYPE_QINGYISE: 14,					//清一色
    MJ_FAN_TYPE_HUNYISE: 15,					//混一色
    MJ_FAN_TYPE_HUNDUIDUI: 122, //混对对
    MJ_FAN_TYPE_QINGDUIDUI: 123,  //清对对
    MJ_FAN_TYPE_FENGQING: 124,//风清
    MJ_FAN_TYPE_4LAIHUPAI: 125,//四配胡
    MJ_FAN_TYPE_TIANHU: 19,					//天胡
    MJ_FAN_TYPE_QIDUI: 36,						//七对
    MJ_FAN_TYPE_QINGQIDUI: 25,					//清七对
    MJ_FAN_TYPE_HUNQIDUI: 126,   //混七对
    MJ_FAN_TYPE_YITIAOLONG: 39,				//一条龙
    MJ_FAN_TYPE_BANZIFANBEI: 130, //搬子翻倍
    MJ_FAN_TYPE_DIHU: 20,						//地胡
    MJ_FAN_TYPE_GANGSHANGHUA: 24,				//杠上开花
};

var AddFanTypeArray = [
    AddFanType.MJ_FAN_TYPE_PIHU,
    AddFanType.MJ_FAN_TYPE_PENGPENGHU,
    AddFanType.MJ_FAN_TYPE_QINGYISE,
    AddFanType.MJ_FAN_TYPE_HUNYISE,
    AddFanType.MJ_FAN_TYPE_HUNDUIDUI,
    AddFanType.MJ_FAN_TYPE_QINGDUIDUI,
    AddFanType.MJ_FAN_TYPE_FENGQING,
    AddFanType.MJ_FAN_TYPE_4LAIHUPAI,
    AddFanType.MJ_FAN_TYPE_TIANHU,
    AddFanType.MJ_FAN_TYPE_QIDUI,						//七对
    AddFanType.MJ_FAN_TYPE_QINGQIDUI,					//清七对
    AddFanType.MJ_FAN_TYPE_HUNQIDUI,   //混七对
    AddFanType.MJ_FAN_TYPE_YITIAOLONG,   //一条龙
    AddFanType.MJ_FAN_TYPE_BANZIFANBEI,   //搬子翻倍
    AddFanType.MJ_FAN_TYPE_DIHU,   //地胡
    AddFanType.MJ_FAN_TYPE_GANGSHANGHUA,   //杠上开花
];

var AddFanNameArray = {
    1: "放炮平胡",
    2: "自摸平胡",
    3: "混一色",
    4: "碰碰胡",
    5: "大杠开",
    6: "清一色",
    7: "大吊车",
    8: "七对",
    9: "混七对",
    10: "混碰碰胡",
    11: "混大吊车",
    12: "字一色",
    13: "清碰碰胡",
    14: "清七对",
    15: "字碰碰胡",
    16: "字七对",
    17: "抢杠",
    18: "8花",
    19: "清大吊车",
};
var AddManGuanType = {
    MAN_GUAN_TYPE_INVALID: 0,
    MAN_GUAN_TYPE_NO: 1,                 //非满贯
    MAN_GUAN_TYPE_MAN: 2,                //满贯
    MAN_GUAN_TYPE_SHUANG_MAN: 3,         //双满贯
    MAN_GUAN_TYPE_SAN_MAN: 4,            //三满贯
    MAN_GUAN_TYPE_SI_MAN: 5,             //四满贯
    MAN_GUAN_TYPE_BA_MAN: 6,             //八满贯
    MAN_GUAN_TYPE_MAN_JIANG: 7,           // 满贯加奖
    MAN_GUAN_TYPE_END: 8,
};

var AddManGuanTypeArray = [
    AddManGuanType.MAN_GUAN_TYPE_INVALID,
    AddManGuanType.MAN_GUAN_TYPE_NO,                 //非满贯
    AddManGuanType.MAN_GUAN_TYPE_MAN,                //满贯
    AddManGuanType.MAN_GUAN_TYPE_SHUANG_MAN,         //双满贯
    AddManGuanType.MAN_GUAN_TYPE_SAN_MAN,            //三满贯
    AddManGuanType.MAN_GUAN_TYPE_SI_MAN,             //四满贯
    AddManGuanType.MAN_GUAN_TYPE_BA_MAN,             //八满贯
    AddManGuanType.MAN_GUAN_TYPE_MAN_JIANG,           // 满贯加奖
];

var AddManGuanNameArray = [
    "",
    "非满贯",
    "满贯",
    "双满贯",
    "三满贯",
    "四满贯",
    "八满贯",
    "满贯加奖",
];

var selfCMD = {
    SERVER_HAERBIN_SHAIZI: 5080,
    SERVER_Laizi_BC: 5084,   //亮牌
    SERVER_CHANGESEAT: 5082,
    SERVER_FLOWER_HAND_CARD: 5026,  //发第一手牌后补花
    SERVER_FORCE_TING: 5088,             //制听牌
};

var MJTable_GaoGang = MJTable.extend({
    tag: "MJTable_GaoGang",
    _curLaizi: -1,
    _curLaizipi: -1,
    _curLaizipi2: -1,
    _curLaizi_bg: null,
    isRecordShow: false,
    _pkg_id: 0,
    maxQuan: 1,
    _huaCard: [[], [], [], []],
    isForceTing: false,
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        MJModel.mj_suport_fangyan = 1;
        MJModel.outCardEffect_style = 1;

        MJModel.mj_bg_use = 1;
        MJModel.mj_suport_change_bg = 1;
        MJModel.toupiaoTipsType = 1;
        MJModel.chi_layout = 3;
        MJModel.mj_touch_tip = 1;
        MJModel.isOutCard = true;
        MJModel.mj_chat_style = 5;
        MJModel.mj_public_style = 1;
        MJModel.mj_card_lib_type = 1;

        MJModel.mj_gps_type = 1;
        MJModel.mj_double_click_style = 1;

        MJModel.mj_font = "jianjie";
        MJModel.mj_fontSize = "dahao";
        MJModel.mj_style = "shishang";
        MJModel.yinyue = "jingdian";
        MJModel.has_hu_layout = 0;
        MJModel.shareType = 1;
        MJModel.DaiRuScore = 0;
        this.isForceTing = false;

        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];

            MJModel.mj_roomType = 0;
            MJModel.GameType = PackgName.TaiXingMJ;
            if (this._pkg_id == 2663 || this._pkg_id == 2530) { //四人
                MJModel.mj_roomType = 0;

            } else if (this._pkg_id == 2664 || this._pkg_id == 2529) {//三人
                MJModel.mj_roomType = 1;

            } else if (this._pkg_id == 2867 || this._pkg_id == 2741) {//座花园2人
                MJModel.mj_roomType = 2;
                MJModel.GameType = PackgName.TaiXingZHY;

            } else if (this._pkg_id == 2868 || this._pkg_id == 2742) {//座花园3人
                MJModel.mj_roomType = 1;
                MJModel.GameType = PackgName.TaiXingZHY;

            } else if (this._pkg_id == 2869 || this._pkg_id == 2743) {//座花园4人
                MJModel.mj_roomType = 0;
                MJModel.GameType = PackgName.TaiXingZHY;

            }

        } catch (e) {
            Log(this, e);
        }

        try {
            var help = this.roomPublic.getChildByName("game_help");
            help.setVisible(false);
        } catch (e) {

        }

        this._init_extend();
        this._super();
        this._update_action();
        //this.schedule(this.test, 1.0);
    },
    _update_action: function () {
        this.room_Action.actions["pass"].loadTextures(getResPath("gaogang/action/pass1.png"), getResPath("gaogang/action/pass2.png"), getResPath("gaogang/action/pass2.png"));

        this.room_Action.actions["chi"].loadTextures(getResPath("gaogang/action/chi1.png"), getResPath("gaogang/action/chi2.png"), getResPath("gaogang/action/pass2.png"));

        this.room_Action.actions["peng"].loadTextures(getResPath("gaogang/action/peng1.png"), getResPath("gaogang/action/peng2.png"), getResPath("gaogang/action/pass2.png"));

        this.room_Action.actions["gang"].loadTextures(getResPath("gaogang/action/gang1.png"), getResPath("gaogang/action/gang2.png"), getResPath("gaogang/action/pass2.png"));

        this.room_Action.actions["hu"].loadTextures(getResPath("gaogang/action/hu1.png"), getResPath("gaogang/action/hu2.png"), getResPath("gaogang/action/pass2.png"));

        this.room_Action.opBtns = [];
        this.room_Action.opBtns.push(this.room_Action.actions["pass"]);
        this.room_Action.opBtns.push(this.room_Action.actions["chi"]);
        this.room_Action.opBtns.push(this.room_Action.actions["peng"]);
        this.room_Action.opBtns.push(this.room_Action.actions["gang"]);
        this.room_Action.opBtns.push(this.room_Action.actions["hu"]);
    },
    getMjTypePath: function () {
        var gameType = 1;
        var num = 4;
        if (MJModel.GameType == PackgName.TaiXingMJ) {
            gameType = 1;
        } else {
            gameType = 2;
        }

        if (MJModel.mj_roomType == 1) {
            num = 3;
        } else if (MJModel.mj_roomType == 2) {
            num = 2;
        } else {
            num = 4;
        }
        return getResPath("gaogang/mj_type_" + gameType + "_" + num + ".png");
    },

    updateBg: function (isInit) {
        if (isInit == undefined)isInit = false;
        var size = cc.director.getWinSize();
        if (this.bg == null) {
            this.bg = new ccui.ImageView(getResPath(this.getBgStr()));
            this.bg.setAnchorPoint(cc.p(0.5, 0.5));
            this.bg.setContentSize(size);
            this.bg.setScale9Enabled(true);
            this.bg.setPosition(size.width / 2, size.height / 2);
            this.addChild(this.bg, -100);
        } else {
            this.bg.loadTexture(getResPath(this.getBgStr()));
        }
        //简洁版本的幺鸡牌换了
        if (MJModel.mj_font == "jianjie") {
            Utils.addCardSprites(__String.createWithFormat("gaogang/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));
        } else {
            Utils.addCardSprites(__String.createWithFormat("RoomMJ/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));
        }

        if (MJModel.mj_roomType == 2) {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config_2ren.json" : "RoomMJ/config/card_config2d_2ren.json");
        } else {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config.json" : "RoomMJ/config/card_config2d.json");
        }

        if (isInit)return;

        this.room_Card.reflashAllCardUI();
        for (var i = 0; i < 4; i++) {
            this.players[i].setPosition(MJConfig.getPlayerPos(i));
            this.players[i].reflashNameMoneyPosition();
        }
        if (this.room_Info)this.room_Info.reflash();
        if (MJModel.mj_table && MJModel.mj_table.roomPublic) {
            MJModel.mj_table.roomPublic.reflashPublic();
        }
    },


    onEnter: function () {
        this._super();
    },

    isSupportPublicCard: function () {
        return false;
    },

    initMJDialogs: function () {
//@ 头像,大赢家，房主，结算信息，总分
        //player.avatar, player.name, player.uid
        CommonTotalResult.prototype.addItem = function (avatars, names, ids, isWin, isPao, arrStr, count, score, Ishouse, state, score1) {
            var uiJson = ccs.load(getResPath("RoomMJ/mj_public/gameRecord_Item.json"));
            if (MJModel.GameType == PackgName.TaiXingZHY) {
                uiJson = ccs.load(getResPath("gaogang/studio/gameRecord_Item.json"));
            }
            var node = uiJson.node;
            this.items.push(node);
            if (score > 0) {
                node.getChildByName("bg").setVisible(true);
            }

            if (isWin) {
                node.getChildByName("dayingjia").setVisible(true);
            }

            if (isPao) {
                node.getChildByName("dianpaowang").setVisible(true);
            }

            if (Ishouse) {
                node.getChildByName("fangzhu").setVisible(true);
            }

            var avatar = node.getChildByName("avatar");
            var name = node.getChildByName("name");
            var id = node.getChildByName("id");

            var m_pAvatar = Utils.createCircleAvatar(avatars, getResPath("RoomMJ/mj_public/common/dialog/zhanji/head_default.png"), "Avatars/user4_unlogin.png", cc.size(100, 100));
            avatar.removeAllChildren();
            avatar.addChild(m_pAvatar);
            name.setString(names);
            name.ignoreContentAdaptWithSize(true);

            id.setString("ID:" + ids);
            id.ignoreContentAdaptWithSize(true);

            if (state && state != 0) {
                var bg = new cc.Sprite(getResPath("RoomMJ/mj_public/common/dialog/bigresult/jiesan_state/state_bg.png"));
                bg.setPosition(cc.p(avatar.getContentSize().width / 2, avatar.getContentSize().height / 2));
                avatar.addChild(bg);

                var fg = new cc.Sprite(getResPath("RoomMJ/mj_public/common/dialog/bigresult/jiesan_state/state_" + state + ".png"));
                fg.setPosition(cc.p(avatar.getContentSize().width / 2, avatar.getContentSize().height / 2));
                avatar.addChild(fg);
            }

            for (var i = 0; i < arrStr.length; i++) {
                var title = node.getChildByName("title" + (i + 1));
                var num = node.getChildByName("num" + (i + 1));
                title.setVisible(true);
                num.setVisible(true);

                title.setString(arrStr[i]);
                title.ignoreContentAdaptWithSize(true);

                num.setString(count[i]);
                num.ignoreContentAdaptWithSize(true);

                //title.setColor(score > 0 ? cc.color(222, 182, 120) : cc.color(148, 191, 207));
                //num.setColor(score > 0 ? cc.color(255, 206, 85) : cc.color(222, 222, 222));
            }

            if (score > 0) {
                node.getChildByName("zongfen_win").setVisible(true);
                node.getChildByName("zongfen_win").ignoreContentAdaptWithSize(true);
                node.getChildByName("zongfen_win").setString(":" + Math.abs(score));
            } else {
                node.getChildByName("zongfen_lose").setVisible(true);
                node.getChildByName("zongfen_lose").ignoreContentAdaptWithSize(true);
                node.getChildByName("zongfen_lose").setString(score == 0 ? score : (":" + Math.abs(score)));
            }

            if (MJModel.GameType == PackgName.TaiXingZHY) {
                var scoreStr = "带入" + MJModel.DaiRuScore + "剩余" + score1;
                if (score1 > 0) {
                    node.getChildByName("zongfen_win_1").setVisible(true);
                    node.getChildByName("zongfen_win_1").ignoreContentAdaptWithSize(true);
                    node.getChildByName("zongfen_win_1").setString(scoreStr);
                } else {
                    node.getChildByName("zongfen_lose_1").setVisible(true);
                    node.getChildByName("zongfen_lose_1").ignoreContentAdaptWithSize(true);
                    node.getChildByName("zongfen_lose_1").setString(scoreStr);
                }
            }
            return node;
        };
    },
    _init_extend: function () {

        this.initMJCard();
        this.initMJPublic();
        this.initMJConfig();
        this.initMJDialogs();
        var self_table = this;

        MJCards.prototype.sortCard = function (a, b) {
            return self_table._sortCard(a, b);
        };

        MJCard.prototype.check_addFlag = function () {
            self_table._checkAddCardFlag(this);
        };

        //湖北麻将不要自动胡牌功能
        MJAction.prototype.setAutoOutCardVis = function (value) {
        };

        var supersetValue = MJPeng.prototype.setValue;
        MJPeng.prototype.setValue = function (type, pos, value, index, out_pos, isEnd, OpType) {
            supersetValue.call(this, type, pos, value, index, out_pos, isEnd, OpType);
            //类型暗杠，并且是癞晃，并且value是癞子皮
            if (type == PengType.Peng_AnKang && value == self_table._curLaizipi) {
                this.cardList[1].setVisible(false);
                if (this.cardList[3]) {
                    this.cardList[3].setPosition(this.cardList[1].getPosition());
                    this.cardList[3].setZOrder(this.cardList[1].getZOrder());
                }
            }
        };

        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };


        //去掉出牌按钮
        MJCards.prototype.createOutCardBtn = function () {

        };

        MJCard.prototype.createTingFlag = function () {
            if (this.tingpai_flag) {
                try {
                    this.tingpai_flag.removeFromParent(true);
                } catch (e) {

                }

                this.tingpai_flag = null;
            }

            var m_size = this.getContentSize();
            this.tingpai_flag = new cc.Sprite(getResPath("gaogang/flag/ting.png"));
            this.tingpai_flag.setAnchorPoint(cc.p(0.5, 0));
            this.tingpai_flag.setPosition(cc.p(m_size.width / 2, m_size.height - 23));
            this.tingpai_flag.setVisible(false);
            this.addChild(this.tingpai_flag);
        };
    },

    initMJCard: function () {
        var self_table = this;

        var super_showui = MJPeng.prototype.showUI;
        MJPeng.prototype.showUI = function (type, pos, values, index, out_pos, isEnd, OpType, value, value1) {
            super_showui.call(this, type, pos, values, index, out_pos, isEnd, OpType, value, value1);
            cc.log("lin=MJPeng=showUI=1");
            var temp_pos = pos;
            //碰扛牌要显示指向箭头
            if (isEnd) return;
            if (MJModel.chi_layout == 3) {
                try {
                    var card = null;
                    var cardIndex = -1;
                    if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                        if (temp_pos == 0) return;
                        out_pos = 0;
                    }

                    if (this.pengType == PengType.Peng_Peng) {
                        cardIndex = 1;
                    } else {
                        cardIndex = 3;
                    }
                    if (cardIndex != -1) {
                        card = this.cardList[cardIndex];
                    }
                    if (this.pointSp) {
                        this.pointSp.removeFromParent(true);
                        this.pointSp = null;
                    }
                    var scale = 1.0;
                    if (card) {
                        var str = getResPath("gaogang/point/2d_peng_gang_point_" + out_pos + ".png");
                        if (pos == 0) {
                            str = getResPath("gaogang/point/2d_" + pos + "_peng_gang_point_" + out_pos + ".png");
                        }
                        if (MJModel.mj_table_view == "25d" && (pos == 1 || pos == 3 )) {
                            if (out_pos == 0 || out_pos == 2) {
                                scale = 1.5;
                                str = getResPath("gaogang/point/25d_" + pos + "_peng_gang_point_" + out_pos + ".png");
                                cc.log("lin=showui=" + str);
                            }
                        }
                        if (pos == 2 && MJModel.mj_table_view == "25d") {
                            scale = 0.8;
                        }
                        var black_bg = new cc.Sprite(str);
                        black_bg.setPosition(this.getPointPos(temp_pos));
                        black_bg.setAnchorPoint(cc.p(0.5, 0.5));
                        this.addChild(black_bg, 10);
                        this.pointSp = black_bg;
                        this.pointSp.setScale(scale);
                    }

                    if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                        if (this.pointSp) {
                            this.pointSp.setVisible(false);
                        }
                    }
                } catch (e) {

                }
            }

        };
        MJPeng.prototype.reflashUI = function () {
            for (var k = 0; k < this.cardList.length; k++) {
                var card = this.cardList[k];
                card.reflashUI();
                card.setMyPosition(MJConfig.getPengKangCardPos2(this.pos, this.index, k));
                card.stopAllActions();
            }
            var pos = this.pos;
            var out_pos = this.out_pos;
            var scale = 1.0;
            if (this.pointSp) {
                var str = getResPath("gaogang/point/2d_peng_gang_point_" + out_pos + ".png");
                if (pos == 0) {
                    str = getResPath("gaogang/point/2d_" + pos + "_peng_gang_point_" + out_pos + ".png");
                }
                if (MJModel.mj_table_view == "25d" && (pos == 1 || pos == 3 )) {
                    if (out_pos == 0 || out_pos == 2) {
                        scale = 1.5;
                        str = getResPath("gaogang/point/25d_" + pos + "_peng_gang_point_" + out_pos + ".png");

                        cc.log("lin=showui=" + str);
                    }
                }
                if (pos == 2 && MJModel.mj_table_view == "25d") {
                    scale = 0.8;
                }
                this.pointSp.setScale(scale);
                this.pointSp.setTexture(str);
                this.pointSp.setPosition(this.getPointPos(pos));
            }

        };
        MJPeng.prototype.getPointPos = function (pos) {
            var x = 0;
            var y = 0;
            if (MJModel.mj_bg_use == 1) {
                if (MJModel.mj_paiban == "vertical") {
                    if (pos == 0) {
                        if (this.pengType == PengType.Peng_Peng) {
                            y = 5;
                        } else {
                            y = 25;
                        }
                    } else if (pos == 1) {
                        x = 0;
                        if (this.pengType == PengType.Peng_Peng) {
                            y = 5;
                        } else {
                            y = 15;
                        }

                    } else if (pos == 2) {
                        if (this.pengType == PengType.Peng_Peng) {
                            y = 5;
                        } else {
                            y = 25;
                        }
                    } else if (pos == 3) {
                        x = 0;
                        if (this.pengType == PengType.Peng_Peng) {
                            y = 5;
                        } else {
                            y = 15;
                        }
                    }
                } else {
                    if (pos == 0) {
                        if (this.pengType == PengType.Peng_Peng) {
                            y = 0;
                        } else {
                            y = 25;
                        }
                    } else if (pos == 1) {
                        x = 0;
                        if (this.pengType == PengType.Peng_Peng) {
                            y = 5;
                        } else {
                            y = 15;
                        }

                    } else if (pos == 2) {
                        if (this.pengType == PengType.Peng_Peng) {
                            y = 5;
                        } else {
                            y = 25;
                        }
                    } else if (pos == 3) {
                        x = 0;
                        if (this.pengType == PengType.Peng_Peng) {
                            y = 5;
                        } else {
                            y = 15;
                        }
                    }
                }

            } else {
                if (pos == 0) {
                    if (this.pengType == PengType.Peng_Peng) {
                        y = 10;
                    } else {
                        y = 25;
                    }
                } else if (pos == 2) {
                    if (this.pengType == PengType.Peng_Peng) {
                        y = 15;
                    } else {
                        y = 30;
                    }
                } else if (pos == 1) {
                    x = 0;
                    if (this.pengType == PengType.Peng_Peng) {
                        y = 10;
                        x = 10;
                    } else {
                        x = 10;
                        y = 30;
                    }

                } else if (pos == 3) {
                    x = 0;
                    if (this.pengType == PengType.Peng_Peng) {
                        x = -10;
                        y = 10;
                    } else {
                        x = -10;
                        y = 30;
                    }
                }
            }

            return cc.p(x, y);
        };
        var super_addOutCard = MJCards.prototype.addOutCard;
        MJCards.prototype.addOutCard = function (pos, value, showPoint) {

            if (value >= 0x51 && value <= 0x58) {
                var card = this.addHuCard(pos, value);
                if (pos == 2 && MJModel.mj_bg_use == 1) {
                    card.setScale(0.9);
                }

                if (MJModel.mj_bg_use == 0) {
                    card.setScale(0.9);
                    if (pos == 0) {
                        card.setScale(0.95);
                    }
                    if (MJModel.mj_roomType == 2) {
                        if (pos == 2) {
                            card.setScale(0.7);
                        } else {
                            card.setScale(0.85);
                        }
                    }
                }
                self_table._huaCard[pos].push(value);
                return card;
            } else {
                return super_addOutCard.call(this, pos, value, showPoint);
            }
        };

        MJCards.prototype.lockMyHandCards = function () {
            //开始锁牌
            for (var i = 0; i < this.hand_card[0].length; i++) {
                var card = this.hand_card[0][i];
                card.setCardTouchEnable(false);
                card.setBlackVis(true);
            }
        };
        MJCards.prototype.setSomeCardClickState = function () {

            if (MJModel.mj_lockcard_type == 1) {
                var listen_cards = [];
                for (var i = 0; i < MJModel.listen_info.length; i++) {
                    var lsi = MJModel.listen_info[i];
                    listen_cards.push(lsi.OutCard);
                }

                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    if (listen_cards.indexOf(card.getValue()) == -1) {
                        card.setBlackVis(true);
                        card.setCardTouchEnable(false);
                    }
                }
            } else if (MJModel.mj_lockcard_type == 2) {
                if (this.isDuoPai(0) == false) {
                    for (var i = 0; i < this.hand_card[0].length; i++) {
                        var card = this.hand_card[0][i];
                        card.setBlackVis(true);
                        card.setCardTouchEnable(false);
                    }
                } else {
                    for (var i = 0; i < this.hand_card[0].length - 1; i++) {
                        var card = this.hand_card[0][i];
                        card.setBlackVis(true);
                        card.setCardTouchEnable(false);
                    }
                }
            }
        };
        var super_mjcards_reflashAllCardUI = MJCards.prototype.reflashAllCardUI;
        MJCards.prototype.reflashAllCardUI = function () {
            super_mjcards_reflashAllCardUI.call(this);
            for (var i = 0; i < this.hu_card.length; i++) {
                for (var j = 0; j < this.hu_card[i].length; j++) {
                    try {
                        var card = this.hu_card[i][j];
                        var value = card.getValue();
                        if (value >= 0x51 && value <= 0x58) {
                            if (i == 2 && MJModel.mj_bg_use == 1) {
                                card.setScale(0.9);
                            } else {
                                card.setScale(1.0);
                            }

                            if (MJModel.mj_bg_use == 0) {
                                card.setScale(0.9);
                                if (i == 0) {
                                    card.setScale(0.96);
                                }
                                if (MJModel.mj_roomType == 2) {
                                    if (i == 2) {
                                        card.setScale(0.7);
                                    } else {
                                        card.setScale(0.85);
                                    }
                                }
                            }
                        }
                    } catch (e) {

                    }
                }
            }
        };
    },
    initMJConfig: function () {
        MJConfig.getInfoPos = function () {
            var p = MJModel.cardConfig.getChildByName("info").getPosition();
            if (MJModel.mj_bg_use == 0) {
                if (MJModel.mj_roomType == 2) {
                    p.y = p.y + 5;
                } else {
                    p.y = p.y - 15;
                }
                return p;
            }
            return p;
        };
        MJConfig.getHuCardPos = function (pos, index) {
            index = index % 12;
            if ((pos == 1 || pos == 3) && MJModel.mj_bg_use == 1 && MJModel.mj_paiban == "vertical") {
                return this.getWorldPosition("hu_v_" + pos, "h_" + index);

            } else {
                if (MJModel.mj_bg_use == 0) {
                    var startIdex = 4;
                    if (pos == 0) {
                        startIdex = 5;
                    }
                    var index_new = startIdex + index * 2;
                    var p = MJConfig.getPublicCardPos(pos, index_new);
                    if (MJModel.mj_roomType == 2) {
                        if (pos == 0) {
                            p.y = p.y - 10;
                            p.x = p.x - 5 * index
                        } else {
                            p.y = p.y + 10;
                            p.x = p.x + 6 * index
                        }
                    }
                    return p;
                } else {
                    return this.getWorldPosition("hu_" + pos, "h_" + index);
                }

            }
        };
        var super_getOutCardPos = MJConfig.getOutCardPos;
        MJConfig.getOutCardPos = function (pos, index) {
            var p = super_getOutCardPos.call(this, pos, index);
            if (MJModel.mj_bg_use == 0) {
                if (MJModel.mj_roomType == 2) {
                    if (pos == 0) {
                        p.y = p.y + 30;
                    } else {
                        p.y = p.y - 20;
                    }
                }
                return p;
            }
            return p;
        };

        MJConfig.getHuCardOrder = function (pos, index) {
            index = index % 12;
            if (MJModel.mj_bg_use == 0) {
                index = index * 2;
                return MJConfig.getPublicCardOrder(pos, index);
            } else {
                var order = [
                    [
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ],
                    [
                        11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                    ],
                    [
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ],
                    [
                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                    ],
                ];
                return order[pos][index];
            }
        };

        MJConfig.getCardStr_new = function (value, pos, type, index) {
            var _reValue = "";
            var c = Utils.toHex2(value);
            if (pos == 0) {
                if (type == CardType.Card_Hand) {
                    if (MJModel.seatid != -1) {
                        _reValue = "hand_0/" + c + ".png";
                    } else {
                        _reValue = "peng_end_0/" + c + ".png";
                    }
                } else if (type == CardType.Card_Outing) {
                    _reValue = "hand_0/" + c + ".png";
                } else if (type == CardType.Card_Peng || type == CardType.Card_End) {
                    _reValue = "peng_end_0/" + c + ".png";
                } else if (type == CardType.Card_Mo) {
                    _reValue = "hand_0/" + c + ".png";
                } else if (type == CardType.Card_Out || type == CardType.Card_Hu) {
                    _reValue = "out_0/" + c + ".png";
                } else if (type == CardType.Card_Public) {
                    _reValue = "public_0/" + c + ".png";
                }
            }
            else if (pos == 1) {
                if (type == CardType.Card_Hand) {
                    _reValue = "hand_1/00.png";
                } else if (type == CardType.Card_Outing) {
                    _reValue = "hand_0/" + c + ".png";
                } else if (type == CardType.Card_Peng || type == CardType.Card_End) {
                    _reValue = "peng_end_1/" + c + ".png";
                } else if (type == CardType.Card_Mo) {
                    _reValue = "hand_1/00.png";
                } else if (type == CardType.Card_Out || type == CardType.Card_Hu) {
                    _reValue = "out_1/" + c + ".png";
                    if (type == CardType.Card_Hu) {
                        _reValue = "peng_end_1/" + c + ".png";
                    }
                } else if (type == CardType.Card_Public) {
                    _reValue = "public_1/" + c + ".png";
                }

                if (MJModel.mj_bg_use == 1 && MJModel.mj_paiban == "vertical") {
                    if (type == CardType.Card_Out || type == CardType.Card_Hu || type == CardType.Card_Peng) {
                        _reValue = "out_0/" + c + ".png";
                    }
                }
            }
            else if (pos == 2) {
                if (type == CardType.Card_Hand) {
                    _reValue = "hand_2/00.png";
                } else if (type == CardType.Card_Outing) {
                    _reValue = "hand_0/" + c + ".png";
                } else if (type == CardType.Card_Peng || type == CardType.Card_End) {
                    _reValue = "out_peng_end_2/" + c + ".png";
                } else if (type == CardType.Card_Mo) {
                    _reValue = "hand_2/00.png";
                } else if (type == CardType.Card_Out || type == CardType.Card_Hu) {
                    _reValue = "out_peng_end_2/" + c + ".png";
                } else if (type == CardType.Card_Public) {
                    _reValue = "public_2/" + c + ".png";
                }
            }
            else if (pos == 3) {
                if (type == CardType.Card_Hand) {
                    _reValue = "hand_3/00.png";
                } else if (type == CardType.Card_Outing) {
                    _reValue = "hand_0/" + c + ".png";
                } else if (type == CardType.Card_Peng || type == CardType.Card_End) {
                    _reValue = "peng_end_3/" + c + ".png";
                } else if (type == CardType.Card_Mo) {
                    _reValue = "hand_3/00.png";
                } else if (type == CardType.Card_Out || type == CardType.Card_Hu) {
                    _reValue = "out_3/" + c + ".png";

                    if (type == CardType.Card_Hu) {
                        _reValue = "peng_end_3/" + c + ".png";
                    }
                } else if (type == CardType.Card_Public) {
                    _reValue = "public_3/" + c + ".png";
                }

                if (MJModel.mj_bg_use == 1 && MJModel.mj_paiban == "vertical") {
                    if (type == CardType.Card_Out || type == CardType.Card_Hu || type == CardType.Card_Peng) {
                        _reValue = "out_0/" + c + ".png";
                    }
                }
            }

            return _reValue;
        };
        var super_getscale_new = MJConfig.getScale_new;
        MJConfig.getScale_new = function (pos, type, index, isCard) {
            try {
                var ss = 1;
                if (type == CardType.Card_Hu && MJModel.mj_bg_use == 0) {
                    ss = MJModel.cardConfig.getChildByName("public_" + pos).getChildByName("p_" + index).getScale();
                    if (MJModel.mj_bg_use == 0 && (pos == 1 || pos == 3)) {
                        ss = ss * 0.95;
                    }
                } else {
                    ss = super_getscale_new.call(this, pos, type, index, isCard);
                }
            } catch (e) {
                ss = 1;
            }

            return ss;
        };
    },
    initMJPublic: function () {
        var self_table = this;
        var super_menulist_ctor = MenuList.prototype.ctor;
        MenuList.prototype.ctor = function () {
            super_menulist_ctor.call(this);
            //隐藏帮助按钮
            var help = this.btns["help"];
            var speed = this.btns["speed"];
            var jieshan = this.btns["jieshan"];
            var exit = this.btns["exit"]
            var helpP = help.getPosition();
            var speedP = speed.getPosition();
            var jieshanP = jieshan.getPosition();
            var exitP = exit.getPosition();

            help.setVisible(false);
            speed.setPosition(helpP);
            jieshan.setPosition(speedP);
            exit.setPosition(speedP);

        };
        MJPublic.prototype.showCardNum = function (num) {
            if (num >= 0) {
                this.cardNumView.setVisible(false);
                this.cardNumText.setString(num);
            } else {
                this.cardNumText.setString(0);
                this.cardNumView.setVisible(false);
            }
            var infoPos = MJConfig.getInfoPos();
            if (!this.cardNumText2d) {
                this.cardNumText2dbg = new cc.Sprite(getResPath("gaogang/bg/cardnums_bg.png"));
                this.cardNumText2dbg.setOpacity(100);
                this.cardNumText2dbg.setAnchorPoint(cc.p(0.5, 0.5));
                this.cardNumText2dbg.setPosition(cc.p(infoPos.x + 130, infoPos.y));
                self_table.addChild(this.cardNumText2dbg, 99);
                var ext2dbgsize = this.cardNumText2dbg.getContentSize();
                var typeLabel = new cc.LabelTTF("剩余      张", "Arial", 22);
                typeLabel.setColor(cc.color(0x00, 0xd2, 0xff));
                typeLabel.setAnchorPoint(cc.p(0.5, 0.5));
                typeLabel.setPosition(cc.p(ext2dbgsize.width / 2, ext2dbgsize.height / 2 - 2));
                this.cardNumText2dbg.addChild(typeLabel);
                this.cardNumText2d = new cc.LabelTTF(num + "", "Arial", 22);
                this.cardNumText2d.setColor(cc.color(0xff, 0xf7, 0x21));
                this.cardNumText2d.setAnchorPoint(cc.p(0.5, 0.5));
                this.cardNumText2d.setPosition(cc.p(ext2dbgsize.width / 2 + 10, ext2dbgsize.height / 2 - 2));
                this.cardNumText2dbg.addChild(this.cardNumText2d);
            }

            this.cardNumText2d.setString(num + "");
            var pos = cc.p(infoPos.x + 130, infoPos.y);
            if (MJModel.mj_bg_use == 1) {
                //2d
                this.cardNumView.setVisible(false);
                if (num <= 0) {
                    this.cardNumText2dbg.setVisible(false);
                }
                else {
                    this.cardNumText2dbg.setVisible(true);
                }
            }
            else {
                pos = cc.p(infoPos.x, infoPos.y + 75);
                if (this.cardNumText2dbg) {
                    if (num <= 0) {
                        this.cardNumText2dbg.setVisible(false);
                    }
                    else {
                        this.cardNumText2dbg.setVisible(true);
                    }
                }
            }
            if (MJModel.mj_roomType == 2) {
                pos = cc.p(infoPos.x + 130, infoPos.y);
            }
            if (this.cardNumText2dbg)this.cardNumText2dbg.setPosition(pos);
        };
        MJPublic.prototype.reflashPublic = function () {
            var infoPos = MJConfig.getInfoPos();
            var pos = cc.p(infoPos.x + 130, infoPos.y);
            if (this.cardNumText2dbg) {
                if (MJModel.mj_bg_use == 1) {
                    if (this.cardNumText2dbg)this.cardNumText2dbg.setVisible(true);
                    if (this.cardNumView)this.cardNumView.setVisible(false);
                } else {
                    pos = cc.p(infoPos.x, infoPos.y + 75);
                    if (this.cardNumText2dbg)this.cardNumText2dbg.setVisible(true);
                    if (this.cardNumView)this.cardNumView.setVisible(false);

                }
                if (MJModel.mj_roomType == 2) {
                    pos = cc.p(infoPos.x + 130, infoPos.y);
                }
                if (this.cardNumText2dbg)this.cardNumText2dbg.setPosition(pos);
            }
        };
    },
    playBgSound: function () {
        if (MJModel.yinyue == "jingkuai") {
            Sound.getInstance().PlayBgSound(getResPath("RoomMJ/sound/csmj1.mp3"));
        } else if (MJModel.yinyue == "suhuan") {
            Sound.getInstance().PlayBgSound(getResPath("RoomMJ/sound/csmj2.mp3"));
        } else {
            Sound.getInstance().PlayBgSound(getResPath("gaogang/sound/music_hall.mp3"));
        }
    },
    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.getValue();
            if (typeof b === "object") bv = b.getValue();
            if (av == this._curLaizi && bv != this._curLaizi)return 1;//赖子放在最前边
            if (av != this._curLaizi && bv == this._curLaizi)return -1;//赖子放在最前边
            return bv - av;
        } catch (e) {
            return 0;
        }
    },
    test: function (dt) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;
        if (tempCount == 5 && false) {
            this.handler_server_force_ting();
        }

        if (tempCount == 5 && false) {
            for (var j = 0; j < 4; j++) {
                for (var i = 0; i < 8; i++) {
                    this.room_Card.addOutCard(j, 0x51);
                }
            }

        }

        if (tempCount == 5 && true) {
            var packet = {
                "public_end": {
                    "UserCard": [{
                        "ChangeableCardsLen": 7,
                        "ChangeableCards": [3, 3, 3, 4, 5, 5, 7],
                        "FixedCardsLen": 2,
                        "stFixedCards": [{
                            "CardData": 2,
                            "state": 8,
                            "chairID": 0,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 4, "state": 8, "chairID": 0, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 7,
                        "ChangeableCards": [1, 1, 1, 2, 2, 2, 5],
                        "FixedCardsLen": 2,
                        "stFixedCards": [{
                            "CardData": 3,
                            "state": 8,
                            "chairID": 1,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 4, "state": 8, "chairID": 1, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 8,
                        "ChangeableCards": [2, 2, 3, 3, 3, 3, 4, 5],
                        "FixedCardsLen": 2,
                        "stFixedCards": [{
                            "CardData": 5,
                            "state": 2,
                            "chairID": 1,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 4, "state": 8, "chairID": 2, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 10,
                        "ChangeableCards": [3, 3, 3, 4, 4, 4, 5, 6, 6, 7],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{"CardData": 2, "state": 8, "chairID": 3, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }],
                    "Score": [-15, -15, 45, -15],
                    "EndState": 0,
                    "EndGangInfo": [{
                        "Gang": [{"GangType": 8, "GangCard": 2}, {"GangType": 8, "GangCard": 4}],
                        "TotalGangScore": 0
                    }, {
                        "Gang": [{"GangType": 8, "GangCard": 3}, {"GangType": 8, "GangCard": 4}, {
                            "GangType": 64,
                            "GangCard": 5
                        }], "TotalGangScore": 0
                    }, {
                        "Gang": [{"GangType": 2, "GangCard": 5}, {"GangType": 8, "GangCard": 4}],
                        "TotalGangScore": 0
                    }, {"Gang": [{"GangType": 8, "GangCard": 2}], "TotalGangScore": 0}],
                    "faninfo": [{
                        "chairid": 0,
                        "SpecialType": 4,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 1,
                        "SpecialType": 4,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 2,
                        "SpecialType": 1,
                        "FanNum": 15,
                        "addfan": [{"AddType": 6, "AddNum": 15, "AddType2": null}],
                        "hucard": 3,
                        "DianPao": []
                    }, {"chairid": 3, "SpecialType": 4, "FanNum": 0, "addfan": [], "hucard": 0, "DianPao": []}],
                    "money": [100100, 99920, 100060, 99920],
                    "ts": null,
                    "md5": []
                }, "man_guan_type": [0, 0, 2, 0], "lian_zhuang": 0
            };
            this.handler_server_game_end_bc(packet);
        }
    },

    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.gaogang.AckGameScene", jpacket);
            //var ackGameFree = parsePacket("proto.game.AckGameScene", jpacket);

            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.gaogang.AckGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_Laizi_BC) {
            this._handler_server_laizi_bc(jpacket, canDelay);
            return;
        }

        if (cmd == selfCMD.SERVER_FLOWER_HAND_CARD) {
            this._handler_server_buhua_bc(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_FORCE_TING) {
            this.handler_server_force_ting(jpacket, canDelay);
            return;
        }
        this._super(cmd, jpacket, canDelay, svrid);
    },
    handler_server_force_ting: function (jpacket, canDelay) {
        var packet = parsePacket("proto.game.gaogang.AckForceTing", jpacket);
        var seatid = packet.forced_cid;
        if (MJModel.isMyPlayer(seatid)) {
            this.isForceTing = true;
            MJModel.mj_lockcard_type = 2;
            //开始锁牌
            this.room_Card.lockMyHandCards();
        }
    },
    _handler_server_buhua_bc: function (data, canDelay) {
        var packet = parsePacket("proto.game.gaogang.AckAutoBuHua", data);
        var buhua = packet.bu_hua;
        var seatId = packet.chair_id;
        var pos = MJModel.getPosBySeatid(seatId);
        var player = MJModel.players[seatId];
        var sex = SEX_ID.SEX_FEMALE;
        if (player) {
            sex = player.sex;
        }
        //var leftcount = packet.leftcount;
        //this.room_Info.showCardNums(leftcount, true);
        for (var i = 0; i < buhua.length; i++) {

            var huaArr = buhua[i].hua;
            var getcardArr = buhua[i].bu;
            for (var j = 0; j < huaArr.length; j++) {
                this.room_Card.removeHandCard(pos, huaArr[j]);
            }
            for (var j = 0; j < getcardArr.length; j++) {
                this.room_Card.addHandCard(pos, getcardArr[j]);
            }
            this.room_Card.reflashHandCard(pos);

            if (MJModel.isMyPos(pos)) {
                if (this.room_Card.isDuoPai(0)) {
                    var card = this.room_Card.hand_card[0][0].getValue();
                    var is_ok = this.room_Card.removeHandCard(0, card);
                    if (is_ok) this.room_Card.initMoCard(0, card, true);
                }
            }

            for (var j = 0; j < huaArr.length; j++) {
                this.room_Card.addOutCard(pos, huaArr[j]);
                //this.room_Card.removeHandCard(pos, huaArr[j]);
            }

            if (canDelay && huaArr.length > 0) {
                this.room_Tip.showOtherEffect(pos, "gaogang/effect/buhua/effects_mjxxbuhuax.ExportJson", "effects_mjxxbuhuax", 1);
            }
        }
        if (canDelay) {
            if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
                Sound.getInstance().playEffect(__String.createWithFormat(getResPath("gaogang/sound/operator/%1_buhua.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m"));
            } else {
                Sound.getInstance().playEffect(__String.createWithFormat(getResPath("RoomMJ/sound/operator/%1_buhua.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m"));
            }
        }
    },
    handler_server_update_info_uc: function (data, canDelay) {
    },
    handler_server_mo_card_bc: function (data, canDelay) {
        this._super(data, canDelay);
        if (this.room_Card) {
            this.room_Card.setSomeCardClickState();
        }
    },
    _handler_game_record: function (data, canDelay) {
        //-----新总结算界面
        cc.log("------big End");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var pkgId = this._pkg_id;
        var gameType = "泰兴麻将";
        if (MJModel.GameType == PackgName.TaiXingZHY) {
            gameType = "泰兴坐花园";
        } else {
            gameType = "泰兴麻将";
        }

        if (MJModel.mj_roomType == 1) {
            gameType = gameType + " 3人"
        }
        else if (MJModel.mj_roomType == 2) {
            gameType = gameType + " 2人"
        }
        else {
            gameType = gameType + " 4人"
        }

        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];
        //gameType += " · " + MJModel.base_money + "分底";

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        //var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;

        var max_score = 0;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            if (recoreInfo.totalscore > max_score) {
                max_score = recoreInfo.totalscore;
            }
        }

        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            //var playerRecord = totalRecord.player_records[i];
            var player = MJModel.players[i];
            var arrStr = [];
            //次数
            var arrcount = [];

            arrStr = ["坐庄次数", "胡牌次数", "点炮次数", "超时次数"];
            arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.Ex1, recoreInfo.outtime_num];

            if (player && player.uid != -1 && player.uid != 0) {
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var isWin = false;
                if (max_score > 0 && recoreInfo.totalscore == max_score) {
                    isWin = true;
                }
                var Item = null;
                if (MJModel.GameType == PackgName.TaiXingZHY) {
                    Item = bigResult.addItem(player.avatar, player.name, player.uid, isWin, _PaoSeatid[i], arrStr, arrcount, recoreInfo.Ex2, houseOwner, recoreInfo.dissState, recoreInfo.totalscore);
                } else {
                    Item = bigResult.addItem(player.avatar, player.name, player.uid, isWin, _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner, recoreInfo.dissState, recoreInfo.Ex2);
                }

                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }
        }
        bigResult.refresh(PlayerNumber);
        this.release();
    },

    handler_server_game_end_bc: function (hubeiGameend, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            var ackGameEnd = hubeiGameend.public_end;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);

            if (MJModel.mj_table.getChildByName("tingpai_layer")) {
                MJModel.mj_table.removeChildByName("tingpai_layer")
            }

            this.room_Info.stopTime();
            this.room_Tip.hideOutCardTip();

            var show_all_handcard = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var show_liuju = cc.callFunc(function () {
                if (ackGameEnd.EndState == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
            });

            var show_end_score = cc.callFunc(function () {
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var update_all_money = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var game_end_reset = cc.callFunc(function () {
                self.room_Action.setReady2Visible(false);
                try {
                    var result = new MJResult_XinYu();
                    result.updateContentView(hubeiGameend);
                    result.setName("reset_remove");
                    self.addChild(result, 100000);
                } catch (e) {
                    cc.log("game end:", e);
                    self.room_Action.setReady2Visible(true);
                }
            });

            var show_all_public_card = cc.callFunc(function () {
                self.gameend_showAllPublicCard(ackGameEnd);
            });

            if (MJModel.isOnVideo && canDelay == false) {
                this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(2), update_all_money));
                return;
            }

            this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(1), show_liuju, cc.delayTime(ackGameEnd.EndState == 1 ? 1 : 0), show_end_score, cc.delayTime(0), update_all_money, cc.delayTime(1), game_end_reset));
        } catch (e) {
            ERROR(this, "handler_server_game_end_bc" + e);
        }
    },

    timeEnd: function (dt) {

        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    },

    isjieshan: false,
    handler_server_end_room_result_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.AckDisbandResult", data);
        if (this.room_EndTouPiao) this.room_EndTouPiao.removeFromParent(true);
        this.room_EndTouPiao = null;
        MJModel.TouPiaoING = false;
        var result = jpacket.Result;
        if (result == 1) {
            PlatformHelper.showToast("房间解散成功，3秒后房间自动结束");
            this.isjieshan = true;
        }
        else {
            PlatformHelper.showToast("解散失败，稍后游戏继续！");
        }
    },

    handler_game_time_over_bc: function (data, canDelay) {
        if (this.isjieshan)MJModel.state = MJ_STATUS.MJ_GAME_FREE;
        this.startTimeEnd();
        // PlatformHelper.showToast("服务器通知房间结束！");
    },

    timeEnd: function (dt) {

        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    },

    _handler_server_laizi_bc: function (data, canDelay) {
        var packet = parsePacket("proto.game.gaogang.AckPeizi", data);
        var self = this;
        var curLaizi = packet.peizi;
        var chaotian = packet.banzi;
        var cardLeft = packet.cardnum;
        this.room_Info.showCardNums(cardLeft);
        this._setLaizi(curLaizi, chaotian, -1, canDelay ? true : false);
        if (canDelay == false) {
            this._showHandcardFlag(false);
            this.room_Card.reflashHandCard(0, true);
            this.room_Card.reflashHandCard(1, true);
            this.room_Card.reflashHandCard(2, true);
            this.room_Card.reflashHandCard(3, true);
            return;
        }
        MJModel.isEnterWait = true;

        var move_end = cc.callFunc(function () {
            self._showHandcardFlag(false);

            var mo_card = null;
            if (self.room_Card.isDuoPai(0)) {
                mo_card = self.room_Card.hand_card[0][self.room_Card.hand_card[0].length - 1];
                self.room_Card.hand_card[0].splice(self.room_Card.hand_card[0].length - 1, 1);
            }

            var allPreCars = [];
            var allLaiZi = [];
            var dd = 0;

            for (var i = self.room_Card.hand_card[0].length - 1; i >= 0; i--) {
                var card = self.room_Card.hand_card[0][i];
                if (card.getValue() == curLaizi) {
                    allLaiZi.push(card);
                } else {
                    if (allLaiZi.length > 0) {
                        break;
                    }
                    allPreCars.push(card);
                }
            }

            if (allLaiZi.length > 0 && allPreCars.length > 0) {
                var allDelay = 0;
                for (var i = 0; i < allLaiZi.length; i++) {
                    var card = allLaiZi[i];
                    var begin_pos = card.getPosition();
                    var end_pos = MJConfig.getHandCardPos(0, self.room_Card.hand_card[0].length - 1 - i, self.room_Card.hand_card[0].length, self.room_Card.isDuoPai(0));
                    var allL = Math.abs(end_pos.x - begin_pos.x);

                    //if (MJModel.outCardEffect_style == 0 || true) {
                    var time = allL / 1000;
                    if (time < 0.17) time = 0.17;
                    if (time > 0.3) time = 0.3;
                    card.runAction(cc.sequence(cc.spawn(cc.rotateTo(0.1, 15), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + 100))), cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y + 100)).easing(cc.easeSineOut()), cc.spawn(cc.rotateTo(0.1, 0), cc.moveTo(0.17, end_pos))));
                    allDelay += 1;
                }
                for (var i = 0; i < allPreCars.length; i++) {
                    var card = allPreCars[i];
                    //card.runAction(cc.sequence(cc.moveBy(0.3, cc.p(83, 0)), cc.delayTime(1 - 0.3)).repeat(allLaiZi.length));
                    card.runAction(cc.moveBy(0.3, cc.p(83 * allLaiZi.length, 0)));
                }

                var callback = cc.callFunc(function () {
                    MJModel.isEnterWait = false;
                    self.room_Card.reflashHandCard(0, true);
                    if (mo_card) {
                        mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                        self.room_Card.hand_card[0].push(mo_card);
                    }
                });
                self.runAction(cc.sequence(cc.delayTime(0.5), callback));
            } else {
                MJModel.isEnterWait = false;
                self.room_Card.reflashHandCard(0, true);
                if (mo_card) {
                    mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                    self.room_Card.hand_card[0].push(mo_card);
                }
            }
        });
        this.runAction(cc.sequence(cc.delayTime(1), move_end));
    },

    _setGameType: function () {
        var pkg_id = 1;
        var play_id = [];
        //甩字胡不可炮胡
        //play_id.push(MJModel.base_money + "分底");
        if (MJModel.mj_roomType == 0) {
            play_id.push("四人");
        } else if (MJModel.mj_roomType == 1) {
            play_id.push("三人");
        } else if (MJModel.mj_roomType == 2) {
            play_id.push("二人");
        }

        cc.log("lin=MJModel.RoomConfigID=" + JSON.stringify(MJModel.RoomConfigID));
        if (MJModel.RoomConfigID.indexOf(1496001) != -1) {
            play_id.push("七星大乱");
        }

        if (MJModel.RoomConfigID.indexOf(1497001) != -1) {
            play_id.push("三枪不换张");
        }

        if (MJModel.RoomConfigID.indexOf(1497002) != -1) {
            play_id.push("三枪换张");
        }

        if (MJModel.RoomConfigID.indexOf(1501001) != -1) {
            play_id.push("100分");
            MJModel.DaiRuScore = 100;
        }

        if (MJModel.RoomConfigID.indexOf(1501002) != -1) {
            play_id.push("150分");
            MJModel.DaiRuScore = 150;
        }

        if (MJModel.RoomConfigID.indexOf(1501003) != -1) {
            play_id.push("300分");
            MJModel.DaiRuScore = 300;
        }

        if (MJModel.RoomConfigID.indexOf(1501004) != -1) {
            play_id.push("50分");
            MJModel.DaiRuScore = 50;
        }

        if (MJModel.RoomConfigID.indexOf(1364001) != -1) {
            this.maxQuan = 1;
        }
        if (MJModel.RoomConfigID.indexOf(1364002) != -1) {
            this.maxQuan = 2;
        }
        if (MJModel.RoomConfigID.indexOf(1364003) != -1) {
            this.maxQuan = 4;
        }
        MJModel.play_id_str = play_id;

        var gameDes = "";
        for (var i = 0; i < play_id.length; i++) {
            gameDes += play_id[i];
            if (i != play_id.length - 1) {
                gameDes += " ";
            }
        }
        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);
        this._setFastChat();
    },
    fastChat3: [
        "不要出冲给我，我要自摸",
        "今天手气太差",
        "今天赢钱的人请吃饭男",
        "快点出牌",
        "来张好牌，我要听成了",
        "你们的打的太好了",
        "这个牌打错了",
        "美女，留个微信，下次一起打牌男",
    ],
    fastChat4: [
        "不要出冲给我，我要自摸",
        "今天手气太差",
        "今天赢钱的人请吃饭男",
        "快点出牌",
        "来张好牌，我要听成了",
        "你们的打的太好了",
        "这个牌打错了",
        "帅哥，留个微信女",
    ],
    _setFastChat: function () {
        var chatList = [];
        var sex = SEX_ID.SEX_MAN;
        var player = MJModel.players[MJModel.seatid];
        if (player) {
            sex = player.sex;
        }

        if (sex == SEX_ID.SEX_MAN) {
            chatList = this.fastChat3;
            MJModel.mj_fastChat = this.fastChat3;
        } else {
            chatList = this.fastChat4;
            MJModel.mj_fastChat = this.fastChat4;
        }

        var self = this;
        Utils.getFastChatSound = function (chat, sex) {
            if (sex == SEX_ID.SEX_MAN) {
                chatList = self.fastChat3;
            } else {
                chatList = self.fastChat4;
            }
            for (var i = 0; i < chatList.length; i++) {
                if (chatList[i] == chat) {
                    return getResPath(__String.createWithFormat("gaogang/sound/fastchat/%1_%2.mp3", sex == SEX_ID.SEX_MAN ? "m" : "w", i + 1));
                }
            }
            return "";
        };
    },

    _showLaizi_effect: function (name) {
        ccs.armatureDataManager.addArmatureFileInfo(getResPath("gaogang/effect/laizi/effects_mjhunancx.ExportJson"));
        var size = cc.director.getWinSize();
        if (true) {
            var armature = new ccs.Armature("effects_mjhunancx");
            var animation = armature.getAnimation();
            if (animation) {
                if (typeof animation.playWithIndex === "function") {
                    animation.playWithIndex(0, -1, 0);
                    armature.setPosition(cc.p(size.width / 2, size.height / 2));
                    this.addChild(armature, 100);
                    armature.runAction(cc.sequence(cc.delayTime(1.0), cc.removeSelf()));
                }
            }
        }

        //var armature = new ccs.Armature("effects_mjhunancx");
        //var animation = armature.getAnimation();
        //if (animation) {
        //    if (typeof animation.playWithIndex === "function") {
        //        if (name == "赖子") {
        //            animation.playWithIndex(1, -1, 0);
        //        }
        //        if (name == "赖根") {
        //            animation.playWithIndex(2, -1, 0);
        //        }
        //        if (name == "朝天") {
        //            animation.playWithIndex(3, -1, 0);
        //        }
        //        armature.setPosition(cc.p(size.width / 2, size.height / 2 + 150));
        //        this.addChild(armature, 100);
        //        armature.runAction(cc.sequence(cc.delayTime(1.7), cc.removeSelf()));
        //    }
        //}
        Sound.getInstance().playEffect(__String.createWithFormat(getResPath("gaogang/sound/laizi.mp3")));
        return armature;
    },
    _setLaizi: function (laizi, laizipi, laizipi2, gamestart) {
        this._curLaizi = laizi;
        this._curLaizipi = laizipi;
        this._curLaizipi2 = laizipi2;

        var size = cc.director.getWinSize();
        if (laizi == null || laizi == undefined || laizi == -1 || laizi == 255) {
            if (this._curLaizi_bg) this._curLaizi_bg.setVisible(false);
            return;
        }
        if (gamestart == undefined) gamestart = false;

        if (this._curLaizi_bg == null) {
            this._curLaizi_bg = new cc.Sprite(getResPath("gaogang/flag/laizi_bg3.png"));
            this._curLaizi_bg.setPosition(cc.p(size.width - 220, size.height - 70));
            this.addChild(this._curLaizi_bg, 200);
        }
        this._curLaizi_bg.removeAllChildren();
        this._curLaizi_bg.setVisible(true);

        if (this._curLaizipi > 0) {
            var card = new MJCard();
            card.setValue(this._curLaizi, 0, CardType.Card_Out, 0);
            card.setPosition(cc.p(this._curLaizi_bg.getContentSize().width / 2, this._curLaizi_bg.getContentSize().height / 2));
            card.setScale(1);
            //card.setStoreColor(cc.color(255, 249, 137));
            this._curLaizi_bg.addChild(card);
            this.room_Card.other_card.push(card);

            if (gamestart) {
                var dl = 0;
                var ppos = card.getPosition();
                card.setScale(0);
                card.setVisible(false);
                var self = this;
                var callFunc = cc.CallFunc(function () {
                    self._showLaizi_effect("赖子皮");
                });
                card.setPosition(cc.p(size.width / 2 - this._curLaizi_bg.getPositionX() + this._curLaizi_bg.getContentSize().width / 2, size.height / 2 - this._curLaizi_bg.getPositionY() + this._curLaizi_bg.getContentSize().height / 2));
                card.runAction(cc.sequence(cc.delayTime(0 + dl), cc.show(), callFunc, cc.scaleTo(0.1, 2), cc.delayTime(1.0), cc.spawn(cc.moveTo(0.17, ppos), cc.scaleTo(0.17, 1))));
            }
        }
    },

    _showHandcardFlag: function (isEndShow) {
        if (MJModel.isOnVideo) {
            for (var j = 0; j < 4; j++) {
                var allcards = this.room_Card.hand_card[j];
                if (allcards) {
                    for (var i = 0; i < allcards.length; i++) {
                        var card = allcards[i];
                        this._checkAddCardFlag(card);
                    }
                }
            }
            return;
        }
        var allcards = this.room_Card.hand_card[0];
        if (allcards) {
            for (var i = 0; i < allcards.length; i++) {
                var card = allcards[i];
                this._checkAddCardFlag(card);
            }
        }
    },
    _checkAddCardFlag: function (card) {
        try {
            if (card.type == CardType.Card_Outing)return;
            if (card.type == CardType.Card_Peng)return;
            if (card.getValue() == 0)return;
            var flag_str = "";
            if (card.getValue() == this._curLaizi)flag_str = "gaogang/flag/lai_flag2.png";
            if (card.getValue() == this._curLaizipi)flag_str = "gaogang/flag/laipi_flag2.png";
            if (card.getValue() == this._curLaizipi2)flag_str = "gaogang/flag/laipi_flag2.png";
            if (flag_str != "") {
                if (card.getValue() == this._curLaizi)card.setStoreColor(cc.color(255, 249, 137));
                var p = card.getChildByName("sprite");
                p.removeChildByName("laizi_flag");
                var flag = null;

                flag = new cc.Sprite(getResPath(flag_str));

                var m_size = p.getContentSize();
                if (flag) {
                    flag.setPosition(cc.p(0, m_size.height));
                    flag.setAnchorPoint(cc.p(0, 1));
                    flag.setName("laizi_flag");
                    p.addChild(flag);
                    this._flagDirection(card.pos, flag, m_size);
                    flag.setScale(0.5);
                    if (card.pos == 0 && card.type != CardType.Card_Out)flag.setScale(1);
                }
                return;
            }
        } catch (e) {
            Log(this, e);
        }
    },
    //每个方向角标对应
    _flagDirection: function (pos, flag, m_size) {
        if (MJModel.mj_table_view == "2d") {
            if (MJModel.mj_paiban == "vertical" || pos == 2) {
                return;
            }
        }
        if (pos == 1) {
            flag.setPosition(cc.p(0, 15));
            flag.setRotation(-90);
        } else if (pos == 2) {
            flag.setPosition(cc.p(m_size.width, 5));
            flag.setRotation(180);
        } else if (pos == 3) {
            flag.setPosition(cc.p(m_size.width, m_size.height));
            flag.setRotation(90);
        }
    },
    resetGame: function (allClean) {
        this._super(allClean);
        this._setLaizi(-1, -1, -1);
        this.isForceTing = false;
        MJModel.mj_lockcard_type = 0;
        this._huaCard = [[], [], [], []];
    },
    handler_server_scene_info_uc: function (hubei_scene, canDelay) {
        if (hubei_scene) {
            var is_forced_ting = hubei_scene.is_forced_ting;
            if (is_forced_ting) {
                for (var i = 0; i < is_forced_ting.length; i++) {
                    if (MJModel.isMyPlayer(i) && is_forced_ting[i] == 1) {
                        MJModel.mj_lockcard_type = 2;
                    }
                }
            }
        }

        this._super(hubei_scene.public_scene, canDelay);
        if (this.room_Card) {
            this.room_Card.setSomeCardClickState();
        }
        //锁住手牌
        this._setGameType();
    },

    handler_server_out_card_bc: function (data, canDelay) {
        this._super(data, canDelay)
        var userOutCard = parsePacket("proto.game.AckUserOutCard", data);
        var seatId = userOutCard.ChairID;
        var card = userOutCard.Card;
        if (card >= 0x51 && card <= 0x58 && canDelay) {
            this.room_Tip.showOtherEffect(MJModel.getPosBySeatid(seatId), "gaogang/effect/buhua/effects_mjxxbuhuax.ExportJson", "effects_mjxxbuhuax", 1);
        }

        var can_show_listen_info = true;
        for (var j = 0; j < MJModel.final_listen_info.length; j++) {
            if (MJModel.final_listen_info[j].Card == 255) {
                can_show_listen_info = false;
                break;
            }
        }
        if (MJModel.isMyPlayer(seatId))MJModel.mj_table.removeChildByName("tingpai_layer");
        if (MJModel.final_listen_info.length > 0 && can_show_listen_info && MJModel.isMyPlayer(seatId)) {
            MJModel.mj_listenLayer_autoshow = true;
            var selectLayer = new TingPaiLayer();
            selectLayer.show2(MJModel.final_listen_info);
            selectLayer.setName("tingpai_layer");
            MJModel.mj_table.addChild(selectLayer, 100);//一定要在MJAction下边
        } else {
            cc.eventManager.dispatchCustomEvent("tingpai_info_notice_reflash");
        }

        if (MJModel.isOnVideo) {
            this.room_Action.setOperator(-1);
        }

        if (this.room_Card) {
            this.room_Card.setSomeCardClickState();
        }
    },
    handler_server_peng_kang_bc: function (data, canDelay) {
        this._super(data, canDelay);
        if (this.room_Card) {
            this.room_Card.setSomeCardClickState();
        }

        var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);
        var seatid = ackBcOpResult.ChairID;
        if (MJModel.isMyPlayer(seatid)) {
            MJModel.mj_table.removeChildByName("tingpai_layer");
        } else {
            cc.eventManager.dispatchCustomEvent("tingpai_info_notice_reflash");
        }
    },

    handler_out_card_sound: function (sex, card) {
        if (card >= 0x51 && card <= 0x58) {
            if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
                Sound.getInstance().playEffect(__String.createWithFormat(getResPath("gaogang/sound/operator/%1_buhua.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m"));
            } else {
                Sound.getInstance().playEffect(__String.createWithFormat(getResPath("RoomMJ/sound/operator/%1_buhua.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m"));
            }
        } else {
            if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
                Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
                Sound.getInstance().playEffect(__String.createWithFormat(getResPath("gaogang/sound/chupai/%1_%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", Utils.toHex2(card)));
            } else {
                this._super(sex, card);
            }
        }
    },

    handler_op_sound: function (pos, sex, OpType, OpType2, effect) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
            if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU && effect == "") {
                var zimo = this.room_Card.isDuoPai(pos);
                effect = "hu";
                if (zimo) {
                    effect = "zimo";
                }
            } else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                effect = "peng";
            }
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("gaogang/sound/operator/%1_%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", effect));
        } else {
            this._super(pos, sex, OpType, OpType2, effect);
        }
    },

    handlerAutoUpTableReady: function (nums, selfIsReady) {
        if (MJModel.seatid == -1 && nums < 4) {
            this.actionCallBack("uptable");
        }
        else if (selfIsReady == false) {
            if (MJModel.canQuxiaoZhun()) {
                if (MJModel.roomState != 0) this.actionCallBack("ready");
            }
        }
    },

    handler_op_effect: function (pos, out_pos, sex, OpType, OpType2, effect) {
        this.room_Tip.showEffect(pos, OpType, this.room_Card.isDuoPai(pos));
        // this.room_Tip.showSimpleEffect(pos, out_pos, OpType, effect);
    },
});

var MJResult_XinYu = MJCommonResult.extend({
    updateContentView: function (ackGameEndJS) {
        this.ackGameEnd = ackGameEndJS.public_end;
        this.ackGameEndJS = ackGameEndJS;
        //输赢标志
        var seatId = MJModel.seatid;
        var score = this.ackGameEnd.Score[seatId];
        var effectName = "lose";
        if (score > 0) {
            effectName = "win";
        }
        this._win_effect(effectName);

        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);

        var itemHeight = 120;

        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;

            var countY = m;

            if (MJModel.mj_roomType == 1) {
                if (pos == 2) {
                    continue;
                }
            }

            if (MJModel.mj_roomType == 2) {
                if (pos == 1 || pos == 3) {
                    continue;
                }

                if (pos == 0) {
                    countY = 1;
                } else if (pos == 2) {
                    countY = 2;
                }
            }

            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 495 - count * itemHeight;
            var startX = 40;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX + 60, startY + 55));
            this.bgSpr.addChild(headLayer, 10);

            //上排牌 杠
            var ganghuLayer = this.createManGuanLayer(seatid);
            this.bgSpr.addChild(ganghuLayer, 10);
            ganghuLayer.setPosition(cc.p(startX + 230, startY + 65));

            //下排牌
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX + 0, startY));
            this.bgSpr.addChild(handCardLayer);

            // this.createSpecialHuTip(startX + 785, startY + 40, seatid);
            this.createSpecialHuTip(startX + 900, startY + 40 + 15, seatid);

            // 输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX + 1100, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            //中马列表
            var maLayer = this.createMaLayer(seatid);
            if (maLayer) {
                maLayer.setPosition(cc.p(startX + 230, startY + 65));
                this.bgSpr.addChild(maLayer);
            }
            count++;
        }
    },
    createMaLayer: function (seatid) {
        return;
        var layer = null;
        layer = new cc.Layer();
        var mapaiList = [[0x51, 0x52, 0x51, 0x52], [0x51, 0x52, 0x51, 0x52], [0x51, 0x52, 0x51, 0x52], [0x51, 0x52, 0x51, 0x52]];
        if (mapaiList) {
            var startx = 10;
            if (mapaiList[seatid].length > 0) {
                var maPic = new cc.LabelTTF("花牌: ", "Arial", 22);
                maPic.setName("huapaiTip");
                maPic.setColor(this.leftColor);
                maPic.setAnchorPoint(cc.p(0.0, 0));
                maPic.setPosition(cc.p(startx));
                layer.addChild(maPic);

                var cardlist = mapaiList[seatid];
                for (var i = 0; i < cardlist.length; i++) {
                    var card = new MJCard();
                    card.setValue(cardlist[i], 0, CardType.Card_End, 0);
                    card.setAnchorPoint(cc.p(0.0, 0));
                    card.setScale(0.3);
                    card.setPosition(cc.p(startx + maPic.getContentSize().width + parseInt((i )) * 25, -5));
                    layer.addChild(card, 50 - i);
                }

            }

        }
        return layer;
    }
    ,
    getFanStr: function (fanType, num) {
        var str = AddFanNameArray[fanType];
        if (!str) {
            return "";
        }
        return "" + str + " ";
    },
    createManGuanLayer: function (seatid) {

        var layer = new cc.Layer();
        var x = 0;
        var y = 0;
        var isLiuJuShuangSuan = false
        var huType = ["", "", "", ""];
        for (var i = 0; i < this.ackGameEnd.faninfo.length; i++) {
            var specialType = this.ackGameEnd.faninfo[i].SpecialType;

            switch (specialType) {
                case HuType.HU_ZIMO:
                case HuType.HU_PAOHU:
                case HuType.HU_QIANG_GANG:
                case HuType.HU_GANG_SHANG_HUA:
                case HuType.HU_DIANPAO:
                    for (var j = 0; j < this.ackGameEnd.faninfo[i].addfan.length; j++) {
                        var add_fan = this.ackGameEnd.faninfo[i].addfan[j];
                        var add_type = add_fan.AddType;
                        var add_num = add_fan.AddNum;
                        huType[i] += this.getFanStr(add_type, add_num);
                    }
                    //连庄
                    var lian_zhuang = this.ackGameEndJS.lian_zhuang;
                    if ((i == seatid) && (lian_zhuang == 1) && specialType != HuType.HU_DIANPAO) {
                        isLiuJuShuangSuan = true;
                    }
                    break;
            }

        }

        var addFanType = [];
        var man_guan_type = this.ackGameEndJS.man_guan_type;
        var type = man_guan_type[seatid];
        if (AddManGuanTypeArray.indexOf(type) != -1) {
            huType[seatid] = AddManGuanNameArray[AddManGuanTypeArray.indexOf(type)] + " " + huType[seatid];
        }

        //连庄
        var lian_zhuang = this.ackGameEndJS.lian_zhuang;

        if (isLiuJuShuangSuan) {
            huType[seatid] = "流局双算" + " " + huType[seatid];
        }
        //if (lian_zhuang && MJModel.banker_seatid == seatid) {
        //    huType[seatid] = "连庄" + " " + huType[seatid];
        //}

        //if(this.ackGameEnd.EndState == 1){
        //    huType[seatid] = "连庄" + " " + huType[seatid];
        //}

        var maPic = new cc.LabelTTF(huType[seatid], "Arial", 22);
        maPic.setColor(this.leftColor);
        maPic.setAnchorPoint(cc.p(0.0, 0));
        maPic.setPosition(cc.p(x, y + 7));
        layer.addChild(maPic);

        x = maPic.getContentSize().width + 10;

        var mapaiList = MJModel.mj_table._huaCard;
        if (mapaiList) {
            var startx = 0;
            if (x == 0) {
                startx = x;
            } else {
                startx = x + 10;
            }
            if (mapaiList[MJModel.getPosBySeatid(seatid)].length > 0) {
                var maPic = new cc.LabelTTF("花牌: ", "Arial", 20);
                maPic.setName("huapaiTip");
                maPic.setColor(this.leftColor);
                maPic.setAnchorPoint(cc.p(0.0, 0));
                maPic.setPosition(cc.p(startx, y + 10));
                layer.addChild(maPic);

                var cardlist = mapaiList[MJModel.getPosBySeatid(seatid)];
                for (var i = 0; i < cardlist.length; i++) {
                    var card = new MJCard();
                    card.setValue(cardlist[i], 0, CardType.Card_End, 0);
                    card.setAnchorPoint(cc.p(0.0, 0));
                    card.setScale(0.3);
                    card.setPosition(cc.p(startx + maPic.getContentSize().width + parseInt((i )) * 25, y));
                    layer.addChild(card, 50 - i);
                }

            }

        }
        return layer;
    }
    ,
    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var path = "";
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5天和 6地和 7抢杠胡 8杠上开花 9花上添花
            switch (fanInfo.SpecialType) {
                case 1:
                    path = "RoomMJ/result2/zi_mo_icon.png";
                    break;
                case 2:
                    path = "RoomMJ/result2/pao_hu_icon.png";
                    break;
                case 3:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                case 5:
                    path = "RoomMJ/result2/qiang_gang_icon.png";
                    break;
                case 7:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                default:
                    break;
            }
            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setPosition(cc.p(startX, startY));
                this.bgSpr.addChild(typeSprite);

            }
        }
    }
    ,
    //输赢分
    createScoreLayer: function (seatid) {
        var layer = new cc.Layer();
        var score = 0;
        if (this.ackGameEnd.Score && this.ackGameEnd.Score.length > seatid) score = this.ackGameEnd.Score[seatid];
        var width = 0;
        var path = getResPath("RoomMJ/result2/result_small_label_lose.png");
        if (score > 0) {
            path = getResPath("RoomMJ/result2/result_small_label_win.png");
        }
        var scoredes = ":";
        if (score == 0) scoredes = "";
        var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), path, 29, 37, '0');

        scoreLabel.setAnchorPoint(cc.p(0.0, 0.5));

        scoreLabel.setPosition(cc.p(width, 15));
        scoreLabel.setName("scoreLabel");
        layer.addChild(scoreLabel);

        if (Math.abs(score) >= 10000) {
            scoreLabel.setScale(0.8);
        }
        return layer;
    }
    ,
});
