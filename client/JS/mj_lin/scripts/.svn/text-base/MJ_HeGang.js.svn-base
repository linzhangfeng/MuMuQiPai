loadProtoFile("proto/heganggameproto.proto");


var HuType = {
    HU_INVALID: 0,
    HU_ZIMO: 1,
    HU_PAOHU: 2,
    HU_HeiMo: 2,
    Hu_RuanMo: 1,
    HU_DIANPAO: 3,
    HU_BEIZIMO: 4,
    HU_QIANG_GANG: 5,
    HU_BEI_QIANG_GANG: 6,
    HU_YI_PAO_DUO_XIANG: 7,
    HU_GANG_SHANG_HUA: 8,
    HU_GANG_HOU_PAO: 9,
};
var PZHActionType =
{
    TYPE_BAOTING: 0x4000,				//报听
    TYPE_QIANG_TING_PENG: 0x10000,					//抢听（碰）
    TYPE_QIANG_TING_LEFT_CHI: 0x20000,					//抢听（左吃）
    TYPE_QIANG_TING_CENTER_CHI: 0x40000,					//抢听（中吃）
    TYPE_QIANG_TING_RIGHT_CHI: 0x80000,				//抢听（右吃）
};

var AddFanType = {
    MJ_FAN_TYPE_QINGYISE: 14,				//清一色 X2
    MJ_FAN_TYPE_QIDUI: 36,					//小七对 +4
    MJ_FAN_TYPE_MENQIANQING: 30,				//门清 X2
    MJ_FAN_TYPE_GANGSHANGHUA: 24,			//杠上开花     X2
    MJ_FAN_TYPE_GANGHOUPAO: 29,				//流泪 X2
    MJ_FAN_TYPE_TIANHU: 19,					//天胡 X2
    MJ_FAN_TYPE_DIHU: 20,					//地胡 X2
    MJ_FAN_TYPE_HAIDILAOYUE: 23,				//海底捞月 X2

    MJ_FAN_TYPE_PIHU: 121,						//屁胡+1
    MJ_FAN_TYPE_KAIPAIZHA: 122,				//开牌炸+64
    MJ_FAN_TYPE_DANDIAOJIA: 123,				//单吊夹X2
    MJ_FAN_TYPE_PIAOHU: 124,				    //漂胡X2
    MJ_FAN_TYPE_ZHUANGJIA: 125,				//庄家X2
    MJ_FAN_TYPE_DIANPAO: 126,				    //点炮X2
    MJ_FAN_TYPE_ZIMO: 127,				        //自摸X2
    MJ_FAN_TYPE_MENTING: 128,				    //闷听X2
    MJ_FAN_TYPE_HEIKA: 129,				    //黑卡X2
    MJ_FAN_TYPE_HZJIABEI: 130,				    //红中加倍X2
    MJ_FAN_TYPE_HZMANTIANFEI: 131,				//红中满天飞X2
    MJ_FAN_TYPE_BUJIABUHU: 132,				//不夹不胡X2
    MJ_FAN_TYPE_SHOUBAYI: 133,				    //手把一X2
};

var AddFanTypeArray = [
    AddFanType.MJ_FAN_TYPE_QINGYISE,				//清一色 X2
    AddFanType.MJ_FAN_TYPE_QIDUI,					//小七对 +4
    AddFanType.MJ_FAN_TYPE_MENQIANQING,				//门清 X2
    AddFanType.MJ_FAN_TYPE_GANGSHANGHUA,			//杠上开花     X2
    AddFanType.MJ_FAN_TYPE_GANGHOUPAO,				//流泪 X2
    AddFanType.MJ_FAN_TYPE_TIANHU,					//天胡 X2
    AddFanType.MJ_FAN_TYPE_DIHU,					//地胡 X2
    AddFanType.MJ_FAN_TYPE_HAIDILAOYUE,				//海底捞月 X2

    AddFanType.MJ_FAN_TYPE_PIHU,						//屁胡+1
    AddFanType.MJ_FAN_TYPE_KAIPAIZHA,				//开牌炸+64
    AddFanType.MJ_FAN_TYPE_DANDIAOJIA,				//单吊夹X2
    AddFanType.MJ_FAN_TYPE_PIAOHU,				    //漂胡X2
    AddFanType.MJ_FAN_TYPE_ZHUANGJIA,				//庄家X2
    AddFanType.MJ_FAN_TYPE_DIANPAO,				    //点炮X2
    AddFanType.MJ_FAN_TYPE_ZIMO,				        //自摸X2
    AddFanType.MJ_FAN_TYPE_MENTING,				    //闷听X2
    AddFanType.MJ_FAN_TYPE_HEIKA,				    //黑卡X2
    AddFanType.MJ_FAN_TYPE_HZJIABEI,				    //红中加倍X2
    AddFanType.MJ_FAN_TYPE_HZMANTIANFEI,				//红中满天飞X2
    AddFanType.MJ_FAN_TYPE_BUJIABUHU,				//不夹不胡X2
    AddFanType.MJ_FAN_TYPE_SHOUBAYI,				    //手把一X2
];

var AddFanNameArray = [
    "清一色X2",
    "小七对+4",
    "门清X2",
    "杠上开花X2",
    "流泪X2",
    "天胡X2",
    "地胡X2",
    "海底捞月X2",

    "屁胡+1",
    "开牌炸+64",
    "单吊夹X2",
    "漂胡X2",
    "庄家X2",
    "点炮X2",
    "自摸X2",
    "闷听X2",
    "黑卡X2",
    "红中加倍X2",
    "红中满天飞X2",
    "不夹不胡X2",
    "手把一X2",
];

var selfCMD = {
    SERVER_HAERBIN_SHAIZI: 5080,
    SERVER_Laizi_BC: 5084,   //亮牌
    SERVER_CHANGESEAT: 5082,
};

var MJTable_HeGang = MJTable.extend({
    tag: "MJTable_HeGang",
    _curLaizi: -1,
    _curLaizipi: -1,
    _curLaizipi2: -1,
    _curLaizi_bg: null,
    isRecordShow: false,
    _pkg_id: 0,
    maxQuan: 1,
    _huaCard: [[], [], [], []],
    isForceTing: false,
    _huaValues: [],
    isBaoTingIng: false,
    _fanmain_card: [-1, -1, -1, -1],
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        MJModel.mj_suport_fangyan = 0;
        MJModel.outCardEffect_style = 1;

        MJModel.mj_bg_use = 1;
        MJModel.mj_suport_change_bg = 1;
        MJModel.toupiaoTipsType = 1;
        MJModel.chi_layout = 3;
        MJModel.mj_touch_tip = 1;
        MJModel.isOutCard = true;
        MJModel.mj_chat_style = 5;
        MJModel.mj_public_style = 1;
        MJModel.mj_card_lib_type = 1;

        MJModel.mj_gps_type = 1;
        MJModel.mj_double_click_style = 1;

        MJModel.has_hu_layout = 0;
        MJModel.shareType = 1;
        this.isForceTing = false;
        this.isBaoTingIng = false;
        this.mj_roomType = 0;
        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];

            MJModel.mj_roomType = 0;
            this.mj_roomType = 0;
            if (this._pkg_id == 3037 || this._pkg_id == 2898) { //4人
                MJModel.mj_roomType = 0;
                this.mj_roomType = 0;
            }
            if (this._pkg_id == 3038 || this._pkg_id == 2899) { //3人
                MJModel.mj_roomType = 1;
                this.mj_roomType = 1;
            }
            if (this._pkg_id == 3039 || this._pkg_id == 2900) { //2人
                MJModel.mj_roomType = 2;
                this.mj_roomType = 2;
            }
        } catch (e) {
            Log(this, e);
        }

        try {
            var help = this.roomPublic.getChildByName("game_help");
            help.setVisible(false);
        } catch (e) {

        }

        this._init_extend();
        this._super();
        this._init_ui();
        this._update_action();
        //this.schedule(this.test, 1.0);
    },
    _init_ui: function () {
        var self = this;
        {
            var btn = new ccui.Button();
            btn.loadTextures(getResPath("RoomMJ/action/baoting1.png"), getResPath("RoomMJ/action/baoting1.png"), "");
            this.room_Action.actions["baoting"] = btn;
            btn.setName("baoting");
            btn.addClickEventListener(function (sender, evt) {
                self.room_Action.btnCallback(sender);
            });
            btn.setVisible(false);
            this.room_Action.addChild(btn);
            this.room_Action.opBtns.push(btn);
        }

        var self = this;
        {
            var btn = new ccui.Button();
            btn.loadTextures(getResPath("hegang/action/qiangting.png"), getResPath("hegang/action/qiangting.png"), "");
            this.room_Action.actions["qiangting"] = btn;
            btn.setName("qiangting");
            btn.addClickEventListener(function (sender, evt) {
                self.room_Action.btnCallback(sender);
            });
            btn.setVisible(false);
            this.room_Action.addChild(btn);
            this.room_Action.opBtns.push(btn);
        }
    },
    _update_action: function () {

    },
    getMjTypePath: function () {
        var pkg_id = 4;
        if (MJModel.mj_roomType == 1) {
            pkg_id = 3;
        }
        else if (MJModel.mj_roomType == 2) {
            pkg_id = 2;
        } else {
            pkg_id = 4;
        }
        var str = "hegang/mj_type_1_" + pkg_id + ".png"
        return getResPath(str);
    },
    updateBg: function (isInit) {
        this._super(isInit);
    },


    onEnter: function () {
        this._super();
    },

    isSupportPublicCard: function () {
        return false;
    },

    _init_extend: function () {

        this.initMJCard();
        this.initMJPublic();
        this.initMJConfig();
        this.initMJAction();
        this.initMJInfo();
        this.initMJPlayer();
        this.initMJPreTable();
        this.initDialogs();
        this.initMJTips();
        this.initMJActionVideo();

        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(false);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };

    },
    initMJActionVideo: function () {
        var selfTable = this;
        var super_mjactionvideo_ctor = MJActionVideo.prototype.ctor;
        MJActionVideo.prototype.ctor = function () {
            super_mjactionvideo_ctor.call(this);
            for (var i = 0; i < 4; i++) {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("RoomMJ/action/baoting1.png"), getResPath("RoomMJ/action/baoting1.png"), "");
                btn.setName("baoting");
                btn.setVisible(false);
                btn.setTag(1);
                this.addChild(btn);

                this.actions[i]["baoting"] = btn;
                this.opBtns[i].push(btn);
            }

            for (var i = 0; i < 4; i++) {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("hegang/action/qiangting.png"), getResPath("hegang/action/qiangting.png"), "");
                btn.setName("qiangting");
                btn.setVisible(false);
                btn.setTag(1);
                this.addChild(btn);

                this.actions[i]["qiangting"] = btn;
                this.opBtns[i].push(btn);
            }
        };

        MJActionVideo.prototype.setOperator = function (pos, operat) {
            for (var i = 0; i < this.opBtns[pos].length; i++) {
                this.opBtns[pos][i].setVisible(false);
            }

            if (operat == -1 || operat == 0 || operat == null || operat == undefined) {
                return false;
            }

            if (( operat & ActionType.TYPE_LISTEN) == ActionType.TYPE_LISTEN) {
                operat = operat - ActionType.TYPE_LISTEN;
            }

            if(operat <= 0){
                return false;
            }

            if (this.actions[pos]["pass"]) {
                this.actions[pos]["pass"].setVisible(true);
            }

            if ((operat & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                if (this.actions[pos]["hu"]) {
                    this.actions[pos]["hu"].setVisible(true);
                }
            }

            if ((operat & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG || (operat & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (operat & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                if (this.actions[pos]["gang"]) {
                    this.actions[pos]["gang"].setVisible(true);
                }
            }

            if ((operat & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                if (this.actions[pos]["peng"]) {
                    this.actions[pos]["peng"].setVisible(true);
                }
            }

            if ((operat & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (operat & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI || (operat & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                if (this.actions[pos]["chi"]) {
                    this.actions[pos]["chi"].setVisible(true);
                }
            }


            if (operat != -1 && selfTable.isBaoTing(operat)) {
                if (this.actions[pos]["baoting"]) {
                    this.actions[pos]["baoting"].setVisible(true);
                }
            }

            if (operat != -1 && selfTable.isQiangTing(operat)) {
                if (this.actions[pos]["qiangting"]) {
                    this.actions[pos]["qiangting"].setVisible(true);
                }
            }

            this.reflashOpBtns(pos);
            return true;
        };
    },
    initMJTips: function () {
        //展示简单的动画，用于简化碰杠胡动画
        MJTips.prototype.showSimpleEffect = function (pos, out_pos, type, effect, hold) {
            try {
                if (hold == undefined)hold = false;
                var begin = MJConfig.getOperatorTipPos(pos);
                var path = null;
                var parentPath = "RoomMJ/simple/";
                if (effect == "qiangganghu") {
                    hold = true;
                    path = getResPath(parentPath + "qiangganghu.png");
                } else if (effect == "dianpao") {
                    hold = true;
                    path = getResPath(parentPath + "dianpao.png");
                } else if (effect == "haidi") {
                    path = getResPath(parentPath + "haidi.png");
                } else if (effect == "baoting") {
                    path = getResPath(parentPath + "baoting.png");
                } else if (effect == "qiangting") {
                    path = getResPath("hegang/action/qiangting.png");
                } else if (effect == "buzhang") {
                    path = getResPath(parentPath + "buzhang.png");
                } else if (effect == "genzhuang") {
                    var size = cc.director.getWinSize();
                    begin = cc.p(size.width / 2, size.height / 2);
                    path = getResPath(parentPath + "genzhuang.png");
                } else if (type == ActionType.TYPE_PENG) {
                    path = getResPath(parentPath + "peng.png");
                } else if (type == ActionType.TYPE_HU) {
                    hold = true;
                    if (effect == "zimo") {
                        path = getResPath(parentPath + "zimo.png");
                    } else {
                        if (pos != out_pos) {
                            this.showSimpleEffect(out_pos, null, null, "dianpao");
                        }
                        path = getResPath(parentPath + "hu.png");
                    }
                } else if (type == ActionType.TYPE_LEFT_CHI || type == ActionType.TYPE_CENTER_CHI || type == ActionType.TYPE_RIGHT_CHI) {
                    path = getResPath(parentPath + "chi.png");
                } else {
                    path = getResPath(parentPath + "gang.png");
                }

                var bg = new cc.Sprite(getResPath(parentPath + "bg.png"));
                bg.setPosition(begin);
                bg.setName("hu_effect");
                // this.addChild(bg, 10000);

                var sp = new cc.Sprite(path);
                sp.setPosition(begin);
                sp.setName("hu_effect");
                this.addChild(sp, 10000);

                if (hold) {
                    // bg.runAction(cc.sequence(cc.delayTime(this.getHuEffectTime()), cc.removeSelf()));
                    sp.runAction(cc.sequence(cc.delayTime(this.getHuEffectTime()), cc.removeSelf()));
                } else {
                    // bg.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
                    sp.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
                }
            } catch (e) {
                Log(this, e);
            }
        };
    },
    initMJPreTable: function () {
    },
    initDialogs: function () {
    },
    initMJPlayer: function () {
        MJPlayer.prototype.setTingPaiVisible = function (v) {
            if (!this.liangpai_flag) {
                this.liangpai_flag = new cc.Sprite(getResPath("RoomMJ/tingpai_flag.png"));
                this.liangpai_flag.setVisible(false);
                if (this.pid == 1) {
                    this.liangpai_flag.setPosition(cc.p(0, 30));
                }
                else {
                    this.liangpai_flag.setPosition(cc.p(this.m_size.width, 30));
                }
                this.addChild(this.liangpai_flag, 1);
            }
            if (this.liangpai_flag) {
                this.liangpai_flag.setVisible(v);
            }
        };
        var superreset = MJPlayer.prototype.reset;
        MJPlayer.prototype.reset = function (allClean, isGameStart) {
            superreset.call(this);
            this.setTingPaiVisible(false);
        };
    },
    initMJInfo: function () {
    },
    initMJCard: function () {
        //去掉出牌按钮
        MJCards.prototype.createOutCardBtn = function () {

        };
    },
    initMJAction: function () {
        var selfTable = this;
        TingPaiLayer.prototype.onTouchEnded = function (touch, event) {
            if (this._isTouchInside(touch)) {
                return;
            }
        };

        //湖北麻将不要自动胡牌功能
        MJAction.prototype.setAutoOutCardVis = function (value) {
        };

        MJAction.prototype.setQiangTingOperator = function (Gangoperat) {
            if (this.actions["pass"]) {
                this.actions["pass"].setVisible(true);
            }


            if ((Gangoperat & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG || (Gangoperat & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (Gangoperat & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                if (this.actions["gang"]) {
                    this.actions["gang"].setVisible(true);
                }
            }

            if (this.actions["qiangting"]) {
                this.actions["qiangting"].setVisible(true);
            }

            this.reflashOpBtns();
        };

        var super_setOperator = MJAction.prototype.setOperator;
        MJAction.prototype.setOperator = function (operat) {
            this.removeChildByName("ChooseGang_selectLayer");
            this.removeChildByName("ChooseGang_selectLayer");
            if (operat == -1 || operat == 0 || operat == null || operat == undefined) {
                for (var i = 0; i < this.opBtns.length; i++) {
                    this.opBtns[i].setVisible(false);
                }
                MJModel.curOperate = -1;
                return false;
            }

            MJModel.curOperate = operat;

            this.isBaoTingIng = false;
            if (operat != -1 && selfTable.isBaoTing(MJModel.curOperate)) {
                this.setBaoTingOperator(operat);
                //return;
            }

            if (operat != -1 && selfTable.isQiangTing(MJModel.curOperate)) {
                this.setQiangTingOperator(operat);
                //return;
            }
            super_setOperator.call(this, operat);
        };

        var super_btnCallback = MJAction.prototype.btnCallback;
        MJAction.prototype.btnCallback = function (ref) {
            var self = this;
            var n = ref;
            var name = n.getName();
            Log(this, "btnCallback:" + name);
            if (name == "baoting") {
                var type = PZHActionType.TYPE_BAOTING;
                sendOperateCard(type, MJModel.curOperateCard);
                this.setOperator(-1);
                return;
            }

            if (name == "qiangting") {
                var type = ActionType.TYPE_PASS;
                var op = MJModel.curOperate;

                var op_nums = 0;
                if ((op & PZHActionType.TYPE_QIANG_TING_PENG) == PZHActionType.TYPE_QIANG_TING_PENG) {
                    type = PZHActionType.TYPE_QIANG_TING_PENG;
                    op_nums++;
                }

                if ((op & PZHActionType.TYPE_QIANG_TING_LEFT_CHI) == PZHActionType.TYPE_QIANG_TING_LEFT_CHI) {
                    type = PZHActionType.TYPE_QIANG_TING_LEFT_CHI;
                    op_nums++;
                }

                if ((op & PZHActionType.TYPE_QIANG_TING_CENTER_CHI) == PZHActionType.TYPE_QIANG_TING_CENTER_CHI) {
                    type = PZHActionType.TYPE_QIANG_TING_CENTER_CHI;
                    op_nums++;
                }

                if ((op & PZHActionType.TYPE_QIANG_TING_RIGHT_CHI) == PZHActionType.TYPE_QIANG_TING_RIGHT_CHI) {
                    type = PZHActionType.TYPE_QIANG_TING_RIGHT_CHI;
                    op_nums++;
                }

                if (op_nums > 1) {
                    var selectLayer = new ChooseChi();
                    selectLayer.setChoiceInfos(MJModel.curOperate, MJModel.curOperateCard,name)
                    selectLayer.setName("ChooseGang_selectLayer");
                    selectLayer.setPosition(cc.p(n.getPosition().x, n.getPosition().y + 50));
                    selectLayer.setCallback(function (type) {
                        sendOperateCard(type, MJModel.curOperateCard);
                        self.setOperator(-1);
                        self.removeChildByName("ChooseGang_selectLayer");
                    });
                    this.addChild(selectLayer, 10000);
                    return;
                }

                sendOperateCard(type, MJModel.curOperateCard);
                cc.log("lin=a=3");
                this.setOperator(-1);
                return;
            }
            super_btnCallback.call(this, ref);
        };

        ChooseChi.prototype.setChoiceInfos = function (curOperate, curOperateCard,name) {
            var op_type_v = [];
            var op_cards_v = [];
            var op = curOperate;
            var cur_card = curOperateCard;

            if ((op & PZHActionType.TYPE_QIANG_TING_PENG) == PZHActionType.TYPE_QIANG_TING_PENG && name == "qiangting") {
                op_type_v.push(PZHActionType.TYPE_QIANG_TING_PENG);
            }

            if ((op & PZHActionType.TYPE_QIANG_TING_RIGHT_CHI) == PZHActionType.TYPE_QIANG_TING_RIGHT_CHI  && name == "qiangting") {
                op_type_v.push(PZHActionType.TYPE_QIANG_TING_RIGHT_CHI);
            } else if ((op & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                op_type_v.push(ActionType.TYPE_RIGHT_CHI);
            }

            if ((op & PZHActionType.TYPE_QIANG_TING_CENTER_CHI) == PZHActionType.TYPE_QIANG_TING_CENTER_CHI && name == "qiangting") {
                op_type_v.push(PZHActionType.TYPE_QIANG_TING_CENTER_CHI);
            } else if ((op & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                op_type_v.push(ActionType.TYPE_CENTER_CHI);
            }

            if ((op & PZHActionType.TYPE_QIANG_TING_LEFT_CHI) == PZHActionType.TYPE_QIANG_TING_LEFT_CHI && name == "qiangting") {
                op_type_v.push(PZHActionType.TYPE_QIANG_TING_LEFT_CHI);
            } else if ((op & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                op_type_v.push(ActionType.TYPE_LEFT_CHI);
            }

            for (var i = 0; i < op_type_v.length; i++) {
                op_cards_v[i] = [];
                var opType = op_type_v[i];
                for (var j = 0; j < 3; j++) {
                    var card_value = 0;
                    if (opType == PZHActionType.TYPE_QIANG_TING_PENG) {
                        card_value = cur_card;
                    }
                    if (opType == ActionType.TYPE_LEFT_CHI || opType == PZHActionType.TYPE_QIANG_TING_LEFT_CHI) {
                        card_value = cur_card + j;
                    }
                    if (opType == ActionType.TYPE_CENTER_CHI || opType == PZHActionType.TYPE_QIANG_TING_CENTER_CHI) {
                        card_value = cur_card + j - 1;
                    }
                    if (opType == ActionType.TYPE_RIGHT_CHI || opType == PZHActionType.TYPE_QIANG_TING_RIGHT_CHI) {
                        card_value = cur_card + j - 2;
                    }
                    op_cards_v[i].push(card_value);
                }
            }

            if(op_cards_v.length >= 4){
                this.setScale(0.8);
            }

            this.showUI(op_type_v, op_cards_v, cur_card,name);
        };

        ChooseChi.prototype.showUI = function (op_type_v, op_cards_v, cur_card,type) {
            var self = this;
            var op_nums = op_type_v.length;
            var card_size = cc.size(65, 96);
            var item_size = cc.size(65 * 3 + 30, 96 + 20);
            var size = cc.size((item_size.width + 20) * op_nums, item_size.height);
            this.setContentSize(size);

            //var bx = size.width / 2 - (item_size.width + 20) / 2 * (op_nums - 1);
            var lineNums = 3;
            if(type == "qiangting"){
                lineNums = 1;
            }
            var temp = (op_nums >= lineNums)?lineNums:op_nums;

            var bx = size.width / 2 - (item_size.width + 20) / 2 * (temp - 1);
            for (var i = 0; i < op_nums; i++) {
                var opType = op_type_v[i];
                var layout = new ccui.Layout();
                layout.setAnchorPoint(cc.p(0.5, 0.5));
                layout.setContentSize(item_size);
                layout.setTag(opType);
                this.addChild(layout);
                //layout.setPosition(cc.p(bx + (item_size.width + 20) * i, size.height / 2));
                layout.setPosition(cc.p(bx + (item_size.width + 20) * (i%lineNums), size.height / 2 + parseInt(i/lineNums) * 120));
                layout.setTouchEnabled(true);
                layout.addClickEventListener(function (ref, evt) {
                    var lay = ref;
                    if (self._callback) self._callback(lay.getTag());
                });

                var sp = new ccui.ImageView(getResPath("RoomMJ/bg.9.png"));
                sp.setScale9Enabled(true);
                sp.setAnchorPoint(cc.p(0.5, 0.5));
                sp.setContentSize(item_size);
                sp.setPosition(cc.p(layout.getContentSize().width / 2, layout.getContentSize().height / 2));
                layout.addChild(sp);

                for (var j = 0; j < op_cards_v[i].length; j++) {
                    var card_value = op_cards_v[i][j];
                    var tingCard = new MJCard();
                    tingCard.setValue(card_value, 0, CardType.Card_Hand, 0);
                    tingCard.setPosition(cc.p(45 + (card_size.width + 3) * j, item_size.height / 2));
                    tingCard.setAnchorPoint(cc.p(0.5, 0.5));
                    if (card_value == cur_card) {
                        tingCard.setChoiceTipShow(true);
                    }
                    tingCard.setScale(card_size.width / tingCard.getContentSize().width * MJConfig.getTipCardScale());
                    sp.addChild(tingCard);
                }
            }
        };
    }

    ,
    initMJConfig: function () {

    }
    ,
    initMJPublic: function () {
    }
    ,
    isjieshan: false,
    handler_server_end_room_result_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.AckDisbandResult", data);
        if (this.room_EndTouPiao) this.room_EndTouPiao.removeFromParent(true);
        this.room_EndTouPiao = null;
        MJModel.TouPiaoING = false;
        var result = jpacket.Result;

        if (result == 1) {
            PlatformHelper.showToast("房间解散成功，3秒后房间自动结束");
        }
        else {
            PlatformHelper.showToast("解散失败，稍后游戏继续！");
        }
    },
    test: function (dt) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;
        if (tempCount == 5 && false) {
            //for (var i = 0; i < 4; i++) {
            //    var arr = [0x41, 0x42, 0x42, 0x43, 0x51, 0x52, 0x53, 0x54, 0x55, 0x51, 0x52, 0x53, 0x54, 0x55, 0x31];
            //    for (var k = 0; k < arr.length; k++) {
            //        this.room_Card.addOutCard(i, arr[k]);
            //    }
            //}

            var op = 786816;
            cc.log("lin=test=" + ((op & PZHActionType.TYPE_QIANG_TING_LEFT_CHI) == PZHActionType.TYPE_QIANG_TING_LEFT_CHI));
            cc.log("lin=test=" + ((op & PZHActionType.TYPE_QIANG_TING_RIGHT_CHI) == PZHActionType.TYPE_QIANG_TING_RIGHT_CHI));
            cc.log("lin=test=" + ((op & PZHActionType.TYPE_QIANG_TING_CENTER_CHI) == PZHActionType.TYPE_QIANG_TING_CENTER_CHI));
        }


        if (tempCount == 5 && false) {
            for (var j = 0; j < 4; j++) {
                for (var i = 0; i < 8; i++) {
                    this.room_Card.addOutCard(j, 0x51);
                }
            }

        }

        if (tempCount == 5 && false) {
            var packet = {
                "gameend": {
                    "UserCard": [{
                        "ChangeableCardsLen": 5,
                        "ChangeableCards": [2, 4, 20, 20, 23],
                        "FixedCardsLen": 3,
                        "stFixedCards": [{
                            "CardData": 25,
                            "state": 1,
                            "chairID": 1,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 35, "state": 1, "chairID": 1, "OpCards": [], "LaiziNum": null}, {
                            "CardData": 3,
                            "state": 256,
                            "chairID": 2,
                            "OpCards": [],
                            "LaiziNum": null
                        }],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 8,
                        "ChangeableCards": [1, 21, 34, 37, 39, 41, 41, 65],
                        "FixedCardsLen": 2,
                        "stFixedCards": [{
                            "CardData": 5,
                            "state": 256,
                            "chairID": 0,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 7, "state": 64, "chairID": 0, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 8,
                        "ChangeableCards": [1, 2, 2, 20, 21, 38, 38, 40],
                        "FixedCardsLen": 2,
                        "stFixedCards": [{
                            "CardData": 17,
                            "state": 1,
                            "chairID": 1,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 22, "state": 2, "chairID": 0, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }],
                    "Score": [0, 0, 0],
                    "EndState": 1,
                    "EndGangInfo": [{"Gang": [], "TotalGangScore": 0}, {"Gang": [], "TotalGangScore": 0}, {
                        "Gang": [],
                        "TotalGangScore": 0
                    }],
                    "faninfo": [{
                        "chairid": 0,
                        "SpecialType": 0,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 1,
                        "SpecialType": 0,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {"chairid": 2, "SpecialType": 0, "FanNum": 0, "addfan": [], "hucard": 0, "DianPao": []}],
                    "money": [99993, 99999, 100008],
                    "ts": null,
                    "md5": []
                }
            };
            this.handler_server_game_end_bc(packet);
        }
    }
    ,
    autoOutCardTimeOut: function (dt) {
        this.unschedule(this.autoOutCardTimeOut);
        if (MJModel.isAutoOutCard == false && MJModel.mj_lockcard_type != 2)return;
        if (MJModel.TouPiaoING == true) return;//投票期间 该功能不起作用
        sendOutCard(MJModel.curOperateCard);
    },
    autoOutCard: function () {
        this.schedule(this.autoOutCardTimeOut, 0.5);
    },
    myselfOpenOutCard: function (IsMoCard, showTip) {
        if (IsMoCard == undefined) IsMoCard = false;
        if (showTip == undefined) showTip = true;
        if (MJModel.isOnVideo) {
            return;
        }

        if ((MJModel.isAutoOutCard && IsMoCard) || MJModel.mj_lockcard_type == 2) {
            this.autoOutCard();
            return;
        }
        this.room_Card.resetAllCardClickState();
        MJModel.canTouchCard = true;
        MJModel.canChoiceMore = false;
        this.room_Card.setTingPaiFlag(true);

        if (this.room_Action) this.room_Action.setTingPaiVis(false);
        if (this.room_Action) this.room_Action.setAutoOutCardVis(false);

        this.room_Card.setSomeCardClickState();

        if (showTip)this.room_Tip.showOutCardTip();
    },
    addFlagFanPaiTing: function (pos, card) {

    },
    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.hegangmj.tagHeGangGameScence", jpacket);
            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.hegangmj.AckHeGangGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
            return;
        }
        this._super(cmd, jpacket, canDelay, svrid);
    }
    ,
    handler_server_update_info_uc: function (data, canDelay) {
    }
    ,
    handler_server_mo_card_bc: function (data, canDelay) {
        this._super(data, canDelay);
        if (this.room_Card) {
            this.room_Card.setSomeCardClickState();
        }
    }
    ,
    _handler_game_record: function (data, canDelay) {
        if (this.isjieshan) {
            ZJHModel.getInstance().roomToHall();
        }
        if (MJModel.gpsInfo) {
            MJModel.gpsInfo.removeFromParent(true);
            MJModel.gpsInfo = null;
        }

        //-----新总结算界面
        var gpsInfo = cc.director.getRunningScene().getChildByName("gpsInfo");
        if (gpsInfo) {
            gpsInfo.removeFromParent(true);
        }

        cc.log("------big End");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var pkgId = this._pkg_id;
        var gameType = "鹤岗麻将";
        if (MJModel.mj_roomType == 1) {
            gameType = gameType + " 3人"
        } else if (MJModel.mj_roomType == 2) {
            gameType = gameType + " 2人"
        } else {
            gameType = gameType + " 4人"
        }
        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];
        //gameType += " · " + MJModel.base_money + "分底";

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        //var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;

        var max_score = 0;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            if (recoreInfo.totalscore > max_score) {
                max_score = recoreInfo.totalscore;
            }
        }

        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            //var playerRecord = totalRecord.player_records[i];
            var player = MJModel.players[i];
            var arrStr = [];
            //次数
            var arrcount = [];

            arrStr = ["坐庄次数", "胡牌次数", "点炮次数", "超时次数"];
            arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.Ex1, recoreInfo.outtime_num];

            if (player && player.uid != -1 && player.uid != 0) {
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var isWin = false;
                if (max_score > 0 && recoreInfo.totalscore == max_score) {
                    isWin = true;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, isWin, _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner, recoreInfo.dissState);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }
        }
        bigResult.refresh(PlayerNumber);
        this.release();
    }
    ,

    handler_server_game_end_bc: function (hubeiGameend, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            var ackGameEnd = hubeiGameend.gameend;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);

            if (MJModel.mj_table.getChildByName("tingpai_layer")) {
                MJModel.mj_table.removeChildByName("tingpai_layer")
            }

            this.room_Info.stopTime();
            this.room_Tip.hideOutCardTip();

            var show_all_handcard = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var show_liuju = cc.callFunc(function () {
                if (ackGameEnd.EndState == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
            });

            var show_end_score = cc.callFunc(function () {
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var update_all_money = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var game_end_reset = cc.callFunc(function () {
                try {
                    var result = new MJResult_XinYu();
                    result.updateContentView(hubeiGameend);
                    result.setName("reset_remove");
                    self.addChild(result, 100000);
                } catch (e) {
                    cc.log("game end:", e);
                    self.room_Action.setReady2Visible(true);
                }
            });

            var show_all_public_card = cc.callFunc(function () {
                self.gameend_showAllPublicCard(ackGameEnd);
            });

            if (MJModel.isOnVideo && canDelay == false) {
                this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(2), update_all_money));
                return;
            }

            this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(1), show_liuju, cc.delayTime(ackGameEnd.EndState == 1 ? 1 : 0), show_end_score, cc.delayTime(0), update_all_money, cc.delayTime(1), game_end_reset));
        } catch (e) {
            ERROR(this, "handler_server_game_end_bc" + e);
        }
    }
    ,

    timeEnd: function (dt) {

        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    }
    ,

    _setGameType: function () {
        var pkg_id = 1;
        var play_id = [];
        //甩字胡不可炮胡
        //play_id.push(MJModel.base_money + "分底");
        if (MJModel.mj_roomType == 0) {
            play_id.push("四人");
        } else if (MJModel.mj_roomType == 1) {
            play_id.push("三人");
        } else if (MJModel.mj_roomType == 2) {
            play_id.push("二人");
        }

        if (MJModel.RoomConfigID.indexOf(1226001) != -1) {
            play_id.push("手把一");
        }

        if (MJModel.RoomConfigID.indexOf(1226002) != -1) {
            play_id.push("清一色");
        }

        if (MJModel.RoomConfigID.indexOf(1226003) != -1) {
            play_id.push("漂胡");
        }

        if (MJModel.RoomConfigID.indexOf(1226004) != -1) {
            play_id.push("单吊夹");
        }

        if (MJModel.RoomConfigID.indexOf(1226005) != -1) {
            play_id.push("开牌炸");
        }

        if (MJModel.RoomConfigID.indexOf(1226006) != -1) {
            play_id.push("不夹不胡");
        }

        if (MJModel.RoomConfigID.indexOf(1226007) != -1) {
            play_id.push("红中满天飞");
        }

        if (MJModel.RoomConfigID.indexOf(1226008) != -1) {
            play_id.push("一炮多响");
        }

        if (MJModel.RoomConfigID.indexOf(1226009) != -1) {
            play_id.push("红中加倍");
        }

        if (MJModel.RoomConfigID.indexOf(1226010) != -1) {
            play_id.push("3/7夹");
        }

        MJModel.play_id_str = play_id;

        var gameDes = "";
        for (var i = 0; i < play_id.length; i++) {
            gameDes += play_id[i];
            if (i != play_id.length - 1) {
                gameDes += " ";
            }
        }
        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);
        //this._setFastChat();
    }
    ,
    resetGame: function (allClean) {
        this._super(allClean);
        MJModel.mj_lockcard_type = 0;
    }
    ,
    handler_server_scene_info_uc: function (hubei_scene, canDelay) {
        if (hubei_scene) {
            MJModel.RoomConfigID = hubei_scene.GameSence.RoomConfigID;
            MJModel.banker_seatid = hubei_scene.GameSence.BankerChairid;
            var ackGameFree = hubei_scene.GameSence;
            var sceneStatus = ackGameFree.SceneStatus;

            var ackGameFree = hubei_scene.GameSence;
            if (ackGameFree.RoomConfigID.indexOf(2000001) != -1)MJModel.changMode = 1;
            if (ackGameFree.RoomConfigID.indexOf(2000002) != -1)MJModel.changMode = 2;
            if (ackGameFree.RoomConfigID.indexOf(2000003) != -1)MJModel.changMode = 3;

            //锁住手牌
            this._setGameType();
            if (sceneStatus == 10) {
                //房间已经结束
                this.exitRoom(true);
                return;
            }
        }

        this._super(hubei_scene.GameSence, canDelay);

        if (hubei_scene.GameSence.sceneStatus != 0) {
            var baoting = hubei_scene.baotingstates;
            for (var i = 0; i < baoting.length; i++) {
                var pos = MJModel.getPosBySeatid(i);
                var isbaoting = baoting[i];
                if (MJModel.isMyPlayer(i)) {
                    if (isbaoting == 1 || isbaoting == 2) {
                        MJModel.mj_lockcard_type = 2;
                    }
                    if (isbaoting == 3) {
                        MJModel.mj_lockcard_type = 1;
                    }
                }
                if (isbaoting == 1 || isbaoting == 2 || isbaoting == 3) {
                    this.players[pos].setTingPaiVisible(true);
                }
            }
        }

        if (this.room_Card) {
            this.room_Card.setSomeCardClickState();
        }
    }
    ,

    handler_server_out_card_bc: function (data, canDelay) {
        var userOutCard = parsePacket("proto.game.AckUserOutCard", data);
        var seatId = userOutCard.ChairID;
        if (MJModel.isMyPlayer(seatId) && MJModel.mj_lockcard_type == 1) {
            MJModel.mj_lockcard_type = 2;
        }

        this._super(data, canDelay)

        //if (this.room_Card) {
        //    this.room_Card.setSomeCardClickState();
        //}
    }
    ,
    handler_server_peng_kang_bc: function (data, canDelay) {
        this.room_Tip.showTextTip("");
        this.check_tip_operate_card(0, 0);
        var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);
        this.unschedule(this.autoOutCardTimeOut);
        this.unschedule(this.autoHuCardTimeOut);

        var seatid = ackBcOpResult.ChairID;
        var out_seatid = ackBcOpResult.OutCardChairID;
        var OpType = ackBcOpResult.OpType;
        var OpType2 = ackBcOpResult.OpType2;
        var card = ackBcOpResult.Card;
        var specialCard = ackBcOpResult.SpecialCard;
        var ListenInfo = ackBcOpResult.ListenInfo;
        var scores = ackBcOpResult.Score;
        var bBuGangQianTing = ackBcOpResult.bBuGangQianTing;

        this.handler_gang_scores(scores, OpType, OpType2, canDelay);
        if (MJModel.isMyPlayer(seatid)) {
            if (this.room_Action) this.room_Action.setOperator(-1);
        }

        if (this.room_Action_video) this.room_Action_video.reset();

        var pos = MJModel.getPosBySeatid(seatid);
        var out_pos = MJModel.getPosBySeatid(out_seatid);

        this.players[pos].setTimeOut(false);
        this.players[pos].setOffline(false);

        if ((OpType & ActionType.TYPE_PASS) == ActionType.TYPE_PASS) {

            if (MJModel.isMyPlayer(seatid) && seatid == out_seatid && this.room_Card.isDuoPai(0))//如果是我自己摸的牌  自己过 则放开选牌功能
            {
                this.room_Info.showTime(MJModel.outCardTime);
                MJModel.cur_seat = seatid;
                this.myselfOpenOutCard(true);
            }
            cc.log("lin=handler_server_peng_kang_bc=1");
            return;
        }

        var needRemoveOutCard = false;
        var needOpenOutCard = false;
        if (MJModel.isMyPlayer(seatid)) {
            this.updateQiangTingGang(OpType);
        }
        if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
            var ok = this.room_Card.addPengCard(pos, PengType.Peng_AnKang, card, out_pos, OpType, specialCard);
            if (!ok)return;
            this.room_Card.removeHandCard(pos, card, 4);
        }
        else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG
            || (OpType & PZHActionType.TYPE_QIANG_TING_PENG) == PZHActionType.TYPE_QIANG_TING_PENG) {
            this.room_Card.addPengCard(pos, PengType.Peng_Peng, card, out_pos, OpType, specialCard);
            this.room_Card.removeHandCard(pos, card, 2);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
            var ok = this.room_Card.addPengCard(pos, PengType.Peng_Kang, card, out_pos, OpType, specialCard);
            if (!ok)return;
            this.room_Card.removeHandCard(pos, card, 3);
            needRemoveOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
            var ok = this.room_Card.changPengCard(pos, PengType.Peng_Kang, card, out_pos, OpType);
            if (!ok)return;
            this.room_Card.removeHandCard(pos, card, 1);
        }
        else if ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI
            || (OpType & PZHActionType.TYPE_QIANG_TING_LEFT_CHI) == PZHActionType.TYPE_QIANG_TING_LEFT_CHI) {
            cc.log("lin=handler_server_peng_kang_bc=3");
            this.room_Card.addPengCard(pos, PengType.Chi_L, card, out_pos, OpType, specialCard);
            this.room_Card.removeHandCard(pos, card + 1, 1);
            this.room_Card.removeHandCard(pos, card + 2, 1);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI
            || (OpType & PZHActionType.TYPE_QIANG_TING_CENTER_CHI) == PZHActionType.TYPE_QIANG_TING_CENTER_CHI) {
            this.room_Card.addPengCard(pos, PengType.Chi_M, card, out_pos, OpType, specialCard);
            this.room_Card.removeHandCard(pos, card - 1, 1);
            this.room_Card.removeHandCard(pos, card + 1, 1);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI
            || (OpType & PZHActionType.TYPE_QIANG_TING_RIGHT_CHI) == PZHActionType.TYPE_QIANG_TING_RIGHT_CHI) {
            cc.log("lin=handler_server_peng_kang_bc=2");
            this.room_Card.addPengCard(pos, PengType.Chi_R, card, out_pos, OpType, specialCard);
            this.room_Card.removeHandCard(pos, card - 1, 1);
            this.room_Card.removeHandCard(pos, card - 2, 1);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
            this.room_Info.showDirectionTip(-1);
            this.room_Info.stopTime();
            MJModel.canTouchCard = false;
            //抢弯杠
            if ((OpType2 && OpType2 == 5)) {
                this.room_Card.changeWanGang(out_pos, PengType.Peng_Peng, card);
                if (this.room_Card.isDuoPai(out_pos)) this.room_Card.removeHandCard(out_pos, card, 1);
            }
            //抢直杠
            if ((OpType2 && OpType2 == 11)) {
                var ok = this.room_Card.changeZhiGang(out_pos, PengType.Peng_Peng, card);
                if (ok) {
                    this.room_Card.initMoCard(out_pos, (out_pos == 0 || MJModel.isOnVideo ) ? card : 0);
                    this.room_Card.initMoCard(out_pos, (out_pos == 0 || MJModel.isOnVideo ) ? card : 0);
                    this.room_Card.initMoCard(out_pos, (out_pos == 0 || MJModel.isOnVideo ) ? card : 0);
                    this.room_Card.reflashHandCard(out_pos, true, false);
                }
            }

            if ((OpType2 && OpType2 == 5) || (OpType2 && OpType2 == 11)) {
                //避免双抢杠的时候 会出两次牌
                if (this.room_Card.out_card[out_pos].length == 0 || this.room_Card.out_card[out_pos][this.room_Card.out_card[out_pos].length - 1].getValue() != card) {
                    this.room_Card.addOutCard(out_pos, card);
                }
            }
        }

        cc.log("lin=handler_server_peng_kang_bc=5");
        if (MJModel.isMyPlayer(seatid)) {
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            MJModel.isAutoOutCard = false;
            this.room_Card.setAutoOutCard(false);
        }

        if (needRemoveOutCard) {
            MJModel.cur_seat = seatid;
            var isok = this.room_Card.removeOutCard(out_pos, card, canDelay);
            this.room_Card.setCurCardTip(false);
            if (isok == false) {
                try {
                    ERROR(this, "removeOutCard error card:" + card + "lastoutcard:" + this.room_Card.out_card[out_pos][this.room_Card.out_card[out_pos].length - 1].getValue());
                } catch (e) {
                    ERROR(this, "needRemoveOutCard" + e);
                }
                this.reConnect("", false);
            }
        }

        if (needOpenOutCard) {
            this.room_Info.showDirectionTip(pos);
            if (MJModel.isMyPlayer(seatid)) {
                this.myselfOpenOutCard();
            }
        }

        var player = MJModel.players[seatid];
        if (player && canDelay) {

            var effect = "gang";
            if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                var zimo = this.room_Card.isDuoPai(pos);
                effect = "hu";
                if (zimo) {
                    effect = "zimo";
                }

                if (OpType2 == 5 || OpType2 == 11) {
                    effect = "qiangganghu";
                }
            }
            else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                effect = "peng";
            }
            else if ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI || (OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                effect = "chi";
            }

            this.handler_op_sound(pos, player.sex, OpType, OpType2, effect);
            this.handler_op_effect(pos, out_pos, player.sex, OpType, OpType2, effect);
        }

        //--------------------------------------
        MJModel.listen_info = [];
        //点击出来有听操作提示
        if (ListenInfo.length > 0) {
            var listeninfo_size = ListenInfo.length;

            for (var i = 0; i < listeninfo_size; i++) {
                var tli = Utils.clone(tagListenInfo);
                tli.HuInfo = [];

                tli.OutCard = ListenInfo[i].OutCard;
                var huinfoLen = ListenInfo[i].HuInfo.length;
                tli.HuInfoLen = huinfoLen;
                for (var j = 0; j < huinfoLen; j++) {
                    var huInfo = Utils.clone(tagHuInfo);
                    huInfo.Card = ListenInfo[i].HuInfo[j].Card;
                    huInfo.LeftNum = ListenInfo[i].HuInfo[j].LeftNum;
                    huInfo.HuFanNum = ListenInfo[i].HuInfo[j].HuFanNum;
                    tli.HuInfo.push(huInfo);
                }
                MJModel.listen_info.push(tli);
            }
        }

        if (this.isBaoTing(OpType)) {
            var player = MJModel.players[seatid];
            if (player && canDelay) {
                this.room_Tip.showSimpleEffect(pos, out_pos, PZHActionType.TYPE_BAOTING, "baoting");
                Sound.getInstance().playEffect(__String.createWithFormat(getResPath("RoomMJ/sound/operator/%1_%2.mp3"), player.sex == SEX_ID.SEX_FEMALE ? "w" : "m", "ting"));
            }
            this.players[pos].setTingPaiVisible(true);
            if (MJModel.isMyPlayer(seatid)) {
                MJModel.mj_lockcard_type = 1;
                this.myselfOpenOutCard(false);
            }
        } else if (this.isQiangTing(OpType)) {
            var player = MJModel.players[seatid];
            if (player && canDelay) {
                this.room_Tip.showSimpleEffect(pos, out_pos, PZHActionType.TYPE_BAOTING, "qiangting");
                Sound.getInstance().playEffect(__String.createWithFormat(getResPath("RoomMJ/sound/operator/%1_%2.mp3"), player.sex == SEX_ID.SEX_FEMALE ? "w" : "m", "ting"));
            }
            this.players[pos].setTingPaiVisible(true);
            if (MJModel.isMyPlayer(seatid)) {
                MJModel.mj_lockcard_type = 1;
                this.myselfOpenOutCard(false);
            }
        }
    },
    updateQiangTingGang: function (OpType) {
        if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG
            || (OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG
            || (OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
            if (MJModel.mj_lockcard_type == 1) {
                MJModel.mj_lockcard_type = 2;
            }
        }
    }
    ,
    handler_out_card_sound: function (sex, card) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("hegang/sound/chupai/%1_%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", Utils.toHex2(card)));
        } else {
            this._super(sex, card);
        }
    }
    ,

    handler_op_sound: function (pos, sex, OpType, OpType2, effect) {
        if (this.isBaoTing(OpType) || this.isQiangTing(OpType)) {
            return;
        }
        this._super(pos, sex, OpType, OpType2, effect);
    }
    ,

    handler_op_effect: function (pos, out_pos, sex, OpType, OpType2, effect) {
        if (this.isBaoTing(OpType) || this.isQiangTing(OpType)) {
            return;
        }
        this.room_Tip.showEffect(pos, OpType, this.room_Card.isDuoPai(pos));
    }
    ,
    isQiangTing: function (OpType) {
        if (((OpType & PZHActionType.TYPE_QIANG_TING_LEFT_CHI) == PZHActionType.TYPE_QIANG_TING_LEFT_CHI)
            || ((OpType & PZHActionType.TYPE_QIANG_TING_CENTER_CHI) == PZHActionType.TYPE_QIANG_TING_CENTER_CHI)
            || ((OpType & PZHActionType.TYPE_QIANG_TING_PENG) == PZHActionType.TYPE_QIANG_TING_PENG)
            || ((OpType & PZHActionType.TYPE_QIANG_TING_RIGHT_CHI) == PZHActionType.TYPE_QIANG_TING_RIGHT_CHI)) {
            return true;
        }
    },
    isBaoTing: function (OpType) {
        if (((OpType & PZHActionType.TYPE_BAOTING) == PZHActionType.TYPE_BAOTING)) {
            return true;
        }
    },
});

var MJResult_XinYu = MJCommonResult.extend({
    ctor: function () {
        this._super();
        var size = cc.director.getWinSize();

        var layout = new ccui.Layout();
        layout.setContentSize(size);
        layout.setAnchorPoint(cc.p(0, 0));
        layout.setPosition(cc.p(0, 0));
        layout.setTouchEnabled(true);
        layout.setSwallowTouches(true);
        layout.addClickEventListener(function (Ref) {
        });
        this.addChild(layout, -1000);

        this.bgSpr = new cc.Sprite(getResPath("RoomMJ/result2/bg.png"));
        this.bgSpr.setAnchorPoint(cc.p(0.5, 0))

        this.bgSpr.setPosition(cc.p(size.width / 2, 0));
        this.addChild(this.bgSpr);

        //继续游戏
        var continueBtn = new ccui.Button(getResPath("RoomMJ/result2/continue1.png"), getResPath("RoomMJ/result2/continue2.png"), "");
        continueBtn.setAnchorPoint(cc.p(0.5, 0.5));
        continueBtn.setPosition(cc.p(1150, 47));
        continueBtn.setName("continueBtn");
        continueBtn.addClickEventListener(this.continueClick.bind(this));
        this.bgSpr.addChild(continueBtn);

        this.leftColor = cc.color(0xd7, 0xf2, 0xf8);
        this.rightColor = cc.color(0xd7, 0xf2, 0xf8);

        return true;
    },

    updateContentView: function (ackGameEndJS) {
        this.ackGameEnd = ackGameEndJS.gameend;
        this.ackGameEndJS = ackGameEndJS;
        //输赢标志
        var seatId = MJModel.seatid;
        var score = this.ackGameEnd.Score[seatId];
        var effectName = "lose";
        if (score > 0) {
            effectName = "win";
        }
        this._win_effect(effectName);

        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);

        var itemHeight = 120;

        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;

            var countY = m;

            if (MJModel.mj_roomType == 1) {
                if (pos == 2) {
                    continue;
                }
            }

            if (MJModel.mj_roomType == 2) {
                if (pos == 1 || pos == 3) {
                    continue;
                }

                if (pos == 0) {
                    countY = 1;
                } else if (pos == 2) {
                    countY = 2;
                }
            }

            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 495 - count * itemHeight;
            var startX = 40;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX + 60, startY + 55));
            this.bgSpr.addChild(headLayer, 10);

            //上排牌 杠
            var ganghuLayer = this.createFanTypeLayer(seatid);
            this.bgSpr.addChild(ganghuLayer, 10);
            ganghuLayer.setPosition(cc.p(startX + 230, startY + 65));

            //下排牌
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX + 0, startY));
            this.bgSpr.addChild(handCardLayer);

            // this.createSpecialHuTip(startX + 785, startY + 40, seatid);
            this.createSpecialHuTip(startX + 865, startY + 40, seatid);
            this.createAllScoreLabel(startX + 865, startY + 70, seatid);

            // 输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX + 1100, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            //中马列表
            var maLayer = this.createMaLayer(seatid);
            if (maLayer) {
                maLayer.setPosition(cc.p(startX + 230, startY + 65));
                this.bgSpr.addChild(maLayer);
            }
            count++;
        }

        this.addPaoConfig();
    },
    addPaoConfig: function () {
        var str = ""
        if (MJModel.RoomConfigID.indexOf(1194002) != -1) {
            str = "跑1";
        }

        if (MJModel.RoomConfigID.indexOf(1194003) != -1) {
            str = "跑3";
        }

        if (MJModel.RoomConfigID.indexOf(1194004) != -1) {
            str = "跑5";
        }

        if (MJModel.RoomConfigID.indexOf(1194005) != -1) {
            str = "跑10";
        }

        var maPic = new cc.LabelTTF(str, "Arial", 22);
        maPic.setColor(this.leftColor);
        maPic.setAnchorPoint(cc.p(0.5, 0.5));
        maPic.setPosition(cc.p(50, 47));
        this.bgSpr.addChild(maPic);

    },
    createMaLayer: function (seatid) {
        return;
        var layer = null;
        layer = new cc.Layer();
        var mapaiList = [[0x51, 0x52, 0x51, 0x52], [0x51, 0x52, 0x51, 0x52], [0x51, 0x52, 0x51, 0x52], [0x51, 0x52, 0x51, 0x52]];
        if (mapaiList) {
            var startx = 10;
            if (mapaiList[seatid].length > 0) {
                var maPic = new cc.LabelTTF("花牌: ", "Arial", 22);
                maPic.setName("huapaiTip");
                maPic.setColor(this.leftColor);
                maPic.setAnchorPoint(cc.p(0.0, 0));
                maPic.setPosition(cc.p(startx));
                layer.addChild(maPic);

                var cardlist = mapaiList[seatid];
                for (var i = 0; i < cardlist.length; i++) {
                    var card = new MJCard();
                    card.setValue(cardlist[i], 0, CardType.Card_End, 0);
                    card.setAnchorPoint(cc.p(0.0, 0));
                    card.setScale(0.3);
                    card.setPosition(cc.p(startx + maPic.getContentSize().width + parseInt((i )) * 25, -5));
                    layer.addChild(card, 50 - i);
                }

            }

        }
        return layer;
    }
    ,
    createFanTypeLayer: function (seatid) {
        var ackGameEnd = this.ackGameEndJS;
        //牌型
        //---
        var huType = ["", "", "", ""];
        for (var i = 0; i < ackGameEnd.gameend.faninfo.length; i++) {
            var specialType = ackGameEnd.gameend.faninfo[i].SpecialType;

            for (var j = 0; j < ackGameEnd.gameend.faninfo[i].addfan.length; j++) {
                var add_fan = ackGameEnd.gameend.faninfo[i].addfan[j];
                var add_type = add_fan.AddType;
                if (AddFanTypeArray.indexOf(add_type) != -1) {
                    huType[i] += AddFanNameArray[AddFanTypeArray.indexOf(add_type)] + " ";
                }
            }
        }

        var layer = new cc.Layer();
        var startx = 0;
        var y = 0;
        cc.log("lin=createFanTypeLayer=" + JSON.stringify(huType));
        var maPic = new cc.LabelTTF(huType[seatid], "Arial", 20);
        maPic.setColor(this.leftColor);
        maPic.setAnchorPoint(cc.p(0.0, 0));
        maPic.setPosition(cc.p(startx, y + 10));
        layer.addChild(maPic);

        startx = maPic.getContentSize().width + 10;
        return layer;
    }
    ,
    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var path = "";
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5天和 6地和 7抢杠胡 8杠上开花 9花上添花
            switch (fanInfo.SpecialType) {
                case 1:
                    path = "RoomMJ/result2/zi_mo_icon.png";
                    break;
                case 2:
                    path = "RoomMJ/result2/pao_hu_icon.png";
                    break;
                case 3:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                case 5:
                    path = "RoomMJ/result2/qiang_gang_icon.png";
                    break;
                case 7:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                default:
                    break;
            }
            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setAnchorPoint(cc.p(0, 0.5));
                typeSprite.setPosition(cc.p(startX, startY));
                this.bgSpr.addChild(typeSprite);
            }
        }
    }
    ,
    createAllScoreLabel: function (startX, startY, seatid) {
        return;
        var ackGameEnd = this.ackGameEndJS;
        var endinfo = ackGameEnd.endinfo[seatid]


        var tagHu = this.ackGameEnd.faninfo[seatid].hucard;

        var gang_add = endinfo.gang_add;
        var lianbanker_add = endinfo.lianbanker_add;
        var hua_add = endinfo.hua_add;
        var sihua_add = endinfo.sihua_add;

        var hutypeStr = "";
        if (MJModel.banker_seatid == seatid) {
            hutypeStr += "连庄:" + ((lianbanker_add != null) ? lianbanker_add : 0);
        }
        if (tagHu) {
            if (hutypeStr != "") {
                hutypeStr += " ";
            }
            hutypeStr += "杠:" + ((gang_add != null) ? gang_add : 0);
            hutypeStr += " 花:" + ((hua_add != null) ? hua_add : 0);
            hutypeStr += " 四花:" + ((sihua_add != null) ? sihua_add : 0);
        }

        var maPic = new cc.LabelTTF(hutypeStr, "Arial", 20);
        maPic.setColor(this.leftColor);
        maPic.setAnchorPoint(cc.p(0, 0));
        maPic.setPosition(cc.p(startX, startY));
        this.bgSpr.addChild(maPic);
    },
    //输赢分
    createScoreLayer: function (seatid) {
        var layer = new cc.Layer();
        var score = 0;
        if (this.ackGameEnd.Score && this.ackGameEnd.Score.length > seatid) score = this.ackGameEnd.Score[seatid];
        var width = 0;
        var path = getResPath("RoomMJ/result2/result_small_label_lose.png");
        if (score > 0) {
            path = getResPath("RoomMJ/result2/result_small_label_win.png");
        }
        var scoredes = ":";
        if (score == 0) scoredes = "";
        var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), path, 29, 37, '0');

        scoreLabel.setAnchorPoint(cc.p(0.0, 0.5));

        scoreLabel.setPosition(cc.p(width, 15));
        scoreLabel.setName("scoreLabel");
        layer.addChild(scoreLabel);

        if (Math.abs(score) >= 10000) {
            scoreLabel.setScale(0.8);
        }
        return layer;
    }
    ,
});

