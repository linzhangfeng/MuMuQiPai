loadProtoFile("proto/enshigameproto.proto");

//玩法
var PackgName = {
    enshi_yipierlai: 720, //202  671, 线上 720
    enshi_yingmajiang: 813, //202  871, 线上 813
    enshi_bapisilai: 721, //202  671, 线上 720
};

//包名帖图
var EnShiGameType = {
    yipierlai_si: 720,  //202  671, 线上 720
    yipierlai_san: 741,  //202  799, 线上 741
    bapisilai_si: 740,   //202  798, 线上 740
    yingmajiang: 813,    //202  871, 线上 813
};

var ConfigType =
{
    GAME_TYPE_YouYiFanYi: 1127001, //有一翻一
    GAME_TYPE_ShiZhongFanYi: 1127002, //始终翻一
    GAME_Difen_Type1: 1123001, //0.5分
    GAME_Difen_Type2: 1123002, //1分
    GAME_Difen_Type3: 1123003, //2.5分
    GAME_Difen_Type4: 1123004, //5分
    GAME_Fengding_80: 1124001, //80倍封顶
    GAME_Fengding_100: 1124002, //100倍封顶
    GAME_Fengding_120: 1124003, //120倍封顶
    GAME_Laizi_DuoLai: 1125001, //多癞
    GAME_Laizi_YiLaiDaoDi: 1125002, //一癞到底
    GAME_Config_DaPiJinHu: 1126003, //打痞禁胡
    GAME_Config_DaLaiJinHu: 1126004, //打癞禁胡
    GAME_Config_JinZhiYangPi: 1126005, //禁止养痞
    GAME_Config_ShangXiaPi: 1126006, //上下痞
    GAME_Config_BALAI: 1126007, //上下痞
};

var YingMJConfigType =
{
    GAME_Difen_1: 1128001,  //底分1分
    GAME_Difen_2: 1128002,  //底分2分
    GAME_Difen_5: 1128003,  //底分5分
    GAME_Config_BNDongZhang: 1129001,  //两个癞子不能动张
    GAME_Config_BaoChong: 1129002,  //包冲
};

var LaiZiGangType = {
    TYPE_LAIZI_GANG: 0X10000,
    TYPE_PIZI_GANG: 0X20000,
    TYPE_PIZI_GANG2: 0X40000, //这个痞子杠必须杠，禁止养痞
};
var HuType = {
    HU_INVALID: 0,
    HU_ZIMO: 1,
    HU_PAOHU: 2,
    HU_DIANPAO: 3,
    HU_BEIZIMO: 4,
    HU_QIANG_GANG: 5,
    HU_BEI_QIANG_GANG: 6,
    HU_YI_PAO_DUO_XIANG: 7,
    HU_GANG_SHANG_HUA: 8,
    HU_GANG_HOU_PAO: 9,
    HU_HeiMo: 10, //自摸且硬胡
    Hu_RuanMo: 11, //自摸且软胡
};

var ES_MJ_TYPE = {
    0: "屁胡",
    1: "清一色",
    2: "将一色",
    3: "碰碰胡",
    4: "全求人",
    5: "七对",
    6: "豪华七对",
    7: "双豪华七对",
    8: "小血",
    9: "大血",
    // 16: "不碰不杠",
    // 17: "痞子杠",
    18: "硬胡",
    19: "杠上花",
    20: "杠上炮",
    // 21: "癞子杠",
    // 22: "明杠",
    // 23: "暗杠",
};

var ES_ActionType = {
    HU_RUAN_DA_XUE: 16,  //软大血
    HU_RUAN_XIAO_XUE: 17, //软小血
    HU_YING_DA_XUE: 18, //硬大血
    HU_YING_XIAO_XUE: 19, //硬小血
};

var SERVER_TaiGang = 5077;
var SERVER_DESKTOP_MULTIPLE = 5079;       //恩施桌面玩家倍数

var MJTable_Enshi = MJTable.extend({
    tag: "MJTable_Enshi",
    _roomConfig: null,
    _curLaizi: -1,
    _curLaizipi: -1,
    _curLaizipi2: -1,
    _curLaizi_bg: null,
    isRecordShow: false,
    _pkg_id: 0,
    _oldBanker: -1,
    _play_gamestart: false,
    _fanPiziType: -1,
    _difenType: -1,
    _fengdingType: -1,
    _laiziType: -1,
    _configType: [],
    _all_OpType_tip: [null, null, null, null],
    _all_hu_tip: [null, null, null, null],
    _game_type: -1,  //桌面贴图
    _allBeiShu: [null, null, null, null],
    _allBeiShu_Nums: [1, 1, 1, 1],
    _piaoLayer: null,
    _Piao_Nums: [null, null, null, null],
    _isPiaoConfig: false,
    _isJinZhiYangPi: false, //禁止养痞
    _fangZuoBi: false,
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];
            if (this._pkg_id == 671 || this._pkg_id == 720) {
                this._pkg_id = PackgName.enshi_yipierlai;
            } else if (this._pkg_id == 799 || this._pkg_id == 741) {
                this._pkg_id = PackgName.enshi_yipierlai;
                MJModel.mj_roomType = 1;
            } else if (this._pkg_id == 3339 || this._pkg_id == 3138) {
                this._pkg_id = PackgName.enshi_yipierlai;
                MJModel.mj_roomType = 2;
            } else if (this._pkg_id == 871 || this._pkg_id == 813) {
                this._pkg_id = PackgName.enshi_yingmajiang;
            } else if (this._pkg_id == 3340 || this._pkg_id == 872) {
                this._pkg_id = PackgName.enshi_yingmajiang;
                MJModel.mj_roomType = 2;
            }else if (this._pkg_id == 3149) {
                this._pkg_id = PackgName.enshi_bapisilai;
            } else if (this._pkg_id == 3150) {
                this._pkg_id = PackgName.enshi_bapisilai;
                MJModel.mj_roomType = 1;
            } else if (this._pkg_id == 3151) {
                this._pkg_id = PackgName.enshi_bapisilai;
                MJModel.mj_roomType = 2;
            }
        } catch (e) {
            Log(this, e);
        }
        MJModel.mj_suport_fangyan = 1;
        MJModel.otherOutCardEffect = true;
        MJModel.outCardEffect_style = 1;

        MJModel.mj_bg_use = 1;
        MJModel.mj_table_view = "2d";
        MJModel.toupiaoTipsType = 1;
        MJModel.needTipWhenPass = 0;
        MJModel.mj_touch_tip = 1;
        MJModel.isOutCard = true;
        MJModel.mj_chat_style = 5;

        MJModel.mj_public_style = 1;
        MJModel.mj_card_lib_type = 1;
        MJModel.chi_layout = 1;
        MJModel.shareType = 1;
        MJModel.isSupportRealTimeVoices = true;
        MJModel.mj_paiban = "horizontal";
        try {
            var help = this.roomPublic.getChildByName("game_help");
            help.setVisible(false);
        } catch (e) {

        }
        this._init_extend();
        this._super();
        this._init_ui();

        var top = new MJPublic_2d();
        this.roomPublic_2d = top;
        this.addChild(top, 1000);

        this.preLoadCardConfig("enshi/newui/config/card_config2d_2ren.json");
        this.preLoadCardConfig("enshi/newui/config/card_config2d.json");
         //this.schedule(this.test, 1.0);
    },

    _init_ui: function () {
        this.room_Action.actions["pass"].loadTextures(getResPath("enshi/newui/action/pass.png"), getResPath("enshi/newui/action/pass.png"), "");

        this.room_Action.actions["chi"].loadTextures(getResPath("enshi/newui/action/chi.png"), getResPath("enshi/newui/action/chi.png"), "");

        this.room_Action.actions["peng"].loadTextures(getResPath("enshi/newui/action/peng.png"), getResPath("enshi/newui/action/peng.png"), "");

        this.room_Action.actions["gang"].loadTextures(getResPath("enshi/newui/action/gang.png"), getResPath("enshi/newui/action/gang.png"), "");

        this.room_Action.actions["hu"].loadTextures(getResPath("enshi/newui/action/hu.png"), getResPath("enshi/newui/action/hu.png"), "");

        {
            var card = new MJCard();
            card.setValue(1, 0, CardType.Card_End, 0);
            card.setPosition(cc.p(130, 40));
            card.setScale(0.7);
            card.setName("card");
            this.room_Action.actions["chi"].addChild(card);
        }

        {
            var card = new MJCard();
            card.setValue(1, 0, CardType.Card_End, 0);
            card.setPosition(cc.p(130, 40));
            card.setScale(0.7);
            card.setName("card");
            this.room_Action.actions["peng"].addChild(card);
        }

        {
            var card = new MJCard();
            card.setValue(1, 0, CardType.Card_End, 0);
            card.setPosition(cc.p(130, 40));
            card.setScale(0.7);
            card.setName("card");
            this.room_Action.actions["gang"].addChild(card);
        }
    },

    getMjTypePath: function () {
        var pkg_id = 7;
        if (this._pkg_id == PackgName.enshi_yipierlai || this._pkg_id == PackgName.enshi_bapisilai) {
            pkg_id = 7;
            if (MJModel.mj_roomType == 1) {
                pkg_id = 8;
            } else if (MJModel.mj_roomType == 2) {
                pkg_id = 9;
            }
        } else {
            pkg_id = 10;
            if (MJModel.mj_roomType == 1) {
                pkg_id = 11;
            } else if (MJModel.mj_roomType == 2) {
                pkg_id = 12;
            }
        }
        return getResPath("enshi/flag/pkgid") + pkg_id + ".png";
    },

    reflashSetting: function (isInit) {
        this._super(isInit);
        if (!isInit && MJModel.roomState == 1) {
            this.reflashAllBeiShu();
        }
    },

    reflashAllBeiShu: function () {
        try {
            for (var i = 0; i < this._allBeiShu.length; i++) {
                // this._allBeiShu_Nums[i] = 1;
                if (this._allBeiShu[i]) {
                    this._allBeiShu[i].removeFromParent();
                    this._allBeiShu[i] = null;
                }
            }

            while (this.getChildByName("beishu_bg")) {
                this.removeChildByName("beishu_bg");
            }

            if (this._pkg_id == PackgName.enshi_yipierlai || this._pkg_id == PackgName.enshi_bapisilai) {
                var l = 4;
                if (MJModel.mj_roomType == 1) l = 3;
                for (var i = 0; i < l; i++) {
                    var pos = MJModel.getPosBySeatid(i);
                    this._setBeiShu(this._allBeiShu_Nums[pos], pos);
                }
            }
        } catch (e) {

        }
    },

    actionCallBack: function (name, evt) {
        if (name == "ready") {
            if (MJModel.isTimeEnd) {
                MJModel.state = MJ_STATUS.MJ_GAME_FREE;
            } else {
                sendReady();
            }
        } else {
            this._super(name, evt);
        }
    },
    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = null;
            if (this._pkg_id == PackgName.enshi_yipierlai || this._pkg_id == PackgName.enshi_bapisilai) {
                ackGameFree = parsePacket("proto.game.enshimj.AckYpelGameScene", jpacket);
            } else if (this._pkg_id == PackgName.enshi_yingmajiang) {
                ackGameFree = parsePacket("proto.game.enshimj.AckYmjGameScene", jpacket);
            }
            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = null;
            if (this._pkg_id == PackgName.enshi_yipierlai || this._pkg_id == PackgName.enshi_bapisilai) {
                ackGameEnd = parsePacket("proto.game.enshimj.AckYpelGameEnd", jpacket);
            } else if (this._pkg_id == PackgName.enshi_yingmajiang) {
                ackGameEnd = parsePacket("proto.game.AckGameEnd", jpacket);
            }
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        this._super(cmd, jpacket, canDelay, svrid);
        if (cmd == CMD.SERVER_LAIZI_BC) {
            this._handler_server_laizi_bc(jpacket, canDelay);
        }
        else if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
        }
        else if (cmd == SERVER_TaiGang) {
            this._handler_server_taigang(jpacket, canDelay);
        }
        else if (cmd == SERVER_DESKTOP_MULTIPLE) {
            this._handler_server_beishu(jpacket, canDelay);
        }
        else if (cmd == CMD.SERVER_START_PIAO) {
            this._handler_server_start_piao(jpacket, canDelay);
        }
        else if (cmd == CMD.SERVER_BROAD_PIAO) {
            this._handler_server_broad_piao(jpacket, canDelay);
        }
    },

    _handler_server_start_piao: function (data, canDelay) {
        this.resetGame(true);
        this.room_Info.setVisible(true);
        JsUtils.postNotifi("notify_game_check_end");//为了刷新局数 或者  开始倒计时
        if (this.room_Action.actions["copyshare"]) {
            this.room_Action.actions["copyshare"].setVisible(false);
        }
        if (this.room_Action.getChildByName("yaoqing")) {
            this.room_Action.getChildByName("yaoqing").setVisible(false);
        }
        var broadPiao = parsePacket("proto.game.enshimj.StartChoosePiao", data);
        var is_notify = broadPiao.is_notify;
        if (MJModel.gpsInfo) {
            MJModel.gpsInfo.removeFromParent();
            MJModel.gpsInfo = null;
        }
        if (is_notify) {
            this._showPiaoLayer();
        }
    },
    _showPiaoLayer: function () {
        if (this._piaoLayer) {
            this._piaoLayer.removeFromParent();
            this._piaoLayer = null;
        }
        this._piaoLayer = new PiaoLayer();
        this._piaoLayer.initPiao();
        this.addChild(this._piaoLayer, 100);
    },

    _handler_server_broad_piao: function (data, canDelay) {
        var broadPiao = parsePacket("proto.game.enshimj.AckBroadPiao", data);
        var seatId = broadPiao.chairid;
        var piaoscore = broadPiao.UserPiao;
        var pos = MJModel.getPosBySeatid(seatId);

        this._setPiaoNum(piaoscore, pos, true);
        if (pos == 0) {
            if (this._piaoLayer) {
                this._piaoLayer.removeFromParent();
                this._piaoLayer = null;
            }
        }
    },

    _setPiaoNum: function (piao, pos, useEffect) {
        if (useEffect == undefined) useEffect = false;

        var piaoSpr = new cc.Sprite(__String.createWithFormat(getResPath("enshi/piao/piaofen%1.png"), piao));
        piaoSpr.setName("jingshan_piao");
        var ppos = MJConfig.getPlayerPos(pos);
        piaoSpr.setAnchorPoint(cc.p(0.5, 0.5));
        piaoSpr.setPosition(cc.p((pos == 2) ? ppos.x + 80 : ppos.x, (pos == 2) ? ppos.y - 60 : ppos.y + 60));
        if (pos == 2) {
            piaoSpr.setAnchorPoint(cc.p(0, 0.5));
            piaoSpr.setPosition(cc.p(ppos.x + 40, ppos.y - 55));
        }
        this.addChild(piaoSpr);
        this._Piao_Nums[pos] = piaoSpr;

        if (useEffect) {
            var piao_bg = new cc.Sprite(getResPath("enshi/piao/piao_tip_bg.png"));
            this.addChild(piao_bg, 1);
            piao_bg.setName("reset_remove");

            var size = cc.director.getWinSize();
            var bp;
            if (pos == 0) {
                bp = cc.p(size.width / 2, 30);
                bp.y += 70;
            } else if (pos == 1) {
                bp = cc.p(size.width - 250, 450);
                bp.x -= 90;
            } else if (pos == 2) {
                bp = cc.p(size.width / 2, size.height - 100);
                bp.y -= 70;
            } else if (pos == 3) {
                bp = cc.p(250, 450);
                bp.x += 90;
            }
            piao_bg.setPosition(bp);

            var piaoindex = 0;
            if (piao == 0) {
                piaoindex = 1;
            } else if (piao == 1) {
                piaoindex = 0;
            }
            var piaoSp = new cc.Sprite(__String.createWithFormat(getResPath("enshi/piao/piao_%1.png"), piaoindex));
            piaoSp.setPosition(125, 65);
            piao_bg.addChild(piaoSp);
        }
    },

    _removeAllPiaoSpr: function () {
        while (this.getChildByName("jingshan_piao")) {
            this.removeChildByName("jingshan_piao");
        }
    },

    _handler_server_beishu: function (data, canDelay) {
        var packet = parsePacket("proto.game.enshimj.AckYpelDesktopMul", data);
        var multiple = packet.multiple;
        var total_mul = packet.total_mul;
        var chair_id = packet.chair_id;
        var pos = MJModel.getPosBySeatid(chair_id);
        this._setBeiShu(total_mul, pos, multiple, canDelay);
    },

    _setBeiShu: function (scoreNum, pos, multiple, showEffect) {
        if (showEffect == undefined) showEffect = false;
        if (multiple == undefined) multiple = 1;
        if (scoreNum == null) {
            return;
        }
        try {
            if (scoreNum) {
                var self = this;
                var call_back = cc.callFunc(function () {
                    var label = self._allBeiShu[pos];
                    self._allBeiShu_Nums[pos] = scoreNum;
                    if (label == null) {
                        var ppos = MJConfig.getPlayerPos(pos);

                        var bgSp = new cc.Sprite(getResPath("enshi/newui/mj_public/common/player/beishu_bg.png"));
                        // bgSp.setPosition(cc.p(ppos.x, ppos.y - 20));
                        bgSp.setPosition(cc.p(ppos.x, ppos.y + 60));
                        bgSp.setName("beishu_bg");
                        self.addChild(bgSp, 100);

                        label = new cc.LabelAtlas(":" + scoreNum, getResPath("enshi/newui/mj_public/common/player/beishu_number.png"), 16, 19, '0');
                        label.setAnchorPoint(cc.p(0, 0.5));
                        label.setPosition(cc.p(8, bgSp.getContentSize().height / 2));
                        bgSp.addChild(label);

                        self._allBeiShu[pos] = label;
                    } else {
                        label.setString(":" + scoreNum);
                        label.setVisible(true);
                    }
                });

                this.runAction(cc.sequence(cc.delayTime(showEffect ? 2 : 0), call_back));
                if (showEffect) {
                    if (this._allBeiShu_Nums[pos] == scoreNum) {
                        return;
                    }
                    var label = new cc.LabelAtlas(":" + multiple, getResPath("enshi/flag/bei_nums2.png"), 20, 26, '0');
                    label.setAnchorPoint(cc.p(0.5, 0.5));
                    var bp;
                    var ppos = MJConfig.getPlayerPos(pos);
                    var ep = cc.p(ppos.x, ppos.y - 20);
                    label.setScale(2);
                    this.addChild(label, 250);
                    label.setPosition(cc.p(ppos.x, ppos.y + 20));
                    label.setName("hubeimj_score_effect");
                    label.setOpacity(0);

                    try {
                        label.runAction(cc.sequence(cc.fadeIn(0.3), cc.delayTime(0.5), cc.moveTo(1, ep), cc.removeSelf()));
                    } catch (e) {
                        label.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
                    }
                }
            }
        } catch (e) {
            Log(this, e);
        }
    },

    _handler_server_taigang: function (data, canDelay) {
        var packet = parsePacket("proto.game.enshimj.AckYpelTaiGang", data);
        var scores = packet.score;

        var pos = MJModel.getPosBySeatid(MJModel.banker_seatid);
        var effect = "taigang";
        if (canDelay) {
            this._show_taigang_effect(pos, effect);
        }
        var self = this;
        var callback = cc.CallFunc(function () {
            self._show_OpType_tip(pos, effect);
            self.handler_gang_scores(scores, -1, -1, canDelay);
        });
        this.runAction(cc.sequence(cc.DelayTime(canDelay ? 1 : 0), callback));
    },

    getBgStr: function () {
        if (MJModel.mj_bg_use == 0) {
            return this._super();
        } else {
            if (MJModel.mj_style == "jingdian") {
                return "enshi/newui/bgs/green.png";
            } else if (MJModel.mj_style == "shishang") {
                return "enshi/newui/bgs/cyan.png";
            } else {
                return "enshi/newui/bgs/blue.png";
            }
        }
    },

    updateBg: function (isInit) {
        this._super(isInit);

        if (this.pre_scene)this.pre_scene.bg.loadTexture(getResPath(this.getBgStr()));

        var size = cc.director.getWinSize();

        for (var i = 0; i < this._Piao_Nums.length; i++) {
            if (this._Piao_Nums[i] && this._Piao_Nums[i] != null) {
                var pos = i;
                var ppos = MJConfig.getPlayerPos(pos);
                var piaoSpr = this._Piao_Nums[pos];
                piaoSpr.setAnchorPoint(cc.p(0.5, 0.5));
                piaoSpr.setPosition(cc.p((pos == 2) ? ppos.x + 80 : ppos.x, (pos == 2) ? ppos.y - 60 : ppos.y + 60));
                if (pos == 2) {
                    piaoSpr.setAnchorPoint(cc.p(0, 0.5));
                    piaoSpr.setPosition(cc.p(ppos.x + 40, ppos.y - 55));
                }
            }
        }

        if (MJModel.mj_bg_use == 0) {
            if (this.roomPublic) {
                this.roomPublic.setVisible(true);
            }
            if (this.roomPublic_2d) {
                this.roomPublic_2d.setVisible(false);
            }
            if (this.room_Action) {
                this.room_Action.btns["gps"].setVisible(true);
            }
            if (this.pre_scene) {
                this.pre_scene.btns["gps"].setVisible(true);
            }
            if (this._curLaizi_bg) {
                this._curLaizi_bg.setPosition(cc.p(size.width - 260, size.height - 25));
            }
        } else {
            if (this.roomPublic) {
                this.roomPublic.setVisible(false);
            }
            if (this.roomPublic_2d) {
                this.roomPublic_2d.setVisible(true);
            }
            if (this.room_Action) {
                this.room_Action.btns["gps"].setVisible(false);
            }
            if (this.pre_scene) {
                this.pre_scene.btns["gps"].setVisible(false);
            }
            if (this._curLaizi_bg) {
                this._curLaizi_bg.setPosition(cc.p(160, size.height - 4));
            }
        }
        if (this.room_Action) {
            var operate = MJModel.curOperate;
            if ((operate & ActionType.TYPE_LISTEN) == ActionType.TYPE_LISTEN) {
                operate = operate - ActionType.TYPE_LISTEN;
            }
            if (operate > 0) {
                this.room_Action.setOperator(operate);
            }
        }
    },

    loadCardConfig: function (path) {
        if (MJModel.mj_bg_use == 0) {
            this._super(path);
        } else {
            if (MJModel.mj_font == "jianjie") {
                Utils.addCardSprites("enshi/newui/cards/card_yellow");
            } else if (MJModel.mj_font == "xieshi") {
                Utils.addCardSprites("enshi/newui/cards/card_blue");
            } else {
                Utils.addCardSprites("enshi/newui/cards/card_green");
            }
            path = "enshi/newui/config/card_config2d.json";
            if (MJModel.mj_roomType == 2) {
                path = "enshi/newui/config/card_config2d_2ren.json";
            }
            this._super(path);

        }
    },

    initUtil: function () {
        var self_table = this;
        var super_parseName = Utils.parseName;
        Utils.parseName = function (max, name) {
            if (max <= 8 && self_table._fangZuoBi && !MJModel.isOnVideo && !self_table.isRecordShow) {
                return "******"
            } else {
                return super_parseName.call(this, max, name);
            }
        };

        var super_createCircleAvatar = Utils.createCircleAvatar;
        Utils.createCircleAvatar = function (url, defualtFile, clipfile, size) {
            if (self_table.isRecordShow) {
                self_table._fangZuoBi = false;
            }
            cc.log("lin=createCircleAvatar=" + self_table._fangZuoBi);
            try {
                var savePath = Utils.getImageSavePath(url);

                if (Utils.hasImageFile(url)) {
                    var avatar = new cc.Sprite(savePath);
                    if (avatar == null) {
                        avatar = new cc.Sprite(defualtFile);
                    }
                    if (self_table._fangZuoBi && !MJModel.isOnVideo) {
                        Utils.makeCircleSprite(avatar, getResPath("enshi/avatars/user4.png"), clipfile, size);
                    } else {
                        Utils.makeCircleSprite(avatar, savePath, clipfile, size);
                    }
                    return avatar;
                }
                else {
                    var avatar = new cc.Sprite(defualtFile);
                    if (self_table._fangZuoBi && !MJModel.isOnVideo) {
                        Utils.makeCircleSprite(avatar, getResPath("enshi/avatars/user4.png"), clipfile, size);
                    } else {
                        Utils.makeCircleSprite(avatar, defualtFile, clipfile, size);
                    }
                    var tag = savePath + time(null);
                    CCHttpAgent.getInstance().sendHttpImage(url, savePath, tag, function (tag) {
                        if (Utils.hasImageFile(url)) {
                            if (self_table._fangZuoBi) {
                                Utils.makeCircleSprite(avatar, getResPath("enshi/avatars/user4.png"), clipfile, size);
                            } else {
                                Utils.makeCircleSprite(avatar, defualtFile, clipfile, size);
                            }
                        }
                        CCHttpAgent.getInstance().popPackets(tag);
                    }, 15);

                    return avatar;
                }
            } catch (e) {
                var avatar = new cc.Sprite(defualtFile);
                var s_izex = size.width / avatar.getContentSize().width;
                var s_izey = size.height / avatar.getContentSize().height;
                avatar.setScale(s_izex, s_izey);
                return avatar;
            }
        };
    },
    _init_extend: function () {
        var self_table = this;

        this.initUtil();

        CommonTotalResult.prototype.getCocosUI = function(){
            return ccs.load(getResPath("enshi/newui/mj_public/gameRecord.json"));
        };

        //不要听牌角标
        MJCards.prototype.setTingPaiFlag = function (v) {
        };

        //不要帮助、玩家、速度
        var super_MenuList_ctor = MenuList.prototype.ctor;
        MenuList.prototype.ctor = function () {
            super_MenuList_ctor.call(this);
            this.btns["help"].setVisible(false);
            this.btns["gps"].setVisible(false);
            this.btns["speed"].setVisible(false);
            this.btns["exit"].setPosition(this.btns["gps"].getPosition());
            this.btns["jieshan"].setPosition(this.btns["gps"].getPosition());
        };

        var super_MJPreTable_ctor = MJPreTable.prototype.ctor;
        MJPreTable.prototype.ctor = function () {
            super_MJPreTable_ctor.call(this);
            this.bg.loadTexture(getResPath(self_table.getBgStr()));
        };

        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };

        MJCards.prototype.sortCard = function (a, b) {
            return self_table._sortCard(a, b);
        };

        var super_showGameStartEffect = MJTips.prototype.showGameStartEffect;
        MJTips.prototype.showGameStartEffect = function (play_sound) {
            if (self_table._play_gamestart == false) {
                super_showGameStartEffect.call(this, play_sound);
                self_table._play_gamestart = true;
            }
        };

        MJCard.prototype.check_addFlag = function () {
            self_table._checkAddCardFlag(this);
        };

        //湖北麻将不要自动胡牌功能
        MJAction.prototype.setAutoOutCardVis = function (value) {
        };

        var super_setOperator2 = MJActionVideo.prototype.setOperator;
        MJActionVideo.prototype.setOperator = function (pos, operat) {
            super_setOperator2.call(this, pos, operat);
            if (operat == -1 || operat == 0 || operat == null || operat == undefined) {
                return false;
            }

            if ((operat & LaiZiGangType.TYPE_LAIZI_GANG) == LaiZiGangType.TYPE_LAIZI_GANG || (operat & LaiZiGangType.TYPE_PIZI_GANG) == LaiZiGangType.TYPE_PIZI_GANG || (operat & LaiZiGangType.TYPE_PIZI_GANG2) == LaiZiGangType.TYPE_PIZI_GANG2) {
                if (this.actions[pos]["gang"]) {
                    this.actions[pos]["gang"].setVisible(true);
                }
            }

            if ((operat & LaiZiGangType.TYPE_PIZI_GANG2) == LaiZiGangType.TYPE_PIZI_GANG2) {
                if (this.actions[pos]["pass"]) {
                    this.actions[pos]["pass"].setVisible(false);
                }
                if (this.actions[pos]["gang"]) {
                    this.actions[pos]["gang"].setVisible(false);
                }
            }

            if (( operat & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || ( operat & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG || ( operat & LaiZiGangType.TYPE_LAIZI_GANG) == LaiZiGangType.TYPE_LAIZI_GANG || (operat & LaiZiGangType.TYPE_PIZI_GANG) == LaiZiGangType.TYPE_PIZI_GANG) {
                if (this.actions[pos]["pass"]) {
                    this.actions[pos]["pass"].setVisible(false);
                }
                MJModel.mj_table.myselfOpenOutCard(false);
            }
            this.reflashOpBtns(pos);
            return true;
        };

        var super_setOperator = MJAction.prototype.setOperator;
        MJAction.prototype.setOperator = function (operat) {
            this.removeChildByName("ChooseGang_selectLayer");
            if (operat == -1 || operat == 0 || operat == null || operat == undefined) {
                for (var i = 0; i < this.opBtns.length; i++) {
                    this.opBtns[i].setVisible(false);
                }
                MJModel.curOperate = -1;
                return false;
            }

            if ((operat & LaiZiGangType.TYPE_LAIZI_GANG) == LaiZiGangType.TYPE_LAIZI_GANG || (operat & LaiZiGangType.TYPE_PIZI_GANG) == LaiZiGangType.TYPE_PIZI_GANG || (operat & LaiZiGangType.TYPE_PIZI_GANG2) == LaiZiGangType.TYPE_PIZI_GANG2) {
                if (this.actions["gang"]) {
                    this.actions["gang"].setVisible(true);
                    setNodeVis(GetChild(this.actions["gang"], "card"), false);
                }

            }
            super_setOperator.call(this, operat);
            if ((operat & LaiZiGangType.TYPE_PIZI_GANG2) == LaiZiGangType.TYPE_PIZI_GANG2) {
                if (this.actions["pass"]) {
                    this.actions["pass"].setVisible(false);
                }
                if (this.actions["gang"]) {
                    this.actions["gang"].setVisible(false);
                }
            }

            if ((operat & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || ( operat & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG || ( operat & LaiZiGangType.TYPE_LAIZI_GANG) == LaiZiGangType.TYPE_LAIZI_GANG || (operat & LaiZiGangType.TYPE_PIZI_GANG) == LaiZiGangType.TYPE_PIZI_GANG) {
                if (this.actions["pass"]) {
                    this.actions["pass"].setVisible(false);
                }
                MJModel.mj_table.myselfOpenOutCard(false);
                var hasTwo = false;
                if ((operat & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                    hasTwo = true;
                }
                var tips = "enshi/flag/qg.png";
                var size = cc.director.getWinSize();
                var selectLayer = new cc.Sprite(getResPath(tips));
                selectLayer.setName("ChooseGang_selectLayer");
                selectLayer.setPosition(cc.p(size.width / 2, 200 + (hasTwo ? 70 : 0)));
                this.addChild(selectLayer, 10000);
            }

            //显示碰杠吃的牌
            if ((operat & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (operat & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG || (operat & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                if (((operat & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (operat & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) && MJModel.gang_info.length > 1) {
                    setNodeVis(GetChild(this.actions["gang"], "card"), false);
                } else {
                    var card = GetChild(this.actions["gang"], "card");
                    if (MJModel.gang_info.length == 1) {
                        card.setVisible(true);
                        card.setValue(MJModel.gang_info[0].curCard, 0, CardType.Card_End, 1);
                    }
                }
            }

            if ((operat & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                var card = GetChild(this.actions["peng"], "card");
                if (MJModel.curOperateCard && MJModel.curOperateCard != -1 && MJModel.curOperateCard != 255) {
                    card.setVisible(true);
                    card.setValue(MJModel.curOperateCard, 0, CardType.Card_End, 1);
                }
            }

            if ((operat & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (operat & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI || (operat & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                var card = GetChild(this.actions["chi"], "card");
                if (MJModel.curOperateCard && MJModel.curOperateCard != -1 && MJModel.curOperateCard != 255) {
                    card.setVisible(true);
                    card.setValue(MJModel.curOperateCard, 0, CardType.Card_End, 1);
                }
            }


            this.reflashOpBtns();
            if ((operat & LaiZiGangType.TYPE_PIZI_GANG2) == LaiZiGangType.TYPE_PIZI_GANG2) {
                self_table.autoGangPiziCard();
            }
            return true;
        };

        MJAction.prototype.btnCallback = function (ref) {
            if (MJModel.outtimeplayers.length > 1) {
                MJModel.mj_table.room_Tip.setAutoEndRoomVis(true);
            }
            var n = ref;
            var name = n.getName();
            Log(this, "btnCallback:" + name);
            var self = this;

            if (name == "yaoqing") {
                if (MJModel.shareType == 1) {
                    var myposition = cc.p(n.getContentSize().width / 2, n.getContentSize().height / 2);
                    var sharelist = new ShareList();
                    sharelist.initList(this, 0, myposition);
                    n.addChild(sharelist);
                    return;
                }
            }
            if (name == "pass" || name == "hu" || name == "gang" || name == "peng" || name == "chi") {
                var type = 0;
                if (name == "pass") {
                    type = ActionType.TYPE_PASS;
                    var op = MJModel.curOperate;
                    var card = MJModel.curOperateCard;
                    var hasGang = false;
                    var hasHu = false;
                    if ((op & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG
                        || (op & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG
                        || (op & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
                        hasGang = true;
                    }

                    if ((op & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                        hasHu = true;
                    }

                    sendOperateCard(type, card);
                    this.setOperator(-1);
                    return;
                }
                if (name == "hu") type = ActionType.TYPE_HU;
                if (name == "peng") type = ActionType.TYPE_PENG;
                if (name == "gang") {
                    var op = MJModel.curOperate;
                    if ((op & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG || (op & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (op & LaiZiGangType.TYPE_LAIZI_GANG) == LaiZiGangType.TYPE_LAIZI_GANG || (op & LaiZiGangType.TYPE_PIZI_GANG) == LaiZiGangType.TYPE_PIZI_GANG || (op & LaiZiGangType.TYPE_PIZI_GANG2) == LaiZiGangType.TYPE_PIZI_GANG2) {
                        if (MJModel.gang_info.length > 1) {
                            var selectLayer = new ChooseGang();
                            selectLayer.setChoiceInfos(MJModel.gang_info);
                            selectLayer.setName("ChooseGang_selectLayer");
                            selectLayer.setTitle("请点击选择要杠的牌");
                            selectLayer.setPosition(cc.p(n.getPosition().x + 0, n.getPosition().y + 50));
                            selectLayer.setCallback(function (index) {
                                sendOperateCard(MJModel.gang_info[index].state, MJModel.gang_info[index].curCard);

                                self.setOperator(-1);
                                self.removeChildByName("ChooseGang_selectLayer");
                            });
                            this.addChild(selectLayer, 10000);
                            return;
                        }
                        else if (MJModel.gang_info.length > 0) {
                            MJModel.curOperateCard = MJModel.gang_info[0].curCard;
                        }
                        else {
                            return;
                        }
                    }

                    type = ActionType.TYPE_ZHIGANG;

                    if ((op & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
                        type = ActionType.TYPE_WANGANG;
                    }
                    else if ((op & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                        type = ActionType.TYPE_ANGANG;
                    }
                    else if ((op & LaiZiGangType.TYPE_LAIZI_GANG) == LaiZiGangType.TYPE_LAIZI_GANG) {
                        type = LaiZiGangType.TYPE_LAIZI_GANG;
                    }
                    else if ((op & LaiZiGangType.TYPE_PIZI_GANG) == LaiZiGangType.TYPE_PIZI_GANG) {
                        type = LaiZiGangType.TYPE_PIZI_GANG;
                    }
                    else if ((op & LaiZiGangType.TYPE_PIZI_GANG2) == LaiZiGangType.TYPE_PIZI_GANG2) {
                        type = LaiZiGangType.TYPE_PIZI_GANG2;
                    }
                }

                if (name == "chi") {
                    var op = MJModel.curOperate;
                    var op_nums = 0;
                    var op_type = ActionType.TYPE_LEFT_CHI;
                    if ((op & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                        op_nums++;
                        op_type = ActionType.TYPE_LEFT_CHI;
                    }
                    if ((op & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                        op_nums++;
                        op_type = ActionType.TYPE_CENTER_CHI;
                    }
                    if ((op & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                        op_nums++;
                        op_type = ActionType.TYPE_RIGHT_CHI;
                    }

                    if (op_nums > 1) {
                        var selectLayer = new ChooseChi();
                        selectLayer.setChoiceInfos(MJModel.curOperate, MJModel.curOperateCard)
                        selectLayer.setName("ChooseGang_selectLayer");
                        selectLayer.setPosition(cc.p(n.getPosition().x, n.getPosition().y + 50));
                        selectLayer.setCallback(function (type) {
                            sendOperateCard(type, MJModel.curOperateCard);
                            self.setOperator(-1);
                            self.removeChildByName("ChooseGang_selectLayer");
                        });
                        this.addChild(selectLayer, 10000);
                        return;
                    }
                    type = op_type;
                }
                var card = MJModel.curOperateCard;
                sendOperateCard(type, card);
                this.setOperator(-1);
                return;
            }
            if (this.callback) this.callback(name);
        };

        //当showPoint为false时，去掉出牌箭头
        MJCards.prototype.addOutCard = function (pos, value, showPoint) {
            if (showPoint == undefined) showPoint = true;
            var card = new MJCard();

            this.out_card[pos].push(card);
            card.setValue(value, pos, CardType.Card_Out, this.out_card[pos].length - 1);
            card.setMyPosition(MJConfig.getOutCardPos(pos, this.out_card[pos].length - 1));
            this.addChild(card, MJConfig.getOutCardOrder(pos, this.out_card[pos].length - 1));

            if (showPoint == false) {
                return card;
            }

            try {
                if (this.curCardTip == null) {

                    this.curCardTip = new cc.Sprite(getResPath("RoomMJ/cur_card.png"));
                    this.curCardTip.runAction(cc.sequence(cc.moveBy(0.5, cc.p(0, 10)), cc.moveBy(0.5, cc.p(0, -10))).repeatForever());
                    this.curCardTip.setVisible(false);
                    this.addChild(this.curCardTip, 1000);
                }
            } catch (e) {
                this.curCardTip = null;
            }

            if (this.curCardTip != null) {
                if (MJModel.mj_card_lib_type == 0) {
                    if (pos == 0 || pos == 2) {
                        this.curCardTip.setPosition(cc.p(card.getPosition().x, card.getPosition().y + 50));
                    } else {
                        this.curCardTip.setPosition(cc.p(card.getPosition().x, card.getPosition().y + 40));
                    }
                } else {
                    this.curCardTip.setPosition(cc.p(card.getPosition().x, card.getPosition().y + 35));
                }

                this.curCardTip.setVisible(true);
            }
            return card;
        };

        var super_getCardStr_new = MJConfig.getCardStr_new;
        MJConfig.getCardStr_new = function (value, pos, type, index) {
            if (pos == 2 && MJModel.mj_bg_use == 1) {
                var _reValue = "";
                var c = Utils.toHex2(value);
                if (type == CardType.Card_Hand) {
                    _reValue = "hand_2/00.png";
                } else if (type == CardType.Card_Outing) {
                    _reValue = "hand_0/" + c + ".png";
                } else if (type == CardType.Card_Peng || type == CardType.Card_End) {
                    _reValue = "peng_end_2/" + c + ".png";
                } else if (type == CardType.Card_Mo) {
                    _reValue = "hand_2/00.png";
                } else if (type == CardType.Card_Out || type == CardType.Card_Hu) {
                    _reValue = "out_2/" + c + ".png";
                } else if (type == CardType.Card_Public) {
                    _reValue = "public_2/" + c + ".png";
                }

                return _reValue;
            } else {
                return super_getCardStr_new.call(this, value, pos, type, index);
            }
        };

        var super_getHuCardOrder = MJConfig.getHuCardOrder;
        MJConfig.getHuCardOrder = function (pos, index) {
            var order = super_getHuCardOrder.call(this, pos, index);
            if (MJModel.mj_bg_use == 0 && MJModel.mj_roomType == 2 && pos == 0) {
                order += 20;
            }
            return order;
        };

        var super_getHuCardPos = MJConfig.getHuCardPos;
        MJConfig.getHuCardPos = function (pos, index) {
            var begin = super_getHuCardPos.call(this, pos, index);
            if (MJModel.mj_bg_use == 0 && MJModel.mj_roomType == 2 && pos == 0) {
                begin.x -= 120;
            }
            return begin;
        };

        var super_getOutCardPos = MJConfig.getOutCardPos;
        MJConfig.getOutCardPos = function (pos, index) {
            if (MJModel.mj_bg_use == 1) {
                if (MJModel.mj_roomType == 2) {
                    index = index % 58;
                } else {
                    index = index % 26;
                }
                return this.getWorldPosition("out_" + pos, "o_" + index);
            } else {
                var begin = super_getOutCardPos.call(this, pos, index);
                return begin;
            }
        };

        var super_getOutCardOrder = MJConfig.getOutCardOrder;
        MJConfig.getOutCardOrder = function (pos, index) {
            if (MJModel.mj_bg_use == 1) {
                if (MJModel.mj_roomType == 2) {
                    index = index % 58;
                    var order = [
                        [
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
                            20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
                            40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
                        ],
                        [
                            25, 24, 23, 22, 21, 20, 19, 18,
                            17, 16, 15, 14, 13, 12, 11, 10,
                            9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                        ],
                        [
                            57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40,
                            39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20,
                            19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                        ],
                        [
                            18, 19, 20, 21, 22, 23, 24, 25,
                            10, 11, 12, 13, 14, 15, 16, 17,
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                        ],
                    ];
                    return order[pos][index];
                } else {
                    index = index % 26;
                    var order = [
                        [
                            0, 1, 2, 3, 4, 5, 6, 7,
                            8, 9, 10, 11, 12, 13, 14, 15,
                            16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
                        ],
                        [
                            25, 24, 23, 22, 21, 20, 19, 18,
                            17, 16, 15, 14, 13, 12, 11, 10,
                            9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                        ],
                        [
                            25, 24, 23, 22, 21, 20, 19, 18,
                            17, 16, 15, 14, 13, 12, 11, 10,
                            9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                        ],
                        [
                            18, 19, 20, 21, 22, 23, 24, 25,
                            10, 11, 12, 13, 14, 15, 16, 17,
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                        ],
                    ];
                    return order[pos][index];
                }
            } else {
                return super_getOutCardOrder.call(this, pos, index);
            }
        };

        var super_setinitUI = Setting.prototype.initUI;
        Setting.prototype.initUI = function () {
            super_setinitUI.call(this);
            this.checkboxs_gamesetting["table_2d"].loadTextures(getResPath("enshi/newui/temp/table_2d.png"), getResPath("enshi/newui/temp/table_2d.png"), getResPath("RoomMJ/mj_public/common/dialog/gamesetting/choice.png"), getResPath("enshi/newui/temp/table_2d.png"), getResPath("RoomMJ/mj_public/common/dialog/gamesetting/choice.png"));
        };

        var super_showPaiBanView = Setting.prototype.showPaiBanView;
        Setting.prototype.showPaiBanView = function (is) {
            if (is) {
                this.checkboxs_gamesetting["font_jianjie"].getChildByName("text").setString("黄色");
                this.checkboxs_gamesetting["font_xieshi"].getChildByName("text").setString("蓝色");
                this.checkboxs_gamesetting["font_gexing"].getChildByName("text").setString("绿色");

                this.checkboxs_gamesetting["style_jingdian"].getChildByName("text").setString("经典");
                this.checkboxs_gamesetting["style_shishang"].getChildByName("text").setString("普蓝");
                this.checkboxs_gamesetting["style_huaijiu"].getChildByName("text").setString("深蓝");

                this._gameSettingLayer.getChildByName("font_title").setString("牌面");
            } else {
                this.checkboxs_gamesetting["font_jianjie"].getChildByName("text").setString("简洁");
                this.checkboxs_gamesetting["font_xieshi"].getChildByName("text").setString("圆润");
                this.checkboxs_gamesetting["font_gexing"].getChildByName("text").setString("个性");

                this.checkboxs_gamesetting["style_jingdian"].getChildByName("text").setString("绿色");
                this.checkboxs_gamesetting["style_shishang"].getChildByName("text").setString("墨绿");
                this.checkboxs_gamesetting["style_huaijiu"].getChildByName("text").setString("蓝色");

                this._gameSettingLayer.getChildByName("font_title").setString("字体");
            }
            this._gameSettingLayer.getChildByName("fontSize_title").setVisible(!is);
            this.checkboxs_gamesetting["fontSize_biaozhun"].setVisible(!is);
            this.checkboxs_gamesetting["fontSize_dahao"].setVisible(!is);
            super_showPaiBanView.call(this, false);
        };

        //修改2d计时器
        MJInfo.prototype.getInfoRes = function (type) {
            var myseat = 0;
            if (MJModel.seatid != -1) {
                myseat = MJModel.seatid;
            }
            var playerNum = 4;
            if (MJModel.mj_roomType == 1) {
                playerNum = 3;
            } else if (MJModel.mj_roomType == 2) {
                playerNum = 2;
            }

            if (type == 0) {
                return "RoomMJ/zhishiqi/info1_" + playerNum + "_" + myseat + ".json";
            } else {
                return "enshi/newui/zhishiqi2d/info1_" + playerNum + "_" + myseat + ".json";
            }
        };

        MJAction.prototype.getOpBtnWidth = function () {
            return 180;
        };

        MJTips.prototype.showEffect1 = function (pos, out_pos, type, effect) {
            try {
                var begin = MJConfig.getOperatorTipPos(pos);

                var armature = null;
                var name = "";

                if (effect == "qiangganghu") {
                    ccs.armatureDataManager.addArmatureFileInfo(getResPath("RoomMJ/effect1/qiangganghu/effects_sysmj_fontqiangganghu.ExportJson"));
                    armature = new ccs.Armature("effects_sysmj_fontqiangganghu");
                    name = "qiangganghu";
                }
                else if (type == ActionType.TYPE_PENG) {
                    ccs.armatureDataManager.addArmatureFileInfo(getResPath("enshi/newui/effect/chipenggang/effectsesmj_chi.ExportJson"));
                    armature = new ccs.Armature("effectsesmj_chi");
                    name = "effectsesmj_pen";
                }
                else if (type == ActionType.TYPE_HU) {
                    if (effect == "zimo") {
                        name = "effectsesmj_zimo";
                        ccs.armatureDataManager.addArmatureFileInfo(getResPath("enshi/newui/effect/chipenggang/effectsesmj_chi.ExportJson"));
                        armature = new ccs.Armature("effectsesmj_chi");
                    } else {
                        name = "effectsesmj_hu";
                        ccs.armatureDataManager.addArmatureFileInfo(getResPath("enshi/newui/effect/chipenggang/effectsesmj_chi.ExportJson"));
                        armature = new ccs.Armature("effectsesmj_chi");
                    }
                }
                else if (type == ActionType.TYPE_LEFT_CHI || type == ActionType.TYPE_CENTER_CHI || type == ActionType.TYPE_RIGHT_CHI) {
                    name = "effectsesmj_chi";
                    ccs.armatureDataManager.addArmatureFileInfo(getResPath("enshi/newui/effect/chipenggang/effectsesmj_chi.ExportJson"));
                    armature = new ccs.Armature("effectsesmj_chi");
                }
                else if (type == ActionType.TYPE_ANGANG) {
                    name = "effectsesmj_qqr2";
                    ccs.armatureDataManager.addArmatureFileInfo(getResPath("enshi/newui/effect/paixing/effectsesmj_qqr.ExportJson"));
                    armature = new ccs.Armature("effectsesmj_qqr");
                }
                else if (type == ActionType.TYPE_ZHIGANG || type == ActionType.TYPE_WANGANG) {
                    name = "effectsesmj_qqr8";
                    ccs.armatureDataManager.addArmatureFileInfo(getResPath("enshi/newui/effect/paixing/effectsesmj_qqr.ExportJson"));
                    armature = new ccs.Armature("effectsesmj_qqr");
                }
                else if (type == LaiZiGangType.TYPE_LAIZI_GANG) {
                    name = "effectsesmj_qqr7";
                    ccs.armatureDataManager.addArmatureFileInfo(getResPath("enshi/newui/effect/paixing/effectsesmj_qqr.ExportJson"));
                    armature = new ccs.Armature("effectsesmj_qqr");
                }
                else if (type == LaiZiGangType.TYPE_PIZI_GANG || type == LaiZiGangType.TYPE_PIZI_GANG2) {
                    name = "effectsesmj_qqr11";
                    ccs.armatureDataManager.addArmatureFileInfo(getResPath("enshi/newui/effect/paixing/effectsesmj_qqr.ExportJson"));
                    armature = new ccs.Armature("effectsesmj_qqr");
                }
                else {
                    name = "effectsesmj_gang";
                    ccs.armatureDataManager.addArmatureFileInfo(getResPath("enshi/newui/effect/chipenggang/effectsesmj_chi.ExportJson"));
                    armature = new ccs.Armature("effectsesmj_chi");
                }

                if (armature != null && name != "") {
                    var animation = armature.getAnimation();
                    if (animation) {
                        if (typeof animation.playWithIndex === "function") {
                            animation.play(name, 1, false);
                            // animation.playWithIndex(0);
                            armature.setPosition(begin);
                            this.addChild(armature, 10000);
                        }
                    }
                    armature.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
                    armature.setName("hu_effect");
                    return armature;
                }
            } catch (e) {
                Log(this, e);
            }
            return null;
        };

        MJPlayer.prototype.reflashNameMoneyPosition = function () {
            return;
        };

        MJPlayer.prototype.login = function (seatid) {
            try {
                this.seatid = seatid;
                var player = MJModel.players[this.seatid];
                if (!player)return;
                this.uid = player.uid;
                this.name_label.setString(Utils.parseName(6, player.name));
                this.name_label.ignoreContentAdaptWithSize(true);
                this.m_pMoney.ignoreContentAdaptWithSize(true);
                this.updateInfo();

                this.m_pAvatar.removeAllChildren();
                var avatar = Utils.createCircleAvatar(player.avatar, "Avatars/user4_unlogin.png", getResPath("enshi/newui/mj_public/common/player/head_bg2.png"), cc.size(80, 80));
                avatar.setPosition(cc.p(0, 0));
                this.m_pAvatar.addChild(avatar);

                this.setVisible(true);
                this.setPosition(MJConfig.getPlayerPos(this.pid));

                this.setBankerFlag(false);
                this.setReadyFlag(false);
                this.setTimeOut(false);
                this.setOffline(false);
            } catch (e) {

            }
        };

        MJPlayer.prototype.setId = function (id) {
            this.pid = id;

            var uiJson = ccs.load(getResPath("enshi/newui/mj_public/player.json"));
            var uiNode = uiJson.node;
            this.addChild(uiNode);
            this.rootNode = uiNode;

            var btn = uiNode.getChildByName("btn");
            btn.setTag(5);
            var self = this;
            btn.addClickEventListener(function (sender, evt) {
                self.playerClickCallback(self);
            });

            this.m_size = btn.getContentSize();
            this.setContentSize(this.m_size);
            uiNode.setPosition(this.m_size.width / 2, this.m_size.height / 2);

            this.name_label = uiNode.getChildByName("name");
            // this.name_label_bg =uiNode.getChildByName("name_bg");
            this.m_pMoney_bg = uiNode.getChildByName("money_bg");
            this.m_pMoney = uiNode.getChildByName("money_bg").getChildByName("money");

            this.m_pAvatar = uiNode.getChildByName("avatar");

            this.banker_flag = new cc.Sprite(getResPath("RoomMJ/banker.png"));
            this.banker_flag.setVisible(false);
            if (id == 1) {
                this.banker_flag.setPosition(cc.p(this.m_size.width - this.banker_flag.getContentSize().width / 2 + 10, this.m_size.height - this.banker_flag.getContentSize().height / 2));
            }
            else {
                this.banker_flag.setPosition(cc.p(this.banker_flag.getContentSize().width / 2 - 10, this.m_size.height - this.banker_flag.getContentSize().height / 2));
            }

            this.addChild(this.banker_flag, 100);

            this.ready_flag = new cc.Sprite(getResPath("RoomMJ/ok.png"));
            this.ready_flag.setVisible(false);
            if (id == 0 || id == 3) {
                this.ready_flag.setPosition(cc.p(this.m_size.width + 20 + this.ready_flag.getContentSize().width / 2, this.m_size.height / 2));
            } else {
                this.ready_flag.setPosition(cc.p(-20 - this.ready_flag.getContentSize().width / 2, this.m_size.height / 2));
            }

            this.addChild(this.ready_flag, 100);

            this.ready_flag2 = new cc.Sprite(getResPath("RoomMJ/ready2.png"));
            this.ready_flag2.setVisible(false);
            if (id == 1 || id == 3) {
                this.ready_flag2.setPosition(cc.p(this.m_size.width / 2, this.m_size.height / 2 + 100));
            }
            else {
                this.ready_flag2.setPosition(cc.p(this.m_size.width / 2 + 108, this.m_size.height / 2));
            }

            this.addChild(this.ready_flag2, 100);


            this.player_black = new cc.Sprite(getResPath("RoomMJ/player_black.png"));
            this.player_black.setVisible(false);
            this.player_black.setPosition(cc.p(this.m_size.width / 2, this.m_size.height / 2 - 10));
            this.addChild(this.player_black, 99);

            this.offline_flag = new cc.Sprite(getResPath("RoomMJ/offline.png"));
            this.offline_flag.setVisible(false);
            this.offline_flag.setPosition(cc.p(this.m_size.width / 2, 35));
            this.addChild(this.offline_flag, 100);

            this.timeount_flag = new cc.Sprite(getResPath("RoomMJ/timeover.png"));
            this.timeount_flag.setVisible(false);
            this.timeount_flag.setPosition(cc.p(this.m_size.width / 2, this.m_size.width / 2));
            this.addChild(this.timeount_flag, 100);
        };

        var super_getPlayerPos = MJConfig.getPlayerPos;
        MJConfig.getPlayerPos = function (pos) {
            var p = super_getPlayerPos.call(this, pos);
            if (pos == 1) {
                p.y += 30;
            }
            if (pos == 2) {
                if (MJModel.mj_bg_use == 0) {
                    p.y -= 30;
                } else {
                    p.y -= 50;
                }
            }
            if (pos == 0) {
                if (MJModel.mj_bg_use == 0) {
                    p.y += 60;
                    p.x -= 5;
                } else {
                    p.y += 20;
                }
            }
            return p;
        };

        MJInfo.prototype.showCardNums = function (nums) {
            this.curCardNums = nums;
            MJModel.mj_table.roomPublic.showCardNum(this.isVisible() ? nums : -1);
            if (MJModel.mj_table.roomPublic_2d) {
                MJModel.mj_table.roomPublic_2d.showCardNum(this.isVisible() ? nums : -1);
            }
        };
    },

    onEnter: function () {
        this._super();

        if (MJModel.mj_bg_use == 0) {
            if (this.roomPublic) {
                this.roomPublic.setVisible(true);
            }
            if (this.roomPublic_2d) {
                this.roomPublic_2d.setVisible(false);
            }
            if (this.room_Action) {
                this.room_Action.btns["gps"].setVisible(true);
            }
            if (this.pre_scene) {
                this.pre_scene.btns["gps"].setVisible(true);
            }
        } else {
            if (this.roomPublic) {
                this.roomPublic.setVisible(false);
            }
            if (this.roomPublic_2d) {
                this.roomPublic_2d.setVisible(true);
            }
            if (this.room_Action) {
                this.room_Action.btns["gps"].setVisible(false);
            }
            if (this.pre_scene) {
                this.pre_scene.btns["gps"].setVisible(false);
            }
        }
    },
    autoGangPiziCard: function () {
        this.schedule(this.autoGangPiziCardTimeOut, 1);
    },
    autoGangPiziCardTimeOut: function (dt) {
        // if (MJModel.TouPiaoING == true) return;//投票期间 该功能不起作用
        this.unschedule(this.autoGangPiziCardTimeOut);
        var operat = MJModel.curOperate;
        var type = LaiZiGangType.TYPE_PIZI_GANG;
        if ((operat & LaiZiGangType.TYPE_PIZI_GANG2) == LaiZiGangType.TYPE_PIZI_GANG2) {
            type = LaiZiGangType.TYPE_PIZI_GANG2;
        }
        else if ((operat & LaiZiGangType.TYPE_PIZI_GANG) == LaiZiGangType.TYPE_PIZI_GANG) {
            type = LaiZiGangType.TYPE_PIZI_GANG;
        }
        if (MJModel.gang_info.length > 0) {
            MJModel.curOperateCard = MJModel.gang_info[0].curCard;
            var card = MJModel.curOperateCard;
            sendOperateCard(type, card);
            if (this.room_Action) this.room_Action.setOperator(-1);
        }
    },

    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.value;
            if (typeof b === "object") bv = b.value;
            if (av == this._curLaizi && bv != this._curLaizi)return 1;//赖子放在最前边
            if (av != this._curLaizi && bv == this._curLaizi)return -1;//赖子放在最前边
            if (this._pkg_id == PackgName.enshi_yipierlai || this._pkg_id == PackgName.enshi_bapisilai) {
                if (av == this._curLaizipi && bv != this._curLaizipi)return 1;//赖子皮放在最前边
                if (av != this._curLaizipi && bv == this._curLaizipi)return -1;//赖子皮放在最前边
                if (av == this._curLaizipi2 && bv != this._curLaizipi2)return 1;//赖子皮放在最前边
                if (av != this._curLaizipi2 && bv == this._curLaizipi2)return -1;//赖子皮放在最前边
            }
            return bv - av;
        } catch (e) {
            return 0;
        }
    },

    _handler_game_record: function (data, canDelay) {
        //-----新总结算界面
        cc.log("------big End");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var pkgId = this._pkg_id;
        var gameType = "";
        var yipierlaiGameRecord = null;
        var gameRecord = null;
        var base_money = 0;
        if (pkgId == PackgName.enshi_yipierlai) {
            gameType = "一痞二赖 · 4人 ";
            if (MJModel.mj_roomType == 1) {
                gameType = "一痞二赖 · 3人 ";
            } else if (MJModel.mj_roomType == 2) {
                gameType = "一痞二赖 · 2人 ";
            }
            yipierlaiGameRecord = parsePacket("proto.game.enshimj.AckYpelGameEndRecord", data);
            gameRecord = yipierlaiGameRecord.record;
            if (this._difenType == ConfigType.GAME_Difen_Type1) base_money = 0.5;
            if (this._difenType == ConfigType.GAME_Difen_Type2) base_money = 1;
            if (this._difenType == ConfigType.GAME_Difen_Type3) base_money = 2.5;
            if (this._difenType == ConfigType.GAME_Difen_Type4) base_money = 5;
        } else if (pkgId == PackgName.enshi_bapisilai) {
            gameType = "八痞四赖 · 4人 ";
            if (MJModel.mj_roomType == 1) {
                gameType = "八痞四赖 · 3人 ";
            } else if (MJModel.mj_roomType == 2) {
                gameType = "八痞四赖 · 2人 ";
            }
            yipierlaiGameRecord = parsePacket("proto.game.enshimj.AckYpelGameEndRecord", data);
            gameRecord = yipierlaiGameRecord.record;
            if (this._difenType == ConfigType.GAME_Difen_Type1) base_money = 0.5;
            if (this._difenType == ConfigType.GAME_Difen_Type2) base_money = 1;
            if (this._difenType == ConfigType.GAME_Difen_Type3) base_money = 2.5;
            if (this._difenType == ConfigType.GAME_Difen_Type4) base_money = 5;
        }else if (pkgId == PackgName.enshi_yingmajiang) {
            gameType = "硬麻将 ";
            gameRecord = parsePacket("proto.game.GameEndRecord", data);
            if (this._difenType == YingMJConfigType.GAME_Difen_1) base_money = 1;
            if (this._difenType == YingMJConfigType.GAME_Difen_2) base_money = 2;
            if (this._difenType == YingMJConfigType.GAME_Difen_5) base_money = 5;
        }

        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var roomConfig = bigResult.rootNode.getChildByName("roomConfig");
        roomConfig.ignoreContentAdaptWithSize(true);
        var gameDes = "";
        for (var i = 0; i < MJModel.play_id_str.length; i++) {
            gameDes += MJModel.play_id_str[i];
            if (i != MJModel.play_id_str.length - 1) {
                gameDes += " ";
            }
        }
        var finalstr = "";
        for (var i = 0; i < gameDes.length; i++){
            finalstr += gameDes[i];
            if (i > 0 && i % 15 == 0)finalstr += "\n";
        }
        roomConfig.setString(finalstr);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];
        gameType += " · " + base_money + "分底";

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        //var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;

        var max_score = 0;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            if (recoreInfo.totalscore > max_score) {
                max_score = recoreInfo.totalscore;
            }
        }
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            //var playerRecord = totalRecord.player_records[i];
            var player = MJModel.players[i];
            var arrStr = ["坐庄次数", "胡牌次数", "飘癞子次数", "超时次数"];
            var arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.piaolaizi_num, recoreInfo.outtime_num];
            if (this._pkg_id == PackgName.enshi_yipierlai || this._pkg_id == PackgName.enshi_bapisilai) {
                arrStr = ["自摸次数", "接炮次数", "点炮次数", "暗杠次数", "明杠次数"];
                //次数
                arrcount = [yipierlaiGameRecord.zimo[i], yipierlaiGameRecord.jiepao[i], yipierlaiGameRecord.dianpao[i], yipierlaiGameRecord.angang[i], yipierlaiGameRecord.minggang[i]];
            } else if (this._pkg_id == PackgName.enshi_yingmajiang) {
                var arrStr = ["坐庄次数", "胡牌次数", "点炮次数", "超时次数"];
                var arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.Ex1, recoreInfo.outtime_num];
            }
            if (player && player.uid != -1 && player.uid != 0) {
                addX = 39 + (i * 302);
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var isWin = false;
                if (max_score > 0 && recoreInfo.totalscore == max_score) {
                    isWin = true;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, isWin, _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }

            if (recoreInfo.totalscore != 0) {
                has_result = true;
            }

        }

        bigResult.refresh(PlayerNumber);
        if (has_result) {
            if ((MJModel.mj_roomType == 0 && PlayerNumber != 4) || (MJModel.mj_roomType == 1 && PlayerNumber != 3) || (MJModel.mj_roomType == 2 && PlayerNumber != 2)) {
                ERROR(this, "pId:" + pkgId + "type:" + MJModel.mj_roomType + "num:" + PlayerNumber + "d:" + data);
            }
        }
        this.release();
    },

    handlerAutoUpTableReady: function (nums, selfIsReady) {
        if (MJModel.seatid == -1 && nums < 4) {
            this.actionCallBack("uptable");
        }
        else if (selfIsReady == false) {
            if (MJModel.canQuxiaoZhun()) {
                if (MJModel.roomState != 0) this.actionCallBack("ready");
            }
        }
    },

    handler_server_operate_notify_bc: function (data, canDelay) {
        this.room_Info.showTime(MJModel.oprateTime);
        this.room_Info.showDirectionTip(-1);

        var ackOpNotify = parsePacket("proto.game.AckOpNotify", data);
        var seatid = ackOpNotify.ChairID;
        var optype = ackOpNotify.OpType;
        var card = ackOpNotify.Card;

        MJModel.cur_seat = -1;

        if (MJModel.isMyPlayer(seatid)) {
            MJModel.gang_info = [];
            if (ackOpNotify.Gang.length > 0) {
                var gang_size = ackOpNotify.Gang.length;
                for (var i = 0; i < gang_size; i++) {
                    var tgInfo = Utils.clone(tagGangInfo);
                    tgInfo.curCard = ackOpNotify.Gang[i].Card;
                    tgInfo.state = ackOpNotify.Gang[i].state;
                    MJModel.gang_info.push(tgInfo);
                }
            }

            MJModel.curOperateCard = card;
            MJModel.curOperate = optype;

            this.autoHuCard();

            MJModel.cur_seat = seatid;
            if (optype > 0) {
                MJModel.canTouchCard = false;
            }
            this.check_tip_operate_card(optype, card);
            if (this.room_Action) this.room_Action.setOperator(-1);
            if (this.room_Action) this.room_Action.setOperator(optype);
        }
    },

    handler_server_scene_info_uc: function (hubei_scene, canDelay) {
        var ackGameFree = hubei_scene.gamescene;
        var sceneStatus = ackGameFree.SceneStatus;
        if (ackGameFree.SceneStatus == 4) {
            ackGameFree.SceneStatus = 0;
        }
        if (MJModel.mj_roomType == 2) {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config_2ren.json" : "RoomMJ/config/card_config2d_2ren.json");
        } else {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config.json" : "RoomMJ/config/card_config2d.json");
        }

        if (sceneStatus != 0 && sceneStatus != 4) {
            if (this._pkg_id == PackgName.enshi_yipierlai || this._pkg_id == PackgName.enshi_bapisilai) {
                var pi_lai_info = hubei_scene.pi_lai_info;
                var laizi = pi_lai_info.laizi;
                var curLaizipi1 = null;
                var curLaizipi2 = null;
                if (pi_lai_info.pizi[0]) curLaizipi1 = pi_lai_info.pizi[0];
                if (pi_lai_info.pizi[1]) curLaizipi2 = pi_lai_info.pizi[1];
                this._setLaizi(laizi, curLaizipi1, curLaizipi2);//还原赖子
            } else if (this._pkg_id == PackgName.enshi_yingmajiang) {
                var lai_zi_info = hubei_scene.lai_zi_info;
                var get_card = lai_zi_info.get_card;
                var lai_zi_card = lai_zi_info.lai_zi_card;
                this._setLaizi(lai_zi_card, get_card, -1);
                ////服务器会吧翻的牌删掉一张  客户端会一直显示在桌面上 所以需要补一张牌
                // if (MJModel.buCardNums > 0) {
                //     MJModel.buCardNums = MJModel.buCardNums - 1;
                // }
            }
        }

        if (this._pkg_id == PackgName.enshi_yipierlai || this._pkg_id == PackgName.enshi_bapisilai) {
            for (var i = 0; i < ackGameFree.RoomConfigID.length; i++) {
                if (ackGameFree.RoomConfigID[i] == ConfigType.GAME_TYPE_YouYiFanYi) {
                    this._fanPiziType = ConfigType.GAME_TYPE_YouYiFanYi;
                } else if (ackGameFree.RoomConfigID[i] == ConfigType.GAME_TYPE_ShiZhongFanYi) {
                    this._fanPiziType = ConfigType.GAME_TYPE_ShiZhongFanYi;
                } else if (ackGameFree.RoomConfigID[i] == ConfigType.GAME_Difen_Type1) {
                    this._difenType = ConfigType.GAME_Difen_Type1;
                } else if (ackGameFree.RoomConfigID[i] == ConfigType.GAME_Difen_Type2) {
                    this._difenType = ConfigType.GAME_Difen_Type2;
                } else if (ackGameFree.RoomConfigID[i] == ConfigType.GAME_Difen_Type3) {
                    this._difenType = ConfigType.GAME_Difen_Type3;
                } else if (ackGameFree.RoomConfigID[i] == ConfigType.GAME_Difen_Type4) {
                    this._difenType = ConfigType.GAME_Difen_Type4;
                } else if (ackGameFree.RoomConfigID[i] == ConfigType.GAME_Fengding_80) {
                    this._fengdingType = ConfigType.GAME_Fengding_80;
                } else if (ackGameFree.RoomConfigID[i] == ConfigType.GAME_Fengding_100) {
                    this._fengdingType = ConfigType.GAME_Fengding_100;
                } else if (ackGameFree.RoomConfigID[i] == ConfigType.GAME_Fengding_120) {
                    this._fengdingType = ConfigType.GAME_Fengding_120;
                } else if (ackGameFree.RoomConfigID[i] == ConfigType.GAME_Laizi_DuoLai) {
                    this._laiziType = ConfigType.GAME_Laizi_DuoLai;
                } else if (ackGameFree.RoomConfigID[i] == ConfigType.GAME_Laizi_YiLaiDaoDi) {
                    this._laiziType = ConfigType.GAME_Laizi_YiLaiDaoDi;
                } else if (ackGameFree.RoomConfigID[i] == ConfigType.GAME_Config_JinZhiYangPi) {
                    this._isJinZhiYangPi = true;
                }
            }

        } else if (this._pkg_id == PackgName.enshi_yingmajiang) {
            for (var i = 0; i < ackGameFree.RoomConfigID.length; i++) {
                if (ackGameFree.RoomConfigID[i] == YingMJConfigType.GAME_Difen_1) {
                    this._difenType = YingMJConfigType.GAME_Difen_1;
                } else if (ackGameFree.RoomConfigID[i] == YingMJConfigType.GAME_Difen_2) {
                    this._difenType = YingMJConfigType.GAME_Difen_2;
                } else if (ackGameFree.RoomConfigID[i] == YingMJConfigType.GAME_Difen_5) {
                    this._difenType = YingMJConfigType.GAME_Difen_5;
                }
            }
        }
        var roomConfigID = ackGameFree.RoomConfigID;

        if (roomConfigID.indexOf(1311001) != -1) {
            this._isPiaoConfig = true;
        }

        this._setGameType(roomConfigID);
        this._setGameScore();
        this._super(ackGameFree, canDelay);

        if (this._isPiaoConfig) {
            //恢复各个玩家的票数
            var ispiaoing = false;
            if (sceneStatus == 4) {
                ispiaoing = true;
            }
            var is_operate_piao = hubei_scene.is_operate_piao;
            var notify_piao = hubei_scene.notify_piao;
            var is_piao = hubei_scene.is_piao;
            if (ispiaoing) {
                this.resetGame(true);
                if (this.room_Action.getChildByName("yaoqing")) {
                    this.room_Action.getChildByName("yaoqing").setVisible(false);
                }
                for (var i = 0; i < is_operate_piao.length; i++) {
                    var is_operate = is_operate_piao[i];
                    var pos = MJModel.getPosBySeatid(i);
                    if (is_operate) {
                        this._setPiaoNum(is_piao[i], pos, true);
                    } else {
                        if (i == MJModel.seatid && notify_piao[i] == 1) {
                            this._showPiaoLayer();
                        }
                    }
                }
            } else {
                if (is_piao) {
                    for (var i = 0; i < is_piao.length; i++) {
                        var pos = MJModel.getPosBySeatid(i);
                        if (is_piao[i] != -1 && is_operate_piao[i] == 1) {
                            this._setPiaoNum(is_piao[i], pos, false);
                        }
                    }
                }
            }
        }

        if (sceneStatus != 0 && sceneStatus != 4) {
            //恢复各个玩家的票数
            var ispiaoing = false;
            if (sceneStatus == 4) {
                ispiaoing = true;
            }
            var is_operate_piao = hubei_scene.is_operate_piao;
            var notify_piao = hubei_scene.notify_piao;
            var is_piao = hubei_scene.is_piao;
            if (ispiaoing) {
                this.resetGame(true);
                if (this.room_Action.getChildByName("yaoqing")) {
                    this.room_Action.getChildByName("yaoqing").setVisible(false);
                }
                for (var i = 0; i < is_operate_piao.length; i++) {
                    var is_operate = is_operate_piao[i];
                    var pos = MJModel.getPosBySeatid(i);
                    if (is_operate) {
                        this._setPiaoNum(is_piao[i], pos, true);
                    } else {
                        if (i == MJModel.seatid && notify_piao[i] == 1) {
                            this._showPiaoLayer();
                        }
                    }
                }
                return;
            } else {
                if (this._isPiaoConfig && is_piao) {
                    for (var i = 0; i < is_piao.length; i++) {
                        var pos = MJModel.getPosBySeatid(i);
                        if (is_piao[i] != -1 && is_operate_piao[i] == 1) {
                            this._setPiaoNum(is_piao[i], pos, false);
                        }
                    }
                }
            }

            if (this._pkg_id == PackgName.enshi_yipierlai || this._pkg_id == PackgName.enshi_bapisilai) {
                var gang_order = hubei_scene.gang_order;
                if (gang_order) {
                    for (var i = 0; i < gang_order.length; i++) {
                        var pos = MJModel.getPosBySeatid(i);
                        var gang_card = gang_order[i].gang_card;
                        for (var j = 0; j < gang_card.length; j++) {
                            this._addGangCard(pos, gang_card[j]);
                        }
                    }
                }

                //恢复抬杠标志
                if (hubei_scene.is_tai_gang) {
                    var pos = MJModel.getPosBySeatid(MJModel.banker_seatid);
                    this._show_OpType_tip(pos, "taigang");
                }
                //恢复倍数
                if (hubei_scene.multiple) {
                    for (var i = 0; i < hubei_scene.multiple.length; i++) {
                        var score = hubei_scene.multiple[i];
                        var pos = MJModel.getPosBySeatid(i);
                        this._setBeiShu(score, pos);
                    }
                }
            }
        }

    },

    handler_server_game_end_bc: function (hubeiGameend, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            var ackGameEnd = null;
            if (this._pkg_id == PackgName.enshi_yipierlai || this._pkg_id == PackgName.enshi_bapisilai) {
                ackGameEnd = hubeiGameend.gameend;
            } else if (this._pkg_id == PackgName.enshi_yingmajiang) {
                ackGameEnd = hubeiGameend;
            }
            var self = this;
            this.room_Card.setAutoOutCard(false);
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);
            this.room_Info.stopTime();
            this.room_Tip.hideOutCardTip();

            var show_all_handcard = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var show_liuju = cc.callFunc(function () {
                if (state == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
                else {
                }
            });

            var show_end_score = cc.callFunc(function () {
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var update_all_money = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var game_end_reset = cc.callFunc(function () {
                self.room_Action.setReady2Visible(false);
                self.gameend_showGameEndDetail(hubeiGameend);
            });

            var show_all_public_card = cc.callFunc(function () {
                if (self._pkg_id == PackgName.enshi_yipierlai || self._pkg_id == PackgName.enshi_bapisilai) {
                    self.gameend_showAllPublicCard(hubeiGameend);
                }
            });

            if (MJModel.isOnVideo && canDelay == false) {
                this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(2), update_all_money));
                return;
            }

            this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(1), show_liuju, show_end_score, update_all_money, cc.delayTime(1), game_end_reset));

        } catch (e) {
            ERROR(this, e);
        }
    },

    gameend_showAllPublicCard: function (ackGameEnd) {
        var carInfo = ackGameEnd.remain_card;
        var bupaiNum = ackGameEnd.refill_card_num;
        var huSeatId = ackGameEnd.last_hu;
        var last_seatid = -1;
        if (huSeatId == 255) return; //流局

        if (carInfo) {

            var publickNum = 0;
            for (var i = 0; i < carInfo.length; i++) {
                var pos = MJModel.getPosBySeatid(carInfo[i].seat_id);
                if (pos != -1 && pos != 255) {
                    publickNum += carInfo[i].PoolCard.length;
                }
            }
            var PlayerNum = 4;
            if (MJModel.mj_roomType == 1) PlayerNum = 3;
            last_seatid = huSeatId + parseInt(publickNum % PlayerNum);
            if (last_seatid >= PlayerNum) {
                last_seatid -= PlayerNum;
            }

            if (parseInt(bupaiNum % 2) == 0) {
                last_seatid = this.getPreSeat(last_seatid);
            }

            for (var i = 0; i < carInfo.length; i++) {
                var pos = MJModel.getPosBySeatid(carInfo[i].seat_id);
                if (pos != -1 && pos != 255) {
                    for (var j = 0; j < carInfo[i].PoolCard.length; j++) {
                        var card = carInfo[i].PoolCard[j];
                        var cardsp = this.room_Card.addOutCard(pos, card, false);
                        if (carInfo[i].seat_id == last_seatid && j == carInfo[i].PoolCard.length - 1) {
                            cardsp.setStoreColor(cc.color(234, 147, 147));
                        } else {
                            cardsp.setStoreColor(cc.color(198, 232, 229));
                        }

                        var dx = 0;
                        var dy = 0;
                        if (pos == 0) {
                            dy = -30;
                        }
                        if (pos == 2) {
                            dy = 30;
                        }
                        if (pos == 1) {
                            dx = 30;
                        }
                        if (pos == 3) {
                            dx = -30;
                        }
                        // var end_pos = cardsp.getPosition();
                        // var begin_pos = cc.p(end_pos.x + dx, end_pos.y + dy);
                        // cardsp.setPosition(begin_pos);
                        // cardsp.runAction(cc.sequence(cc.delayTime(1), cc.moveTo(0.25, end_pos)));
                    }
                }
            }
        }
    },

    getPreSeat: function (seatid) {
        var dseatid = seatid - 1;
        var pn = 4;
        if (MJModel.mj_roomType == 2) pn = 2;
        if (MJModel.mj_roomType == 1) pn = 3;
        if (dseatid < 0) {
            dseatid = pn - 1;
        }
        return dseatid;
    },

    timeEnd: function (dt) {

        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    },

    check_tip_operate_card: function (operat, value) {
        try {
            if ((operat & ActionType.TYPE_PENG) == ActionType.TYPE_PENG || (operat & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
                for (var i = 0; i < this.room_Card.hand_card[0].length; i++) {
                    var card = this.room_Card.hand_card[0][i];
                    if (card.value == value) {
                        card.setChoiceTipShow(true);
                    }
                }
                return;
            }

            if ((operat & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (operat & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG || (operat & LaiZiGangType.TYPE_LAIZI_GANG) == LaiZiGangType.TYPE_LAIZI_GANG || (operat & LaiZiGangType.TYPE_PIZI_GANG) == LaiZiGangType.TYPE_PIZI_GANG) {
                for (var j = 0; j < MJModel.gang_info.length; j++) {
                    for (var i = 0; i < this.room_Card.hand_card[0].length; i++) {
                        var card = this.room_Card.hand_card[0][i];
                        if (card.value == MJModel.gang_info[j].curCard) {
                            card.setChoiceTipShow(true);
                        }
                    }
                }
                return;
            }

            for (var i = 0; i < this.room_Card.hand_card[0].length; i++) {
                var card = this.room_Card.hand_card[0][i];
                card.setChoiceTipShow(false);
            }
        } catch (e) {
            Log(this, e);
        }
    },

    _addGangCard: function (pos, value) {
        this.room_Card.addHuCard(pos, value);
    },

    handler_server_player_timeout_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.AckUserOvertimeState", data);
        var seatid = jpacket.chairid;
        var state = jpacket.state;

        if (state == 1) {
            var pos = MJModel.getPosBySeatid(seatid);
            if (this.players[pos]) this.players[pos].setTimeOut(true);
        }
        else if (state == 2 && (!MJModel.isMyPlayer(seatid))) {
            this.room_Tip.showTextTip("等待玩家操作");
        }
    },

    handler_server_peng_kang_bc: function (data, canDelay) {
        this.room_Tip.showTextTip("");
        this.check_tip_operate_card(0, 0);
        var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);
        this.unschedule(this.autoOutCardTimeOut);
        this.unschedule(this.autoHuCardTimeOut);

        var seatid = ackBcOpResult.ChairID;
        var out_seatid = ackBcOpResult.OutCardChairID;
        var OpType = ackBcOpResult.OpType;
        var OpType2 = ackBcOpResult.OpType2;
        var card = ackBcOpResult.Card;

        var scores = ackBcOpResult.Score;
        this.handler_gang_scores(scores, OpType, OpType2, canDelay);

        if (MJModel.isMyPlayer(seatid)) {
            if (this.room_Action) this.room_Action.setOperator(-1);
        }

        if (this.room_Action_video) this.room_Action_video.reset();

        var pos = MJModel.getPosBySeatid(seatid);
        var out_pos = MJModel.getPosBySeatid(out_seatid);

        this.players[pos].setTimeOut(false);
        this.players[pos].setOffline(false);

        if ((OpType & ActionType.TYPE_PASS) != ActionType.TYPE_PASS && ((OpType & LaiZiGangType.TYPE_LAIZI_GANG) == LaiZiGangType.TYPE_LAIZI_GANG || (OpType & LaiZiGangType.TYPE_PIZI_GANG) == LaiZiGangType.TYPE_PIZI_GANG || (OpType & LaiZiGangType.TYPE_PIZI_GANG2) == LaiZiGangType.TYPE_PIZI_GANG2)) {
            if (canDelay == false) {
                this.room_Card.removeHandCard(pos, card);
                this._addGangCard(pos, card);
                return;
            }
            this.room_Card.removeHandCard(pos, card);
            this._addGangCard(pos, card);

            if (MJModel.isMyPos(pos)) {
                MJModel.isEnterWait = true;
                var move_end = cc.callFunc(function () {
                    MJModel.isEnterWait = false;
                });
                this.runAction(cc.sequence(cc.delayTime(0.5), move_end));
            }

            if (MJModel.isMyPlayer(seatid)) {
                this.myselfCloseOutCard();
            }

            var player = MJModel.players[seatid];
            if (player && canDelay) {
                this.handler_op_sound(pos, player.sex, OpType, OpType2, "gang");
                this.handler_op_effect(pos, out_pos, player.sex, OpType, OpType2);
            }
            return;
        } else if ((OpType & ActionType.TYPE_PASS) != ActionType.TYPE_PASS && (OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
            this.room_Tip.showTextTip("");
            this.room_Info.showDirectionTip(-1);
            this.room_Info.stopTime();
            MJModel.canTouchCard = false;
            if (ackBcOpResult.IsQiangganghu == 1 || (OpType2 && OpType2 == 5)) {
                this.room_Card.changeWanGang(out_pos, PengType.Peng_Peng, card);
                if (this.room_Card.isDuoPai(out_pos))this.room_Card.removeHandCard(out_pos, card, 1);//多删除一次手牌 防止出错 理乱上抢杠的时候 他的手牌上已经没有这个牌 所以多删除一次也没有bug
                //避免双抢杠的时候 会出两次牌
                if (this.room_Card.out_card[out_pos].length == 0 || this.room_Card.out_card[out_pos][this.room_Card.out_card[out_pos].length - 1].value != card) {
                    this.room_Card.addOutCard(out_pos, card);
                }
            }

            var hueffect = "hu";
            var husound = "hu";
            var zimo = this.room_Card.isDuoPai(pos);
            if (zimo == 1) {
                hueffect = "zimo";
                husound = "zimo";
            } else {
                this._show_hu_tip(out_pos, "dianpao");
            }
            this._show_hu_tip(pos, husound);

            if (OpType2 == HuType.HU_GANG_SHANG_HUA) {
                hueffect = "gangshanghua";
            } else if (OpType2 == HuType.HU_GANG_HOU_PAO) {
                hueffect = "gangshangpao";
            }
            var isdaxiaoxue = false;
            if (zimo == 1) {
                var fz_hu_type = ackBcOpResult.fz_hu_type;
                var effect = "";
                if (fz_hu_type == ES_ActionType.HU_RUAN_DA_XUE) {
                    effect = "ruandaxue";
                    isdaxiaoxue = true;
                } else if (fz_hu_type == ES_ActionType.HU_RUAN_XIAO_XUE) {
                    effect = "ruanxiaoxue";
                    isdaxiaoxue = true;
                } else if (fz_hu_type == ES_ActionType.HU_YING_DA_XUE) {
                    effect = "yingdaxue";
                    isdaxiaoxue = true;
                } else if (fz_hu_type == ES_ActionType.HU_YING_XIAO_XUE) {
                    effect = "yingxiaoxue";
                    isdaxiaoxue = true;
                }
                var self = this;
                var callback = cc.CallFunc(function () {
                    if (effect && canDelay) {
                        // Sound.getInstance().playEffect(getResPath("RoomMJ/sound/give.mp3"));
                        self._show_daxiaoxue_effect_new(pos, effect);
                    }
                });
                self.runAction(cc.Sequence(cc.DelayTime(0.5), callback));
            }

            var player = MJModel.players[seatid];
            if (player && canDelay) {
                this.handler_op_sound(pos, player.sex, OpType, OpType2, husound);
                this._show_hu_effect_new(pos, hueffect, isdaxiaoxue);
            }

            MJModel.isEnterWait = true;
            var move_end = cc.callFunc(function () {
                MJModel.isEnterWait = false;
            });
            this.runAction(cc.sequence(cc.delayTime(2), move_end));


            return;
        }

        this._super(data, canDelay);
    },

    handler_op_sound: function (pos, sex, OpType, OpType2, effect) {
        var index = 1;
        if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
            if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                effect = "gang";
                index = Utils.Random(1, 3);
            }
            else if ((OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
                effect = "gang";
                index = Utils.Random(1, 3);
            }
            else if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
                effect = "gang";
                index = Utils.Random(1, 3);
            }
            else if ((OpType & LaiZiGangType.TYPE_LAIZI_GANG) == LaiZiGangType.TYPE_LAIZI_GANG) {
                effect = "laizigang";
                index = Utils.Random(1, 3);
            }
            else if ((OpType & LaiZiGangType.TYPE_PIZI_GANG) == LaiZiGangType.TYPE_PIZI_GANG) {
                effect = "pizigang";
                index = Utils.Random(1, 4);
            }
            else if ((OpType & LaiZiGangType.TYPE_PIZI_GANG2) == LaiZiGangType.TYPE_PIZI_GANG2) {
                effect = "pizigang";
                index = Utils.Random(1, 4);
            }
            else if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                var zimo = this.room_Card.isDuoPai(pos);
                effect = "hu";
                index = Utils.Random(1, 2);
                if (zimo) {
                    effect = "zimo";
                    index = Utils.Random(1, 3);
                }
            } else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                effect = "peng";
                index = Utils.Random(1, 6);
            } else if (effect == "chi") {
                index = Utils.Random(1, 5);
            }
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("enshi/sound/operator/%1/%2_%3.mp3"), sex == SEX_ID.SEX_FEMALE ? "woman" : "man", effect, index));
        } else {
            this._super(pos, sex, OpType, OpType2, effect);
        }
    },

    handler_out_card_sound: function (sex, card) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
            var index = Utils.Random(1, 3);
            var card16 = Utils.toHex2(card);
            var color = Math.floor(card16 / 10);
            var value = Math.abs(card16 % 10);
            var colorname = "wan";
            if (color == 1) {
                colorname = "tiao";
            } else if (color == 2) {
                colorname = "tong";
            }

            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("enshi/sound/chupai/%1/%2%3_%4.mp3"), sex == SEX_ID.SEX_FEMALE ? "woman" : "man", colorname, value, index));
        } else {
            this._super(sex, card);
        }
    },

    _hide_all_tip: function () {
        for (var i = 0; i < this._all_OpType_tip.length; i++) {
            if (this._all_OpType_tip[i]) this._all_OpType_tip[i].setVisible(false);
        }
        for (var i = 0; i < this._all_hu_tip.length; i++) {
            if (this._all_hu_tip[i]) this._all_hu_tip[i].setVisible(false);
        }
    },

    _show_hu_tip: function (pos, name) {
        if (pos == -1) return;
        var tip_sp = this._all_hu_tip[pos];
        if (tip_sp == null) {
            tip_sp = new ccui.ImageView();
            this._all_hu_tip[pos] = tip_sp;
            this.addChild(tip_sp, 50);
        }
        if (tip_sp) {
            var tip_sp_name = "";
            if (name == "zimo") {
                tip_sp_name = "enshi/action/tip_zimo.png";
            } else if (name == "hu") {
                tip_sp_name = "enshi/action/tip_paohu.png";
            } else if (name == "dianpao") {
                tip_sp_name = "enshi/action/tip_dianpao.png";
            }
            if (tip_sp_name != "") {
                tip_sp.loadTexture(getResPath(tip_sp_name));
                tip_sp.setVisible(true);
                var begin = MJConfig.getPlayerPos(pos);
                // tip_sp.setScale(0.35);
                if (pos == 0) {
                    begin.y -= 50;
                    begin.x += 50;
                } else if (pos == 1) {
                    begin.y -= 50;
                    begin.x -= 50;
                } else if (pos == 2) {
                    begin.y -= 50;
                    begin.x -= 50;
                } else {
                    begin.y -= 50;
                    begin.x += 50;
                }
                tip_sp.setPosition(begin);
            }
        }
    },


    _show_OpType_tip: function (pos, name) {
        if (pos == -1) return;
        var tip_sp = this._all_OpType_tip[pos];
        if (tip_sp == null) {
            tip_sp = new ccui.ImageView();
            this._all_OpType_tip[pos] = tip_sp;
            this.addChild(tip_sp, 50);
        }
        if (tip_sp) {
            var tip_sp_name = "";
            if (name == "taigang") {
                tip_sp_name = "enshi/action/taigang1.png";
            }
            if (tip_sp_name != "") {
                tip_sp.loadTexture(getResPath(tip_sp_name));
                tip_sp.setVisible(true);
                var begin = MJConfig.getPlayerPos(pos);
                tip_sp.setScale(0.35);
                if (pos == 0) {
                    begin.y += 60;
                    begin.x += 12;
                } else if (pos == 1) {
                    begin.y += 60;
                    begin.x -= 20;
                } else if (pos == 2) {
                    begin.y -= 50;
                    begin.x += 70;
                } else {
                    begin.y += 60;
                    begin.x += 12;
                }
                tip_sp.setPosition(begin);
            }
        }
    },

    _show_taigang_effect: function (pos, name) {
        var name = "";
        var effect_name = "";
        if (name == "taigang") {
            name = "effectsesmj_qqr18";
            effect_name = "effectsesmj_qqr";
            ccs.armatureDataManager.addArmatureFileInfo(getResPath("enshi/newui/effect/paixing/effectsesmj_qqr.ExportJson"));
        }
        try {
            if (effect_name != "") {
                var armature = new ccs.Armature(effect_name);
                if (armature != null) {
                    animation = armature.getAnimation();
                    if (animation) {
                        if (typeof animation.playWithIndex === "function") {
                            // animation.playWithIndex(0);
                            animation.play(name);

                            var begin = MJConfig.getOperatorTipPos(pos);
                            armature.setPosition(begin);
                            // armature.setName("hu_effect");
                            this.room_Tip.addChild(armature, 10000);
                        }
                    }
                    armature.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
                }
            }
        } catch (e) {

        }
    },

    _show_daxiaoxue_effect_new: function (pos, name) {
        var hu_name = "";
        var effect_name = "";
        if (name == "ruandaxue") {
            hu_name = "effectsesmj_rxb1";
            effect_name = "effectsesmj_rxb";
            ccs.armatureDataManager.addArmatureFileInfo(getResPath("enshi/newui/effect/paixing3/effectsesmj_rxb.ExportJson"));
        } else if (name == "ruanxiaoxue") {
            hu_name = "effectsesmj_rxb2";
            effect_name = "effectsesmj_rxb";
            ccs.armatureDataManager.addArmatureFileInfo(getResPath("enshi/newui/effect/paixing3/effectsesmj_rxb.ExportJson"));
        } else if (name == "yingdaxue") {
            hu_name = "effectsesmj_rxb3";
            effect_name = "effectsesmj_rxb";
            ccs.armatureDataManager.addArmatureFileInfo(getResPath("enshi/newui/effect/paixing3/effectsesmj_rxb.ExportJson"));
        } else if (name == "yingxiaoxue") {
            hu_name = "effectsesmj_yxb22";
            effect_name = "effectsesmj_yxb";
            ccs.armatureDataManager.addArmatureFileInfo(getResPath("enshi/newui/effect/paixing2/effectsesmj_yxb.ExportJson"));
        }
        try {
            if (effect_name != "") {
                var armature = new ccs.Armature(effect_name);
                if (armature != null && hu_name != "") {
                    var animation = armature.getAnimation();
                    if (animation) {
                        if (typeof animation.playWithIndex === "function") {
                            // animation.playWithIndex(0, -1, 0);
                            animation.play(hu_name, 1, false);
                            var begin = MJConfig.getOperatorTipPos(pos);
                            if (pos == 0) {
                                begin.x += 120;
                            } else if (pos == 1) {
                                begin.y -= 70;
                            } else if (pos == 2) {
                                begin.x += 120;
                            } else if (pos == 3) {
                                begin.y -= 70;
                            }
                            armature.setPosition(begin);
                            armature.setName("hu_effect");
                            this.room_Tip.addChild(armature, 10000);
                        }
                    }
                    //armature.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
                    armature.stopAllActions();
                    var callback = cc.callFunc(function () {
                        armature.getAnimation().gotoAndPause(30);
                    });
                    armature.runAction(cc.sequence(cc.delayTime(0.4), callback));
                }
            }
        } catch (e) {

        }
    },

    _show_hu_effect_new: function (pos, name, isdaxuaxue) {
        if (isdaxuaxue == undefined) isdaxuaxue = false;
        var effect_name = "";
        var hu_name = "";
        if (name == "zimo") {
            hu_name = "effectsesmj_zimo";
            effect_name = "effectsesmj_chi";
            ccs.armatureDataManager.addArmatureFileInfo(getResPath("enshi/newui/effect/chipenggang/effectsesmj_chi.ExportJson"));
        } else if (name == "hu") {
            hu_name = "effectsesmj_hu";
            effect_name = "effectsesmj_chi";
            ccs.armatureDataManager.addArmatureFileInfo(getResPath("enshi/newui/effect/chipenggang/effectsesmj_chi.ExportJson"));
        } else if (name == "gangshanghua") {
            hu_name = "effectsesmj_qqr19";
            effect_name = "effectsesmj_qqr";
            ccs.armatureDataManager.addArmatureFileInfo(getResPath("enshi/newui/effect/paixing/effectsesmj_qqr.ExportJson"));
        } else if (name == "gangshangpao") {
            hu_name = "effectsesmj_qqr4";
            effect_name = "effectsesmj_qqr";
            ccs.armatureDataManager.addArmatureFileInfo(getResPath("enshi/newui/effect/paixing/effectsesmj_qqr.ExportJson"));
        }
        try {
            if (effect_name != "") {
                var armature = new ccs.Armature(effect_name);
                if (armature != null && hu_name != "") {
                    var animation = armature.getAnimation();
                    if (animation) {
                        if (typeof animation.playWithIndex === "function") {
                            animation.play(hu_name, 1, false);
                            // animation.playWithIndex(0);
                            var begin = MJConfig.getOperatorTipPos(pos);
                            if (isdaxuaxue) {
                                if (pos == 0) {
                                    begin.x -= 120;
                                } else if (pos == 1) {
                                    begin.y += 70;
                                } else if (pos == 2) {
                                    begin.x -= 120;
                                } else if (pos == 3) {
                                    begin.y += 70;
                                }
                            }
                            armature.setPosition(begin);
                            armature.setName("hu_effect");
                            this.room_Tip.addChild(armature, 10000);
                        }
                    }
                    // armature.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
                    armature.stopAllActions();
                    var callback = cc.callFunc(function () {
                        armature.getAnimation().gotoAndPause(30);
                    });
                    armature.runAction(cc.sequence(cc.delayTime(0.4), callback));
                }
            }
        } catch (e) {

        }
    },

    _setLaizi: function (laizi, laizipi, laizipi2, gamestart) {
        if (laizi == -1 || laizi == 255) {
            if (this._curLaizi_bg) this._curLaizi_bg.setVisible(false);
            return;
        }
        if (gamestart == undefined) gamestart = false;

        var size = cc.director.getWinSize();

        if (true) {
            if (this._curLaizi_bg == null) {
                this._curLaizi_bg = new cc.Scale9Sprite(getResPath("enshi/flag/laizi_bg.png"));
                this._curLaizi_bg.setContentSize(cc.size(88, 64));
                this._curLaizi_bg.setAnchorPoint(cc.p(0.5, 1));
                this._curLaizi_bg.setPosition(cc.p(size.width - 260, size.height - 25));
                if (MJModel.mj_bg_use == 1) {
                    this._curLaizi_bg.setPosition(cc.p(160, size.height - 4));
                }
                this.addChild(this._curLaizi_bg, 200);
            }

            this._curLaizi_bg.removeAllChildren();
            this._curLaizi_bg.setVisible(true);
            this._curLaizi = laizi;
            this._curLaizipi = laizipi;
            var beginx = 28;
            var dx = 32;
            if (laizipi2 && laizipi2 != -1 && laizipi2 != 255) {
                this._curLaizipi2 = laizipi2;
                this._curLaizi_bg.setContentSize(cc.size(120, 64));
            }

            if (this._curLaizipi2 > 0) {
                var card = new MJCard();
                card.setValue(this._curLaizipi2, 0, CardType.Card_End, 0);//CardType.Card_Out
                card.setPosition(cc.p(beginx, this._curLaizi_bg.getContentSize().height / 2));
                card.setScale(0.35);//0.9
                this._curLaizi_bg.addChild(card);
                this.room_Card.other_card.push(card);
                beginx += dx;
            }

            if (this._curLaizipi > 0) {
                var card = new MJCard();
                card.setValue(this._curLaizipi, 0, CardType.Card_End, 0);//CardType.Card_Out
                card.setPosition(cc.p(beginx, this._curLaizi_bg.getContentSize().height / 2));
                card.setScale(0.35);//0.9
                this._curLaizi_bg.addChild(card);
                this.room_Card.other_card.push(card);
                beginx += dx;
            }

            if (this._curLaizi > 0) {
                var card = new MJCard();
                card.setValue(laizi, 0, CardType.Card_End, 0);//CardType.Card_Out
                card.setPosition(cc.p(beginx, this._curLaizi_bg.getContentSize().height / 2));
                card.setScale(0.35);//0.9
                card.setStoreColor(cc.color(255, 249, 137));
                this._curLaizi_bg.addChild(card);
                this.room_Card.other_card.push(card);
                if (gamestart) {
                    var endPos = card.getPosition();
                    var scale = card.getScale();
                    var dl = 0;
                    card.setVisible(false);
                    var self = this;
                    var callFunc = cc.CallFunc(function () {
                        Sound.getInstance().playEffect(__String.createWithFormat(getResPath("enshi/laizi.mp3")));
                    });

                    var p = MJConfig.getInfoPos();
                    card.setPosition(cc.p(p.x - this._curLaizi_bg.getPositionX() + this._curLaizi_bg.getContentSize().width / 2, p.y - this._curLaizi_bg.getPositionY() + this._curLaizi_bg.getContentSize().height / 2));
                    card.runAction(cc.sequence(cc.delayTime(0 + dl), cc.show(), callFunc, cc.scaleTo(0.2, 1.5), cc.delayTime(1), cc.spawn(cc.moveTo(0.17, endPos), cc.scaleTo(0.17, scale))));//2
                }
            }
        }
    },

    _handler_server_laizi_bc: function (data, canDelay) {
        var packet = null;
        var curLaizi = -1;
        var curLaizipi1 = -1;
        var curLaizipi2 = -1;
        if (this._pkg_id == PackgName.enshi_yipierlai || this._pkg_id == PackgName.enshi_bapisilai) {
            packet = parsePacket("proto.game.enshimj.AckYpelLaiziPizi", data);
            var curLaizi = packet.laizi;
            var pizi = packet.pizi;
            if (pizi[0]) curLaizipi1 = pizi[0];
            if (pizi[1]) curLaizipi2 = pizi[1];
        } else if (this._pkg_id == PackgName.enshi_yingmajiang) {
            packet = parsePacket("proto.game.enshimj.AckYmjLaizi", data);
            curLaizi = packet.lai_zi_card;
            var get_card = packet.get_card;
            curLaizipi1 = get_card;
        }

        if (canDelay == false) {
            this._setLaizi(curLaizi, curLaizipi1, curLaizipi2, canDelay ? true : false);
            this._showHandcardFlag(false);
            this.room_Card.reflashHandCard(0, true);
            this.room_Card.reflashHandCard(1, true);
            this.room_Card.reflashHandCard(2, true);
            this.room_Card.reflashHandCard(3, true);
            this._set_banker_mo_last_card();
            return;
        }

        var self = this;
        MJModel.isEnterWait = true;
        var show_effect = cc.callFunc(function () {
            self._setLaizi(curLaizi, curLaizipi1, curLaizipi2, canDelay ? true : false);
        });
        var move_end = cc.callFunc(function () {
            self._showHandcardFlag(false);
            var allPreCars = [];
            var allLaiZi = [];
            if (self._pkg_id == PackgName.enshi_yipierlai || self._pkg_id == PackgName.enshi_bapisilai) {
                for (var i = self.room_Card.hand_card[0].length - 1; i >= 0; i--) {
                    var card = self.room_Card.hand_card[0][i];
                    if (card.value == curLaizi || card.value == curLaizipi1 || (curLaizipi2 != null && card.value == curLaizipi2)) {
                        allLaiZi.push(card);
                    } else {
                        if (allLaiZi.length > 0) {
                            break;
                        }
                        allPreCars.push(card);
                    }
                }
            } else if (self._pkg_id == PackgName.enshi_yingmajiang) {
                for (var i = self.room_Card.hand_card[0].length - 1; i >= 0; i--) {
                    var card = self.room_Card.hand_card[0][i];
                    if (card.value == curLaizi) {
                        allLaiZi.push(card);
                    } else {
                        if (allLaiZi.length > 0) {
                            break;
                        }
                        allPreCars.push(card);
                    }
                }
            }

            if (allLaiZi.length > 0 && allPreCars.length > 0) {
                var allDelay = 0;
                for (var i = 0; i < allLaiZi.length; i++) {
                    var card = allLaiZi[i];
                    var begin_pos = card.getPosition();
                    var end_pos = MJConfig.getHandCardPos(0, self.room_Card.hand_card[0].length - i - 1, self.room_Card.hand_card[0].length, self.room_Card.isDuoPai(0));
                    var allL = Math.abs(end_pos.x - begin_pos.x);
                    var time = allL / 1000;
                    if (time < 0.17) time = 0.17;
                    if (time > 0.3) time = 0.3;
                    card.runAction(cc.sequence(cc.spawn(cc.rotateTo(0.1, 15), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + 100))), cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y + 100)).easing(cc.easeSineOut()), cc.spawn(cc.rotateTo(0.1, 0), cc.moveTo(0.17, end_pos))));
                    allDelay += 1;
                }
                for (var i = 0; i < allPreCars.length; i++) {
                    var card = allPreCars[i];
                    card.runAction(cc.moveBy(0.3, cc.p(83 * allLaiZi.length, 0)));
                }

                var callback = cc.callFunc(function () {
                    MJModel.isEnterWait = false;
                    self.room_Card.reflashHandCard(0, true);
                    self.room_Card.reflashHandCard(1, true);
                    self.room_Card.reflashHandCard(2, true);
                    self.room_Card.reflashHandCard(3, true);
                    self._set_banker_mo_last_card();
                });

                self.runAction(cc.sequence(cc.delayTime(0.5), callback));
            } else {
                MJModel.isEnterWait = false;
                self._set_banker_mo_last_card();
            }
        });
        this.runAction(cc.sequence(cc.delayTime(0.3), show_effect, cc.delayTime(1.3), move_end));

    },

    _set_banker_mo_last_card: function () {
        var bankerPos = MJModel.getPosBySeatid(MJModel.banker_seatid);
        if (bankerPos == 0 && this.room_Card.isDuoPai(bankerPos)) {
            var length = this.room_Card.hand_card[0].length;
            var card = this.room_Card.hand_card[0][0];
            if (card.getValue() != undefined) {
                this.room_Card.removeHandCard(0, card.getValue(), 1);
                this.room_Card.reflashHandCard(0, true);
                this.room_Card.initMoCard(0, card.getValue(), true);
            }
        }
    },

    fastChat3: [
        "快点撒，摸蛆啊",
        "拐哒，会搅宁哒哟",
        "不催，我省哈张哆",
        "等一哈，我接个电话",
        "张字莫捞很打嘞",
        "还是让我下盘该撒",
        "耶嘿，嘞个火气不得鸟嘞",
        "砍脑壳滴，又是同下胡",
        "天哟，又是同盖盖胡",
        "勒个背时网，我也够肉哒",
        "莫闹莫闹，闹黄昏哒",
    ],
    _setFastChat: function () {
        var chatList = [];
        chatList = this.fastChat3;
        MJModel.mj_fastChat = this.fastChat3;
        var self = this;
        Utils.getFastChatSound = function (chat, sex) {
            for (var i = 0; i < chatList.length; i++) {
                if (chatList[i] == chat) {
                    return getResPath(__String.createWithFormat("enshi/sound/fastchat/%1_chat_%2.mp3", sex == SEX_ID.SEX_MAN ? "m" : "f", i));
                }
            }
            return "";
        };
    },

    _setGameType: function (roomConfigID) {
        var play_id = [];
        MJModel.play_id_str = [];
        if (this._pkg_id == PackgName.enshi_yipierlai || this._pkg_id == PackgName.enshi_bapisilai) {
            if (roomConfigID.indexOf(1125001) != -1) {
                play_id.push("多癞");
                MJModel.play_id_str.push("多癞");
            }
            if (roomConfigID.indexOf(1125002) != -1) {
                play_id.push("一癞到底");
                MJModel.play_id_str.push("一癞到底");
            }

            if (roomConfigID.indexOf(1126001) != -1) {
                play_id.push("抬庄");
                MJModel.play_id_str.push("抬庄");
            }
            if (roomConfigID.indexOf(1126002) != -1) {
                play_id.push("杠上炮");
                MJModel.play_id_str.push("杠上炮");
            }
            if (roomConfigID.indexOf(1126003) != -1) {
                play_id.push("打痞禁胡");
                MJModel.play_id_str.push("打痞禁胡");
            }
            if (roomConfigID.indexOf(1126004) != -1) {
                play_id.push("打癞禁胡");
                MJModel.play_id_str.push("打癞禁胡");
            }
            if (roomConfigID.indexOf(1126005) != -1) {
                play_id.push("禁止养痞");
                MJModel.play_id_str.push("禁止养痞");
            }
            if (roomConfigID.indexOf(1126006) != -1) {
                play_id.push("上下痞");
                MJModel.play_id_str.push("上下痞");
            }
            if (roomConfigID.indexOf(1126007) != -1) {
                play_id.push("八痞");
                MJModel.play_id_str.push("八痞");
            }

            if (roomConfigID.indexOf(1127001) != -1) {
                play_id.push("有一翻一");
            }
            if (roomConfigID.indexOf(1127002) != -1) {
                play_id.push("始终翻一");
            }

            if (roomConfigID.indexOf(1124001) != -1) {
                play_id.push("80倍封顶");
            }
            if (roomConfigID.indexOf(1124002) != -1) {
                play_id.push("100倍封顶");
            }
            if (roomConfigID.indexOf(1124003) != -1) {
                play_id.push("120倍封顶");
            }

            if (roomConfigID.indexOf(1311001) != -1) {
                play_id.push("可选飘");
            }
            if (roomConfigID.indexOf(1311001) != -1) {
                play_id.push("可选飘");
            }
            if (roomConfigID.indexOf(1329001) != -1) {
                play_id.push("不飘");
            }
            if (roomConfigID.indexOf(1329002) != -1) {
                play_id.push("飘2分");
            }
            if (roomConfigID.indexOf(1329003) != -1) {
                play_id.push("飘5分");
            }
            if (roomConfigID.indexOf(1329004) != -1) {
                play_id.push("飘10分");
            }
            if (roomConfigID.indexOf(1329005) != -1) {
                play_id.push("飘20分");
            }
        } else if (this._pkg_id == PackgName.enshi_yingmajiang) {
            if (roomConfigID.indexOf(1129001) != -1) {
                play_id.push("两个癞子不能动张");
            }
            if (roomConfigID.indexOf(1129002) != -1) {
                play_id.push("包冲");
            }
            if (roomConfigID.indexOf(1311001) != -1) {
                play_id.push("可选飘");
            }
            if (roomConfigID.indexOf(1329001) != -1) {
                play_id.push("不飘");
            }
            if (roomConfigID.indexOf(1329002) != -1) {
                play_id.push("飘2分");
            }
            if (roomConfigID.indexOf(1329003) != -1) {
                play_id.push("飘5分");
            }
            if (roomConfigID.indexOf(1329004) != -1) {
                play_id.push("飘10分");
            }
            if (roomConfigID.indexOf(1329005) != -1) {
                play_id.push("飘20分");
            }
        }
        if (roomConfigID.indexOf(5000001) != -1) {
            // play_id.push("防作弊");
            this._fangZuoBi = true;
        }

        if (roomConfigID.indexOf(2000003) != -1) {
            //play_id.push("可少人开局");
            MJModel.changMode = 3;
        }
        if (roomConfigID.indexOf(2000002) != -1) {
            //play_id.push("可少人开局");
            MJModel.changMode = 1;
        }

        var gameDes = "";
        for (var i = 0; i < play_id.length; i++) {
            gameDes += play_id[i];
            if (i != play_id.length - 1) {
                gameDes += " ";
            }
        }
        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);
        this.hideChatAndSoundBtn();
        this.reflashPlayUI();
        this._setFastChat();
    },

    //隐藏聊天和声音按钮
    hideChatAndSoundBtn: function () {
        cc.log("lin=hideChatAndSoundBtn=1");
        if (this._fangZuoBi && this.room_Action) {
            cc.log("lin=hideChatAndSoundBtn=2");
            this.room_Action.btns["sound"].setVisible(false);
            this.room_Action.btns["chat"].setVisible(false);
            if (this.pre_scene) {
                cc.log("lin=hideChatAndSoundBtn=3");
                this.pre_scene.btns["sound"].setVisible(false);
                this.pre_scene.btns["chat"].setVisible(false);
            }
        }
    },
    //刷新第一个进入房间的的头像和名字
    reflashPlayUI: function () {
        if (this.pre_scene) {
            this.pre_scene.handler_server_table_info_uc();
        }
    },

    _setGameScore: function () {
        this.removeChildByName("numberScore");
        if (this.mjType == null) {
            return;
        }

        var p = this.mjType.getPosition();
        p.x += this.mjType.getContentSize().width / 2;
        p.y -= this.mjType.getContentSize().height / 2;
        var buf = "" + Math.abs(MJModel.base_money);
        if (this._pkg_id == PackgName.enshi_yipierlai || this._pkg_id == PackgName.enshi_bapisilai) {
            if (this._difenType == ConfigType.GAME_Difen_Type1) buf = "0.5";
            if (this._difenType == ConfigType.GAME_Difen_Type2) buf = "1";
            if (this._difenType == ConfigType.GAME_Difen_Type3) buf = "2.5";
            if (this._difenType == ConfigType.GAME_Difen_Type4) buf = "5";
        } else if (this._pkg_id == PackgName.enshi_yingmajiang) {
            if (this._difenType == YingMJConfigType.GAME_Difen_1) buf = "1";
            if (this._difenType == YingMJConfigType.GAME_Difen_2) buf = "2";
            if (this._difenType == YingMJConfigType.GAME_Difen_5) buf = "5";
        }

        var numberScore = new cc.LabelTTF(buf + "分底", "Arial", 22);
        numberScore.setColor(cc.color(0x10, 0x35, 0x38));
        numberScore.setName("numberScore");
        numberScore.setAnchorPoint(cc.p(0.0, 0.0));
        this.addChild(numberScore);

        numberScore.setPosition(cc.p(p.x + 1, p.y - 2));
    },

    _showHandcardFlag: function () {
        if (MJModel.isOnVideo) {
            for (var j = 0; j < 4; j++) {
                var allcards = this.room_Card.hand_card[j];
                if (allcards) {
                    for (var i = 0; i < allcards.length; i++) {
                        var card = allcards[i];
                        this._checkAddCardFlag(card);
                    }
                }
            }
            return;
        }
        var allcards = this.room_Card.hand_card[0];
        if (allcards) {
            for (var i = 0; i < allcards.length; i++) {
                var card = allcards[i];
                this._checkAddCardFlag(card);
            }
        }
    },

    _checkAddCardFlag: function (card) {
        try {
            // if (card.type == CardType.Card_Peng) return;
            var needAddFlag = false;
            if (card.value == this._curLaizi) {
                needAddFlag = true;
            } else if (this._pkg_id == PackgName.enshi_yipierlai || this._pkg_id == PackgName.enshi_bapisilai) {
                if (card.value == this._curLaizipi || card.value == this._curLaizipi2) {
                    needAddFlag = true;
                }
            }
            if (needAddFlag) {
                var p = card.getChildByName("sprite");
                p.removeChildByName("laizi_flag");
                var flag = null;
                if (card.value == this._curLaizi) {
                    card.setStoreColor(cc.color(255, 249, 137));
                    flag = new cc.Sprite(getResPath("enshi/flag/lai_flag2.png"));
                } else if (card.value == this._curLaizipi || card.value == this._curLaizipi2) {
                    flag = new cc.Sprite(getResPath("enshi/flag/pi_flag2.png"));
                }

                var m_size = p.getContentSize();
                if (flag) {
                    flag.setPosition(cc.p(0, m_size.height));
                    flag.setAnchorPoint(cc.p(0, 1));
                    flag.setName("laizi_flag");
                    p.addChild(flag);
                    this._flagDirection(card.pos, flag, m_size);
                    if (card.type == CardType.Card_End || card.type == CardType.Card_Peng) {
                        if (card.pos == 1 || card.pos == 3) {
                            flag.setScale(0.5);
                        } else if (card.pos == 2) {
                            flag.setScale(0.6);
                        } else {
                            flag.setScale(0.8);
                        }
                    }

                    if (card.type == CardType.Card_Out) {
                        flag.setScale(0.6);
                    }

                    if (card.type == CardType.Card_Hu) {
                        flag.setScale(0.4);
                    }

                    if (card.value == this._curLaizi)
                    {
                        p.removeChildByName("laizi_effect");
                        var effectfile = "enshi/effect/laizieffect_h/LaiZiEffect.ExportJson";
                        var effectname = "LaiZiEffect";
                        if (card.pos == 1 || card.pos == 3){
                            effectfile = "enshi/effect/laizieffect_s/LaiZiEffectSide.ExportJson";
                            effectname = "LaiZiEffectSide";
                        }
                        ccs.armatureDataManager.addArmatureFileInfo(getResPath(effectfile));
                        var armature = null;
                        armature = new ccs.Armature(effectname);
                        if (armature != null) {
                            var ss = 1;
                            if (MJModel.mj_bg_use == 1){
                                ss = 0.7;
                                if (card.type == CardType.Card_End) {
                                    ss = 0.5;
                                    if (card.pos == 1 || card.pos == 3)ss = 0.3;
                                    if (card.pos == 2)ss = 0.3;
                                }

                                if (card.type == CardType.Card_Out || card.type == CardType.Card_Hu) {
                                    ss = 0.3;
                                }
                            } else {
                                ss = 0.7;
                                if (card.type == CardType.Card_End) {
                                    ss = 0.7;
                                    if (card.pos == 1 || card.pos == 3)ss = 0.7;
                                    if (card.pos == 2)ss = 0.3;
                                }

                                if (card.type == CardType.Card_Out || card.type == CardType.Card_Hu) {
                                    ss = 0.7;
                                    if (card.pos == 2)ss = 0.3;
                                    if (card.pos == 0)ss = 0.35;
                                }
                            }

                            armature.setScale(ss);
                            var animation = armature.getAnimation();
                            if (animation) {
                                if (typeof animation.playWithIndex === "function") {
                                    animation.playWithIndex(0);
                                    armature.setPosition(m_size.width / 2,m_size.height / 2);
                                    p.addChild(armature, 10000);
                                }
                            }
                        }
                    }
                }
                return;
            }
        } catch (e) {
            Log(this, e);
        }
    },
    //每个方向角标对应
    _flagDirection: function (pos, flag, m_size) {
        if (pos == 1) {
            flag.setPosition(cc.p(0, 17));
            flag.setRotation(-90);
        } else if (pos == 2) {
            flag.setPosition(cc.p(m_size.width, 17));
            flag.setRotation(180);
        } else if (pos == 3) {
            flag.setPosition(cc.p(m_size.width, m_size.height));
            flag.setRotation(90);
        }
    },
    //每个方向角标对应
    _getFlagName: function (pos, type) {
        if (type == CardType.Card_Out || type == CardType.Card_Hu) {
            return "out" + pos;
        }
        if (type == CardType.Card_Hand) {
            return "h" + pos;
        }
        if (type == CardType.Card_End) {
            return "end" + pos;
        }
        return "";
    },

    resetGame: function (allClean) {
        this._super(allClean);
        this._setLaizi(-1, -1, -1);
        this._hide_all_tip();
        this._clearAllBeiShu();
        if (allClean) {
            this._removeAllPiaoSpr();
        }
    },

    handler_server_game_start_bc: function (data, canDelay) {
        this._curLaizi = -1;
        this._curLaizipi = -1;
        this._curLaizipi2 = -1;
        if (this._pkg_id == PackgName.enshi_yipierlai || this._pkg_id == PackgName.enshi_bapisilai) {
            var l = 4;
            if (MJModel.mj_roomType == 1) l = 3;
            for (var i = 0; i < l; i++) {
                var pos = MJModel.getPosBySeatid(i);
                this._setBeiShu(1, pos);
            }
        }
        this._super(data, canDelay);
    },
    _clearAllBeiShu: function () {
        try {
            for (var i = 0; i < this._allBeiShu.length; i++) {
                this._allBeiShu_Nums[i] = 1;
                if (this._allBeiShu[i]) {
                    this._allBeiShu[i].removeFromParent();
                    this._allBeiShu[i] = null;
                }
            }

            while (this.getChildByName("beishu_bg")) {
                this.removeChildByName("beishu_bg");
            }
        } catch (e) {

        }
    },

    gameend_showGameEndDetail: function (ackGameEnd) {
        // var detail = null;
        // if (this._pkg_id == PackgName.enshi_yipierlai || this._pkg_id == PackgName.enshi_bapisilai) {
        //     var detail = new EnShi_Ypel_JieSuan();
        // }
        // if (detail) {
        //     detail.setName("reset_remove");
        //     detail.init(ackGameEnd);
        //     this.addChild(detail, 400);
        // }

        try {
            var result = new EnShiMJResult();
            result.updateContentView(ackGameEnd);
            result.setName("reset_remove");
            this.addChild(result, 100000);
        } catch (e) {
            cc.log("game end:", e);
            this.room_Action.setReady2Visible(true);
        }
    },

    handler_op_effect: function (pos, out_pos, sex, OpType, OpType2, effect) {
        // this.room_Tip.showEffect(pos, OpType, this.room_Card.isDuoPai(pos));
        this.room_Tip.showEffect1(pos, out_pos, OpType, effect);
        // this.room_Tip.showSimpleEffect(pos, out_pos, OpType, effect);
    },

    test: function (dt) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;
        if (tempCount == 5 && true) {
            this.pre_scene.setVisible(false);
            this._setLaizi(0x01,0x02,-1);
            for (var i = 0; i < 4; i ++){
                for (var j = 0; j < 1; j++) {
                    this.room_Card.addOutCard(i, 1);
                }
            }
            this.room_Card.initHandCard(0,[0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x01,0x01]);
            this.room_Card.reflashHandCard(0,true);
            return;
            var packet = {
                "gameend": {
                    "UserCard": [{
                        "ChangeableCardsLen": 10,
                        "ChangeableCards": [3, 4, 6, 7, 8, 9, 19, 19, 20, 21],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{"CardData": 35, "state": 128, "chairID": 3, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 13,
                        "ChangeableCards": [1, 2, 2, 3, 5, 5, 23, 23, 34, 34, 35, 37, 39],
                        "FixedCardsLen": 0,
                        "stFixedCards": [],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 7,
                        "ChangeableCards": [4, 20, 21, 22, 22, 40, 40],
                        "FixedCardsLen": 2,
                        "stFixedCards": [{
                            "CardData": 24,
                            "state": 1,
                            "chairID": 3,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 38, "state": 1, "chairID": 0, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 10,
                        "ChangeableCards": [6, 6, 19, 20, 21, 21, 22, 23, 37, 37],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{"CardData": 1, "state": 1, "chairID": 0, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }],
                    "Score": [32, 32, -4, 68],
                    "EndState": 1,
                    "EndGangInfo": [{"Gang": [], "TotalGangScore": 0}, {"Gang": [], "TotalGangScore": 0}, {
                        "Gang": [],
                        "TotalGangScore": 0
                    }, {"Gang": [], "TotalGangScore": 0}],
                    "faninfo": [{
                        "chairid": 0,
                        "SpecialType": 0,
                        "FanNum": 16,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 1,
                        "SpecialType": 0,
                        "FanNum": 16,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 2,
                        "SpecialType": 3,
                        "FanNum": 1,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 3,
                        "SpecialType": 2,
                        "FanNum": 2,
                        "addfan": [{"AddType": 0, "AddNum": 0, "AddType2": null}, {
                            "AddType": 17,
                            "AddNum": 0,
                            "AddType2": null
                        }, {"AddType": 18, "AddNum": 0, "AddType2": null}],
                        "hucard": 37,
                        "DianPao": []
                    }],
                    "money": [99968, 99968, 99996, 100068]
                },
                "lai_zi_gang_num": [1, 2, 0, 0],
                "lai_zi_gang_mul": [4, 16, 1, 1],
                "pi_zi_gang_num": [2, 0, 0, 1],
                "pi_zi_gang_mul": [4, 1, 1, 2],
                "ming_gang_num": [0, 0, 0, 0],
                "ming_gang_mul": [1, 1, 1, 1],
                "an_gang_num": [0, 0, 0, 0],
                "an_gang_mul": [1, 1, 1, 1],
                "bu_peng_bu_gang": [0, 0, 0, 0],
                "card_type_score": [0, 0, 0, 1],
                "is_feng_ding": [0, 0, 0, 0],
                "last_card": null,
                "total_bei": [16, 16, 1, 2],
                "remain_card": [{"seat_id": 0, "PoolCard": [9, 20, 7, 33, 9, 22, 36, 23, 9, 5]}, {
                    "seat_id": 1,
                    "PoolCard": [8, 24, 39, 41, 19, 8, 40, 25, 3, 2]
                }, {"seat_id": 2, "PoolCard": [36, 5, 33, 18, 17, 33, 3, 39, 7, 25]}, {
                    "seat_id": 3,
                    "PoolCard": [38, 39, 34, 6, 35, 40, 4, 36, 2, 35]
                }],
                "last_hu": 3,
                "refill_card_num": 6
            };
            this.handler_server_game_end_bc(packet);
        }
    },
});

var EnShiMJResult = MJCommonResult.extend({
    updateContentView: function (ackGameEndJS) {
        if (MJModel.mj_table._pkg_id == PackgName.enshi_yipierlai || MJModel.mj_table._pkg_id == PackgName.enshi_bapisilai) {
            this.ackGameEnd = ackGameEndJS.gameend;
            this.ackGameEndJS = ackGameEndJS;
        } else {
            this.ackGameEnd = ackGameEndJS;
            this.ackGameEndJS = ackGameEndJS;
        }

        this.bgSpr.setTexture(getResPath("enshi/result/resultbg.png"));

        var continueBtn = this.bgSpr.getChildByName("continueBtn");
        if (continueBtn) {
            continueBtn.loadTextures(getResPath("enshi/result/continue.png"), getResPath("enshi/result/continue.png"), getResPath("enshi/result/continue.png"));
            continueBtn.setPosition(cc.p(this.bgSpr.getContentSize().width / 2, 65));
        }

        //癞子痞子
        {
            var piziIcon = new cc.Sprite(getResPath("enshi/result/icon_pizi.png"));
            piziIcon.setPosition(cc.p(80, 85));
            this.bgSpr.addChild(piziIcon);

            var laiziIcon = new cc.Sprite(getResPath("enshi/result/icon_laizi.png"));
            laiziIcon.setPosition(cc.p(230, 85));
            this.bgSpr.addChild(laiziIcon);

            var beginx = 45;
            var beginy = -20;
            if (MJModel.mj_table._curLaizi && MJModel.mj_table._curLaizi != -1) {
                var card = new MJCard();
                card.setValue(MJModel.mj_table._curLaizi, 0, CardType.Card_Hand, 0);
                card.setScale(0.6);
                card.setAnchorPoint(cc.p(0.0, 0.0));
                card.setPosition(cc.p(beginx, beginy));
                laiziIcon.addChild(card);
            }

            if (MJModel.mj_table._curLaizipi && MJModel.mj_table._curLaizipi != -1) {
                var card = new MJCard();
                card.setValue(MJModel.mj_table._curLaizipi, 0, CardType.Card_Hand, 0);
                card.setScale(0.6);
                card.setAnchorPoint(cc.p(0.0, 0.0));
                card.setPosition(cc.p(beginx, beginy));
                piziIcon.addChild(card);
                beginx += 50;
            }

            if (MJModel.mj_table._curLaizipi2 && MJModel.mj_table._curLaizipi2 != -1) {
                var card = new MJCard();
                card.setValue(MJModel.mj_table._curLaizipi2, 0, CardType.Card_Hand, 0);
                card.setScale(0.6);
                card.setAnchorPoint(cc.p(0.0, 0.0));
                card.setPosition(cc.p(beginx, beginy));
                piziIcon.addChild(card);
            }
        }

        //输赢标志
        var seatId = MJModel.seatid;
        var score = this.ackGameEnd.Score[seatId];
        var effectName = "lose";
        if (score > 0) {
            effectName = "win";
        }
        if (this.ackGameEnd.EndState == 1) effectName = "liuju";
        this._win_effect(effectName);

        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);

        var itemHeight = 120;

        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;

            var countY = m;

            if (MJModel.mj_roomType == 1) {
                if (pos == 2) {
                    continue;
                }
            }

            if (MJModel.mj_roomType == 2) {
                if (pos == 1 || pos == 3) {
                    continue;
                }

                if (pos == 0) {
                    countY = 1;
                } else if (pos == 2) {
                    countY = 2;
                }
            }

            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 495 - count * itemHeight;
            var startX = 75;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX + 60, startY + 80));
            this.bgSpr.addChild(headLayer, 10);

            //上排牌 杠
            var ganghuLayer = this.createGangHuLayer(seatid);
            this.bgSpr.addChild(ganghuLayer, 10);
            ganghuLayer.setPosition(cc.p(startX + 250, startY + 80));

            //下排牌
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX + 0, startY - 25));
            this.bgSpr.addChild(handCardLayer);

            this.createSpecialHuTip(startX + 1000, startY + 30, seatid);

            this.createFengDingTip(startX + 900, startY + 70, seatid);

            // 输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX + 900, startY + 30));
            this.bgSpr.addChild(scoreLayer);

            count++;
        }
    },

    _win_effect: function (name) {
        var title = new cc.Sprite(__String.createWithFormat(getResPath("enshi/result/%1.png"), name));
        title.setPosition(cc.p(this.bgSpr.getContentSize().width / 2, this.bgSpr.getContentSize().height - 60));
        this.bgSpr.addChild(title, 100);
    },

    createAvatar: function (pos) {
        var seatid = MJModel.getSeatidByPos(pos);
        var player = MJModel.players[seatid];
        var layer = new cc.Layer();

        //是否是庄家
        if (MJModel.banker_seatid == seatid) {
            var bankerPic = new cc.Sprite(getResPath("enshi/result/banker.png"));
            bankerPic.setAnchorPoint(cc.p(0.5, 0.5));
            bankerPic.setPosition(cc.p(-30, 0));
            layer.addChild(bankerPic);
        }

        //玩家名字
        var nameLabel = new cc.LabelTTF(Utils.parseName(6, player.name), "Arial", 20);
        // nameLabel.setColor(this.leftColor);
        nameLabel.setColor(seatid == MJModel.seatid ? cc.color("#ffe647") : cc.color("#ffffff"));
        nameLabel.setAnchorPoint(cc.p(0, 0.5));
        nameLabel.setPosition(cc.p(0, 0));
        layer.addChild(nameLabel);

        return layer;
    },

    createHandCard: function (seatid) {
        var tagHu = 0;
        //占时注释掉，胡的那张牌

        if (this.ackGameEnd.faninfo.length > seatid) {
            if (this.ackGameEnd.faninfo[seatid].hucard && this.ackGameEnd.faninfo[seatid].hucard != 255) {
                tagHu = this.ackGameEnd.faninfo[seatid].hucard;
            }
        }

        var layer = new cc.Layer();

        var pos = MJModel.getPosBySeatid(seatid);
        if (this.ackGameEnd.UserCard.length > seatid) {
            var x = 60;
            var y = 15;
            var paiSpace = 30;
            var penggangSize = cc.size(137, 63);
            if (MJModel.mj_bg_use == 1) {
                x = 70;
                var y = 22;
                penggangSize = cc.size(137, 45);
            }
            for (var i = 0; i < this.ackGameEnd.UserCard[seatid].FixedCardsLen; i++) {

                var state = this.ackGameEnd.UserCard[seatid].stFixedCards[i].state;
                var card = this.ackGameEnd.UserCard[seatid].stFixedCards[i].CardData;
                var chairID = this.ackGameEnd.UserCard[seatid].stFixedCards[i].chairID;
                var out_pos = MJModel.getPosBySeatid(chairID);

                if (card == undefined || card == null || card == 0) {
                    continue;
                }
                //下排杠牌
                var gangCard = new MJPeng();
                gangCard.setAnchorPoint(cc.p(0.0, 0.0));

                if ((state & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                    gangCard.setValue(PengType.Peng_Peng, pos, card, 0, out_pos, true, state);
                }
                else if ((state & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                    gangCard.setValue(PengType.Peng_AnKang, pos, card, 0, out_pos, true, state);
                }
                else if ((state & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                    gangCard.setValue(PengType.Chi_L, pos, card, 0, out_pos, true, state);
                }
                else if ((state & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                    gangCard.setValue(PengType.Chi_M, pos, card, 0, out_pos, true, state);
                }
                else if ((state & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                    gangCard.setValue(PengType.Chi_R, pos, card, 0, out_pos, true, state);
                }
                else {
                    gangCard.setValue(PengType.Peng_Kang, pos, card, 0, out_pos, true, state);
                }
                gangCard.setScale(0.6);
                if (MJModel.mj_bg_use == 1) {
                    gangCard.setScale(0.8);
                }
                gangCard.setPosition(cc.p(x + penggangSize.width / 2, y + penggangSize.height / 2));
                layer.addChild(gangCard);

                x += penggangSize.width + 18;

            }

            var is_remove = 0;
            var need_remove = (parseInt(this.ackGameEnd.UserCard[seatid].ChangeableCardsLen % 3) == 2);
            this.hand_card[pos] = [];
            this.ackGameEnd.UserCard[seatid].ChangeableCards.sort(MJModel.mj_table.room_Card.sortCard);
            //牌面信息
            for (var i = this.ackGameEnd.UserCard[seatid].ChangeableCardsLen - 1; i >= 0; i--) {

                //去掉type＝＝1的判断 有些游戏自摸不一定叫自摸 只判断玩家的手牌数量 只要多牌 而且有胡牌数据 就跳过
                if (is_remove == 0 && need_remove && tagHu) {
                    if (this.ackGameEnd.UserCard[seatid].ChangeableCards[i] == tagHu) {
                        is_remove = 1;
                        continue;
                    }
                }
                var handCard = new MJCard();
                handCard.setValue(this.ackGameEnd.UserCard[seatid].ChangeableCards[i], 0, CardType.Card_End, 0);
                handCard.setScale(0.6);
                handCard.setAnchorPoint(cc.p(0.0, 0.0));
                handCard.setPosition(cc.p(x, y));
                if (MJModel.mj_bg_use == 0) {
                    x += handCard.getBoundingBox().width;
                } else {
                    x += handCard.getBoundingBox().width + 18;
                }
                layer.addChild(handCard);
                this.hand_card[pos].push(handCard);
            }

            //胡的牌
            cc.log("----tagHu---: " + tagHu);
            this.hu_card[pos] = null;
            if (tagHu) {
                //多加一个是否多牌的判断 防止前面又没有跳过 这里又多加的bug
                var huCard = new MJCard();
                huCard.setValue(tagHu, 0, CardType.Card_End, 0);
                huCard.setScale(0.6);
                huCard.setAnchorPoint(cc.p(0.0, 0.0));
                huCard.setPosition(cc.p(x + paiSpace, y));
                layer.addChild(huCard);
                this.hu_card[pos] = huCard;
            }
        }
        this.handCradPos.x = x;
        this.handCradPos.y = y;
        return layer;
    },

    createGangHuLayer: function (seatid) {
        var layer = new cc.Layer();
        var x = 0;
        var y = 0;

        var addFanType = [];
        if (MJModel.mj_table._pkg_id == PackgName.enshi_yipierlai || MJModel.mj_table._pkg_id == PackgName.enshi_bapisilai) {
            var allHuScore = this.ackGameEndJS.card_type_score;
            if (allHuScore[seatid]) {
                var addfan = this.ackGameEnd.faninfo[seatid].addfan;
                for (var i = 0; i < addfan.length; i++) {
                    if (ES_MJ_TYPE[addfan[i].AddType]) {
                        addFanType.push(ES_MJ_TYPE[addfan[i].AddType]);
                    }
                }
            }

            if (this.ackGameEndJS.lai_zi_gang_num[seatid]) {
                addFanType.push("癞子杠x" + this.ackGameEndJS.lai_zi_gang_num[seatid]);
            }
            if (this.ackGameEndJS.pi_zi_gang_num[seatid]) {
                addFanType.push("痞子杠x" + this.ackGameEndJS.pi_zi_gang_num[seatid]);
            }
            if (this.ackGameEndJS.ming_gang_num[seatid]) {
                addFanType.push("明杠x" + this.ackGameEndJS.ming_gang_num[seatid]);
            }
            if (this.ackGameEndJS.an_gang_num[seatid]) {
                addFanType.push("暗杠x" + this.ackGameEndJS.an_gang_num[seatid]);
            }
            if (this.ackGameEndJS.bu_peng_bu_gang[seatid]) {
                addFanType.push("不碰不杠");
            }
        } else {
            var addfan = this.ackGameEnd.faninfo[seatid].addfan;
            for (var i = 0; i < addfan.length; i++) {
                if (ES_MJ_TYPE[addfan[i].AddType]) {
                    addFanType.push(ES_MJ_TYPE[addfan[i].AddType]);
                }
            }
        }


        for (var i = 0; i < addFanType.length; i++) {
            var fanType = new cc.LabelTTF(addFanType[i], "Arial", 28);
            fanType.setColor(cc.color("#ffffff"));
            fanType.setAnchorPoint(cc.p(0, 0.5));
            fanType.setPosition(cc.p(x, y));
            layer.addChild(fanType);
            x += fanType.getContentSize().width + 10;
        }
        return layer;
    },

    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var path = "";
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5天和 6地和 7抢杠胡 8杠上开花 9花上添花
            switch (fanInfo.SpecialType) {
                case 1:
                    path = "enshi/result/hu_icon.png";
                    break;
                case 2:
                    path = "enshi/result/hu_icon.png";
                    break;
                case 3:
                    path = "enshi/result/pao_icon.png";
                    break;
                case 5:
                    path = "enshi/result/hu_icon.png";
                    break;
                case 7:
                    path = "enshi/result/pao_icon.png";
                    break;
                default:
                    break;
            }
            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setPosition(cc.p(startX, startY));
                this.bgSpr.addChild(typeSprite);

            }
        }
    },

    createFengDingTip: function (startX, startY, seatid) {
        if (MJModel.mj_table._pkg_id == PackgName.enshi_yingmajiang) return;

        if (this.ackGameEndJS.is_feng_ding.length > seatid) {
            //胡牌类型
            var is_feng_ding = this.ackGameEndJS.is_feng_ding[seatid];
            var path = "";
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5天和 6地和 7抢杠胡 8杠上开花 9花上添花
            switch (is_feng_ding) {
                case 1:
                    path = "enshi/result/fengding.png";
                    break;
                case 2:
                    path = "enshi/result/jinding.png";
                    break;
                default:
                    break;
            }
            // if (seatid == 1) path = "enshi/result/fengding.png";
            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setPosition(cc.p(startX, startY));
                this.bgSpr.addChild(typeSprite);
            }
        }
    },
    //输赢分
    createScoreLayer: function (seatid) {
        var layer = new cc.Layer();

        var score = 0;
        if (this.ackGameEnd.Score && this.ackGameEnd.Score.length > seatid) score = this.ackGameEnd.Score[seatid];

        var scoreLabel = new cc.LabelTTF(score, "Arial", 30);
        scoreLabel.setColor(cc.color("#ffe647"));
        scoreLabel.setAnchorPoint(cc.p(0.5, 0.5));
        scoreLabel.setPosition(cc.p(0, 0));
        scoreLabel.setName("scoreLabel");
        layer.addChild(scoreLabel);

        return layer;
    },

    //输赢分
    createScoreLayer2: function (seatid, score, text) {
        var layer = new cc.Layer();

        var width = 0;
        var nameLabel = new cc.LabelTTF(text, "Arial", 32);
        nameLabel.setColor(this.leftColor);
        nameLabel.setAnchorPoint(cc.p(0.5, 0.5));
        nameLabel.setPosition(cc.p(width, 40));
        layer.addChild(nameLabel);

        var path = getResPath("RoomMJ/result2/result_small_label_lose.png");
        if (score > 0) {
            path = getResPath("RoomMJ/result2/result_small_label_win.png");
        }
        var scoredes = ":";
        if (score == 0) scoredes = "";
        var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), path, 29, 37, '0');

        scoreLabel.setAnchorPoint(cc.p(0.5, 0.5));

        scoreLabel.setPosition(cc.p(width, -10));
        scoreLabel.setName("scoreLabel");
        layer.addChild(scoreLabel);

        if (Math.abs(score) >= 10000) {
            scoreLabel.setScale(0.8);
        }
        return layer;
    },
});

var PiaoLayer = cc.Layer.extend({
    _isPiao: true,
    _isNotify: true,
    ctor: function () {
        this._super();
    },
    initPiao: function () {
        var self = this;
        var size = cc.director.getWinSize();
        var bg = new cc.Sprite(getResPath("enshi/piao/selectBg.png"));
        bg.setName("selectBg");
        bg.setPosition(cc.p(size.width / 2, bg.getContentSize().height / 2 + 30));
        this.addChild(bg, 100);

        var dx = 160;
        for (var i = 0; i < 2; i++) {
            var layout = this._createCheckBoxItem(i, (i == 0) ? true : false); //默认选择漂
            layout.setPosition(cc.p(dx, 155));
            bg.addChild(layout);
            dx += layout.getContentSize().width + 150;
        }

        var tips = new cc.Sprite(getResPath("enshi/piao/piaoTxt1.png"));
        tips.setName("tips");
        tips.setAnchorPoint(cc.p(0.0, 0.5));
        tips.setPosition(cc.p(100, 65));
        tips.setScale(0.9);
        bg.addChild(tips);

        var submitBtn = new ccui.Button(getResPath("enshi/piao/submit_0.png"), getResPath("enshi/piao/submit_1.png"));
        submitBtn.setPosition(cc.p(bg.getContentSize().width - submitBtn.getContentSize().width / 2 - 40, submitBtn.getContentSize().height - 15));
        submitBtn.addClickEventListener(function (sender, evt) {
            self.setVisible(false);
            sendPiaoNums(self._isPiao, self._isNotify);
        });
        bg.addChild(submitBtn);

        var layoutsize = cc.size(80, 80);
        var layout = new ccui.Layout();
        layout.setContentSize(layoutsize);
        layout.setPosition(cc.p(50, 65));
        layout.setAnchorPoint(0.0, 0.5);
        layout.setSwallowTouches(true);
        layout.addClickEventListener(function (btn) {
            var ok = this.getChildByName("ok");
            if (ok) {
                if (ok.isVisible()) {
                    ok.setVisible(false);
                    self._isNotify = true;
                } else {
                    ok.setVisible(true);
                    self._isNotify = false;
                }
            }
        });
        layout.setName("selectLayout");
        bg.addChild(layout);

        var ok_bg = new cc.Sprite(getResPath("enshi/piao/forbid_bg.png"));
        ok_bg.setName("ok_bg");
        ok_bg.setPosition(cc.p(14, layoutsize.height / 2));
        layout.addChild(ok_bg);

        var ok = new cc.Sprite(getResPath("enshi/piao/ok.png"));
        ok.setName("ok");
        ok.setPosition(cc.p(14, layoutsize.height / 2));
        layout.addChild(ok);
        ok.setVisible(false);
        layout.setTouchEnabled(false);
    },
    _createCheckBoxItem: function (index, ison) {
        var name = "selectPiao" + index;
        var self = this;
        var size = cc.size(80, 80);
        var layout = new ccui.Layout();
        layout.setContentSize(size);
        layout.setAnchorPoint(0.0, 0.5);
        layout.setSwallowTouches(true);
        layout.addClickEventListener(function (btn) {
            self._layoutCallbck(btn);
        });
        layout.setName(name);

        var bg = new cc.Sprite(getResPath("enshi/piao/ok_bg.png"));
        bg.setPosition(cc.p(14, size.height / 2));
        layout.addChild(bg);

        var ok = new cc.Sprite(getResPath("enshi/piao/ok.png"));
        ok.setName("ok");
        ok.setPosition(cc.p(14, size.height / 2));
        layout.addChild(ok);
        if (ison) {
            ok.setVisible(true);
            layout.setTouchEnabled(false);
        } else {
            ok.setVisible(false);
            layout.setTouchEnabled(true);
        }

        var label = new cc.Sprite(__String.createWithFormat(getResPath("enshi/piao/piao_%1.png"), index));
        label.setAnchorPoint(cc.p(0.0, 0.5));
        label.setPosition(cc.p(44, size.height / 2));
        layout.addChild(label);

        return layout;
    },
    _layoutCallbck: function (obj) {
        var selectName = obj.getName();
        if (selectName == "selectPiao0") {
            this._isPiao = true;
            this._setCheckBoxOn("selectPiao0", true);
            this._setCheckBoxOn("selectPiao1", false);
            var layout = this.getChildByName("selectBg").getChildByName("selectLayout");
            layout.setTouchEnabled(false);
            layout.getChildByName("ok_bg").setTexture(getResPath("enshi/piao/forbid_bg.png"));
            layout.getChildByName("ok").setVisible(false);
        } else if (selectName == "selectPiao1") {
            this._isPiao = false;
            this._setCheckBoxOn("selectPiao1", true);
            this._setCheckBoxOn("selectPiao0", false);
            var layout = this.getChildByName("selectBg").getChildByName("selectLayout");
            layout.setTouchEnabled(true);
            layout.getChildByName("ok_bg").setTexture(getResPath("enshi/piao/ok_bg.png"));

        }
    },
    _setCheckBoxOn: function (name, ison) {
        var layout = this.getChildByName("selectBg").getChildByName(name);
        if (layout) {
            layout.getChildByName("ok").setVisible(ison);
            layout.setTouchEnabled(!ison);
        }
    },
});

var sendPiaoNums = function (isPiao, isNotify) {
    var packet = createPacket("proto.game.enshimj.ReqChoosePiao");
    packet.choose = 1;
    if (!isPiao) {
        packet.choose = 0;
    }
    packet.no_notify = 0;
    if (!isNotify) {
        packet.no_notify = 1;
    }
    sendPacket(packet, CMD.CLIENT_MJ_CHOOSE_PIAO);
};

var MJPublic_2d = cc.Layer.extend({
    // tag: "MJPublic",
    btns: {},
    rootNode: null,
    power: null,
    code: null,
    jushu: null,
    time: null,
    roomConfig: null,
    roomConfig2: null,
    bg_up: null,
    bg_down: null,
    layout_hide: null,

    cardNumView: null,
    cardNumText: null,

    ctor: function () {
        this._super();
        this.initPublic();
    },

    initPublic: function () {
        var size = cc.director.getWinSize();
        var uiJson = ccs.load(getResPath("enshi/newui/mj_public/gameHead.json"));
        var uiNode = uiJson.node;
        uiNode.setPosition(size.width / 2, size.height);
        this.addChild(uiNode);
        this.rootNode = uiNode;

        this.schedule(this.updatePower, 60.0);
        this.schedule(this.updateTime, 60.0);

        var self = this;

        var info = uiNode.getChildByName("info");
        info.setPosition(cc.p(-size.width / 2 + 50, -40));

        this.code = info.getChildByName("code");
        this.code.ignoreContentAdaptWithSize(true);
        this.jushu = uiNode.getChildByName("jushu");
        this.jushu.ignoreContentAdaptWithSize(true);
        this.time = info.getChildByName("time");
        this.time.ignoreContentAdaptWithSize(true);
        this.power = info.getChildByName("power");
        this.roomConfig = uiNode.getChildByName("roomConfig");
        this.roomConfig.ignoreContentAdaptWithSize(true);
        this.roomConfig.setString("");
        this.roomConfig2 = uiNode.getChildByName("roomConfig2");
        this.roomConfig2.ignoreContentAdaptWithSize(true);
        this.roomConfig2.setString("");
        this.bg_up = uiNode.getChildByName("bg_up");
        this.bg_down = uiNode.getChildByName("bg_down");

        // this.cardNumView = uiNode.getChildByName("card_num_bg");
        // this.cardNumView.setPosition(uiNode.convertToNodeSpace(cc.p(100 , size.height - 55)));
        this.cardNumText = uiNode.getChildByName("card_num");
        this.cardNumText.ignoreContentAdaptWithSize(true);
        this.cardNumText.setString("剩" + 0 + "张");
        this.showCardNum(-1);

        if (!MJModel.isOnVideo) {
            var roomId = MJModel.roomData["gameRoom"]["code"];
            this.code.setString(roomId);

            this.updateJuShu();
            this.updateTime();
            this.updatePower();

            var _listener_end = cc.EventListener.create({
                event: cc.EventListener.CUSTOM,
                eventName: "notify_game_check_end",
                callback: function (evt) {
                    self.updateJuShu();
                }
            });
            if (_listener_end) cc.eventManager.addListener(_listener_end, this);
        } else {
            this.time.setVisible(false);
            this.power.setVisible(false);
            info.getChildByName("netTip").setVisible(false);
        }

        //btn
        {
            this.btns = [];
            var btnLayer = uiNode.getChildByName("btns");
            var cs = btnLayer.getChildren();
            for (var i in cs) {
                var btn = cs[i];
                if (btn) {
                    btn.addClickEventListener(function (sender, evt) {
                        self.actionCallBack(sender);
                    });
                    this.btns[btn.getName()] = btn;
                }
            }
        }

        var _listener_config = cc.EventListener.create({
            event: cc.EventListener.CUSTOM,
            eventName: "notify_mjpublic_roomConfig",
            callback: function (evt) {
                var msg = evt.getUserData();
                self.updateRoomConfig(msg);
            }
        });
        if (_listener_config) cc.eventManager.addListener(_listener_config, this);

        var layout_hide = new ccui.Layout();
        layout_hide.setContentSize(size);
        layout_hide.setAnchorPoint(cc.p(0.0, 0));
        layout_hide.setPosition(0, 0);
        layout_hide.setTouchEnabled(true);
        layout_hide.setSwallowTouches(false);
        layout_hide.setVisible(false);
        layout_hide.addClickEventListener(function (sender, type) {
            self.hide();
        });
        MJModel.mj_table.addChild(layout_hide, 1000000);
        this.layout_hide = layout_hide;

        //this.updateRoomConfig("封顶40,不能炮胡,自摸加4番,点炮三家给钱,自摸加4番,点炮三家给钱,不能炮胡,自摸加4番,点炮三家给钱,自摸加4番,点炮三家给钱,不能炮胡,自摸加4番,点炮三家给钱,自摸加4番,点炮三家给钱,不能炮胡,自摸加4番,点炮三家给钱,自摸加4番,点炮三家给钱");
    },

    showCardNum: function (num) {
        if (num >= 0) {
            this.cardNumText.setVisible(true);
            this.cardNumText.setString("剩" + num + "张");
        } else {
            this.cardNumText.setString(0);
            this.cardNumText.setVisible(false);
        }
    },

    showDelay: function () {
        this.updateNetDelay(MJModel.netDely);
    },

    updateNetDelay: function (delay) {
        var netTip = this.rootNode.getChildByName("netTip");
        var netDelay = netTip.getChildByName("netDelay");
        netDelay.ignoreContentAdaptWithSize(true);
        netTip.setVisible(true);
        if (delay > 500) {
            delay = 500;
        }
        if (delay < 200) {
            netTip.setTexture(getResPath("RoomMJ/mj_public/common/head/net4.png"));
        } else if (delay < 300) {
            netTip.setTexture(getResPath("RoomMJ/mj_public/common/head/net3.png"));
        } else if (delay < 400) {
            netTip.setTexture(getResPath("RoomMJ/mj_public/common/head/net2.png"));
        } else {
            netTip.setTexture(getResPath("RoomMJ/mj_public/common/head/net1.png"));
        }
        netDelay.setString(delay + "ms");
    },

    updateTime: function (dt) {
        var date = new Date(time(null));
        var str = Utils.pad(date.getHours(), 2) + ":" + Utils.pad(date.getMinutes(), 2);
        this.time.setString(str);
    },

    updatePower: function (dt) {
        var powerState = PlatformHelper.getPowStateSig();
        if (powerState != "") {
            var json = JSON.parse(powerState);
            var level = json["level"];
            if (level > 80) {
                this.power.getChildByName("power").setScaleX(1);
            } else if (level <= 0) {
                this.power.getChildByName("power").setScaleX(0);
            } else {
                this.power.getChildByName("power").setScaleX(level / 100);
            }
        }
    },

    updateJuShu: function () {
        if (MJModel.mj_roominfo_type == 1) {
            this.showJuShuTip();
            return;
        }
        var self = this;
        var ary = {};
        ary["roomId"] = MJModel.curRoomID;
        CCHttpAgent.getInstance().sendHttpPost(function (tag) {
                var data = CCHttpAgent.getInstance().getPacketData(tag);
                if (data != "") {
                    var recv = null;
                    try {
                        recv = JSON.parse(data);
                        if (recv) {
                            if (recv.status == 200) {
                                if (recv["resultMap"].hasOwnProperty("way")) {
                                    var d = recv["resultMap"];
                                    var type = d["way"];
                                    if (type == 1)//对局类型
                                    {
                                        MJModel.RoomCountSum = d["count"];
                                        MJModel.currentCount = d["currentCount"];
                                        self.showJuShuTip();
                                        var jsState = d["status"];
                                        if (jsState == 2 || jsState == 3) {
                                            JsUtils.postNotifi("notify_against_room_end");
                                        }

                                    }
                                }
                            }
                        }
                    }
                    catch (e) {
                    }
                }
                CCHttpAgent.getInstance().popPackets(tag);
            },
            "room/dz/status", JSON.stringify(ary), "room_status2");
    },

    showJuShuTip: function () {
        this.jushu.setString(MJModel.currentCount + "/" + MJModel.RoomCountSum + "局");
    },

    showRoomCode: function (code) {
        var roomId = "房间号:" + code;
        this.code.setString(roomId);
        this.code.ignoreContentAdaptWithSize(true);
    },

    updateRoomConfig: function (msg) {
        this.roomConfig.setString(msg);
        this.roomConfig.ignoreContentAdaptWithSize(true);
        if (msg.length > 32) {
            this.roomConfig.setFontSize(18);
        } else {
            this.roomConfig.setFontSize(20);
        }
        return;
        var ss = Utils.splitStr(msg, 35, 2);
        this.roomConfig.setString(ss[0]);
        this.roomConfig.ignoreContentAdaptWithSize(true);
        if (ss[1]) {
            this.roomConfig2.setString(ss[1]);
            this.roomConfig2.ignoreContentAdaptWithSize(true);
            this.roomConfig2.setVisible(false);
            this.btns["down"].setVisible(true);
            this.btns["up"].setVisible(false);
            this.bg_down.setVisible(false);
            this.bg_up.setVisible(true);
            if (MJModel.isOnVideo) {
                this.roomConfig2.setVisible(true);
                this.btns["down"].setVisible(false);
                this.btns["up"].setVisible(false);
                this.bg_down.setVisible(true);
                this.bg_up.setVisible(false);
                this.layout_hide.setVisible(false);
            }
        }
    },

    show: function () {
        this.roomConfig2.setVisible(true);
        this.btns["down"].setVisible(false);
        this.btns["up"].setVisible(true);
        this.bg_down.setVisible(true);
        this.bg_up.setVisible(false);
        this.layout_hide.setVisible(true);
    },
    hide: function () {
        this.roomConfig2.setVisible(false);
        this.btns["down"].setVisible(true);
        this.btns["up"].setVisible(false);
        this.bg_down.setVisible(false);
        this.bg_up.setVisible(true);
        this.layout_hide.setVisible(false);
    },
    actionCallBack: function (btn) {
        var name = btn.getName();
        if (name == "down") {
            this.show();
        } else if (name == "up") {
            this.hide();
        } else if (name == "pifu") {
        }
    },

    onExit: function () {
        CCHttpAgent.getInstance().popPackets("room_status1");
        this._super();
    }
});

