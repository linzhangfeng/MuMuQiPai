/**
 * Created by jesse on 2017/8/4.
 */
loadProtoFile("proto/linshuigameproto.proto");
var ChengduType = {
    1: "九莲宝灯",
    2: "大四喜",
    3: "小四喜",
    4: "大三元",
    5: "四暗刻",
    6: "十八学士",
    7: "全幺九",
    8: "字一色",
    9: "小三元",
    10: "清幺九",
    11: "清一色大对子",//"纯清大对子",//清对
    12: "清一色大对子",//"清碰",
    13: "混一色大对子",//"混碰",
    14: "清一色",//"纯清一色",//清一色
    15: "混清一色",
    16: "大对子",
    17: "平胡",
    18: "鸡胡",
    19: "天胡",
    20: "地胡",
    21: "人胡",
    22: "抢杠胡",
    23: "海底捞月",
    24: "杠上花",
    25: "清暗七对",//"清七对",
    26: "清龙七对",
    27: "龙七对",
    28: "全求人",
    29: "杠上炮",
    30: "门大",
    31: "风一色",
    32: "门大+清一色",
    33: "清一色+四暗刻",
    34: "海底炮",
    35: "十三幺",
    36: "七对",
    37: "带幺九",
    38: "将对",
    39: "一条龙",			//一条龙
    40: "清一条龙",		//清一条龙
    41: "4鬼胡",				//4鬼胡
    42: "无鬼",				//无鬼
    43: "清全求人",		//清全求人
    44: "单吊",				//单吊
    45: "明四归",				//明四归
    46: "暗四归",				//暗四归
    47: "将七对",			//将七对
    48: "四归一",		     	//勾牌
    49: "卡张",               //中张
    50: "门清",                  //门清
    51: "金钩吊",
    52: "夹心五",
    53: "双龙七对",
    54: "清双龙七对",
    55: "清一色金钩吊",
    56: "将对对金钩吊",
    57: "中发白",
    58: "炮中炮",
    59: "花中花",
    60: "金勾吊",
    61: "自摸",
    63: "混清七对",
    64: "混清龙七对",
    65: "缺一门",
    66: "边张",
    67: "小板子",
    68: "小飞机",
    69: "大飞机",
    71: "超大飞机",
    72: "混一色金勾钓",
    73: "大板子",
    74: "N板子",
    75: "本身",
    81: "门清一条龙",
    82: "大板子",
    83: "特大板子",
    84: "超大板子",
    85: "超级大板子",
    86: "火箭",
    87: "大火箭",
    88: "超级火箭",
    101: "缺两门",
    102: "门清大对子",
    512: "四喜",
    513: "板板胡",
    514: "缺一色",
    515: "六六顺",
    516: "将将胡",
    517: "四个红中胡",
    518: "抢杠全包",
    519: "杠爆全包",
    524: "花单钓",
    525: "花钓花",
    526: "双花钓花",
    527: "三花钓花",
    528: "双豪华七小对",
    529: "三豪华七小对",
    530: "清双龙七对",
    531: "清三龙七对",
    532: "报九全包",

};

var CHONGQING_CMD = {
    SERVER_CHENGDU_START_HUANZHANG: 5081,//开始换张
    SERVER_CHENGDU_USER_HUANZHANG_DONE: 5083,//用户选完要换的张广播
    SERVER_CHENGDU_ALL_HUANZHANG_DONE: 5085,//所有人换张完成

    SERVER_CHENGDU_START_DINGQUE: 5080,//开始定缺
    SERVER_CHENGDU_USER_DINGQUE_DONE: 5082,//用户选完定缺色广播
    SERVER_CHENGDU_ALL_DINGQUE_DONE: 5084,//所有人定缺完成
};

var MJTable_LinShui = MJTable.extend({
    tag: "MJTable_Chengdu",
    _lock_card: 0,
    gameDes: "",
    _all_state_tip: [null, null, null, null],
    _all_huType_tip: [null, null, null, null],
    _all_DajiaoType_tip: [null, null, null, null],
    _lackDingque: [null, null, null, null],
    _changeCard: [null, null, null, null],
    _allPaoCard: [null, null, null, null],
    mChangeBar: null,
    mPaiSeBar: null,
    _pkg_id: 0,
    _changeCardType: 0, //0：同换三张  1：随意换三张
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];
            if (this._pkg_id == 3181 || this._pkg_id == 3021) {
                MJModel.mj_roomType = 0;
            }
            else if (this._pkg_id == 3182 || this._pkg_id == 3022) {
                MJModel.mj_roomType = 1;
            }
            else if (this._pkg_id == 3183 || this._pkg_id == 3023) {
                MJModel.mj_roomType = 2;
            }
        } catch (e) {
            Log(this, e);
        }
        MJModel.mj_suport_fangyan = 1;
        MJModel.otherOutCardEffect = false;
        MJModel.outCardEffect_style = 1;
        MJModel.mj_suport_change_bg = 0;
        MJModel.toupiaoTipsType = 1;
        MJModel.needTipWhenPass = 0;
        MJModel.isOutCard = true;
        MJModel.mj_card_lib_type = 1;
        MJModel.mj_public_style = 1;
        MJModel.mj_chat_style = 5;
        MJModel.mj_hu_type = 1;
        MJModel.chi_layout = 3;

        MJModel.mj_touch_tip = 1;
        MJModel.shareType = 1;

        var size = cc.director.getWinSize();
        this._init_extend();
        this._super();
        var self = this;
        this.mPaiSeBar = new CHENGDU_Paise();
        this.mPaiSeBar.setVisible(false);
        this.mPaiSeBar.addClickEventListener(function (node) {
            self.onPaiSeClick(node);
        });
        this.mChangeBar = new MJChange();
        this.mChangeBar.setVisible(false);
        this.mChangeBar.addClickEventListener(function (node) {
            self.onChangeClick(node);
        });
        this.addChild(this.mChangeBar, 1);
        this.addChild(this.mPaiSeBar, 1);
        this._createWaitLack();
        this._createWaitchange();
        // this.schedule(this.test, 1.0);
    },
    getMjTypePath: function () {
        if (MJModel.mj_roomType == 1) {
            return getResPath("linshui/flag/pkgid2.png");
        } else if (MJModel.mj_roomType == 2) {
            return getResPath("linshui/flag/pkgid3.png");
        } else {
            return getResPath("linshui/flag/pkgid1.png");
        }
    },
    updateBg: function (isInit) {
        this._super(isInit);
        if (this.pre_scene)this.pre_scene.bg.loadTexture(getResPath(this.getBgStr()));

        if (isInit == undefined)isInit = false;
        var size = cc.director.getWinSize();

        for (var i = 0; i < this._allPaoCard.length; i++) {
            if (this._allPaoCard[i]) {
                var card = this._allPaoCard[i];
                card.reflashUI();
                card.setPosition(MJConfig.getEndCardMoPos(i));
                card.setStoreColor(cc.color(255, 249, 137));

                var p = card.getChildByName("sprite");
                var m_size = p.getContentSize();
                var icon = card.getChildByName("icon");
                this._flagDirection(i, icon, m_size);
            }
        }
    },
    resetGame: function (allClean) {
        this._super(allClean);
        this._hide_all_tip();
        this._isShowWaitLack(false);
        this._isShowWaitchange(false);
        if (this.mChangeBar.getChildByName("sureChoice") != undefined) {
            this.mChangeBar.getChildByName("sureChoice").setEnabled(false);
        }
        this._clearAllPaoCard();
    },
    timeEnd: function (dt) {

        if (MJModel.isEnd)return;

        var showdajiesuan = cc.callFunc(function () {
            sendGameEndRecordReq();
        });

        this.runAction(cc.sequence(cc.delayTime(4), showdajiesuan));
    },
    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.guanganmj.tagGuangAnGameScence", jpacket);
            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.guanganmj.AckGAGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CHONGQING_CMD.SERVER_CHENGDU_START_HUANZHANG) {
            //开始换牌
            this._handler_server_change_start(jpacket, canDelay);
            return;
        } else if (cmd == CHONGQING_CMD.SERVER_CHENGDU_USER_HUANZHANG_DONE) {
            //换牌中
            this._handler_server_change(jpacket, canDelay);
            return;
        } else if (cmd == CHONGQING_CMD.SERVER_CHENGDU_ALL_HUANZHANG_DONE) {
            //换牌结束
            this._handler_server_change_end(jpacket, canDelay);
            return;
        } else if (cmd == CHONGQING_CMD.SERVER_CHENGDU_START_DINGQUE) {
            //定缺开始
            this._handler_server_lack_start(jpacket, canDelay);
        } else if (cmd == CHONGQING_CMD.SERVER_CHENGDU_USER_DINGQUE_DONE) {
            //定缺中
            this._handler_server_lack(jpacket, canDelay);
            return;
        } else if (cmd == CHONGQING_CMD.SERVER_CHENGDU_ALL_DINGQUE_DONE) {
            //定缺结束
            this._handler_server_lack_end(jpacket, canDelay);
            return;
        } else if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
            return;
        }
        this._super(cmd, jpacket, canDelay, svrid);
    },
    initMJConfig: function () {
        MJConfig.getPublicCardPos = function (pos, index) {
            try {
                if (pos == 2) {
                    var curPos = this.getWorldPosition("public_" + pos, "p_" + index);
                    return cc.p(curPos.x, curPos.y - 15);
                } else {
                    return this.getWorldPosition("public_" + pos, "p_" + index);
                }
            } catch (e) {
                return cc.p(-1000, -1000);
            }
        };
    },
    initMJAction: function () {
        //修改听牌提示
        TingPaiLayer.prototype.show2 = function (list) {
            var size = list.length;
            var v_nums = size;
            if (size > 9 && size < 18) {
                v_nums = parseInt(size / 2);
                if (size % 2 != 0) {
                    v_nums += 1;
                }
            } else if (size >= 18) {
                v_nums = 9;
            }

            var h_nums = parseInt(size / v_nums);
            if (h_nums == 0) {
                h_nums = 1;
            }

            if (h_nums * v_nums < size) {
                h_nums += 1;
            }

            var card_size = this.getCardSize();
            var dy = this.getLineH() + 30;
            var dx = card_size.width + 10;
            var sp = new ccui.ImageView(getResPath("RoomMJ/bg.9.png"));
            sp.setScale9Enabled(true);
            sp.setAnchorPoint(cc.p(0.5, 0.5));
            sp.setContentSize(cc.size(dx * v_nums + 64, dy * h_nums));
            sp.setPosition(cc.p(sp.getContentSize().width / 2, sp.getContentSize().height / 2));
            this.addChild(sp);

            var listenTip = new cc.Sprite(getResPath("RoomMJ/listen_tip.png"));
            listenTip.setPosition(cc.p(32, this.getLineH() * h_nums * 0.5));
            sp.addChild(listenTip);

            this.setContentSize(sp.getContentSize());

            var bx = 64 + card_size.width / 2;
            var by = dy / 2;
            this.allLabel = [];
            for (var j = 0; j < size; j++) {
                var mi = parseInt(j % v_nums);
                var mj = parseInt(j / v_nums);
                var huinfo = list[j];

                var tingCard = new MJCard();
                tingCard.setValue(huinfo.Card, 0, CardType.Card_Hand, 0);
                tingCard.setPosition(cc.p(bx + dx * mi, dy * mj + dy / 2 + 25));
                tingCard.setAnchorPoint(cc.p(0.5, 0.5));
                tingCard.setScale(card_size.width / tingCard.getContentSize().width * MJConfig.getTipCardScale());
                sp.addChild(tingCard);

                var s = this.getCardNums(huinfo.Card, huinfo.LeftNum);
                var textlable = new cc.LabelTTF(s + "张", "Thonburi", 20);
                textlable.setPosition(cc.p(tingCard.getPositionX(), dy * mj + 45));
                textlable.setAnchorPoint(cc.p(0.5, 0.5));
                textlable.setColor(cc.color(0xb9, 0xff, 0x66, 255));
                textlable.setTag(huinfo.Card);
                sp.addChild(textlable);
                this.allLabel.push(textlable);


                var scorelable = new cc.LabelTTF(huinfo.HuFanNum + "颗", "Thonburi", 20);
                scorelable.setPosition(cc.p(tingCard.getPositionX(), dy * mj + 20));
                scorelable.setAnchorPoint(cc.p(0.5, 0.5));
                scorelable.setColor(cc.color(0xb9, 0xff, 0x66, 255));
                sp.addChild(scorelable);
            }
        };
    },
    _init_extend: function () {
        this.initMJConfig();
        this.initMJAction();
        var self_table = this;
        //Cards 碰杠去掉闪电
        MJCards.prototype.showLightAnim = function (position) {
        };
        //不要自动胡牌功能
        MJAction.prototype.setAutoOutCardVis = function (value) {
        };
        var super_MJPreTable_ctor = MJPreTable.prototype.ctor;
        MJPreTable.prototype.ctor = function () {
            super_MJPreTable_ctor.call(this);
            this.bg.loadTexture(getResPath(self_table.getBgStr()));
        };
        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };
        //MJCard.
        MJCards.prototype.outMyCard = function (card) {
            this.curOutCard = null;
            this.resetLastOutCard();
            if (card) {
                cc.director.getRunningScene().removeChildByName("tingpai_layer");
                if (this.outCardBtn) this.outCardBtn.setVisible(false);
                card = removeCardByCard(card, this.hand_card[0]);
                var pos = 0;
                if (card) {
                    card.reset();
                    var self = this;
                    card.removeFromParent(true);
                    self.reflashHandCard(pos, true, true);
                    self.handler_out_card_sound(MJModel.players[MJModel.seatid].sex, card.value);
                }
            }
        };
        MJCards.prototype.outHandCard = function (pos, value) {
            this.resetLastOutCard();
            var size = cc.director.getWinSize();
            if (pos == 0 && MJModel.seatid != -1) {
                MJModel.hasCardOutIng = false;
                MJModel.isEnterWait = false;

                MJModel.mj_table.removeChildByName("tingpai_layer");
                if (this.outCardBtn) this.outCardBtn.setVisible(false);
                if (this.isDuoPai(pos)) {
                    var card = null;
                    if (MJModel.isMyPos(pos) && this.curOutCard && this.curOutCard.value == value) {
                        card = this.curOutCard;
                    }
                    if (card == null) card = findCardByValue(value, this.hand_card[pos]);

                    if (card) {
                        card = removeCardByCard(card, this.hand_card[pos]);

                        if (card) {
                            card.reset();
                            MJModel.isEnterWait = true;
                            var self = this;
                            var move_callbck = cc.callFunc(function () {
                                MJModel.isEnterWait = false;
                                card.removeFromParent(true);
                                self.reflashHandCard(pos, true, true);
                                self.addOutCard(pos, value);
                                self.handler_out_card_sound(MJModel.players[MJModel.seatid].sex, card.value);
                            });
                            card.runAction(cc.sequence(cc.moveTo(0.2, MJConfig.getOutCardPos(pos, this.out_card[pos].length)), move_callbck));
                        }
                        else {
                            self.addOutCard(pos, value);
                        }
                    }
                } else {
                    var card = null;
                    var isHaveZiero = true;
                    if (MJModel.getTangPaiFlag(pos)) {
                        isHaveZiero = false;
                        for (var i = 0; i < this.hand_card[pos].length; i++) {
                            if (this.hand_card[pos][i].value == 0) {
                                isHaveZiero = true;
                            }
                        }
                    }

                    card = removeCardByValue(MJModel.isOnVideo || !isHaveZiero ? value : 0, this.hand_card[pos]);
                    if (card) {
                        var begin_pos = card.getPosition();
                        card.removeFromParent(true);
                        this.outHandCardEffct(pos, value, begin_pos);
                    }
                    else {
                        this.outHandCardEffct(pos, value);
                    }
                }
            }
            else {
                var card = null;
                var isHaveZiero = true;
                if (MJModel.getTangPaiFlag(pos)) {
                    isHaveZiero = false;
                    for (var i = 0; i < this.hand_card[pos].length; i++) {
                        if (this.hand_card[pos][i].value == 0) {
                            isHaveZiero = true;
                        }
                    }
                }

                card = removeCardByValue(MJModel.isOnVideo || !isHaveZiero ? value : 0, this.hand_card[pos]);
                if (card) {
                    var begin_pos = card.getPosition();
                    card.removeFromParent(true);
                    this.outHandCardEffct(pos, value, begin_pos);
                }
                else {
                    this.outHandCardEffct(pos, value);
                }
            }
            this.curOutCard = null;
        };
        MJCards.prototype.outHandCardEffct = function (pos, value, out_card_pos) {
            this.outHandCardEffct2(pos, value);
        };
        MJCards.prototype.getGoodPaiSe = function () {
            var wanCount = 0;
            var tiaoCount = 0;
            var tongCount = 0;
            for (var i = 0; i < this.hand_card[0].length; i++) {
                var card = this.hand_card[0][i];
                var paiSe = parseInt(card.value / 16);
                switch (paiSe) {
                    case MJ_TYPE.MJ_TYPE_WAN:
                        wanCount++;
                        break;
                    case MJ_TYPE.MJ_TYPE_TIAO:
                        tiaoCount++;
                        break;
                    case MJ_TYPE.MJ_TYPE_TONG:
                        tongCount++;
                        break;
                    default:
                        break;
                }

            }
            cc.log("wanCount:" + wanCount + "tiaoCount:" + tiaoCount + "tongCount:" + tongCount);
            if (wanCount <= tiaoCount && wanCount <= tongCount) {
                return MJ_TYPE.MJ_TYPE_WAN;
            }
            else if (tiaoCount <= wanCount && tiaoCount <= tongCount) {
                return MJ_TYPE.MJ_TYPE_TIAO;
            }
            else {
                return MJ_TYPE.MJ_TYPE_TONG;
            }
        };

        MJCards.prototype.sortCard = function (a, b) {
            return self_table._sortCard(a, b);
        };
        MJCards.prototype.openHuaZhuClickOnly = function () {
            var lackType = MJModel.lackType;
            if (lackType == -1) {
                return;
            }
            var hasHuaZhu = false;
            for (var i = 0; i < this.hand_card[0].length; i++) {
                var card = this.hand_card[0][i];
                var paiSe = parseInt(card.value / 16);
                if (lackType != -1 && paiSe == lackType) {
                    hasHuaZhu = true;
                    break;
                }
            }

            if (hasHuaZhu) {
                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    var paiSe = parseInt(card.value / 16);
                    if (lackType != -1 && paiSe == lackType) {
                        card.setCardTouchEnable(true);
                        card.setBlackVis(true);
                    } else {
                        card.setCardTouchEnable(false);
                        card.setBlackVis(false);
                    }

                }
            } else {
                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    card.setCardTouchEnable(true);
                    card.setBlackVis(false);
                }
            }
        };
        MJCards.prototype.closeHuaZhuClickOnly = function () {
            if (MJModel.isAutoOutCard || MJModel.isBaoting || MJModel.lackType == -1) {
                return;
            }
            for (var i = 0; i < this.hand_card[0].length; i++) {
                var card = this.hand_card[0][i];
                card.setBlackVis(false);
            }
        };

        MJCards.prototype.setCurChoiceType = function (type) {
            this.curChoiceType = type;
            if (this.curChoiceType == -1) {
                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var handCard = this.hand_card[0][i];
                    if (handCard) {
                        handCard.setCardTouchEnable(true);
                        handCard.setBlackVis(false);
                    }
                }
            } else {
                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var handCard = this.hand_card[0][i];
                    if (handCard && parseInt(handCard.value / 16) != this.curChoiceType) {
                        handCard.setCardTouchEnable(false);
                        handCard.setBlackVis(true);
                    }
                }
            }
        };

        MJCards.prototype.clickHandCardCallback = function (n) {
            if (MJModel.canTouchCard == false) {
                return;
            }
            var card = n;
            if (MJModel.canChoiceMore) {
                if (card.isUp) {
                    card.setUp(false);
                    var upCards = this.getChoiceCards();
                    if (upCards.length == 0) {
                        this.setCurChoiceType(-1);
                    }
                    if (self_table.mChangeBar.getChildByName("sureChoice") != undefined) {
                        if (upCards.length < 3) {
                            self_table.mChangeBar.getChildByName("sureChoice").setEnabled(false);
                        } else {
                            self_table.mChangeBar.getChildByName("sureChoice").setEnabled(true);
                        }
                    }
                }
                else {
                    var upCards = this.getChoiceCards();

                    if (upCards.length == 0) {
                        if (self_table._changeCardType == 0) {
                            this.setCurChoiceType(parseInt(card.value / 16));
                        } else {
                            //换三张不需要强制换一种花色
                            this.setCurChoiceType(-1);
                        }
                    }

                    if (upCards.length < 3) {
                        card.setUp(true);
                    }
                    if (self_table.mChangeBar.getChildByName("sureChoice") != undefined) {
                        if (upCards.length < 2) {
                            self_table.mChangeBar.getChildByName("sureChoice").setEnabled(false);
                        } else {
                            self_table.mChangeBar.getChildByName("sureChoice").setEnabled(true);
                        }
                    }
                }
                return;
            }

            var preCard = null;

            for (var i = 0; i < this.hand_card[0].length; i++) {
                var fcard = this.hand_card[0][i];
                if (fcard) {
                    if (fcard.isUp) preCard = fcard;
                    fcard.setUp(false);
                }
            }

            if (this.outCardBtn) this.outCardBtn.setVisible(false);

            if (preCard && preCard == card) {
                if (MJModel.mj_double_click_style == 1) this.outHandCardCallback(n);
                return;
            }

            card.setUp(true);

            var hasTingPaiInfo = false;

            try {
                MJModel.mj_table.removeChildByName("tingpai_layer");
                for (var i = 0; i < MJModel.listen_info.length; i++) {
                    var tli = MJModel.listen_info[i];
                    if (card.value == tli.OutCard) {
                        if (tli.HuInfo.length >= 10) {
                            break;
                        }
                        var curTingPaiLayer = new TingPaiLayer();
                        curTingPaiLayer.show2(tli.HuInfo);

                        curTingPaiLayer.setName("tingpai_layer");
                        MJModel.mj_table.addChild(curTingPaiLayer, 100);
                        hasTingPaiInfo = true;
                        break;
                    }
                }
            } catch (e) {
                Log(this, e);
            }


            if (this.outCardBtn == null) {
                this.createOutCardBtn();
            }
            else {
                this.outCardBtn.setVisible(true);
            }

            if (this.outCardBtn) {
                var size = cc.director.getWinSize();
                this.outCardBtn.setPosition(cc.p(size.width - 120, 189));
            }
        };

        //初始化定缺标志
        MJPlayer.prototype.initLackFlag = function (id) {
            this.lack_flag = new cc.Sprite(getResPath("linshui/chengdu/tiao_icon.png"));
            this.lack_flag.setAnchorPoint(cc.p(0.5, 0.5));
            this.lack_flag.setPosition(cc.p(this.lack_flag.getContentSize().width / 2 - 0, this.m_size.height + this.lack_flag.getContentSize().height / 2 + 0));
            this.lack_flag.setVisible(false);
            this.lack_flag.setScale(1.2);
            this.addChild(this.lack_flag, 100);

            if (id == 2) {
                this.ready_flag.setPosition(cc.p(this.m_size.width / 2, -this.ready_flag.getContentSize().height / 2 - 20));
                this.lack_flag.setPosition(cc.p(this.m_size.width + this.lack_flag.getContentSize().width / 2 - 0, this.m_size.height - this.lack_flag.getContentSize().height / 2 + 0));
            } else {
                this.ready_flag.setPosition(cc.p(this.m_size.width / 2, this.m_size.height + this.ready_flag.getContentSize().height / 2));
            }
            var size = cc.director.getWinSize();

            if (id == 1 || id == 2) {
                if (id == 1) {
                    this.ready_flag.setPosition(cc.p(0, this.m_size.height - 10));
                } else {
                    this.ready_flag.setPosition(cc.p(0, this.m_size.height - 30));
                }
            }
            else {
                this.ready_flag.setPosition(cc.p(this.m_size.width - 10, this.m_size.height - 10));
            }

            if (id == 1 || id == 2) {
                if (id == 1) {
                    this.banker_flag.setPosition(cc.p(this.m_size.width - this.banker_flag.getContentSize().width / 2 + 10, this.m_size.height - this.banker_flag.getContentSize().height / 2 - 8));
                } else {
                    this.banker_flag.setPosition(cc.p(this.m_size.width - this.banker_flag.getContentSize().width / 2 + 10, this.m_size.height - this.banker_flag.getContentSize().height / 2 - 12));
                }
            }
            else {
                this.banker_flag.setPosition(cc.p(this.banker_flag.getContentSize().width / 2 - 10, this.m_size.height - this.banker_flag.getContentSize().height / 2 - 10));
            }
        };

        MJPlayer.prototype.setLackType = function (lack) {
            this.lack_flag.setVisible(true);
            if (lack == MJ_TYPE.MJ_TYPE_TIAO) {
                this.lack_flag.setTexture(getResPath("linshui/chengdu/tiao_icon.png"));
            }
            else if (lack == MJ_TYPE.MJ_TYPE_TONG) {
                this.lack_flag.setTexture(getResPath("linshui/chengdu/tong_icon.png"));
            }
            else if (lack == MJ_TYPE.MJ_TYPE_WAN) {
                this.lack_flag.setTexture(getResPath("linshui/chengdu/wan_icon.png"));
            }
            else {
                this.lack_flag.setVisible(false);

            }
        };
        var superreset = MJPlayer.prototype.reset;
        MJPlayer.prototype.reset = function () {
            superreset.call(this);
            this.setLackType(-1);
        };

        var supersetId = MJPlayer.prototype.setId;
        MJPlayer.prototype.setId = function (id) {
            supersetId.call(this, id);
            this.initLackFlag(id);
            this.reflashNameMoneyPosition();
        };
        MJPlayer.prototype.reflashNameMoneyPosition = function () {
            if (this.pid == 0) {
                if (MJModel.mj_bg_use == 0) {
                    this.rootNode.getChildByName("name_bg").setPosition(cc.p(70, 11));
                    this.rootNode.getChildByName("money_bg").setPosition(cc.p(70, -20));
                } else {
                    this.rootNode.getChildByName("name_bg").setPosition(cc.p(0, -40));
                    this.rootNode.getChildByName("money_bg").setPosition(cc.p(0, -71));
                }
            }
        };

        var super_setOperator = MJAction.prototype.setOperator;
        MJAction.prototype.setOperator = function (operat) {
            this.removeChildByName("ChooseGang_selectLayer");
            if (operat == -1 || operat == 0 || operat == null || operat == undefined) {
                for (var i = 0; i < this.opBtns.length; i++) {
                    this.opBtns[i].setVisible(false);
                }
                return false;
            }
            super_setOperator.call(this, operat);
            if ((operat & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || ( operat & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                MJModel.mj_table.myselfOpenOutCard(false);
            }
            return true;
        };
    },

    reflashSetting: function (isInit) {
        this._super(isInit);
        if (this.mChangeBar && this.mChangeBar.getChildByName("sureChoice") != undefined) {
            this.mChangeBar.getChildByName("sureChoice").setEnabled(false);
        }

        var pos = 0
        if (this.room_Card && this.room_Card.isDuoPai(pos)) {
            var card = this.room_Card.hand_card[pos][13];
            if (card) {
                card.setMyPosition(MJConfig.getMoCardPos(pos));
                this.room_Card.hand_card[pos].splice(13, 1);
                this.room_Card.reflashHandCard(pos);
                this.room_Card.hand_card[pos].push(card);
            }

            this.room_Card.openHuaZhuClickOnly();
        }

        //更新坐标
        for (var i = 0; i < MJModel.players.length; i++) {
            var player = MJModel.players[i];
            var hu_tip = this._all_huType_tip[i];
            Log(this, "lin=player=" + player);
            if (hu_tip && player) {
                if (i != 2) {
                    hu_tip.setPosition(MJConfig.getPlayerPos(i).x, MJConfig.getPlayerPos(i).y + 70);
                }
            }
        }
    },

    _handler_game_record: function (data, canDelay) {
        //-----新总结算界面
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var gameType = "邻水麻将·4人";
        if (MJModel.mj_roomType == 1) {
            gameType = "邻水麻将·3人";
        } else if (MJModel.mj_roomType == 2) {
            gameType = "邻水麻将·2人";
        }
        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }

        for (var i = 0; i < gameRecord.MostWinScoreUser.length; i++) {
            var seatId = gameRecord.MostWinScoreUser[i];
            if (seatId != 255) {
                _winSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            var player = MJModel.players[i];
            var arrStr = ["坐庄次数", "胡牌次数", "点杠次数", "超时次数"];
            var arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.DianGangTimes, recoreInfo.outtime_num];

            if (player && player.uid != -1) {
                addX = 39 + (i * 302);
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, _winSeatid[i], _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }

            if (recoreInfo.totalscore != 0) {
                has_result = true;
            }
        }
        bigResult.refresh(PlayerNumber);
        this.release();
    },
    _handler_server_change_start: function (data, canDelay) {
        var changeInfo = parsePacket("proto.game.guanganmj.AckUserChangeCardStart", data);
        cc.log("_handler_server_change_start");
        if (changeInfo.isTimeOut == 0) {
            MJModel.canChoiceMore = true;
            MJModel.canTouchCard = true;
            this.room_Info.showTime(MJModel.changeTime);
            var changeText = this.mChangeBar.getChildByName("changetext_bg").getChildByName("changetext");
            if (this._changeCardType == 0) {
                changeText.setString("请选同花色的三张牌进行交换");
            } else {
                changeText.setString("请选随意三张牌进行交换");
            }
            this.mChangeBar.setVisible(true);
            this._isShowWaitchange(true);
        }
    },
    _handler_server_change: function (data, canDelay) {
        cc.log("_handler_server_change");
        var ackLackOk = parsePacket("proto.game.guanganmj.AckSelectChangeCardOk", data);
        var seatid = ackLackOk.chairID;
        var isOk = ackLackOk.isOk;

        if (isOk[0]) {
            var pos = MJModel.getPosBySeatid(seatid[0]);
            if (pos == 0) {
                this.mChangeBar.setVisible(false);
            }
            if (this._changeCard[pos]) {
                this._changeCard[pos].setTexture(getResPath("linshui/chengdu/ok.png"));
            }
        } else {
            var pos = MJModel.getPosBySeatid(seatid[0]);
            if (pos == 0) {
                PlatformHelper.showToast("换牌失败，请重新选择");
                this.room_Card.reflashHandCard(0, true);
                this.room_Card.setCurChoiceType(-1);
                this.mChangeBar.setVisible(true);
                MJModel.canTouchCard = true;
                MJModel.canChoiceMore = true;
            }
        }
    },
    _handler_server_change_end: function (data, canDelay) {
        cc.log("_handler_server_change_end");
        if (MJModel.seatid != -1) {
            //在座位上
            this.mChangeBar.setVisible(false);
            MJModel.canChoiceMore = false;
            MJModel.canTouchCard = false;
            var changeCard = parsePacket("proto.game.guanganmj.AckChangeCard", data);
            this.set_roomcard_up(false);
            var pos = MJModel.getPosBySeatid(changeCard.chairID);

            for (var i = 0; i < changeCard.oldCard.length; i++) {
                cc.log("---oldCard--: " + changeCard.oldCard[i])
                this.room_Card.removeHandCard(pos, changeCard.oldCard[i]);
            }
            for (var i = 0; i < changeCard.Card.length; i++) {
                cc.log("new_Card:" + changeCard.Card[i]);
                this.room_Card.addHandCard(pos, changeCard.Card[i]);
            }

            this.room_Card.reflashHandCard(pos, true);
            this.room_Card.setCurChoiceType(-1);
        }
        this._isShowWaitchange(false);
    },

    set_roomcard_up: function (isUp) {
        for (var i = 0; i < this.room_Card.hand_card[0].length; i++) {
            var fcard = this.room_Card.hand_card[0][i];
            if (fcard.isUp != isUp) {
                fcard.setUp(isUp);
            }
        }
    },

    _handler_server_lack_start: function (data, canDelay) {
        cc.log("_handler_server_lack_start");
        var lackInfo = parsePacket("proto.game.guanganmj.AckUserLackStart", data);
        if (MJModel.seatid != -1 && lackInfo.isTimeOut == 0) {
            this._isShowWaitLack(true);
            if (canDelay) {
                this.room_Info.showTime(MJModel.lackTime);
                this.mPaiSeBar.setGoodPaiSe(this.room_Card.getGoodPaiSe());
                this.mPaiSeBar.setVisible(true);
            }
        }
    },
    _handler_server_lack: function (data, canDelay) {
        cc.log("_handler_server_lack");
        var ackLackOk = parsePacket("proto.game.guanganmj.AckUserLackTypeOk", data);
        var seatid = ackLackOk.chairID;
        var isOk = ackLackOk.isOk;
        for (var i = 0; i < seatid.length; i++) {
            if (isOk[seatid[i]]) {
                var pos = MJModel.getPosBySeatid(seatid[i]);
                if (pos == 0) {
                    this.mPaiSeBar.setVisible(false);
                }
                if (this._lackDingque[pos]) {
                    this._lackDingque[pos].setTexture(getResPath("linshui/chengdu/ok.png"));
                }
            }
        }
    },
    _handler_server_lack_end: function (data, canDelay) {
        cc.log("_handler_server_lack_end");
        this.mPaiSeBar.setVisible(false);
        var lackType = parsePacket("proto.game.guanganmj.AckUserLackType", data);
        for (var i = 0; i < lackType.LackType.length; i++) {
            var lack = lackType.LackType[i];
            var pos = MJModel.getPosBySeatid(i);
            this.players[pos].setLackType(lack);

            //if (MJModel.seatid == i) {
            //    MJModel.lackType = lack;
            //    this.room_Card.reflashHandCard(0);
            //}

            if (MJModel.seatid == i) {
                MJModel.lackType = lack;
                if (this.room_Card.isDuoPai(pos)) {
                    var card = this.room_Card.hand_card[pos][13];
                    card.setMyPosition(MJConfig.getMoCardPos(pos));
                    this.room_Card.hand_card[pos].splice(13, 1);
                    this.room_Card.reflashHandCard(pos);
                    this.room_Card.hand_card[pos].push(card);

                } else {
                    this.room_Card.reflashHandCard(pos);
                }
            }
        }
        this._isShowWaitLack(false);
    },
    handler_server_scene_info_uc: function (chengdu_scene, canDelay) {
        var ackGameFree = chengdu_scene.GameSence;
        var sceneStatus = ackGameFree.SceneStatus;
        this.mPaiSeBar.setVisible(false);
        this.mChangeBar.setVisible(false);
        MJModel.mj_hu_flag = [0, 0, 0, 0];

        if (ackGameFree.RoomConfigID.indexOf(2000002) != -1)MJModel.changMode = 1;
        if (ackGameFree.RoomConfigID.indexOf(2000003) != -1)MJModel.changMode = 3;
        this.updateBg(true);

        //定缺
        var lack = chengdu_scene.dingquese;
        if (sceneStatus == 3) {
            for (var i = 0; i < lack.length; i++) {
                var lackType = lack[i];
                var pos = MJModel.getPosBySeatid(i);
                this.players[pos].setLackType(lackType);
                if (i == MJModel.seatid) {
                    MJModel.lackType = lack[i];
                }
            }
        }
        //恢复胡牌标志 （炮胡，自摸）
        if (chengdu_scene.nHuType) {
            for (var i = 0; i < chengdu_scene.nHuType.length; i++) {
                var pos = MJModel.getPosBySeatid(i);
                var type = chengdu_scene.nHuType[i];
                this._show_hu_tip(pos, type);
                if (type == 1) {
                    MJModel.mj_hu_flag[pos] = 1;
                }
            }
        }

        this._super(ackGameFree, canDelay);
        this._setGameType();
        if (sceneStatus == 2) {
            this.mPaiSeBar.setGoodPaiSe(this.room_Card.getGoodPaiSe());
            this.mPaiSeBar.setVisible(true);
            var cont = 0;
            var lackOk = chengdu_scene.dingqueisok;
            for (var i = 0; i < lackOk.length; i++) {
                if (lackOk[i]) {
                    cont++;
                }
            }
            if (cont != 4) {
                this._isShowWaitLack(true);
                MJModel.canChoiceMore = false;
                MJModel.canTouchCard = false;
                for (var i = 0; i < lackOk.length; i++) {
                    if (lackOk[i]) {
                        var pos = MJModel.getPosBySeatid(i);
                        if (this._lackDingque[pos]) {
                            this._lackDingque[pos].setTexture(getResPath("linshui/chengdu/ok.png"));
                        }
                        //如果自己已定缺完成，隐藏定缺界面
                        if (i == MJModel.seatid) {
                            this.mPaiSeBar.setVisible(false);
                        }
                    }
                }
            }
        }
        if (this.mChangeBar.getChildByName("sureChoice") != undefined) {
            this.mChangeBar.getChildByName("sureChoice").setEnabled(false);
        }
        if (sceneStatus == 1) {
            var changeText = this.mChangeBar.getChildByName("changetext_bg").getChildByName("changetext");
            if (this._changeCardType == 0) {
                changeText.setString("请选同花色的三张牌进行交换");
            } else {
                changeText.setString("请选随意三张牌进行交换");
            }
            this.mChangeBar.setVisible(true);
            MJModel.canTouchCard = true;
            MJModel.canChoiceMore = true;
            cont = 0
            var changeOk = chengdu_scene.huanzhangisok;
            for (var i = 0; i < changeOk.length; i++) {
                if (changeOk[i]) {
                    cont++;
                }
            }
            if (cont != 4) {
                this._isShowWaitchange(true);
                for (var i = 0; i < changeOk.length; i++) {
                    if (changeOk[i]) {
                        var pos = MJModel.getPosBySeatid(i);
                        if (this._changeCard[pos]) {
                            this._changeCard[pos].setTexture(getResPath("linshui/chengdu/ok.png"));
                        }
                        //如果自己换牌完成，隐藏换牌界面
                        if (i == MJModel.seatid) {
                            MJModel.canChoiceMore = false;
                            MJModel.canTouchCard = false;
                            this.mChangeBar.setVisible(false);
                        }
                    }
                }
            }
        }
        //炮胡牌
        if (chengdu_scene.nDianPaoHuCard) {
            for (var i = 0; i < chengdu_scene.nDianPaoHuCard.length; i++) {
                if (chengdu_scene.nDianPaoHuCard[i] != 255) {
                    var dianpaoseadid = chengdu_scene.stdianpaoinfo[i].seatid;
                    var dianpaopos = MJModel.getPosBySeatid(dianpaoseadid);
                    var paohuSeatId = MJModel.getPosBySeatid(i);
                    this._show_pahu_card(paohuSeatId, chengdu_scene.nDianPaoHuCard[i], dianpaopos);
                }
            }
        }
        //自摸牌倒出来
        if (chengdu_scene.nZiMoHuCard) {
            for (var i = 0; i < chengdu_scene.nZiMoHuCard.length; i++) {
                if (chengdu_scene.nZiMoHuCard[i] != 255) {
                    var huCard = chengdu_scene.nZiMoHuCard[i];
                    var pos = MJModel.getPosBySeatid(i);
                    this.room_Card.removeHandCard(pos, huCard);
                    this.room_Card.initMoCard(pos, huCard, true);
                    var length = this.room_Card.hand_card[pos].length;
                    this.room_Card.hand_card[pos][length - 1].setValue(huCard, pos, CardType.Card_End, length - 1);
                }
            }
        }
    },
    handler_server_player_wait_bc: function (data, canDelay) {

    },
    _setGameType: function () {
        var difenStr = MJModel.base_money + "底分";

        var play_id = [];

        play_id.push(difenStr);
        if (MJModel.RoomConfigID.indexOf(2000002) != -1) {
            play_id.push("可少人开局");
        } else if (MJModel.RoomConfigID.indexOf(2000003) != -1) {
            play_id.push("可少人开局");
        }

        if (MJModel.RoomConfigID.indexOf(1043001) != -1 && MJModel.RoomConfigID.indexOf(1043010) == -1) {
            play_id.push("定缺");
        }
        if (MJModel.RoomConfigID.indexOf(1043002) != -1) {
            play_id.push("换三张");
        }

        if (MJModel.RoomConfigID.indexOf(1043004) != -1) {
            play_id.push("字牌算飞机");
        }

        if (MJModel.RoomConfigID.indexOf(1043005) != -1) {
            play_id.push("字牌火箭");
        }
        if (MJModel.RoomConfigID.indexOf(1043006) != -1) {
            play_id.push("大三元翻倍");
        }
        if (MJModel.RoomConfigID.indexOf(1043007) != -1) {
            play_id.push("过水加颗不可胡");
        }
        if (MJModel.RoomConfigID.indexOf(1043008) != -1) {
            play_id.push("十八学士");
        }
        if (MJModel.RoomConfigID.indexOf(1043009) != -1) {
            play_id.push("门大叠加");
        }
        if (MJModel.RoomConfigID.indexOf(1043011) != -1) {
            play_id.push("100颗封顶");
        }
        if (MJModel.RoomConfigID.indexOf(1043012) != -1) {
            play_id.push("离开10分钟解散");
        }
        //---
        if (MJModel.RoomConfigID.indexOf(1301001) != -1) {
            play_id.push("去万牌");
        }

        if (MJModel.RoomConfigID.indexOf(1303001) != -1) {
            play_id.push("过水加颗可胡");
        }
        if (MJModel.RoomConfigID.indexOf(1303002) != -1) {
            play_id.push("过水加颗不可胡");
        }

        if (MJModel.RoomConfigID.indexOf(1302001) != -1) {
            play_id.push("换三张同花色");
            this._changeCardType = 0;
        }
        if (MJModel.RoomConfigID.indexOf(1302002) != -1) {
            play_id.push("换三张不同花色");
            this._changeCardType = 1;
        }
        if (MJModel.RoomConfigID.indexOf(1301003) != -1) {
            play_id.push("庄家翻倍");
        }
        if (MJModel.RoomConfigID.indexOf(1301004) != -1) {
            play_id.push("比番");
        }
        var gameDes = "";
        for (var i = 0; i < play_id.length; i++) {
            gameDes += play_id[i];
            if (i != play_id.length - 1) {
                gameDes += ",";
            }
        }

        this.gameDes = gameDes;

        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", this.gameDes);
    },
    //胡tip
    _show_hu_tip: function (pos, type) {
        if (pos == -1 || type == 3 || type == 255) return;
        var size = cc.director.getWinSize();
        var tip_sp = this._all_huType_tip[pos];
        if (tip_sp == null) {
            tip_sp = new ccui.ImageView();
            this._all_huType_tip[pos] = tip_sp;
            this.addChild(tip_sp, 50);
        }
        if (tip_sp) {
            var tip_sp_name = "";
            if (type == 2) {
                tip_sp_name = "linshui/tip/paohu.png";
            } else if (type == 1) {
                tip_sp_name = "linshui/tip/zimo.png";
            }
            if (tip_sp_name != "") {
                tip_sp.loadTexture(getResPath(tip_sp_name));
                tip_sp.setVisible(true);
                var begin = cc.p(0, 0);
                if (pos == 0) {
                    begin.x = size.width / 2;
                    begin.y = 200;
                } else if (pos == 2) {
                    begin.x = size.width / 2;
                    begin.y = size.height - 150;
                } else if (pos == 1) {
                    begin.x = size.width - 200;
                    begin.y = size.height / 2;
                } else if (pos == 3) {
                    begin.x = 200;
                    begin.y = size.height / 2;
                }
                tip_sp.setPosition(begin);
            }
        }
    }
    ,
    _hide_all_tip: function () {
        for (var i = 0; i < this._all_huType_tip.length; i++) {
            if (this._all_huType_tip[i]) this._all_huType_tip[i].setVisible(false);
        }
    },

    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.value;
            if (typeof b === "object") bv = b.value;
            //花猪放在最右边
            var lackType = MJModel.lackType;
            if (lackType != -1) {
                var paiSea = parseInt(av / 16);
                var paiSeb = parseInt(bv / 16);
                if (paiSea == lackType && paiSeb != lackType)return -1;
                if (paiSea != lackType && paiSeb == lackType)return 1;
            }
            return bv - av;
        } catch (e) {
            return 0;
        }
    },
    _createWaitLack: function () {
        for (var i = 0; i < 4; i++) {
            if (this._lackDingque[i] == null) {
                if (i == 0) {
                    this._lackDingque[i] = new cc.Sprite();
                } else {
                    this._lackDingque[i] = new cc.Sprite(getResPath("linshui/chengdu/waitDingque.png"));
                }
                this._lackDingque[i].setVisible(false);
                this._lackDingque[i].setPosition(this._showLackChangePos(i));
                this.addChild(this._lackDingque[i], 1);
            }
        }
    },
    _isShowWaitLack: function (flag) {
        if (flag) {
            for (var i = 0; i < 4; i++) {
                if (this._lackDingque[i]) {
                    this._lackDingque[i].setVisible(true);
                }
            }
        } else {
            for (var i = 0; i < 4; i++) {
                if (this._lackDingque[i]) {
                    if (i == 0) {
                        this._lackDingque[i].setTexture("");
                    } else {
                        this._lackDingque[i].setTexture(getResPath("linshui/chengdu/waitDingque.png"));
                    }
                    this._lackDingque[i].setVisible(false);
                }
            }
        }
        if (MJModel.mj_roomType == 1) {
            if (this._lackDingque[2]) {
                this._lackDingque[2].setVisible(false);
            }
        }
        if (MJModel.mj_roomType == 2) {
            if (this._lackDingque[1]) {
                this._lackDingque[1].setVisible(false);
            }
            if (this._lackDingque[3]) {
                this._lackDingque[3].setVisible(false);
            }
        }
    },
    _createWaitchange: function () {
        for (var i = 0; i < 4; i++) {
            if (this._changeCard[i] == null) {
                if (i == 0) {
                    this._changeCard[i] = new cc.Sprite();
                } else {
                    this._changeCard[i] = new cc.Sprite(getResPath("linshui/chengdu/waitXuanpai.png"));
                }
                this._changeCard[i].setVisible(false);
                this._changeCard[i].setPosition(this._showLackChangePos(i));
                this.addChild(this._changeCard[i], 1);
            }
        }
    },
    _isShowWaitchange: function (flag) {
        if (flag) {
            for (var i = 0; i < 4; i++) {
                if (this._changeCard[i]) {
                    this._changeCard[i].setVisible(true);
                }
            }
        } else {
            for (var i = 0; i < 4; i++) {
                if (this._changeCard[i]) {
                    if (i == 0) {
                        this._changeCard[i].setTexture("");
                    } else {
                        this._changeCard[i].setTexture(getResPath("linshui/chengdu/waitXuanpai.png"));
                    }
                    this._changeCard[i].setVisible(false);
                }
            }
        }

        if (MJModel.mj_roomType == 1) {
            if (this._changeCard[2]) {
                this._changeCard[2].setVisible(false);
            }
        }
        if (MJModel.mj_roomType == 2) {
            if (this._changeCard[1]) {
                this._changeCard[1].setVisible(false);
            }
            if (this._changeCard[3]) {
                this._changeCard[3].setVisible(false);
            }
        }
    },
    //等待定缺，等待换牌，坐标
    _showLackChangePos: function (pos) {
        var size = cc.director.getWinSize();
        var begin = cc.p(0, 0);
        if (MJModel.isOnVideo) {
            if (pos == 0) {
                begin.x = size.width / 2;
                begin.y = 195;
            } else if (pos == 1) {
                begin.x = size.width - 275;
                begin.y = 400;
            } else if (pos == 2) {
                begin.x = size.width / 2;
                begin.y = size.height - 170;
            } else {
                begin.x = 275;
                begin.y = 400;
            }
        } else {
            if (pos == 0) {
                begin.x = size.width / 2;
                begin.y = 195;
            } else if (pos == 1) {
                begin.x = size.width - 260;
                begin.y = 400;
            } else if (pos == 2) {
                begin.x = size.width / 2;
                begin.y = size.height - 145;
            } else {
                begin.x = 255;
                begin.y = 400;
            }
        }
        return begin;
    },

    handler_server_peng_kang_bc: function (data, canDelay) {
        var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);

        var seatid = ackBcOpResult.ChairID;
        var out_seatid = ackBcOpResult.OutCardChairID;
        var OpType = ackBcOpResult.OpType;
        var OpType2 = ackBcOpResult.OpType2;
        var card = ackBcOpResult.Card;
        var scores = ackBcOpResult.Score;
        var pos = MJModel.getPosBySeatid(seatid);
        var out_pos = MJModel.getPosBySeatid(out_seatid);

        this._check_tip_operate_card(0, 0);

        if ((OpType & ActionType.TYPE_PASS) != ActionType.TYPE_PASS && (OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
            var pos = MJModel.getPosBySeatid(seatid);
            var zimo = this.room_Card.isDuoPai(pos);
            var player = MJModel.players[seatid];
            var type = 2;
            if (zimo) type = 1;
            this._show_hu_tip(pos, type);
            if (OpType2 == 5) {
                //抢杠胡也让杠成功，不用加到出牌区
                 this.room_Card.changeWanGang(out_pos, PengType.Peng_Peng, card);

                //多删除一次手牌 防止出错 理乱上抢杠的时候 他的手牌上已经没有这个牌 所以多删除一次也没有bug
                if (this.room_Card.isDuoPai(out_pos)) {
                    this.room_Card.removeHandCard(out_pos, card, 1);
                }
                //避免双抢杠的时候 会出两次牌
                // if (this.room_Card.out_card[out_pos].length == 0 || this.room_Card.out_card[out_pos][this.room_Card.out_card[out_pos].length - 1].value != card) {
                //     this.room_Card.addOutCard(out_pos, card);
                // }

                this._show_pahu_card(pos, card, out_pos);

                if (player && canDelay) {
                    var effect = "qianggang";
                    this._show_hu_effect(pos, effect);
                }
            } else if (zimo == 1) {
                var length = this.room_Card.hand_card[pos].length;
                if (this.room_Card.hand_card[pos][length - 1].value != ackBcOpResult.Card) {
                    //天胡情况下
                    this.room_Card.removeHandCard(pos, ackBcOpResult.Card, 1);
                    this.room_Card.reflashHandCard(pos, true);
                    this.room_Card.initMoCard(pos, ackBcOpResult.Card, true);
                    this.room_Card.hand_card[pos][length - 1].setValue(ackBcOpResult.Card, pos, CardType.Card_End, length - 1);
                } else {
                    this.room_Card.hand_card[pos][length - 1].setValue(ackBcOpResult.Card, pos, CardType.Card_End, length - 1);
                }
            } else {
                MJModel.cur_seat = seatid;
                if (this.room_Card.out_card[out_pos].length != 0 && this.room_Card.out_card[out_pos][this.room_Card.out_card[out_pos].length - 1].value == card) {
                    this.room_Card.removeOutCard(out_pos, card, false);
                    this.room_Card.setCurCardTip(false);
                }
                this._show_pahu_card(pos, card, out_pos);
            }
            if (player && canDelay) {
                var effect = "gang";
                if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                    var zimo = this.room_Card.isDuoPai(pos);
                    effect = "hu";
                    if (zimo) {
                        effect = "zimo";
                    }

                    if (OpType2 == 5 || OpType2 == 11) {
                        effect = "qiangganghu";
                    }
                }
                else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                    effect = "peng";
                }
                else if ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI || (OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                    effect = "chi";
                }

                this.handler_op_sound(pos, player.sex, OpType, OpType2, effect);
                this.handler_op_effect(pos, out_pos, player.sex, OpType, OpType2, effect);
            }
            return;
        }
        this._super(data, canDelay);
    },
    _show_pahu_card: function (pos, cardValue, dianpaopos) {
        var card = new MJCard();
        card.setValue(cardValue, pos, CardType.Card_End, 0);
        card.setPosition(MJConfig.getEndCardMoPos(pos));
        card.setStoreColor(cc.color(255, 249, 137));
        card.setName("paohu_card");
        this.addChild(card, 1);
        MJModel.mj_mo_cards[pos] = -1;
        this._allPaoCard[pos] = card;

        var p = card.getChildByName("sprite");
        var m_size = p.getContentSize();
        var icon = new cc.Sprite(getResPath("linshui/tip/hu" + dianpaopos + ".png"));
        icon.setName("icon");
        this._flagDirection(pos, icon, m_size);
        card.addChild(icon, 2);
    },
    //每个方向角标对应
    _flagDirection: function (pos, flag, m_size) {
        if (pos == 0) {
            flag.setPosition(cc.p(m_size.width / 2, m_size.height));
            flag.setAnchorPoint(0.5, 0);
        } else if (pos == 1) {
            flag.setPosition(cc.p(0, m_size.height / 2));
            flag.setAnchorPoint(1, 0.5);
        } else if (pos == 2) {
            flag.setPosition(cc.p(m_size.width / 2, 0));
            flag.setAnchorPoint(0.5, 1);
        } else if (pos == 3) {
            flag.setPosition(cc.p(m_size.width, m_size.height / 2));
            flag.setAnchorPoint(0, 0.5);
        }
    },
    _clearAllPaoCard: function () {
        try {
            for (var i = 0; i < this._allPaoCard.length; i++) {
                if (this._allPaoCard[i]) {
                    this._allPaoCard[i].removeFromParent(true);
                    this._allPaoCard[i] = null;
                }
            }
        } catch (e) {

        }
    },
    _show_hu_effect: function (pos, name) {
        var effect_name = "";
        if (name == "qianggang") {
            effect_name = "effects_mjxqgh";
            ccs.armatureDataManager.addArmatureFileInfo(getResPath("RoomMJ/effect2/qghu/effects_mjxqgh.ExportJson"));
        }
        try {
            if (effect_name != "") {
                var armature = new ccs.Armature(effect_name);
                if (armature != null) {
                    var animation = armature.getAnimation();
                    if (animation) {
                        if (typeof animation.playWithIndex === "function") {
                            animation.playWithIndex(0, -1, 0);

                            var begin = MJConfig.getOperatorTipPos(pos);
                            armature.setPosition(begin);
                            armature.setName("hu_effect");
                            this.room_Tip.addChild(armature, 10000);
                        }
                    }
                }
            }
        } catch (e) {

        }
    },
    handler_server_operate_notify_bc: function (data, canDelay) {
        var ackOpNotify = parsePacket("proto.game.AckOpNotify", data);
        var seatid = ackOpNotify.ChairID;
        var operat = ackOpNotify.OpType;
        var card = ackOpNotify.Card;

        this._super(data, canDelay);

        if (MJModel.isMyPlayer(seatid)) {
            this._check_tip_operate_card(operat, card);
        }
    }
    ,
    handlerAutoUpTableReady: function (nums, selfIsReady) {
        if (MJModel.seatid == -1 && nums < 4) {
            this.actionCallBack("uptable");
        }
        else if (selfIsReady == false) {
            if (MJModel.canQuxiaoZhun()) {
                if (MJModel.roomState != 0) this.actionCallBack("ready");
            } else {
                this.actionCallBack("ready");
            }
        }
    },
    handler_server_game_end_bc: function (chengduGameEnd, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            var ackGameEnd = chengduGameEnd.gameend;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);
            this.room_Info.stopTime();
            this.room_Tip.hideOutCardTip();

            var show_all_handcard = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var show_liuju = cc.callFunc(function () {
                if (ackGameEnd.EndState == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
            });

            var show_end_score = cc.callFunc(function () {
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var update_all_money = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var game_end_reset = cc.callFunc(function () {
                self.room_Action.setReady2Visible(false);
                var result = new MJResult_CHONGQING();
                result.setName("RoomMJResultDetail");
                self.addChild(result, 100000);
                result.updateContentView(self, chengduGameEnd);
            });

            var show_all_public_card = cc.callFunc(function () {
                self.gameend_showAllPublicCard(ackGameEnd);
            });

            if (MJModel.isOnVideo && canDelay == false) {
                this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(2), update_all_money));
                return;
            }

            this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(1), show_liuju, cc.delayTime(0), show_end_score, cc.delayTime(0), update_all_money, cc.delayTime(1), game_end_reset));
        } catch (e) {
            ERROR(this, e);
        }
    },

    _check_tip_operate_card: function (operat, value) {
        try {
            if ((operat & ActionType.TYPE_PENG) == ActionType.TYPE_PENG || (operat & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
                for (var i = 0; i < this.room_Card.hand_card[0].length; i++) {
                    var card = this.room_Card.hand_card[0][i];
                    if (card.value == value) {
                        card.setChoiceTipShow(true);
                    }
                }
                return;
            }

            if ((operat & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (operat & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                for (var j = 0; j < MJModel.gang_info.length; j++) {
                    for (var i = 0; i < this.room_Card.hand_card[0].length; i++) {
                        var card = this.room_Card.hand_card[0][i];
                        if (card.value == MJModel.gang_info[j].curCard) {
                            card.setChoiceTipShow(true);
                        }
                    }
                }
                return;
            }

            for (var i = 0; i < this.room_Card.hand_card[0].length; i++) {
                var card = this.room_Card.hand_card[0][i];
                card.setChoiceTipShow(false);
            }
        } catch (e) {
            Log(this, e);
        }
    }
    ,
    //定花色点击事件回调
    onPaiSeClick: function (ref) {
        var name = ref.getName();

        var type;
        if (name == "tiaoChoice") {
            type = MJ_TYPE.MJ_TYPE_TIAO;
        } else if (name == "tongChoice") {
            type = MJ_TYPE.MJ_TYPE_TONG;
        } else if (name == "wanChoice") {
            type = MJ_TYPE.MJ_TYPE_WAN;
        }
        sendLackCard(type);
        this.mPaiSeBar.setVisible(false);

    },
    //换牌点击事件回调
    onChangeClick: function (ref) {
        var name = ref.getName();

        // if (name == "sureChoice") {
        var upCards = this.room_Card.getChoiceCards();
        sendChangeCard(1, upCards);
        // }
        // else if (name == "cancelChoice") {
        //     sendChangeCard(0, null);
        // }

        this.mChangeBar.setVisible(false);
        MJModel.canChoiceMore = false;
        MJModel.canTouchCard = false;
    },

    myselfOpenOutCard: function (IsMoCard) {
        this._super(IsMoCard);
        this.room_Card.openHuaZhuClickOnly();
    },
    myselfCloseOutCard: function () {
        this._super();
        this.room_Card.closeHuaZhuClickOnly();
    },
    handler_out_card_sound: function (sex, card) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("linshui/sound/chupai/sc_%1_%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "woman" : "man", Utils.toHex2(card)));
        } else {
            this._super(sex, card);
        }
    },

    handler_op_sound: function (pos, sex, OpType, OpType2, effect) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
            if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                effect = "gang";
            } else if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                effect = "hu";
                var zimo = this.room_Card.isDuoPai(pos);
                if(zimo) {
                    effect = "zimo";
                }
            } else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                effect = "peng";
            }
            cc.log("lin=handler_op_sound="+effect);
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("linshui/sound/operator/sc_%1_%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "woman" : "man", effect));
        } else {
            this._super(pos, sex, OpType, OpType2, effect);
        }
    },

    test: function (dt) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;
        if (tempCount == 5 && true) {
            var packet = {
                "gameend": {
                    "UserCard": [{
                        "ChangeableCardsLen": 13,
                        "ChangeableCards": [1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 5, 21, 22],
                        "FixedCardsLen": 0,
                        "stFixedCards": [],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 10,
                        "ChangeableCards": [18, 18, 19, 19, 21, 21, 21, 22, 22, 22],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{"CardData": 24, "state": 1, "chairID": 0, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 10,
                        "ChangeableCards": [21, 23, 23, 24, 25, 36, 36, 37, 37, 37],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{"CardData": 35, "state": 1, "chairID": 1, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 8,
                        "ChangeableCards": [22, 23, 24, 38, 39, 40, 41, 41],
                        "FixedCardsLen": 2,
                        "stFixedCards": [{
                            "CardData": 37,
                            "state": 1,
                            "chairID": 0,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 38, "state": 1, "chairID": 0, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }],
                    "Score": [105, 1010, 360, 1206],
                    "EndState": 1,
                    "EndGangInfo": [{"Gang": [], "TotalGangScore": 0}, {"Gang": [], "TotalGangScore": 0}, {
                        "Gang": [],
                        "TotalGangScore": 0
                    }, {"Gang": [], "TotalGangScore": 0}],
                    "faninfo": [{
                        "chairid": 0,
                        "SpecialType": 0,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 1,
                        "SpecialType": 2,
                        "FanNum": 19,
                        "addfan": [{"AddType": 11, "AddNum": 11, "AddType2": 1}, {
                            "AddType": 75,
                            "AddNum": 75,
                            "AddType2": 1
                        }, {"AddType": 65, "AddNum": 2, "AddType2": 1}, {"AddType": 68, "AddNum": 1, "AddType2": 1}],
                        "hucard": 19,
                        "DianPao": []
                    }, {
                        "chairid": 2,
                        "SpecialType": 0,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 3,
                        "SpecialType": 7,
                        "FanNum": 5,
                        "addfan": [{"AddType": 17, "AddNum": 17, "AddType2": 1}, {
                            "AddType": 75,
                            "AddNum": 75,
                            "AddType2": 1
                        }, {"AddType": 65, "AddNum": 1, "AddType2": 1}, {
                            "AddType": 48,
                            "AddNum": 1,
                            "AddType2": 1
                        }, {"AddType": 68, "AddNum": 1, "AddType2": 1}, {"AddType": 61, "AddNum": 61, "AddType2": 1}],
                        "hucard": 38,
                        "DianPao": []
                    }],
                    "money": [100004, 99982, 100018, 99996],
                    "ts": null,
                    "md5": []
                },
                "husocore": [105, 1010, 360, 1206],
                "hupaiinfo": [{
                    "seatid": 0,
                    "totalhufan": null,
                    "hutype": 3,
                    "hushunxu": null,
                    "hucard": null,
                    "dianpaoseatid": null,
                    "hufanleixing": [],
                    "hufan": [],
                    "totalgangfen": null
                }, {
                    "seatid": 1,
                    "totalhufan": 19,
                    "hutype": 2,
                    "hushunxu": 1,
                    "hucard": 19,
                    "dianpaoseatid": 3,
                    "hufanleixing": [11, 65, 68, 75],
                    "hufan": [15, 2, 1, 1],
                    "totalgangfen": 0
                }, {
                    "seatid": 2,
                    "totalhufan": null,
                    "hutype": 3,
                    "hushunxu": null,
                    "hucard": null,
                    "dianpaoseatid": null,
                    "hufanleixing": [],
                    "hufan": [],
                    "totalgangfen": null
                }, {
                    "seatid": 3,
                    "totalhufan": 5,
                    "hutype": 1,
                    "hushunxu": 2,
                    "hucard": 38,
                    "dianpaoseatid": 255,
                    "hufanleixing": [17, 48, 61, 65, 68, 75],
                    "hufan": [0, 1, 1, 1, 1, 1],
                    "totalgangfen": 0
                }],
                "dajiaoinfo": [{
                    "seatid": 0,
                    "dajiaotype": 2,
                    "dajiaofenshu": -3,
                    "dajiaopai": 255,
                    "dajiaofan": 0,
                    "dajiaoleixing": [],
                    "dajiaoleixingfan": [],
                    "totalgangfen": null
                }, {
                    "seatid": 1,
                    "dajiaotype": 1,
                    "dajiaofenshu": 0,
                    "dajiaopai": 255,
                    "dajiaofan": 0,
                    "dajiaoleixing": [],
                    "dajiaoleixingfan": [],
                    "totalgangfen": null
                }, {
                    "seatid": 2,
                    "dajiaotype": 3,
                    "dajiaofenshu": 3,
                    "dajiaopai": 22,
                    "dajiaofan": 0,
                    "dajiaoleixing": [17, 75, 65, 49],
                    "dajiaoleixingfan": [0, 1, 1, 1],
                    "totalgangfen": 0
                }, {
                    "seatid": 3,
                    "dajiaotype": 1,
                    "dajiaofenshu": 0,
                    "dajiaopai": 255,
                    "dajiaofan": 0,
                    "dajiaoleixing": [],
                    "dajiaoleixingfan": [],
                    "totalgangfen": null
                }]
            };
            this.handler_server_game_end_bc(packet);
        }
    },
});
var CHENGDU_Paise = cc.Layer.extend({
    tiaoBtn: null,
    tongBtn: null,
    wanBtn: null,
    goodPaiSe: -1,
    opAnim: null,
    ctor: function () {
        this._super();
        var wsize = cc.director.getWinSize();

        var csize = cc.size(630, 110);

        this.setIgnoreAnchorPointForPosition(false);
        this.setAnchorPoint(cc.p(0.5, 0));
        this.setContentSize(csize);
        this.setPosition(cc.p(wsize.width / 2, 158));

        ccs.armatureDataManager.addArmatureFileInfo(getResPath("linshui/effect/effectsmajtishilizi.ExportJson"));
        this.opAnim = new ccs.Armature("effectsmajtishilizi");
        var animation = this.opAnim.getAnimation();
        if (animation) {
            if (typeof animation.playWithIndex === "function") {
                this.opAnim.setAnchorPoint(cc.p(0.5, 0.5));
                animation.play("effectsmajtishilizi", 0, true);
                this.addChild(this.opAnim);
            }
        }
        this.wanBtn = new ccui.Button(getResPath("linshui/chengdu/wan1.png"), getResPath("linshui/chengdu/wan2.png"));
        this.wanBtn.setName("wanChoice");
        this.wanBtn.setAnchorPoint(cc.p(0, 0));
        this.wanBtn.setPosition(cc.p(0, 0));
        this.addChild(this.wanBtn);

        this.tiaoBtn = new ccui.Button(getResPath("linshui/chengdu/tiao1.png"), getResPath("linshui/chengdu/tiao2.png"));
        this.tiaoBtn.setName("tiaoChoice");
        this.tiaoBtn.setAnchorPoint(cc.p(0, 0));
        this.tiaoBtn.setPosition(cc.p(csize.width / 2 - (this.tiaoBtn.getContentSize()).width / 2, 0));
        this.addChild(this.tiaoBtn);

        this.tongBtn = new ccui.Button(getResPath("linshui/chengdu/tong1.png"), getResPath("linshui/chengdu/tong2.png"));
        this.tongBtn.setName("tongChoice");
        this.tongBtn.setAnchorPoint(cc.p(0, 0));
        this.tongBtn.setPosition(cc.p(csize.width - (this.tongBtn.getContentSize()).width, 0));
        this.addChild(this.tongBtn);
    },
    setGoodPaiSe: function (goodPaiSe) {
        this.goodPaiSe = goodPaiSe;
        cc.log("goodPaiSe : " + goodPaiSe);

        var temp = null;

        if (goodPaiSe == MJ_TYPE.MJ_TYPE_TIAO) {
            temp = this.tiaoBtn;
        } else if (goodPaiSe == MJ_TYPE.MJ_TYPE_TONG) {
            temp = this.tongBtn;
        } else if (goodPaiSe == MJ_TYPE.MJ_TYPE_WAN) {
            temp = this.wanBtn;
        }

        if (temp) {
            var point = temp.getPosition();
            var size = temp.getContentSize();
            this.opAnim.setVisible(true);
            this.opAnim.setPosition(cc.p(point.x + size.width / 2 + 10, point.y + size.height / 2));
        } else {
            this.opAnim.setVisible(false);
        }

    },
    addClickEventListener: function (callback) {
        this.tiaoBtn.addClickEventListener(callback);
        this.tongBtn.addClickEventListener(callback);
        this.wanBtn.addClickEventListener(callback);
    },
});

var MJChange = cc.Layer.extend({
    cancelChoiceBtn: null,
    sureChoiceBtn: null,
    ctor: function () {
        this._super();
        var wsize = cc.director.getWinSize();

        var csize = cc.size(530, 140);

        this.setIgnoreAnchorPointForPosition(false);
        this.setAnchorPoint(cc.p(0.5, 0));
        this.setContentSize(csize);
        this.setPosition(cc.p(wsize.width / 2, 158));

        var tipIvSize = cc.size(450, 45);
        var tipIV = new ccui.ImageView();
        tipIV.loadTexture(getResPath("RoomMJ/text_bg.png"));
        tipIV.setAnchorPoint(cc.p(0.5, 1));
        tipIV.setContentSize(tipIvSize);
        tipIV.ignoreContentAdaptWithSize(false);
        tipIV.setPosition(cc.p(csize.width / 2, csize.height));
        tipIV.setName("changetext_bg");
        this.addChild(tipIV);

        var tip = new ccui.Text("请选同花色的三张牌进行交换", "", 25);
        tip.setTextColor(cc.color(0xff, 0xff, 0xff, 255));
        tip.setAnchorPoint(cc.p(0.5, 0.5));
        tip.setPosition(cc.p(tipIvSize.width / 2, tipIvSize.height / 2));
        tip.setName("changetext");
        tipIV.addChild(tip);


        // this.cancelChoiceBtn = new ccui.Button(getResPath("sichuanmj/scmj/cancel_choice1.png"), getResPath("sichuanmj/scmj/cancel_choice2.png"));
        // this.cancelChoiceBtn.setName("cancelChoice");
        // this.cancelChoiceBtn.setAnchorPoint(cc.p(0, 0));
        // this.cancelChoiceBtn.setPosition(cc.p(0, 0));
        // this.addChild(this.cancelChoiceBtn);

        this.sureChoiceBtn = new ccui.Button(getResPath("linshui/chengdu/sure_choice1.png"), getResPath("linshui/chengdu/sure_choice2.png"), getResPath("linshui/chengdu/sure_choice3.png"));
        this.sureChoiceBtn.setEnabled(false);
        this.sureChoiceBtn.setName("sureChoice");
        this.sureChoiceBtn.setAnchorPoint(cc.p(1, 0));
        this.sureChoiceBtn.setPosition(cc.p(csize.width - 140, 0));
        this.addChild(this.sureChoiceBtn);
        cc.log("---this.sureChoiceBtn---: " + this.sureChoiceBtn);
    },
    addClickEventListener: function (callback) {
        //this.cancelChoiceBtn.addClickEventListener(callback);
        this.sureChoiceBtn.addClickEventListener(callback);
    },
});


var sendLackCard = function (v) {
    var packet = createPacket("proto.game.guanganmj.ReqChooseLackType");
    packet.Type = v;
    sendPacket(packet, CMD.CLIENT_MJ_CHOOSE_LACKTYPE);
}

var sendChangeCard = function (v, cardlist) {
    var packet = createPacket("proto.game.guanganmj.ReqChangeCard");
    packet.ischange = v;
    packet.Card = [];
    if (v == 1) {
        for (var i in cardlist) {
            cc.log("---cardlist[i]---: " + cardlist[i]);
            packet.Card.push(cardlist[i]);
        }
    }
    sendPacket(packet, CMD.CLIENT_MJ_CHANGE_CARD);
}
//-------------------结算--------------------------
var MJResult = cc.Layer.extend({
    ackGameEnd: null,
    bgSpr: "",
    leftColor: null,
    rightColor: null,
    buff: "",
    handCradPos: {x: 0, y: 0},
    hand_card: [[], [], [], []],
    hu_card: [null, null, null, null],
    ctor: function () {

        this._super();

        var size = cc.director.getWinSize();

        var layout = new ccui.Layout();
        layout.setContentSize(size);
        layout.setAnchorPoint(cc.p(0, 0));
        layout.setPosition(cc.p(0, 0));
        layout.setTouchEnabled(true);
        layout.setSwallowTouches(true);
        layout.addClickEventListener(function (Ref) {
        });
        this.addChild(layout, -1000);

        if (MJModel.mj_roomType == 1) {
            this.bgSpr = new cc.Sprite(getResPath("linshui/result/result-detail/bg_three.png"));
        } else {
            this.bgSpr = new cc.Sprite(getResPath("linshui/result/result-detail/bg.png"));

        }
        this.bgSpr.setPosition(cc.p(size.width / 2, size.height / 2 - 10));
        this.addChild(this.bgSpr);

        //继续游戏
        var continueBtn = new ccui.Button(getResPath("linshui/result/result-detail/result_detail_btn_continue_normal.png"), getResPath("linshui/result/result-detail/result_detail_btn_continue_press.png"));
        continueBtn.setAnchorPoint(cc.p(0.5, 0.5));
        continueBtn.setPosition(cc.p(1090 + 55, 10));
        continueBtn.setName("continueBtn");
        continueBtn.addClickEventListener(this.continueClick.bind(this));
        this.bgSpr.addChild(continueBtn);

        this.leftColor = cc.color(224, 181, 127, 255);
        this.rightColor = cc.color(175, 90, 34, 255);

        return true;
    },

    updateContentView: function (data) {
    },


    createAvatar: function (pos) {
        var seatid = MJModel.getSeatidByPos(pos);
        var player = MJModel.players[seatid];
        var layer = new cc.Layer();

        var headPic = Utils.createCircleAvatar(player.avatar, "Avatars/user4_unlogin.png", getResPath("linshui/flag/head_bg.png"), cc.size(74, 74));
        layer.addChild(headPic);
        //    headPic.setPosition(cc.p(startX,startY));

        var framepath;
        var scale = 1;
        if (pos == 0) {
            framepath = getResPath("linshui/result/result-detail/result_detail_frame_wo.png");
        } else {
            framepath = getResPath("linshui/result/result-detail/result_detail_frame_others.png");
            scale = 0.82;
        }
        var headFrame = new cc.Sprite(framepath);
        headFrame.setAnchorPoint(cc.p(0.5, 0.5));
        headFrame.setScale(scale);
        headFrame.setPosition(cc.p(0, 0));
        layer.addChild(headFrame, -1);

        var headSize = cc.size(88, 88);

        //是否是庄家
        if (MJModel.banker_seatid == seatid) {
            var bankerPic = new cc.Sprite(getResPath("RoomMJ/banker.png"));
            bankerPic.setAnchorPoint(cc.p(0.5, 0));
            bankerPic.setPosition(cc.p(-headSize.width / 2 + 5, -headSize.height / 2));
            layer.addChild(bankerPic);
        }

        //位置
        var posPic = new cc.Sprite(__String.createWithFormat(getResPath("linshui/result/result-detail/result_detail_pos_%1.png"), pos));
        posPic.setAnchorPoint(cc.p(0.5, 0));
        posPic.setPosition(cc.p(-55, headSize.height / 2 - 40));
        layer.addChild(posPic);

        //玩家名字
        var nameLabel = new cc.LabelTTF(Utils.parseName(6, player.name), "Arial", 24);
        nameLabel.setColor(this.leftColor);
        nameLabel.setAnchorPoint(cc.p(0.5, 0.5));
        nameLabel.setPosition(cc.p(0, -headSize.height / 2 - 10));
        layer.addChild(nameLabel);

        return layer;
    }
    ,


    createHuLayer: function (seatid) {
        var layer = null;
        var scGameEnd = this.chegnduEndInfo;
        return layer;
    }
    ,

    continueClick: function (ref) {
        if (MJModel.isOnVideo)return;
        sendReady();

        this.removeFromParent();
        MJModel.state = MJ_STATUS.MJ_GAME_FREE;
    }
    ,

    getStringByType: function (stype) {
        var type = Number(stype);
        var str = "";
        switch (type) {
            case HUGANG.HUGANG_ZHIGANG:
                str = "直杠";
                break;
            case HUGANG.HUGANG_WANGANG:
                str = "巴杠";
                break;
            case HUGANG.HUGANG_ANGANG:
                str = "暗杠";
                break;
            case HUGANG.HUGANG_DIANGANG:
                str = "点杠";
                break;
            case HUGANG.HUGANG_DIANPAO:
                str = "点炮";
                break;
            case HUGANG.HUGANG_PAOHU:
                str = "炮胡";
                break;
            case HUGANG.HUGANG_BEIZIMO:
                str = "被自摸";
                break;
            case HUGANG.HUGANG_ZIMO:
                str = "自摸";
                break;
            default:
                break;
        }
        return str;
    }
    ,

    getStringGuiZhouByType: function (stype) {
        var type = Number(stype);
        var str = "";
        switch (type) {
            case 0:
                str = "输豆";
                break;
            case 1:
                str = "爬坡豆";
                break;
            case 2:
                str = "点豆";
                break;
            case 3:
                str = "闷豆";
                break;
            case 4:
                str = "爬坡豆";
                break;
            case 8:
                str = "闷豆";
                break;
            case 10:
                str = "憨包豆";
                break;
            case 11:
                str = "打出";
                break;
            case 64:
                str = "输豆";
                break;
            default:
                break;
        }
        return str;
    }
});

var MJCommonResult = MJResult.extend({
    updateContentView: function (chengduGame) {

    },

    createGangHuLayer: function (seatid) {
        var layer = new cc.Layer();
        var x = 0;
        var y = 0;
        this.createEndInfoTip(x, y, layer, seatid);
        return layer;
    },

    //游戏结束后通用的提示信息
    createEndInfoTip: function (x, y, layer, seatid) {

        return {x: x, y: y};
    },

    createSpecialHuTip: function (startX, startY, seatid) {
        //具体胡什么。。。
    },

});

var MJResult_CHONGQING = MJCommonResult.extend({
    _winSeatid: [0, 0, 0, 0,],
    chegnduEndInfo: null,
    dianPaoRecord: [[], [], [], []],
    daGangRecord: [[], [], [], []],
    updateContentView: function (mjtable, chengduGame) {
        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -1);

        this.ackGameEnd = chengduGame.gameend;
        this.chegnduEndInfo = chengduGame;
        this.bgSpr.setTexture(getResPath("linshui/result/bg.png"));

        this.bgSpr.getChildByName("continueBtn").loadTextures(getResPath("linshui/result/next_btn.png"), getResPath("linshui/result/next_btn2.png"), "");
        this.bgSpr.getChildByName("continueBtn").setScale(0.9);
        this.bgSpr.getChildByName("continueBtn").setPosition(cc.p(1090 + 20, 47));
        //游戏配置描述
        // var gameDesStr = new cc.LabelTTF(mjtable.gameDes, "Arial", 20);
        // gameDesStr.setColor(this.leftColor);
        // gameDesStr.setDimensions(900, 50);
        // gameDesStr.setAnchorPoint(cc.p(0, 0.5));
        // gameDesStr.setPosition(cc.p(47, 60));
        // this.bgSpr.addChild(gameDesStr);

        var ss = Utils.splitStr(mjtable.gameDes, 35);
        var gameDesStr = new cc.LabelTTF(ss[0], "Arial", 20);
        gameDesStr.setColor(this.leftColor);
        gameDesStr.setAnchorPoint(cc.p(0, 0.5));
        gameDesStr.setPosition(cc.p(47, 55));
        this.bgSpr.addChild(gameDesStr);
        if (ss[1]) {
            cc.log("-----ss[1]: " + ss[1]);
            var gameDesStr2 = new cc.LabelTTF(ss[1], "Arial", 20);
            gameDesStr2.setColor(this.leftColor);
            gameDesStr2.setAnchorPoint(cc.p(0, 0.5));
            gameDesStr2.setPosition(cc.p(47, 30));
            this.bgSpr.addChild(gameDesStr2);
        }

        //输赢标志
        if (this.ackGameEnd.Score) {
            var length = this.ackGameEnd.Score.length;
            for (var i = 0; i < length; i++) {
                //var seatid = MJModel.getSeatidByPos(i);
                //var pos = MJModel.getSeatidByPos(MJModel.seatid);
                if (MJModel.isMyPlayer(i)) {
                    var effectName = "lose";
                    if (this.ackGameEnd.Score[i] >= 0) {
                        effectName = "win";
                    }
                    this._win_effect(effectName);
                    break;
                }
            }
        }
        if (this.ackGameEnd.Score) {
            //获得最大赢家
            var max = this.ackGameEnd.Score[0];
            var length = this.ackGameEnd.Score.length;
            for (var i = 0; i < length; i++) {

                if (this.ackGameEnd.Score[i] > max) {
                    max = this.ackGameEnd.Score[i];
                }
            }
            //可能出现两个一样分的
            for (i = 0; i < length; i++) {
                if (max == this.ackGameEnd.Score[i] && max != 0) {
                    this._winSeatid[i] = 1
                } else {
                    this._winSeatid[i] = 0;
                }

            }
        }
        this.dianPaoRecord = [[], [], [], []];
        for (var i = 0; i < chengduGame.hupaiinfo.length; i++) {
            if (chengduGame.hupaiinfo[i]) {
                var dianpaoId = chengduGame.hupaiinfo[i].dianpaoseatid;
                if (dianpaoId != 255 && dianpaoId != null) {
                    this.dianPaoRecord[dianpaoId].push(chengduGame.hupaiinfo[i].hucard);
                }
            }
        }

        if (chengduGame.ganginfo) {
            for (var i = 0; i < chengduGame.ganginfo.length; i++) {
                var gangpaiInfo = chengduGame.ganginfo[i];
                cc.log("------gangpaiInfo.gangpai---: " + gangpaiInfo.gangpai);
                if (gangpaiInfo.gangpai != 255 && gangpaiInfo.diangangid != 255) {
                    this.daGangRecord[gangpaiInfo.diangangid].push(gangpaiInfo.gangpai);
                }
            }
        }
        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;
            if (pos == 2 && MJModel.mj_roomType == 1) {
                continue;
            }
            if (MJModel.mj_roomType == 2 && (pos == 1 || pos == 3)) {
                continue;
            }

            var startY = 570 - count * 140;

            var seatid = MJModel.getSeatidByPos(pos);

            var startX = 90;
            //大赢家
            if (this._winSeatid[seatid]) {
                var DayingjiaLayer = this._result_effect(seatid);
                if (DayingjiaLayer) {
                    DayingjiaLayer.setPosition(cc.p(startX - 42, startY));
                    this.bgSpr.addChild(DayingjiaLayer, 1);
                }
            }
            //头像
            var headIcon = this.createAvatar(pos);
            headIcon.setPosition(cc.p(startX, startY + 10));
            headIcon.setAnchorPoint(cc.p(0.5, 0.5));
            this.bgSpr.addChild(headIcon);

            //上排杠胡牌
            startX = 180;

            var ganghuLayer = this.createGangHuLayer(seatid);
            this.bgSpr.addChild(ganghuLayer);
            ganghuLayer.setPosition(cc.p(startX, startY + 28));

            //下排所有牌
            var layer = this.createHandCard(seatid);
            layer.setPosition(cc.p(startX, startY - 62));
            this.bgSpr.addChild(layer);


            //花猪、大叫信息
            startX = 920;
            //总成绩、胡牌信息
            startX = 980;
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX, startY + 0));
            this.bgSpr.addChild(scoreLayer);

            startX = 1050;
            //胡牌顺序
            if (chengduGame.hupaiinfo.length > 0) {
                if (chengduGame.hupaiinfo[seatid].hushunxu != null) {
                    var str = "";
                    switch (chengduGame.hupaiinfo[seatid].hushunxu) {
                        case 1:
                            str = "1";
                            break;
                        case 2:
                            str = "2";
                            break;
                        case 3:
                            str = "3";
                            break;
                        default:
                            break;
                    }
                    var hupaiSX = new cc.LabelAtlas(str + ":;", getResPath("linshui/result/hu.png"), 27, 42, '0');
                    hupaiSX.setPosition(cc.p(startX + 140, startY - 15));
                    this.bgSpr.addChild(hupaiSX);
                }
            }
            count++;
        }
    },

    createHandCard: function (seatid) {
        //胡的那张牌....
        var tagHu = 0;
        //占时注释掉，胡的那张牌
        var scGameEnd = this.chegnduEndInfo;

        if (this.ackGameEnd.faninfo.length > seatid) {
            if (this.ackGameEnd.faninfo[seatid].hucard && this.ackGameEnd.faninfo[seatid].hucard != 255) {
                tagHu = this.ackGameEnd.faninfo[seatid].hucard;
            }
        }
        var layer = new cc.Layer();
        var imageView = new ccui.ImageView(getResPath("linshui/result/bg9.png"));
        imageView.setScale9Enabled(true);
        imageView.setContentSize(cc.size(785, 133));
        imageView.setPosition(cc.p(-30, 0));
        imageView.setAnchorPoint(cc.p(0, 0));
        layer.addChild(imageView);

        var imageView2 = new ccui.ImageView(getResPath("linshui/result/bg9.png"));
        imageView2.setScale9Enabled(true);
        imageView2.setContentSize(cc.size(315, 133));
        imageView2.setPosition(cc.p(imageView.getContentSize().width - 10, 0));
        imageView2.setAnchorPoint(cc.p(0, 0));
        layer.addChild(imageView2);
        var pos = MJModel.getPosBySeatid(seatid);
        if (this.ackGameEnd.UserCard.length > seatid) {
            var x = 30;
            var y = 18;
            var paiSpace = 10;
            var penggangSize = cc.size(120, 80);
            for (var i = 0; i < this.ackGameEnd.UserCard[seatid].FixedCardsLen; i++) {

                var state = this.ackGameEnd.UserCard[seatid].stFixedCards[i].state;
                var card = this.ackGameEnd.UserCard[seatid].stFixedCards[i].CardData;
                var chairID = this.ackGameEnd.UserCard[seatid].stFixedCards[i].chairID;
                var out_pos = MJModel.getPosBySeatid(chairID);

                if (card == undefined || card == null || card == 0) {
                    continue;
                }
                //下排杠牌
                var gangCard = new MJPeng();
                gangCard.setAnchorPoint(cc.p(0.0, 0.0));

                if ((state & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                    gangCard.setValue(PengType.Peng_Peng, pos, card, 0, out_pos, true);
                }
                else if ((state & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                    gangCard.setValue(PengType.Peng_AnKang, pos, card, 0, out_pos, true);
                }
                else if ((state & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                    gangCard.setValue(PengType.Chi_L, pos, card, 0, out_pos, true);
                }
                else if ((state & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                    gangCard.setValue(PengType.Chi_M, pos, card, 0, out_pos, true);
                }
                else if ((state & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                    gangCard.setValue(PengType.Chi_R, pos, card, 0, out_pos, true);
                }
                else {
                    gangCard.setValue(PengType.Peng_Kang, pos, card, 0, out_pos, true);
                }

                gangCard.setPosition(cc.p(x + 16, y + 18));
                gangCard.setScale(0.5);

                x += paiSpace * 0.5 + penggangSize.width + 18;
                layer.addChild(gangCard);
            }

            var is_remove = 0;
            var dajiaoCard = 0;
            var need_remove = (parseInt(this.ackGameEnd.UserCard[seatid].ChangeableCardsLen % 3) == 2);
            this.hand_card[pos] = [];
            if (scGameEnd.dajiaoinfo && scGameEnd.dajiaoinfo[seatid] && scGameEnd.dajiaoinfo[seatid].dajiaopai && scGameEnd.dajiaoinfo[seatid].dajiaopai != 255) {
                dajiaoCard = scGameEnd.dajiaoinfo[seatid].dajiaopai;
            }
            //牌面信息
            for (var i = 0; i < this.ackGameEnd.UserCard[seatid].ChangeableCardsLen; i++) {

                //去掉type＝＝1的判断 有些游戏自摸不一定叫自摸 只判断玩家的手牌数量 只要多牌 而且有胡牌数据 就跳过
                if (is_remove == 0 && need_remove && scGameEnd.hupaiinfo.length > seatid && tagHu) {
                    if (this.ackGameEnd.UserCard[seatid].ChangeableCards[i] == tagHu) {
                        is_remove = 1;
                        continue;
                    }
                }
                var handCard = new MJCard();
                handCard.setValue(this.ackGameEnd.UserCard[seatid].ChangeableCards[i], 0, CardType.Card_Hand, 0);
                handCard.setScale(0.63);
                handCard.setAnchorPoint(cc.p(0.0, 0.0));
                handCard.setPosition(cc.p(x - 48, y - 12));
                x -= 5;
                x += handCard.getBoundingBox().width;
                layer.addChild(handCard);
                this.hand_card[pos].push(handCard);
            }

            this.hu_card[pos] = null;
            //胡的牌
            cc.log("----tagHu---: " + tagHu);
            if (tagHu) {
                //多加一个是否多牌的判断 防止前面又没有跳过 这里又多加的bug
                var huCard = new MJCard();
                huCard.setValue(tagHu, 0, CardType.Card_End, 0);
                huCard.setScale(0.63);
                huCard.setAnchorPoint(cc.p(0.0, 0.0));
                huCard.setPosition(cc.p(x - 40 + paiSpace, y - 12));
                layer.addChild(huCard);
                this.hu_card[pos] = huCard;
            }
            if (dajiaoCard) {
                //多加一个是否多牌的判断 防止前面又没有跳过 这里又多加的bug
                var djCard = new MJCard();
                djCard.setValue(dajiaoCard, 0, CardType.Card_End, 0);
                djCard.setStoreColor(cc.color(198, 232, 229));
                djCard.setScale(0.63);
                djCard.setAnchorPoint(cc.p(0.0, 0.0));
                djCard.setPosition(cc.p(x - 40 + paiSpace, y - 12));
                layer.addChild(djCard);
            }
        }
        this.handCradPos.x = x;
        this.handCradPos.y = y;
        return layer;
    }
    ,
    //杠胡列表
    createGangHuLayer: function (seatid) {
        var layer = new cc.Layer();
        var x = -7;
        var y = 0;
        var scGameEnd = this.chegnduEndInfo;

        //胡牌信息
        if (scGameEnd.hupaiinfo.length > seatid) {
            if (scGameEnd.hupaiinfo[seatid].hutype == 1) {
                var huPaiType = new cc.LabelTTF("自摸", "Arial", 20);
                huPaiType.setColor(this.leftColor);
                huPaiType.setAnchorPoint(cc.p(0, 0));
                huPaiType.setPosition(cc.p(x, y + 10));
                layer.addChild(huPaiType);
                x += huPaiType.getContentSize().width + 10;
            } else if (scGameEnd.hupaiinfo[seatid].hutype == 2) {
                var huPaiType = new cc.LabelTTF("炮胡", "Arial", 20);
                huPaiType.setColor(this.leftColor);
                huPaiType.setAnchorPoint(cc.p(0, 0));
                huPaiType.setPosition(cc.p(x, y + 10));
                layer.addChild(huPaiType);
                x += huPaiType.getContentSize().width + 10;
            }
        }

        //大叫 暂时注释
        if (scGameEnd.dajiaoinfo && scGameEnd.dajiaoinfo[seatid]) {
            var dajiaoinfos = scGameEnd.dajiaoinfo[seatid];
            if (dajiaoinfos.dajiaotype == 2 || dajiaoinfos.dajiaotype == 3) {
                var tempstr = " 未下叫";
                if (dajiaoinfos.dajiaotype == 3) {
                    tempstr = " 下叫";
                }
                var dajiao = new cc.LabelTTF(tempstr, "Arial", 20);
                dajiao.setAnchorPoint(cc.p(0, 0));
                dajiao.setColor(this.leftColor);
                layer.addChild(dajiao);
                dajiao.setPosition(cc.p(x, y + 10));
                x += dajiao.getContentSize().width + 10;
            }

            //大叫类型
            for (var i = 0; i < dajiaoinfos.dajiaoleixing.length; i++) {
                //var dajiaoType = new cc.LabelTTF(ChengduType[dajiaoinfos.dajiaoleixing[i]]+ " " + dajiaoinfos.dajiaoleixingfan[i] + "颗", "Arial", 20);
                var dajiaoType = new cc.LabelTTF(ChengduType[dajiaoinfos.dajiaoleixing[i]], "Arial", 20);
                dajiaoType.setColor(this.leftColor);
                dajiaoType.setAnchorPoint(cc.p(0, 0));
                dajiaoType.setPosition(cc.p(x, y + 10));
                layer.addChild(dajiaoType);
                x += dajiaoType.getContentSize().width + 10;
            }

            //杠牌分
            if (dajiaoinfos.totalgangfen) {
                var gangFenScore = new cc.LabelTTF("杠牌", "Arial", 20);
                gangFenScore.setAnchorPoint(cc.p(0, 0));
                gangFenScore.setColor(this.leftColor);
                layer.addChild(gangFenScore);
                gangFenScore.setPosition(cc.p(x, y + 10));
                x += gangFenScore.getContentSize().width + 10;
            }
        }
        // //胡番 + 加番
        if (scGameEnd.hupaiinfo[seatid].hufan) {
            var typeLen = scGameEnd.hupaiinfo[seatid].hufan.length;
            var dyy = (typeLen >= 7) ? 5 : 0;
            var dxx = x;
            for (var i = 0; i < scGameEnd.hupaiinfo[seatid].hufan.length; i++) {
                if (scGameEnd.hupaiinfo[seatid].hufan[i] || (scGameEnd.hupaiinfo[seatid].hufanleixing[i] == 4 || scGameEnd.hupaiinfo[seatid].hufanleixing[i] == 9 || scGameEnd.hupaiinfo[seatid].hufanleixing[i] == 6)) {
                    var fanType = new cc.LabelTTF(ChengduType[scGameEnd.hupaiinfo[seatid].hufanleixing[i]] + " " + scGameEnd.hupaiinfo[seatid].hufan[i] + "颗", "Arial", 20);
                    if (scGameEnd.hupaiinfo[seatid].hufanleixing[i] == 9) {
                        fanType.setString(ChengduType[scGameEnd.hupaiinfo[seatid].hufanleixing[i]] + " ");
                    }
                    fanType.setColor(this.leftColor);
                    fanType.setAnchorPoint(cc.p(0, 0));
                    if (i <= 7) {
                        fanType.setPosition(cc.p(x, y + 10 + dyy));
                    } else {
                        fanType.setPosition(cc.p(dxx, y - dyy));
                        dxx += fanType.getContentSize().width + 10;
                    }
                    layer.addChild(fanType);
                    x += fanType.getContentSize().width + 10;
                }
            }
        }
        //杠牌分
        if (scGameEnd.hupaiinfo[seatid].totalgangfen) {
            var gangFenScore = new cc.LabelTTF("杠牌 " + scGameEnd.hupaiinfo[seatid].totalgangfen + "颗", "Arial", 20);
            gangFenScore.setAnchorPoint(cc.p(0, 0));
            gangFenScore.setColor(this.leftColor);
            layer.addChild(gangFenScore);
            gangFenScore.setPosition(cc.p(x, y + 10));
            x += gangFenScore.getContentSize().width + 10;
        }

        //点炮
        var dianpaoCount = 0;
        for (var i = 0; i < this.dianPaoRecord[seatid].length; i++) {
            if (dianpaoCount == 0) {
                var dianPao = new cc.LabelTTF("点炮", "Arial", 20);
                dianPao.setColor(this.leftColor);
                dianPao.setAnchorPoint(cc.p(0, 0));
                dianPao.setPosition(cc.p(x, y + 10));
                layer.addChild(dianPao);
                x += dianPao.getContentSize().width + 10;
            } else {
                x -= 5;
            }
            var dianpaoCard = null;
            dianpaoCard = new MJCard();
            dianpaoCard.setValue(this.dianPaoRecord[seatid][i], 0, CardType.Card_End, 0);
            dianpaoCard.setScale(0.3);
            dianpaoCard.setAnchorPoint(cc.p(0.0, 0.0));
            dianpaoCard.setPosition(cc.p(x, y + 5));
            layer.addChild(dianpaoCard);
            x += dianpaoCard.getBoundingBox().width + 11;
            dianpaoCount++;

        }
        return layer;
    },
    _win_effect: function (name) {
        try {
            if (name == "win") {
                ccs.armatureDataManager.addArmatureFileInfo(getResPath("linshui/result/effect/win/effectsfszzmjnll.ExportJson"));
            } else {
                ccs.armatureDataManager.addArmatureFileInfo(getResPath("linshui/result/effect/lose/effectsfszzmjzjzl.ExportJson"));
            }
            var armature = new ccs.Armature((name == "win") ? "effectsfszzmjnll" : "effectsfszzmjzjzl");
            if (armature != null) {
                var animation = armature.getAnimation();
                if (animation) {
                    if (typeof animation.playWithIndex === "function") {
                        animation.playWithIndex(0, -1, 0);
                        armature.setPosition(cc.p(this.bgSpr.getContentSize().width / 2, this.bgSpr.getContentSize().height + 5));
                        this.bgSpr.addChild(armature);
                    }
                }
                armature.runAction(cc.sequence(cc.delayTime(2), animation.repeatForever()));
            }
        } catch (e) {
            Log(this, e);
        }
    },
    createAvatar: function (pos) {
        var seatid = MJModel.getSeatidByPos(pos);
        var player = MJModel.players[seatid];
        var layer = new cc.Layer();

        var headPic = Utils.createCircleAvatar(player.avatar, "Avatars/user4_unlogin.png", getResPath("linshui/flag/head_bg.png"), cc.size(74, 74));
        layer.addChild(headPic);
        //    headPic.setPosition(cc.p(startX,startY));

        var framepath;
        var scale = 1;
        if (pos == 0) {
            framepath = getResPath("linshui/result/result_detail_frame_wo.png");
        } else {
            framepath = getResPath("linshui/result/result_detail_frame_others.png");
            scale = 1.1;
        }
        var headFrame = new cc.Sprite(framepath);
        headFrame.setAnchorPoint(cc.p(0.5, 0.5));
        headFrame.setScale(scale);
        headFrame.setPosition(cc.p(0, 0));
        layer.addChild(headFrame, -1);

        var headSize = cc.size(88, 88);

        //是否是庄家
        if (MJModel.banker_seatid == seatid) {
            var bankerPic = new cc.Sprite(getResPath("RoomMJ/banker.png"));
            bankerPic.setAnchorPoint(cc.p(0.5, 0));
            bankerPic.setPosition(cc.p(-headSize.width / 2, headSize.height / 2 - 30));
            layer.addChild(bankerPic);
        }

        //位置
        var posPic = new cc.Sprite(__String.createWithFormat(getResPath("linshui/result/result_detail_pos_%1.png"), pos));
        posPic.setAnchorPoint(cc.p(0.5, 0));
        posPic.setPosition(cc.p(0, headSize.height / 2 + 3));
        layer.addChild(posPic);

        //玩家名字
        var nameLabel = new cc.LabelTTF(Utils.parseName(6, player.name), "Arial", 20);
        nameLabel.setColor(this.leftColor);
        nameLabel.setAnchorPoint(cc.p(0.5, 0.5));
        nameLabel.setPosition(cc.p(0, -headSize.height / 2 - 10));
        layer.addChild(nameLabel);

        return layer;
    }
    ,

    //输赢分
    createScoreLayer: function (seatid) {
        var layer = null;
        layer = new cc.Layer();
        //胡牌番数
        var str = 0;
        var scGameEnd = this.chegnduEndInfo;
        if (scGameEnd.hupaiinfo && scGameEnd.hupaiinfo[seatid]) {
            var FanNum = scGameEnd.hupaiinfo[seatid].totalhufan;
            if (FanNum > 0) {
                str = FanNum;
            }
            //var Hufan = new cc.LabelAtlas(str + ":;", getResPath("linshui/result/fan.png"), 28, 29, '0');
            //Hufan.setAnchorPoint(cc.p(0.0, 0.5));
            //Hufan.setPosition(cc.p(0, 50));
            //Hufan.setName("Hufan");
            //layer.addChild(Hufan);
        }

        if (scGameEnd.dajiaoinfo && scGameEnd.dajiaoinfo[seatid]) {
            var dajiaoinfos = scGameEnd.dajiaoinfo[seatid]
            var FanNum2 = dajiaoinfos.dajiaofan;
            if (FanNum2 > 0) {
                str = FanNum2;
                //    var Djiaofan = new cc.LabelAtlas(str + ":;", getResPath("linshui/result/fan.png"), 28, 29, '0');
                //    Djiaofan.setAnchorPoint(cc.p(0.0, 0.5));
                //    Djiaofan.setPosition(cc.p(0, 50));
                //    Djiaofan.setName("DajiaoFan");
                //    layer.addChild(Djiaofan);
            }
        }


        //输赢分
        var score = 0;
        if (this.ackGameEnd.Score && this.ackGameEnd.Score.length > seatid) score = this.ackGameEnd.Score[seatid];
        var width = 0;
        var scorelabelpath = "";
        scorelabelpath = getResPath("linshui/result/result_small_label_lose.png");
        if (score > 0) {
            scorelabelpath = getResPath("linshui/result/result_small_label_win.png");
        }

        var scoredes = ":";
        if (score >= 0) scoredes = "";
        var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), scorelabelpath, 29, 37, '0');
        scoreLabel.setAnchorPoint(cc.p(0.0, 0.5));
        scoreLabel.setPosition(cc.p(width, 5));
        scoreLabel.setName("scoreLabel");
        layer.addChild(scoreLabel);

        if (str > 0) {
            var scoreLabel = new cc.LabelTTF(this.getChineseString(str) + "颗", "Arial", 28);
            scoreLabel.setAnchorPoint(cc.p(0.0, 0.5));
            scoreLabel.setPosition(cc.p(width, -40));
            scoreLabel.setName("scoreLabel");
            scoreLabel.setColor(this.leftColor);
            // scoreLabel.setColor(cc.color("#c7a13f"));
            layer.addChild(scoreLabel);
        }
        return layer;
    },

    _result_effect: function (seatid) {
        var layer = new cc.Layer();
        cc.log("_result_effect");
        var dayingjiaSpr = new cc.Sprite(getResPath("linshui/result/dayingjia.png"));
        dayingjiaSpr.setAnchorPoint(cc.p(0.5, 0.5));
        dayingjiaSpr.setPosition(cc.p(0, 0));
        dayingjiaSpr.setScale(0.8);
        layer.addChild(dayingjiaSpr, 1000);
        return layer;
    },

    getChineseString: function (score) {
        score = parseInt(score);
        var str = "";
        if (score <= 0) return str;
        var Unitstr = ["", "十", "百", "千"];
        var Valuestr = ["零", "一", "二", "三", "四", "五", "六", "七", "八", "九"];
        var zero = "0";
        var prefix = "";
        var scoreStr = score.toString();
        for (var i = 0; i < scoreStr.length; i++) {
            cc.log("zq...getChineseString", scoreStr[i]);
            var index = scoreStr.length - i - 1;
            var curStr = scoreStr[i];
            //如果当前字符是0
            if (curStr == "0") {
                if (zero == "0") {
                    zero = Valuestr[0];
                }
                continue;
            }

            if (zero != "0") {
                str += zero;
                zero = "0";
            }

            str += Valuestr[curStr];
            str += Unitstr[index];

        }

        return str;

    },
});

var HUGANG =
{
    HUGANG_ZHIGANG: 2,				//直杠
    HUGANG_WANGANG: 4,				//弯杠
    HUGANG_ANGANG: 8,				//暗杠
    HUGANG_DIANPAO: 16,			//点炮
    HUGANG_PAOHU: 32,				//炮胡
    HUGANG_DIANGANG: 64,			//点杠
    HUGANG_BEIZIMO: 128,			//被自摸
    HUGANG_ZIMO: 256,				//自摸
    HUGANG_HUAZHU: 512,            //花猪
    HUGANG_DAJIAO: 1024,            //大叫
    HUGANG_BEIHUAZHU: 2048,            //被花猪赔付
    HUGANG_BEIDAJIAO: 4096,            //被大叫赔付

    //自定义部分
    HUGANG_HUAPAI: 250,                //广东麻将花牌
    HUGANG_PIAO: 260,                  //飘
    HUGANG_TINGPAI: 261,               //听牌
    HUGANG_TUIGANG: 270,               //退杠
    HUGANG_BEITUIGANG: 271,            //被退杠
    HUGANG_CHAOZHUANG: 280,            //抄庄
    HUGANG_BEICHAOZHUANG: 281,         //被抄庄

    HUGANG_BAOPAI: 500,            //包牌
    HUGANG_BEIBAOPAI: 501,            //被包牌
    HUGANG_SHABAO: 502,            //杀报
    HUGANG_BEISHABAO: 503,            //被杀报
};
