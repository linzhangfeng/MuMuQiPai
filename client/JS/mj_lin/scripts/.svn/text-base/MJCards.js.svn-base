var findCardByValue = function (value, cardList) {
    if (cardList == null) return null;
    for (var i = cardList.length - 1; i >= 0; i--) {
        var _card = cardList[i];
        if (_card.getValue() == value) {
            return _card;
        }
    }
    return null;
};

var removeCardByValue = function (value, cardList , canRandom) {
    if (cardList == null) return null;
    if (canRandom == undefined) canRandom = false;
    if (value == 0 && canRandom) {
        var i = Utils.Random(0, cardList.length - 1);
        var _card = cardList[i];
        cardList.splice(i, 1);
        return _card;
    }

    var card = null;
    var index = -1;

    for (var i = cardList.length - 1; i >= 0; i--) {
        var _card = cardList[i];
        if (_card.getValue() == value) {
            card = _card;
            cardList.splice(i, 1);
            break;
        }
    }

    return card;
};

var removeCardByCard = function (card, cardList) {
    if (cardList == null) return null;
    for (var i in cardList) {
        var _card = cardList[i];
        if (_card == card) {
            cardList.splice(i, 1);
            return _card;
        }
    }
    return null;
};

var MJCards = cc.Layer.extend({
    tag: "MJCards",
    hand_card: [[], [], [], []],
    out_card: [[], [], [], []],
    peng_card: [[], [], [], []],
    public_card: [[], [], [], []],
    hu_card: [[], [], [], []],
    niao_card: [[], [], [], []],
    hua_card: [[], [], [], []],
    other_card: [],
    curCardTip: null,
    outCardBtn: null,
    curTouchCard: null,
    touchShowCard: null,
    curChoiceType: -1, //当前选中的花色
    lastOutCard: null,
    outCardSoundCallback: null,
    curOutCard: null,
    ctor: function () {
        this._super();
        var size = cc.director.getWinSize();
        this.ignoreAnchorPointForPosition(false);
        this.setAnchorPoint(cc.p(0.5, 0.5));
        this.setContentSize(size);
    },
    onEnter: function () {
        this._super();
        // 部分事件监听
        var self = this;
        var listener = cc.EventListener.create({
            event: cc.EventListener.TOUCH_ONE_BY_ONE,
            swallowTouches: true,
            onTouchBegan: function (touch, event) {
                return self.onTouchBegan(touch, event);
            },
            onTouchMoved: function (touch, event) {
                return self.onTouchMoved(touch, event);
            },
            onTouchEnded: function (touch, event) {
                self.onTouchEnded(touch, event);
            }
        });
        if (listener) cc.eventManager.addListener(listener, this);
    },

    onTouchBegan: function (touch, event) {
        if (MJModel.seatid == -1) return false;
        if (!touch.getLocation) {
            return false;
        }

        if (MJModel.canTouchCard == false && MJModel.mj_touch_tip == 0) {
            return false;
        }

        try {
            for (var i = 0; i < this.hand_card[0].length; i++) {
                var card = this.hand_card[0][i];
                if (card.onTouchBegan(touch, event)) {
                    try {
                        if (this.curTouchCard)this.curTouchCard.goBack();
                    } catch (e) {

                    }
                    if (MJModel.canTouchCard) {
                        this.curTouchCard = card;
                    }
                    if (!card.isAlreadyOut) {
                        this.touchShowCard = card;
                        this.showTouchCards(card.getValue(), true);
                    }
                    return true;
                }
            }
        } catch (e) {

        }
        return false;
    },

    onTouchMoved: function (touch, event) {
        try {
            if (this.curTouchCard) this.curTouchCard.onTouchMoved(touch, event);
        } catch (e) {

        }
    },

    onTouchEnded: function (touch, event) {
        try {
            if (this.curTouchCard) {
                this.curTouchCard.onTouchEnded(touch, event);
            }

            if (this.touchShowCard) {
                if (!this.touchShowCard.isUp) {
                    this.showTouchCards(this.touchShowCard.getValue(), false);
                }
            }
            this.curTouchCard = null;
            this.touchShowCard = null;
        } catch (e) {

        }
    },

    showTouchCards: function (value, isShow) {
        if (MJModel.mj_touch_tip == 0) {
            return;
        }

        if (MJModel.canChoiceMore) {
            return;
        }

        for (var i = 0; i < this.hand_card[0].length; i++) {
            if (value == this.hand_card[0][i].getValue()) {
                this.hand_card[0][i].setChoiceTipShow(isShow);
            } else {
                this.hand_card[0][i].setChoiceTipShow(false);
            }
        }

        for (var i = 0; i < this.out_card.length; i++) {
            for (var j = 0; j < this.out_card[i].length; j++) {
                if (value == this.out_card[i][j].getValue()) {
                    this.out_card[i][j].setChoiceTipShow(isShow);
                } else {
                    this.out_card[i][j].setChoiceTipShow(false);
                }
            }
        }

        for (var i = 0; i < this.peng_card.length; i++) {
            for (var j = 0; j < this.peng_card[i].length; j++) {
                for (var k = 0; k < this.peng_card[i][j].cardList.length; k++) {
                    if (value == this.peng_card[i][j].cardList[k].getValue()) {
                        this.peng_card[i][j].cardList[k].setChoiceTipShow(isShow);
                    } else {
                        this.peng_card[i][j].cardList[k].setChoiceTipShow(false);
                    }
                }
            }
        }
    },

    fapai: function () {
        var number = 4;
        if (MJModel.mj_roomType == 1) {
            number = 3;
        } else if (MJModel.mj_roomType == 2) {
            number = 2;
        }

        var fapaiCallback = cc.callFunc(function () {
            //Sound.getInstance().playEffect(getResPath("RoomMJ/sound/fapai.mp3"));
        });

        var self = this;
        var zhuaPaiOver7 = cc.callFunc(function () {
            self.removePublicCardByNums(7);
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/fapai.mp3"));
        });

        var zhuaPaiOver6 = cc.callFunc(function () {
            self.removePublicCardByNums(6);
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/fapai.mp3"));
        });
        var zhuaPaiOver5 = cc.callFunc(function () {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/fapai.mp3"));
            self.removePublicCardByNums(5);
        });
        var zhuaPaiOver4 = cc.callFunc(function () {
            self.removePublicCardByNums(4);
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/fapai.mp3"));
        });
        var zhuaPaiOver3 = cc.callFunc(function () {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/fapai.mp3"));
            self.removePublicCardByNums(3);
        });
        var zhuaPaiOver2 = cc.callFunc(function () {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/fapai.mp3"));
            self.removePublicCardByNums(2);
        });

        var zhuaPaiOver1 = cc.callFunc(function () {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/fapai.mp3"));
            self.removePublicCardByNums(1);
        });

        var dl = 0;
        var ddl = 0.1;
        var beginpos = MJModel.getPosBySeatid(MJModel.banker_seatid);
        var count = [0, 0, 0, 0];
        var loop = 2;
        if (this.hand_card[0].length >= 16)loop = 3;
        for (var i = 0; i < loop; i++) {
            for (var j = beginpos; j < beginpos + this.hand_card.length; j++) {
                var pos = j;
                if (pos > 3)pos -= 4;

                if (this.hand_card[pos].length == 0)continue;

                var left_cards = this.hand_card[pos].length - count[pos];
                if (left_cards < 0)continue;

                var dd = 7;
                if (left_cards <= 7)dd = left_cards;

                for (var k = count[pos]; k < count[pos] + dd; k++) {
                    var card = this.hand_card[pos][k];
                    card.setVisible(false);
                    card.runAction(cc.sequence(cc.delayTime(dl + 0.1), cc.show()));
                }
                if (dd == 7) {
                    this.runAction(cc.sequence(cc.delayTime(dl), fapaiCallback, zhuaPaiOver7));
                } else if (dd == 6) {
                    this.runAction(cc.sequence(cc.delayTime(dl), fapaiCallback, zhuaPaiOver6));
                } else if (dd == 5) {
                    this.runAction(cc.sequence(cc.delayTime(dl), fapaiCallback, zhuaPaiOver5));
                } else if (dd == 4) {
                    this.runAction(cc.sequence(cc.delayTime(dl), fapaiCallback, zhuaPaiOver4));
                } else if (dd == 3) {
                    this.runAction(cc.sequence(cc.delayTime(dl), fapaiCallback, zhuaPaiOver3));
                } else if (dd == 2) {
                    this.runAction(cc.sequence(cc.delayTime(dl), fapaiCallback, zhuaPaiOver2));
                } else if (dd == 1) {
                    this.runAction(cc.sequence(cc.delayTime(dl), fapaiCallback, zhuaPaiOver1));
                }

                count[pos] += dd;
                dl += ddl;
            }
        }
        dl += ddl;
        var dao_pai = cc.callFunc(function () {
            for (var j = 0; j < self.hand_card.length; j++) {
                for (var i = 0; i < self.hand_card[j].length; i++) {
                    var card = self.hand_card[j][i];
                    card.setVisible(false);
                    card.runAction(cc.sequence(cc.delayTime(0.3), cc.show()));

                    var temp_card = self.getFapaiTmpCard(j, i, card.getPosition());
                    self.addChild(temp_card, MJConfig.getHandCardOrder(j, i));
                    temp_card.runAction(cc.sequence(cc.delayTime(0.3), cc.removeSelf()));
                }
            }
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/order_pai2.mp3"));
        });

        var li_pai = cc.callFunc(function () {
            MJModel.isEnterWait = false;
            for (var j = 0; j < self.hand_card.length; j++) {
                for (var i = 0; i < self.hand_card[j].length; i++) {
                    var card = self.hand_card[j][i];
                    card.setVisible(true);
                }
                self.reflashHandCard(j, true);
                if (self.isDuoPai(j)) {
                    for (var i = 1; i < self.hand_card[j].length; i++) {
                        var card = self.hand_card[j][i];
                        card.setMyPosition(MJConfig.getHandCardPos(j, i - 1, 13, false));
                    }

                    if (MJModel.mj_mo_cards[j] != -1) {
                        var is_ok = self.removeHandCard(j, MJModel.mj_mo_cards[j]);
                        if (is_ok) self.initMoCard(j, MJModel.mj_mo_cards[j], true);
                    } else {
                        var card = self.hand_card[j][0];
                        card.setMyPosition(MJConfig.getMoCardPos(j));
                        MJModel.mj_mo_cards[j] = card.getValue();
                        card.reflash(0);
                        self.hand_card[j].splice(0, 1);
                        self.hand_card[j].push(card);
                    }
                }
            }
            self.checkCardSafe();
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/order_pai.mp3"));
        });

        this.runAction(cc.sequence(cc.delayTime(dl), dao_pai, cc.delayTime(0.3), li_pai));
    },

    getFapaiTmpCard: function (pos, index, position) {
        var card = new MJCard();
        card.setValue(0, pos, CardType.Card_End, index);
        card.setMyPosition(position);
        return card;
    },

    initHandCard: function (pos, cardList, encrypt_code) {

        for (var i = 0; i < this.hand_card[pos].length; i++) {
            this.hand_card[pos][i].removeFromParent(true);
        }
        var self = this;
        this.hand_card[pos] = [];
        for (var i in cardList) {
            var card = new MJCard();
            card.setValue(cardList[i], pos, MJModel.isOnVideo ? CardType.Card_End : CardType.Card_Hand, i, encrypt_code);
            this.hand_card[pos].push(card);
            cc.log("ningjiebiao" + MJConfig.getHandCardOrder(pos, i) + "pos" + pos +"iiiii" + i);
            this.addChild(card, MJConfig.getHandCardOrder(pos, i));

            if (pos == 0 && MJModel.seatid != -1) {
                card.setTouchEnable(true);
                card.setUpCallback(function (card) {
                    self.clickHandCardCallback(card);
                });
                card.setOutCallback(function (card) {
                    self.outHandCardCallback(card);
                });
            }
        }
    },

    addHandCard: function (pos, value) {
        var card = new MJCard();

        this.hand_card[pos].push(card);
        card.setValue(value, pos, MJModel.isOnVideo ? CardType.Card_End : CardType.Card_Hand, this.hand_card[pos].length - 1);
        this.addChild(card, MJConfig.getHandCardOrder(pos, this.hand_card[pos].length - 1));
        if (pos == 0 && MJModel.seatid != -1) {
            card.setTouchEnable(true);
            var self = this;
            card.setUpCallback(function (card) {
                self.clickHandCardCallback(card);
            });
            card.setOutCallback(function (card) {
                self.outHandCardCallback(card);
            });

            if (MJModel.isAutoOutCard) card.setBlackVis(true);
        }

        return card;
    },

    sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object")av = a.getValue();
            if (typeof b === "object")bv = b.getValue();
            return bv - av;
        } catch (e) {
            return 0;
        }
    },
    setCurCardTip: function (v) {
        if (this.curCardTip) this.curCardTip.setVisible(v);
    },
    resetAllCardClickState: function () {
        for (var i = 0; i < this.hand_card[0].length; i++) {
            var card = this.hand_card[0][i];
            card.setCardTouchEnable(true);
            card.setBlackVis(false);
        }
    },

    setBaoTingCardClickEnable: function (v, IsMoCard) {
        if (IsMoCard == undefined) IsMoCard = false;
        if (IsMoCard) {
            //是自己摸牌的话 除摸牌的情况下禁用
            for (var i = 0; i < this.hand_card[0].length - 1; i++) {
                var card = this.hand_card[0][i];
                if (card) {
                    card.setCardTouchEnable(v);
                    card.setBlackVis(!v);
                }
            }
        }
        else {
            if (v) {
                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    if (card) {
                        card.setCardTouchEnable(v);
                    }
                }
            }
            else {
                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    card.setTingPai(false);
                    card.setCardTouchEnable(false);
                    card.setBlackVis(true);
                    for (var j = 0; j < MJModel.listen_info.length; j++) {
                        var tli = MJModel.listen_info[j];
                        if (card.value == tli.OutCard) {
                            card.setTingPai(true);
                            card.setCardTouchEnable(true);
                            card.setBlackVis(false);
                            break;
                        }
                    }
                }
            }
        }
    },

    setSomeCardClickState: function () {
        if (MJModel.mj_lockcard_type == 1) {
            var listen_cards = [];
            for (var i = 0; i < MJModel.listen_info.length; i++) {
                var lsi = MJModel.listen_info[i];
                listen_cards.push(lsi.OutCard);
            }

            for (var i = 0; i < this.hand_card[0].length; i++) {
                var card = this.hand_card[0][i];
                if (listen_cards.indexOf(card.getValue()) == -1) {
                    card.setBlackVis(true);
                    card.setCardTouchEnable(false);
                }
            }
        } else if (MJModel.mj_lockcard_type == 2) {
            if (this.isDuoPai(0) == false) return;
            for (var i = 0; i < this.hand_card[0].length - 1; i++) {
                var card = this.hand_card[0][i];
                card.setBlackVis(true);
                card.setCardTouchEnable(false);
            }
        }
    },



    reflashHandCard: function (pos, isSort, isOutCard, isDiretor) {
        if (isSort == undefined) isSort = true;
        if (isOutCard == undefined) isOutCard = false;
        if (isDiretor == undefined) isDiretor = false;
        var needEffect = this.canMoveHandCard(pos);
        if (MJModel.isMyPos(pos)) needEffect = true;

        //录像模式暂时不支持插牌动画
        if (MJModel.isOnVideo) {
            needEffect = false;
        }

        if (isDiretor) {
            needEffect = false;
        }
        var needMoveCard = null;
        var needMoveIndex = -1;
        var nendMoveCardValue = -1;
        var hasMoCard = false;
        if (needEffect) {
            try {
                var mo_pos = MJConfig.getMoCardPos(pos);
                for (var i = 0; i < this.hand_card[pos].length; i++) {
                    var card = this.hand_card[pos][i];
                    if (card && parseInt(card.getPosition().x) == parseInt(mo_pos.x) && parseInt(card.getPosition().y) == parseInt(mo_pos.y)) {
                        needMoveCard = card;
                        nendMoveCardValue = card.getValue();
                        hasMoCard = true;
                        break;
                    }
                }
            } catch (e) {

            }
        }

        var needRestri = false;
        if (this.isDuoPai(pos) && (pos == 0 || pos == 2)) {
            needRestri = true;
        }
        if (isSort) {
            try {
                this.hand_card[pos].sort(this.sortCard);
            } catch (e) {
            }
        }

        if (needEffect && needMoveCard && !needRestri) {
            try {
                if (nendMoveCardValue == 0) {
                    if (this.hand_card[pos].length > 2) {
                        needMoveIndex = Utils.Random(0, this.hand_card[pos].length - 2);
                    } else {
                        for (var i = 0; i < this.hand_card[pos].length; i++) {
                            var card = this.hand_card[pos][i];
                            var m_pos = card.getPosition();
                            var e_pos = MJConfig.getHandCardPos(pos, i, this.hand_card[pos].length);
                            if (m_pos.x != e_pos.x || m_pos.y != e_pos.y) {
                                needMoveIndex = i;
                                break;
                            }
                        }
                    }

                    //有需要挪的时候 才可以挪动画
                    if (needMoveIndex != -1) {
                        this.hand_card[pos].splice(this.hand_card[pos].length - 1, 1);
                        this.hand_card[pos].splice(needMoveIndex, 0, needMoveCard);
                    }

                } else {
                    for (var i = 0; i < this.hand_card[pos].length; i++) {
                        var card = this.hand_card[pos][i];
                        if (card == needMoveCard) {
                            needMoveIndex = i;
                            break;
                        }
                    }
                }
            } catch (e) {

            }
        }

        try {
            for (var i = 0; i < this.hand_card[pos].length; i++) {
                var card = this.hand_card[pos][i];
                card.reset();
                if (!needRestri && needEffect && needMoveCard && needMoveIndex != -1) {
                    if (i == needMoveIndex) {

                    } else {
                        this.reorderChild(card, MJConfig.getHandCardOrder(pos, i));
                        var end_pos = MJConfig.getHandCardPos(pos, i, this.hand_card[pos].length, needRestri);
                        card.initPos = end_pos;
                        try {
                            card.runAction(cc.sequence(cc.delayTime(0.17), cc.moveTo(0.3, end_pos).easing(cc.easeSineOut())));
                        } catch (e) {
                            card.setMyPosition(MJConfig.getHandCardPos(pos, i, this.hand_card[pos].length, needRestri));
                            card.reflash(i);
                        }
                    }
                } else {
                    this.reorderChild(card, MJConfig.getHandCardOrder(pos, i));
                    if (!needRestri && needEffect && isOutCard) {
                        var end_pos = MJConfig.getHandCardPos(pos, i, this.hand_card[pos].length, needRestri);
                        card.initPos = end_pos;
                        try {
                            card.runAction(cc.moveTo(0.3, end_pos).easing(cc.easeSineOut()));
                        } catch (e) {
                            card.setMyPosition(MJConfig.getHandCardPos(pos, i, this.hand_card[pos].length, needRestri));
                            card.reflash(i);
                        }
                    } else {
                        card.setMyPosition(MJConfig.getHandCardPos(pos, i, this.hand_card[pos].length, needRestri));
                        card.reflash(i);
                    }
                }
            }
        } catch (e) {
            ERROR(this, "reflashHandCard" + e);
        }

        if (!needRestri && needEffect && needMoveCard && needMoveIndex != -1) {
            var end_pos = MJConfig.getHandCardPos(pos, needMoveIndex, this.hand_card[pos].length);
            var begin_pos = needMoveCard.getPosition();
            var self = this;
            var dy = 30;
            var dx = 0;
            var dr = 0;
            if (MJModel.isMyPos(pos)) {
                dy = 80;
                dr = 15;
            }

            if (pos == 1) {
                dx = -50;
            }

            if (pos == 2) {
                dx = 0;
                dy = 30;
                dr = 0;
            }

            if (pos == 3) {
                dx = 50;
            }

            try {
                var move_callback = cc.callFunc(function () {
                    needMoveCard.setRotation(0);
                    needMoveCard.setMyPosition(end_pos);
                    self.reorderChild(needMoveCard, MJConfig.getHandCardOrder(pos, needMoveIndex));
                    needMoveCard.reflash(needMoveIndex);
                });

                if (pos == 0) {
                    if (MJModel.outCardEffect_style == 1) {
                        this.reorderChild(needMoveCard, MJConfig.getHandCardOrder(pos, needMoveIndex) + 100);
                        dy = 20;
                        if (pos == 0) {
                            dy = 80;
                        }

                        if (pos == 1) {
                            dy = 50;
                        }
                        needMoveCard.runAction(cc.sequence(cc.delayTime(0.2), cc.moveTo(0.0, cc.p(end_pos.x + 0, end_pos.y + dy)), cc.moveTo(0.3, end_pos), move_callback));
                    } else {
                        var allL = Math.abs(end_pos.x - begin_pos.x);
                        var time = allL / 1800;
                        needMoveCard.runAction(cc.sequence(cc.spawn(cc.rotateTo(0.1, dr), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + dy))), cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y + dy)).easing(cc.easeSineOut()), cc.spawn(cc.rotateTo(0.1, 0), cc.moveTo(0.17, end_pos)), move_callback));
                    }

                } else if (pos == 1 || pos == 2 || pos == 3) {

                    this.reorderChild(needMoveCard, MJConfig.getHandCardOrder(pos, needMoveIndex) + 100);
                    var begin_pos = needMoveCard.getPosition();
                    if (pos == 1 || pos == 3) {
                        var mid_pos = cc.p(begin_pos.x + (end_pos.x - begin_pos.x) / 2 + dx, begin_pos.y + (end_pos.y - begin_pos.y) / 2 + dy);
                        var controlPoints2 = [begin_pos,
                            mid_pos,
                            end_pos];
                        var bezierTo1 = cc.bezierTo(0.5, controlPoints2);
                        needMoveCard.runAction(cc.sequence(cc.spawn(cc.rotateTo(0.1, dr), bezierTo1.easing(cc.easeSineOut())), move_callback));
                    } else {
                        var allL = Math.abs(end_pos.x - begin_pos.x);
                        var time = allL / 1800;
                        needMoveCard.runAction(cc.sequence(cc.spawn(cc.rotateTo(0.1, dr), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + dy))), cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y + dy)).easing(cc.easeSineOut()), cc.spawn(cc.rotateTo(0.1, 0), cc.moveTo(0.17, end_pos)), move_callback));
                    }
                    return;
                    var get_card = cc.callFunc(function () {
                        self.reorderChild(needMoveCard, MJConfig.getHandCardOrder(pos, needMoveIndex) + 100);
                    });

                    needMoveCard.runAction(cc.sequence(cc.delayTime(0.33), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + dy)), get_card, cc.moveTo(0, cc.p(end_pos.x + 0, end_pos.y + dy)), cc.moveTo(0.05, end_pos), move_callback));

                    var uiJson = ccs.load(getResPath(__String.createWithFormat("MJ2.5/handeffect/hand%1_get.json", pos)));
                    var uiNode = uiJson.node;
                    uiNode.setPosition(begin_pos);
                    this.addChild(uiNode, 1000);

                    var put_down_card_effect = cc.callFunc(function () {
                        var uiJson = ccs.load(getResPath(__String.createWithFormat("MJ2.5/handeffect/hand%1_put.json", pos)));
                        uiNode = uiJson.node;
                        uiNode.setPosition(end_pos);
                        self.addChild(uiNode, 1000);
                        uiNode.runAction(cc.sequence(cc.delayTime(0.5), cc.removeSelf()));
                    });

                    uiNode.runAction(cc.sequence(cc.delayTime(0.5), put_down_card_effect, cc.removeSelf()));


                    //var allL = Math.abs(end_pos.y - begin_pos.y);
                    //var time = allL / 1000;
                    //if (pos == 2){
                    //    time = allL / 1800;
                    //}
                    //
                    //var uiJson = ccs.load(getResPath(__String.createWithFormat("MJ2.5/handeffect/hand%1_get.json",pos)));
                    //var uiNode = uiJson.node;
                    //uiNode.setPosition(begin_pos);
                    //this.addChild(uiNode, 1000);
                    //
                    //var get_card = cc.callFunc(function(){
                    //    self.reorderChild(needMoveCard, MJConfig.getHandCardOrder(pos, needMoveIndex) + 100);
                    //});
                    //
                    //var put_down_card_effect = cc.callFunc(function () {
                    //    var uiJson = ccs.load(getResPath(__String.createWithFormat("MJ2.5/handeffect/hand%1_put.json",pos)));
                    //    uiNode = uiJson.node;
                    //    uiNode.setPosition(end_pos);
                    //    self.addChild(uiNode, 1000);
                    //    uiNode.runAction(cc.sequence(cc.delayTime(0.5), cc.removeSelf()));
                    //});
                    //
                    //uiNode.runAction(cc.sequence(cc.delayTime(0.5), cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y)), put_down_card_effect, cc.removeSelf()));
                    //needMoveCard.runAction(cc.sequence(cc.delayTime(0.33), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + dy)), get_card, cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y + dy)), cc.moveTo(0.05, end_pos), move_callback));
                } else {
                    needMoveCard.setMyPosition(end_pos);
                    needMoveCard.reflash(needMoveIndex);
                }

            } catch (e) {
                ERROR(this, "reflashHandCard2" + e);
                needMoveCard.setRotation(0);
                needMoveCard.setMyPosition(end_pos);
                needMoveCard.reflash(needMoveIndex);
                this.reorderChild(needMoveCard, MJConfig.getHandCardOrder(pos, needMoveIndex));
            }
        }
    },

    showEndCard: function (pos, cardList, hucard, isZiMo) {
        try {
            try {
                for (var i = 0; i < this.hand_card[pos].length; i++) {
                    this.hand_card[pos][i].removeFromParent(true);
                }
            } catch (e) {

            }

            this.hand_card[pos] = [];
            var is_remove = 0;
            var real_index = 0;
            var _vec;
            var hasMoreCard = parseInt(cardList.length % 3) == 2;
            var needRes = false;
            MJModel.mj_mo_cards[pos] = -1;
            if (hasMoreCard) {
                if (hucard != 0 && hucard != null && hucard != undefined && hucard != 255) {
                    MJModel.mj_mo_cards[pos] = hucard;
                } else {
                    needRes = true;
                }
            }
            for (var i = 0; i < cardList.length; i++) {
                if (is_remove == 0 && hasMoreCard) {
                    if (cardList[i] == hucard) {
                        is_remove = 1;
                        continue;
                    }
                }
                var card = new MJCard();
                card.setValue(cardList[i], pos, CardType.Card_End, real_index);
                _vec = MJConfig.getEndCardPos(pos, real_index, cardList.length, needRes);
                card.setPosition(_vec);
                this.addChild(card, MJConfig.getHandCardOrder(pos, real_index));
                this.hand_card[pos].push(card);
                real_index++;
            }

            if (hasMoreCard && hucard != 0 && hucard != null && hucard != undefined && hucard != 255) {
                var card = new MJCard();
                card.setValue(hucard, pos, CardType.Card_End, 0);
                card.setPosition(MJConfig.getEndCardMoPos(pos));
                this.addChild(card, MJConfig.getMoCardOrder(pos));
                this.hand_card[pos].push(card);
            }
        } catch (e) {
            ERROR(this, "showEndCard" + e);
        }
    },

    initMoCard: function (pos, value, isDiretor, encrypt_code) {
        var fcard = Utils.getFCardValue(value, encrypt_code);
        if (fcard == 255) {
            return;
        }
        MJModel.mj_mo_cards[pos] = fcard;
        var card = new MJCard();
        this.hand_card[pos].push(card);
        card.setValue(value, pos, MJModel.isOnVideo ? CardType.Card_End : CardType.Card_Hand, -1, encrypt_code);

        card.setMyPosition(MJConfig.getMoCardPos(pos));
        if (pos == 0 && MJModel.seatid != -1) {
            card.setTouchEnable(true);
            var self = this;
            card.setUpCallback(function (card) {
                self.clickHandCardCallback(card);
            });
            card.setOutCallback(function (card) {
                self.outHandCardCallback(card);
            });
            if (MJModel.isAutoOutCard) card.setBlackVis(true);
        }

        this.addChild(card, MJConfig.getMoCardOrder(pos));
    },
    isDuoPai: function (pos) {
        try {
            var v = parseInt(this.hand_card[pos].length % 3);
            if (v == 2) {
                return true;
            }
            return false;
        } catch (e) {
            return false;
        }
    },
    outMyCard: function (out_card, isServer) {
        this.curOutCard = null;
        if (isServer == undefined) {
            isServer = false;
        }
        if (out_card) {
            cc.director.getRunningScene().removeChildByName("tingpai_layer");
            if (this.outCardBtn) this.outCardBtn.setVisible(false);
            if (isServer == false && MJModel.mj_self_outCard_type == 1) {
                out_card.goBack();
                return;
            }
            out_card = removeCardByCard(out_card, this.hand_card[0]);
            var card = out_card;
            var pos = 0;
            if (card) {
                card.reset();
                var delay = MJModel.speeds[MJModel.mj_speed - 1];
                if(delay == 0){
                    card.removeFromParent(true);
                    MJModel.mj_mo_cards[pos] = -1;
                    this.reflashHandCard(pos, true, true);
                    this.addOutCard(pos, card.value);
                    this.handler_out_card_sound(MJModel.players[MJModel.seatid].sex, card.value);
                }else {
                    var self = this;
                    MJModel.isEnterWait = true;
                    var move_callbck = cc.callFunc(function () {
                        card.removeFromParent(true);
                        self.reflashHandCard(pos, true, true);
                        self.addOutCard(pos, card.value);
                        self.handler_out_card_sound(MJModel.players[MJModel.seatid].sex, card.value);
                        MJModel.isEnterWait = false;
                    });
                    card.runAction(cc.sequence(cc.moveTo(delay, MJConfig.getOutCardPos(pos, this.out_card[pos].length)), move_callbck));
                }
            }
        }
    },

    setOutCardSoundCallback: function (callback) {
        this.outCardSoundCallback = callback;
    },

    handler_out_card_sound: function (sex, card) {
        if (this.outCardSoundCallback) {
            this.outCardSoundCallback(sex, card);
        }
    },

    //是否能动手牌，报听后不能动手牌，只能摸什么打什么
    canMoveHandCard:function (pos) {
        return MJModel.otherOutCardEffect;
    },

    outHandCard: function (pos, value) {
        this.resetLastOutCard();
        var size = cc.director.getWinSize();
        if (pos == 0 && MJModel.seatid != -1) {
            MJModel.isEnterWait = false;

            if (this.outCardBtn) this.outCardBtn.setVisible(false);
            if (this.isDuoPai(pos)) {
                var card = null;
                if (MJModel.isMyPos(pos) && this.curOutCard && this.curOutCard.getValue() == value) {
                    card = this.curOutCard;
                }
                if (card == null)card = findCardByValue(value, this.hand_card[pos]);
                if (card) {
                    this.outMyCard(card, true);
                }
            }
        }
        else {
            var card = null;
            var isHaveZiero = true;
            if (MJModel.getTangPaiFlag(pos)) {
                isHaveZiero = false;
                for (var i = 0; i < this.hand_card[pos].length; i++) {
                    if (this.hand_card[pos][i].getValue() == 0) {
                        isHaveZiero = true;
                    }
                }
            }

            card = removeCardByValue(MJModel.isOnVideo || !isHaveZiero ? value : 0, this.hand_card[pos] , this.canMoveHandCard(pos));
            if (card) {
                card.removeFromParent(true);
                this.outHandCardEffct2(pos, value);
            }
        }
        this.curOutCard = null;
    },
    resetLastOutCard: function () {
        try {
            if (this.lastOutCard) {
                this.lastOutCard.stopAllActions();
                this.lastOutCard.removeFromParent();
                //var self = this;
                //var card = this.lastOutCard;
                //var move_callbck = cc.callFunc(function () {
                //    card.setValue(card.getValue(), card.pos, CardType.Card_Out, self.out_card[card.pos].length - 1);
                //    card.setMyPosition(MJConfig.getOutCardPos(card.pos, self.out_card[card.pos].length - 1));
                //    card.setLocalZOrder(MJConfig.getOutCardOrder(card.pos, self.out_card[card.pos].length - 1));
                //});
                //this.lastOutCard.runAction(cc.sequence(cc.spawn(cc.moveTo(0.1, MJConfig.getOutCardPos(card.pos, this.out_card[card.pos].length - 1)), cc.scaleTo(0.1, 1)).easing(cc.easeSineIn()), move_callbck));
                this.lastOutCard = null;
            }
        } catch (e) {

        }
    },
    outHandCardEffct: function (pos, value, out_card) {
        try {
            var self = this;
            var card = this.addOutCard(pos, value);
            if (true) {
                MJModel.isEnterWait = true;

                this.setCurCardTip(false);
                card.setVisible(false);

                var uiNode = null;
                //var uiJson = ccs.load(getResPath(__String.createWithFormat("MJ2.5/handeffect/hand%1_get.json",pos)));
                //var uiNode = uiJson.node;
                //uiNode.setPosition(out_card.getPosition());
                //this.addChild(uiNode, 1000);

                var out_hand_card = cc.callFunc(function () {
                    try {
                        out_card.removeFromParent();
                    } catch (e) {

                    }
                });

                var get_card_over = cc.callFunc(function () {
                    try {
                        uiNode.removeFromParent();
                    } catch (e) {

                    }
                });

                var out_card_effect = cc.callFunc(function () {
                    try {
                        var uiJson = ccs.load(getResPath(__String.createWithFormat("MJ2.5/handeffect/hand%1_out.json", pos)));
                        uiNode = uiJson.node;
                        uiNode.setPosition(card.getPosition());
                        self.addChild(uiNode, 1000);
                    } catch (e) {

                    }
                });

                var show_out_card = cc.callFunc(function () {
                    self.setCurCardTip(true);
                    card.setVisible(true);
                    MJModel.isEnterWait = false;
                });

                var out_card_over = cc.callFunc(function () {
                    self.reflashHandCard(pos, true, true);
                    try {
                        uiNode.removeFromParent();
                    } catch (e) {

                    }
                });

                //this.runAction(cc.sequence(cc.delayTime(0.3), out_hand_card, get_card_over,
                //    cc.delayTime(0.0), out_card_effect,
                //    cc.delayTime(0.3), show_out_card,
                //    cc.delayTime(0.5), out_card_over));

                this.runAction(cc.sequence(out_hand_card,
                    cc.delayTime(0.0), out_card_effect,
                    cc.delayTime(0.3 + (pos == 3 ? 0.05 : 0) + (pos == 2 ? -0.05 : 0)), show_out_card,
                    cc.delayTime(0.2), out_card_over));
            } else {
                try {
                    out_card.removeFromParent();
                } catch (e) {

                }
            }
        } catch (e) {
            ERROR(this, "outHandCardEffct" + e);
        }
    },

    outHandCardEffct2: function (pos, value) {
        var size = cc.director.getWinSize();
        var card = new MJCard();
        card.setValue(value, 0, CardType.Card_Outing, 0);
        card.setPosition(MJConfig.getOutingCardPos(pos, 0));
        this.addChild(card, MJConfig.getOutingCardOrder(pos, 0));

        this.addOutCard(pos, value);
        this.reflashHandCard(pos, true, true);

        card.setCascadeColorEnabled(true);
        card.setCascadeOpacityEnabled(true);
        card.runAction(cc.sequence(cc.delayTime(0.5), cc.removeSelf()));
    },

    getHuaCard: function (pos, value) {
        var size = cc.director.getWinSize();
        var card = new MJCard();
        if (MJModel.isOnVideo) {
            card.setValue(value, pos, MJModel.isOnVideo ? CardType.Card_End : CardType.Card_Hand, this.hand_card[pos].length - 1);
        }
        else {
            card.setValue(MJModel.seatid != -1 && pos == 0 ? value : 0, pos, MJModel.isOnVideo ? CardType.Card_End : CardType.Card_Hand, this.hand_card[pos].length - 1);
        }
        card.setMyPosition(MJConfig.getMoCardPos(pos));
        this.addChild(card, MJConfig.getHandCardOrder(pos, this.hand_card[pos].length - 1));

        var self = this;
        var move_callbck = cc.callFunc(function () {
            card.removeFromParent(true);
            self.outHuaCardEffct(pos, value);
        });

        if (MJModel.seatid != -1 && pos == 0) {
            card.runAction(cc.sequence(cc.delayTime(0.5), cc.moveTo(0.1, MJConfig.getOutingCardPos(pos, 0)), move_callbck));
        }
        else {
            card.runAction(cc.sequence(cc.delayTime(0.5), move_callbck));
        }
    },

    outHuaCardEffct: function (pos, value) {
        var card1 = new MJCard();
        card1.setValue(value, pos, CardType.Card_Outing, 0);
        card1.setMyPosition(MJConfig.getOutingCardPos(pos, 0));
        this.addChild(card1, MJConfig.getOutingCardOrder(pos, 0));

        //outing effect
        var self = this;
        var move_callbck = cc.callFunc(function () {
            card1.removeFromParent(true);
            self.addHuaCard(pos, value);
            MJModel.isEnterWait = false;
        });
        card1.runAction(cc.sequence(cc.delayTime(1), cc.moveTo(0.3, MJConfig.getHuaCardPos(pos, this.hua_card[pos].length)), move_callbck));
    },

    removeHandCard: function (pos, value, nums) {
        if (nums == undefined) nums = 1;
        if (!(MJModel.isOnVideo) && !(MJModel.getTangPaiFlag(pos))) {
            if (MJModel.seatid == -1) {
                value = 0;
            }
            else if (pos != 0) {
                value = 0;
            }
        }
        var card = null;
        var isOk = false;
        if (MJModel.isMyPos(pos) && this.curOutCard && this.curOutCard.getValue() == value && nums == 1) {
            try {
                removeCardByCard(this.curOutCard, this.hand_card[pos]);
            } catch (e) {
                removeCardByValue(value, this.hand_card[pos]);
            }
            this.curOutCard.removeFromParent(true);
            isOk = true;
            this.curOutCard = null;
        } else {
            for (var i = 0; i < nums; i++) {
                card = removeCardByValue(value, this.hand_card[pos]);
                if (card) {
                    try {
                        card.removeFromParent(true);
                    } catch (e) {
                    }
                    isOk = true;
                }
            }
        }
        this.reflashHandCard(pos, true, false, true);
        this.curOutCard = null;
        return isOk;
    },

    getChoiceCards: function () {
        var cards = [];
        for (var i = 0; i < this.hand_card[0].length; i++) {
            var fcard = this.hand_card[0][i];
            if (fcard) {
                if (fcard.isUp) {
                    cards.push(fcard.getValue());
                }
            }
        }
        return cards;
    },

    isNeedOutCard: function (pos) {
        return this.isDuoPai(pos);
    },

    setCurChoiceType: function (type) {
        this.curChoiceType = type;
        if (this.curChoiceType == -1) {
            for (var i = 0; i < this.hand_card[0].length; i++) {
                var handCard = this.hand_card[0][i];
                if (handCard) {
                    handCard.setCardTouchEnable(true);
                    handCard.setBlackVis(false);
                }
            }
        } else {
            for (var i = 0; i < this.hand_card[0].length; i++) {
                var handCard = this.hand_card[0][i];
                if (handCard && parseInt(handCard.value / 16) != this.curChoiceType) {
                    // handCard.setCardTouchEnable(false);
                    // handCard.setBlackVis(true);
                    handCard.setUp(false);
                }
            }
        }
    },

    doChoiceMoreCard:function (card) {
        if (MJModel.canChoiceMoreType == 1) {
            //选择多个杠的时刻
            var size = MJModel.gang_info.length;
            for (var j = 0; j < size; j++) {
                var gif = MJModel.gang_info[j];
                if (card.getValue() == gif.curCard) {
                    MJModel.canTouchCard = false;
                    MJModel.canChoiceMore = false;
                    MJModel.canChoiceMoreType = 0;
                    sendOperateCard(MJModel.gang_info[j].state, MJModel.gang_info[j].curCard);
                    MJModel.mj_table.room_Action.setOperator(-1);
                    MJModel.mj_table.room_Action.removeChildByName("ChooseGang_selectLayer");
                    return;
                }
            }
        } else {
            if (card.isUp) {
                card.setUp(false);
                var upCards = this.getChoiceCards();
                if (upCards.length == 0) {
                    this.setCurChoiceType(-1);
                }
            }
            else {
                this.setCurChoiceType(parseInt(card.value / 16));
                card.setUp(true);
            }
        }
    },

    clickHandCardCallback: function (n) {
        if (MJModel.canTouchCard == false) {
            return;
        }
        var card = n;
        if (MJModel.canChoiceMore) {
            this.doChoiceMoreCard(card);
            return;
        }

        var preCard = null;

        for (var i = 0; i < this.hand_card[0].length; i++) {
            var fcard = this.hand_card[0][i];
            if (fcard) {
                if (fcard.isUp) preCard = fcard;
                fcard.setUp(false);
            }
        }

        if (this.outCardBtn) this.outCardBtn.setVisible(false);

        if (preCard && preCard == card) {
            if (MJModel.mj_double_click_style == 1)this.outHandCardCallback(n);
            return;
        }

        card.setUp(true);

        var hasTingPaiInfo = false;

        try {
            MJModel.mj_table.room_Tip.hideOutCardTip();
            MJModel.mj_table.removeChildByName("tingpai_layer");
            for (var i = 0; i < MJModel.listen_info.length; i++) {
                var tli = MJModel.listen_info[i];
                if (card.getValue() == tli.OutCard) {
                    var can_show_listen_info = true;
                    for (var j = 0; j < tli.HuInfo.length; j++) {
                        if (tli.HuInfo[j].Card == 255) {
                            can_show_listen_info = false;
                            break;
                        }
                    }

                    if (can_show_listen_info) {
                        MJModel.mj_listenLayer_autoshow = false;
                        var curTingPaiLayer = new TingPaiLayer();
                        curTingPaiLayer.show2(tli.HuInfo);

                        curTingPaiLayer.setName("tingpai_layer");
                        MJModel.mj_table.addChild(curTingPaiLayer, 100);
                        hasTingPaiInfo = true;
                    } else {
                        PlatformHelper.showToast("见字胡不显示听牌张");
                    }
                    break;
                }
            }
        } catch (e) {
            Log(this, e);
        }


        if (this.outCardBtn == null) {
            this.createOutCardBtn();
        }
        else {
            this.outCardBtn.setVisible(true);
        }

        if (this.outCardBtn) {
            var size = cc.director.getWinSize();
            this.outCardBtn.setPosition(cc.p(size.width - 120, 189));
            //if (hasTingPaiInfo && card.getPositionX() > size.width - 318) {
            //    this.outCardBtn.setPosition(cc.p(size.width - 168, 340 + 50));
            //}
            //else {
            //    this.outCardBtn.setPosition(cc.p(size.width - 168, 189));
            //}
        }
    },

    createOutCardBtn: function () {
        var self = this;
        this.outCardBtn = new ccui.Button(getResPath("RoomMJ/action/outcard01.png"), "");
        this.outCardBtn.setName("outCardBtn");
        this.outCardBtn.addClickEventListener(function (sender, evt) {
            for (var i = 0; i < self.hand_card[0].length; i++) {
                var fcard = self.hand_card[0][i];
                if (fcard) {
                    if (fcard.isUp) {
                        self.outHandCardCallback(fcard);
                        self.outCardBtn.setVisible(false);
                        break;
                    }
                }
            }
        });
        this.addChild(this.outCardBtn, 100000);
    },
    hideOutCardBtn: function () {
        if (this.outCardBtn) this.outCardBtn.setVisible(false);
    },
    outHandCardCallback: function (n) {
        if (this.outCardBtn) this.outCardBtn.setVisible(false);
        var card = n;
        this.showTouchCards(card.getValue(), false);
        if (MJModel.canTouchCard == true && MJModel.isMyPlayer(MJModel.cur_seat)) {
            try {
                this.curOutCard = card;
                sendOutCard(card.getValue());
                MJModel.isOutCard = true;
                MJModel.canTouchCard = false;
                //如果有第三方的继承函数 需要调继承的优先
                if (this.hasOwnProperty("outMyCard_extend") && typeof this.outMyCard_extend === "function") {
                    this.outMyCard_extend(card);
                } else {
                    this.outMyCard(card);
                }
            } catch (e) {
                Log(this, e);
                MJModel.canTouchCard = true;
            }
            // card.runAction(cc.sequence(cc.delayTime(0.3), cc.callFunc(function () {
            //     card.goBack();
            // })));

        }
        else {
            card.goBack();
        }
    },

    isSupportPublicCard:function () {
        return MJModel.mj_table.isSupportPublicCard();
    },

    ///////////////////////////公牌//////////////////////////////
    initPublicCard: function (sceneInfo) {
        if(!this.isSupportPublicCard()){
            return;
        }
        var cardList = MJModel.mj_public_nums;
        for (var pos = 0; pos < cardList.length; pos++) {
            for (var i = 0; i < cardList[pos]; i++) {
                var card = new MJCard();
                card.setValue(0, pos, CardType.Card_Public, i);
                this.public_card[pos].push(card);
                card.setMyPosition(MJConfig.getPublicCardPos(pos, i));
                this.addChild(card, MJConfig.getPublicCardOrder(pos, i));
            }
        }
    },

    removePublicCardByNums: function (nums, fromBack, jumpNums) {
        this.dealPublicCard(nums, fromBack, 0, jumpNums);
    },

    //isJumpByTwo:true : 一次跳一个牌堆，false : 一张牌一张牌的跳
    removePublicCardByJumpNums: function (nums, fromBack, jumpNums , isJumpByTwo) {
        this.dealPublicCard(nums, fromBack, 0, jumpNums , isJumpByTwo);
    },
    getNextPublicCard: function (fromBack, jumpNums) {
        return this.dealPublicCard(1, fromBack, 1, jumpNums);
    },
    getPublicCard: function (cur_pos, jumpNums, fromBack) {
        if (fromBack == true) {
            var h_nums = this.public_card[cur_pos].length / 2;
            for (var j = h_nums - 1; j >= 0; j--) {
                for (var k = 1; k >= 0; k--) {
                    var card = this.public_card[cur_pos][j * 2 + k];
                    if (card.isVisible()) {
                        try {
                            if (jumpNums > 0) {
                                jumpNums--;
                                continue;
                            }
                            return card;
                        } catch (e) {
                        }
                    }
                }
            }
        } else {
            var h_nums = this.public_card[cur_pos].length / 2;
            for (var j = 0; j < h_nums; j++) {
                for (var k = 1; k >= 0; k--) {
                    var card = this.public_card[cur_pos][j * 2 + k];
                    if (card.isVisible()) {
                        try {
                            if (jumpNums > 0) {
                                jumpNums--;
                                continue;
                            }
                            return card;
                        } catch (e) {
                        }
                    }
                }
            }
        }
    },
    doPublicCardParam: function () {
        var pl_n = 4;
        if (MJModel.mj_roomType == 1) {
            pl_n = 3;
        } else if (MJModel.mj_roomType == 2) {
            pl_n = 2;
        }
        var beginSeat = parseInt((MJModel.mj_public_sz1 + MJModel.mj_public_sz2) % pl_n) - 1 + MJModel.banker_seatid;
        if (beginSeat >= pl_n)beginSeat -= pl_n;
        if (beginSeat < 0)beginSeat = pl_n - 1;

        var beginPos = MJModel.getPosBySeatid(beginSeat);
        var beginIndex = MJModel.mj_public_nums[beginPos] / 2 - Math.min(MJModel.mj_public_sz1, MJModel.mj_public_sz2);
        MJModel.mj_public_begin_pos = beginPos;
        MJModel.mj_public_begin_nums = beginIndex;
    },
    //deal_type 0移除 1获取牌背 一次跳一个牌堆
    dealPublicCard: function (nums, fromBack, deal_type, jumpNums , isJumpByTwo) {
        try {
            if (nums <= 0)return true;
            if (fromBack == undefined)fromBack = false;
            if (deal_type == undefined)deal_type = 0;
            if (jumpNums == undefined)jumpNums = 0;
            if (isJumpByTwo == undefined) isJumpByTwo = false;

            if (MJModel.mj_public_begin_pos == -1) {
                this.doPublicCardParam();
            }
            var beginPos = MJModel.mj_public_begin_pos;
            var beginIndex = MJModel.mj_public_begin_nums;
            var count = 0;
            var cur_pos = beginPos;
            if (fromBack == false) {
                for (var i = 0; i < 5; i++) {
                    var h_nums = this.public_card[cur_pos].length / 2;
                    for (var j = h_nums - 1; j >= 0; j--) {
                        //i != 4由于第一个人会被截断 所以需要检查两次
                        if (i != 4 && cur_pos == beginPos && j >= beginIndex) {
                            continue;
                        }
                        for (var k = 1; k >= 0; k--) {
                            var card = this.public_card[cur_pos][j * 2 + k];
                            if (card.isVisible()) {
                                try {
                                    if (jumpNums > 0) {
                                        if(isJumpByTwo){
                                            if(k == 0){
                                                jumpNums--;
                                            }
                                        }else {
                                            jumpNums--;
                                        }
                                        continue;
                                    }

                                    // if (deal_type == 0 && card.getValue() != 0) {
                                    //     continue;
                                    // }
                                    // if (deal_type == 0 && card.getValue() == 0) {
                                    //     card.setVisible(false);
                                    // }

                                    if (deal_type == 0) {
                                        card.setVisible(false);
                                    }

                                    count++;
                                    if (count >= nums)return card;
                                } catch (e) {
                                }
                            }
                        }
                    }
                    cur_pos -= 1;
                    if (cur_pos < 0)cur_pos = 3;
                }
            } else {
                for (var i = 0; i < 4; i++) {
                    var h_nums = this.public_card[cur_pos].length / 2;
                    for (var j = 0; j < h_nums; j++) {
                        if (cur_pos == beginPos && j < beginIndex) {
                            continue;
                        }
                        for (var k = 1; k >= 0; k--) {
                            var card = this.public_card[cur_pos][j * 2 + k];
                            if (card.isVisible()) {
                                try {
                                    if (jumpNums > 0) {
                                        if(isJumpByTwo){
                                            if(k == 0){
                                                jumpNums--;
                                            }
                                        }else {
                                            jumpNums--;
                                        }
                                        continue;
                                    }

                                    // if (deal_type == 0 && card.getValue() != 0) {
                                    //     continue;
                                    // }
                                    // if (deal_type == 0 && card.getValue() == 0) {
                                    //     card.setVisible(false);
                                    // }

                                    if (deal_type == 0) {
                                        card.setVisible(false);
                                    }

                                    count++;
                                    if (count >= nums)return card;
                                } catch (e) {
                                }
                            }
                        }
                    }
                    cur_pos += 1;
                    if (cur_pos >= 4)cur_pos = 0;
                }
            }
        } catch (e) {

        }
    },

    ///////////////////////////出牌///////////////////////////
    initOutCard: function (pos, cardList) {
        for (var i = 0; i < cardList.length; i++) {
            //var card = new MJCard();
            //card.setValue(cardList[i], pos, CardType.Card_Out, i);
            //this.out_card[pos].push(card);
            //card.setMyPosition(MJConfig.getOutCardPos(pos, i));
            //this.addChild(card, MJConfig.getOutCardOrder(pos, i));
            this.addOutCard(pos, cardList[i], false);
        }
    },

    addOutCard: function (pos, value, showPoint) {
        if (showPoint == undefined) showPoint = true;
        var card = new MJCard();

        this.out_card[pos].push(card);
        card.setValue(value, pos, CardType.Card_Out, this.out_card[pos].length - 1);
        card.setMyPosition(MJConfig.getOutCardPos(pos, this.out_card[pos].length - 1));
        this.addChild(card, MJConfig.getOutCardOrder(pos, this.out_card[pos].length - 1));

        if (showPoint == false) {
            return card;
        }
        try {
            if (this.curCardTip == null) {

                this.curCardTip = new cc.Sprite(getResPath("RoomMJ/cur_card.png"));
                this.curCardTip.setAnchorPoint(cc.p(0.5, 0));
                this.curCardTip.runAction(cc.sequence(cc.moveBy(0.5, cc.p(0, 10)), cc.moveBy(0.5, cc.p(0, -10))).repeatForever());
                this.curCardTip.setVisible(false);
                this.addChild(this.curCardTip, 1000);
            }
        } catch (e) {
            this.curCardTip = null;
        }

        if (this.curCardTip != null) {
            this.curCardTip.setPosition(cc.p(card.getPosition().x, card.getPosition().y + card.getBoundingBox().height / 2));
            this.curCardTip.setVisible(true);
        }
        return card;
    },

    initCurOutCardTip: function (pos, value) {
        var card = findCardByValue(value, this.out_card[pos]);
        if (card) {
            try {
                if (this.curCardTip == null) {
                    this.curCardTip = new cc.Sprite(getResPath("RoomMJ/cur_card.png"));
                    this.curCardTip.setAnchorPoint(cc.p(0.5, 0));
                    this.curCardTip.runAction(cc.sequence(cc.moveBy(0.5, cc.p(0, 10)), cc.moveBy(0.5, cc.p(0, -10))).repeatForever());
                    this.curCardTip.setVisible(false);
                    this.addChild(this.curCardTip, 1000);
                }
            } catch (e) {
                this.curCardTip = null;
            }
            if (this.curCardTip) {
                this.curCardTip.setPosition(cc.p(card.getPosition().x, card.getPosition().y + card.getBoundingBox().height / 2));
                this.curCardTip.setVisible(true);
            }
        }
    },

    removeOutCard: function (pos, value, canDelay) {
        this.resetLastOutCard();

        //if (this.lastOutCard && this.lastOutCard.getValue() == value) {
        //    this.lastOutCard.stopAllActions();
        //    this.lastOutCard = null;
        //}
        var card = removeCardByValue(value, this.out_card[pos]);
        if (card) {
            try {
                var p = card.getPosition();
                card.removeFromParent(true);
                if (canDelay && MJModel.needSpecialAnim) {
                    this.showLightAnim(p);
                }
                return true;
            } catch (e) {
                return false;
            }
        }
        return false;
    },

    lightAnimate: null,
    lightAnim: null,

    showLightAnim: function (position) {
        try {
            if (this.lightAnim == null) {
                cc.spriteFrameCache.addSpriteFrames(getResPath("RoomMJ/effect2/light/yf_skill02.plist"));
                this.lightAnim = new cc.Sprite(cc.spriteFrameCache.getSpriteFrame("yf_skill02_01.png"));
                this.lightAnim.setVisible(false);
                this.lightAnim.setAnchorPoint(cc.p(0.5, 0));

                var animation = new cc.Animation();
                for (var i = 1; i <= 6; i++) {
                    animation.addSpriteFrame(cc.spriteFrameCache.getSpriteFrame(__String.createWithFormat("yf_skill02_0%1.png", i)));
                }
                animation.setDelayPerUnit(1.0 / 60);
                this.lightAnimate = cc.animate(animation);

                this.addChild(this.lightAnim, 1000);
            }
            if (!this.lightAnim.isVisible()) {
                this.lightAnim.setPosition(cc.p(position.x, position.y - 20));
                this.lightAnim.setVisible(true);
                this.lightAnim.runAction(cc.sequence(this.lightAnimate.repeat(1), cc.hide()));
                Sound.getInstance().playEffect(__String.createWithFormat(getResPath("RoomMJ/sound/sound_l_light.mp3")));
            }
        } catch (e) {
            this.lightAnim = null;
            this.lightAnimate = null;
        }
    },

    removeOutCardCheckGang: function (pos, value) {
        var card = removeCardByValue(value, this.out_card[pos]);
        if (card) {
            card.removeFromParent(true);
            this.setCurCardTip(false);
            this.resetOutCardPosition(pos);
        }

        var length = this.hand_card[pos].length;
        if (length % 3 == 0) {
            //这里需要补一张手牌
            if (pos == 0 && MJModel.seatid != -1) {
                this.addHandCard(pos, value);
            } else {
                this.addHandCard(pos, 0);
            }
            this.reflashHandCard(pos);
        }
    },

    resetOutCardPosition: function (pos) {
        if (pos >= 0 && pos <= 3) {
            for (var i = 0; i < this.out_card[pos].length; i++) {
                var card = this.out_card[pos][i];
                card.setMyPosition(MJConfig.getOutCardPos(pos, i));
                card.setLocalZOrder(MJConfig.getOutCardOrder(pos, i));
            }
        }
    },

    ///////////////////////////胡牌///////////////////////////
    initHuCard: function (pos, cardList) {
        this.hu_card[pos] = [];
        if (cardList.length > 0) {
            for (var i = 0; i < cardList.length; i++) {
                this.addHuCard(pos, cardList[i]);
            }
        }
    },


    addHuCard: function (pos, value) {
        var card = new MJCard();
        this.hu_card[pos].push(card);
        card.setValue(value, pos, CardType.Card_Hu, this.hu_card[pos].length - 1);
        card.setMyPosition(MJConfig.getHuCardPos(pos, this.hu_card[pos].length - 1));
        this.addChild(card, MJConfig.getHuCardOrder(pos, this.hu_card[pos].length - 1));
        return card;
    },

    initHuaCard: function (pos, cardList) {
        this.hua_card[pos] = [];
        if (cardList.length > 0) {
            for (var i = 0; i < cardList.length; i++) {
                cc.log("1pos:" + pos);
                this.addHuaCard(pos, cardList[i]);
            }
        }
    },

    isHaveHuaCard: function (pos) {
        return this.hua_card[pos].length > 0;
    },

    addHuaCard: function (pos, value) {
        var card = new MJCard();
        cc.log("2pos:" + pos);
        this.hua_card[pos].push(card);
        card.setValue(value, pos, CardType.Card_Hu, this.hu_card[pos].length - 1);
        card.setMyPosition(MJConfig.getHuaCardPos(pos, this.hua_card[pos].length - 1));
        this.addChild(card);
    },

    isAlreadyHu: function (pos) {
        return this.hu_card[pos].length > 0;
    },

    setAutoOutCard: function (v) {
        if (MJModel.seatid == -1)return;
        for (var i = 0; i < this.hand_card[0].length; i++) {
            this.hand_card[0][i].setBlackVis(v);
        }
    },

    ///////////////////////////碰扛牌///////////////////////////
    addPengCard: function (pos, type, value, out_pos, OpType, specialCard,LaiziNum,cardList) {
        if (type != PengType.Chi_L && type != PengType.Chi_M && type != PengType.Chi_R) {
            for (var i = 0; i < this.peng_card[pos].length; i++) {
                var p = this.peng_card[pos][i];
                //杠的类型 不能重复添加 有特殊要求需覆盖此函数
                if (p.pengType == type && p.getValue() == value && value != 0) {
                    return false;
                }
            }
        }
        var card = new MJPeng();
        this.peng_card[pos].push(card);
        card.setValue(type, pos, value, this.peng_card[pos].length - 1, out_pos, false, OpType, specialCard,LaiziNum,cardList);
        card.setPosition(MJConfig.getPengKangCardPos(pos, this.peng_card[pos].length - 1));
        card.setScale(MJConfig.getScale_new(pos, CardType.Card_Peng, this.peng_card[pos].length - 1, false));
        this.addChild(card, MJConfig.getPengKangCardOrder(pos, this.peng_card[pos].length - 1));
        return true;
    },

    changPengCard: function (pos, type, value, out_pos, OpType, specialCard,cardList) {
        var isOk = false;
        for (var i = 0; i < this.peng_card[pos].length; i++) {
            if (this.peng_card[pos][i].pengType == PengType.Peng_Peng && this.peng_card[pos][i].getValue() == value) {
                this.peng_card[pos][i].setValue(type, pos, value, i, this.peng_card[pos][i].out_pos, false, OpType, specialCard,cardList);
                isOk = true;
                break;
            }
        }
        return isOk;
    },
    changeAnGang: function (pos, type, value, out_pos,cardList) {
    //此函数 仅使用于 打牌时暗杠按着 游戏结束亮出
        for (var i = 0; i < this.peng_card[pos].length; i++) {
            if (this.peng_card[pos][i].pengType == PengType.Peng_AnKang && this.peng_card[pos][i].getValue() == 0) {
                this.peng_card[pos][i].setValue(type, pos, value, i, out_pos,cardList);
                break;
            }
        }
    },
    changeWanGang: function (pos, type, value, out_pos,cardList) {
        for (var i = this.peng_card[pos].length - 1; i >= 0; i--) {
            if (this.peng_card[pos][i].getValue() == value) {
                this.peng_card[pos][i].setValue(type, pos, value, i, this.peng_card[pos][i].out_pos,cardList);
                break;
            }
        }
    },
    changeZhiGang: function (pos, type, value, out_pos,cardList) {
        for (var i = this.peng_card[pos].length - 1; i >= 0; i--) {
            if (this.peng_card[pos][i].getValue() == value) {
                this.peng_card[pos][i].removeFromParent();
                this.peng_card[pos].splice(i, 1);
                return true;
            }
        }
        return false;
    },
    setTingPaiFlag: function (v) {
        if (v) {
            cc.log("setTingPaiFlag true");
            for (var i = 0; i < MJModel.listen_info.length; i++) {
                var tli = MJModel.listen_info[i];
                for (var j = 0; j < this.hand_card[0].length; j++) {
                    var card = this.hand_card[0][j];
                    if (card.getValue() == tli.OutCard) {
                        card.setTingPai(true);
                    }
                }
            }
        }
        else {
            cc.log("setTingPaiFlag false");
            for (var j = 0; j < this.hand_card[0].length; j++) {
                var card = this.hand_card[0][j];
                card.setTingPai(false);
            }
            MJModel.mj_table.removeChildByName("tingpai_layer");
        }
    },

    reset: function () {
        this.removeAllChildren();
        this.stopAllActions();
        this.other_card = [];
        for (var i = 0; i < 4; i++) {
            this.hand_card[i] = [];
            this.out_card[i] = [];
            this.peng_card[i] = [];
            this.public_card[i] = [];
            this.hu_card[i] = [];
            this.niao_card[i] = [];
            this.hua_card[i] = [];
        }
        this.curCardTip = null;
        this.outCardBtn = null;
        this.lastOutCard = null;
        this.lightAnim = null;
    },
    reflashAllCardUI: function () {
        this.setCurCardTip(false);
        var has_do_mo = false;
        for (var i = 0; i < this.hand_card.length; i++) {
            has_do_mo = false;
            for (var j = 0; j < this.hand_card[i].length; j++) {
                try {
                    var card = this.hand_card[i][j];
                    card.reflashUI();
                    if (has_do_mo == false && card.getValue() == MJModel.mj_mo_cards[i] && j == (this.hand_card[i].length - 1)) {
                        if (card.type == CardType.Card_End) {
                            card.setMyPosition(MJConfig.getEndCardMoPos(i));
                        } else {
                            card.setMyPosition(MJConfig.getMoCardPos(i));
                        }

                        this.reorderChild(card, MJConfig.getMoCardOrder(i));
                        has_do_mo = true;
                    } else {
                        if (card.type == CardType.Card_End) {
                            card.setMyPosition(MJConfig.getEndCardPos(i, has_do_mo == true ? j - 1 : j, 0, MJModel.mj_mo_cards[i] == -1 && this.isDuoPai(i)));
                        } else {
                            card.setMyPosition(MJConfig.getHandCardPos(i, has_do_mo == true ? j - 1 : j, 0, MJModel.mj_mo_cards[i] == -1 && this.isDuoPai(i)));
                        }
                        this.reorderChild(card, MJConfig.getHandCardOrder(i, j));
                    }
                    card.stopAllActions();
                } catch (e) {
                }
            }
        }

        for (var i = 0; i < this.hu_card.length; i++) {
            for (var j = 0; j < this.hu_card[i].length; j++) {
                try {
                    var card = this.hu_card[i][j];
                    card.reflashUI();
                    card.setMyPosition(MJConfig.getHuCardPos(i, j));
                    this.reorderChild(card, MJConfig.getHuCardOrder(i, j));
                    card.stopAllActions();
                } catch (e) {
                }
            }
        }

        for (var i = 0; i < this.out_card.length; i++) {
            for (var j = 0; j < this.out_card[i].length; j++) {
                try {
                    var card = this.out_card[i][j];
                    card.reflashUI();
                    card.setMyPosition(MJConfig.getOutCardPos(i, j));
                    this.reorderChild(card, MJConfig.getOutCardOrder(i, j));
                    card.stopAllActions();
                } catch (e) {

                }
            }
        }

        for (var i = 0; i < this.peng_card.length; i++) {
            for (var j = 0; j < this.peng_card[i].length; j++) {
                try {
                    var peng = this.peng_card[i][j];
                    peng.reflashUI();
                    peng.setPosition(MJConfig.getPengKangCardPos(i, j));
                    peng.setScale(MJConfig.getScale_new(i, CardType.Card_Peng, j, false));
                    this.reorderChild(peng, MJConfig.getPengKangCardOrder(i, j));
                } catch (e) {

                }
            }
        }

        for (var i = 0; i < this.other_card.length; i++) {
            try {
                var card = this.other_card[i];
                card.reflashUI();
            } catch (e) {

            }
        }

        for (var i = 0; i < this.public_card.length; i++) {
            for (var j = 0; j < this.public_card[i].length; j++) {
                try {
                    var card = this.public_card[i][j];
                    if (card.isVisible() == false) {
                        continue;
                    }
                    card.setMyPosition(MJConfig.getPublicCardPos(i, j));
                    card.reflashUI();
                    card.stopAllActions();
                } catch (e) {
                    Log(this, e);
                }
            }
        }
    },

    getGoodPaiSe: function () {
        var wanCount = 0;
        var tiaoCount = 0;
        var tongCount = 0;
        for (var i = 0; i < this.hand_card[0].length; i++) {
            var card = this.hand_card[0][i];
            var paiSe = parseInt(card.value / 16);
            switch (paiSe) {
                case MJ_TYPE.MJ_TYPE_WAN:
                    wanCount++;
                    break;
                case MJ_TYPE.MJ_TYPE_TIAO:
                    tiaoCount++;
                    break;
                case MJ_TYPE.MJ_TYPE_TONG:
                    tongCount++;
                    break;
                default:
                    break;
            }

        }
        cc.log("wanCount:" + wanCount + "tiaoCount:" + tiaoCount + "tongCount:" + tongCount);
        if (wanCount <= tiaoCount && wanCount <= tongCount) {
            return MJ_TYPE.MJ_TYPE_WAN;
        }
        else if (tiaoCount <= wanCount && tiaoCount <= tongCount) {
            return MJ_TYPE.MJ_TYPE_TIAO;
        }
        else {
            return MJ_TYPE.MJ_TYPE_TONG;
        }
    },

    createEndHandcardLayer: function (handcards, hucard) {
        var layer = new cc.Layer();
        var cardList = [];
        var changeable_Size = handcards.ChangeableCards.length;
        for (var j = 0; j < changeable_Size; j++) {
            var cardDataNum = handcards.ChangeableCards[j];
            cardList.push(cardDataNum);
        }

        try {
            cardList.sort(this.sortCard);
        } catch (e) {
            Log(this, e);
        }

        try {
            var is_remove = 0;
            var real_index = 0;
            var _vec;
            var hasHuCard = false;
            var hasMoreCard = parseInt(cardList.length % 3) == 2;
            if (hucard != 0 && hucard != null && hucard != undefined && hucard != 255) {
                hasHuCard = true;
            }
            for (var i = 0; i < cardList.length; i++) {
                if (is_remove == 0 && hasMoreCard && hasHuCard) {
                    if (cardList[i] == hucard) {
                        is_remove = 1;
                        continue;
                    }
                }
                var card = new MJCard();
                card.setValue(cardList[i], 0, CardType.Card_End, real_index);
                _vec = MJConfig.getEndCardPos(0, real_index, cardList.length, hasMoreCard && !hasHuCard);
                card.setPosition(_vec);
                layer.addChild(card, MJConfig.getHandCardOrder(0, real_index));
                real_index++;
            }

            if (hasHuCard) {
                var card = new MJCard();
                card.setValue(hucard, 0, CardType.Card_End, 0);
                card.setPosition(MJConfig.getEndCardMoPos(0));
                layer.addChild(card, MJConfig.getMoCardOrder(0));
            }
        } catch (e) {

        }

        if (handcards.stFixedCards) {
            var groupcard_size = handcards.stFixedCards.length;
            var allpenggangcards = handcards.stFixedCards;
            for (var j = 0; j < groupcard_size; j++) {
                var cardData = allpenggangcards[j].CardData;
                var state = allpenggangcards[j].state;
                var LaiziNum = allpenggangcards[j].LaiziNum;
                var type = PengType.Peng_Peng;
                if ((state & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                    type = PengType.Peng_Peng;
                }
                else if ((state & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                    type = PengType.Peng_AnKang;
                }
                else if ((state & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                    type = PengType.Chi_L;
                }
                else if ((state & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                    type = PengType.Chi_M;
                }
                else if ((state & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                    type = PengType.Chi_R;
                }
                else {
                    type = PengType.Peng_Kang;
                }

                var card = new MJPeng();
                card.setValue(type, 0, cardData, j, 0, false, state, LaiziNum);
                card.setPosition(MJConfig.getPengKangCardPos(0, j));
                card.setScale(MJConfig.getScale_new(0, CardType.Card_Peng, j, false));
                layer.addChild(card, MJConfig.getPengKangCardOrder(0, j));
            }
        }
        return layer;
    },
    checkCard: function (ar, v) {
        if (ar[v]) {
            ar[v]++;
            if (v != 0 && ar[v] > 4) {
                cc.log("checkCard: v " + v + "n " + ar[v]);
                return false;
            }
        } else {
            ar[v] = 1;
        }
        return true;
    },
    checkCardsValid: function () {
        var allcards = [];
        for (var j = 0; j < this.hand_card[0].length; j++) {
            try {
                var card = this.hand_card[0][j];
                if (this.checkCard(allcards, card.getValue()) == false)return false;
            } catch (e) {
            }
        }

        for (var i = 0; i < this.out_card.length; i++) {
            for (var j = 0; j < this.out_card[i].length; j++) {
                try {
                    var card = this.out_card[i][j];
                    if (this.checkCard(allcards, card.getValue()) == false)return false;
                } catch (e) {

                }
            }
        }

        for (var i = 0; i < this.hu_card.length; i++) {
            for (var j = 0; j < this.hu_card[i].length; j++) {
                try {
                    var card = this.hu_card[i][j];
                    if (this.checkCard(allcards, card.getValue()) == false)return false;
                } catch (e) {
                }
            }
        }

        for (var i = 0; i < this.peng_card.length; i++) {
            for (var j = 0; j < this.peng_card[i].length; j++) {
                try {
                    var peng = this.peng_card[i][j];
                    for (var k = 0; k < peng.cardList.length; k++) {
                        var card = peng.cardList[k];
                        var v = card.getValue();
                        if (v == 0) {
                            v = peng.getValue();
                        }
                        if (this.checkCard(allcards, v) == false)return false;
                    }
                } catch (e) {

                }
            }
        }

        if (this.checkTypesValid(allcards) == false)return false;
        return true;
    },
    checkTypesValid: function (ar) {
        return true;
    },
    checkCardSafe: function (md5s, pos) {
        if (pos == undefined)pos = 0;
        if (!md5s)md5s = "";
        var cardNums = true;
        if (pos == 0 && !Utils.isDebugServer()) {
            cardNums = this.checkCardsValid();
        }
        var cardMD5 = this.checkCardMD5(md5s, pos);

        if (cardNums == false || cardMD5 == false) {
            if (MJModel.isLogOut)return;
            //MJModel.mj_table.reConnect();
            MJModel.isLogOut = true;

            MJModel.mj_table.release();
            ZJHModel.getInstance().roomToHall();
            ERROR(this, "checkCardSafe error: uid" + ZJHModel.getInstance().uid + "cardNums:" + cardNums + " cardMD5:" + cardMD5);
            PlatformHelper.showToast("数据错误，请勿进行违规操作");
        }
    },
    sortCardMD5: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object")av = a.getValue();
            if (typeof b === "object")bv = b.getValue();
            return av - bv;
        } catch (e) {
            return 0;
        }
    },
    checkCardMD5: function (md5s, pos) {
        if (md5s == null || md5s == undefined || md5s == "")return true;
        if (pos == undefined) pos = 0;
        var str = "__beauty__";
        var allcards = [];
        for (var j = 0; j < this.hand_card[pos].length; j++) {
            try {
                var card = this.hand_card[pos][j];
                allcards.push(card.getValue());
            } catch (e) {
            }
        }

        try {
            allcards.sort(this.sortCardMD5);
        } catch (e) {
        }

        for (var j = 0; j < allcards.length; j++) {
            try {
                var card = allcards[j];
                str += card;
            } catch (e) {
            }
        }
        str += "??wangsiying??";
        var md5str = hex_md5(str);
        cc.log("checkCardMD5:" + str + " md5:" + md5str);
        return md5s == md5str;
    },
    setUp : function (isUp) {
        for (var i = 0; i < this.hand_card[0].length; i++) {
            var fcard = this.hand_card[0][i];
            fcard.setUp(isUp);
        }
    },
});

var MJCard = cc.Layer.extend({
    tag: "MJCard",
    value: 0,
    pos: -1,
    type: 0,
    index: 0,
    touchEnable: false,
    isUp: false,
    isMove: false,
    touchEnd: false,
    isCheckUp: false,
    isCardTouch: true,
    touchBegin: false,
    touchBeginY: 0,

    light_bg: null,
    tingpai_flag: null,
    black_bg: null,

    huazhu_flag: null,
    GuiPaiIdentify: null,

    initPos: null,
    _upcallback: null,
    _outcallback: null,
    listener: null,
    _myOrder: 0,

    isAlreadyOut: false,

    store_color: null,
    black_color: null,
    _localZOrder: 0,
    _value: 0,
    _value1: 0x00,
    _checkValue: 0x00,
    _randomValue: 0,
    _randomValue1: 0,
    getValue: function () {
        if ((this._value) * (this._value1) != this._checkValue) {
            ERROR(this, "uid:" + ZJHModel.getInstance().uid + "涉嫌作弊");
            MJModel.mj_table.reConnect();
        }
        return (this._value ^ this._randomValue) ^ (this._value1 ^ this._randomValue1);
    },
    setStoreColor: function (c) {
        this.store_color = c;
        try {
            var bg_sp = this.getChildByName("sprite");
            bg_sp.setColor(this.store_color);
        } catch (e) {
            Log(this, e);
        }
    },
    ctor: function () {
        this._super();
    },
    setUpCallback: function (callback) {
        this._upcallback = callback;
    },
    setOutCallback: function (callback) {
        this._outcallback = callback;
    },
    check_addFlag: function () {

    },
    reflashUI: function () {
        this.setValue(this._value ^ this._randomValue, this.pos, this.type, this.index, this._value1 ^ this._randomValue1);
    },
    reflash: function (index) {
        try {
            this.index = index;
            var bg_sp = this.getChildByName("sprite");
            var ss = MJConfig.getScale_new(this.pos, this.type, index, true);
            bg_sp.setScale(ss);
        } catch (e) {

        }
    },
    createTingFlag: function () {
        if (this.tingpai_flag) {
            try {
                this.tingpai_flag.removeFromParent(true);
            } catch (e) {

            }

            this.tingpai_flag = null;
        }

        var m_size = this.getContentSize();
        this.tingpai_flag = new cc.Sprite(getResPath("RoomMJ/ting.png"));
        this.tingpai_flag.setAnchorPoint(cc.p(1, 1));
        this.tingpai_flag.setPosition(cc.p(m_size.width, m_size.height));
        this.tingpai_flag.setVisible(false);
        this.addChild(this.tingpai_flag);
    },
    checkCardValid: function (v) {
        return true;
    },
    setValue_new: function (value, pos, type, index, _value1) {
        this.value = value;
        this.pos = pos;
        this._value = (value == null || value == undefined) ? 0 : value;
        this._value1 = (_value1 == null || _value1 == undefined) ? 0x00 : _value1;
        this.type = type;
        this.index = index;
        this._randomValue = Utils.Random(1, 128);
        this._randomValue1 = Utils.Random(1, 128);
        this._value ^= this._randomValue;
        this._value1 ^= this._randomValue1;
        this._checkValue = this._value * this._value1;

        try {
            this.removeChildByName("sprite");
        } catch (e) {

        }

        var fvalue = this.getValue();
        var bg_str = MJConfig.getCardStr_new(fvalue, pos, type, index);
        var sp_frame = null;
        if (bg_str != "")sp_frame = cc.spriteFrameCache.getSpriteFrame(bg_str);
        if (sp_frame && this.checkCardValid(fvalue)) {
            try {
                var bg_sp = new cc.Sprite(sp_frame);
                bg_sp.setName("sprite");
                bg_sp.setPosition(cc.p(bg_sp.getContentSize().width / 2, bg_sp.getContentSize().height / 2));

                if (type == CardType.Card_Outing) {
                    var cardOutBg = new cc.Sprite(getResPath("RoomMJ/out_bg.png"));
                    cardOutBg.setPosition(bg_sp.getPosition());
                    this.addChild(cardOutBg);
                }

                this.addChild(bg_sp);
                var ss = MJConfig.getScale_new(pos, type, index, true);
                bg_sp.setScale(ss);

                var m_size = bg_sp.getContentSize();
                this.ignoreAnchorPointForPosition(false);
                this.setContentSize(m_size);
                this.setAnchorPoint(cc.p(0.5, 0.5));

                //有人截图 只有一个听牌角标 牌空白
                if (m_size.width < 10 || m_size.height < 10 || ss <= 0.1) {
                    this.sendErrorLog("error no the card3:", type, fvalue, pos);
                }
            } catch (e) {
                this.sendErrorLog("error no the card2:", type, fvalue, pos);
            }

            this.createTingFlag();
        } else {
            this.sendErrorLog("error no the card1:", type, fvalue, pos);
        }

        this.check_addFlag();
    },
    sendErrorLog: function (tag, type, fvalue, pos) {
        if (type == CardType.Card_Public) return;
        if (MJModel.isLogOut)return;
        MJModel.isLogOut = true;
        MJModel.mj_table.release();
        ZJHModel.getInstance().roomToHall();
        ERROR(this, tag + fvalue + " pos:" + pos + " type:" + type);
        PlatformHelper.showToast("数据错误，请勿进行违规操作!!");
    },
    updateValue: function (value, _value1) {
        this.setValue(value, this.pos, this.type, this.index, _value1);
    },
    setValue: function (value, pos, type, index, _value1) {
        this.setValue_new(value, pos, type, index, _value1);
    },

    getChoiceTipColor: function () {
        return cc.color(141, 245, 175);
    },

    setChoiceTipShow: function (isShow) {
        try {
            var bg_sp = this.getChildByName("sprite");

            if (isShow) {
                bg_sp.setColor(this.getChoiceTipColor());
            } else {

                if (this.black_color) {
                    bg_sp.setColor(this.black_color);
                    return;
                }

                if (this.store_color) {
                    bg_sp.setColor(this.store_color);
                } else {
                    bg_sp.setColor(cc.color(255, 255, 255));
                }
            }
        } catch (e) {
            Log(this, e);
        }
    },

    setTempColor: function (color) {
        try {
            var bg_sp = this.getChildByName("sprite");
            bg_sp.setColor(color);
        } catch (e) {
            Log(this, e);
        }
    },

    resetColor: function () {
        var bg_sp = this.getChildByName("sprite");
        if (this.store_color) {
            bg_sp.setColor(this.store_color);
        } else {
            bg_sp.setColor(cc.color(255, 255, 255));
        }
    },

    showPai: function (isShow, value) {
        var cardBg = this.getChildByName("sprite");
        var pos = this.pos;
        if (cardBg) {
            if (!isShow) {
                value = 0;
                if(pos == 0){
                    value = this.value;
                }
                this.setValue(value , this.pos , CardType.Card_Hand , 0);
            } else {
                if (value == undefined) {
                    this.setValue(this.value , this.pos , CardType.Card_End, 0);
                } else {
                    this.setValue(value , this.pos , CardType.Card_End, 0);
                }
            }
        }
    },

    reset: function () {
        this.unschedule(this.checkUp);
        this.setTingPai(false);
        this.setLight(false);
        this.stopAllActions();
        this.setRotation(0);
        this.resetColor();
        this.isUp = false;
    },

    setMyPosition: function (pos) {
        this.initPos = pos;
        this.setPosition(this.initPos);
        this.isUp = false;
    },
    onExit: function () {
        try {
            if (this.listener) cc.eventManager.removeListener(this.listener);
        } catch (e) {
        }

        this._super();
    },
    setTouchEnable: function (b) {
        // this.touchEnable = b;
        // var self = this;
        // try {
        //     if (this.touchEnable) {
        //         this.listener = cc.EventListener.create({
        //             event: cc.EventListener.TOUCH_ONE_BY_ONE,
        //             swallowTouches: true,
        //             onTouchBegan: function (touch, event) {
        //                 return self.onTouchBegan(touch, event);
        //             },
        //             onTouchMoved: function (touch, event) {
        //                 self.onTouchMoved(touch, event);
        //             },
        //             onTouchEnded: function (touch, event) {
        //                 self.onTouchEnded(touch, event);
        //             }
        //         });
        //         if (this.listener) cc.eventManager.addListener(this.listener, this);
        //     }
        // } catch (e) {
        // }
    },

    setTingPai: function (v) {
        if (this.tingpai_flag) this.tingpai_flag.setVisible(v);
    },

    setUp: function (v) {
        this.isUp = v;
        this.setPosition(cc.p(this.initPos.x, this.initPos.y + (v ? 30 : 0)));
        this.setLight(v);
    },

    setBlackVis: function (v) {
        if (v == true) {
            if (this.tingpai_flag) this.tingpai_flag.setVisible(false);
        }
        if (this.black_bg) {
            this.black_bg.setVisible(v);
        } else {
            var bg_sp = this.getChildByName("sprite");
            if (bg_sp) {
                if (v) {
                    this.black_color = cc.color(130, 120, 130);
                    bg_sp.setColor(this.black_color);
                } else {
                    this.black_color = null;
                    if (this.store_color) {
                        bg_sp.setColor(this.store_color);
                    } else {
                        bg_sp.setColor(cc.color(255, 255, 255));
                    }
                }
            }
        }
    },

    setZhongMaColor: function (type) {
        //0:结束后抓马 1：结算页底部中马 2：结算页自己中马那一栏
    },

    setLight: function (v) {
        if (this.light_bg) this.light_bg.setVisible(v);
    },

    goBack: function () {
        this.stopAllActions();
        this.setPosition(this.initPos);
        this.isCheckUp = false;
        this.isUp = false;
        this.touchEnd = true;
        this.setLight(false);
        this.setLocalZOrder(this._localZOrder);
    },

    _isTouchInside: function (touch) {
        var touchPoint = touch.getLocation();
        var localPos = this.convertToNodeSpace(touchPoint);

        var s = this.getContentSize();
        var rc = cc.rect(0, 0, s.width, s.height)
        var isTouched = cc.rectContainsPoint(rc, localPos);
        return isTouched;
    },

    onTouchBegan: function (touch, event) {
        if (!touch.getLocation) {
            return false;
        }

        if (!this.isCardTouch) {
            return false;
        }

        if (!MJModel.canTouchCard && MJModel.mj_touch_tip == 1) {
            return this._isTouchInside(touch);
        }

        if (MJModel.canTouchCard == false || this.isVisible() == false) {
            return false;
        }

        if (this._isTouchInside(touch)) {
            this._localZOrder = this.getLocalZOrder();
            this.touchBegin = touch.getLocation();
            this.touchBeginY = this.getPositionY();
            this.isMove = false;
            this.touchEnd = false;

            this.unschedule(this.checkUp);

            if (this.isCheckUp && !MJModel.canChoiceMore) {
                if (this._outcallback) this._outcallback(this);
                this.isAlreadyOut = true;
            }
            return true;
        }
        return false;
    },

    onTouchMoved: function (touch, event) {
        if (!touch.getLocation) {
            return;
        }
        if (MJModel.canTouchCard == false || MJModel.canChoiceMore || this.touchEnd == true)return;
        var touchPoint = touch.getLocation();
        if (Math.abs(touchPoint.x - this.touchBegin.x) > 10 || Math.abs(touchPoint.y - this.touchBegin.y) > 10) {
            this.isMove = true;
        }

        {
            if (touchPoint.y < this.initPos.y) {
                touchPoint.y = this.initPos.y;
            }
            this.setPosition(touchPoint);
            this.setLocalZOrder(10000);
        }
    },

    onTouchEnded: function (touch, event) {
        if (!touch.getLocation) {
            return;
        }
        if (MJModel.canTouchCard == false || this.touchEnd == true)return;
        if (this.isMove) {
            var dy = this.getPositionY() - this.initPos.y;
            if (dy >= 30) {
                if (this._outcallback) this._outcallback(this);
                this.isAlreadyOut = true;
            }
            else {
                this.goBack();
            }

            return;
        }

        if (!this._isTouchInside(touch)) {
            if (!MJModel.canChoiceMore)this.goBack();
            return;
        }

        Log(this, "onTouchEnded");
        this.schedule(this.checkUp, 0.2);
        this.isCheckUp = true;
        if (this._upcallback) this._upcallback(this);
    },

    checkUp: function (dt) {
        this.unschedule(this.checkUp);
        this.isCheckUp = false;
    },

    setCardTouchEnable: function (v) {
        this.isCardTouch = v;
    }
});

var MJPeng = cc.Node.extend({
    pengType: 0,
    value: 0,
    cardList: [],
    out_pos: 0,
    pointSp: null,
    _value1: 0x00,
    pos: 0,
    index: 0,
    isEnd:false,
    OpType:0,
    ctor: function () {
        this._super();
    },
    getValue: function () {
        return this.value ^ this._value1;
    },
    reflashUI: function () {
        //this.setValue(this.pengType, this.pos, this.value, this.index, this.out_pos, this.isEnd, this.OpType);
        for (var k = 0; k < this.cardList.length; k++) {
            var card = this.cardList[k];
            card.reflashUI();
            card.setMyPosition(MJConfig.getPengKangCardPos2(this.pos, this.index, k));
            card.stopAllActions();
        }
    },

    getPointColor: function () {
        return cc.color(150, 255, 150);
    },

    getPointPos: function (pos) {
        var x = 0;
        var y = 0;
        if (MJModel.mj_bg_use == 1) {
            if(MJModel.mj_paiban == "vertical"){
                if (pos == 0) {
                    y = -50;
                } else if(pos == 1){
                    x = -70;
                    y = 5;

                } else if(pos == 2){
                    y = -25;
                }else if(pos == 3){
                    x = 70;
                    y = 5;
                }
            }else {
                if (pos == 0) {
                    y = -50;
                } else if(pos == 1){
                    x = -30;
                    if(this.pengType == PengType.Peng_Peng){
                        y = 5;
                    }else {
                        y = 15;
                    }

                } else if(pos == 2){
                    y = -25;
                }else if(pos == 3){
                    x = 30;
                    if(this.pengType == PengType.Peng_Peng){
                        y = 5;
                    }else {
                        y = 15;
                    }
                }
            }

        } else {
            if (pos == 0) {
                y = -35;
            } else if(pos == 1){
                x = -30;
                if(this.pengType == PengType.Peng_Peng){
                    y = 5;
                }else {
                    y = 15;
                }

            } else if(pos == 3){
                x = 30;
                if(this.pengType == PengType.Peng_Peng){
                    y = 5;
                }else {
                    y = 15;
                }
            }
        }

        return cc.p(x, y);
    },
    showUI: function (type, pos, values, index, out_pos, isEnd, OpType, value, value1) {
        if (isEnd == undefined)isEnd = false;
        if (OpType == undefined)OpType = ActionType.TYPE_PASS;
        if (value1 == null || value1 == undefined)value1 = 0;
        this.pengType = type;
        this.value = value;
        this._value1 = value1;
        this.out_pos = out_pos;
        this.isEnd = isEnd;
        this.OpType = OpType;
        this.pointSp = null;
        this.removeAllChildren();
        this.cardList = [];
        this.pos = pos;
        this.index = index;
        var temp_pos = pos;
        if (isEnd)pos = 0;
        for (var i = 0; i < 3; i++) {
            var card = new MJCard();
            card.setValue(values[i], pos, CardType.Card_Peng, i, value1);
            card.setMyPosition(MJConfig.getPengKangCardPos2(pos, index, i));
            this.addChild(card, MJConfig.getPengKangCardOrder2(pos, index, i));
            this.cardList[i] = card;
        }

        if (type == PengType.Peng_Kang || type == PengType.Peng_AnKang) {
            var card = new MJCard();
            card.setValue(values[3], pos, CardType.Card_Peng, 3, value1);
            card.setMyPosition(MJConfig.getPengKangCardPos2(pos, index, 3));
            this.addChild(card, MJConfig.getPengKangCardOrder2(pos, index, 3));
            this.cardList[3] = card;
        }

        //如果该牌可以加半透明层 且该游戏支持该设定 则添加
        if (MJModel.chi_layout == 2) {
            try {
                var playerNums = 4;
                if (MJModel.mj_roomType == 1) playerNums = 3;
                if (MJModel.mj_roomType == 2) playerNums = 2;

                var card = null;
                var cardIndex = -1;
                var seatid = MJModel.getSeatidByPos(temp_pos);
                var pre_seatid = seatid - 1;
                if (pre_seatid < 0)pre_seatid += playerNums;

                var next_seatid = seatid + 1;
                if (next_seatid >= playerNums)next_seatid = 0;

                var out_seatid = MJModel.getSeatidByPos(out_pos);

                if (this.pengType == PengType.Peng_Peng) {
                    if (out_seatid == pre_seatid) {
                        cardIndex = 0;
                    }
                    else if (out_seatid == next_seatid) {
                        cardIndex = 2;
                    }
                    else {
                        cardIndex = 1;
                    }

                    if (MJModel.mj_roomType == 1 && pos == 1 && cardIndex == 2) {
                        cardIndex = 1;
                    } else if (MJModel.mj_roomType == 1 && pos == 3 && cardIndex == 0) {
                        cardIndex = 1;
                    } else if (MJModel.mj_roomType == 2) {
                        cardIndex = 1;
                    }

                } else if (this.pengType == PengType.Peng_Kang) {
                    if (out_seatid == pre_seatid) {
                        cardIndex = 0;
                    }
                    else if (out_seatid == next_seatid) {
                        cardIndex = 2;
                    }
                    else {
                        cardIndex = 3;
                    }

                    if (MJModel.mj_roomType == 1 && pos == 1 && cardIndex == 2) {
                        cardIndex = 3;
                    } else if (MJModel.mj_roomType == 1 && pos == 3 && cardIndex == 0) {
                        cardIndex = 3;
                    } else if (MJModel.mj_roomType == 2) {
                        cardIndex = 3;
                    }
                }
                else if (this.pengType == PengType.Chi_L || this.pengType == PengType.Chi_M || this.pengType == PengType.Chi_R) {
                    cardIndex = 1;
                }
                if (cardIndex != -1) {
                    card = this.cardList[cardIndex];
                }

                if (card) {
                    card.setStoreColor(this.getPointColor());
                }
            } catch (e) {

            }
        }

        //碰扛牌要显示指向箭头
        if (isEnd) return;
        if (MJModel.chi_layout == 3) {
            try {
                if (temp_pos == out_pos)return;

                if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                    if (temp_pos == 0) return;
                    out_pos = 0;
                }

                if (this.pengType == PengType.Peng_Peng) {
                    cardIndex = 1;
                } else {
                    cardIndex = 3;
                }
                if (cardIndex != -1) {
                    card = this.cardList[cardIndex];
                }

                if (card) {
                    var black_bg = new cc.Sprite(getResPath("RoomMJ/point/peng_gang_point" + out_pos + ".png"));
                    black_bg.setPosition(this.getPointPos(temp_pos));
                    black_bg.setAnchorPoint(cc.p(0.5, 0.5));
                    black_bg.setScale(0.6);
                    this.addChild(black_bg, 10);
                    this.pointSp = black_bg;
                }

                if((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG){
                    if(this.pointSp){
                        this.pointSp.setVisible(false);
                    }
                }
            } catch (e) {

            }
        }
    },
    //这里改为 仅仅是为了找出所有要显示的牌的数组 setValue2通过牌数组生成牌 方便外部继承使用自己的生成规则
    setValue: function (type, pos, value, index, out_pos, isEnd, OpType, cardList) {
        var values = [];
        if (cardList && cardList.length > 0) {
            if (cardList.length == 3 && value != 255 && (type == PengType.Chi_L || type == PengType.Chi_M || type == PengType.Chi_R)) {
                values = cardList;
                var index = 0;
                for (var i = 0; i < cardList.length; i++) {
                    if (cardList[i] != value) {
                        values[index] = cardList[i];
                        if (index == 0)index = 2;
                    }
                }
                values[1] = value;
            }
            else {
                values = cardList;
            }

            this.showUI(type, pos, cardList, index, out_pos, isEnd, OpType, values);
            return;
        }
        for (var i = 0; i < 3; i++) {
            if (type == PengType.Chi_L || type == PengType.Chi_M || type == PengType.Chi_R) {
                if (MJModel.chi_layout == 0) {
                    if (type == PengType.Chi_L) {
                        values.push(value + i);
                    } else if (type == PengType.Chi_M) {
                        values.push(value + (i - 1));
                    } else if (type == PengType.Chi_R) {
                        values.push(value + (i - 2));
                    }
                } else {
                    if (type == PengType.Chi_L) {
                        if (i == 0) {
                            values.push(value + 1);
                        } else if (i == 1) {
                            values.push(value);
                        } else if (i == 2) {
                            values.push(value + 2);
                        }
                    }
                    else if (type == PengType.Chi_M) {
                        values.push(value + (i - 1));
                    }
                    else if (type == PengType.Chi_R) {
                        if (i == 0) {
                            values.push(value - 2);
                        } else if (i == 1) {
                            values.push(value);
                        } else if (i == 2) {
                            values.push(value - 1);
                        }
                    }
                }
            } else {
                values.push(type == PengType.Peng_AnKang ? 0 : value);
            }
        }

        if (type == PengType.Peng_Kang || type == PengType.Peng_AnKang) {
            values.push(value);
        }

        this.showUI(type, pos, values, index, out_pos, isEnd, OpType, value);
    },
});