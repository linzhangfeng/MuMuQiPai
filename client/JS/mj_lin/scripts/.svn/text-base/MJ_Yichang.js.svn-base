/**
 * Created by jesse on 2017/8/4.
 */
loadProtoFile("proto/yichanggameproto.proto");
var AddFanType = {
    0: "平胡", //平胡_炮胡
    1: "平胡", //平胡_自摸
    2: "碰碰胡",
    3: "带幺九",
    4: "碰碰钓",
    5: "七对",
    6: "清一色",
    7: "清碰胡",
    8: "清碰钓",
    9: "清七对",
    10: "天胡",
    11: "地胡",
    12: "根",
    13: "杠上炮",
    14: "杠上花",
    15: "抢杠胡",
    16: "一条龙",
    17: "海底胡",
    18: "海底炮",
    19: "刮风",
    20: "下雨",
};

var YCPengType =
{
    Chi_Liang: 6,
};

var YiChangHuType = {
    MJ_FAN_TYPE_PINGHU: 17,  //平胡
    MJ_FAN_TYPE_PENGPENGHU: 16,  //碰碰胡
    MJ_FAN_TYPE_QINGYISE: 14,   //清一色
    MJ_FAN_TYPE_QINGDAPENG: 12,  //清大碰
};

var PackgName = {
    yichangSan: 823, //202, 849   线上, 823
    yichangSi: 822, //202, 848    线上, 822
};
var ConfigType = {
    Piao_none: 1041001, //不带漂
    Piao_1: 1041002,  //带1漂
    Piao_2: 1041003,  //带2漂
    Piao_3: 1041004,  //带3漂
    Piao_5: 1041005,  //带5漂
};
var CHENGDU_CMD = {
    //SERVER_SHANXI_START_PAOZI: 5076,
    //SERVER_SHANXI_USER_XIAPAOZI_DONE: 5077,

    SERVER_START_HUANSANZHANG: 5074,//开始换三张
    SERVER_CHOOSE_HUANSANZHANG: 5009,//玩家选择换牌
    SERVER_CHANGE_HUANSANZHANG: 5075,//广播换牌结果

    //SERVER_START_LACK: 5002,//开始定缺
    //SERVER_USER_CHOOSE_LACK: 5063,//玩家选择定缺
    //SERVER_USER_LACK_TYPE: 5078,//广播玩家的定缺色

    SERVER_PUSANZHANG: 5076, //StartPuSanZhang
    CLIENT_PUSANZHANG: 1113, //ReqPuCard
    SERVER_PUPAI_DOWN: 5077, //AckPuCardOk
}
var MJTable_Yichang = MJTable.extend({
    tag: "MJTable_Yichang",
    _all_huType_tip: [null, null, null, null],
    _lackDingque: [null, null, null, null],
    _changeCard: [null, null, null, null],
    isRecordShow: false,
    mChangeBar: null,
    mPaiSeBar: null,
    mPuSanZhangBar: null,
    _pkg_id: 0,
    _player_hucards: [[], [], [], []],
    _MJShaizi: 0,
    change_hand_card: [],
    _changeEffectNum: 0,
    _is_huansanzhang: false,
    _recordScore: [0, 0, 0, 0],
    _difen_type: -1,
    _difen_tip: null,
    _quXiaoTuoGuanButton: null,
    _Piao_Nums: [null, null, null, null],
    _daiPiaoConfig: -1,
    _isChoosePszing: false,
    _choosePszCard: [],
    _complete_Psz: 0,
    _pszBtn: null,
    _bpBtn: null,
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];
            if (this._pkg_id == 849 || this._pkg_id == 823) {
                this._pkg_id = PackgName.yichangSan;
            }
            if (this._pkg_id == 848 || this._pkg_id == 822) {
                this._pkg_id = PackgName.yichangSi;
            }

        } catch (e) {
            Log(this, e);
        }
        MJModel.otherOutCardEffect = false;

        MJModel.mj_suport_change_bg = 0;
        MJModel.toupiaoTipsType = 1;
        MJModel.isOutCard = true;
        MJModel.mj_card_lib_type = 1;
        MJModel.mj_public_style = 1;
        MJModel.mj_chat_style = 5;
        MJModel.mj_hu_type = 1;
        // MJModel.mj_layout = 0;
        MJModel.chi_layout = 3;
        MJModel.shareType = 1;
        MJModel.isSupportRealTimeVoices = true;
        if (this._pkg_id == PackgName.yichangSan) {
            MJModel.mj_roomType = 1;
        }

        var size = cc.director.getWinSize();
        this._init_extend();
        this._super();
        //显示玩法说明

        var self = this;
        this.mPaiSeBar = new CHENGDU_Paise();
        this.mPaiSeBar.setVisible(false);
        this.mPaiSeBar.addClickEventListener(function (node) {
            self.onPaiSeClick(node);
        });
        this.mChangeBar = new MJChange();
        this.mChangeBar.setVisible(false);
        this.mChangeBar.addClickEventListener(function (node) {
            self.onChangeClick(node);
        });

        this.mPuSanZhangBar = new MJPuSanZhang();
        this.mPuSanZhangBar.setVisible(false);
        this.mPuSanZhangBar.addClickEventListener(function (node) {
            self.onPuSanZhangClick(node);
        });

        this.addChild(this.mChangeBar, 1);
        this.addChild(this.mPaiSeBar, 1);
        this.addChild(this.mPuSanZhangBar, 1);
        this._createWaitLack();
        this._createWaitchange();
        this._createPszButton();

    },

    getMjTypePath: function () {
        var pkg_id = 2;
        if (this._pkg_id == PackgName.yichangSan) pkg_id = 1;
        return __String.createWithFormat(getResPath("yichang/flag/pkgid%1.png"), pkg_id);
    },
    updateBg: function (isInit) {
        if (isInit == undefined)isInit = false;
        this._super(isInit);
        if (isInit)return;
        this._update_hu_card();
        if (this.mPuSanZhangBar.getChildByName("sureChoice") != undefined){
            this.mPuSanZhangBar.getChildByName("sureChoice").setEnabled(false);
        }
        if (this.mChangeBar.getChildByName("sureChoice") != undefined) {
            this.mChangeBar.getChildByName("sureChoice").setEnabled(false);
        }
    },

    _createPszButton: function () {
        var size = cc.director.getWinSize();
        var self = this;
        if (this._pszBtn == null) {
            this._pszBtn = new ccui.Button(getResPath("yichang/action/psz1.png"), getResPath("yichang/action/psz2.png"));
            this._pszBtn.setPosition(cc.p(size.width / 2 - 120, 200));
            this._pszBtn.setVisible(false);
            this._pszBtn.addClickEventListener(function (sender, evt) {
                self._pszBtn.setVisible(false);
                if (self._bpBtn) {
                    self._bpBtn.setVisible(false);
                }

                {
                    MJModel.canChoiceMore = true;
                    MJModel.canTouchCard = true;
                    self._isChoosePszing = true;
                    self.mPuSanZhangBar.setVisible(true);
                }
            });
            this.addChild(this._pszBtn, 400);
        } else {
            this._pszBtn.setVisible(false);
        }

        if (this._bpBtn == null) {
            this._bpBtn = new ccui.Button(getResPath("yichang/action/bupu1.png"), getResPath("yichang/action/bupu2.png"));
            this._bpBtn.setPosition(cc.p(size.width / 2 + 120, 200));
            this._bpBtn.setVisible(false);
            this._bpBtn.addClickEventListener(function (sender, evt) {
                sendPuSanZhangCard(0);//没有不扑按钮了
                self._bpBtn.setVisible(false);
                if (self._pszBtn) {
                    self._pszBtn.setVisible(false);
                }
            });
            this.addChild(this._bpBtn, 400);
        } else {
            this._bpBtn.setVisible(false);
        }
    },

    _handler_server_start_piao: function (data, canDelay) {
        this.resetGame(true);
        this.room_Info.setVisible(true);
        JsUtils.postNotifi("notify_game_check_end");//为了刷新局数 或者  开始倒计时
        var broadPiao = parsePacket("proto.game.yichangmj.StartPiao", data);
        // this.room_Info.showTime(broadPiao.remain_time);
        var canPiaoNum = broadPiao.piao; //带几漂
        var selfIsPiao = false;
        if (selfIsPiao == false) {
            if (MJModel.gpsInfo) {
                MJModel.gpsInfo.removeFromParent();
                MJModel.gpsInfo = null;
            }
            this._showPiaoLayer(canPiaoNum);
        }
    },
    _handler_server_broad_piao: function (data, canDelay) {
        var broadPiao = parsePacket("proto.game.yichangmj.AckPiaoOk", data);
        var seatId = broadPiao.ChairID;
        var piaoNum = broadPiao.Piao;

        var pos = MJModel.getPosBySeatid(seatId);
        this._setPiaoNum(piaoNum, pos, true);
        if (pos == 0) {
            if (this._piaoLayer) {
                this._piaoLayer.removeFromParent();
                this._piaoLayer = null;
            }
        }
    },

    _setPiaoNum: function (piao, pos, useEffect) {
        if (useEffect == undefined) useEffect = false;

        var piaoSpr = new cc.Sprite(__String.createWithFormat(getResPath("yichang/piao/piaofen%1.png"), piao));
        piaoSpr.setName("jingshan_piao");
        var ppos = MJConfig.getPlayerPos(pos);
        piaoSpr.setAnchorPoint(cc.p(0.5, 0.5));
        piaoSpr.setPosition(cc.p(ppos.x, (pos == 2) ? ppos.y - 100 : ppos.y + 60));
        this.addChild(piaoSpr);
        this._Piao_Nums[pos] = piaoSpr;

        if (useEffect) {
            var piao_bg = new cc.Sprite(getResPath("yichang/piao/piao_tip_bg.png"));
            this.addChild(piao_bg, 1);
            piao_bg.setName("reset_remove");

            var size = cc.director.getWinSize();
            var bp;
            if (pos == 0) {
                bp = cc.p(size.width / 2, 30);
                bp.y += 70;
            } else if (pos == 1) {
                bp = cc.p(size.width - 250, 450);
                bp.x -= 90;
            } else if (pos == 2) {
                bp = cc.p(size.width / 2, size.height - 100);
                bp.y -= 70;
            } else if (pos == 3) {
                bp = cc.p(250, 450);
                bp.x += 90;
            }
            piao_bg.setPosition(bp);

            var piaoSp = new cc.Sprite(__String.createWithFormat(getResPath("yichang/piao/piao_%1.png"), piao));
            piaoSp.setPosition(125, 65);
            piao_bg.addChild(piaoSp);
        }
    },
    _removeAllPiaoSpr: function () {
        while (this.getChildByName("jingshan_piao")) {
            this.removeChildByName("jingshan_piao");
        }
    },
    _showPiaoLayer: function (canPiaoNum) {
        if (this._piaoLayer) {
            this._piaoLayer.removeFromParent();
            this._piaoLayer = null;
        }
        this._piaoLayer = new JingShanPiaoLayer();
        this._piaoLayer.initPiao(canPiaoNum);
        this.addChild(this._piaoLayer, 100);
    },

    resetGame: function (allClean) {
        this._super(allClean);
        this._hide_all_tip();
        this._isShowWaitLack(false);
        this._isShowWaitchange(false);
        if (this.mChangeBar.getChildByName("sureChoice") != undefined) {
            this.mChangeBar.getChildByName("sureChoice").setEnabled(false);
        }
        if (this.mChangeBar.getChildByName("cancelChoice") != undefined) {
            this.mChangeBar.getChildByName("cancelChoice").setEnabled(false);
        }
        this._clearAllHuCard();
        MJModel.mj_lockcard_type = 0;
        this._MJShaizi = 0;
        this._recordScore = [0, 0, 0, 0];
        if (allClean) {
            this._removeAllPiaoSpr();
        }
        if (this.mPuSanZhangBar.getChildByName("sureChoice") != undefined) {
            this.mPuSanZhangBar.getChildByName("sureChoice").setEnabled(false);
        }
        this._isChoosePszing = false;
        this._choosePszCard = [];
        this._complete_Psz = 0;
        if (this._bpBtn) {
            this._bpBtn.setVisible(false);
        }
        if (this._pszBtn) {
            this._pszBtn.setVisible(false);
        }
    },

    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.yichangmj.tagCurGameScence", jpacket);
            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.yichangmj.AckCurGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CHENGDU_CMD.SERVER_START_HUANSANZHANG) {
            //开始换牌
            this._handler_server_change_start(jpacket, canDelay);
        } else if (cmd == CHENGDU_CMD.SERVER_CHOOSE_HUANSANZHANG) {
            //换牌中
            this._handler_server_change(jpacket, canDelay);
        } else if (cmd == CHENGDU_CMD.SERVER_CHANGE_HUANSANZHANG) {
            //换牌结束
            this._handler_server_change_end(jpacket, canDelay);
        }
        //else if (cmd == CHENGDU_CMD.SERVER_START_LACK) {
        //    //定缺开始
        //    this._handler_server_lack_start(jpacket, canDelay);
        //} else if (cmd == CHENGDU_CMD.SERVER_USER_CHOOSE_LACK) {
        //    //定缺中
        //    this._handler_server_lack(jpacket, canDelay);
        //} else if (cmd == CHENGDU_CMD.SERVER_USER_LACK_TYPE) {
        //    //定缺结束
        //    this._handler_server_lack_end(jpacket, canDelay);
        //}
        //else if (cmd == CHENGDU_CMD.SERVER_SHANXI_START_PAOZI) {
        //    //开始选漂
        //    this._handler_server_start_piao(jpacket, canDelay);
        //} else if (cmd == CHENGDU_CMD.SERVER_SHANXI_USER_XIAPAOZI_DONE) {
        //    //选漂结果
        //    this._handler_server_broad_piao(jpacket, canDelay);
        //}
        else if (cmd == CMD.SERVER_USER_HU) {
            //玩家胡牌
            this._handler_server_user_hu(jpacket, canDelay);
        } else if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
        } else if (cmd == CHENGDU_CMD.SERVER_PUSANZHANG) {
            //开始扑三张
            this._handler_server_pusanzhang_start(jpacket, canDelay);
        } else if (cmd == CHENGDU_CMD.SERVER_PUPAI_DOWN) {
            //扑三张中
            this._handler_server_pusanzhang_ok(jpacket, canDelay);
        }
        this._super(cmd, jpacket, canDelay, svrid);
    },

    _handler_server_user_hu: function (data, canDelay) {
        var huInfo = parsePacket("proto.game.AckUserHu", data);
        var huscore = huInfo.Score;
        var OpType = -1;
        this.handler_gang_scores(huscore, OpType, OpType, canDelay);
    },

    _checkAddCardFlag: function (pos, card) {
        try {
            // card.setStoreColor(cc.color(255, 249, 137));
            var p = card.getChildByName("sprite");
            p.removeChildByName("huanpai_flag");
            var frompos = 0;
            var effect = this._get_huanpai_direction();
            if (pos == 0) {
                if (effect == 0) { //顺时针
                    frompos = 1;
                } else if (effect == 1) { //逆时针
                    frompos = 3;
                } else if (effect == 2) { //对家
                    frompos = 2;
                }
            } else if (pos == 1) {
                if (effect == 0) { //顺时针
                    frompos = 2;
                } else if (effect == 1) { //逆时针
                    frompos = 0;
                } else if (effect == 2) { //对家
                    frompos = 3;
                }
            } else if (pos == 2) {
                if (effect == 0) { //顺时针
                    frompos = 3;
                } else if (effect == 1) { //逆时针
                    frompos = 1;
                } else if (effect == 2) { //对家
                    frompos = 0;
                }
            } else if (pos == 3) {
                if (effect == 0) { //顺时针
                    frompos = 0;
                } else if (effect == 1) { //逆时针
                    frompos = 2;
                } else if (effect == 2) { //对家
                    frompos = 1;
                }
            }

            if (p) {
                var flag = new cc.Sprite(getResPath("yichang/flag/point/point" + frompos + ".png"));
                var m_size = p.getContentSize();
                flag.setPosition(cc.p(m_size.width / 2, m_size.height));
                flag.setAnchorPoint(cc.p(0.5, 1));
                flag.setScale(0.6);
                flag.setName("huanpai_flag");
                p.addChild(flag);
                if (pos == 1) {
                    flag.setPosition(cc.p(-10, m_size.height / 2 + 10));
                    flag.setAnchorPoint(cc.p(0, 0.5));
                } else if (pos == 2) {
                    flag.setPosition(cc.p(m_size.width / 2, 0));
                    flag.setAnchorPoint(cc.p(0.5, 0));
                } else if (pos == 3) {
                    flag.setPosition(cc.p(m_size.width + 10, m_size.height / 2 + 10));
                    flag.setAnchorPoint(cc.p(1, 0.5));
                }
                if (MJModel.isOnVideo && pos == 0) {
                    flag.setPosition(cc.p(m_size.width / 2, m_size.height + 10));
                }
            }
        } catch (e) {
            Log(this, e);
        }
    },
    _showShaiZiEffect: function (restore, saizi1) {

        this.removeChildByName("shaizi_effect");
        this.removeChildByName("shaizi_effect");
        this.removeChildByName("shaizi_effect");
        var size = cc.director.getWinSize();
        var self = this;
        var addX = 200;
        if (restore) {
            var sp1 = new cc.Sprite(__String.createWithFormat(getResPath("yichang/effect/shaizi/%1.png"), saizi1));
            var radius = 15;
            var M_PI = 3.14159;
            var rotation = Utils.Random(0, 360);
            sp1.setPosition(size.width / 2 + addX + radius * Math.cos((-90.0 + rotation) / 180.0 * M_PI), 380 + radius * Math.sin((-90.0 + rotation) / 180.0 * M_PI));
            sp1.setName("shaizi_effect");
            this.addChild(sp1, 10000);
            sp1.setScale(1.2);
            return;
        }
        var showShaizi = cc.CallFunc(function () {
            ccs.armatureDataManager.addArmatureFileInfo(getResPath("yichang/effect/shaizi/effects_mjxtouziyige.ExportJson"));
            var armature = new ccs.Armature("effects_mjxtouziyige");
            armature.setScale(1.2);
            armature.setName("shaizi_effect");

            if (armature != null) {
                var animation = armature.getAnimation();
                if (animation) {
                    if (typeof animation.playWithIndex === "function") {
                        animation.playWithIndex(0);
                    }
                }
                armature.setPosition(640 + addX, 380);
                self.addChild(armature, 10000);

                var removeEffect = cc.CallFunc(function () {
                    self.removeChildByName("shaizi_effect");
                });
                var callback = cc.CallFunc(function () {
                    var sp1 = new cc.Sprite(__String.createWithFormat(getResPath("yichang/effect/shaizi/%1.png"), saizi1));
                    var radius = 15;
                    var M_PI = 3.14159;
                    var rotation = Utils.Random(0, 360);
                    sp1.setPosition(size.width / 2 + addX + radius * Math.cos((-90.0 + rotation) / 180.0 * M_PI), 380 + radius * Math.sin((-90.0 + rotation) / 180.0 * M_PI));
                    sp1.setName("shaizi_effect");
                    self.addChild(sp1, 10000);
                    sp1.setScale(1.2);
                });
                self.runAction(cc.sequence(cc.delayTime(1), removeEffect, callback));
                Sound.getInstance().playEffect(__String.createWithFormat(getResPath("RoomMJ/sound/touzi.mp3")));
            }
        });
        this.runAction(cc.sequence(showShaizi));
    },
    _removeShaiZiEffect: function () {
        this.removeChildByName("shaizi_effect");
        this.removeChildByName("shaizi_effect");
        this.removeChildByName("shaizi_effect");
        this.removeChildByName("shaizi_effect");
    },
    _showChangeEffect: function (effect) {
        try {
            var size = cc.director.getWinSize();
            var self = this;
            {
                var bg = new cc.Sprite(getResPath("yichang/tip/changeBg.png"));
                bg.setName("huanpaiBg");
                bg.setPosition(cc.p(size.width / 2, size.height / 2));
                this.addChild(bg);

                var huanpaiTip = new cc.Sprite(getResPath("yichang/tip/changeText.png"));
                huanpaiTip.setPosition(cc.p(bg.getContentSize().width / 2, bg.getContentSize().height / 2 + 25));
                bg.addChild(huanpaiTip);

                var huanpaiText = new cc.Sprite(__String.createWithFormat(getResPath("yichang/tip/huanpai_%1.png"), effect));
                huanpaiText.setPosition(cc.p(bg.getContentSize().width / 2, bg.getContentSize().height / 2 - 40));
                bg.addChild(huanpaiText);

                var removeEffect = cc.CallFunc(function () {
                    self.removeChildByName("huanpaiBg");
                });
            }

            ccs.armatureDataManager.addArmatureFileInfo(getResPath("yichang/effect/change/effectsfszzmjxh.ExportJson"));
            var armature = new ccs.Armature("effectsfszzmjxh");
            if (armature != null) {
                var animation = armature.getAnimation();
                if (animation) {
                    if (typeof animation.playWithIndex === "function") {
                        animation.playWithIndex(effect);
                        // animation.play(effect);
                        armature.setPosition(cc.p(size.width / 2, size.height / 2));
                        this.addChild(armature, 10000);
                        armature.runAction(cc.sequence(cc.delayTime(1.5), removeEffect, cc.removeSelf()));
                    }
                }
            }
        } catch (e) {
            Log(this, e);
        }
    },
    _handler_server_change_start: function (data, canDelay) {
        var changeInfo = parsePacket("proto.game.yichangmj.StartChangeCard", data);
        //初始化换牌数据
        this._removeShaiZiEffect();
        {
            MJModel.canChoiceMore = true;
            MJModel.canTouchCard = true;
            // this.room_Info.showTime(changetime);
            this.mChangeBar.setVisible(true);
            this._isShowWaitchange(true);
        }
    },
    _handler_server_change: function (data, canDelay) {
        var ackLackOk = parsePacket("proto.game.yichangmj.AckChangeCard", data);
        var seatid = ackLackOk.chairid;
        //var isOk = ackLackOk.isOk;
        var pos = MJModel.getPosBySeatid(seatid);
        //if (isOk) {
            if (pos == 0) {
                this.mChangeBar.setVisible(false);
            }
            if (this._changeCard[pos]) {
                this._changeCard[pos].setTexture(getResPath("yichang/action/ok.png"));
            }
        //}
    },

    _handler_server_change_end: function (data, canDelay) {
        var changeCard = parsePacket("proto.game.yichangmj.AckChangeCardCompleted", data);
        var shaizi = changeCard.shaizi;
        var chair_id = changeCard.chairid;
        var oldCard = changeCard.oldcards;
        var newCard = changeCard.cards;
        for (var i = 0; i < 4; i++) {
            this._changeCard[i].setVisible(false);
        }

        if (shaizi) {
            this._MJShaizi = shaizi;
        }
        this.mChangeBar.setVisible(false);
        this._isShowWaitchange(false);
        var self = this;
        //录像时只播一次动画
        self._changeEffectNum++;
        var effect = this._get_huanpai_direction();
        if (MJModel.seatid != -1 && canDelay) {
            if (chair_id == MJModel.seatid || !MJModel.isOnVideo) {
                MJModel.isEnterWait = true;
                this._removeShaiZiEffect();
                //播放换牌动画
                var callback = cc.CallFunc(function () {
                    if (self._MJShaizi) {
                        self._showShaiZiEffect(false, self._MJShaizi);
                    }
                });
                var callback3 = cc.CallFunc(function () {
                    self._removeShaiZiEffect();
                });
                var callback1 = cc.CallFunc(function () {
                    self._showChangeEffect(effect);
                });
                var callback2 = cc.CallFunc(function () {
                    //在座位上
                    self.mChangeBar.setVisible(false);
                    MJModel.canChoiceMore = false;
                    MJModel.canTouchCard = false;
                    self.room_Card.setUp(false);
                    var pos = MJModel.getPosBySeatid(chair_id);
                    for (var i = 0; i < oldCard.length; i++) {
                        self.room_Card.removeHandCard(pos, oldCard[i]);
                    }
                    for (var i = 0; i < newCard.length; i++) {
                        self.room_Card.addHandCard(pos, newCard[i]);
                        //给换的牌添加换牌标志
                        var len = self.room_Card.hand_card[pos].length;
                        var card = self.room_Card.hand_card[pos][len - 1];
                        self._checkAddCardFlag(pos, card);
                    }
                    self.room_Card.setCurChoiceType(-1);
                    MJModel.isEnterWait = false;

                    //起手庄家摸牌与手牌隔空
                    var mo_card = null;
                    if (self.room_Card.isDuoPai(0)) {
                        mo_card = self.room_Card.hand_card[0][0];
                        self.room_Card.hand_card[0].splice(0, 1);
                    }
                    self.room_Card.reflashHandCard(0, true, false, true);

                    if (mo_card) {
                        mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                        self.room_Card.hand_card[0].push(mo_card);
                        MJModel.mj_mo_cards[pos] = mo_card.getValue();
                    }
                });

                this.runAction(cc.sequence(callback, cc.delayTime(1), callback1, cc.delayTime(1.5), callback3, callback2));
            } else {
                //在座位上
                self.mChangeBar.setVisible(false);
                MJModel.canChoiceMore = false;
                MJModel.canTouchCard = false;
                self.room_Card.setUp(false);
                var pos = MJModel.getPosBySeatid(chair_id);
                for (var i = 0; i < oldCard.length; i++) {
                    self.room_Card.removeHandCard(pos, oldCard[i]);
                }
                for (var i = 0; i < newCard.length; i++) {
                    self.room_Card.addHandCard(pos, newCard[i]);
                    //给换的牌添加换牌标志
                    var len = self.room_Card.hand_card[pos].length;
                    var card = self.room_Card.hand_card[pos][len - 1];
                    self._checkAddCardFlag(pos, card);
                }

                self.room_Card.reflashHandCard(pos, true);
                self.room_Card.setCurChoiceType(-1);
            }
        } else if (MJModel.seatid != -1) {
            if (self._MJShaizi && this._changeEffectNum == 1) {
                self._showShaiZiEffect(true, self._MJShaizi);
            }
            //在座位上
            this.mChangeBar.setVisible(false);
            MJModel.canChoiceMore = false;
            MJModel.canTouchCard = false;
            this.room_Card.setUp(false);
            var pos = MJModel.getPosBySeatid(chair_id);
            for (var i = 0; i < oldCard.length; i++) {
                this.room_Card.removeHandCard(pos, oldCard[i]);
            }
            for (var i = 0; i < newCard.length; i++) {
                this.room_Card.addHandCard(pos, newCard[i]);
                //给换的牌添加换牌标志
                var len = this.room_Card.hand_card[pos].length;
                var card = this.room_Card.hand_card[pos][len - 1];
                this._checkAddCardFlag(pos, card);
            }

            this.room_Card.reflashHandCard(pos, true, false, true);
            this.room_Card.setCurChoiceType(-1);

            this._removeShaiZiEffect();
        }

        var pos = MJModel.getPosBySeatid(chair_id);
        //换三张给摸牌设置
        MJModel.mj_mo_cards[pos] = -1;
        if (pos == 0) {
            this._showhsz_card(oldCard);
        }
    },
    _showhsz_card: function (cardlist) {
        var size = cc.director.getWinSize();
        var dx = 25;
        var dy = size.height - 160+69;
        //默认顺时针
        var changeSp = new cc.Sprite(getResPath("yichang/action/change_icon_1.png"));
        var shaizi = this._MJShaizi;
        if (MJModel.mj_roomType == 0) {
            if (shaizi == 1 || shaizi == 2) {
                //逆时针
                changeSp.setTexture(getResPath("yichang/action/change_icon.png"));
            } else if (shaizi == 3 || shaizi == 4) {
                //对家交换
                changeSp.setTexture(getResPath("yichang/action/change_icon_2.png"));
            }
        } else if (MJModel.mj_roomType == 1) {
            if (shaizi == 1 || shaizi == 3 || shaizi == 5) {
                //逆时针
                changeSp.setTexture(getResPath("yichang/action/change_icon.png"));
            }
        }


        changeSp.setPosition(cc.p(dx, dy));
        changeSp.setScale(0.7);
        changeSp.setName("reset_remove");
        this.addChild(changeSp, 200);
        dx += changeSp.getContentSize().width - 10;

        for (var i = 0; i < cardlist.length; i++) {
            if (cardlist[i] ==255)
            {
                continue;
            }
            var card = new MJCard();
            card.setScale(0.3);
            card.setValue(cardlist[i], 0, CardType.Card_Hand, 0);
            card.setMyPosition(cc.p(dx, dy));
            card.setName("reset_remove");
            this.addChild(card);
            this.room_Card.other_card.push(card);
            dx += 25;
        }

    },
    //3、4对家换，1、2逆时针，5、6顺时针，3人玩法双数顺时针，单数逆时针
    _get_huanpai_direction: function () {
        var effect = 0; //默认顺时针
        var shaizi = this._MJShaizi;
        if (MJModel.mj_roomType == 0) {
            if (shaizi == 1 || shaizi == 2) {
                //逆时针
                effect = 1;
            } else if (shaizi == 3 || shaizi == 4) {
                //对家交换
                effect = 2;
            }
        } else if (MJModel.mj_roomType == 1) {
            if (shaizi == 1 || shaizi == 3 || shaizi == 5) {
                //逆时针
                effect = 1;
            }
        }
        return effect;
    },

    //开始扑三张
    _handler_server_pusanzhang_start: function (data, canDelay) {
        var changeInfo = parsePacket("proto.game.yichangmj.StartPuCard", data);
        //扑三张不能选不扑 所以注释掉
        // if (this._pszBtn) {
        //     this._pszBtn.setVisible(true);
        // }
        // if (this._bpBtn) {
        //     this._bpBtn.setVisible(true);
        // }
        MJModel.canChoiceMore = true;
        MJModel.canTouchCard = true;
        this._isChoosePszing = true;
        this.mPuSanZhangBar.setVisible(true);

        this._isShowWaitchange(true);
    },

    _handler_server_pusanzhang_ok: function (data, canDelay) {
        var ackLackOk = parsePacket("proto.game.yichangmj.AckPuCard", data);
        var seatid = ackLackOk.chairid;
        //var isOk = 1;
        var cards = ackLackOk.cards;
        var pos = MJModel.getPosBySeatid(seatid);
        var playerNum = 4;
        if (MJModel.mj_roomType == 1) {
            playerNum = 3;
        }

        this._complete_Psz ++;
        if (pos == 0) {
            this._pszBtn.setVisible(false);
            this._bpBtn.setVisible(false);
            this.mPuSanZhangBar.setVisible(false);
        }
        if (this._changeCard[pos]) {
            this._changeCard[pos].setTexture(getResPath("yichang/action/ok.png"));
        }
        //if (isOk == 1) {
            if (cards.length == 3) {
                var removehandcards = cards;
                var cardvalues = cards;
                if (MJModel.isOnVideo && pos != 0) {
                    cardvalues = [0, 0, 0];
                }
                var OpType = -1;
                this.room_Card.addPengCard(pos, YCPengType.Chi_Liang, cardvalues[0], pos, OpType, cardvalues);
                for(var i = 0; i < removehandcards.length; i++) {
                    this.room_Card.removeHandCard(pos, removehandcards[i], 1);
                }
                //防止庄家埋牌后，摸牌
                MJModel.mj_mo_cards[pos] = -1;

                //起手庄家摸牌与手牌隔空
                if (MJModel.isMyPlayer(seatid)) {
                    var mo_card = null;
                    if (this.room_Card.isDuoPai(0)) {
                        mo_card = this.room_Card.hand_card[0][0];
                        this.room_Card.hand_card[0].splice(0, 1);
                    }
                    this.room_Card.reflashHandCard(0, true);

                    if (mo_card) {
                        mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                        this.room_Card.hand_card[0].push(mo_card);
                        MJModel.mj_mo_cards[pos] = mo_card.getValue();
                    }
                }

            }
        //}
        if (this._complete_Psz == playerNum) {
            this._isShowWaitchange(false);
        }

    },

    _handler_server_lack_start: function (data, canDelay) {
        var startlack = parsePacket("proto.game.yichangmj.StartChooseLack", data);
        this._removeShaiZiEffect();
        if (MJModel.seatid != -1) {
            this._isShowWaitLack(true);
            if (canDelay) {
                // this.room_Info.showTime(lacktime);
                this.mPaiSeBar.setGoodPaiSe(this.room_Card.getGoodPaiSe());
                this.mPaiSeBar.setVisible(true);
            }
        }
    },
    _handler_server_lack: function (data, canDelay) {
        var ackLackOk = parsePacket("proto.game.yichangmj.AckBroadLack", data);
        var seatid = ackLackOk.chairid;
        var pos = MJModel.getPosBySeatid(seatid);
        if (pos == 0) {
            this.mPaiSeBar.setVisible(false);
        }
        if (this._lackDingque[pos]) {
            this._lackDingque[pos].setTexture(getResPath("yichang/action/ok.png"));
        }
    },
    _handler_server_lack_end: function (data, canDelay) {
        this.mPaiSeBar.setVisible(false);
        var lackResult = parsePacket("proto.game.yichangmj.AckLackResult", data);
        var lacktype = lackResult.lacktype;
        for (var i = 0; i < lacktype.length; i++) {
            var lack = lacktype[i];
            var pos = MJModel.getPosBySeatid(i);
            this.players[pos].setLackType(lack);
            if (MJModel.seatid == i) {
                MJModel.lackType = lack;
                this.room_Card.reflashHandCard(0);
            }
        }
        this._MJShaizi = 0;
        // var bankerPos = MJModel.getPosBySeatid(MJModel.banker_seatid);
        // if (bankerPos == 0) {
        //     var length = this.room_Card.hand_card[0].length;
        //     var card = this.room_Card.hand_card[0][0];
        //     if (card.value != undefined) {
        //         this.room_Card.removeHandCard(0, card.value, 1);
        //         this.room_Card.reflashHandCard(0, true);
        //         this.room_Card.initMoCard(0, card.value, true);
        //     }
        // }
        this.room_Card.setCurChoiceType(-1);
        this._isShowWaitLack(false);
    },
    _is_init:false,
    _setGameType: function () {
        if (this._is_init == false) {
            this._is_init = true;
            if (this._daiPiaoConfig == ConfigType.Piao_none) {
                MJModel.play_id_str.push("不带飘");
            } else if (this._daiPiaoConfig == ConfigType.Piao_1) {
                MJModel.play_id_str.push("带1飘");
            } else if (this._daiPiaoConfig == ConfigType.Piao_2) {
                MJModel.play_id_str.push("带2飘");
            } else if (this._daiPiaoConfig == ConfigType.Piao_3) {
                MJModel.play_id_str.push("带3飘");
            } else if (this._daiPiaoConfig == ConfigType.Piao_5) {
                MJModel.play_id_str.push("带5飘");
            }

            if (MJModel.RoomConfigID.indexOf(1056001) != -1) {
                MJModel.play_id_str.push("甩三张");
            }
            if (MJModel.RoomConfigID.indexOf(1056002) != -1) {
                MJModel.play_id_str.push("换三张");
            }
            if (MJModel.RoomConfigID.indexOf(1056003) != -1) {
                MJModel.play_id_str.push("先换后甩");
            }
            if (MJModel.RoomConfigID.indexOf(1176001) != -1) {
                MJModel.play_id_str.push("1分");
            }
            if (MJModel.RoomConfigID.indexOf(1176002) != -1) {
                MJModel.play_id_str.push("2分");
            }
            if (MJModel.RoomConfigID.indexOf(1176003) != -1) {
                MJModel.play_id_str.push("3分");
            }
            if (MJModel.RoomConfigID.indexOf(1176004) != -1) {
                MJModel.play_id_str.push("5分");
            }
            if (MJModel.RoomConfigID.indexOf(1176005) != -1) {
                MJModel.play_id_str.push("10分");
            }
            if (MJModel.RoomConfigID.indexOf(1176006) != -1) {
                MJModel.play_id_str.push("20分");
            }

            var size = cc.director.getWinSize();

            var gameDes = "";
            for (var i = 0; i < MJModel.play_id_str.length; i++) {
                gameDes += MJModel.play_id_str[i];
                if (i != MJModel.play_id_str.length - 1){
                    gameDes += " ";
                }
            }
            cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);
            var piaoStr = "";
            if (MJModel.mj_roomType == 0) {
                piaoStr = "换三张规则：1-2方向为>。3-4方向为^。5-6方向为<";
            } else if (MJModel.mj_roomType == 1) {
                piaoStr = "换三张规则：1-3-5方向为>。2-4-6方向为<";
            }

            var piao_tip = new cc.LabelTTF(piaoStr, "Thonburi", 22);
            piao_tip.setAnchorPoint(cc.p(0.5, 0));
            piao_tip.setPosition(cc.p(size.width / 2, size.height / 2 + 220));
            this.addChild(piao_tip);
            piao_tip.setColor(cc.color(0x09, 0x3b, 0x25));
        }
    },

    handler_server_scene_info_uc: function (chengdu_scene, canDelay) {
        var ackGameFree = chengdu_scene.gamescene;
        var sceneStatus = ackGameFree.SceneStatus;
        if (ackGameFree.RoomConfigID.indexOf(2000001) != -1)MJModel.changMode = 2;
        this.mPaiSeBar.setVisible(false);
        this.mChangeBar.setVisible(false);
        MJModel.mj_hu_flag = [0, 0, 0, 0];

        var canPiaoNum = 0;
        for (var i = 0; i < ackGameFree.RoomConfigID.length; i++) {
            if (ackGameFree.RoomConfigID[i] == ConfigType.Piao_none) {
                this._daiPiaoConfig = ConfigType.Piao_none;
            } else if (ackGameFree.RoomConfigID[i] == ConfigType.Piao_1) {
                this._daiPiaoConfig = ConfigType.Piao_1;
                canPiaoNum = 1;
            } else if (ackGameFree.RoomConfigID[i] == ConfigType.Piao_2) {
                this._daiPiaoConfig = ConfigType.Piao_2;
                canPiaoNum = 2;
            } else if (ackGameFree.RoomConfigID[i] == ConfigType.Piao_3) {
                this._daiPiaoConfig = ConfigType.Piao_3;
                canPiaoNum = 3;
            } else if (ackGameFree.RoomConfigID[i] == ConfigType.Piao_5) {
                this._daiPiaoConfig = ConfigType.Piao_5;
                canPiaoNum = 5;
            }
        }

        this._super(ackGameFree, canDelay);
        this._setGameType();

        //正在扑三张
        if (sceneStatus == 7) {
            MJModel.cur_seat = -1;
            if (this.mPuSanZhangBar.getChildByName("sureChoice") != undefined) {
                this.mPuSanZhangBar.getChildByName("sureChoice").setEnabled(false);
            }
            //去掉扑3张选择，默认扑
            //this._pszBtn.setVisible(true);
            //this._bpBtn.setVisible(true);
            MJModel.canChoiceMore = true;
            MJModel.canTouchCard = true;
            this._isChoosePszing = true;
            this.mPuSanZhangBar.setVisible(true);

            var changeOk = chengdu_scene.pu_status;
            var cont = 0;
            for (var i = 0; i < changeOk.length; i++) {
                if (changeOk[i] == 1) {
                    cont++;
                }
            }
            if (cont != 4) {
                this._isShowWaitchange(true);
                for (var i = 0; i < changeOk.length; i++) {
                    if (changeOk[i] == 1) {
                        this._complete_Psz++;
                        var pos = MJModel.getPosBySeatid(i);
                        if (this._changeCard[pos]) {
                            this._changeCard[pos].setTexture(getResPath("yichang/action/ok.png"));
                        }
                        //如果自己换牌完成，隐藏换牌界面
                        if (i == MJModel.seatid) {
                            //this._pszBtn.setVisible(false);
                            //this._bpBtn.setVisible(false);
                            MJModel.canTouchCard = false;
                            MJModel.canChoiceMore = false;
                            this._isChoosePszing = false;
                            this.mPuSanZhangBar.setVisible(false);
                        }
                    }
                }
            }
        }

        var pusanzhang = chengdu_scene.pu_status;
        var sanzhangpai = chengdu_scene.pucards;
        for (var i = 0; i < pusanzhang.length; i++) {
            var pos = MJModel.getPosBySeatid(i);
            if (pusanzhang[i] == 1) {
                if (pos == 0) {
                    var card = sanzhangpai[0];
                    var OpType = -1;
                    var cardvalues = sanzhangpai;
                    this.room_Card.addPengCard(pos, YCPengType.Chi_Liang, card, pos, OpType, cardvalues);

                } else {
                    var card = 0;
                    var OpType = -1;
                    var cardvalues = [0, 0, 0];
                    this.room_Card.addPengCard(pos, YCPengType.Chi_Liang, card, pos, OpType, cardvalues);
                }
            }
        }

        // var piao_status = chengdu_scene.piao_status;
        // var piaoFen = chengdu_scene.piao;
        // //正在漂分
        // if (sceneStatus == 4 && this._daiPiaoConfig != ConfigType.Piao_none) {
        //     for (var i = 0; i < piaoFen.length; i++) {
        //         var piao = piaoFen[i];
        //         if (i == MJModel.seatid && piao_status[i] == 0) {
        //             this._showPiaoLayer(canPiaoNum);
        //         } else {
        //             if (piao_status[i] == 1 && piao != 255) {
        //                 var pos = MJModel.getPosBySeatid(i);
        //                 this._setPiaoNum(piao, pos, true);
        //             }
        //         }
        //     }
        //     return;
        // }
        //
        // //恢复漂分
        // for (var i = 0; i < piaoFen.length; i++) {
        //     var piao = piaoFen[i];
        //     if (piao != 255) {
        //         var pos = MJModel.getPosBySeatid(i);
        //         this._setPiaoNum(piao, pos, false);
        //     }
        // }

        //正在换三张
        if (sceneStatus == 1) {
            MJModel.cur_seat = -1;
            if (this.mChangeBar.getChildByName("sureChoice") != undefined) {
                this.mChangeBar.getChildByName("sureChoice").setEnabled(false);
            }
            if (this.mChangeBar.getChildByName("cancelChoice") != undefined) {
                this.mChangeBar.getChildByName("cancelChoice").setEnabled(false);
            }
            this.mChangeBar.setVisible(true);
            MJModel.canTouchCard = true;
            MJModel.canChoiceMore = true;
            var cont = 0;
            var changeOk = chengdu_scene.hsz_status;
            for (var i = 0; i < changeOk.length; i++) {
                if (changeOk[i] == 1) {
                    cont++;
                }
            }
            if (cont != 4) {
                this._isShowWaitchange(true);
                for (var i = 0; i < changeOk.length; i++) {
                    if (changeOk[i] == 1) {
                        var pos = MJModel.getPosBySeatid(i);
                        if (this._changeCard[pos]) {
                            this._changeCard[pos].setTexture(getResPath("yichang/action/ok.png"));
                        }
                        //如果自己换牌完成，隐藏换牌界面
                        if (i == MJModel.seatid) {
                            MJModel.canChoiceMore = false;
                            MJModel.canTouchCard = false;
                            this.mChangeBar.setVisible(false);
                        }
                    }
                }
            }
            return;
        }

        //恢复换三张标志
        if (sceneStatus != 0 && sceneStatus != 1) {
            var shaizi = chengdu_scene.changeshaizi;
            var hsz_card = chengdu_scene.changecards;
            this._MJShaizi = shaizi;
            for (var j = 0; j < hsz_card.length; j++) {
                var cardvalue = hsz_card[j];
                for (var k = 0; k < this.room_Card.hand_card[0].length; k++) {
                    var card = this.room_Card.hand_card[0][k];
                    if (card.value == cardvalue && !card.isAddflag) {
                        card.isAddflag = true;
                        this._checkAddCardFlag(0, card);
                        break;
                    }
                }
            }
            var hsz_benpai = chengdu_scene.hsz_benpai;
            if (hsz_benpai.length == 3 ) {
                if (hsz_benpai[1] !=255 ) {
                    this._showhsz_card(hsz_benpai);
                }
            }

        }

        //正在定缺
        //if (sceneStatus == 2) {
        //    this.mPaiSeBar.setGoodPaiSe(this.room_Card.getGoodPaiSe());
        //    this.mPaiSeBar.setVisible(true);
        //    var cont = 0;
        //    var lackOk = chengdu_scene.que_status;
        //    for (var i = 0; i < lackOk.length; i++) {
        //        if (lackOk[i] == 1) {
        //            cont++;
        //        }
        //    }
        //    if (cont != 4) {
        //        this._isShowWaitLack(true);
        //        MJModel.canChoiceMore = false;
        //        MJModel.canTouchCard = false;
        //        for (var i = 0; i < lackOk.length; i++) {
        //            if (lackOk[i] == 1) {
        //                var pos = MJModel.getPosBySeatid(i);
        //                if (this._lackDingque[pos]) {
        //                    this._lackDingque[pos].setTexture(getResPath("yichang/action/ok.png"));
        //                }
        //                //如果自己已定缺完成，隐藏定缺界面
        //                if (i == MJModel.seatid) {
        //                    this.mPaiSeBar.setVisible(false);
        //                }
        //            }
        //        }
        //    }
        //    return;
        //}

        var is_hu = chengdu_scene.ishu;
        var hu_card_list = chengdu_scene.hucardlist;
        //var lack = chengdu_scene.que;
        //var fen = chengdu_scene.fen;
        //var sub_total = chengdu_scene.sub_total;
        //var my_base_score = chengdu_scene.my_base_score;
        //var is_over_time = chengdu_scene.is_over_time;
        if (sceneStatus != 0) {
            //胡牌锁牌
            for (var i = 0; i < is_hu.length; i++) {
                var pos = MJModel.getPosBySeatid(i);
                if (pos == 0 && is_hu[i]) {
                    MJModel.mj_lockcard_type = 2;
                }
            }
            //恢复胡的牌
            for (var i = 0; i < hu_card_list.length; i++) {
                var pos = MJModel.getPosBySeatid(i);
                var hu_card = hu_card_list[i].hucards;
                var fang_pao_id = hu_card_list[i].huchairids;
                for (var j = 0; j < hu_card.length; j++) {
                    var paoSeatid = fang_pao_id[j];
                    var paoPos = MJModel.getPosBySeatid(paoSeatid);
                    this._show_hu_card(pos, paoPos, hu_card[j]);

                }
            }
            //恢复定缺
            //for (var i = 0; i < lack.length; i++) {
            //    var pos = MJModel.getPosBySeatid(i);
            //    if (lack[i] != -1) {
            //        this.players[pos].setLackType(lack[i]);
            //        if (i == MJModel.seatid) {
            //            MJModel.lackType = lack[i];
            //        }
            //    }
            //}

        }

        if (MJModel.isMyPlayer(MJModel.cur_seat)) {
            var opType = ackGameFree.OpType;
            if ((opType & ActionType.TYPE_LISTEN) == ActionType.TYPE_LISTEN) {
                opType = opType - ActionType.TYPE_LISTEN;
            }
            if (opType > 0) {
                if (( opType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || ( opType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG || ( opType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                    this.myselfOpenOutCard(true);
                }
            } else {
                this.myselfOpenOutCard(true);
            }
        }
    },

    _hide_all_tip: function () {
        for (var i = 0; i < this._all_huType_tip.length; i++) {
            if (this._all_huType_tip[i]) this._all_huType_tip[i].setVisible(false);
        }
    }
    ,
    _init_extend: function () {
        var self_table = this;
        //不要自动胡牌功能
        MJCards.prototype.checkCardsValid = function () {
            return true;
        };
        MJAction.prototype.setAutoOutCardVis = function (value) {
        };

        MJInfo.prototype.getPublicCardEffectRes = function (res) {
            if (MJModel.mj_bg_use == 0) {
                return getResPath("MJ2.5/publiccardeffect3/" + res);
            }
            if (MJModel.mj_bg_use == 1) {
                return getResPath("MJ2.5/publiccardeffect2/" + res);
            }
        };

        var supersetId = MJPlayer.prototype.setId;
        MJPlayer.prototype.setId = function (id) {
            supersetId.call(this, id);
            this.lack_flag = new cc.Sprite(getResPath("yichang/action/tiao_icon.png"));
            // this.lack_flag.setAnchorPoint(cc.p(0.5, 0.5));
            if (id == 0) {
                this.lack_flag.setAnchorPoint(cc.p(0, 0));
                // this.lack_flag.setPosition(cc.p(this.m_size.width + this.lack_flag.getContentSize().width / 2, this.m_size.height + this.lack_flag.getContentSize().height / 2));
                this.lack_flag.setPosition(cc.p(this.m_size.width - 5, this.m_size.height - 5));
            } else if (id == 1) {
                this.lack_flag.setAnchorPoint(cc.p(1, 1));
                // this.lack_flag.setPosition(cc.p(-this.lack_flag.getContentSize().width / 2, -this.lack_flag.getContentSize().height / 2));
                this.lack_flag.setPosition(cc.p(0 + 5, 0 + 5));
            } else {
                this.lack_flag.setAnchorPoint(cc.p(0, 1));
                // this.lack_flag.setPosition(cc.p(this.m_size.width + this.lack_flag.getContentSize().width / 2, -this.lack_flag.getContentSize().height / 2));
                this.lack_flag.setPosition(cc.p(this.m_size.width - 5, 0 + 5));
            }
            this.lack_flag.setVisible(false);
            this.addChild(this.lack_flag, 100);
        };
        MJPlayer.prototype.setLackType = function (lack) {
            this.lack_flag.setVisible(true);
            if (lack == MJ_TYPE.MJ_TYPE_TIAO) {
                this.lack_flag.setTexture(getResPath("yichang/action/tiao_icon.png"));
            }
            else if (lack == MJ_TYPE.MJ_TYPE_TONG) {
                this.lack_flag.setTexture(getResPath("yichang/action/tong_icon.png"));
            }
            else if (lack == MJ_TYPE.MJ_TYPE_WAN) {
                this.lack_flag.setTexture(getResPath("yichang/action/wan_icon.png"));
            }
            else {
                this.lack_flag.setVisible(false);

            }
        };

        var superreset = MJPlayer.prototype.reset;
        MJPlayer.prototype.reset = function () {
            superreset.call(this);
            this.setLackType(-1);
            // self_table._recordScore = [0, 0, 0, 0];
            // this.update_record();
        };

        MJCards.prototype.getGoodPaiSe = function () {
            var wanCount = 0;
            var tiaoCount = 0;
            var tongCount = 0;
            for (var i = 0; i < this.hand_card[0].length; i++) {
                var card = this.hand_card[0][i];
                var paiSe = parseInt(card.value / 16);
                switch (paiSe) {
                    case MJ_TYPE.MJ_TYPE_WAN:
                        wanCount++;
                        break;
                    case MJ_TYPE.MJ_TYPE_TIAO:
                        tiaoCount++;
                        break;
                    case MJ_TYPE.MJ_TYPE_TONG:
                        tongCount++;
                        break;
                    default:
                        break;
                }

            }
            cc.log("wanCount:" + wanCount + "tiaoCount:" + tiaoCount + "tongCount:" + tongCount);
            if (wanCount <= tiaoCount && wanCount <= tongCount) {
                return MJ_TYPE.MJ_TYPE_WAN;
            }
            else if (tiaoCount <= wanCount && tiaoCount <= tongCount) {
                return MJ_TYPE.MJ_TYPE_TIAO;
            }
            else {
                return MJ_TYPE.MJ_TYPE_TONG;
            }
        };

        MJCards.prototype.sortCard = function (a, b) {
            return self_table._sortCard(a, b);
        };
        MJCards.prototype.openHuaZhuClickOnly = function () {
            var lackType = MJModel.lackType;
            if (lackType == -1) {
                return;
            }
            var hasHuaZhu = false;
            for (var i = 0; i < this.hand_card[0].length; i++) {
                var card = this.hand_card[0][i];
                var paiSe = parseInt(card.value / 16);
                if (lackType != -1 && paiSe == lackType) {
                    hasHuaZhu = true;
                    break;
                }
            }

            if (hasHuaZhu) {
                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    var paiSe = parseInt(card.value / 16);
                    if (lackType != -1 && paiSe == lackType) {
                        card.setCardTouchEnable(true);
                        card.setBlackVis(false);
                    } else {
                        card.setCardTouchEnable(false);
                        card.setBlackVis(true);
                    }

                }
            } else {
                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    card.setCardTouchEnable(true);
                    card.setBlackVis(false);
                }
            }
        };

        MJCards.prototype.setSomeCardClickState = function () {
            if (MJModel.mj_lockcard_type == 1) {
                var listen_cards = [];
                for (var i = 0; i < MJModel.listen_info.length; i++) {
                    var lsi = MJModel.listen_info[i];
                    listen_cards.push(lsi.OutCard);
                }

                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    if (listen_cards.indexOf(card.value) == -1) {
                        card.setBlackVis(true);
                        card.setCardTouchEnable(false);
                    }
                }
            } else if (MJModel.mj_lockcard_type == 2) {
                if (this.isDuoPai(0) == false) return;
                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    card.setBlackVis(true);
                    card.setCardTouchEnable(false);
                }
            } else {
                this.openHuaZhuClickOnly();
            }
        };

        MJCards.prototype.closeHuaZhuClickOnly = function () {
            if (MJModel.isAutoOutCard || MJModel.isBaoting || MJModel.lackType == -1) {
                return;
            }
            for (var i = 0; i < this.hand_card[0].length; i++) {
                var card = this.hand_card[0][i];
                card.setBlackVis(false);
            }
        };

        MJCards.prototype.setCurChoiceType = function (type) {
            this.curChoiceType = type;
            if (this.curChoiceType == -1) {
                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var handCard = this.hand_card[0][i];
                    if (handCard) {
                        handCard.setCardTouchEnable(true);
                        handCard.setBlackVis(false);
                    }
                }
            } else {
                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var handCard = this.hand_card[0][i];
                    if (handCard && parseInt(handCard.value / 16) != this.curChoiceType) {
                        handCard.setCardTouchEnable(false);
                        handCard.setBlackVis(true);
                    }
                }
            }
        };

        MJCards.prototype.getChoiceCards = function () {
            var cards = [];

            for (var i = 0; i < this.hand_card[0].length; i++) {
                var fcard = this.hand_card[0][i];
                if (fcard) {
                    if (fcard.getPositionY() != MJConfig.getHandCardPos(0, i, 0, this.isDuoPai(0)).y) {
                        cards.push(fcard.value);
                    }
                    // if (fcard.isUp) {
                    //     cards.push(fcard.value);
                    // }
                }
            }
            return cards;
        };

        MJCards.prototype.clickHandCardCallback = function (n) {
            var card = n;
            if (MJModel.canChoiceMore) {
                if (self_table._isChoosePszing) {
                    if (card.isUp) {
                        card.setUp(false);
                        var upCards = this.getChoiceCards();
                        // if (upCards.length == 0) {
                        //     this.setCurChoiceType(-1);
                        // }
                        if (self_table.mPuSanZhangBar.getChildByName("sureChoice") != undefined) {
                            if (upCards.length < 3) {
                                self_table.mPuSanZhangBar.getChildByName("sureChoice").setEnabled(false);
                            } else {
                                self_table.mPuSanZhangBar.getChildByName("sureChoice").setEnabled(true);
                            }
                        }
                    }
                    else {
                        var upCards = this.getChoiceCards();
                        // if (upCards.length == 0) {
                        //     this.setCurChoiceType(parseInt(card.value / 16))
                        // }
                        if (upCards.length < 3) {
                            card.setUp(true);
                        }
                        if (self_table.mPuSanZhangBar.getChildByName("sureChoice") != undefined) {
                            if (upCards.length < 2) {
                                self_table.mPuSanZhangBar.getChildByName("sureChoice").setEnabled(false);
                            } else {
                                self_table.mPuSanZhangBar.getChildByName("sureChoice").setEnabled(true);
                            }
                        }
                    }
                    return;
                }

                if (card.isUp) {
                    card.setUp(false);
                    var upCards = this.getChoiceCards();
                    if (upCards.length == 0) {
                        this.setCurChoiceType(-1);
                    }
                    if (self_table.mChangeBar.getChildByName("sureChoice") != undefined) {
                        if (upCards.length < 3) {
                            self_table.mChangeBar.getChildByName("sureChoice").setEnabled(false);
                        } else {
                            self_table.mChangeBar.getChildByName("sureChoice").setEnabled(true);
                        }
                    }
                    // if (self_table.mChangeBar.getChildByName("cancelChoice") != undefined) {
                    //     if (upCards.length > 0) {
                    //         self_table.mChangeBar.getChildByName("cancelChoice").setEnabled(true);
                    //     } else {
                    //         self_table.mChangeBar.getChildByName("cancelChoice").setEnabled(false);
                    //     }
                    // }
                }
                else {
                    var upCards = this.getChoiceCards();
                    if (upCards.length == 0) {
                        this.setCurChoiceType(parseInt(card.value / 16))
                    }
                    if (upCards.length < 3) {
                        card.setUp(true);
                    }
                    if (self_table.mChangeBar.getChildByName("sureChoice") != undefined) {
                        if (upCards.length < 2) {
                            self_table.mChangeBar.getChildByName("sureChoice").setEnabled(false);
                        } else {
                            self_table.mChangeBar.getChildByName("sureChoice").setEnabled(true);
                        }
                    }
                    // if (self_table.mChangeBar.getChildByName("cancelChoice") != undefined) {
                    //     self_table.mChangeBar.getChildByName("cancelChoice").setEnabled(true);
                    // }
                }
                return;
            }

            var preCard = null;

            for (var i = 0; i < this.hand_card[0].length; i++) {
                var fcard = this.hand_card[0][i];
                if (fcard) {
                    if (fcard.isUp) preCard = fcard;
                    fcard.setUp(false);
                }
            }

            if (this.outCardBtn) this.outCardBtn.setVisible(false);

            if (preCard && preCard == card) {
                if (MJModel.mj_double_click_style == 1) this.outHandCardCallback(n);
                return;
            }

            card.setUp(true);

            var hasTingPaiInfo = false;

            try {
                MJModel.mj_table.removeChildByName("tingpai_layer");
                for (var i = 0; i < MJModel.listen_info.length; i++) {
                    var tli = MJModel.listen_info[i];
                    if (card.value == tli.OutCard) {
                        if (tli.HuInfo.length >= 10) {
                            break;
                        }
                        var curTingPaiLayer = new TingPaiLayer();
                        curTingPaiLayer.show2(tli.HuInfo);

                        curTingPaiLayer.setName("tingpai_layer");
                        MJModel.mj_table.addChild(curTingPaiLayer, 100);
                        hasTingPaiInfo = true;
                        break;
                    }
                }
            } catch (e) {
                Log(this, e);
            }


            if (this.outCardBtn == null) {
                this.createOutCardBtn();
            }
            else {
                this.outCardBtn.setVisible(true);
            }

            if (this.outCardBtn) {
                var size = cc.director.getWinSize();
                this.outCardBtn.setPosition(cc.p(size.width - 120, 189));
            }
        };

        var super_setOperator = MJAction.prototype.setOperator;
        MJAction.prototype.setOperator = function (operat) {
            this.removeChildByName("ChooseGang_selectLayer");
            if (operat == -1 || operat == 0 || operat == null || operat == undefined) {
                for (var i = 0; i < this.opBtns.length; i++) {
                    this.opBtns[i].setVisible(false);
                }
                return false;
            }
            // if (MJModel.mj_lockcard_type == 2 && (operat & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
            //     return false;
            // }
            super_setOperator.call(this, operat);
        };
        MJAction.prototype.setReady2Visible = function (v) {
            if (MJModel.isOnVideo)return;
            if (this.ready2){
                var size = cc.director.getWinSize();
                this.ready2.setPosition(cc.p(size.width - 120, 120));
                this.ready2.setScale(0.8);
                this.ready2.setVisible(v);
            }
        };
        var super_getCardStr_new = MJConfig.getCardStr_new;
        MJConfig.getCardStr_new = function (value, pos, type, index) {
            if (type == CardType.Card_Hu) {
                return super_getCardStr_new.call(this, value, pos, CardType.Card_Out, index);

            }
            return super_getCardStr_new.call(this, value, pos, type, index);
        };

        MJCards.prototype.setUp = function (isUp) {
            for (var i = 0; i < self_table.room_Card.hand_card[0].length; i++) {
                var fcard = self_table.room_Card.hand_card[0][i];
                if (fcard.isUp != isUp) {
                    fcard.setUp(isUp);
                }
            }
        };
        //5-28
        //MJCards.prototype.addPengCard = function (pos, type, value, out_pos, OpType, cardvalues) {
        //    var card = new MJPeng();
        //    this.peng_card[pos].push(card);
        //    card.setValue(type, pos, value, this.peng_card[pos].length - 1, out_pos, false, OpType, cardvalues);
        //    card.setPosition(MJConfig.getPengKangCardPos(pos, this.peng_card[pos].length - 1));
        //    card.setScale(MJConfig.getScale_new(pos, CardType.Card_Peng, this.peng_card[pos].length - 1, false));
        //    this.addChild(card, MJConfig.getPengKangCardOrder(pos, this.peng_card[pos].length - 1));
        //};

        var superchangPengCard = MJCards.prototype.changPengCard;
        MJCards.prototype.changPengCard = function (pos, type, value, out_pos, OpType, specialCard) {
            for (var i = 0; i < this.peng_card[pos].length; i++) {
                if (this.peng_card[pos][i].pengType == YCPengType.Chi_Liang && type == YCPengType.Chi_Liang) {
                    this.peng_card[pos][i].setValue(type, pos, value, i, this.peng_card[pos][i].out_pos, false, OpType, specialCard);
                    break;
                }
            }
            return superchangPengCard.call(this, pos, type, value, out_pos, OpType, specialCard);
        };

        var supersetValue = MJPeng.prototype.setValue;
        MJPeng.prototype.setValue = function (type, pos, value, index, out_pos, isEnd, OpType, cardvalues) {
            if (type == YCPengType.Chi_Liang) {
                var values = [];
                values = cardvalues;
                this.showUI(type, pos, values, index, out_pos, isEnd, OpType, value);
                return;
            }

            supersetValue.call(this, type, pos, value, index, out_pos, isEnd, OpType);
        };
        //重设设置语言
        Setting.prototype.doSupportFangYan  = function(){
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_putonghua"].setSelected(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(false);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言1");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };

        MJConfig.getHuCardOrder = function (pos, index) {
            var  order = [
                [
                    20, 20, 20, 20, 20, 20, 20, 20, 20, 20,20, 20, 20, 20, 20,20,
                ],
                [
                    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,

                ],
                [
                    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
                ],
                [
                    3, 2, 1, 0, 7, 6, 5, 4, 11, 10, 9, 8, 15, 14, 13, 12, 19, 18, 17, 16,

                ],
            ];
            if  (MJModel.mj_bg_use == 1){
                order = [
                    [
                       // 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        20, 20, 20, 20, 20, 20, 20, 20, 20, 20,20, 20, 20, 20, 20,20,
                    ],
                    [
                        17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                    ],
                    [
                        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
                    ],
                    [

                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
                    ],
                ];
            }
                return order[pos][index];

        };

        var super_reflashallcardui = MJCards.prototype.reflashAllCardUI;
        MJCards.prototype.reflashAllCardUI = function() {
            this.setCurCardTip(false);
            var has_do_mo = false;
            for (var i = 0; i < this.hand_card.length; i++) {
                has_do_mo = false;
                for (var j = 0; j < this.hand_card[i].length; j++) {
                    try {
                        var card = this.hand_card[i][j];
                        card.reflashUI();
                        if (has_do_mo == false && card.getValue() == MJModel.mj_mo_cards[i] && j == (this.hand_card[i].length - 1) ){
                            if (card.type == CardType.Card_End) {
                                card.setMyPosition(MJConfig.getEndCardMoPos(i));
                            } else {
                                card.setMyPosition(MJConfig.getMoCardPos(i));
                            }

                            this.reorderChild(card, MJConfig.getMoCardOrder(i));
                            has_do_mo = true;
                        } else {
                            if (this.isDuoPai(i))cc.log("MJModel.mj_mo_cards:" + MJModel.mj_mo_cards[i]);
                            if (card.type == CardType.Card_End) {
                                card.setMyPosition(MJConfig.getEndCardPos(i, has_do_mo == true ? j - 1 : j, 0, MJModel.mj_mo_cards[i] == -1 && this.isDuoPai(i)));
                            } else {
                                card.setMyPosition(MJConfig.getHandCardPos(i, has_do_mo == true ? j - 1 : j, 0, MJModel.mj_mo_cards[i] == -1 && this.isDuoPai(i)));
                            }
                            this.reorderChild(card, MJConfig.getHandCardOrder(i, j));
                        }
                        card.stopAllActions();
                    } catch (e) {
                    }
                }
            }

            for (var i = 0; i < this.hu_card.length; i++) {
                for (var j = 0; j < this.hu_card[i].length; j++) {
                    try {
                        var card = this.hu_card[i][j];
                        card.reflashUI();
                        card.setMyPosition(MJConfig.getHuCardPos(i, j));
                        this.reorderChild(card, MJConfig.getHuCardOrder(i, j));
                        card.stopAllActions();
                    } catch (e) {
                    }
                }
            }

            for (var i = 0; i < this.out_card.length; i++) {
                for (var j = 0; j < this.out_card[i].length; j++) {
                    try {
                        var card = this.out_card[i][j];
                        card.reflashUI();
                        card.setMyPosition(MJConfig.getOutCardPos(i, j));
                        this.reorderChild(card, MJConfig.getOutCardOrder(i, j));
                        card.stopAllActions();
                    } catch (e) {

                    }
                }
            }

            for (var i = 0; i < this.peng_card.length; i++) {
                for (var j = 0; j < this.peng_card[i].length; j++) {
                    try {
                        var peng = this.peng_card[i][j];
                        if (peng.pengType == YCPengType.Chi_Liang) {
                            for (var k = 0; k < peng.cardList.length; k++) {
                                var card = peng.cardList[k];
                                card.stopAllActions();
                                card.reflashUI();
                                card.setMyPosition(MJConfig.getPengKangCardPos2(i, j, k));
                            }
                        } else {
                            peng.reflashUI();
                        }
                        peng.setPosition(MJConfig.getPengKangCardPos(i, j));
                        peng.setScale(MJConfig.getScale_new(i, CardType.Card_Peng, j, false));
                        this.reorderChild(peng, MJConfig.getPengKangCardOrder(i, j));
                    } catch (e) {

                    }
                }
            }

            for (var i = 0; i < this.other_card.length; i++) {
                try {
                    var card = this.other_card[i];
                    card.reflashUI();
                } catch (e) {

                }
            }

            for (var i = 0; i < this.public_card.length; i++) {
                for (var j = 0; j < this.public_card[i].length; j++) {
                    try {
                        var card = this.public_card[i][j];
                        if (card.isVisible() == false) {
                            continue;
                        }
                        card.setMyPosition(MJConfig.getPublicCardPos(i, j));
                        card.reflashUI();
                        card.stopAllActions();
                    } catch (e) {
                        Log(this, e);
                    }
                }
            }

        };

        //MJCard.prototype.reflashUI = function() {
        //
        //};
        BigFaceMenu.prototype.getNewYearIconsIndexArray= function (seatid) {
            var icons = [];
            if (MJModel.hudong_on_off[seatid] == 1) {
                icons = [20, 5, 22, 23, 14, 25];
            } else {
                icons = [20, 5, 22, 23, 14, 25];
            }
            return icons;
        };
        MJTips.prototype.showBigFace = function (bpos, epos, fid, sex) {
            if (Utils.isNewYear() && fid >19){
                this.showBigfaceNewYear(bpos, epos, fid, sex);
                return;
            }
            if (bpos == epos) {
                return;
            }
            if (fid == 10) {
                if (fid == 10) {
                    fid = 4;
                }
                this.showBigFace_old(bpos, epos, fid, sex);
                return;
            }
            this.showBigfaceNew(bpos, epos, fid, sex);
            return;
        };

    },

    handler_server_update_info_uc: function (data, canDelay) {
        var ackUpdateUserInfo = parsePacket("proto.game.AckUpdateUserInfo", data);
        var seadid = ackUpdateUserInfo.chairid;
        var myPlayer = MJModel.players[seadid];
        var uid = ackUpdateUserInfo.uid;
        var pos = MJModel.getPosBySeatid(seadid);
        if (myPlayer && uid == myPlayer.uid) {
            myPlayer.money = ackUpdateUserInfo.money;
            myPlayer.rmb = ackUpdateUserInfo.rmb;
            this.players[pos].updateInfo();
        }
    },

    handler_server_end_room_bc: function (data, canDelay) {
        this._super(data, canDelay);
        //房间解散时，如果有结算界面，缩小隐藏
        if (this.getChildByName("RoomMJResultDetail")) {
            var result = this.getChildByName("RoomMJResultDetail");
            result.getChildByName("bg").runAction(cc.scaleTo(0.17, 0));
            result.getChildByName("show").setVisible(true);
            result.getChildByName("layout2").setVisible(false);
        }
    },
    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.value;
            if (typeof b === "object") bv = b.value;
            //花猪放在最右边
            var lackType = MJModel.lackType;
            if (lackType != -1) {
                var paiSea = parseInt(av / 16);
                var paiSeb = parseInt(bv / 16);
                if (paiSea == lackType && paiSeb != lackType)return -1;
                if (paiSea != lackType && paiSeb == lackType)return 1;
            }
            return bv - av;
        } catch (e) {
            return 0;
        }
    },
    _createWaitLack: function () {
        for (var i = 0; i < 4; i++) {
            if (this._lackDingque[i] == null) {
                if (i == 0) {
                    this._lackDingque[i] = new cc.Sprite();
                } else {
                    this._lackDingque[i] = new cc.Sprite(getResPath("yichang/action/waitDingque.png"));
                }
                this._lackDingque[i].setVisible(false);
                this._lackDingque[i].setPosition(this._showLackChangePos(i));
                this.addChild(this._lackDingque[i], 1);
            }
        }
    },
    _isShowWaitLack: function (flag) {
        if (flag) {
            for (var i = 0; i < 4; i++) {
                if (this._lackDingque[i]) {
                    this._lackDingque[i].setVisible(true);
                }
            }
        } else {
            for (var i = 0; i < 4; i++) {
                if (this._lackDingque[i]) {
                    if (i == 0) {
                        this._lackDingque[i].setTexture("");
                    } else {
                        this._lackDingque[i].setTexture(getResPath("yichang/action/waitDingque.png"));
                    }
                    this._lackDingque[i].setVisible(false);
                }
            }
        }
        if (MJModel.mj_roomType == 1) {
            if (this._lackDingque[2]) {
                this._lackDingque[2].setVisible(false);
            }
        }
    },
    _createWaitchange: function () {
        for (var i = 0; i < 4; i++) {
            if (this._changeCard[i] == null) {
                if (i == 0) {
                    this._changeCard[i] = new cc.Sprite();
                } else {
                    this._changeCard[i] = new cc.Sprite(getResPath("yichang/action/waitXuanpai.png"));
                }
                this._changeCard[i].setVisible(false);
                this._changeCard[i].setPosition(this._showLackChangePos(i));
                this.addChild(this._changeCard[i], 1);
            }
        }
    },
    _isShowWaitchange: function (flag) {
        if (flag) {
            for (var i = 0; i < 4; i++) {
                if (this._changeCard[i]) {
                    this._changeCard[i].setVisible(true);
                }
            }
        } else {
            for (var i = 0; i < 4; i++) {
                if (this._changeCard[i]) {
                    if (i == 0) {
                        this._changeCard[i].setTexture("");
                    } else {
                        this._changeCard[i].setTexture(getResPath("yichang/action/waitXuanpai.png"));
                    }
                    this._changeCard[i].setVisible(false);
                }
            }
        }
        if (MJModel.mj_roomType == 1) {
            if (this._changeCard[2]) {
                this._changeCard[2].setVisible(false);
            }
        }
    },
    //等待定缺，等待换牌，坐标
    _showLackChangePos: function (pos) {
        var size = cc.director.getWinSize();
        var begin = cc.p(0, 0);
        if (MJModel.isOnVideo) {
            if (pos == 0) {
                begin.x = size.width / 2;
                begin.y = 195;
            } else if (pos == 1) {
                begin.x = size.width - 275;
                begin.y = 400;
            } else if (pos == 2) {
                begin.x = size.width / 2;
                begin.y = size.height - 170;
            } else {
                begin.x = 275;
                begin.y = 400;
            }
        } else {
            if (pos == 0) {
                begin.x = size.width / 2;
                begin.y = 195;
            } else if (pos == 1) {
                begin.x = size.width - 260;
                begin.y = 400;
            } else if (pos == 2) {
                begin.x = size.width / 2;
                begin.y = size.height - 145;
            } else {
                begin.x = 255;
                begin.y = 400;
            }
        }
        return begin;
    },

    _show_renshu_tip: function (pos, type, canDelay) {
        if (pos == -1) return;
        var tip_sp = this._all_huType_tip[pos];
        if (tip_sp == null) {
            tip_sp = new ccui.ImageView();
            this._all_huType_tip[pos] = tip_sp;
            this.addChild(tip_sp, 50);
        }
        if (tip_sp) {
            var tip_sp_name = "";
            if (type == "renshu") {
                tip_sp_name = "yichang/tip/renshu.png";
            }
            if (tip_sp_name != "") {
                tip_sp.loadTexture(getResPath(tip_sp_name));
                tip_sp.setVisible(false);
                var begin = MJConfig.getOperatorTipPos(pos);
                tip_sp.setPosition(begin);

                var show_renshu = cc.callFunc(function () {
                    tip_sp.setVisible(true);
                });
                var dl = 0;
                if (canDelay) {
                    dl = 1;
                }
                this.runAction(cc.sequence(cc.delayTime(dl), show_renshu));
            }
        }
    },

    _show_op_effect: function (pos, name) {
        try {
            var begin;
            {
                begin = MJConfig.getOperatorTipPos(pos);

                var armature = null;
                var effect_name = "";
                if (name == "guafeng") {
                    effect_name = "effects_mjxguafeng";
                    ccs.armatureDataManager.addArmatureFileInfo(getResPath("yichang/effect/effects_mjxguafeng/effects_mjxguafeng.ExportJson"));
                } else if (name == "xiayu") {
                    effect_name = "effects_mjxxiayu";
                    ccs.armatureDataManager.addArmatureFileInfo(getResPath("yichang/effect/effects_mjxxiayu/effects_mjxxiayu.ExportJson"));
                } else if (name == "renshu") {
                    effect_name = "effects_mjxxrenshu";
                    ccs.armatureDataManager.addArmatureFileInfo(getResPath("yichang/effect/effects_mjxxrenshu/effects_mjxxrenshu.ExportJson"));
                }
                armature = new ccs.Armature(effect_name);
                if (armature != null) {
                    animation = armature.getAnimation();
                    if (animation) {
                        if (typeof animation.playWithIndex === "function") {
                            animation.playWithIndex(0);

                            armature.setPosition(begin);
                            this.room_Tip.addChild(armature, 10000);
                        }
                    }
                    armature.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
                }
            }
        } catch (e) {
            Log(this, e);
        }
    },

    handler_server_peng_kang_bc: function (data, canDelay) {
        this.room_Tip.showTextTip("");
        var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);
        this.unschedule(this.autoOutCardTimeOut);
        this.unschedule(this.autoHuCardTimeOut);

        var seatid = ackBcOpResult.ChairID;
        var out_seatid = ackBcOpResult.OutCardChairID;
        var OpType = ackBcOpResult.OpType;
        var OpType2 = ackBcOpResult.OpType2;
        var card = ackBcOpResult.Card;
        var specialCard = ackBcOpResult.SpecialCard;

        var scores = ackBcOpResult.Score;
        this.handler_gang_scores(scores, OpType, OpType2, canDelay);

        if (MJModel.isMyPlayer(seatid)) {
            if (this.room_Action) this.room_Action.setOperator(-1);
        }

        if (this.room_Action_video) this.room_Action_video.reset();

        var pos = MJModel.getPosBySeatid(seatid);
        var out_pos = MJModel.getPosBySeatid(out_seatid);

        this.players[pos].setTimeOut(false);
        this.players[pos].setOffline(false);

        if ((OpType & ActionType.TYPE_PASS) == ActionType.TYPE_PASS) {
            if (MJModel.isMyPlayer(seatid) && seatid == out_seatid && this.room_Card.isDuoPai(0))//如果是我自己摸的牌  自己过 则放开选牌功能
            {
                this.room_Info.showTime(MJModel.outCardTime);
                MJModel.cur_seat = seatid;
                this.myselfOpenOutCard(true);
            }

            return;
        }

        var needRemoveOutCard = false;
        var needOpenOutCard = false;
        if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
            var ok = this.room_Card.addPengCard(pos, PengType.Peng_AnKang, card, out_pos, OpType, specialCard);
            if (!ok)return;
            this.room_Card.removeHandCard(pos, card, 4);
        }
        else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
            this.room_Card.addPengCard(pos, PengType.Peng_Peng, card, out_pos, OpType, specialCard);
            this.room_Card.removeHandCard(pos, card, 2);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
            var ok = this.room_Card.addPengCard(pos, PengType.Peng_Kang, card, out_pos, OpType, specialCard);
            if (!ok)return;
            this.room_Card.removeHandCard(pos, card, 3);
            needRemoveOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
            var ok = this.room_Card.changPengCard(pos, PengType.Peng_Kang, card, out_pos, OpType);
            if (!ok)return;
            this.room_Card.removeHandCard(pos, card, 1);
        }
        else if ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
            this.room_Card.addPengCard(pos, PengType.Chi_L, card, out_pos, OpType, specialCard);
            this.room_Card.removeHandCard(pos, card + 1, 1);
            this.room_Card.removeHandCard(pos, card + 2, 1);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
            this.room_Card.addPengCard(pos, PengType.Chi_M, card, out_pos, OpType, specialCard);
            this.room_Card.removeHandCard(pos, card - 1, 1);
            this.room_Card.removeHandCard(pos, card + 1, 1);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
            this.room_Card.addPengCard(pos, PengType.Chi_R, card, out_pos, OpType, specialCard);
            this.room_Card.removeHandCard(pos, card - 1, 1);
            this.room_Card.removeHandCard(pos, card - 2, 1);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
            this.room_Info.showDirectionTip(-1);
            this.room_Info.stopTime();
            MJModel.canTouchCard = false;
            //抢弯杠
            if ((OpType2 && OpType2 == 5)) {
                this.room_Card.changeWanGang(out_pos, PengType.Peng_Peng, card);
                if (this.room_Card.isDuoPai(out_pos)) this.room_Card.removeHandCard(out_pos, card, 1);
            }
            //抢直杠
            if ((OpType2 && OpType2 == 11)) {
                var ok = this.room_Card.changeZhiGang(out_pos, PengType.Peng_Peng, card);
                if (ok) {
                    this.room_Card.initMoCard(out_pos, (out_pos == 0 || MJModel.isOnVideo ) ? card : 0);
                    this.room_Card.initMoCard(out_pos, (out_pos == 0 || MJModel.isOnVideo ) ? card : 0);
                    this.room_Card.initMoCard(out_pos, (out_pos == 0 || MJModel.isOnVideo ) ? card : 0);
                    this.room_Card.reflashHandCard(out_pos, true, false);
                }
            }

            if ((OpType2 && OpType2 == 5) || (OpType2 && OpType2 == 11)) {
                //避免双抢杠的时候 会出两次牌
                if (this.room_Card.out_card[out_pos].length == 0 || this.room_Card.out_card[out_pos][this.room_Card.out_card[out_pos].length - 1].getValue() != card) {
                    this.room_Card.addOutCard(out_pos, card);
                }
            }
            var zimo = this.room_Card.isDuoPai(pos,2);
            if (zimo == 1) {
                this.room_Card.removeHandCard(pos, card, 1);
                this.room_Card.reflashHandCard(pos, true);
                out_pos = pos;
            } else {
                MJModel.cur_seat = seatid;
                //有可能一炮多响 重复删
                if (this.room_Card.out_card[out_pos].length != 0 && this.room_Card.out_card[out_pos][this.room_Card.out_card[out_pos].length - 1].value == card) {
                    this.room_Card.removeOutCard(out_pos, card, false);
                    this.room_Card.setCurCardTip(false);
                }
            }
            if (MJModel.isMyPlayer(seatid)) {
                MJModel.mj_lockcard_type = 2;
            }
            this._show_hu_card(pos, out_pos, card);
        }

        if (MJModel.isMyPlayer(seatid)) {
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            MJModel.isAutoOutCard = false;
            this.room_Card.setAutoOutCard(false);
        }

        if (needRemoveOutCard) {
            MJModel.cur_seat = seatid;
            var isok = this.room_Card.removeOutCard(out_pos, card, canDelay);
            this.room_Card.setCurCardTip(false);
            if (isok == false) {
                try {
                    ERROR(this, "removeOutCard error card:" + card + "lastoutcard:" + this.room_Card.out_card[out_pos][this.room_Card.out_card[out_pos].length - 1].getValue());
                } catch (e) {
                    ERROR(this, "needRemoveOutCard" + e);
                }
                this.reConnect("", false);
            }
        }

        if (needOpenOutCard) {
            this.room_Info.showDirectionTip(pos);
            if (MJModel.isMyPlayer(seatid)) {
                this.myselfOpenOutCard();
            }
        }

        var player = MJModel.players[seatid];
        if (player && canDelay) {

            var effect = "gang";
            if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                var zimo = this.room_Card.isDuoPai(pos,1);

                effect = "hu";
                if (zimo) {
                    effect = "zimo";
                }

                if (OpType2 == 5 || OpType2 == 11) {
                    effect = "qiangganghu";
                }
            }
            else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                effect = "peng";
            }
            else if ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI || (OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                effect = "chi";
            }

            this.handler_op_sound(pos, player.sex, OpType, OpType2, effect);
            this.handler_op_effect(pos, out_pos, player.sex, OpType, OpType2, effect);
        }
    },

    _addHuCardFlag: function (pos, outpos, card) {
        var p = card.getChildByName("sprite");
        p.removeChildByName("hupai_flag");
        var frompos = outpos;
        if (p) {
            var flag = new cc.Sprite(getResPath("yichang/flag/point_red/point" + frompos + ".png"));
            var m_size = p.getContentSize();
            flag.setPosition(cc.p(m_size.width / 2, 0));
            flag.setAnchorPoint(cc.p(0.5, 0));
            flag.setScale(0.6);
            flag.setName("hupai_flag");
            p.addChild(flag);
            if (pos == 1) {
                flag.setPosition(cc.p(m_size.width-15, m_size.height / 2 + 10));
                flag.setAnchorPoint(cc.p(0, 0.5));
            } else if (pos == 2) {
                flag.setPosition(cc.p(m_size.width / 2, m_size.height-8));
                flag.setAnchorPoint(cc.p(0.5, 0));
            } else if (pos == 3) {
                flag.setPosition(cc.p(m_size.width /2-15, m_size.height / 2 + 10));
                flag.setAnchorPoint(cc.p(1, 0.5));
            }
        }

    },
    //场景更新的时候恢复胡的标志
    _update_hu_card:function(){
        for (var i = 0; i < this.room_Card.hu_card.length; i ++){
            for (var j = 0; j < this.room_Card.hu_card[i].length; j ++){
                var card = this.room_Card.hu_card[i][j];
                this._addHuCardFlag(card.hu_pos, card.outPos, card);
            }
        }
    },
    _show_hu_card: function (pos, outPos, cardvalue) {
        // if (pos == 3) {
        //     var card = new MJCard();
        //     card.setValue(cardvalue, pos, CardType.Card_Hu, 0);
        //     card.setMyPosition(cc.p(300, 200));
        //     this.room_Card.addChild(card, 1);
        //     return;
        // }
        //var index = this._player_hucards[pos].length;
        //var card = new MJCard();
        //card.setValue(cardvalue, pos, CardType.Card_Hu, index);
        ////card.setMyPosition(this.getHuCardPos(pos, index));
        //card.setMyPosition(MJConfig.getHuCardPos(pos, index));
        //this.room_Card.addChild(card, MJConfig.getHuCardOrder(pos, index));
        //this._player_hucards[pos].push(card);
        var card = this.room_Card.addHuCard(pos,cardvalue);
        card.hu_pos = pos;
        card.outPos = outPos;

        this._addHuCardFlag(pos, outPos, card);

    },

    _clearAllHuCard: function () {
        try {
            for (var i = 0; i < 4; i++) {
                this._player_hucards[i] = [];
            }
        } catch (e) {

        }
    },
    handler_server_operate_notify_bc: function (data, canDelay) {
        var ackOpNotify = parsePacket("proto.game.AckOpNotify", data);
        var seatid = ackOpNotify.ChairID;
        var operat = ackOpNotify.OpType;
        var card = ackOpNotify.Card;

        this._super(data, canDelay);
        if (MJModel.isMyPlayer(seatid)) {
            this._check_tip_operate_card(operat, card);
        }
    },

    handler_server_game_end_bc: function (hubeiGameend, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            if (MJModel.currentCount >= MJModel.RoomCountSum){
                this.startTimeEnd();
            }
            var ackGameEnd = hubeiGameend.gameend;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            this.room_Card.hideOutCardBtn();
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);
            this.room_Info.stopTime();

            var showhuazhu = false;
            var showchajiao = false;
            //for (var i = 0; i < hubeiGameend.hua_zhu_fen.length; i++) {
            //    if (hubeiGameend.hua_zhu_fen[i] != 0) {
            //        showhuazhu = true;
            //        break;
            //    }
            //}
            //for (var i = 0; i < hubeiGameend.cha_jiao_fen.length; i++) {
            //    if (hubeiGameend.cha_jiao_fen[i] != 0) {
            //        showchajiao = true;
            //        break;
            //    }
            //}
            //
            //var show_hua_zhu_fen = cc.callFunc(function () {
            //    self.handler_gang_scores(hubeiGameend.hua_zhu_fen, -1, -1, canDelay);
            //});
            //
            //var show_cha_jiao_fen = cc.callFunc(function () {
            //    self.handler_gang_scores(hubeiGameend.cha_jiao_fen, -1, -1, canDelay);
            //});

            var callback0 = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
                //亮出扑三张的牌
                var arrcards = hubeiGameend.arrcards;
                for (var i = 0; i < arrcards.length; i++) {
                    var pos = MJModel.getPosBySeatid(i);
                    var cards = arrcards[i].card;
                    if ( pos != 0 && cards.length == 3) {
                        self.room_Card.changPengCard(pos, YCPengType.Chi_Liang, cards[0], pos, -1, cards);
                    }
                }
            });
            var state = ackGameEnd.EndState;
            var callback2 = cc.callFunc(function () {
                if (state == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
                else {
                }
            });

            var callback4 = cc.callFunc(function () {
                self.room_Tip.reset();
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var callback5 = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var callback3 = cc.callFunc(function () {
                self.room_Action.setReady2Visible(true);
                // if (state == 1) {
                //     return;
                // }
                self.gameend_showGameEndDetail(hubeiGameend);
            });

            if (MJModel.isOnVideo) {
                if (canDelay) {
                    this.runAction(cc.sequence(callback0, callback4, cc.delayTime(1), callback5, cc.delayTime(2), callback3));
                } else {
                    this.runAction(cc.sequence(callback0, callback5, cc.delayTime(2), callback3));
                }
                return;
            }

            if (showhuazhu || showchajiao) {
                this.runAction(cc.sequence(cc.delayTime(0), show_hua_zhu_fen, cc.delayTime(showhuazhu ? 2.5 : 0), show_cha_jiao_fen, cc.delayTime(showchajiao ? 2.5 : 0), cc.delayTime(0), callback0, cc.delayTime(0), callback4, cc.delayTime(1), callback5, cc.delayTime(0), callback2, cc.delayTime(0), callback3));
            } else {
                this.runAction(cc.sequence(cc.delayTime(0), callback0, cc.delayTime(0), callback4, cc.delayTime(1), callback5, cc.delayTime(0), callback2, cc.delayTime(0), callback3));
            }


        } catch (e) {
            ERROR(this, e);
        }
    },

    gameend_showGameEndDetail: function (ackGameEnd) {
        var detail = new MJYiChang_Result();
        detail.createResult(this, ackGameEnd);
        detail.setName("RoomMJResultDetail");
        this.addChild(detail, 299);
    },

    timeEnd: function (dt) {
        if (MJModel.isEnd)return;
        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    },

    _check_tip_operate_card: function (operat, value) {
        try {
            if ((operat & ActionType.TYPE_PENG) == ActionType.TYPE_PENG || (operat & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
                for (var i = 0; i < this.room_Card.hand_card[0].length; i++) {
                    var card = this.room_Card.hand_card[0][i];
                    if (card.value == value) {
                        card.setChoiceTipShow(true);
                    }
                }
                return;
            }

            if ((operat & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (operat & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                for (var j = 0; j < MJModel.gang_info.length; j++) {
                    for (var i = 0; i < this.room_Card.hand_card[0].length; i++) {
                        var card = this.room_Card.hand_card[0][i];
                        if (card.value == MJModel.gang_info[j].curCard) {
                            card.setChoiceTipShow(true);
                        }
                    }
                }
                return;
            }

            for (var i = 0; i < this.room_Card.hand_card[0].length; i++) {
                var card = this.room_Card.hand_card[0][i];
                card.setChoiceTipShow(false);
            }
        } catch (e) {
            Log(this, e);
        }
    },

    _handler_game_record: function (data, canDelay) {
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var pkgId = this._pkg_id;
        var gameType = "血流成河 · 4人";
        if (MJModel.mj_roomType == 1) gameType = "血流成河 · 3人";

        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];
        gameType += " · " + MJModel.base_money + "分底";

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }

        for (var i = 0; i < gameRecord.MostWinScoreUser.length; i++) {
            var seatId = gameRecord.MostWinScoreUser[i];
            if (seatId != 255) {
                _winSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            //var playerRecord = totalRecord.player_records[i];
            var player = MJModel.players[i];
            var arrStr = ["坐庄次数", "胡牌次数", "超时次数"];
            //次数
            var arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.outtime_num];
            if (player && player.uid != -1) {
                addX = 39 + (i * 302);
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, _winSeatid[i], _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }

            if (recoreInfo.totalscore != 0) {
                has_result = true;
            }

        }
        bigResult.refresh(PlayerNumber);
        this.release();
    },

    //定花色点击事件回调
    onPaiSeClick: function (ref) {
        var name = ref.getName();

        var type;
        if (name == "tiaoChoice") {
            type = MJ_TYPE.MJ_TYPE_TIAO;
        } else if (name == "tongChoice") {
            type = MJ_TYPE.MJ_TYPE_TONG;
        } else if (name == "wanChoice") {
            type = MJ_TYPE.MJ_TYPE_WAN;
        }
        sendLackCard(type);
        this.mPaiSeBar.setVisible(false);

    },
    //换牌点击事件回调
    onChangeClick: function (ref) {
        var name = ref.getName();
        if (name == "sureChoice") {
            var upCards = this.room_Card.getChoiceCards();
            sendChangeCard(upCards);
            this.mChangeBar.setVisible(false);
            MJModel.canChoiceMore = false;
            MJModel.canTouchCard = false;
        }
        // else if (name == "cancelChoice") {
        //     this.room_Card.setUp(false);
        //     this.mChangeBar.getChildByName("sureChoice").setEnabled(false);
        //     this.mChangeBar.getChildByName("cancelChoice").setEnabled(false);
        //     this.room_Card.setCurChoiceType(-1);
        // }

    },

    //扑三张点击事件回调
    onPuSanZhangClick: function (ref) {
        var name = ref.getName();
        if (name == "sureChoice") {
            var upCards = this.room_Card.getChoiceCards();
            sendPuSanZhangCard(upCards);
            this.mChangeBar.setVisible(false);
            MJModel.canTouchCard = false;
            MJModel.canChoiceMore = false;
            this._isChoosePszing = false;
            this._choosePszCard = upCards;
        }
    },


    myselfCloseOutCard: function () {
        this._super();
        this.room_Card.closeHuaZhuClickOnly();
    },

});
var CHENGDU_Paise = cc.Layer.extend({
    tiaoBtn: null,
    tongBtn: null,
    wanBtn: null,
    goodPaiSe: -1,
    opAnim: null,
    ctor: function () {
        this._super();
        var wsize = cc.director.getWinSize();

        var csize = cc.size(630, 110);

        this.setIgnoreAnchorPointForPosition(false);
        this.setAnchorPoint(cc.p(0.5, 0));
        this.setContentSize(csize);
        this.setPosition(cc.p(wsize.width / 2, 158));

        ccs.armatureDataManager.addArmatureFileInfo(getResPath("yichang/effect/effectsmajtishilizi.ExportJson"));
        this.opAnim = new ccs.Armature("effectsmajtishilizi");
        var animation = this.opAnim.getAnimation();
        if (animation) {
            if (typeof animation.playWithIndex === "function") {
                this.opAnim.setAnchorPoint(cc.p(0.5, 0.5));
                animation.play("effectsmajtishilizi", 0, true);
                this.addChild(this.opAnim);
            }
        }
        this.wanBtn = new ccui.Button(getResPath("yichang/action/wan1.png"), getResPath("yichang/action/wan2.png"));
        this.wanBtn.setName("wanChoice");
        this.wanBtn.setAnchorPoint(cc.p(0, 0));
        this.wanBtn.setPosition(cc.p(0, 0));
        this.addChild(this.wanBtn);

        this.tiaoBtn = new ccui.Button(getResPath("yichang/action/tiao1.png"), getResPath("yichang/action/tiao2.png"));
        this.tiaoBtn.setName("tiaoChoice");
        this.tiaoBtn.setAnchorPoint(cc.p(0, 0));
        this.tiaoBtn.setPosition(cc.p(csize.width / 2 - (this.tiaoBtn.getContentSize()).width / 2, 0));
        this.addChild(this.tiaoBtn);

        this.tongBtn = new ccui.Button(getResPath("yichang/action/tong1.png"), getResPath("yichang/action/tong2.png"));
        this.tongBtn.setName("tongChoice");
        this.tongBtn.setAnchorPoint(cc.p(0, 0));
        this.tongBtn.setPosition(cc.p(csize.width - (this.tongBtn.getContentSize()).width, 0));
        this.addChild(this.tongBtn);
    },
    setGoodPaiSe: function (goodPaiSe) {
        this.goodPaiSe = goodPaiSe;
        cc.log("goodPaiSe : " + goodPaiSe);

        var temp = null;

        if (goodPaiSe == MJ_TYPE.MJ_TYPE_TIAO) {
            temp = this.tiaoBtn;
        } else if (goodPaiSe == MJ_TYPE.MJ_TYPE_TONG) {
            temp = this.tongBtn;
        } else if (goodPaiSe == MJ_TYPE.MJ_TYPE_WAN) {
            temp = this.wanBtn;
        }

        if (temp) {
            var point = temp.getPosition();
            var size = temp.getContentSize();
            this.opAnim.setVisible(true);
            this.opAnim.setPosition(cc.p(point.x + size.width / 2 + 10, point.y + size.height / 2));
        } else {
            this.opAnim.setVisible(false);
        }

    },
    addClickEventListener: function (callback) {
        this.tiaoBtn.addClickEventListener(callback);
        this.tongBtn.addClickEventListener(callback);
        this.wanBtn.addClickEventListener(callback);
    },
});

var MJChange = cc.Layer.extend({
    cancelChoiceBtn: null,
    sureChoiceBtn: null,
    ctor: function () {
        this._super();
        var wsize = cc.director.getWinSize();

        var csize = cc.size(530, 140);

        this.setIgnoreAnchorPointForPosition(false);
        this.setAnchorPoint(cc.p(0.5, 0));
        this.setContentSize(csize);
        this.setPosition(cc.p(wsize.width / 2, 145));

        var tipIvSize = cc.size(450, 45);
        var tipIV = new ccui.ImageView();
        tipIV.loadTexture(getResPath("RoomMJ/text_bg.png"));
        tipIV.setAnchorPoint(cc.p(0.5, 1));
        tipIV.setContentSize(tipIvSize);
        tipIV.ignoreContentAdaptWithSize(false);
        tipIV.setPosition(cc.p(csize.width / 2, csize.height));
        this.addChild(tipIV);

        var tip = new ccui.Text("请选同花色的三张牌进行交换", "", 25);
        tip.setTextColor(cc.color(0xff, 0xff, 0xff, 255));
        tip.setAnchorPoint(cc.p(0.5, 0.5));
        tip.setPosition(cc.p(tipIvSize.width / 2, tipIvSize.height / 2));
        tipIV.addChild(tip);


        // this.cancelChoiceBtn = new ccui.Button(getResPath("yichang/action/sure_rechoice1.png"), getResPath("yichang/action/sure_rechoice2.png"), getResPath("yichang/action/sure_rechoice3.png"));
        // this.cancelChoiceBtn.setEnabled(false);
        // this.cancelChoiceBtn.setName("cancelChoice");
        // this.cancelChoiceBtn.setAnchorPoint(cc.p(1, 0));
        // this.cancelChoiceBtn.setPosition(cc.p(csize.width / 2, 0));
        // this.addChild(this.cancelChoiceBtn);

        this.sureChoiceBtn = new ccui.Button(getResPath("yichang/action/sure_choice1.png"), getResPath("yichang/action/sure_choice2.png"), getResPath("yichang/action/sure_choice3.png"));
        this.sureChoiceBtn.setEnabled(false);
        this.sureChoiceBtn.setName("sureChoice");
        this.sureChoiceBtn.setAnchorPoint(cc.p(0.5, 0));
        this.sureChoiceBtn.setPosition(cc.p(csize.width / 2, 8));
        this.addChild(this.sureChoiceBtn);
        cc.log("---this.sureChoiceBtn---: " + this.sureChoiceBtn);
    },
    addClickEventListener: function (callback) {
        // this.cancelChoiceBtn.addClickEventListener(callback);
        this.sureChoiceBtn.addClickEventListener(callback);
    },
});

var MJPuSanZhang = cc.Layer.extend({
    cancelChoiceBtn: null,
    sureChoiceBtn: null,
    ctor: function () {
        this._super();
        var wsize = cc.director.getWinSize();

        var csize = cc.size(530, 140);

        this.setIgnoreAnchorPointForPosition(false);
        this.setAnchorPoint(cc.p(0.5, 0));
        this.setContentSize(csize);
        this.setPosition(cc.p(wsize.width / 2, 145));

        var tipIvSize = cc.size(450, 45);
        var tipIV = new ccui.ImageView();
        tipIV.loadTexture(getResPath("RoomMJ/text_bg.png"));
        tipIV.setAnchorPoint(cc.p(0.5, 1));
        tipIV.setContentSize(tipIvSize);
        tipIV.ignoreContentAdaptWithSize(false);
        tipIV.setPosition(cc.p(csize.width / 2, csize.height));
        this.addChild(tipIV);

        var tip = new ccui.Text("请选择扑三张的牌", "", 25);
        tip.setTextColor(cc.color(0xff, 0xff, 0xff, 255));
        tip.setAnchorPoint(cc.p(0.5, 0.5));
        tip.setPosition(cc.p(tipIvSize.width / 2, tipIvSize.height / 2));
        tipIV.addChild(tip);


        // this.cancelChoiceBtn = new ccui.Button(getResPath("yichang/action/sure_rechoice1.png"), getResPath("yichang/action/sure_rechoice2.png"), getResPath("yichang/action/sure_rechoice3.png"));
        // this.cancelChoiceBtn.setEnabled(false);
        // this.cancelChoiceBtn.setName("cancelChoice");
        // this.cancelChoiceBtn.setAnchorPoint(cc.p(1, 0));
        // this.cancelChoiceBtn.setPosition(cc.p(csize.width / 2, 0));
        // this.addChild(this.cancelChoiceBtn);

        this.sureChoiceBtn = new ccui.Button(getResPath("yichang/action/sure_choice1.png"), getResPath("yichang/action/sure_choice2.png"), getResPath("yichang/action/sure_choice3.png"));
        this.sureChoiceBtn.setEnabled(false);
        this.sureChoiceBtn.setName("sureChoice");
        this.sureChoiceBtn.setAnchorPoint(cc.p(0.5, 0));
        this.sureChoiceBtn.setPosition(cc.p(csize.width / 2, 8));
        this.addChild(this.sureChoiceBtn);
        cc.log("---this.sureChoiceBtn---: " + this.sureChoiceBtn);
    },
    addClickEventListener: function (callback) {
        // this.cancelChoiceBtn.addClickEventListener(callback);
        this.sureChoiceBtn.addClickEventListener(callback);
    },
});

var JingShanPiaoLayer = cc.Layer.extend({
    _isSelectTongYon: false,
    _recordPiao: 0,
    _leastPiao: 0,
    _gap: 26,
    ctor: function () {
        this._super();
    },
    initPiao: function (canPiaoNum) {
        //this._recordPiao = MJModel.mj_table._lastPiao;
        // this._recordPiao = this._leastPiao;
        if (canPiaoNum == 0) return;
        var self = this;
        var size = cc.director.getWinSize();

        // var bg = cc.Scale9Sprite.create(getResPath("yichang/piao/selectBg.png"));
        // bg.setName("selectBg");
        // bg.setContentSize(cc.size(955, 248));
        // bg.setPosition(cc.p(size.width / 2, bg.getContentSize().height / 2 + 30));
        // this.addChild(bg, 100);
        //
        // var dx = 50;
        // var gap = 68;
        // if (canPiaoNum == 1) {
        //     bg.setContentSize(cc.size(500, 248));
        //     gap = 120;
        // } else if (canPiaoNum == 2) {
        //     bg.setContentSize(cc.size(520, 248));
        //     gap = 68;
        // } else if (canPiaoNum == 3) {
        //     bg.setContentSize(cc.size(700, 248));
        //     gap = 76;
        // }
        // for (var i = 0; i < canPiaoNum + 1; i++) {
        //     var layout = this._createCheckBoxItem(i, i == 0 ? true : false);
        //     layout.setPosition(cc.p(dx, 160));
        //     bg.addChild(layout);
        //     dx += layout.getContentSize().width + gap;
        // }
        //
        // var submitBtn = new ccui.Button(getResPath("yichang/piao/submit_0.png"), getResPath("yichang/piao/submit_1.png"));
        // submitBtn.setPosition(cc.p(bg.getContentSize().width / 2, submitBtn.getContentSize().height - 5));
        // submitBtn.addClickEventListener(function (sender, evt) {
        //     self.setVisible(false);
        //     sendPiaoNums(self._recordPiao);
        // });
        // bg.addChild(submitBtn);


        //
        var dx = size.width / 2;
        var dy = 200;
        if (canPiaoNum == 1) {
            dx = dx - 100;
        } else if (canPiaoNum == 2) {
            dx = dx - 200;
        } else if (canPiaoNum == 3 || canPiaoNum == 5) {
            dx = dx - 300;
        }
        for (var i = 0; i < canPiaoNum + 1; i++) {
            var button = this._createButton(i);
            button.setAnchorPoint(cc.p(0.5, 0.5));
            if (i == 4) {
                dx = size.width / 2 - 100;
                dy = 110;
            }
            if (i == 5) {
                dx = size.width / 2 + 100;
                dy = 110;
            }
            button.setPosition(cc.p(dx, dy));
            dx += 200;
            this.addChild(button, 100);
        }

    },
    _createButton: function (num) {
        var self = this;
        var str1 = __String.createWithFormat(getResPath("yichang/piaobutton/piao%1_1.png"), num);
        var str2 = __String.createWithFormat(getResPath("yichang/piaobutton/piao%1_2.png"), num);
        var piaoBtn = new ccui.Button(str1, str2);
        piaoBtn.addClickEventListener(function (sender, evt) {
            self.setVisible(false);
            sendPiaoNums(num);
        });
        return piaoBtn;
    },
    _createCheckBoxItem: function (num, ison) {
        var name = "selectPiao" + num;
        var self = this;
        var size = cc.size(80, 80);
        var layout = new ccui.Layout();
        layout.setContentSize(size);
        layout.setAnchorPoint(0.0, 0.5);
        layout.setSwallowTouches(true);
        layout.addClickEventListener(function (btn) {
            self._layoutCallbck(btn);
        });
        layout.setName(name);

        var bg = new cc.Sprite(getResPath("yichang/piao/ok_bg.png"));
        bg.setPosition(cc.p(14, size.height / 2));
        layout.addChild(bg);

        var ok = new cc.Sprite(getResPath("yichang/piao/ok.png"));
        ok.setName("ok");
        ok.setPosition(cc.p(14, size.height / 2));
        layout.addChild(ok);
        if (ison) {
            ok.setVisible(true);
            layout.setTouchEnabled(false);
        } else {
            ok.setVisible(false);
            layout.setTouchEnabled(true);
        }

        var label = new cc.Sprite(__String.createWithFormat(getResPath("yichang/piao/piao_%1.png"), num));
        label.setAnchorPoint(cc.p(0.0, 0.5));
        label.setPosition(cc.p(44, size.height / 2));
        layout.addChild(label);

        return layout;
    },
    _layoutCallbck: function (obj) {
        var selectName = obj.getName();
        for (var i = 0; i < 6; i++) {
            var name = "selectPiao" + i;
            if (name == selectName) {
                this._recordPiao = i;
                MJModel.mj_table._lastPiao = i;
                this._setCheckBoxOn(name, true);

            } else {
                this._setCheckBoxOn(name, false);
            }
        }
    },
    _setCheckBoxOn: function (name, ison) {
        var layout = this.getChildByName("selectBg").getChildByName(name);
        if (layout) {
            var ok_Sp = layout.getChildByName("ok");
            if (ok_Sp) {
                ok_Sp.setVisible(ison);
            }
            layout.setTouchEnabled(!ison);
        }
    },
});

//-------------------结算--------------------------

var MJYiChang_Result = cc.Layer.extend({
    bg: null,
    GameEndInfo: null,
    ctor: function () {
        this._super();
        var size = cc.director.getWinSize();
        this.setContentSize(size);
        this.setAnchorPoint(cc.p(0, 0));
        this.setPosition(cc.p(0, 0));

        var path = getResPath("yichang/detail/bg4.png");
        if (MJModel.mj_roomType == 1) {
            path = getResPath("yichang/detail/bg3.png");
        }

        this.bg = new cc.Sprite(path);
        this.bg.setName("bg");
        this.addChild(this.bg);

        var bgSize = this.bg.getContentSize();
        var bg = this.bg;

        var layout = new ccui.Layout();
        layout.setTouchEnabled(true);
        layout.setContentSize(size);
        layout.setAnchorPoint(0.0, 0.0);
        layout.setSwallowTouches(false);
        this.addChild(layout, 400);

        var layout2 = new ccui.Layout();
        layout2.setTouchEnabled(true);
        layout2.setName("layout2");
        layout2.setContentSize(cc.size(bgSize.width - 24 * 2, bgSize.height - 24 * 2));
        layout2.setAnchorPoint(0.0, 0.0);
        layout2.setSwallowTouches(true);
        layout2.addClickEventListener(function (sender, evt) {
        });
        this.addChild(layout2, 400);

        var show = new ccui.Button(getResPath("yichang/detail/see1.png"), getResPath("yichang/detail/see2.png"));
        show.setPosition(cc.p(size.width / 2 - bgSize.width / 2 + 100, size.height / 2 - bgSize.height / 2 + 100 + 10));
        show.setName("show");
        show.setTag(399);
        show.setVisible(false);
        show.addClickEventListener(function (sender, evt) {
            bg.runAction(cc.scaleTo(0.17, 1));
            show.setVisible(false);
            layout2.setVisible(true);
        });

        bg.setPosition(show.getPosition());
        bg.setAnchorPoint(cc.p(100 / bgSize.width, 100 / bgSize.height));

        this.addChild(show, 100);

        layout2.setPosition(show.getPosition());
        layout2.setAnchorPoint(cc.p(100 / bgSize.width, 100 / bgSize.height));
        layout.addClickEventListener(function (btn) {
            bg.runAction(cc.scaleTo(0.17, 0));
            show.setVisible(true);
            layout2.setVisible(false);
        });
    },

    createResult: function (mjTable, xgGameend) {
        this.GameEndInfo = xgGameend;

        var bg = this.bg;
        var dx = 24 + 99;
        var dy = 345;

        for (var m = 0; m < 4; m++) {
            var pos = m;
            if (pos == 2 && MJModel.mj_roomType == 1) {
                continue;
            }
            var seatid = MJModel.getSeatidByPos(pos);

            //头像，名字
            //名字 头像
            var player = MJModel.players[seatid];
            var headPic = Utils.createCircleAvatar(player.avatar, "Avatars/user4_unlogin.png", getResPath("yichang/detail/head_bg.png"), cc.size(64, 64));
            headPic.setAnchorPoint(cc.p(0.5, 0.5));
            headPic.setPosition(cc.p(dx, dy));
            bg.addChild(headPic);

            //玩家名字
            var nameLabel = new cc.LabelTTF(Utils.parseName(6, player.name), "Arial", 22);
            nameLabel.setAnchorPoint(cc.p(0.5, 0.5));
            nameLabel.setPosition(cc.p(dx, 285));
            bg.addChild(nameLabel);

            //
            var stscore = this.GameEndInfo.stscore[seatid];
            var yingfen = stscore.yingfen;
            var shufen = stscore.shufen;
            var zongfen = stscore.zongfen;

            var yingfenLabel = new cc.LabelTTF("赢分：  " + yingfen, "Thonburi", 22);
            yingfenLabel.setAnchorPoint(cc.p(0, 0.5));
            yingfenLabel.setPosition(cc.p(dx - 50, 230));
            bg.addChild(yingfenLabel);

            var shufenLabel = new cc.LabelTTF("输分：  " + shufen, "Thonburi", 22);
            shufenLabel.setAnchorPoint(cc.p(0, 0.5));
            shufenLabel.setPosition(cc.p(dx - 50, 230 - 50));
            bg.addChild(shufenLabel);

            var zongfenLabel = new cc.LabelTTF("总分：  " + zongfen, "Thonburi", 22);
            zongfenLabel.setAnchorPoint(cc.p(0, 0.5));
            zongfenLabel.setPosition(cc.p(dx - 50, 230 - 100));
            bg.addChild(zongfenLabel);

            var fantype = this.GameEndInfo.fantype[seatid];
            if (fantype && fantype != -1) {
                var spritePath = null;
                if (fantype == YiChangHuType.MJ_FAN_TYPE_PENGPENGHU) {
                    spritePath = getResPath("yichang/detail/pengpenghu.png");
                } else if (fantype == YiChangHuType.MJ_FAN_TYPE_PINGHU) {
                    spritePath = getResPath("yichang/detail/pinghu.png");
                } else if (fantype == YiChangHuType.MJ_FAN_TYPE_QINGYISE) {
                    spritePath = getResPath("yichang/detail/qingyise.png");
                } else if (fantype == YiChangHuType.MJ_FAN_TYPE_QINGDAPENG) {
                    spritePath = getResPath("yichang/detail/qingdapeng.png");
                }
                if (spritePath) {
                    var huType = new cc.Sprite(spritePath);
                    huType.setPosition(cc.p(dx, 55));
                    bg.addChild(huType);
                }

            }

            dx += ( MJModel.mj_roomType == 0 ) ? 200 : 200;
        }
    },

});

var sendLackCard = function (v) {
    var packet = createPacket("proto.game.yichangmj.ReqChooseLack");
    packet.ChooseLack = v;
    sendPacket(packet, CMD.CLIENT_MJ_CHOOSE_LACKTYPE);
};

var sendChangeCard = function (cardlist) {
    var packet = createPacket("proto.game.yichangmj.ReqChangeCard");
    packet.cards = [];
    for (var i in cardlist) {
        packet.cards.push(cardlist[i]);
    }
    sendPacket(packet, CMD.CLIENT_MJ_CHANGE_CARD);
};

var sendPuSanZhangCard = function (cardlist) {
    var packet = createPacket("proto.game.yichangmj.ReqPuCard");
        packet.cards = [];
        for (var i in cardlist) {
            packet.cards.push(cardlist[i]);
        }
    sendPacket(packet, CHENGDU_CMD.CLIENT_PUSANZHANG);
};

//取消托管
var sendQuXiaoTuoGuan = function () {
    var packet = createPacket("proto.game.yichangmj.ReqDingQue");
    packet.que = 0;
    sendPacket(packet, CHENGDU_CMD.CLIENT_USER_QUXIAOTUOGUAN);
};

var sendPiaoNums = function (v) {
    var packet = createPacket("proto.game.yichangmj.ReqPiao");
    packet.piao = v;
    sendPacket(packet, CMD.CLIENT_MJ_CHOOSE_PIAO);
};




