loadProtoFile("proto/nanjingmjgameproto.proto");


var HuType = {
    HU_INVALID: 0,
    HU_ZIMO: 1,
    HU_PAOHU: 2,
    HU_HeiMo: 2,
    Hu_RuanMo: 1,
    HU_DIANPAO: 3,
    HU_BEIZIMO: 4,
    HU_QIANG_GANG: 5,
    HU_BEI_QIANG_GANG: 6,
    HU_YI_PAO_DUO_XIANG: 7,
    HU_GANG_SHANG_HUA: 8,
    HU_GANG_HOU_PAO: 9,
};
var AddFanType = {
    17: "平胡",
    36: "对对胡",
    1: "游金 x4",
    2: "双游 x8",
    3: "三游 x16",
    4: "三金倒",
    24: "杠上开花 x4",
};

var YoujinType = {
    TYPE_YOUJIN:    0x10000,   //明游
    TYPE_SHUANGYOU: 0x20000,   //双游
    TYPE_SANYOU:    0x40000,   //三游
    TYPE_ANYOU:     0x80000,   //暗游
};

var selfCMD = {
    SERVER_HAERBIN_SHAIZI: 5080,
    SERVER_Laizi_BC: 5084,   //亮牌
    SERVER_CHANGESEAT: 5082,
    CLIENT_ROBOT_REQ: 1008,  //
    SERVER_ROBOT_SER: 4117,
};

var BaiPan = 0x43;

var MJTable_NanJing = MJTable.extend({
    tag: "MJTable_NanJing",
    _curLaizi: -1,
    _curLaizipi: -1,
    _curLaizipi2: -1,
    _curLaizi_bg: null,
    isRecordShow: false,
    _pkg_id: 0,
    _tuoguanBtn: null,
    _tuoguanFlag: [null, null, null, null],
    cur_youjinCount: 0,
    youjinCard:[],
    isSanyou:false,
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        MJModel.mj_suport_fangyan = 0;
        MJModel.outCardEffect_style = 1;

        MJModel.mj_bg_use = 1;
        MJModel.mj_suport_change_bg = 1;
        MJModel.toupiaoTipsType = 1;
        MJModel.chi_layout = 0;
        MJModel.mj_touch_tip = 1;
        MJModel.isOutCard = true;
        MJModel.mj_chat_style = 5;
        MJModel.mj_public_style = 1;
        MJModel.mj_card_lib_type = 1;
        MJModel.mj_lockcard_type = 4;   //4：锁癞子

        MJModel.mj_gps_type = 1;
        MJModel.mj_double_click_style = 1;
        MJModel.mj_self_outCard_type = 1;

        MJModel.mj_font = "jianjie";
        MJModel.mj_fontSize = "dahao";
        MJModel.mj_style = "shishang";
        MJModel.yinyue = "jingdian";
        //MJModel.mj_public_nums = [34, 34, 34, 34],

        MJModel.mj_roominfo_type = 1;//0:走平台接口刷新 1:走服务器数据刷新
        MJModel.shareType = 1;

        setItem("mj_fangyan", "putonghua");

        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];
            if (this._pkg_id == 2633 || this._pkg_id == 2542) {
                MJModel.mj_roomType = 1;
            }
            if (this._pkg_id == 2634 || this._pkg_id == 2543) {
                MJModel.mj_roomType = 2;
            }
        } catch (e) {
            Log(this, e);
        }

        try {
            var help = this.roomPublic.getChildByName("game_help");
            help.setVisible(false);
        } catch (e) {

        }

        this._init_extend();
        this._super();

        {
            var self = this;
            var btn = new ccui.Button();
            btn.loadTextures(getResPath("nanjingmj/action/youjin1_1.png"), getResPath("nanjingmj/action/youjin1_2.png"), "");
            self.room_Action.actions["youjin"] = btn;
            btn.setName("youjin");
            btn.addClickEventListener(function (sender, evt) {
                self.room_Action.btnCallback(sender);
            });
            btn.setVisible(false);
            self.room_Action.addChild(btn);
            self.room_Action.opBtns.push(btn);

            var btn = new ccui.Button();
            btn.loadTextures(getResPath("nanjingmj/action/youjin4_1.png"), getResPath("nanjingmj/action/youjin4_2.png"), "");
            self.room_Action.actions["mingyou"] = btn;
            btn.setName("mingyou");
            btn.addClickEventListener(function (sender, evt) {
                self.room_Action.btnCallback(sender);
            });
            btn.setVisible(false);
            self.room_Action.addChild(btn);
            self.room_Action.opBtns.push(btn);
        }

        if (MJModel.isOnVideo && this.isSupportVideoAction()) {
            for(var i = 0 ; i < 4 ; i++){
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("nanjingmj/action/youjin1_1.png"), getResPath("nanjingmj/action/youjin1_2.png"), "");
                btn.setName("youjin");
                btn.setVisible(false);
                btn.setTag(0);
                this.room_Action_video.addChild(btn);

                this.room_Action_video.actions[i]["youjin"] = btn;
                this.room_Action_video.opBtns[i].push(btn);

                var btn = new ccui.Button();
                btn.loadTextures(getResPath("nanjingmj/action/youjin4_1.png"), getResPath("nanjingmj/action/youjin4_2.png"), "");
                btn.setName("mingyou");
                btn.setVisible(false);
                btn.setTag(0);
                this.room_Action_video.addChild(btn);

                this.room_Action_video.actions[i]["mingyou"] = btn;
                this.room_Action_video.opBtns[i].push(btn);
            }
        }

        this._update_action();

        //this.schedule(this.test, 1.0);
    },
    _update_action: function () {
        //this.room_Action.actions["pass"].loadTextures(getResPath("nanjingmj/action/pass1.png"), getResPath("nanjingmj/action/pass2.png"), getResPath("nanjingmj/action/pass2.png"));
        //
        //this.room_Action.actions["chi"].loadTextures(getResPath("nanjingmj/action/chi1.png"), getResPath("nanjingmj/action/chi2.png"), getResPath("nanjingmj/action/chi2.png"));
        //
        //this.room_Action.actions["peng"].loadTextures(getResPath("nanjingmj/action/peng1.png"), getResPath("nanjingmj/action/peng2.png"), getResPath("nanjingmj/action/peng2.png"));
        //
        //this.room_Action.actions["gang"].loadTextures(getResPath("nanjingmj/action/gang1.png"), getResPath("nanjingmj/action/gang2.png"), getResPath("nanjingmj/action/gang2.png"));
        //
        //this.room_Action.actions["hu"].loadTextures(getResPath("nanjingmj/action/hu1.png"), getResPath("nanjingmj/action/hu2.png"), getResPath("nanjingmj/action/hu2.png"));
        //
        //this.room_Action.actions["youjin"].loadTextures(getResPath("nanjingmj/action/youjin1_1.png"), getResPath("nanjingmj/action/youjin1_2.png"), getResPath("nanjingmj/action/youjin1_2.png"));

        //this.room_Action.opBtns = [];
        //this.room_Action.opBtns.push(this.room_Action.actions["pass"]);
        //this.room_Action.opBtns.push(this.room_Action.actions["chi"]);
        //this.room_Action.opBtns.push(this.room_Action.actions["peng"]);
        //this.room_Action.opBtns.push(this.room_Action.actions["gang"]);
        //this.room_Action.opBtns.push(this.room_Action.actions["hu"]);
        //this.room_Action.opBtns.push(this.room_Action.actions["youjin"]);

        var size = cc.director.getWinSize();
        var self = this;
        if (this._tuoguanBtn == null) {
            this._tuoguanBtn = new ccui.Button();
            this._tuoguanBtn.loadTextures(getResPath("nanjingmj/action/quxiaotuoguan1.png"), "quxiaotuoguan2", "");
            this._tuoguanBtn.setPosition(cc.p(size.width - 184 - 92 - 90, 200));
            this._tuoguanBtn.setName("quxiaotuoguan");
            this._tuoguanBtn.addClickEventListener(function (sender, evt) {
                sendQuxiaoTuoguan();
            });
            this._tuoguanBtn.setVisible(false);
            this.addChild(this._tuoguanBtn, 100);
        }

        for (var i = 0; i < this._tuoguanFlag.length; i++) {
            this._tuoguanFlag[i] = new cc.Sprite(getResPath("nanjingmj/flag/tuoguan.png"));
            this._tuoguanFlag[i].setVisible(false);
            if (i == 0) {
                this._tuoguanFlag[i].setPosition(cc.p(size.width / 2, 150));
            } else if (i == 2) {
                this._tuoguanFlag[i].setPosition(cc.p(size.width / 2, size.height - 80));
            } else if (i == 1) {
                this._tuoguanFlag[i].setPosition(cc.p(size.width - 150, size.height / 2));
            } else if (i == 3) {
                this._tuoguanFlag[i].setPosition(cc.p(150, size.height / 2));
            }
            this.addChild(this._tuoguanFlag[i], 100);
        }
    },
    getMjTypePath: function () {
        var bgPath = "nanjingmj/mj_type_" + MJModel.mj_roomType + ".png";
        return getResPath(bgPath);
    },

    updateBg: function (isInit) {
        if (isInit == undefined)isInit = false;
        var size = cc.director.getWinSize();
        if (this.bg == null) {
            this.bg = new ccui.ImageView(getResPath(this.getBgStr()));
            this.bg.setAnchorPoint(cc.p(0.5, 0.5));
            this.bg.setContentSize(size);
            this.bg.setScale9Enabled(true);
            this.bg.setPosition(size.width / 2, size.height / 2);
            this.addChild(this.bg, -100);
        } else {
            this.bg.loadTexture(getResPath(this.getBgStr()));
        }
        //简洁版本的幺鸡牌换了
        if (MJModel.mj_font == "jianjie") {
            Utils.addCardSprites(__String.createWithFormat("nanjingmj/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));
        } else {
            Utils.addCardSprites(__String.createWithFormat("RoomMJ/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));
        }

        if (MJModel.mj_roomType == 2) {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "nanjingmj/config/card_config_2ren.json" : "nanjingmj/config/card_config2d_2ren.json");
        } else {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "nanjingmj/config/card_config.json" : "nanjingmj/config/card_config2d.json");
        }

        if (isInit)return;

        this.room_Card.reflashAllCardUI();
        for (var i = 0; i < 4; i++) {
            this.players[i].setPosition(MJConfig.getPlayerPos(i));
            this.players[i].reflashNameMoneyPosition();
        }
        if (this.room_Info)this.room_Info.reflash();
    },

    onEnter: function () {
        this._super();
        //if (this.roomPublic) {
        //    this.roomPublic.setjushu(1);
        //}
    },

    _init_extend: function () {
        var self_table = this;

        MJModel.canQuxiaoZhun = function () {
            if(this.RoomConfigID.indexOf(1186002) != -1){
                return true;        //手动准备
            }else{
                return false;       //自动准备
            }
        };

        MJTips.prototype.showEffect = function (pos, type, zimo) {
            cc.log("LX=======showEffect:" + type);
            try {
                if (zimo == undefined) zimo = false;
                var sp = null;
                var effect = null;
                var begin;
                var end;
                var size = cc.director.getWinSize();

                {
                    begin = MJConfig.getOperatorTipPos(pos);

                    var armature = null;
                    var name = "";

                    if (type == ActionType.TYPE_PENG) {
                        ccs.armatureDataManager.addArmatureFileInfo(getResPath("RoomMJ/effect2/peng/effects_mjxpen.ExportJson"));
                        armature = new ccs.Armature("effects_mjxpen");
                        name = "peng";
                    }
                    else if (type == ActionType.TYPE_HU) {
                        if (zimo) {
                            name = "zimo";
                            ccs.armatureDataManager.addArmatureFileInfo(getResPath("RoomMJ/effect2/zimo/effects_mjxzimo.ExportJson"));
                            armature = new ccs.Armature("effects_mjxzimo");
                        } else {
                            name = "hu";
                            ccs.armatureDataManager.addArmatureFileInfo(getResPath("RoomMJ/effect2/hu/effects_mjxhu.ExportJson"));
                            armature = new ccs.Armature("effects_mjxhu");
                        }
                    }
                    else if (type == ActionType.TYPE_LEFT_CHI || type == ActionType.TYPE_CENTER_CHI || type == ActionType.TYPE_RIGHT_CHI) {
                        name = "chi";
                        ccs.armatureDataManager.addArmatureFileInfo(getResPath("RoomMJ/effect2/chi/effects_mjxchi.ExportJson"));
                        armature = new ccs.Armature("effects_mjxchi");
                    }
                    else if(type == YoujinType.TYPE_YOUJIN){
                        name = "youjin";
                        ccs.armatureDataManager.addArmatureFileInfo(getResPath("nanjingmj/effect/youjin/effects_mjxyoujin.ExportJson"));
                        armature = new ccs.Armature("effects_mjxyoujin");
                    }
                    else if(type == YoujinType.TYPE_SHUANGYOU){
                        name = "2youjin";
                        ccs.armatureDataManager.addArmatureFileInfo(getResPath("nanjingmj/effect/2youjin/effects_mjxxsyj.ExportJson"));
                        armature = new ccs.Armature("effects_mjxxsyj");
                    }
                    else if(type == YoujinType.TYPE_SANYOU){
                        name = "3youjin";
                        ccs.armatureDataManager.addArmatureFileInfo(getResPath("nanjingmj/effect/3youjin/effects_mjxxsanyj.ExportJson"));
                        armature = new ccs.Armature("effects_mjxxsanyj");
                    }
                    else {
                        name = "gang";
                        ccs.armatureDataManager.addArmatureFileInfo(getResPath("RoomMJ/effect2/gang/effects_mjxgang.ExportJson"));
                        armature = new ccs.Armature("effects_mjxgang");
                    }

                    if (armature != null && name != "") {
                        animation = armature.getAnimation();
                        if (animation) {
                            if (typeof animation.playWithIndex === "function") {
                                //animation.play(name);
                                animation.playWithIndex(0);
                                armature.setPosition(begin);
                                this.addChild(armature, 10000);
                            }
                        }
                        armature.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
                        armature.setName("hu_effect");
                        return armature;
                    }
                }
            } catch (e) {
                Log(this, e);
            }
            return null;
        };

        MJPreTable.prototype.updateGPSTip = function (hasnocity , hastoonear, hasipsame, hasnoip) {
            if(hastoonear || hasipsame){
                this.btns["gps"].loadTextures(getResPath("RoomMJ/mj_public/common/table/gps2.png"), "", "")
            }else if(hasnocity || hasnoip){
                this.btns["gps"].loadTextures(getResPath("RoomMJ/mj_public/common/table/gps1.png"), "", "")
            }else {
                this.btns["gps"].loadTextures(getResPath("RoomMJ/mj_public/common/table/gps.png"), "", "")
            }
        };

        MJAction.prototype.updateGPSTip = function (hasnocity, hastoonear, hasipsame, hasnoip) {
            if (hastoonear || hasipsame) {
                this.btns["gps"].loadTextures(getResPath("RoomMJ/mj_public/common/table/gps2.png"), "", "")
            } else if (hasnocity || hasnoip) {
                this.btns["gps"].loadTextures(getResPath("RoomMJ/mj_public/common/table/gps1.png"), "", "")
            } else {
                this.btns["gps"].loadTextures(getResPath("RoomMJ/mj_public/common/table/gps.png"), "", "")
            }
        };

        var super_setOperator = MJAction.prototype.setOperator;
        MJAction.prototype.setOperator = function (operat, operat2) {
            this.removeChildByName("ChooseGang_selectLayer");
            super_setOperator.call(this, operat, operat2);
            cc.log("======MJAction=========operat:" + operat + " =====operat2:" + operat2);

            if (operat != -1 && ((operat & YoujinType.TYPE_YOUJIN) == YoujinType.TYPE_YOUJIN || (operat & YoujinType.TYPE_SHUANGYOU) == YoujinType.TYPE_SHUANGYOU ||
                (operat & YoujinType.TYPE_SANYOU) == YoujinType.TYPE_SANYOU)) {
                if ((operat & YoujinType.TYPE_YOUJIN) == YoujinType.TYPE_YOUJIN) {
                    self_table.cur_youjinCount = 1;
                } else if ((operat & YoujinType.TYPE_SHUANGYOU) == YoujinType.TYPE_SHUANGYOU) {
                    self_table.cur_youjinCount = 2;
                } else if ((operat & YoujinType.TYPE_SANYOU) == YoujinType.TYPE_SANYOU) {
                    self_table.cur_youjinCount = 3;
                    self_table.isSanyou = true;
                }

                if (this.actions["youjin"]) {
                    var youjin_path = "nanjingmj/action/youjin" + self_table.cur_youjinCount;
                    this.actions["youjin"].loadTextures(getResPath(youjin_path + "_1.png"), getResPath(youjin_path + "_2.png"), "");
                    this.actions["youjin"].setVisible(true);
                }

                if(self_table.cur_youjinCount == 1){
                    this.actions["mingyou"].setVisible(true);
                }
            }
            if(((operat & YoujinType.TYPE_YOUJIN) != YoujinType.TYPE_YOUJIN && (operat & YoujinType.TYPE_SHUANGYOU) != YoujinType.TYPE_SHUANGYOU &&
                (operat & YoujinType.TYPE_SANYOU) != YoujinType.TYPE_SANYOU)){
                self_table.cur_youjinCount = 0;
                MJModel.mj_lockcard_type = 4;
            }
            if(self_table.isSanyou){
                if (this.actions["pass"]) {
                    this.actions["pass"].setVisible(false);
                }
            }
            if(operat2 == 1){
                if (this.actions["pass"]) {
                    this.actions["pass"].setVisible(false);
                }
            }
            this.reflashOpBtns();

            //if(self_table.cur_youjinCount >= 2){
            //    MJModel.mj_lockcard_type = 2;
            //}
        };

        var super_btnCallback = MJAction.prototype.btnCallback;
        MJAction.prototype.btnCallback = function (ref) {
            var n = ref;
            var name = n.getName();
            Log(this, "btnCallback:" + name);

            if (name == "youjin") {
                cc.log("this.youjincard:" + JSON.stringify(self_table.youjinCard));
                cc.log("self_table.cur_youjinCount:" + JSON.stringify(self_table.cur_youjinCount));
                //MJModel.listen_info = [];
                var type = 0;
                switch (self_table.cur_youjinCount){
                    case 0:
                        break;
                    case 1:
                        type = YoujinType.TYPE_ANYOU;
                        break;
                    case 2:
                        type = YoujinType.TYPE_SHUANGYOU;
                        break;
                    case 3:
                        type = YoujinType.TYPE_SANYOU;
                        break;
                    default :
                        break;
                }
                var card = MJModel.curOperateCard;
                sendOperateCard(type, card);
                this.setOperator(-1);
                MJModel.mj_lockcard_type = 1;
                self_table.myselfOpenOutCard();
                return;
            }

            if(name == "mingyou"){
                var type = YoujinType.TYPE_YOUJIN;
                var card = MJModel.curOperateCard;
                sendOperateCard(type, card);
                this.setOperator(-1);
                MJModel.mj_lockcard_type = 1;
                self_table.myselfOpenOutCard();
                return;
            }

            if(name == "pass"){
                if(self_table.cur_youjinCount == 1){
                    MJModel.mj_lockcard_type = 4;
                }else if(self_table.cur_youjinCount == 2){
                    MJModel.mj_lockcard_type = 0;
                }else if(self_table.cur_youjinCount == 3){
                    MJModel.mj_lockcard_type = 0;
                }else if(self_table.cur_youjinCount == 0){
                    MJModel.mj_lockcard_type = 4;
                }
            }

            super_btnCallback.call(this, ref);
        };

        var super_setOperator_v = MJActionVideo.prototype.setOperator;
        MJActionVideo.prototype.setOperator = function (pos , operat, operat2) {
            super_setOperator_v.call(this, pos, operat);
            cc.log("======MJActionVideo=========operat:" + operat);

            if (operat != -1 && ((operat & YoujinType.TYPE_YOUJIN) == YoujinType.TYPE_YOUJIN || (operat & YoujinType.TYPE_SHUANGYOU) == YoujinType.TYPE_SHUANGYOU ||
                (operat & YoujinType.TYPE_SANYOU) == YoujinType.TYPE_SANYOU)) {
                if((operat & YoujinType.TYPE_YOUJIN) == YoujinType.TYPE_YOUJIN){
                    self_table.cur_youjinCount = 1;
                }else if((operat & YoujinType.TYPE_SHUANGYOU) == YoujinType.TYPE_SHUANGYOU){
                    self_table.cur_youjinCount = 2;
                }else if((operat & YoujinType.TYPE_SANYOU) == YoujinType.TYPE_SANYOU){
                    self_table.cur_youjinCount = 3;
                    self_table.isSanyou = true;
                }

                if (this.actions[pos]["youjin"]) {
                    var youjin_path = "nanjingmj/action/youjin" + self_table.cur_youjinCount;
                    this.actions[pos]["youjin"].loadTextures(getResPath(youjin_path + "_1.png"), getResPath(youjin_path + "_2.png"), "");
                    this.actions[pos]["youjin"].setVisible(true);
                }

                if(self_table.cur_youjinCount == 1){
                    this.actions[pos]["mingyou"].setVisible(true);
                }
            }
            if(self_table.isSanyou){
                if (this.actions[pos]["pass"]) {
                    this.actions[pos]["pass"].setVisible(false);
                }
            }
            if(operat2 == 1){
                if (this.actions[pos]["pass"]) {
                    this.actions[pos]["pass"].setVisible(false);
                }
            }
            this.reflashOpBtns(pos);
            return true;
        };

        MJConfig.getHandCardOrder = function (pos, index) {
            var order = [
                [
                    400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
                ],
                [
                    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                ],
            ];
            return order[pos][index];
        };

        var super_setSomeCardClickState = MJCards.prototype.setSomeCardClickState;
        MJCards.prototype.setSomeCardClickState = function () {
            cc.log("LX============MJModel.mj_lockcard_type:" + MJModel.mj_lockcard_type);
            cc.log("LX============self_table.cur_youjinCount:" + self_table.cur_youjinCount);
            super_setSomeCardClickState.call(this);
            if (MJModel.mj_lockcard_type == 4) {
                //判断手上牌是不是全部为癞子，如果全部为癞子，把手牌解开
                var isAllLaizi = true;
                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    if (card.getValue() != self_table._curLaizi) {
                        isAllLaizi = false;
                        break;
                    }
                }
                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    if (!isAllLaizi && card.getValue() == self_table._curLaizi) {
                        card.setBlackVis(true);
                        card.setCardTouchEnable(false);
                    }
                }
            } else if(MJModel.mj_lockcard_type == 1){
                if(self_table.cur_youjinCount >= 1) {
                    cc.log("111111111111111" + JSON.stringify(self_table.youjinCard));
                    for (var i = 0; i < this.hand_card[0].length; i++) {
                        //for (var j = 0; j < self_table.youjinCard.length; j++) {
                        //    var card = this.hand_card[0][i];
                        //    if (card.getValue() == self_table.youjinCard[j]) {
                        //        cc.log("card.getValue():" + card.getValue() + "===== self_table.youjinCard[j]:" + self_table.youjinCard[j]);
                        //        card.setBlackVis(false);
                        //        card.setCardTouchEnable(true);
                        //        break;
                        //    }
                        //}
                        var card = this.hand_card[0][i];
                        cc.log("card.getValue():" + card.getValue());
                        if (self_table.youjinCard.indexOf(card.getValue()) != -1) {
                            card.setBlackVis(false);
                            card.setCardTouchEnable(true);
                        } else {
                            card.setBlackVis(true);
                            card.setCardTouchEnable(false);
                        }
                    }
                }
            }
        };

        MJCards.prototype.outHandCard = function (pos, value) {
            this.resetLastOutCard();
            var size = cc.director.getWinSize();
            if (pos == 0 && MJModel.seatid != -1) {
                MJModel.isEnterWait = false;

                if (this.outCardBtn) this.outCardBtn.setVisible(false);
                if (this.isDuoPai(pos)) {
                    var card = null;
                    if (MJModel.isMyPos(pos) && this.curOutCard) {
                        card = this.curOutCard;
                    }
                    if (card == null)card = findCardByValue(value, this.hand_card[pos]);
                    if (card) {
                        this.outMyCard(card, value, true);
                    }
                }
            }
            else {
                var card = null;
                var isHaveZiero = true;
                if (MJModel.getTangPaiFlag(pos)) {
                    isHaveZiero = false;
                    for (var i = 0; i < this.hand_card[pos].length; i++) {
                        if (this.hand_card[pos][i].getValue() == 0) {
                            isHaveZiero = true;
                        }
                    }
                }

                card = removeCardByValue(MJModel.isOnVideo || !isHaveZiero ? value : 0, this.hand_card[pos] , this.canMoveHandCard(pos));
                if (card) {
                    card.removeFromParent(true);
                    this.outHandCardEffct2(pos, value);
                }
            }
            this.curOutCard = null;
        };

        MJCards.prototype.outMyCard = function (out_card, out_value, isServer) {
            if (isServer == undefined) {
                isServer = false;
            }
            if (out_card) {
                cc.director.getRunningScene().removeChildByName("tingpai_layer");
                if (this.outCardBtn) this.outCardBtn.setVisible(false);
                if (isServer == false && MJModel.mj_self_outCard_type == 1) {
                    out_card.goBack();
                    return;
                }
                out_card = removeCardByCard(out_card, this.hand_card[0]);
                var card = out_card;
                var pos = 0;
                if (card) {
                    card.reset();
                    var delay = MJModel.speeds[MJModel.mj_speed - 1];
                    if(delay == 0){
                        card.removeFromParent(true);
                        MJModel.mj_mo_cards[pos] = -1;
                        this.reflashHandCard(pos, true, true);
                        this.addOutCard(pos, out_value);
                        this.handler_out_card_sound(MJModel.players[MJModel.seatid].sex, card.value);
                    }else {
                        var self = this;
                        MJModel.isEnterWait = true;
                        var move_callbck = cc.callFunc(function () {
                            card.removeFromParent(true);
                            self.reflashHandCard(pos, true, true);
                            self.addOutCard(pos, out_value);
                            self.handler_out_card_sound(MJModel.players[MJModel.seatid].sex, card.value);
                            MJModel.isEnterWait = false;
                        });
                        card.runAction(cc.sequence(cc.moveTo(delay, MJConfig.getOutCardPos(pos, this.out_card[pos].length)), move_callbck));
                    }
                }
            }
        };

        MJCards.prototype.sortCard = function (a, b) {
            return self_table._sortCard(a, b);
        };

        MJCard.prototype.check_addFlag = function () {
            self_table._checkAddCardFlag(this);
        };

        //湖北麻将不要自动胡牌功能
        MJAction.prototype.setAutoOutCardVis = function (value) {
        };

        var supersetValue = MJPeng.prototype.setValue;
        MJPeng.prototype.setValue = function (type, pos, value, index, out_pos, isEnd, OpType) {
            //特殊吃的类型 特殊处理一下 吃的白板 要以当前赖子去处理其它牌
            if ((type == PengType.Chi_L || type == PengType.Chi_M || type == PengType.Chi_R)) {
                var values = [];
                var card1 = 0;
                var card2 = 0;
                if (value == BaiPan) {
                    cc.log("MJPeng.prototype.setValue:" + self_table._curLaizi);
                    if (type == PengType.Chi_L) {
                        card1 = self_table._curLaizi + 1;
                        card2 = self_table._curLaizi + 2;
                    }
                    else if (type == PengType.Chi_M) {
                        card1 = self_table._curLaizi - 1;
                        card2 = self_table._curLaizi + 1;
                    }
                    else if (type == PengType.Chi_R) {
                        card2 = self_table._curLaizi - 1;
                        card1 = self_table._curLaizi - 2;
                    }
                } else {
                    if (type == PengType.Chi_L) {
                        card1 = self_table._getChiCardValue(value + 1);
                        card2 = self_table._getChiCardValue(value + 2);
                    }
                    else if (type == PengType.Chi_M) {
                        card1 = self_table._getChiCardValue(value - 1);
                        card2 = self_table._getChiCardValue(value + 1);
                    }
                    else if (type == PengType.Chi_R) {
                        card2 = self_table._getChiCardValue(value - 1);
                        card1 = self_table._getChiCardValue(value - 2);
                    }
                }

                if (MJModel.chi_layout == 0) {
                    if (type == PengType.Chi_L) {
                        values.push(value);
                        values.push(card1);
                        values.push(card2);
                    } else if (type == PengType.Chi_M) {
                        values.push(card1);
                        values.push(value);
                        values.push(card2);
                    } else if (type == PengType.Chi_R) {
                        values.push(card1);
                        values.push(card2);
                        values.push(value);
                    }
                } else {
                    values.push(card1);
                    values.push(value);
                    values.push(card2);
                }
                this.showUI(type, pos, values, index, out_pos, isEnd, OpType, value);
            } else {
                supersetValue.call(this, type, pos, value, index, out_pos, isEnd, OpType);
            }
        };

        ChooseChi.prototype.setChoiceInfos = function (curOperate, curOperateCard) {
            var op_type_v = [];
            var op_cards_v = [];
            var op = curOperate;
            var cur_card = curOperateCard;

            if ((op & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                op_type_v.push(ActionType.TYPE_LEFT_CHI);
            }
            if ((op & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                op_type_v.push(ActionType.TYPE_CENTER_CHI);
            }
            if ((op & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                op_type_v.push(ActionType.TYPE_RIGHT_CHI);
            }

            for (var i = 0; i < op_type_v.length; i++) {
                op_cards_v[i] = [];
                var opType = op_type_v[i];
                //把白板当成癞子的点数使用
                if (cur_card == BaiPan) {
                    if (opType == ActionType.TYPE_LEFT_CHI) {
                        op_cards_v[i].push(cur_card);
                        op_cards_v[i].push(self_table._curLaizi + 1);
                        op_cards_v[i].push(self_table._curLaizi + 2);
                    }
                    else if (opType == ActionType.TYPE_CENTER_CHI) {
                        op_cards_v[i].push(self_table._curLaizi - 1);
                        op_cards_v[i].push(cur_card);
                        op_cards_v[i].push(self_table._curLaizi + 1);
                    }
                    else if (opType == ActionType.TYPE_RIGHT_CHI) {
                        op_cards_v[i].push(self_table._curLaizi - 1);
                        op_cards_v[i].push(self_table._curLaizi - 2);
                        op_cards_v[i].push(cur_card);
                    }
                } else {
                    //把癞子点数显示成白板
                    if (opType == ActionType.TYPE_LEFT_CHI) {
                        op_cards_v[i].push(cur_card);
                        op_cards_v[i].push(self_table._getChiCardValue(cur_card + 1));
                        op_cards_v[i].push(self_table._getChiCardValue(cur_card + 2));
                    }
                    else if (opType == ActionType.TYPE_CENTER_CHI) {
                        op_cards_v[i].push(self_table._getChiCardValue(cur_card - 1));
                        op_cards_v[i].push(cur_card);
                        op_cards_v[i].push(self_table._getChiCardValue(cur_card + 1));
                    }
                    else if (opType == ActionType.TYPE_RIGHT_CHI) {
                        op_cards_v[i].push(self_table._getChiCardValue(cur_card - 2));
                        op_cards_v[i].push(self_table._getChiCardValue(cur_card - 1));
                        op_cards_v[i].push(cur_card);
                    }
                }
            }
            this.showUI(op_type_v, op_cards_v, cur_card);
        };

        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(false);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };

        //去掉出牌按钮
        MJCards.prototype.createOutCardBtn = function () {

        };

        MJCards.prototype.outHandCardEffct2 = function (pos, value) {
            this.addOutCard(pos, value);
            this.reflashHandCard(pos, true, true);
        };


        MJCard.prototype.createTingFlag = function () {
            if (this.tingpai_flag) {
                try {
                    this.tingpai_flag.removeFromParent(true);
                } catch (e) {

                }

                this.tingpai_flag = null;
            }

            var m_size = this.getContentSize();
            this.tingpai_flag = new cc.Sprite(getResPath("nanjingmj/flag/ting.png"));
            this.tingpai_flag.setAnchorPoint(cc.p(0.5, 0));
            this.tingpai_flag.setPosition(cc.p(m_size.width / 2, m_size.height - 23));
            this.tingpai_flag.setVisible(false);
            this.addChild(this.tingpai_flag);
        };

        BigFaceMenu.prototype.getIconsIndexArray = function (seatid) {
            var icons = [1, 3, 7, 8, 18, 19];//需要显示的动画表情
            return icons;
        };

        //显示距离,IP
        PlayerInfo.prototype.updateInfo = function () {
            try {
                var hasnocity = false;
                var hastoonear = false;
                var hasipsame = false;
                var hasnoip = false;
                var playerNums = 4;
                if (MJModel.mj_roomType == 1) {
                    playerNums = 3;
                } else if (MJModel.mj_roomType == 2) {
                    playerNums = 2;
                }
                for (var i = 0; i < playerNums; i++) {
                    var player = MJModel.players[i];
                    var playerData = this.getPlayerData(player.uid);
                    cc.log("playerData:" + JSON.stringify(playerData));
                    var pos = MJModel.getPosBySeatid(i);
                    var playerUI = this.players.getChildByName("player" + pos);
                    var avatar = playerUI.getChildByName("avatar");
                    var name = playerUI.getChildByName("name");
                    var city = playerUI.getChildByName("city");
                    city.stopAllActions();
                    avatar.removeAllChildren();
                    name.setString("");
                    name.ignoreContentAdaptWithSize(true);

                    city.setString("");
                    city.ignoreContentAdaptWithSize(true);
                    if (player.uid <= 0) {
                        city.setString("");
                        var m_pAvatar = new cc.Sprite("Avatars/user4_unlogin.png");
                        m_pAvatar.setScale(85 / m_pAvatar.getContentSize().width, 85 / m_pAvatar.getContentSize().height);
                        avatar.addChild(m_pAvatar);
                    } else {
                        var m_pAvatar = Utils.createCircleAvatar(player.avatar, "Avatars/user4_unlogin.png", "Avatars/user4_unlogin.png"    , cc.size(85, 85));
                        avatar.addChild(m_pAvatar);
                        if (playerData.ip) {
                            city.setString(playerData.ip);
                        } else {
                            city.setString("未检测到IP");
                            hasnoip = true;
                        }

                        if (this.isNoData(playerData)) {
                            hasnocity = true;
                            name.setString(Utils.parseName(6,player.name) + "[未检测到位置]");
                        } else {
                            name.setString(Utils.parseName(6,player.name) + "[" + playerData.city + "]");
                        }
                    }
                }
                var cs = this.julitips.getChildren();
                for (var i in cs) {
                    var tips = cs[i];
                    if (!tips)continue;
                    var name = tips.getName();
                    var ps = name.split("_");
                    var label = tips.getChildByName("num");
                    var s1 = MJModel.getSeatidByPos(parseInt(ps[0]));
                    var s2 = MJModel.getSeatidByPos(parseInt(ps[1]));
                    var p1 = MJModel.players[s1];
                    var p2 = MJModel.players[s2];

                    tips.getChildByName("hong").setVisible(false);
                    tips.getChildByName("lv").setVisible(false);
                    tips.getChildByName("hong").setScaleX(1);
                    tips.getChildByName("lv").setScaleX(1);
                    tips.getChildByName("hong").stopAllActions();
                    tips.getChildByName("lv").stopAllActions();
                    label.setString("");
                    label.ignoreContentAdaptWithSize(true);

                    if (!p1 || !p2 || p1.uid <= 0 || p2.uid <= 0) {
                        continue;
                    }

                    var playerData1 = this.getPlayerData(p1.uid);
                    var playerData2 = this.getPlayerData(p2.uid);

                    if (playerData1.ip && playerData2.ip && playerData1.ip == playerData2.ip){
                        hasipsame = true;
                    }

                    if (this.isNoData(playerData1)) {
                        continue;
                    }

                    if (this.isNoData(playerData2)) {
                        continue;
                    }

                    if (playerData1.city != playerData2.city) {
                        continue;
                    }

                    tips.setVisible(true);
                    var dis = Utils.getDistance(playerData1.latitude, playerData1.longitude, playerData2.latitude, playerData2.longitude);
                    if (dis >= 1000) {
                        var tip = tips.getChildByName("lv");
                        tip.setVisible(true);
                        var dis_f = parseFloat(dis / 1000);
                        label.setString(dis_f.toFixed(1) + "千米");
                        tip.setScaleX((label.getContentSize().width + 20) / tip.getContentSize().width);
                        label.setScaleX(1 / tip.getScaleX());
                    } else {
                        label.setString(dis + "米");
                    }

                    if (dis <= 100) {
                        tips.getChildByName("hong").setVisible(true);
                        //tip.runAction(cc.sequence(cc.moveBy(0.5, cc.p(0, 5)), cc.moveBy(0.5, cc.p(0, -5))).repeatForever());
                        hastoonear = true;
                    } else {
                        tips.getChildByName("lv").setVisible(true);
                    }
                }

                this.warningTip.setVisible(false);
                this.btns["jieshan"].setVisible(false);
                this.btns["continue"].setVisible(false);
                this.warningTip.stopAllActions();
                //hasnocity = false;
                if (hasnocity || hastoonear || hasipsame || hasnoip) {
                    this.warningTip.setVisible(true);
                    this.btns["jieshan"].setVisible(true);
                    this.btns["continue"].setVisible(true);
                    this.warningTip.runAction(cc.sequence(cc.delayTime(1), cc.hide(), cc.delayTime(0.1), cc.show()).repeatForever());
                    this.warningTip.ignoreContentAdaptWithSize(true);
                    var str = "* 发现";
                    if (hastoonear)str += "距离过近";
                    if (hasnocity){
                        if (hastoonear)str += "、";
                        str += "未检测到位置";
                    }
                    if (hasipsame){
                        if (hasnocity || hastoonear)str += "、";
                        str += "IP相同";
                    }
                    if(hasnoip) {
                        if (hasnocity || hastoonear)str += "、";
                        str += "未检测到IP";
                    }
                    str += "的玩家，是否解散？";
                    this.warningTip.setString(str);
                }
                MJModel.mj_table.room_Action.updateGPSTip(hasnocity , hastoonear, hasipsame, hasnoip);
                if(MJModel.mj_table.pre_scene){
                    MJModel.mj_table.pre_scene.updateGPSTip(hasnocity , hastoonear, hasipsame, hasnoip);
                }
            } catch (e) {
                Log(this, "---gps updateInfo error");
            }
        };
    },

    playBgSound: function () {
        if(MJModel.yinyue == "jingkuai"){
            Sound.getInstance().PlayBgSound(getResPath("RoomMJ/sound/csmj1.mp3"));
        }else if(MJModel.yinyue == "suhuan"){
            Sound.getInstance().PlayBgSound(getResPath("RoomMJ/sound/csmj2.mp3"));
        }else {
            Sound.getInstance().PlayBgSound(getResPath("nanjingmj/sound/music_hall.mp3"));
        }
    },
    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.getValue();
            if (typeof b === "object") bv = b.getValue();
            if (av == this._curLaizi && bv != this._curLaizi)return 1;//赖子放在最前边
            if (av != this._curLaizi && bv == this._curLaizi)return -1;//赖子放在最前边
            if(av == BaiPan) av = this._curLaizi;
            if(bv == BaiPan) bv = this._curLaizi;
            return bv - av;
        } catch (e) {
            return 0;
        }
    },
    _getChiCardValue: function (card) {
        if (card == this._curLaizi) {
            return BaiPan;
        }
        return card;
    },
    test: function (dt) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;
        if (tempCount == 5 && true) {
            if (this.pre_scene) {
                this.pre_scene.removeFromParent(true);
                this.pre_scene = null;
            }
            //var cards = [18, 18, 22, 24, 25, 33, 33, 33, 36, 37, 38, 67, 67];
            //for (var i in cards) {
            //    this.room_Card.addOutCard(0, cards[i], false);
            //    this.room_Card.addOutCard(1, cards[i], false);
            //    this.room_Card.addOutCard(2, cards[i], false);
            //    this.room_Card.addOutCard(3, cards[i], false);
            //}
            //
            //
            //return;
            //var packet = {
            //    "gameend": {
            //        "UserCard": [{
            //            "ChangeableCardsLen": 13,
            //            "ChangeableCards": [18, 19, 19, 20, 21, 22, 22, 23, 23, 23, 24, 24, 24],
            //            "FixedCardsLen": 0,
            //            "stFixedCards": []
            //        }, {
            //            "ChangeableCardsLen": 13,
            //            "ChangeableCards": [18, 18, 22, 24, 25, 33, 33, 33, 36, 37, 38, 67, 67],
            //            "FixedCardsLen": 0,
            //            "stFixedCards": []
            //        }, {
            //            "ChangeableCardsLen": 13,
            //            "ChangeableCards": [3, 3, 5, 5, 17, 17, 19, 19, 20, 20, 23, 24, 24],
            //            "FixedCardsLen": 0,
            //            "stFixedCards": []
            //        }, {
            //            "ChangeableCardsLen": 13,
            //            "ChangeableCards": [17, 17, 20, 20, 22, 22, 23, 23, 23, 35, 35, 37, 37],
            //            "FixedCardsLen": 0,
            //            "stFixedCards": []
            //        }],
            //        "Score": [-4, -4, 40, 32],
            //        "EndState": 0,
            //        "EndGangInfo": [{"Gang": [], "TotalGangScore": 0}, {"Gang": [], "TotalGangScore": 0}, {
            //            "Gang": [],
            //            "TotalGangScore": 0
            //        }, {"Gang": [], "TotalGangScore": 0}],
            //        "faninfo": [{
            //            "chairid": 0,
            //            "SpecialType": 0,
            //            "FanNum": 0,
            //            "addfan": [],
            //            "hucard": 0,
            //            "DianPao": []
            //        }, {
            //            "chairid": 1,
            //            "SpecialType": 0,
            //            "FanNum": 0,
            //            "addfan": [],
            //            "hucard": 0,
            //            "DianPao": []
            //        }, {
            //            "chairid": 2,
            //            "SpecialType": 2,
            //            "FanNum": 40,
            //            "addfan": [{"AddType": 112, "AddNum": 2, "AddType2": 1}, {
            //                "AddType": 115,
            //                "AddNum": 2,
            //                "AddType2": 1
            //            }, {"AddType": 113, "AddNum": 8, "AddType2": 1}],
            //            "hucard": 23,
            //            "DianPao": []
            //        }, {"chairid": 3, "SpecialType": 3, "FanNum": 0, "addfan": [], "hucard": 0, "DianPao": []}],
            //        "money": [99996, 99996, 100040, 99968]
            //    }
            //};
            //this.handler_server_game_end_bc(packet);

            var cardlist = [];
            for (var k = 1; k <= 17; k++) {
                var v = Utils.Random(0, 2) * 16 + Utils.Random(1, 9);
                cardlist.push(v);
            }

            this.room_Card.initHandCard(0, cardlist);
            this.room_Card.reflashHandCard(0, true);

            cardlist = [];
            for (var k = 1; k <= 16; k++) {
                var v = Utils.Random(0, 2) * 16 + Utils.Random(1, 9);
                cardlist.push(0);
            }

            this.room_Card.initHandCard(1, cardlist);
            this.room_Card.reflashHandCard(1, true);

            this.room_Card.initHandCard(2, cardlist);
            this.room_Card.reflashHandCard(2, true);

            this.room_Card.initHandCard(3, cardlist);
            this.room_Card.reflashHandCard(3, true);

            //this.room_Card.initMoCard(0, 1, false);
            //this.room_Card.initMoCard(1, 0, false);
            //this.room_Card.initMoCard(2, 0, false);
            //this.room_Card.initMoCard(3, 0, false);

            //for (var i = 1; i < 4; i++) {
            //    this.room_Card.addPengCard(i, PengType.Peng_Peng, 1, 0, 0);
            //    this.room_Card.addPengCard(i, PengType.Peng_AnKang, 1, 0, 0);
            //    this.room_Card.addPengCard(i, PengType.Peng_Kang, 1, 0, 0);
            //    this.room_Card.addPengCard(i, PengType.Peng_Peng, 1, 0, 0);
            //}

            for (var j = 0; j < 4; j++) {
                for (var i = 0; i < 20; i++) {
                    var v = 1;//Utils.Random(0, 2) * 16 + Utils.Random(1, 9);
                    this.room_Card.addOutCard(j, v);
                }
            }

            for (var i = 0; i < 4; i++) {
                for (var j = 0; j < 6; j++) {
                    var v = Utils.Random(0, 2) * 16 + Utils.Random(1, 9);
                    this.room_Card.addHuCard(i, v);
                }
            }
        }
    },

    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.nanjingmj.tagCurGameScence", jpacket);
            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.nanjingmj.AckCurGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_LAIZI_BC) {
            this._handler_server_laizi_bc(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_ROBOT_SER) {
            this._handler_server_tuoguan(jpacket, canDelay);
            return;
        }
        this._super(cmd, jpacket, canDelay, svrid);
    },

    handlerTableInfo: function (data) {
        MJModel.reset();
        this.stopAllActions();
        this.room_Tip.showTextTip("");

        this.resetGame();

        for (var i = 0; i < 4; i++) {
            var mjPlayer = this.players[i];
            mjPlayer.logout();
        }

        var tableInfo = parsePacket("proto.login.AckTableInfo", data);
        Log(this, tableInfo);
        MJModel.seatid = -1;
        ZJHModel.getInstance().mySeatid = -1;

        if (tableInfo.cardPoolNums) MJModel.cardLibNums = tableInfo.cardPoolNums;
        if (tableInfo.game_player != null && tableInfo.game_player != 0) {
            if (tableInfo.game_player == 2)MJModel.mj_roomType = 2;
            if (tableInfo.game_player == 3)MJModel.mj_roomType = 1;
            if (tableInfo.game_player == 4)MJModel.mj_roomType = 0;
            this.room_Info.init();
        }

        if (MJModel.cardLibNums == 64) {

            MJModel.mj_public_nums = [16, 16, 16, 16];

        } else if (MJModel.cardLibNums == 72) {

            MJModel.mj_public_nums = [18, 18, 18, 18];

        } else if (MJModel.cardLibNums == 76) {

            MJModel.mj_public_nums = [20, 18, 20, 18];

        } else if (MJModel.cardLibNums == 96) {

            MJModel.mj_public_nums = [24, 24, 24, 24];

        } else if (MJModel.cardLibNums == 100) {

            MJModel.mj_public_nums = [26, 26, 24, 24];

        } else if (MJModel.cardLibNums == 108) {

            MJModel.mj_public_nums = [28, 26, 28, 26];

        } else if (MJModel.cardLibNums == 112) {

            MJModel.mj_public_nums = [28, 28, 28, 28];

        } else if (MJModel.cardLibNums == 116) {

            MJModel.mj_public_nums = [30, 30, 28, 28];

        } else if (MJModel.cardLibNums == 136) {

            MJModel.mj_public_nums = [34, 34, 34, 34];

        } else if (MJModel.cardLibNums == 144) {

            MJModel.mj_public_nums = [36, 36, 36, 36];

        }

        MJModel.mj_public_sz1 = tableInfo.TouZiInfo[0];
        MJModel.mj_public_sz2 = tableInfo.TouZiInfo[1];
        MJModel.buCardNums = tableInfo.GCrdFrmLstNum;

        MJModel.state = tableInfo.state;

        var len = tableInfo.players.length;


        for (var i = 0; i < len; i++) {
            var seatid = tableInfo.players[i].seatid;
            var uid = tableInfo.players[i].uid;
            if (uid == ZJHModel.getInstance().uid) {
                MJModel.seatid = seatid;
                ZJHModel.getInstance().mySeatid = seatid;
                break;
            }
        }
        if (MJModel.isOnVideo) {
            if (MJModel.seatid == -1 && MJModel.vidoeSeatID == -1)MJModel.seatid = 0;
            if (MJModel.vidoeSeatID != -1)MJModel.seatid = MJModel.vidoeSeatID;
        }

        for (var i = 0; i < len; i++) {
            var seatid = tableInfo.players[i].seatid;
            var player = MJModel.players[seatid];

            player.seatid = seatid;
            player.uid = tableInfo.players[i].uid;
            player.name = tableInfo.players[i].name;
            player.money = tableInfo.players[i].money;
            player.ready = tableInfo.players[i].ready;
            player.sex = tableInfo.players[i].sex;
            player.avatar = tableInfo.players[i].avatar;
            player.start_money = player.money * 2;//乘2 做简单的加密
            if (tableInfo.players[i].GPS) {
                this.checkUpdateGPS(tableInfo.players[i].GPS);
            }
        }

        var roomGolden = tableInfo.roomGolden;
        if (roomGolden > 0) {
            MJModel.take_in = roomGolden;
        }

        if (this._has_check_ip == false) {
            this.checkIpAndDistance();
            this.checkGPSWarning();
        }
        this._has_check_ip = true;

        if (this.pre_scene) this.pre_scene.handler_server_table_info_uc();
    },

    checkIpAndDistance: function () {
        //if (MJModel.mj_gps_type == 1)return;
        var json = {};
        var self = this;
        json.roomId = MJModel.curRoomID;
        CCHttpAgent.getInstance().sendHttpPost(function (tag) {
                var data = CCHttpAgent.getInstance().getPacketData(tag);
                CCHttpAgent.getInstance().popPackets(tag);
                if (data != "") {
                    var recv = null;
                    try {
                        recv = JSON.parse(data);
                        if (recv) {
                            if (recv.status == 200) {
                                if (recv["resultMap"].hasOwnProperty("lookList") && recv["resultMap"]["lookList"].hasOwnProperty("result")) {
                                    var data = recv["resultMap"]["lookList"]["result"];
                                    for (var i = 0; i < data.length; i++) {
                                        self.checkUpdateGPS(data[i]);
                                    }

                                    self.checkGPSWarning();
                                }
                            }
                            else {

                            }
                        }
                    }
                    catch (e) {
                    }
                }
            },
            "duiju/invite/lookList", JSON.stringify(json), "room_all_player");
    },

    checkUpdateGPS: function (gpsdata) {
        if (MJModel.mj_gps_type == 0 || gpsdata == null || gpsdata == undefined)return;
        var player = {};
        var isNew = true;
        var uid = 0;
        for (var i = 0; i < MJModel.gpsData.length; i++) {
            var p = MJModel.gpsData[i];
            if (p.userId == gpsdata.uid || p.userId == gpsdata.userId) {
                player = p;
                isNew = false;
                uid = p.userId;
                break;
            }
        }
        if (isNew){
            if (gpsdata.uid)uid = gpsdata.uid;
            if (gpsdata.userId)uid = gpsdata.userId;
        }
        player.userId = uid;
        if (gpsdata.ip) {
            player.ip = gpsdata.ip;
        } else {
            player.city = gpsdata.city;
            player.latitude = gpsdata.latitude;
            player.longitude = gpsdata.longitude;
        }
        if (isNew)MJModel.gpsData.push(player);
        cc.log("MJModel.gpsData:" + JSON.stringify(MJModel.gpsData));
    },

    checkGPSWarning: function () {
        if (MJModel.isOnVideo)return;
        if (MJModel.mj_gps_type == 0)return;
        if (MJModel.gpsInfo) {
            cc.log("---MJModel.gpsData---: ", JSON.stringify(MJModel.gpsData));
            MJModel.gpsInfo.updateInfo();
            return;
        }

        if (this.room_EndTouPiao) {
            return;
        }

        if (MJModel.hasWarning) {
            return;
        }

        //if (MJModel.gpsData.length == 0) {
        //    try {
        //        MJModel.gpsInfo = new PlayerInfo();
        //        MJModel.gpsInfo.updateInfo();
        //        MJModel.mj_table.addChild(MJModel.gpsInfo, 300000);
        //        MJModel.hasWarning = true;
        //    } catch (e) {
        //        MJModel.gpsInfo = null;
        //    }
        //
        //    return true;
        //}

        var need_warning = false;
        for (var i = 0; i < MJModel.gpsData.length; i++) {
            if (MJModel.gpsData[i].city == null || MJModel.gpsData[i].city == "" || MJModel.gpsData[i].latitude == null || MJModel.gpsData[i].longitude == null) {
                need_warning = true;
                break;
            }
        }

        for (var i = 0; i < MJModel.gpsData.length - 1; i++) {
            for (var j = i + 1; j < MJModel.gpsData.length; j++) {
                if (MJModel.gpsData[i].ip && MJModel.gpsData[j].ip && MJModel.gpsData[i].ip == MJModel.gpsData[j].ip) {
                    need_warning = true;
                    break;
                }
            }
        }

        if (!need_warning){
            for (var i = 0; i < MJModel.gpsData.length - 1; i++) {
                for (var j = i + 1; j < MJModel.gpsData.length; j++) {
                    if (Utils.getDistance(MJModel.gpsData[i].latitude, MJModel.gpsData[i].longitude, MJModel.gpsData[j].latitude, MJModel.gpsData[j].longitude) < 100) {
                        need_warning = true;
                        break;
                    }
                }
            }
        }


        if (need_warning) {
            try {
                MJModel.gpsInfo = new PlayerInfo();
                MJModel.gpsInfo.updateInfo();
                MJModel.mj_table.addChild(MJModel.gpsInfo, 300000);
                MJModel.hasWarning = true;
            } catch (e) {
                MJModel.gpsInfo = null;
            }

            return true;
        }
    },

    _handler_server_tuoguan: function (data, canDelay) {
        var packet = parsePacket("proto.game.nanjingmj.AckRobot", data);
        var chairid = packet.chairid;
        var robot = packet.robot;

        var pos = MJModel.getPosBySeatid(chairid);
        if (this._tuoguanFlag[pos]) {
            this._tuoguanFlag[pos].setVisible(robot);
        }

        if (MJModel.isMyPlayer(chairid)) {
            if (this._tuoguanBtn) {
                this._tuoguanBtn.setVisible(robot);
            }
        }
    },
    handler_server_update_info_uc: function (data, canDelay) {
    },

    handler_server_mo_card_bc: function (data, canDelay) {
        var userGetCard = parsePacket("proto.game.AckUserGetCard", data);
        var seatId = userGetCard.ChairID;
        var card = userGetCard.Card;
        var operate = userGetCard.OpType;
        var operate2 = userGetCard.OpType2;
        var leftCardNum = userGetCard.LeftCardNum;
        var encrypt_code = userGetCard.encrypt_code;
        var fz_type = userGetCard.fz_type;
        var cards = userGetCard.cards;

        var pos = MJModel.getPosBySeatid(seatId);

        //if(fz_type && card == MJModel.mj_table._curLaizi){
        //    MJModel.mj_lockcard_type = 0;
        //}else{
        //    MJModel.mj_lockcard_type = 4;
        //}
        //if(fz_type){
        //    MJModel.mj_lockcard_type = 2;
        //}else{
        //    MJModel.mj_lockcard_type = 4;
        //}
        this._super(data, canDelay);
        this.youjinCard = [];
        if (MJModel.isMyPlayer(seatId)) {
            for (var i = 0; i < cards.length; i++) {
                this.youjinCard.push(cards[i]);
            }
        }
        if (this.room_Action_video) {
            this.room_Action_video.reset();
            this.room_Action_video.setOperator(pos, operate, operate2);
        }
    },

    handler_server_operate_notify_bc: function (data, canDelay) {
        var ackOpNotify = parsePacket("proto.game.AckOpNotify", data);
        var seatid = ackOpNotify.ChairID;
        var cards = ackOpNotify.cards;

        this._super(data, canDelay);

        this.youjinCard = [];
        if (MJModel.isMyPlayer(seatid)) {
            for (var i = 0; i < cards.length; i++) {
                this.youjinCard.push(cards[i]);
            }
        }
    },

    _handler_game_record: function (data, canDelay) {
        //-----新总结算界面
        cc.log("------big End");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var pkgId = this._pkg_id;
        var gameType = "南靖麻将";

        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];
        gameType += " · " + MJModel.base_money + "分底";

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        //var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;

        var max_score = 0;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            if (recoreInfo.totalscore > max_score) {
                max_score = recoreInfo.totalscore;
            }
        }

        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            //var playerRecord = totalRecord.player_records[i];
            var player = MJModel.players[i];
            var arrStr = [];
            //次数
            var arrcount = [];

            arrStr = ["坐庄次数", "胡牌次数", "点炮次数", "超时次数"];
            arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.Ex1, recoreInfo.outtime_num];

            if (player && player.uid != -1 && player.uid != 0) {
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var isWin = false;
                if (max_score > 0 && recoreInfo.totalscore == max_score) {
                    isWin = true;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, isWin, _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner, recoreInfo.dissState);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }
        }
        bigResult.refresh(PlayerNumber);
        this.release();
    },

    handler_server_game_end_bc: function (hubeiGameend, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            var ackGameEnd = hubeiGameend.gameend;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);
            this.room_Info.stopTime();
            this.room_Tip.hideOutCardTip();

            var show_all_handcard = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var show_liuju = cc.callFunc(function () {
                if (ackGameEnd.EndState == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
            });

            var show_end_score = cc.callFunc(function () {
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var update_all_money = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var game_end_reset = cc.callFunc(function () {
                self.room_Action.setReady2Visible(false);
                try {
                    var result = new MJResult_XinYu();
                    result.updateContentView(hubeiGameend);
                    result.setName("reset_remove");
                    self.addChild(result, 100000);
                } catch (e) {
                    cc.log("game end:", e);
                    self.room_Action.setReady2Visible(true);
                }
            });

            var show_all_public_card = cc.callFunc(function () {
                self.gameend_showAllPublicCard(ackGameEnd);
            });

            if (MJModel.isOnVideo && canDelay == false) {
                this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(2), update_all_money));
                return;
            }

            this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(1), show_liuju, cc.delayTime(ackGameEnd.EndState == 1 ? 1 : 0), show_end_score, cc.delayTime(0), update_all_money, cc.delayTime(1), game_end_reset));
        } catch (e) {
            ERROR(this, "handler_server_game_end_bc" + e);
        }
    },

    timeEnd: function (dt) {

        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    },

    handler_server_peng_kang_bc: function (data, canDelay) {
        var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);

        var seatid = ackBcOpResult.ChairID;
        var out_seatid = ackBcOpResult.OutCardChairID;
        var OpType = ackBcOpResult.OpType;
        var OpType2 = ackBcOpResult.OpType2;
        var card = ackBcOpResult.Card;

        var pos = MJModel.getPosBySeatid(seatid);
        var out_pos = MJModel.getPosBySeatid(out_seatid);

        if (MJModel.isMyPlayer(seatid)) {
            if (this.room_Action) this.room_Action.setOperator(-1);
        }

        if (this.room_Action_video) this.room_Action_video.reset();

        if ((OpType & ActionType.TYPE_PASS) != ActionType.TYPE_PASS && (OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG && card == this._curLaizipi) {
            var scores = ackBcOpResult.Score;
            this.handler_gang_scores(scores, OpType, OpType2, canDelay);
            this.room_Card.addPengCard(pos, PengType.Peng_AnKang, card, out_pos, OpType);
            this.room_Card.removeHandCard(pos, card, 3);
            MJModel.cur_seat = seatid;
            this.room_Info.showDirectionTip(pos);
            if (MJModel.isMyPlayer(seatid)) {
                this.myselfOpenOutCard();
            }
            var player = MJModel.players[seatid];
            if (player && canDelay) {
                this.handler_op_sound(pos, player.sex, OpType, OpType2, "");
                this.handler_op_effect(pos, out_pos, player.sex, OpType, OpType2);
            }
            return;
        }
        if ((OpType & ActionType.TYPE_PASS) != ActionType.TYPE_PASS && ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI || (OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI)) {
            var needRemoveOutCard = false;
            var needOpenOutCard = false;
            var t = 0;
            var card1 = 0;
            var card2 = 0;
            if (card == BaiPan) {
                cc.log("要吃的牌是白板");
                if ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                    card1 = this._curLaizi + 1;
                    card2 = this._curLaizi + 2;
                    t = PengType.Chi_L;
                }
                else if ((OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                    card1 = this._curLaizi - 1;
                    card2 = this._curLaizi + 1;
                    t = PengType.Chi_M;
                }
                else if ((OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                    card1 = this._curLaizi - 1;
                    card2 = this._curLaizi - 2;
                    t = PengType.Chi_R;
                }
            } else {
                if ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                    card1 = this._getChiCardValue(card + 1);
                    card2 = this._getChiCardValue(card + 2);
                    t = PengType.Chi_L;
                }
                else if ((OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                    card1 = this._getChiCardValue(card - 1);
                    card2 = this._getChiCardValue(card + 1);
                    t = PengType.Chi_M;
                }
                else if ((OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                    card1 = this._getChiCardValue(card - 1);
                    card2 = this._getChiCardValue(card - 2);
                    t = PengType.Chi_R;
                }
            }
            this.room_Card.addPengCard(pos, t, card, out_pos, OpType);
            this.room_Card.removeHandCard(pos, card1, 1);
            this.room_Card.removeHandCard(pos, card2, 1);

            needRemoveOutCard = true;
            needOpenOutCard = true;

            if (needRemoveOutCard) {
                MJModel.cur_seat = seatid;
                this.room_Card.removeOutCard(out_pos, card, canDelay);
                this.room_Card.setCurCardTip(false);
            }

            if (needOpenOutCard) {
                this.room_Info.showDirectionTip(pos);
                if (MJModel.isMyPlayer(seatid)) {
                    this.myselfOpenOutCard();
                }
            }

            if (MJModel.isMyPlayer(seatid)) {
                if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
                MJModel.isAutoOutCard = false;
                this.room_Card.setAutoOutCard(false);
            }

            var player = MJModel.players[seatid];
            if (player && canDelay) {
                var effect = "chi";
                this.handler_op_sound(pos, player.sex, OpType, OpType2, effect);
                this.handler_op_effect(pos, out_pos, player.sex, OpType, OpType2, effect);
            }
            this.room_Card.reflashHandCard(pos);
            return;
        }
        if((OpType & ActionType.TYPE_PASS) != ActionType.TYPE_PASS && ((OpType & YoujinType.TYPE_YOUJIN) == YoujinType.TYPE_YOUJIN ||
            (OpType & YoujinType.TYPE_SHUANGYOU) == YoujinType.TYPE_SHUANGYOU || (OpType & YoujinType.TYPE_SANYOU) == YoujinType.TYPE_SANYOU)){
            var player = MJModel.players[seatid];
            if (player && canDelay) {
                var effect = "youjin";
                this.handler_op_sound(pos, player.sex, OpType, OpType2, effect);
                this.handler_op_effect(pos, out_pos, player.sex, OpType, OpType2, effect);
            }
            return;
        }
        this._super(data, canDelay);
    },

    _handler_server_laizi_bc: function (data, canDelay) {
        var packet = parsePacket("proto.game.nanjingmj.AckLaiziCard", data);
        var self = this;
        var curLaizi = packet.laizicard;
        this._setLaizi(curLaizi, -1, -1, canDelay ? true : false);
        this.room_Card.removePublicCardByNums(1);
        if (canDelay == false) {
            this._showHandcardFlag(false);
            this.room_Card.reflashHandCard(0, true);
            this.room_Card.reflashHandCard(1, true);
            this.room_Card.reflashHandCard(2, true);
            this.room_Card.reflashHandCard(3, true);
            return;
        }
        MJModel.isEnterWait = true;

        var move_end = cc.callFunc(function () {
            self._showHandcardFlag(false);

            var mo_card = null;
            if (self.room_Card.isDuoPai(0)) {
                mo_card = self.room_Card.hand_card[0][self.room_Card.hand_card[0].length - 1];
                self.room_Card.hand_card[0].splice(self.room_Card.hand_card[0].length - 1, 1);
            }

            var allPreCars = [];
            var allLaiZi = [];
            var dd = 0;

            for (var i = self.room_Card.hand_card[0].length - 1; i >= 0; i--) {
                var card = self.room_Card.hand_card[0][i];
                if (card.getValue() == curLaizi) {
                    allLaiZi.push(card);
                } else {
                    if (allLaiZi.length > 0) {
                        break;
                    }
                    allPreCars.push(card);
                }
            }

            if (allLaiZi.length > 0 && allPreCars.length > 0) {
                var allDelay = 0;
                for (var i = 0; i < allLaiZi.length; i++) {
                    var card = allLaiZi[i];
                    var begin_pos = card.getPosition();
                    var end_pos = MJConfig.getHandCardPos(0, self.room_Card.hand_card[0].length - 1 - i, self.room_Card.hand_card[0].length, self.room_Card.isDuoPai(0));
                    var allL = Math.abs(end_pos.x - begin_pos.x);

                    //if (MJModel.outCardEffect_style == 0 || true) {
                    var time = allL / 1000;
                    if (time < 0.17) time = 0.17;
                    if (time > 0.3) time = 0.3;
                    card.runAction(cc.sequence(cc.spawn(cc.rotateTo(0.1, 15), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + 100))), cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y + 100)).easing(cc.easeSineOut()), cc.spawn(cc.rotateTo(0.1, 0), cc.moveTo(0.17, end_pos))));
                    allDelay += 1;
                }
                for (var i = 0; i < allPreCars.length; i++) {
                    var card = allPreCars[i];
                    //card.runAction(cc.sequence(cc.moveBy(0.3, cc.p(83, 0)), cc.delayTime(1 - 0.3)).repeat(allLaiZi.length));
                    card.runAction(cc.moveBy(0.3, cc.p(83 * allLaiZi.length, 0)));
                }

                var callback = cc.callFunc(function () {
                    MJModel.isEnterWait = false;
                    self.room_Card.reflashHandCard(0, true);
                    if (mo_card) {
                        mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                        self.room_Card.hand_card[0].push(mo_card);
                    }
                });
                self.runAction(cc.sequence(cc.delayTime(0.5), callback));
            } else {
                MJModel.isEnterWait = false;
                self.room_Card.reflashHandCard(0, true);
                if (mo_card) {
                    mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                    self.room_Card.hand_card[0].push(mo_card);
                }
            }
        });
        this.runAction(cc.sequence(cc.delayTime(1), move_end));
    },

    _setGameType: function () {
        var pkg_id = 1;
        var play_id = [];
        //甩字胡不可炮胡
        play_id.push(MJModel.base_money + "分底");

        if (MJModel.RoomConfigID.indexOf(1186001) != -1) {
            play_id.push("超时托管");
        }

            if (MJModel.RoomConfigID.indexOf(1187001) != -1) {
                play_id.push("托管30秒");
            }

            if (MJModel.RoomConfigID.indexOf(1187002) != -1) {
                play_id.push("托管60秒");
            }

            if (MJModel.RoomConfigID.indexOf(1186002) != -1) {
                play_id.push("手动准备");
            }

            if (MJModel.RoomConfigID.indexOf(1186003) != -1) {
                play_id.push("连庄");
            }

            if (MJModel.RoomConfigID.indexOf(1186004) != -1) {
                play_id.push("庄2:闲1");
            }

            if (MJModel.RoomConfigID.indexOf(1186005) != -1) {
                play_id.push("杠不算分");
            }

            MJModel.play_id_str = play_id;

            var gameDes = "";
            for (var i = 0; i < play_id.length; i++) {
                gameDes += play_id[i];
            if (i != play_id.length - 1) {
                gameDes += " ";
            }
        }
        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);
        this._setFastChat();
    },
    fastChat3: [
        "大家多多关照",
        "风水轮流转",
        "手气真差 一把没胡过",
        "快点 墨迹啥 赶紧出牌",
        "你也让我吃个牌 别这么小气",
        "听孤张",
        "吃不到上家",
        "打个来碰",
        "不好意思 刚才接了个电话",
        "赌神在此",
    ],
    _setFastChat: function () {
        var chatList = [];
        chatList = this.fastChat3;
        MJModel.mj_fastChat = this.fastChat3;
        var self = this;
        Utils.getFastChatSound = function (chat, sex) {
            for (var i = 0; i < chatList.length; i++) {
                if (chatList[i] == chat) {
                    return getResPath(__String.createWithFormat("nanjingmj/sound/fastchat/%1_%2.mp3", sex == SEX_ID.SEX_MAN ? "m" : "w", i + 1));
                }
            }
            return "";
        };
    },

    _showLaizi_effect: function (name) {
        ccs.armatureDataManager.addArmatureFileInfo(getResPath("nanjingmj/effect/laizi/effects_mjhunancx.ExportJson"));
        var size = cc.director.getWinSize();
        if (true) {
            var armature = new ccs.Armature("effects_mjhunancx");
            var animation = armature.getAnimation();
            if (animation) {
                if (typeof animation.playWithIndex === "function") {
                    animation.playWithIndex(0, -1, 0);
                    armature.setPosition(cc.p(size.width / 2, size.height / 2));
                    this.addChild(armature, 100);
                    armature.runAction(cc.sequence(cc.delayTime(1.0), cc.removeSelf()));
                }
            }
        }

        //var armature = new ccs.Armature("effects_mjhunancx");
        //var animation = armature.getAnimation();
        //if (animation) {
        //    if (typeof animation.playWithIndex === "function") {
        //        if (name == "赖子") {
        //            animation.playWithIndex(1, -1, 0);
        //        }
        //        if (name == "赖根") {
        //            animation.playWithIndex(2, -1, 0);
        //        }
        //        if (name == "朝天") {
        //            animation.playWithIndex(3, -1, 0);
        //        }
        //        armature.setPosition(cc.p(size.width / 2, size.height / 2 + 150));
        //        this.addChild(armature, 100);
        //        armature.runAction(cc.sequence(cc.delayTime(1.7), cc.removeSelf()));
        //    }
        //}
        Sound.getInstance().playEffect(__String.createWithFormat(getResPath("nanjingmj/sound/laizi.mp3")));
        return armature;
    },
    _setLaizi: function (laizi, laizipi, laizipi2, gamestart) {
        this._curLaizi = laizi;
        this._curLaizipi = laizipi;
        this._curLaizipi2 = laizipi2;

        var size = cc.director.getWinSize();
        if (laizi == null || laizi == undefined || laizi == -1 || laizi == 255) {
            if (this._curLaizi_bg) this._curLaizi_bg.setVisible(false);
            return;
        }
        if (gamestart == undefined) gamestart = false;

        if (this._curLaizi_bg == null) {
            this._curLaizi_bg = new cc.Sprite(getResPath("nanjingmj/flag/laizi_bg3.png"));
            this._curLaizi_bg.setPosition(cc.p(size.width - 220, size.height - 70));
            this.addChild(this._curLaizi_bg, 200);
        }
        this._curLaizi_bg.removeAllChildren();
        this._curLaizi_bg.setVisible(true);

        if (this._curLaizi > 0) {
            var card = new MJCard();
            card.setValue(this._curLaizi, 0, CardType.Card_Out, 0);
            card.setPosition(cc.p(this._curLaizi_bg.getContentSize().width / 2, this._curLaizi_bg.getContentSize().height / 2));
            card.setScale(1);
            //card.setStoreColor(cc.color(255, 249, 137));
            this._curLaizi_bg.addChild(card);
            this.room_Card.other_card.push(card);

            if (gamestart) {
                var dl = 0;
                var ppos = card.getPosition();
                card.setScale(0);
                card.setVisible(false);
                var self = this;
                var callFunc = cc.CallFunc(function () {
                    self._showLaizi_effect("赖子皮");
                });
                card.setPosition(cc.p(size.width / 2 - this._curLaizi_bg.getPositionX() + this._curLaizi_bg.getContentSize().width / 2, size.height / 2 - this._curLaizi_bg.getPositionY() + this._curLaizi_bg.getContentSize().height / 2));
                card.runAction(cc.sequence(cc.delayTime(0 + dl), cc.show(), callFunc, cc.scaleTo(0.1, 2), cc.delayTime(1.0), cc.spawn(cc.moveTo(0.17, ppos), cc.scaleTo(0.17, 1))));
            }
        }
    },

    _showHandcardFlag: function (isEndShow) {
        if (MJModel.isOnVideo) {
            for (var j = 0; j < 4; j++) {
                var allcards = this.room_Card.hand_card[j];
                if (allcards) {
                    for (var i = 0; i < allcards.length; i++) {
                        var card = allcards[i];
                        this._checkAddCardFlag(card);
                    }
                }
            }
            return;
        }
        var allcards = this.room_Card.hand_card[0];
        if (allcards) {
            for (var i = 0; i < allcards.length; i++) {
                var card = allcards[i];
                this._checkAddCardFlag(card);
            }
        }
    },
    _checkAddCardFlag: function (card) {
        try {
            if (card.type == CardType.Card_Outing)return;
            if (card.type == CardType.Card_Peng)return;
            if (card.getValue() == 0)return;
            var flag_str = "";
            if (card.getValue() == this._curLaizi)flag_str = "nanjingmj/flag/lai_flag2.png";
            if (card.getValue() == this._curLaizipi)flag_str = "nanjingmj/flag/laipi_flag2.png";
            if (card.getValue() == this._curLaizipi2)flag_str = "nanjingmj/flag/laipi_flag2.png";
            if (flag_str != "") {
                if (card.getValue() == this._curLaizi)card.setStoreColor(cc.color(255, 249, 137));
                var p = card.getChildByName("sprite");
                p.removeChildByName("laizi_flag");
                var flag = null;

                flag = new cc.Sprite(getResPath(flag_str));

                var m_size = p.getContentSize();
                if (flag) {
                    flag.setPosition(cc.p(0, m_size.height));
                    flag.setAnchorPoint(cc.p(0, 1));
                    flag.setName("laizi_flag");
                    p.addChild(flag);
                    this._flagDirection(card.pos, flag, m_size);
                    flag.setScale(0.5);
                    if (card.pos == 0 && card.type != CardType.Card_Out)flag.setScale(1);
                }
                return;
            }
        } catch (e) {
            Log(this, e);
        }
    },
    //每个方向角标对应
    _flagDirection: function (pos, flag, m_size) {
        if (MJModel.mj_table_view == "2d") {
            if (MJModel.mj_paiban == "vertical" || pos == 2) {
                return;
            }
        }
        if (pos == 1) {
            flag.setPosition(cc.p(0, 15));
            flag.setRotation(-90);
        } else if (pos == 2) {
            flag.setPosition(cc.p(m_size.width, 5));
            flag.setRotation(180);
        } else if (pos == 3) {
            flag.setPosition(cc.p(m_size.width, m_size.height));
            flag.setRotation(90);
        }
    },
    resetGame: function (allClean) {
        this._super(allClean);
        this._setLaizi(-1, -1, -1);
        this.cur_youjinCount = 0;
        this.isSanyou = false;
        MJModel.mj_lockcard_type = 4;
    },
    handler_server_scene_info_uc: function (hubei_scene, canDelay) {
        var ackGameFree = hubei_scene.GameSence;
        var sceneStatus = ackGameFree.SceneStatus;
        var opType2 = ackGameFree.OpType2;
        var cards = hubei_scene.cards;
        var useryjcount = hubei_scene.useryjcount;
        var isguo = hubei_scene.isguo;
        cc.log("LX=======opType2：" + opType2);
        //if(opType2 == 2){
        //    MJModel.mj_lockcard_type = 2;
        //}
        if (ackGameFree.RoomConfigID.indexOf(1366002) != -1) {
            MJModel.take_in = MJModel.take_in - 20 * ackGameFree.basescore;
        }
        if (hubei_scene.laizicard && hubei_scene.laizicard > 0) {
            this._setLaizi(hubei_scene.laizicard, -1, -1, false);
        }

        for (var i = 0; i < cards.length; i++) {
            this.youjinCard.push(cards[i]);
        }

        if((useryjcount & YoujinType.TYPE_YOUJIN) == YoujinType.TYPE_YOUJIN){
            this.cur_youjinCount = 1;
        }
        if((useryjcount & YoujinType.TYPE_SHUANGYOU) == YoujinType.TYPE_SHUANGYOU){
            this.cur_youjinCount = 2;
        }
        if((useryjcount & YoujinType.TYPE_SANYOU) == YoujinType.TYPE_SANYOU){
            this.cur_youjinCount = 3;
            this.isSanyou = true;
        }

        if(isguo){
            if(this.cur_youjinCount == 1){
                MJModel.mj_lockcard_type = 4;
            }else if(this.cur_youjinCount == 2){
                MJModel.mj_lockcard_type = 0;
            }else if(this.cur_youjinCount == 3){
                MJModel.mj_lockcard_type = 0;
            }else if(this.cur_youjinCount == 0){
                MJModel.mj_lockcard_type = 4;
            }
        }else {
            if (this.cur_youjinCount >= 1) {
                MJModel.mj_lockcard_type = 1;
            }else{
                MJModel.mj_lockcard_type = 4;
            }
        }

        this._super(ackGameFree, canDelay);

        //this.myselfOpenOutCard(true);

        this._setGameType();

        var robots = hubei_scene.robots;
        if (robots) {
            for (var i = 0; i < robots.length; i++) {
                var pos = MJModel.getPosBySeatid(i);
                if (this._tuoguanFlag[pos]) {
                    this._tuoguanFlag[pos].setVisible(robots[i]);
                }

                if (pos == 0) {
                    if (this._tuoguanBtn) {
                        this._tuoguanBtn.setVisible(robots[i]);
                    }
                }
            }
        }
    },
    handler_server_game_start_bc: function (data, canDelay) {
        MJModel.roomState = 1;
        this.resetGame(false);
        this.room_Info.setVisible(true);
        if (this.room_Action.actions["yaoqing"]) {
            this.room_Action.actions["yaoqing"].setVisible(false);
        }
        if (this.room_Action.actions["copyshare"]) {
            this.room_Action.actions["copyshare"].setVisible(false);
        }

        if (this.pre_scene) {
            this.pre_scene.removeFromParent(true);
            this.pre_scene = null;
        }

        if (canDelay) this.room_Tip.ShowGameState(1);
        MJModel.state = MJ_STATUS.MJ_GAME_PLAYING;
        var gameStart = parsePacket("proto.game.AckGameStart", data);
        MJModel.banker_seatid = gameStart.ChairID;
        MJModel.mj_public_sz1 = gameStart.TouZiInfo[0];
        MJModel.mj_public_sz2 = gameStart.TouZiInfo[1];

        if (MJModel.mj_roominfo_type == 1 && gameStart.totalcount != null) {
            MJModel.RoomCountSum = gameStart.totalcount;
            MJModel.currentCount = gameStart.currentcount;
        }

        if (canDelay && MJModel.mj_bg_use == 0 && this.room_Card.isSupportPublicCard()) {
            var self = this;
            var show_public_card_effect = cc.callFunc(function () {
                self.room_Info.showPublicCardEffect();
            });

            var show_shaizi_effect = cc.callFunc(function () {
                self.room_Info.showShaiZiEffect();
            });

            var init_public_Card = cc.callFunc(function () {
                self.room_Info.resetPublicCard();
                self.room_Card.initPublicCard();
            });

            var show_Banker = cc.callFunc(function(){
                var pos = MJModel.getPosBySeatid(MJModel.banker_seatid);
                var player = self.players[pos];
                if (player) {
                    player.setBankerFlag(true);
                }
            });

            MJModel.isEnterWait = true;
            var callback2 = cc.callFunc(function () {
                MJModel.isEnterWait = false;
            });
            this.runAction(cc.sequence(show_public_card_effect, cc.delayTime(1.0), show_shaizi_effect, cc.delayTime(0), show_Banker, init_public_Card, cc.delayTime(0), callback2));
        } else {
            this.room_Card.initPublicCard();
            var pos = MJModel.getPosBySeatid(MJModel.banker_seatid);
            var player = this.players[pos];
            if (player) {
                player.setBankerFlag(true);
            }
        }

        //var pos = MJModel.getPosBySeatid(MJModel.banker_seatid);
        //var player = this.players[pos];
        //if (player) {
        //    player.setBankerFlag(true);
        //}

        JsUtils.postNotifi("notify_game_check_end");//为了刷新局数 或者  开始倒计时
    },
    handler_out_card_sound: function (sex, card) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("nanjingmj/sound/chupai/%1_%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", Utils.toHex2(card)));
        } else {
            this._super(sex, card);
        }
    },

    handler_op_sound: function (pos, sex, OpType, OpType2, effect) {
        var isGai = false;
        if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU && effect == "") {
            var zimo = this.room_Card.isDuoPai(pos);
            if (zimo) {
                effect = "zimo";
                isGai = true;
            }
        }
        if((OpType & YoujinType.TYPE_YOUJIN) == YoujinType.TYPE_YOUJIN){
            effect = "youjin";
            isGai = true;
        }
        if((OpType & YoujinType.TYPE_SHUANGYOU) == YoujinType.TYPE_SHUANGYOU){
            effect = "shuangyou";
            isGai = true;
        }
        if((OpType & YoujinType.TYPE_SANYOU) == YoujinType.TYPE_SANYOU){
            effect = "sanyou";
            isGai = true;
        }

        if(isGai){
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("nanjingmj/sound/operator/%1_%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", effect));
        } else {
            this._super(pos, sex, OpType, OpType2, effect);
        }
    },

    handlerAutoUpTableReady: function (nums, selfIsReady) {
        if (MJModel.seatid == -1 && nums < 4) {
            this.actionCallBack("uptable");
        }
        else if (selfIsReady == false) {
            if (MJModel.canQuxiaoZhun()) {
                if (MJModel.roomState != 0) this.actionCallBack("ready");
            } else {
                this.actionCallBack("ready");
            }
        }
    },

    isjieshan:false,
    handler_server_end_room_result_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.AckDisbandResult", data);
        if (this.room_EndTouPiao) this.room_EndTouPiao.removeFromParent(true);
        this.room_EndTouPiao = null;
        MJModel.TouPiaoING = false;
        var result = jpacket.Result;
        if (result == 1) {
            PlatformHelper.showToast("房间解散成功，3秒后房间自动结束");
            this.isjieshan = true;
        }
        else {
            PlatformHelper.showToast("解散失败，稍后游戏继续！");
        }
    },

    handler_game_time_over_bc: function (data, canDelay) {
        if (this.isjieshan)MJModel.state = MJ_STATUS.MJ_GAME_FREE;
        this.startTimeEnd();
        // PlatformHelper.showToast("服务器通知房间结束！");
    },

    handler_op_effect: function (pos, out_pos, sex, OpType, OpType2, effect) {
        this.room_Tip.showEffect(pos, OpType, this.room_Card.isDuoPai(pos));

        // this.room_Tip.showSimpleEffect(pos, out_pos, OpType, effect);
    },
});

var MJResult_XinYu = MJCommonResult.extend({
    updateContentView: function (ackGameEndJS) {
        this.ackGameEnd = ackGameEndJS.gameend;
        this.ackGameEndJS = ackGameEndJS;
        //输赢标志
        var seatId = MJModel.seatid;
        var score = this.ackGameEnd.Score[seatId];
        var effectName = "lose";
        if (score > 0) {
            effectName = "win";
        }
        this._win_effect(effectName);

        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);

        var itemHeight = 120;

        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;

            var countY = m;

            if (MJModel.mj_roomType == 1) {
                if (pos == 2) {
                    continue;
                }
            }

            if (MJModel.mj_roomType == 2) {
                if (pos == 1 || pos == 3) {
                    continue;
                }

                if (pos == 0) {
                    countY = 1;
                } else if (pos == 2) {
                    countY = 2;
                }
            }

            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 495 - count * itemHeight;
            var startX = 40;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX + 60, startY + 55));
            this.bgSpr.addChild(headLayer, 10);

            //上排牌 杠
            var ganghuLayer = this.createGangHuLayer(seatid);
            this.bgSpr.addChild(ganghuLayer, 10);
            ganghuLayer.setPosition(cc.p(startX + 230, startY + 65));

            //下排牌
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX + 0, startY));
            this.bgSpr.addChild(handCardLayer);

            // this.createSpecialHuTip(startX + 785, startY + 40, seatid);
            this.createSpecialHuTip(startX + 1000, startY + 40, seatid);

            // 输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX + 1100, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            //中马列表
            var maLayer = this.createMaLayer(seatid);
            if (maLayer) {
                maLayer.setPosition(cc.p(startX + 845, startY + 85));
                this.bgSpr.addChild(maLayer);
            }
            count++;
        }
    },

    createHandCard: function (seatid) {
        var tagHu = 0;
        //占时注释掉，胡的那张牌

        if (this.ackGameEnd.faninfo.length > seatid) {
            if (this.ackGameEnd.faninfo[seatid].hucard && this.ackGameEnd.faninfo[seatid].hucard != 255) {
                tagHu = this.ackGameEnd.faninfo[seatid].hucard;
            }
        }

        var layer = new cc.Layer();
        var imageView = new ccui.ImageView(getResPath("RoomMJ/result2/item_bg.png"));
        imageView.setPosition(cc.p(0, 0));
        imageView.setAnchorPoint(cc.p(0, 0));
        layer.addChild(imageView);

        var pos = MJModel.getPosBySeatid(seatid);
        if (this.ackGameEnd.UserCard.length > seatid) {
            var x = 230;
            var y = 15;
            var paiSpace = 10;
            var penggangSize = cc.size(88, 40);
            for (var i = 0; i < this.ackGameEnd.UserCard[seatid].FixedCardsLen; i++) {

                var state = this.ackGameEnd.UserCard[seatid].stFixedCards[i].state;
                var card = this.ackGameEnd.UserCard[seatid].stFixedCards[i].CardData;
                var chairID = this.ackGameEnd.UserCard[seatid].stFixedCards[i].chairID;
                var out_pos = MJModel.getPosBySeatid(chairID);

                if (card == undefined || card == null || card == 0) {
                    continue;
                }
                //下排杠牌
                var gangCard = new MJPeng();
                gangCard.setAnchorPoint(cc.p(0.0, 0.0));

                if ((state & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                    gangCard.setValue(PengType.Peng_Peng, pos, card, 0, out_pos, true, state);
                }
                else if ((state & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                    gangCard.setValue(PengType.Peng_AnKang, pos, card, 0, out_pos, true, state);
                }
                else if ((state & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                    gangCard.setValue(PengType.Chi_L, pos, card, 0, out_pos, true, state);
                }
                else if ((state & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                    gangCard.setValue(PengType.Chi_M, pos, card, 0, out_pos, true, state);
                }
                else if ((state & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                    gangCard.setValue(PengType.Chi_R, pos, card, 0, out_pos, true, state);
                }
                else {
                    gangCard.setValue(PengType.Peng_Kang, pos, card, 0, out_pos, true, state);
                }
                gangCard.setScale(0.35);
                gangCard.setPosition(cc.p(x + penggangSize.width/2 , y + penggangSize.height/2));
                layer.addChild(gangCard);

                x += penggangSize.width + 18;

            }

            var is_remove = 0;
            var need_remove = (parseInt(this.ackGameEnd.UserCard[seatid].ChangeableCardsLen % 3) == 2);
            this.hand_card[pos] = [];
            this.ackGameEnd.UserCard[seatid].ChangeableCards.sort(MJModel.mj_table.room_Card.sortCard);
            //牌面信息
            for (var i = this.ackGameEnd.UserCard[seatid].ChangeableCardsLen - 1; i >= 0; i--) {

                //去掉type＝＝1的判断 有些游戏自摸不一定叫自摸 只判断玩家的手牌数量 只要多牌 而且有胡牌数据 就跳过
                if (is_remove == 0 && need_remove && tagHu) {
                    if (this.ackGameEnd.UserCard[seatid].ChangeableCards[i] == tagHu) {
                        is_remove = 1;
                        continue;
                    }
                }
                var handCard = new MJCard();
                handCard.setValue(this.ackGameEnd.UserCard[seatid].ChangeableCards[i], 0, CardType.Card_Hand, 0);
                handCard.setScale(0.45);
                handCard.setAnchorPoint(cc.p(0.0, 0.0));
                handCard.setPosition(cc.p(x , y));
                x += handCard.getBoundingBox().width - 8;
                layer.addChild(handCard);
                this.hand_card[pos].push(handCard);
            }

            //胡的牌
            cc.log("----tagHu---: " + tagHu);
            this.hu_card[pos] = null;
            if (tagHu) {
                //多加一个是否多牌的判断 防止前面又没有跳过 这里又多加的bug
                var huCard = new MJCard();
                huCard.setValue(tagHu, 0, CardType.Card_End, 0);
                huCard.setScale(0.4);
                huCard.setAnchorPoint(cc.p(0.0, 0.0));
                huCard.setPosition(cc.p(x + paiSpace, y));
                layer.addChild(huCard);
                this.hu_card[pos] = huCard;
            }
        }
        this.handCradPos.x = x;
        this.handCradPos.y = y;
        return layer;
    },

    createGangHuLayer: function (seatid) {
        var layer = new cc.Layer();
        var x = 0;
        var y = 0;

        if (this.ackGameEnd.EndGangInfo.length > seatid) {
            var gameEndInfo = this.ackGameEnd.EndGangInfo[seatid];
            var map = {};
            for (var i = 0; i < gameEndInfo.Gang.length; i++) {
                var gang = gameEndInfo.Gang[i];
                if (map[gang.GangType] == undefined) {
                    map[gang.GangType] = [];
                }
                map[gang.GangType].push(gang.GangCard);
            }
            for (var key in map) {
                if (!map.hasOwnProperty(key))continue;
                var a = key;
                var typeLabel = new cc.LabelTTF(this.getStringByType(a), "Arial", 20);
                typeLabel.setColor(this.leftColor);
                typeLabel.setAnchorPoint(cc.p(0, 0));
                typeLabel.setPosition(cc.p(x, y + 10));
                layer.addChild(typeLabel);

                x += typeLabel.getContentSize().width;

                var temp = map[key];
                for (var j = 0; j < temp.length; j++) {
                    var smallCard = null;
                    var c = Utils.toHex2(temp[j]);
                    smallCard = new cc.Sprite(__String.createWithFormat(getResPath("nanjingmj/smallCard/%1.png"), c));
                    if (smallCard != undefined) {
                        smallCard.setAnchorPoint(cc.p(0.0, 0.0));
                        smallCard.setPosition(cc.p(x, y));
                        layer.addChild(smallCard);
                    }
                    x += 28;
                    if (j == temp.length - 1) {
                        x += 20;
                    }
                }
            }
        }
        x += 10;
        //杠牌分
        var gangScore = this.ackGameEnd.EndGangInfo[seatid].TotalGangScore;
        if (gangScore) {
            var txt = "杠牌分  +";
            if (gangScore < 0) {
                txt = "杠牌分  ";
            }
            var gangfen = new cc.LabelTTF(txt + gangScore, "Arial", 22);
            gangfen.setColor(this.leftColor);
            gangfen.setAnchorPoint(cc.p(0, 0));
            gangfen.setPosition(cc.p(x, y + 10));
            layer.addChild(gangfen);
            x += gangfen.getContentSize().width + 10;
        }
        x += 10;
        //分饼分
        if (this.ackGameEndJS.fenbingscore[seatid]) {
            var txt = "分饼分  +";
            if (this.ackGameEndJS.fenbingscore[seatid] < 0) {
                txt = "分饼分  ";
            }
            var fenbingFen = new cc.LabelTTF(txt + this.ackGameEndJS.fenbingscore[seatid], "Arial", 22);
            fenbingFen.setColor(this.leftColor);
            fenbingFen.setAnchorPoint(cc.p(0, 0));
            fenbingFen.setPosition(cc.p(x, y + 10));
            layer.addChild(fenbingFen);
            x += fenbingFen.getContentSize().width + 10;
        }

        if (this.ackGameEndJS.liujufenbing[seatid]) {
            var txt = "流局分饼分  +";
            if (this.ackGameEndJS.liujufenbing[seatid] < 0) {
                txt = "流局分饼分  ";
            }
            var fenbingFen = new cc.LabelTTF(txt + this.ackGameEndJS.liujufenbing[seatid], "Arial", 22);
            fenbingFen.setColor(this.leftColor);
            fenbingFen.setAnchorPoint(cc.p(0, 0));
            fenbingFen.setPosition(cc.p(x, y + 10));
            layer.addChild(fenbingFen);
            x += fenbingFen.getContentSize().width + 10;
        }

        if(MJModel.banker_seatid == seatid && MJModel.RoomConfigID.indexOf(1186004) != -1){
            var bankerStr = "庄家  x2";
            var bankerFan = new cc.LabelTTF(bankerStr, "Arial", 22);
            bankerFan.setColor(this.leftColor);
            bankerFan.setAnchorPoint(cc.p(0, 0));
            bankerFan.setPosition(cc.p(x, y + 10));
            layer.addChild(bankerFan);
            x += bankerFan.getContentSize().width + 10;
        }

        var score = this.ackGameEnd.Score[seatid];
        if(this.ackGameEndJS.lianzhuang && score > 0){
            var liangzhuangStr = "连庄  x2";
            var liangzhuang = new cc.LabelTTF(liangzhuangStr, "Arial", 22);
            liangzhuang.setColor(this.leftColor);
            liangzhuang.setAnchorPoint(cc.p(0, 0));
            liangzhuang.setPosition(cc.p(x, y + 10));
            layer.addChild(liangzhuang);
            x += liangzhuang.getContentSize().width + 10;
        }

        var addfan = this.ackGameEnd.faninfo[seatid].addfan;
        var strPaixing = "";
        if (addfan) {
            for (var i = 0; i < addfan.length; i++) {
                if (AddFanType[addfan[i].AddType]) {
                    strPaixing += AddFanType[addfan[i].AddType];
                    if(i != addfan.length -1){
                        strPaixing += "  ";
                    }
                }
            }
            var fanType = new cc.LabelTTF(strPaixing, "Arial", 30);
            fanType.setColor(this.leftColor);
            fanType.setAnchorPoint(cc.p(0, 0));
            fanType.setPosition(cc.p(620, y + 10));
            layer.addChild(fanType);
            x += fanType.getContentSize().width + 10;
        }

        return layer;
    },

    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var addfan = fanInfo.addfan;
            //判断是否是游金，是游金的话不显示胡牌方式
            var isYoujin = false;
            for(var i = 0; i < addfan.length; i++){
                var curType = addfan[i].AddType;
                if(curType == 1 || curType == 2 || curType == 3){
                    isYoujin = true;
                }
            }
            if(isYoujin)    return;

            var path = "";
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5天和 6地和 7抢杠胡 8杠上开花 9花上添花
            switch (fanInfo.SpecialType) {
                case 1:
                    path = "RoomMJ/result2/zi_mo_icon.png";
                    break;
                case 2:
                    path = "RoomMJ/result2/pao_hu_icon.png";
                    break;
                case 3:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                case 5:
                    path = "RoomMJ/result2/qiang_gang_icon.png";
                    break;
                case 6:
                    path = "nanjingmj/flag/bei_qiang_gang_icon.png";
                    break;
                case 7:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                default:
                    break;
            }
            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setPosition(cc.p(startX, startY));
                this.bgSpr.addChild(typeSprite);

            }
        }
    },
    //输赢分
    createScoreLayer: function (seatid) {
        var layer = new cc.Layer();
        var score = 0;
        if (this.ackGameEnd.Score && this.ackGameEnd.Score.length > seatid) score = this.ackGameEnd.Score[seatid];
        var width = 0;
        var path = getResPath("RoomMJ/result2/result_small_label_lose.png");
        if (score > 0) {
            path = getResPath("RoomMJ/result2/result_small_label_win.png");
        }
        var scoredes = ":";
        if (score == 0 ) scoredes = "" ;
        var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), path, 29, 37, '0');

        scoreLabel.setAnchorPoint(cc.p(0.0, 0.5));

        scoreLabel.setPosition(cc.p(width, 15));
        scoreLabel.setName("scoreLabel");
        layer.addChild(scoreLabel);

        if (Math.abs(score) >= 10000) {
            scoreLabel.setScale(0.8);
        }
        return layer;
    },
});

var sendQuxiaoTuoguan = function () {
    var packet = createPacket("proto.game.nanjingmj.ReqRobot");
    packet.robot = 0;
    sendPacket(packet, selfCMD.CLIENT_ROBOT_REQ);
}

