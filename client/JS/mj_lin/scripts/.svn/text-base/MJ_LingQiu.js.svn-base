loadProtoFile("proto/lingqiu.proto");


var HuType = {
    HU_INVALID: 0,
    HU_ZIMO: 1,
    HU_PAOHU: 2,
    HU_HeiMo: 2,
    Hu_RuanMo: 1,
    HU_DIANPAO: 3,
    HU_BEIZIMO: 4,
    HU_QIANG_GANG: 5,
    HU_BEI_QIANG_GANG: 6,
    HU_YI_PAO_DUO_XIANG: 7,
    HU_GANG_SHANG_HUA: 8,
    HU_GANG_HOU_PAO: 9,
};
var AddFanType = {
    HU_FAN_TYPE_PIHU: 0,          //屁胡
    HU_FAN_TYPE_YITIAOLONG: 1,          //一条龙
    HU_FAN_TYPE_QINGYISE: 2,          //清一色
    HU_FAN_TYPE_FENGYISE: 3,          //风一色
    HU_FAN_TYPE_7DUI: 4,            //7对
    HU_FAN_TYPE_HAOHUA7DUI: 5,          //豪华7对
    HU_FAN_TYPE_BIANKANDIAO: 6,        //边坎吊
    HU_FAN_TYPE_13YAO: 7,            //13幺
};

var AddFanTypeArray = [
    AddFanType.HU_FAN_TYPE_PIHU,          //屁胡
    AddFanType.HU_FAN_TYPE_YITIAOLONG,          //一条龙
    AddFanType.HU_FAN_TYPE_QINGYISE,          //清一色
    AddFanType.HU_FAN_TYPE_FENGYISE,          //风一色
    AddFanType.HU_FAN_TYPE_7DUI,            //7对
    AddFanType.HU_FAN_TYPE_HAOHUA7DUI,          //豪华7对
    AddFanType.HU_FAN_TYPE_BIANKANDIAO,        //边坎吊
    AddFanType.HU_FAN_TYPE_13YAO,            //13幺
];
var ActionTypeLingQiu =
{
    TYPE_MUST_HU: 0x200000,
}
var AddFanNameArray = [
    "屁胡",
    "一条龙",
    "清一色",
    "风一色",
    "7对",
    "豪华7对",
    "边坎吊",
    "13幺",
];

var selfCMD = {
    SERVER_Laizi_BC: 5029,   //赖子
    SERVER_Start_Piao: 5024,  //广播结果
    SERVER_AckBroadChooseResult: 5086,  //广播结果
    SERVER_AckBroadChoose: 5022,             //广播选票
    CLENT_ReqChoosePiao: 1108,           //选票请求
};

var MJTable_LingQiu = MJTable.extend({
    tag: "MJTable_LingQiu",
    _curLaizi: -1,
    _curLaizipi: -1,
    _curLaizipi2: -1,
    _curLaizi_bg: null,
    isRecordShow: false,
    _pkg_id: 0,
    maxQuan: 1,
    _huaCard: [[], [], [], []],
    isForceTing: false,
    _huaValues: [],
    _piaoWaitLayer: null,
    _piaoLayer: null,
    _piaoState: [0, 0, 0, 0],
    _piaoResult: [],
    _isJieSan: false,
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        MJModel.mj_suport_fangyan = 0;
        MJModel.outCardEffect_style = 1;

        MJModel.mj_bg_use = 1;
        MJModel.mj_suport_change_bg = 1;
        MJModel.toupiaoTipsType = 1;
        MJModel.chi_layout = 3;
        MJModel.mj_touch_tip = 1;
        MJModel.isOutCard = true;
        MJModel.mj_chat_style = 5;
        MJModel.mj_public_style = 1;
        MJModel.mj_card_lib_type = 1;

        MJModel.mj_gps_type = 1;
        MJModel.mj_double_click_style = 1;

        MJModel.mj_font = "jianjie";
        MJModel.mj_fontSize = "dahao";
        MJModel.mj_style = "shishang";
        MJModel.yinyue = "jingdian";
        MJModel.mj_table_view = "2d";
        MJModel.has_hu_layout = 0;
        MJModel.shareType = 1;
        MJModel.needTipWhenPass = 1;
        MJModel.danjichupai = 0;
        MJModel.isSupportOnlineYaoqing = false;
        this.isForceTing = false;
        this._huaValues = [0x41, 0x42, 0x43, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x60];
        this.mj_roomType = 0;
        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];

            MJModel.mj_roomType = 0;
            this.mj_roomType = 0;
            if (this._pkg_id == 3329 || this._pkg_id == 3159) { //4人
                MJModel.mj_roomType = 0;
                this.mj_roomType = 0;
            }
            if (this._pkg_id == 3330 || this._pkg_id == 3160) { //3人
                MJModel.mj_roomType = 1;
                this.mj_roomType = 1;
            }
            if (this._pkg_id == 3331 || this._pkg_id == 3161) { //2人
                MJModel.mj_roomType = 2;
                this.mj_roomType = 2;
            }
        } catch (e) {
            Log(this, e);
        }

        var danjichupai = cc.sys.localStorage.getItem("danjichupai");
        if (danjichupai) MJModel.danjichupai = danjichupai;

        this._init_extend();
        this._super();
        this._update_action();
        //this.schedule(this.test, 1.0);
    },
    _update_action: function () {
        var more = this.room_Action.btns["more"];
        this.addLabel(more, "设置");
        var chat = this.room_Action.btns["chat"];
        this.addLabel(chat, "聊天");
        var sound = this.room_Action.btns["sound"];
        this.addLabel(sound, "语音");
        var tingpai = this.room_Action.btns["tingpai"];
        sound.setPositionY(chat.getPositionY() - 100);
        tingpai.setPositionY(sound.getPositionY() - 100);

        this.room_Action.opBtns = [];
        this.room_Action.opBtns.push(this.room_Action.actions["pass"]);
        this.room_Action.opBtns.push(this.room_Action.actions["chi"]);
        this.room_Action.opBtns.push(this.room_Action.actions["peng"]);
        this.room_Action.opBtns.push(this.room_Action.actions["gang"]);
        this.room_Action.opBtns.push(this.room_Action.actions["hu"]);

    },
    addLabel: function (parent, name) {
        var size = parent.getContentSize();
        var label = new cc.LabelTTF(name, "Arial", 22);
        label.setAnchorPoint(cc.p(0.5, 1));
        label.setColor(cc.color(239, 190, 96));
        label.setPosition(cc.p(size.width * 0.5, 20));
        parent.addChild(label);
    },
    getMjTypePath: function () {
        return getResPath("lingqiu/mj_type_1113.png");
    },

    updateBg: function (isInit) {
        if (isInit == undefined)isInit = false;
        var size = cc.director.getWinSize();
        if (this.bg == null) {
            this.bg = new ccui.ImageView(getResPath(this.getBgStr()));
            this.bg.setAnchorPoint(cc.p(0.5, 0.5));
            this.bg.setContentSize(size);
            this.bg.setScale9Enabled(true);
            this.bg.setPosition(size.width / 2, size.height / 2);
            this.addChild(this.bg, -100);
        } else {
            this.bg.loadTexture(getResPath(this.getBgStr()));
        }
        //简洁版本的幺鸡牌换了
        if (this.isNewCards()) {
            Utils.addCardSprites(__String.createWithFormat("lingqiu/cards/jianjie_dahao_2d_debug"));
        } else {
            Utils.addCardSprites(__String.createWithFormat("RoomMJ/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));
        }

        if (MJModel.mj_roomType == 2) {
            if (this.isNewCards()) {
                this.loadCardConfig("lingqiu/configs/card_config2d_2ren.json");
            } else {
                this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config_2ren.json" : "RoomMJ/config/card_config2d_2ren.json");
            }
        } else {
            if (this.isNewCards()) {
                this.loadCardConfig("lingqiu/configs/card_config2d.json");
            } else {
                this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config.json" : "RoomMJ/config/card_config2d.json");
            }
        }

        if (isInit)return;

        this.room_Card.reflashAllCardUI();
        for (var i = 0; i < 4; i++) {
            this.players[i].setPosition(MJConfig.getPlayerPos(i));
            this.players[i].reflashNameMoneyPosition();
        }
        if (this.room_Info)this.room_Info.reflash();
    },

    isNewCards: function () {
        if (MJModel.mj_font == "jianjie" && MJModel.mj_fontSize == "dahao" && MJModel.mj_table_view == "2d" && MJModel.mj_paiban == "horizontal") {
            return true;
        }
        return false;
    },

    onEnter: function () {
        this._super();
    },

    isSupportPublicCard: function () {
        return false;
    },

    initUtils: function () {
        //分享战绩至各个平台
        Utils.shareJieSuanToOtherApp = function (layer, appType) {
            require("club/scripts/clubUtils/ClubMatchUtils.js");
            var self = layer;
            var size = self.getContentSize();
            if (self.btns["share"])self.btns["share"].setVisible(false);
            if (self.btns["continue"])self.btns["continue"].setVisible(false);
            var anchorPoint = self.getAnchorPoint();
            self.setAnchorPoint(cc.p(0, 0));
            var scale = 1.0;
            self.setScale(scale);
            var renderTexture = new cc.RenderTexture(size.width * scale, size.height * scale, cc.Texture2D.PIXEL_FORMAT_RGBA8888);
            renderTexture.beginWithClear(255, 255, 255, 255);
            self.visit();
            renderTexture.end();
            renderTexture.saveToFile("record.jpg", cc.IMAGE_FORMAT_JPEG, false, function (text, path) {
                self.setScale(1);
                self.setAnchorPoint(anchorPoint);
                if (self.btns["share"])self.btns["share"].setVisible(true);
                if (self.btns["continue"])self.btns["continue"].setVisible(true);

                if (!MJModel.mj_table._isJieSan) {
                    self.runAction(cc.sequence(cc.delayTime(0.5), cc.removeSelf()));
                    sendReady();
                    MJModel.state = MJ_STATUS.MJ_GAME_FREE;
                }

                ClubMatchUtils.shareToOtherApp("", "", "", path, "", "", "image", appType, "");
            });
        };
        //分享战绩至各个平台
        Utils.shareRecordToOtherApp = function (layer, appType) {
            require("club/scripts/clubUtils/ClubMatchUtils.js");
            var self = layer;
            var size = self.getContentSize();
            if (self.btns["copy"])self.btns["copy"].setVisible(false);
            if (self.btns["sharezhanji"])self.btns["sharezhanji"].setVisible(false);
            if (self.btns["sharelink"])self.btns["sharelink"].setVisible(false);
            var anchorPoint = self.getAnchorPoint();
            self.setAnchorPoint(cc.p(0, 0));
            var scale = 1.0;
            self.setScale(scale);
            var renderTexture = new cc.RenderTexture(size.width * scale, size.height * scale, cc.Texture2D.PIXEL_FORMAT_RGBA8888);
            renderTexture.beginWithClear(255, 255, 255, 255);
            self.visit();
            renderTexture.end();
            renderTexture.saveToFile("record.jpg", cc.IMAGE_FORMAT_JPEG, false, function (text, path) {
                self.setScale(1);
                self.setAnchorPoint(anchorPoint);
                if (self.btns["copy"])self.btns["copy"].setVisible(true);
                if (self.btns["sharezhanji"])self.btns["sharezhanji"].setVisible(true);
                if (self.btns["sharelink"])self.btns["sharelink"].setVisible(true);
                ClubMatchUtils.shareToOtherApp("", "", "", path, "", "", "image", appType, "");
            });
        };
    },
    initMJDialogs: function () {
        //@param appType 1微信 2支付宝 3钉钉 4闲聊 5乡聊
        var super_shareList_actionCallBack = ShareList.prototype.actionCallBack;
        ShareList.prototype.actionCallBack = function (btn) {
            if (this.sharetype == 3) {
                this.removeFromParent(true);
                var self = this;
                var name = btn.getName();
                var tag = btn.getTag();
                Utils.shareJieSuanToOtherApp(this.bigresult, tag);
                return;
            } else {
                super_shareList_actionCallBack.call(this, btn);
            }
        };

        CommonTotalResult.prototype.addRoomconfig = function () {
            var size = cc.director.getWinSize();
            var play_id = MJModel.play_id_str;
            var gameDes = "";
            for (var i = 0; i < play_id.length; i++) {
                gameDes += play_id[i];
                if (i != play_id.length - 1) {
                    gameDes += " ";
                }
            }
            var y = this.rootNode.getChildByName("time_end").getPositionY() - 15;
            var x = this.rootNode.getChildByName("roomName").getPositionX();
            var configLabel = new cc.LabelTTF(gameDes, "Arial", 25);
            configLabel.setAnchorPoint(cc.p(0, 0.5));
            configLabel.setColor(cc.color(189, 151, 108));
            configLabel.setPosition(cc.p(x, y));
            this.rootNode.addChild(configLabel);
        };

        CommonTotalResult.prototype.refreshLabel = function () {
            var scale = 1.2;
            var time_begin = this.rootNode.getChildByName("time_begin");
            var time_end = this.rootNode.getChildByName("time_end");
            time_begin.setPositionX(time_begin.getPositionX() - 50);
            time_end.setPositionX(time_end.getPositionX() - 50);

            var roomName = this.rootNode.getChildByName("roomName");
            var roomCode = this.rootNode.getChildByName("roomCode");
            var jushu = this.rootNode.getChildByName("jushu");

            time_begin.setScale(scale);
            time_end.setScale(scale);
            jushu.setScale(scale);
            roomCode.setScale(scale);
            roomName.setScale(scale);
        };

        Setting.prototype.initUI = function () {
            var uiJson = ccs.load(getResPath("lingqiu/public/setting.json"));
            var uiNode = uiJson.node;
            var self = this;
            var size = cc.director.getWinSize();
            var bg = uiNode.getChildByName("bg");
            bg.removeFromParent();
            bg.setPosition(size.width / 2, size.height / 2);
            this.addChild(bg);
            this._bg = bg;
            this._settingLayer = bg.getChildByName("setting");
            this._gameSettingLayer = bg.getChildByName("gamesetting");

            //init button
            {
                var btns_node = bg.getChildByName("btns");
                var cs = btns_node.getChildren();
                for (var i in cs) {
                    var btn = cs[i];
                    if (btn) {
                        btn.addClickEventListener(function (sender, evt) {
                            self.btnsCallBack(sender);
                        });
                        this.btns[btn.getName()] = btn;
                    }
                }
            }
            this.initSetting();
            this.initGameSetting();
            this.showPaiBanView(false);
        };

        Setting.prototype.initSetting = function () {
            var self = this;
            //init slider
            {
                var btns_node = this._settingLayer.getChildByName("slider");
                var cs = btns_node.getChildren();
                for (var i in cs) {
                    var btn = cs[i];
                    if (btn) {
                        btn.addEventListener(function (slider, event) {
                            self.setting_slidersCallBack(slider, event);
                        });

                        if (btn.getName() == "yinxiao") {
                            btn.setPercent(ZJHModel.getInstance().sound * 100);
                        }

                        if (btn.getName() == "yinyue") {
                            btn.setPercent(ZJHModel.getInstance().bgMusic * 100);
                        }
                    }
                }
            }

            //init checkboxs
            {
                var btns_node = this._settingLayer.getChildByName("checkbox");
                var cs = btns_node.getChildren();
                for (var i in cs) {
                    var btn = cs[i];
                    if (btn) {
                        btn.addEventListener(function (slider, event) {
                            self.setting_selectedStateEvent(slider, event);
                        });
                        this.checkboxs_setting[btn.getName()] = btn;
                    }

                    btn.setEnabled(true);
                    btn.setSelected(false);

                    if (btn.getName().indexOf(MJModel.fangyan) != -1) {
                        btn.setSelected(true);
                        btn.setEnabled(false);
                    }

                    if (btn.getName().indexOf(MJModel.yinyue) != -1) {
                        btn.setSelected(true);
                        btn.setEnabled(false);
                    }

                }
            }

            this.checkboxs_setting["zhendong"].setSelected(ZJHModel.getInstance().vibrate == 1);
            this.checkboxs_setting["hudong"].setSelected(MJModel.hudong == 1);
            this.checkboxs_setting["danjichupai"].setSelected(MJModel.danjichupai == 1);

            this.doSupportFangYan();
            this.doSupportYinYue();

        };


        Setting.prototype.setting_selectedStateEvent = function (sender, type) {
            var name = sender.getName();
            switch (type) {
                case  ccui.CheckBox.EVENT_UNSELECTED:
                    if (name == "zhendong") {
                        cc.sys.localStorage.setItem("vibrate", 0);
                        ZJHModel.getInstance().vibrate = 0;
                        JsUtils.postNotifi("save_setting");
                    }
                    else if (name == "hudong") {
                        cc.sys.localStorage.setItem("hudong", 0);
                        MJModel.hudong = 0;
                    } else if (name == "danjichupai") {
                        cc.sys.localStorage.setItem("danjichupai", 0);
                        MJModel.danjichupai = 0;
                        JsUtils.postNotifi("save_setting");
                    }
                    break;

                case ccui.CheckBox.EVENT_SELECTED:
                    if (name.indexOf("fangyan_") != -1) {
                        for (var i in this.checkboxs_setting) {
                            var btn = this.checkboxs_setting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("fangyan_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        MJModel.fangyan = name.split("_")[1];
                        cc.sys.localStorage.setItem("mj_fangyan", MJModel.fangyan);
                    }
                    else if (name.indexOf("yinyue_") != -1) {
                        for (var i in this.checkboxs_setting) {
                            var btn = this.checkboxs_setting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("yinyue_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        MJModel.yinyue = name.split("_")[1];
                        cc.sys.localStorage.setItem("mj_yinyue", MJModel.yinyue);
                        MJModel.mj_table.reflashBgMusic();
                    }
                    else if (name == "zhendong") {
                        cc.sys.localStorage.setItem("vibrate", 1);
                        ZJHModel.getInstance().vibrate = 1;
                        JsUtils.postNotifi("save_setting");
                    }
                    else if (name == "hudong") {
                        cc.sys.localStorage.setItem("mj_hudong", 1);
                        MJModel.hudong = 1;
                    } else if (name == "danjichupai") {
                        cc.sys.localStorage.setItem("danjichupai", 1);
                        MJModel.danjichupai = 1;
                        JsUtils.postNotifi("save_setting");
                    }
                    break;

                default:
                    break;
            }
        };


        Setting.prototype.gamesetting_selectedStateEvent = function (sender, type) {
            var name = sender.getName();
            switch (type) {
                case  ccui.CheckBox.EVENT_UNSELECTED:
                    break;

                case ccui.CheckBox.EVENT_SELECTED:
                    if (name.indexOf("fontSize_") != -1) {
                        for (var i in this.checkboxs_gamesetting) {
                            var btn = this.checkboxs_gamesetting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("fontSize_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        this.mj_fontSize = name.split("_")[1];
                    }
                    else if (name.indexOf("font_") != -1) {
                        for (var i in this.checkboxs_gamesetting) {
                            var btn = this.checkboxs_gamesetting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("font_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        this.mj_font = name.split("_")[1];
                    }
                    else if (name.indexOf("style_") != -1) {
                        for (var i in this.checkboxs_gamesetting) {
                            var btn = this.checkboxs_gamesetting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("style_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        this.mj_style = name.split("_")[1];
                    }
                    else if (name.indexOf("light_") != -1) {
                        for (var i in this.checkboxs_gamesetting) {
                            var btn = this.checkboxs_gamesetting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("light_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        this.mj_light = name.split("_")[1];
                    }
                    else if (name.indexOf("paiban_") != -1) {
                        for (var i in this.checkboxs_gamesetting) {
                            var btn = this.checkboxs_gamesetting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("paiban_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        this.mj_paiban = name.split("_")[1];
                    }
                    else if (name.indexOf("table_") != -1) {
                        for (var i in this.checkboxs_gamesetting) {
                            var btn = this.checkboxs_gamesetting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("table_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        this.mj_table_view = name.split("_")[1];
                        this.showPaiBanView(false);
                    }
                    break;

                default:
                    break;
            }
        };
    },
    initMJPlayer: function () {
        MJPlayer.prototype.addPiaoIcon = function (pos, state) {
            this.removeChildByName("lingqiu_piao");
            var piaoSpr = new cc.Sprite(__String.createWithFormat(getResPath("lingqiu/flag/icon_fang_%1.png"), state));
            piaoSpr.setName("lingqiu_piao");
            piaoSpr.setAnchorPoint(cc.p(0.5, 0.5));
            piaoSpr.setPosition(cc.p(this.m_size.width / 2, 110));
            if (pos == 2) {
                piaoSpr.setPosition(cc.p(this.m_size.width + 10, this.m_size.height / 2));
            }
            this.addChild(piaoSpr, 100);
        };
    },
    initMJVideo: function () {
        var super_mjvideo_ctor = MJVideo.prototype.ctor;
        MJVideo.prototype.ctor = function () {
            super_mjvideo_ctor.call(this);
            MJModel.roomCode = this.room_code;
        };
    },
    initMJPreTable: function () {
        var super_mjpretable_ctor = MJPreTable.prototype.ctor;
        MJPreTable.prototype.ctor = function () {
            super_mjpretable_ctor.call(this);
            var more = this.btns["more"];
            this.addLabel(more, "设置");
            var chat = this.btns["chat"];
            this.addLabel(chat, "聊天");
            var sound = this.btns["sound"];
            this.addLabel(sound, "语音");

            sound.setPositionY(chat.getPositionY() - 100);

            var yaoqing = this.btns["yaoqing"];
            var yaoqingPos = yaoqing.getPosition();

            yaoqingPos.x = yaoqingPos.x - 265;

            var self = this;
            var parent = yaoqing.getParent();
            {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("lingqiu/action/btn_qinyaoqing.png"), getResPath("lingqiu/action/btn_qinyaoqing.png"), "");
                parent.addChild(btn);
                btn.setName("qinyaoqing");
                btn.addClickEventListener(function (sender, evt) {
                    require("club/scripts/clubUtils/ClubScene.js");
                    ClubScene.showInviteDialog(0.66);
                });
                this.btns[btn.getName()] = btn;
                btn.setPosition(yaoqingPos);
            }

            var yaoqing = this.btns["yaoqing"];
            var qinyaoqing = this.btns["qinyaoqing"];
            var copyshare = this.btns["copyshare"];
            var ready = this.btns["ready"];
            var x = ready.getPositionX();
            var y = ready.getPositionY();
            var offx = 270;
            var offy = 85;
            if (yaoqing)yaoqing.setPosition(x, y - offy);
            if (qinyaoqing)qinyaoqing.setPosition(x - offx, y - offy);
            if (copyshare)copyshare.setPosition(x + offx, y - offy);
            if (ready)ready.setPosition(x, y + 25);

        };
        MJPreTable.prototype.addLabel = function (parent, name) {
            var size = parent.getContentSize();
            var label = new cc.LabelTTF(name, "Arial", 22);
            label.setAnchorPoint(cc.p(0.5, 1));
            label.setColor(cc.color(239, 190, 96));
            label.setPosition(cc.p(size.width * 0.5, 20));
            parent.addChild(label);
        };

        MJPreTable.prototype.showSelectMode = function (pos, mode) {
            try {
                this.removeChildByName("select_mode_" + pos);
                if (mode != 2 && mode != 3)return;
                var cur_p = 0;
                for (var i = 0; i < MJModel.Play_num; i++) {
                    if (MJModel.players[i].uid > 0)cur_p++;
                }
                if (mode != cur_p)return;
                var scale = 1.5;
                var p_pos = this.getPlayerPos(pos);
                p_pos.y = p_pos.y - 10 * scale;
                var sx = 1;
                var sy = 1;

                var tip = new cc.Sprite(getResPath("RoomMJ/shaorenmoshi/tip_bg.png"));
                tip.setScaleX(pos == 1 ? -scale : scale);
                tip.setScaleY(scale);
                tip.setName("select_mode_" + pos);
                if (pos == 1)p_pos.x -= tip.getContentSize().width * scale;
                tip.setPosition(p_pos);
                tip.setAnchorPoint(cc.p(pos == 1 ? 1 : 0, 0));
                this.addChild(tip, 1000);

                var mode_2 = new cc.Sprite(getResPath("RoomMJ/shaorenmoshi/tip_" + mode + ".png"));
                mode_2.setPosition(tip.getContentSize().width / 2, tip.getContentSize().height / 2);
                mode_2.setName("mode");
                mode_2.setScaleX(pos == 1 ? -1 : 1);
                tip.addChild(mode_2);
            } catch (e) {
                Log(this, e);
            }
        };
    },

    initMJTips: function () {
        MJTips.prototype.showOutCardTip = function () {
            try {
                if (this._curOutCardTip == null) {
                    var size = cc.director.getWinSize();
                    this._curOutCardTip = new cc.Sprite(getResPath("RoomMJ/out_card_tip.png"));
                    this._curOutCardTip.setVisible(false);
                    this._curOutCardTip.setPosition(cc.p(size.width - 181, 132));
                    this._curOutCardTip.setAnchorPoint(cc.p(0.8, 0));
                    this.addChild(this._curOutCardTip, 100000);

                    //var tf = new cc.LabelTTF("到你出牌咯！", "Thonburi", 45);
                    //tf.setPosition(cc.p(this._curOutCardTip.getContentSize().width / 2, this._curOutCardTip.getContentSize().height / 2 + 5));
                    //tf.setColor(cc.color(78, 45, 32));
                    //this._curOutCardTip.addChild(tf);
                }
                if (!this._curOutCardTip.isVisible()) {
                    this._curOutCardTip.setVisible(false);
                    // this._curOutCardTip.runAction(cc.sequence(cc.scaleTo(0.1, 1), cc.delayTime(0.5), cc.scaleTo(0.17, 0), cc.hide()));
                    this._curOutCardTip.runAction(cc.sequence(cc.delayTime(5), cc.show(), cc.scaleTo(0.1, 1), cc.delayTime(0.5), cc.scaleTo(0.17, 0), cc.hide()));
                }
            } catch (e) {
                this._curOutCardTip = null;
            }
        };
    },
    _init_extend: function () {
        this.initMJTips();
        this.initMJVideo();
        this.initMJCard();
        this.initMJPublic();
        this.initMJConfig();
        this.initMJAction();
        this.initMJInfo();
        this.initUtils();
        this.initMJDialogs();
        this.initMJPlayer();
        this.initMJPreTable();
        var self_table = this;

        MJCards.prototype.sortCard = function (a, b) {
            return self_table._sortCard(a, b);
        };

        //var super_mjcards_checkCardSafe = MJCards.prototype.checkCardSafe;
        //MJCards.prototype.checkCardSafe = function (md5s, pos) {
        //    return;
        //    super_mjcards_checkCardSafe.call(md5s, pos);
        //};

        MJCard.prototype.check_addFlag = function () {
            self_table._checkAddCardFlag(this);
        };

        //湖北麻将不要自动胡牌功能
        MJAction.prototype.setAutoOutCardVis = function (value) {
        };

        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(false);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };


        //去掉出牌按钮
        MJCards.prototype.createOutCardBtn = function () {

        };

        MJCard.prototype.createTingFlag = function () {
            if (this.tingpai_flag) {
                try {
                    this.tingpai_flag.removeFromParent(true);
                } catch (e) {

                }

                this.tingpai_flag = null;
            }

            var m_size = this.getContentSize();
            this.tingpai_flag = new cc.Sprite(getResPath("lingqiu/flag/ting.png"));
            this.tingpai_flag.setAnchorPoint(cc.p(0.5, 0));
            this.tingpai_flag.setPosition(cc.p(m_size.width / 2, m_size.height - 23));
            this.tingpai_flag.setVisible(false);
            this.addChild(this.tingpai_flag);
        };

        var super_TingPaiLayer_getCardNums = TingPaiLayer.prototype.getCardNums
        TingPaiLayer.prototype.getCardNums = function (vv, sver_num) {
            var num = super_TingPaiLayer_getCardNums.call(this, vv, sver_num);
            if (vv == self_table._curLaizi) {
                num = num - 1;
            }
            return num;
        };
    },
    initMJInfo: function () {
    },
    initMJCard: function () {
        var self_table = this;
        var super_addOutCard = MJCards.prototype.addOutCard;
        MJCards.prototype.addOutCard = function (pos, value, showPoint) {
            if (self_table.isHuaValue(value)) {
                var card = this.addHuCard(pos, value);
                return card;
            } else {
                return super_addOutCard.call(this, pos, value, showPoint);
            }
        };

        MJCards.prototype.getFapaiTmpCard = function (pos, index, position) {
            var card = new MJCard();
            card.setValue(0, pos, CardType.Card_Hand, index);
            card.setMyPosition(position);
            return card;
        };

        var super_setSomeCardClickState = MJCards.prototype.setSomeCardClickState;
        MJCards.prototype.setSomeCardClickState = function () {
            super_setSomeCardClickState.call(this);
            for (var i = 0; i < this.hand_card[0].length; i++) {
                var card = this.hand_card[0][i];
                if (card.getValue() == self_table._curLaizi) {
                    card.setCardTouchEnable(false);
                }
            }
        };
        MJCards.prototype.clickHandCardCallback = function (n) {
            if (MJModel.canTouchCard == false) {
                return;
            }
            var card = n;
            if (MJModel.canChoiceMore) {
                this.doChoiceMoreCard(card);
                return;
            }

            var preCard = null;

            for (var i = 0; i < this.hand_card[0].length; i++) {
                var fcard = this.hand_card[0][i];
                if (fcard) {
                    if (fcard.isUp) preCard = fcard;
                    fcard.setUp(false);
                }
            }

            if (this.outCardBtn) this.outCardBtn.setVisible(false);

            var isDanjiChupai = true;
            for (var i = 0; i < MJModel.listen_info.length; i++) {
                var tli = MJModel.listen_info[i];
                if (card.getValue() == tli.OutCard) {
                    isDanjiChupai = false;
                }
            }

            if (isDanjiChupai && self_table.isDanJiChuPai()) {
                this.outHandCardCallback(n);
                return;
            }
            if (preCard && preCard == card) {
                if (MJModel.mj_double_click_style == 1)this.outHandCardCallback(n);
                return;
            }

            card.setUp(true);

            var hasTingPaiInfo = false;

            try {
                MJModel.mj_table.room_Tip.hideOutCardTip();
                MJModel.mj_table.removeChildByName("tingpai_layer");
                for (var i = 0; i < MJModel.listen_info.length; i++) {
                    var tli = MJModel.listen_info[i];
                    if (card.getValue() == tli.OutCard) {
                        var can_show_listen_info = true;
                        for (var j = 0; j < tli.HuInfo.length; j++) {
                            if (tli.HuInfo[j].Card == 255) {
                                can_show_listen_info = false;
                                break;
                            }
                        }

                        if (can_show_listen_info) {
                            MJModel.mj_listenLayer_autoshow = false;
                            var curTingPaiLayer = new TingPaiLayer();
                            curTingPaiLayer.show2(tli.HuInfo);

                            curTingPaiLayer.setName("tingpai_layer");
                            MJModel.mj_table.addChild(curTingPaiLayer, 100);
                            hasTingPaiInfo = true;
                        } else {
                            PlatformHelper.showToast("见字胡不显示听牌张");
                        }
                        break;
                    }
                }
            } catch (e) {
                Log(this, e);
            }


            if (this.outCardBtn == null) {
                this.createOutCardBtn();
            }
            else {
                this.outCardBtn.setVisible(true);
            }

            if (this.outCardBtn) {
                var size = cc.director.getWinSize();
                this.outCardBtn.setPosition(cc.p(size.width - 120, 189));
            }
        };

        MJCards.prototype.outHandCardEffct2 = function (pos, value) {
            this.addOutCard(pos, value);
            this.reflashHandCard(pos, true, true);
        };
    },
    initMJAction: function () {
        var self_table = this;
        var super_mjaction_setOperator = MJAction.prototype.setOperator;
        MJAction.prototype.setOperator = function (operat) {
            this.removeChildByName("ChooseGang_selectLayer");

            if (operat == -1 || operat == 0 || operat == null || operat == undefined) {
                for (var i = 0; i < this.opBtns.length; i++) {
                    this.opBtns[i].setVisible(false);
                }
                MJModel.curOperate = -1;
                return false;
            }
            MJModel.curOperate = operat;

            if ((operat & ActionTypeLingQiu.TYPE_MUST_HU) == ActionTypeLingQiu.TYPE_MUST_HU) {
                if (this.actions["hu"]) {
                    this.actions["hu"].setVisible(true);
                }
                this.reflashOpBtns();
                return true;
            } else {
                return super_mjaction_setOperator.call(this, operat);
            }
        };

        var super_btnCallback = MJAction.prototype.btnCallback;
        MJAction.prototype.btnCallback = function (ref) {
            if (MJModel.outtimeplayers.length > 1) {
                MJModel.mj_table.room_Tip.setAutoEndRoomVis(true);
            }
            var n = ref;
            var name = n.getName();
            Log(this, "btnCallback:" + name);
            var self = this;

            if (name == "pass" && ( MJModel.curOperate & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                var card = MJModel.curOperateCard;
                self.sureOperate(ActionType.TYPE_PASS, card);
                return;
            }
            super_btnCallback.call(this, ref);
        };
        MJAction.prototype.sureOperate = function (type, card, cardlist) {
            if (MJModel.needTipWhenPass == 1) {
                var op = MJModel.curOperate;
                if (type == ActionType.TYPE_PASS && (op & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                    if (MJModel.mj_table.room_Card.isDuoPai(0)) {
                        this.showPassWarn(type, card, "您可以自摸了，确定过胡吗？");
                    } else {
                        this.showPassWarn(type, card, "您可以胡了，如果选择过，要过圈或胡\n牌番数有变，确定过胡吗？");
                    }
                    return;
                }
            } else if (MJModel.needTipWhenPass == 2) {
                var op = MJModel.curOperate;
                if (type == ActionType.TYPE_PASS && (op & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                    if (MJModel.mj_table.room_Card.isDuoPai(0) || MJModel.gangMoPai) {
                        this.showPassWarn(type, card, "确定放弃胡牌？");
                        return;
                    }
                }
            }
            sendOperateCard(type, card, cardlist);
            this.setOperator(-1);
        };

    },
    initMJConfig: function () {
        var self_table = this;
        MJConfig.getNewIndex = function (pos, index, type) {
            if (type == CardType.Card_Hu) {
                return index % 8;
            }

            if (type == CardType.Card_Out) {
                if (MJModel.mj_roomType == 2) {
                    return index % 60;
                } else {
                    if (pos == 0 || pos == 2) {
                        return index % 36;
                    }
                    return index % 40;
                }
            }
        };

        MJConfig.getHuCardPos = function (pos, index) {
            index = index % 12;
            if (self_table.isNewCards()) {
                index = this.getNewIndex(pos, index, CardType.Card_Hu);
            }
            if ((pos == 1 || pos == 3) && MJModel.mj_bg_use == 1 && MJModel.mj_paiban == "vertical") {
                return this.getWorldPosition("hu_v_" + pos, "h_" + index);

            } else {
                return this.getWorldPosition("hu_" + pos, "h_" + index);
            }
        };

        var super_mjconfig_getHuCardOrder = MJConfig.getHuCardOrder;
        MJConfig.getHuCardOrder = function (pos, index) {
            index = index % 12;
            if (self_table.isNewCards()) {
                index = this.getNewIndex(pos, index, CardType.Card_Hu);
            }
            if (MJModel.mj_bg_use == 1) {
                var order = [
                    [
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ],
                    [
                        11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                    ],
                    [
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ],
                    [
                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                    ],
                ];
                return order[pos][index];
            } else {
                super_mjconfig_getHuCardOrder.call(this, pos, index);
            }
        };

        var super_mjconfig_getCardStr_new = MJConfig.getCardStr_new;
        MJConfig.getCardStr_new = function (value, pos, type, index) {
            var _reValue = "";
            var c = Utils.toHex2(value);
            if (pos == 2) {
                if (type == CardType.Card_Hand) {
                    _reValue = "hand_2/00.png";
                } else if (type == CardType.Card_Outing) {
                    _reValue = "hand_0/" + c + ".png";
                } else if (type == CardType.Card_Peng || type == CardType.Card_End) {
                    _reValue = "out_peng_end_2/" + c + ".png";
                    if (self_table.isNewCards()) {
                        _reValue = "peng_end_2/" + c + ".png";
                    }
                } else if (type == CardType.Card_Mo) {
                    _reValue = "hand_2/00.png";
                } else if (type == CardType.Card_Out || type == CardType.Card_Hu) {
                    _reValue = "out_peng_end_2/" + c + ".png";
                    if (self_table.isNewCards()) {
                        _reValue = "out_2/" + c + ".png";
                    }
                } else if (type == CardType.Card_Public) {
                    _reValue = "public_2/" + c + ".png";
                }
                return _reValue;
            } else {
                return super_mjconfig_getCardStr_new.call(this, value, pos, type, index);
            }
        };

        var super_mjconfig_getOutCardOrder = MJConfig.getOutCardOrder;
        MJConfig.getOutCardOrder = function (pos, index) {
            if (self_table.isNewCards()) {
                var order = null;
                index = this.getNewIndex(pos, index, CardType.Card_Out);
                if (MJModel.mj_roomType == 2) {
                    order = [
                        [
                            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                        ],
                        [
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        ],
                        [
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                        ],
                        [
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        ],
                    ];
                } else {
                    order = [
                        [
                            3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                            2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        ],
                        [
                            9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                            9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                            9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                            9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                        ],
                        [
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                            3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                        ],
                        [
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                        ],
                    ];
                }
                return order[pos][index];
            } else {
                return super_mjconfig_getOutCardOrder.call(this, pos, index);
            }
        };

        var super_mjconfig_getOutCardPos = MJConfig.getOutCardPos;
        MJConfig.getOutCardPos = function (pos, index) {
            if (self_table.isNewCards()) {
                index = this.getNewIndex(pos, index, CardType.Card_Out);
                if (MJModel.mj_roomType == 2) {
                    return this.getWorldPosition("out_" + pos, "o_" + index);
                } else {
                    return this.getWorldPosition("out_" + pos, "o_" + index);
                }
            } else {
                return super_mjconfig_getOutCardPos.call(this, pos, index);
            }
        };
    },
    initMJPublic: function () {
        var self_table = this;
    },
    playerClickCallback: function (pos) {
        var seatid = MJModel.getSeatidByPos(pos);
        if (seatid == MJModel.seatid) {
            if (PackName == "mjnew225d") {
                this.release();
                ZJHModel.getInstance().roomToHall();
            }
            sendRecordReq();
        }
        else {
            if (MJModel.seatid == -1) {
                var player = MJModel.players[MJModel.getSeatidByPos(pos)];
                var userInfo = new MJUserInfo();
                userInfo.init(player);
                this.addChild(userInfo, 1000000);
            }
            else {

                if (MJModel.hudong == 0) {
                    return;
                }

                this.showBigfaceMenu(pos);
            }
        }
    },
    isDanJiChuPai: function () {
        if (MJModel.danjichupai) {
            return true;
        }
        return false;
    },
    playBgSound: function () {
        if (MJModel.yinyue == "jingkuai") {
            Sound.getInstance().PlayBgSound(getResPath("RoomMJ/sound/csmj1.mp3"));
        } else if (MJModel.yinyue == "suhuan") {
            Sound.getInstance().PlayBgSound(getResPath("RoomMJ/sound/csmj2.mp3"));
        } else {
            Sound.getInstance().PlayBgSound(getResPath("lingqiu/sound/music_hall.mp3"));
        }
    },
    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.getValue();
            if (typeof b === "object") bv = b.getValue();
            if (av == this._curLaizi && bv != this._curLaizi)return 1;//赖子放在最前边
            if (av != this._curLaizi && bv == this._curLaizi)return -1;//赖子放在最前边
            return bv - av;
        } catch (e) {
            return 0;
        }
    },
    test: function (dt) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;

        if (tempCount == 5 && true) {
            if (this.room_Action.actions["chi"]) {
                this.room_Action.actions["chi"].setVisible(true);
            }
            if (this.room_Action.actions["peng"]) {
                this.room_Action.actions["peng"].setVisible(true);
            }
            if (this.room_Action.actions["gang"]) {
                this.room_Action.actions["gang"].setVisible(true);
            }

            if (this.room_Action.actions["hu"]) {
                this.room_Action.actions["hu"].setVisible(true);
            }

            if (this.room_Action.actions["pass"]) {
                this.room_Action.actions["pass"].setVisible(true);
            }
            this.room_Action.reflashOpBtns();
            return;
        }


        if (tempCount == 5 && false) {
            //this._showPiaoLayer();
            //this._showPiaoWaitLayer();
            this.room_Action.showPassWarn(1, 1, "您可以胡了，如果选择过，要过圈或胡\n牌番数有变，确定过胡吗？");
            return;
            this._setPiaoNum(0, 0);
            this._setPiaoNum(0, 1);
            this._setPiaoNum(1, 2);
            this._setPiaoNum(1, 3);
        }


        if (tempCount == 5 && false) {
            for (var i = 0; i < 4; i++) {
                //var arr = [0x41, 0x42, 0x42, 0x43, 0x51, 0x52, 0x53, 0x54, 0x55, 0x51, 0x52, 0x53, 0x54, 0x55, 0x31, 0x51, 0x52, 0x53, 0x54, 0x55, 0x51, 0x52, 0x53, 0x54, 0x55, 0x31];
                var arr = [0x41, 0x42, 0x42, 0x43, 0x51, 0x52, 0x53, 0x54, 0x55, 0x51, 0x52, 0x53, 0x54, 0x55, 0x31, 0x51, 0x52];

                for (var k = 0; k < arr.length; k++) {
                    this.room_Card.addOutCard(i, arr[k]);
                }
            }
        }


        if (tempCount == 5 && false) {
            for (var j = 0; j < 4; j++) {
                for (var i = 0; i < 8; i++) {
                    this.room_Card.addOutCard(j, 0x51);
                }
            }

        }

        if (tempCount == 5 && true) {
            var packet = {
                "UserCard": [{
                    "ChangeableCardsLen": 7,
                    "ChangeableCards": [2, 3, 17, 17, 18, 18, 19],
                    "FixedCardsLen": 2,
                    "stFixedCards": [{
                        "CardData": 37,
                        "state": 1,
                        "chairID": 1,
                        "OpCards": [],
                        "LaiziNum": null
                    }, {"CardData": 7, "state": 2, "chairID": 1, "OpCards": [], "LaiziNum": null}],
                    "stFenZhangCard": null
                }, {
                    "ChangeableCardsLen": 7,
                    "ChangeableCards": [2, 3, 4, 5, 19, 34, 37],
                    "FixedCardsLen": 2,
                    "stFixedCards": [{
                        "CardData": 65,
                        "state": 1,
                        "chairID": 2,
                        "OpCards": [],
                        "LaiziNum": null
                    }, {"CardData": 8, "state": 1, "chairID": 0, "OpCards": [], "LaiziNum": null}],
                    "stFenZhangCard": null
                }, {
                    "ChangeableCardsLen": 1,
                    "ChangeableCards": [40],
                    "FixedCardsLen": 4,
                    "stFixedCards": [{
                        "CardData": 38,
                        "state": 1,
                        "chairID": 0,
                        "OpCards": [],
                        "LaiziNum": null
                    }, {"CardData": 34, "state": 1, "chairID": 1, "OpCards": [], "LaiziNum": null}, {
                        "CardData": 4,
                        "state": 1,
                        "chairID": 3,
                        "OpCards": [],
                        "LaiziNum": null
                    }, {"CardData": 20, "state": 1, "chairID": 3, "OpCards": [], "LaiziNum": null}],
                    "stFenZhangCard": null
                }, {
                    "ChangeableCardsLen": 7,
                    "ChangeableCards": [3, 5, 6, 6, 8, 9, 18],
                    "FixedCardsLen": 2,
                    "stFixedCards": [{
                        "CardData": 23,
                        "state": 1,
                        "chairID": 2,
                        "OpCards": [],
                        "LaiziNum": null
                    }, {"CardData": 1, "state": 2, "chairID": 0, "OpCards": [], "LaiziNum": null}],
                    "stFenZhangCard": null
                }],
                "Score": [0, -3, 0, 3],
                "EndState": 1,
                "EndGangInfo": [{
                    "Gang": [{"GangType": 2, "GangCard": 7}, {"GangType": 64, "GangCard": 1}],
                    "TotalGangScore": 0
                }, {"Gang": [{"GangType": 64, "GangCard": 7}], "TotalGangScore": -3}, {
                    "Gang": [],
                    "TotalGangScore": 0
                }, {"Gang": [{"GangType": 2, "GangCard": 1}], "TotalGangScore": 3}],
                "faninfo": [{
                    "chairid": 0,
                    "SpecialType": 0,
                    "FanNum": 0,
                    "addfan": [],
                    "hucard": 0,
                    "DianPao": []
                }, {
                    "chairid": 1,
                    "SpecialType": 0,
                    "FanNum": 0,
                    "addfan": [],
                    "hucard": 0,
                    "DianPao": []
                }, {
                    "chairid": 2,
                    "SpecialType": 0,
                    "FanNum": 0,
                    "addfan": [],
                    "hucard": 0,
                    "DianPao": []
                }, {"chairid": 3, "SpecialType": 0, "FanNum": 0, "addfan": [], "hucard": 0, "DianPao": []}],
                "money": [1001, 995, 995, 1009],
                "ts": null,
                "md5": []
            };
            this.handler_server_game_end_bc(packet);
        }
    },

    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.lingqiu.AckGameScene", jpacket);
            //var ackGameFree = parsePacket("proto.game.AckGameScene", jpacket);

            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            //var ackGameEnd = parsePacket("proto.game.lingqiu.AckCurGameEnd", jpacket);
            var ackGameEnd = parsePacket("proto.game.AckGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_Laizi_BC) {
            this._handler_server_laizi_bc(jpacket, canDelay);
            return;
        }

        if (cmd == selfCMD.SERVER_Start_Piao) {
            this.handler_server_start_piao(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_AckBroadChoose) {
            this.handler_server_broad_piao_choose(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_AckBroadChooseResult) {
            this.handler_server_broad_piao_result(jpacket, canDelay);
            return;
        }
        this._super(cmd, jpacket, canDelay, svrid);
    },
    handler_server_start_piao: function (jpacket, canDelay) {
        cc.log("lin=handler_server_start_piao");
        MJModel.roomState = 1;
        this.resetGame(false);
        this.room_Info.setVisible(true);
        if (this.room_Action.actions["yaoqing"]) {
            this.room_Action.actions["yaoqing"].setVisible(false);
        }
        if (this.room_Action.actions["copyshare"]) {
            this.room_Action.actions["copyshare"].setVisible(false);
        }

        if (this.pre_scene) {
            this.pre_scene.removeFromParent(true);
            this.pre_scene = null;
        }

        this._showPiaoLayer();
    },
    handlerAutoUpTableReady: function (nums, selfIsReady) {
        //cc.log("lin=handlerAutoUpTableReady=" + MJModel.roomState);
        //if (MJModel.seatid == -1 && nums < 4) {
        //    this.actionCallBack("uptable");
        //}
        //else if (selfIsReady == false) {
        //    if (MJModel.canQuxiaoZhun()) {
        //        if (MJModel.roomState != 0) this.actionCallBack("ready");
        //    } else {
        //        this.actionCallBack("ready");
        //    }
        //}
    },
    handler_server_broad_piao_choose: function (jpacket, canDelay) {
        var packet = parsePacket("proto.game.lingqiu.AckBroadChoose", jpacket);
        var chair_id = packet.chair_id;
        this._piaoState[chair_id] = 1;
        this._showPiaoWaitLayer(this._piaoState);
    },
    handler_server_broad_piao_result: function (jpacket, canDelay) {
        var packet = parsePacket("proto.game.lingqiu.AckBroadChooseResult", jpacket);
        var result = packet.result;
        this._piaoResult = result;
        if (this.getChildByName("linqiu_PiaoWaitLayer")) {
            this.removeChildByName("linqiu_PiaoWaitLayer");
        }

        for (var i = 0; i < result.length; i++) {
            var pos = MJModel.getPosBySeatid(i);
            var player = this.players[pos];
            if (player) {
                player.addPiaoIcon(pos, result[i]);
            }
        }
    },

    _handler_server_buhua_bc: function (data, canDelay) {
        var packet = parsePacket("proto.game.lingqiu.AckBuHua", data);
        var buhua = packet.buhua;
        var leftcount = packet.leftcount;
        this.room_Info.showCardNums(leftcount, true);
        var alldata = [];
        var pnum = 4;
        if (MJModel.mj_roomType == 1) pnum = 3;
        if (MJModel.mj_roomType == 2) pnum = 2;

        for (var i = MJModel.banker_seatid; i < (MJModel.banker_seatid + buhua.length); i++) {
            var s = i;
            if (s >= pnum) s -= pnum;
            for (var j = 0; j < buhua.length; j++) {
                if (buhua[j].chairid == s) {
                    var data = {};
                    data.chairid = buhua[j].chairid;
                    data.hua = buhua[j].hua;
                    data.getcard = buhua[j].getcard;
                    alldata.push(data);
                    break;
                }
            }
        }

        var self = this;
        var count = -1;

        var callback1 = cc.callFunc(function () {
            count++;
            var data = alldata[count];
            if (data) {
                self._show_buhua_action(data.chairid, data.hua, data.getcard, canDelay);
            }
        });

        if (alldata.length != 0) {
            if (canDelay) {
                MJModel.isEnterWait = true;
                var self = this;
                var callback = cc.callFunc(function () {
                    MJModel.isEnterWait = false;
                });
                this.runAction(cc.sequence(cc.sequence(cc.delayTime(0.3), callback1).repeat(alldata.length), cc.delayTime(1), callback));
            }
            else {
                for (var i = 0; i < alldata.length; i++) {
                    var data = alldata[i];
                    this._show_buhua_action(data.chairid, data.hua, data.getcard, canDelay);
                }
            }
        }
    },

    _show_buhua_action: function (seatId, huaArr, getcardArr, canDelay) {
        var pos = MJModel.getPosBySeatid(seatId);
        for (var j = 0; j < huaArr.length; j++) {
            this.room_Card.removeHandCard(pos, huaArr[j]);
        }
        for (var j = 0; j < getcardArr.length; j++) {
            this.room_Card.addHandCard(pos, getcardArr[j]);
            //this.room_Card.removePublicCardByNums(1,false);
        }
        this.room_Card.reflashHandCard(pos);

        for (var j = 0; j < huaArr.length; j++) {
            this.refreshHuaCard(huaArr[j]);
            this.room_Card.addOutCard(pos, huaArr[j]);
            //this.room_Card.removeHandCard(pos, huaArr[j]);
        }
        if (canDelay && (huaArr.length > 0)) {
            this._ShowEffect("buhua", pos);
            var player = MJModel.players[seatId];
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("RoomMJ/sound/operator/%1_buhua.mp3"), player.sex == SEX_ID.SEX_FEMALE ? "w" : "m"));
        }

        //起手补花后标记摸的牌
        if (MJModel.isMyPlayer(seatId) && this.room_Card.isDuoPai(0)) {
            MJModel.mj_mo_cards[0] = getcardArr[getcardArr.length - 1];
            var is_ok = this.room_Card.removeHandCard(0, MJModel.mj_mo_cards[0]);
            if (is_ok) this.room_Card.initMoCard(0, MJModel.mj_mo_cards[0], true);
        }
    },
    _ShowEffect: function (name, pos) {
        try {
            var begin = MJConfig.getOperatorTipPos(pos);
            var armature = null;
            var effect_name = "";
            if (name == "buhua") {
                effect_name = "effects_mjxxbuhuax";
                ccs.armatureDataManager.addArmatureFileInfo(getResPath("lingqiu/effect/buhua/effects_mjxxbuhuax.ExportJson"));
            }
            armature = new ccs.Armature(effect_name);
            if (armature != null) {
                var animation = armature.getAnimation();
                if (animation) {
                    if (typeof animation.playWithIndex === "function") {
                        animation.playWithIndex(0);

                        armature.setPosition(begin);
                        this.room_Tip.addChild(armature, 10000);
                    }
                }
                armature.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
            }
            // Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
        } catch (e) {
            Log(this, e);
        }
    },
    refreshHuaCard: function (value) {
        if (this._huaValues.indexOf(value) == -1) {
            this._huaValues.push(value);
        }
    },
    handler_server_update_info_uc: function (data, canDelay) {
    },
    //去掉摸牌音效
    handler_server_mo_card_bc: function (data, canDelay) {
        MJModel.outtimeplayers = [];
        this.room_Tip.setAutoEndRoomVis(false);
        var userGetCard = parsePacket("proto.game.AckUserGetCard", data);
        var seatId = userGetCard.ChairID;
        var card = userGetCard.Card;
        var operate = userGetCard.OpType;
        var operate2 = userGetCard.OpType2;
        var leftCardNum = userGetCard.LeftCardNum;
        var encrypt_code = userGetCard.encrypt_code;
        if (card == null)encrypt_code = 0;

        var fcard = Utils.getFCardValue(card, encrypt_code);
        if (fcard != 255) this.room_Card.removePublicCardByNums(1, userGetCard.OpType2 == 1 || userGetCard.GetCardDir == 1);
        if (this.room_Action && this.resetGetCardOperator()) this.room_Action.setOperator(-1);
        MJModel.cur_seat = seatId;
        if (MJModel.isMyPlayer(seatId))MJModel.curOperateID = userGetCard.operateid;
        if (leftCardNum != null) this.room_Info.showCardNums(leftCardNum);
        this.room_Info.showDirectionTip(MJModel.getPosBySeatid(seatId));
        this.room_Info.showTime(MJModel.outCardTime);

        var pos = MJModel.getPosBySeatid(seatId);

        if (this.room_Action_video) {
            this.room_Action_video.reset();
            this.room_Action_video.setOperator(pos, operate);
        }

        if (fcard != 255) this.room_Card.reflashHandCard(pos, true, false, true);
        if (canDelay == false) {
            this.room_Card.initMoCard(pos, card, true, encrypt_code);
            return;
        }

        cc.log("lin=handler_server_mo_card_bc=" + (fcard != 255) + this.room_Card.isDuoPai(pos));
        if (fcard != 255 && this.room_Card.isDuoPai(pos)) {
            this.reConnect();
            ERROR(this, "error client has more cards", fcard, JSON.stringify(this.room_Card.hand_card[pos]));
            return;
        }

        //Sound.getInstance().playEffect(getResPath("RoomMJ/sound/effect/mo_card.mp3"));

        if (MJModel.isMyPlayer(seatId)) {
            MJModel.curOperateCard = fcard;
            MJModel.curOperate = operate;
            this.room_Card.initMoCard(pos, card, false, encrypt_code);
            this.room_Card.checkCardSafe(userGetCard.md5);
            this.check_tip_operate_card(operate, fcard);
            //my operate action
            {
                MJModel.gang_info = [];
                MJModel.listen_info = [];
                MJModel.operator_info = [];
                MJModel.listen_info2 = userGetCard.ListenInfo1;
                //点击出来有听操作提示
                if (userGetCard.ListenInfo.length > 0) {
                    var listeninfo_size = userGetCard.ListenInfo.length;

                    for (var i = 0; i < listeninfo_size; i++) {
                        var tli = Utils.clone(tagListenInfo);
                        tli.HuInfo = [];

                        tli.OutCard = userGetCard.ListenInfo[i].OutCard;
                        var huinfoLen = userGetCard.ListenInfo[i].HuInfo.length;
                        tli.HuInfoLen = huinfoLen;
                        for (var j = 0; j < huinfoLen; j++) {
                            var huInfo = Utils.clone(tagHuInfo);
                            huInfo.Card = userGetCard.ListenInfo[i].HuInfo[j].Card;
                            huInfo.LeftNum = userGetCard.ListenInfo[i].HuInfo[j].LeftNum;
                            huInfo.HuFanNum = userGetCard.ListenInfo[i].HuInfo[j].HuFanNum;
                            tli.HuInfo.push(huInfo);
                        }
                        MJModel.listen_info.push(tli);
                    }
                }

                if (userGetCard.GangInfo.length > 0) {
                    var gang_size = userGetCard.GangInfo.length;

                    for (var i = 0; i < gang_size; i++) {
                        var tgInfo = Utils.clone(tagGangInfo);
                        tgInfo.curCard = userGetCard.GangInfo[i].Card;
                        tgInfo.state = userGetCard.GangInfo[i].state;

                        MJModel.gang_info.push(tgInfo);
                    }
                }

                if (userGetCard.cardList && userGetCard.cardList.length > 0) {
                    MJModel.operator_info = [];
                    var gang_size = userGetCard.cardList.length;
                    for (var i = 0; i < gang_size; i++) {
                        var tgInfo = Utils.clone(tagOpInfo);
                        tgInfo.OpType = userGetCard.cardList[i].OpType;
                        for (var j = 0; j < userGetCard.cardList[i].card.length; j++) {
                            tgInfo.Cards.push(userGetCard.cardList[i].card[j]);
                        }

                        MJModel.operator_info.push(tgInfo);
                    }
                }

                if (( operate & ActionType.TYPE_LISTEN) == ActionType.TYPE_LISTEN) {
                    operate = operate - ActionType.TYPE_LISTEN;
                }

                //是否有碰杠胡的操作
                if (operate > 0) {
                    if (this.room_Action) {
                        this.room_Action.setOperator(operate, operate2);
                        this.room_Action.setTingPaiVis(false);
                        this.autoHuCard();
                    }
                    return;
                }
                else {
                    this.myselfOpenOutCard(true);
                }
            }
        }
        else {
            this.room_Card.initMoCard(pos, card, false, encrypt_code);
        }
    },
    _handler_game_record: function (data, canDelay) {
        if (MJModel.gpsInfo) {
            MJModel.gpsInfo.removeFromParent(true);
            MJModel.gpsInfo = null;
        }

        //-----新总结算界面
        var gpsInfo = cc.director.getRunningScene().getChildByName("gpsInfo");
        if (gpsInfo) {
            gpsInfo.removeFromParent(true);
        }

        cc.log("------big End");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var pkgId = this._pkg_id;
        var gameType = "灵丘麻将";
        if (this.mj_roomType == 1) {
            gameType = gameType + " 3人"
        } else if (this.mj_roomType == 2) {
            gameType = gameType + " 2人"
        } else {
            gameType = gameType + " 4人"
        }
        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);
        bigResult.addRoomconfig();
        bigResult.refreshLabel();
        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];
        //gameType += " · " + MJModel.base_money + "分底";

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        //var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;

        var max_score = 0;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            if (recoreInfo.totalscore > max_score) {
                max_score = recoreInfo.totalscore;
            }
        }

        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            //var playerRecord = totalRecord.player_records[i];
            var player = MJModel.players[i];
            var arrStr = [];
            //次数
            var arrcount = [];

            arrStr = ["点炮次数", "自摸次数", "接炮次数", "暗杠次数", "明杠次数", "补杠次数"];
            arrcount = [recoreInfo.Ex1, recoreInfo.hu_num, recoreInfo.piaolaizi_num, recoreInfo.WinCounts, recoreInfo.GangTimes, recoreInfo.DianGangTimes];

            if (player && player.uid != -1 && player.uid != 0) {
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var isWin = false;
                if (max_score > 0 && recoreInfo.totalscore == max_score) {
                    isWin = true;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, isWin, _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner, recoreInfo.dissState);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;

                Item.getChildByName("zongfen_win").setScale(1.2);
                Item.getChildByName("zongfen_lose").setScale(1.2);
            }
        }
        bigResult.refresh(PlayerNumber);
        this.release();
    },

    handler_server_game_end_bc: function (hubeiGameend, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            //var ackGameEnd = hubeiGameend.gameend;
            var ackGameEnd = hubeiGameend;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);

            if (MJModel.mj_table.getChildByName("tingpai_layer")) {
                MJModel.mj_table.removeChildByName("tingpai_layer")
            }

            this.room_Info.stopTime();
            this.room_Tip.hideOutCardTip();

            var show_all_handcard = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var show_liuju = cc.callFunc(function () {
                if (ackGameEnd.EndState == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
            });

            var show_end_score = cc.callFunc(function () {
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var update_all_money = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var game_end_reset = cc.callFunc(function () {
                //self.room_Action.setReady2Visible(false);
                //var result = new MJResult_XinYu();
                //result.updateContentView(hubeiGameend);
                //result.setName("reset_remove");
                //self.addChild(result, 100000);
                //return;
                try {
                    var result = new MJResult_XinYu();
                    result.updateContentView(hubeiGameend);
                    result.setName("reset_remove");
                    self.addChild(result, 100000);
                    if (MJModel.mj_table._isJieSan) {
                        result.setName("xxxxx");
                    }
                } catch (e) {
                    cc.log("game end:", e);
                    self.room_Action.setReady2Visible(true);
                }
            });

            var show_all_public_card = cc.callFunc(function () {
                self.gameend_showAllPublicCard(ackGameEnd);
            });

            if (MJModel.isOnVideo && canDelay == false) {
                this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(2), update_all_money, cc.delayTime(1), game_end_reset));
                return;
            }
            if (MJModel.mj_table._isJieSan) {
                this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(0.5), show_end_score, cc.delayTime(0), update_all_money, cc.delayTime(0.5), game_end_reset));
                return;
            }
            this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(1), show_liuju, cc.delayTime(ackGameEnd.EndState == 1 ? 1 : 0), show_end_score, cc.delayTime(0), update_all_money, cc.delayTime(1), game_end_reset));
        } catch (e) {
            ERROR(this, "handler_server_game_end_bc" + e);
        }
    },

    timeEnd: function (dt) {

        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    },
    handler_game_time_over_bc: function (data, canDelay) {
        //cc.log("lin=startTimeEnd=handler_game_time_over_bc=1");
        if (MJModel.state != MJ_STATUS.MJ_GAME_PLAYING) {
            this.startTimeEnd();
        }
        MJModel.state = MJ_STATUS.MJ_GAME_FREE;
        // PlatformHelper.showToast("服务器通知房间结束！");
    },
    handler_server_end_room_result_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.AckDisbandResult", data);
        if (this.room_EndTouPiao) this.room_EndTouPiao.removeFromParent(true);
        this.room_EndTouPiao = null;
        MJModel.TouPiaoING = false;
        var result = jpacket.Result;
        if (result == 1) {
            //PlatformHelper.showToast("房间解散成功，3秒后房间自动结束");
            this._isJieSan = true;
        }
        else {
            PlatformHelper.showToast("解散失败，稍后游戏继续！");
        }
    },
    _handler_server_laizi_bc: function (data, canDelay) {
        var packet = parsePacket("proto.game.lingqiu.AckLaiZi", data);
        var self = this;
        var curLaizi = packet.card;
        this._setLaizi(curLaizi, -1, -1, canDelay ? true : false);
        if (canDelay == false) {
            this._showHandcardFlag(false);
            this.room_Card.reflashHandCard(0, true);
            this.room_Card.reflashHandCard(1, true);
            this.room_Card.reflashHandCard(2, true);
            this.room_Card.reflashHandCard(3, true);
            return;
        }
        MJModel.isEnterWait = true;

        var move_end = cc.callFunc(function () {
            self._showHandcardFlag(false);

            var mo_card = null;
            if (self.room_Card.isDuoPai(0)) {
                mo_card = self.room_Card.hand_card[0][self.room_Card.hand_card[0].length - 1];
                self.room_Card.hand_card[0].splice(self.room_Card.hand_card[0].length - 1, 1);
            }

            var allPreCars = [];
            var allLaiZi = [];
            var dd = 0;

            for (var i = self.room_Card.hand_card[0].length - 1; i >= 0; i--) {
                var card = self.room_Card.hand_card[0][i];
                if (card.getValue() == curLaizi) {
                    allLaiZi.push(card);
                } else {
                    if (allLaiZi.length > 0) {
                        break;
                    }
                    allPreCars.push(card);
                }
            }

            if (allLaiZi.length > 0 && allPreCars.length > 0) {
                var allDelay = 0;
                for (var i = 0; i < allLaiZi.length; i++) {
                    var card = allLaiZi[i];
                    var begin_pos = card.getPosition();
                    var end_pos = MJConfig.getHandCardPos(0, self.room_Card.hand_card[0].length - 1 - i, self.room_Card.hand_card[0].length, self.room_Card.isDuoPai(0));
                    var allL = Math.abs(end_pos.x - begin_pos.x);

                    //if (MJModel.outCardEffect_style == 0 || true) {
                    var time = allL / 1000;
                    if (time < 0.17) time = 0.17;
                    if (time > 0.3) time = 0.3;
                    card.runAction(cc.sequence(cc.spawn(cc.rotateTo(0.1, 15), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + 100))), cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y + 100)).easing(cc.easeSineOut()), cc.spawn(cc.rotateTo(0.1, 0), cc.moveTo(0.17, end_pos))));
                    allDelay += 1;
                }
                for (var i = 0; i < allPreCars.length; i++) {
                    var card = allPreCars[i];
                    //card.runAction(cc.sequence(cc.moveBy(0.3, cc.p(83, 0)), cc.delayTime(1 - 0.3)).repeat(allLaiZi.length));
                    card.runAction(cc.moveBy(0.3, cc.p(83 * allLaiZi.length, 0)));
                }

                var callback = cc.callFunc(function () {
                    MJModel.isEnterWait = false;
                    self.room_Card.reflashHandCard(0, true);
                    if (mo_card) {
                        mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                        self.room_Card.hand_card[0].push(mo_card);
                    }
                });
                self.runAction(cc.sequence(cc.delayTime(0.5), callback));
            } else {
                MJModel.isEnterWait = false;
                self.room_Card.reflashHandCard(0, true);
                if (mo_card) {
                    mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                    self.room_Card.hand_card[0].push(mo_card);
                }
            }
        });
        this.runAction(cc.sequence(cc.delayTime(1), move_end));
    },

    _setGameType: function () {
        var pkg_id = 1;
        var play_id = [];
        //甩字胡不可炮胡
        //play_id.push(MJModel.base_money + "分底");
        if (this.mj_roomType == 0) {
            play_id.push("4人");
        } else if (this.mj_roomType == 1) {
            play_id.push("3人");
        } else if (this.mj_roomType == 2) {
            play_id.push("2人");
        }

        if (MJModel.RoomConfigID.indexOf(1194001) != -1) {
            play_id.push("不跑");
        }

        if (MJModel.RoomConfigID.indexOf(1194002) != -1) {
            play_id.push("跑1");
        }

        if (MJModel.RoomConfigID.indexOf(1194003) != -1) {
            play_id.push("跑3");
        }

        if (MJModel.RoomConfigID.indexOf(1194004) != -1) {
            play_id.push("跑5");
        }

        if (MJModel.RoomConfigID.indexOf(1194005) != -1) {
            play_id.push("跑10");
        }

        if (MJModel.RoomConfigID.indexOf(1195001) != -1) {
            play_id.push("只能自摸胡");
        }

        if (MJModel.RoomConfigID.indexOf(1195002) != -1) {
            play_id.push("可点炮胡");
        }

        if (MJModel.RoomConfigID.indexOf(1196001) != -1) {
            play_id.push("可胡七对");
        }

        if (MJModel.RoomConfigID.indexOf(1196002) != -1) {
            play_id.push("可一炮多响");
        }

        if (MJModel.RoomConfigID.indexOf(1196003) != -1) {
            play_id.push("补花自摸加倍");
        }

        if (MJModel.RoomConfigID.indexOf(1196004) != -1) {
            play_id.push("夹边吊加1分");
        }

        if (MJModel.RoomConfigID.indexOf(1196005) != -1) {
            play_id.push("风令加花");
        }

        if (MJModel.RoomConfigID.indexOf(2000001) != -1) {
            play_id.push("可少人开局");
        }
        if (MJModel.RoomConfigID.indexOf(2000002) != -1) {
            play_id.push("可少人开局");
        }
        if (MJModel.RoomConfigID.indexOf(2000003) != -1) {
            play_id.push("可少人开局");
        }

        if (MJModel.RoomConfigID.indexOf(1003001) != -1) {
            play_id.push("解散1分钟");
        }
        if (MJModel.RoomConfigID.indexOf(1003002) != -1) {
            play_id.push("解散3分钟");
        }
        if (MJModel.RoomConfigID.indexOf(1003003) != -1) {
            play_id.push("解散5分钟");
        }

        if (MJModel.RoomConfigID.indexOf(1002001) != -1) {
            play_id.push("带风");
        }
        if (MJModel.RoomConfigID.indexOf(1002002) != -1) {
            play_id.push("带庄");
        }
        if (MJModel.RoomConfigID.indexOf(1002003) != -1) {
            play_id.push("放头");
        }
        if (MJModel.RoomConfigID.indexOf(1002004) != -1) {
            play_id.push("轮庄");
        }
        if (MJModel.RoomConfigID.indexOf(1002005) != -1) {
            play_id.push("癞子");
        }
        if (MJModel.RoomConfigID.indexOf(1002006) != -1) {
            play_id.push("有胡必胡");
        }
        if (MJModel.RoomConfigID.indexOf(1002007) != -1) {
            play_id.push("杠随胡走");
        }

        if (MJModel.RoomConfigID.indexOf(1001001) != -1) {
            play_id.push("1分底");
        }

        if (MJModel.RoomConfigID.indexOf(1001002) != -1) {
            play_id.push("2分底");
        }

        if (MJModel.RoomConfigID.indexOf(1001003) != -1) {
            play_id.push("3分底");
        }

        if (MJModel.RoomConfigID.indexOf(1001004) != -1) {
            play_id.push("4分底");
        }

        if (MJModel.RoomConfigID.indexOf(1001005) != -1) {
            play_id.push("5分底");
        }

        if (MJModel.RoomConfigID.indexOf(1004001) != -1) {
            play_id.push("单击出牌");
        }

        MJModel.play_id_str = play_id;

        var gameDes = "";
        for (var i = 0; i < play_id.length; i++) {
            gameDes += play_id[i];
            if (i != play_id.length - 1) {
                gameDes += " ";
            }
        }
        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);
        //this._setFastChat();
    },
    fastChat3: [
        "各位老板老板娘好",
        "快滴啊打撒，嘛区闹", "别虚撒，" +
        "让我稍微想下子",
        "小心滴啊，我听牌了，别出纵",
        "我滴个乖乖，又自摸了",
        "你这个牌打滴太夯了，直接要喊你师父",
        "别吵别吵，专心打牌",
        "啊呦歪，你们两个打联子闹",
        "打滴什么牌哎，会打牌啊",
        "对不住啊，刚才接了个电话，继续继续",
        "不好意思不好意思，一打牌事就来了，嘛就到",
        "咦，怎么又断线了，网络怎么那么差",
    ],
    _setFastChat: function () {
        var chatList = [];
        chatList = this.fastChat3;
        MJModel.mj_fastChat = this.fastChat3;
        var self = this;
        Utils.getFastChatSound = function (chat, sex) {
            for (var i = 0; i < chatList.length; i++) {
                if (chatList[i] == chat) {
                    return getResPath(__String.createWithFormat("lingqiu/sound/fastchat/%1_%2.mp3", sex == SEX_ID.SEX_MAN ? "m" : "w", i + 1));
                }
            }
            return "";
        };
    },

    _showLaizi_effect: function (name) {
        ccs.armatureDataManager.addArmatureFileInfo(getResPath("lingqiu/effect/laizi/effects_mjhunancx.ExportJson"));
        var size = cc.director.getWinSize();
        if (true) {
            var armature = new ccs.Armature("effects_mjhunancx");
            var animation = armature.getAnimation();
            if (animation) {
                if (typeof animation.playWithIndex === "function") {
                    animation.playWithIndex(0, -1, 0);
                    armature.setPosition(cc.p(size.width / 2, size.height / 2));
                    this.addChild(armature, 100);
                    armature.runAction(cc.sequence(cc.delayTime(1.0), cc.removeSelf()));
                }
            }
        }
        Sound.getInstance().playEffect(__String.createWithFormat(getResPath("lingqiu/sound/laizi.mp3")));
        return armature;
    },
    _setLaizi: function (laizi, laizipi, laizipi2, gamestart) {
        this._curLaizi = laizi;
        this._curLaizipi = laizipi;
        this._curLaizipi2 = laizipi2;

        var size = cc.director.getWinSize();
        if (laizi == null || laizi == undefined || laizi == -1 || laizi == 255) {
            if (this._curLaizi_bg) this._curLaizi_bg.setVisible(false);
            return;
        }
        if (gamestart == undefined) gamestart = false;

        if (this._curLaizi_bg == null) {
            this._curLaizi_bg = new cc.Sprite(getResPath("lingqiu/flag/laizi_bg3.png"));
            this._curLaizi_bg.setPosition(cc.p(size.width - 220, size.height - 70));
            this.addChild(this._curLaizi_bg, 200);
        }
        this._curLaizi_bg.removeAllChildren();
        this._curLaizi_bg.setVisible(true);

        if (this._curLaizi > 0) {
            var card = new MJCard();
            card.setValue(this._curLaizi, 0, CardType.Card_Out, 0);
            card.setPosition(cc.p(this._curLaizi_bg.getContentSize().width / 2, this._curLaizi_bg.getContentSize().height / 2));
            card.setScale(1);
            //card.setStoreColor(cc.color(255, 249, 137));
            this._curLaizi_bg.addChild(card);
            this.room_Card.other_card.push(card);

            if (gamestart) {
                var dl = 0;
                var ppos = card.getPosition();
                card.setScale(0);
                card.setVisible(false);
                var self = this;
                var callFunc = cc.CallFunc(function () {
                    self._showLaizi_effect("赖子皮");
                });
                card.setPosition(cc.p(size.width / 2 - this._curLaizi_bg.getPositionX() + this._curLaizi_bg.getContentSize().width / 2, size.height / 2 - this._curLaizi_bg.getPositionY() + this._curLaizi_bg.getContentSize().height / 2));
                card.runAction(cc.sequence(cc.delayTime(0 + dl), cc.show(), callFunc, cc.scaleTo(0.1, 2), cc.delayTime(1.0), cc.spawn(cc.moveTo(0.17, ppos), cc.scaleTo(0.17, 1))));
            }
        }
    },

    _showHandcardFlag: function (isEndShow) {
        if (MJModel.isOnVideo) {
            for (var j = 0; j < 4; j++) {
                var allcards = this.room_Card.hand_card[j];
                if (allcards) {
                    for (var i = 0; i < allcards.length; i++) {
                        var card = allcards[i];
                        this._checkAddCardFlag(card);
                    }
                }
            }
            return;
        }
        var allcards = this.room_Card.hand_card[0];
        if (allcards) {
            for (var i = 0; i < allcards.length; i++) {
                var card = allcards[i];
                this._checkAddCardFlag(card);
            }
        }
    },
    _checkAddCardFlag: function (card) {
        try {
            if (card.type == CardType.Card_Outing)return;
            if (card.type == CardType.Card_Peng)return;
            if (card.getValue() == 0)return;
            var flag_str = "";
            if (card.getValue() == this._curLaizi)flag_str = "lingqiu/flag/lai_flag2.png";
            if (card.getValue() == this._curLaizipi)flag_str = "lingqiu/flag/laipi_flag2.png";
            if (card.getValue() == this._curLaizipi2)flag_str = "lingqiu/flag/laipi_flag2.png";
            if (flag_str != "") {
                if (card.getValue() == this._curLaizi)card.setStoreColor(cc.color(255, 249, 137));
                var p = card.getChildByName("sprite");
                p.removeChildByName("laizi_flag");
                var flag = null;

                flag = new cc.Sprite(getResPath(flag_str));

                var m_size = p.getContentSize();
                if (flag) {
                    flag.setPosition(cc.p(0, m_size.height));
                    flag.setAnchorPoint(cc.p(0, 1));
                    flag.setName("laizi_flag");
                    p.addChild(flag);
                    this._flagDirection(card.pos, flag, m_size);
                    flag.setScale(0.5);
                    if (card.pos == 0 && card.type != CardType.Card_Out)flag.setScale(1);
                }
                return;
            }
        } catch (e) {
            Log(this, e);
        }
    },
    //每个方向角标对应
    _flagDirection: function (pos, flag, m_size) {
        if (MJModel.mj_table_view == "2d") {
            if (MJModel.mj_paiban == "vertical" || pos == 2) {
                return;
            }
        }
        if (pos == 1) {
            flag.setPosition(cc.p(0, 15));
            flag.setRotation(-90);
        } else if (pos == 2) {
            flag.setPosition(cc.p(m_size.width, 5));
            flag.setRotation(180);
        } else if (pos == 3) {
            flag.setPosition(cc.p(m_size.width, m_size.height));
            flag.setRotation(90);
        }
    },
    resetGame: function (allClean) {
        this._super(allClean);
        this._setLaizi(-1, -1, -1);
        this.isForceTing = false;
        MJModel.mj_lockcard_type = 0;
        this._huaCard = [[], [], [], []];
        this._huaValues = [0x41, 0x42, 0x43, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x60];
        this._piaoState = [0, 0, 0, 0];

        if (this.getChildByName("linqiu_PiaoLayer")) {
            this.removeChildByName("linqiu_PiaoLayer");
        }

        if (this.getChildByName("linqiu_PiaoWaitLayer")) {
            this.removeChildByName("linqiu_PiaoWaitLayer");
        }
    },
    handler_server_scene_info_uc: function (hubei_scene, canDelay) {
        if (hubei_scene) {
            this.updateBg(false);
            MJModel.RoomConfigID = hubei_scene.public_scene.RoomConfigID;
            MJModel.banker_seatid = hubei_scene.public_scene.BankerChairid;
            var ackGameFree = hubei_scene.public_scene;
            if (ackGameFree.RoomConfigID.indexOf(2000001) != -1)MJModel.changMode = 2;
            if (ackGameFree.RoomConfigID.indexOf(2000002) != -1)MJModel.changMode = 1;
            if (ackGameFree.RoomConfigID.indexOf(2000003) != -1)MJModel.changMode = 3;

            if (hubei_scene.lai_zi) {
                this._setLaizi(hubei_scene.lai_zi, -1, false);
            }
            //锁住手牌
            this._setGameType();

            var fang_result = hubei_scene.fang_result;
            var is_choose_fang = hubei_scene.is_choose_fang;

            if (is_choose_fang && is_choose_fang.length > 0) {
                this._piaoState = is_choose_fang;
                for (var i = 0; i < is_choose_fang.length; i++) {
                    var state = is_choose_fang[i];
                    if (MJModel.isMyPlayer(i)) {
                        if (state == 0) {
                            this._showPiaoLayer();
                        } else {
                            this._showPiaoWaitLayer(is_choose_fang);
                        }
                    }
                }
            }


            if (fang_result) {
                this._piaoResult = fang_result;
                for (var i = 0; i < fang_result.length; i++) {
                    var pos = MJModel.getPosBySeatid(i);
                    var player = this.players[pos];
                    if (player) {
                        player.addPiaoIcon(pos, fang_result[i]);
                    }
                }
            }
        }

        this._super(hubei_scene.public_scene, canDelay);

        if (this.room_Card.isDuoPai(0) && MJModel.mj_mo_cards[0] == -1) {
            var card = this.room_Card.hand_card[0][0];
            card.setMyPosition(MJConfig.getMoCardPos(0));
        }
    },

    handler_server_out_card_bc: function (data, canDelay) {
        var userOutCard = parsePacket("proto.game.AckUserOutCard", data);
        var seatId = userOutCard.ChairID;
        var card = userOutCard.Card;
        var da_type = userOutCard.da_type;
        var pos = MJModel.getPosBySeatid(seatId);
        this._super(data, canDelay)
    },
    handler_server_peng_kang_bc: function (data, canDelay) {
        var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);
        var seatid = ackBcOpResult.ChairID;
        var pos = MJModel.getPosBySeatid(seatid);
        this._super(data, canDelay);
        if (this.room_Card.isDuoPai(0) && MJModel.mj_mo_cards[pos] == -1) {
            var card = this.room_Card.hand_card[0][0];
            card.setMyPosition(MJConfig.getMoCardPos(0));
        }
    },

    handler_out_card_sound: function (sex, card) {
        if (this.isHuaValue(card)) {
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("RoomMJ/sound/operator/%1_buhua.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m"));
        } else {
            if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
                //Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
                Sound.getInstance().playEffect(__String.createWithFormat(getResPath("lingqiu/sound/chupai/%1_%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", Utils.toHex2(card)));
            } else {
                Sound.getInstance().playEffect(__String.createWithFormat(getResPath("RoomMJ/sound/chupai/%1_%2.mp3"), sex == SEX_ID.SEX_MAN ? "m" : "w", Utils.toHex2(card)));
            }
        }
    },

    handler_op_sound: function (pos, sex, OpType, OpType2, effect) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
            if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU && effect == "") {
                var zimo = this.room_Card.isDuoPai(pos);
                effect = "hu";
                if (zimo) {
                    effect = "zimo";
                }
            } else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                effect = "peng";
            }
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("lingqiu/sound/operator/%1_%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", effect));
        } else {
            this._super(pos, sex, OpType, OpType2, effect);
        }
    },

    handler_op_effect: function (pos, out_pos, sex, OpType, OpType2, effect) {
        this.room_Tip.showEffect(pos, OpType, this.room_Card.isDuoPai(pos));
        // this.room_Tip.showSimpleEffect(pos, out_pos, OpType, effect);
    },
    reflashSetting: function (isInit) {
        this._super(isInit);

        if (this.room_Card) {
            //刷新数字角标
            for (var i = 0; i < this.room_Card.hu_card.length; i++) {
                for (var k = 0; k < this.room_Card.hu_card[i].length; k++) {
                    var card = this.room_Card.hu_card[i][k];
                    this.updateShuZiFlag(card, i);
                }
            }
        }
    },
    updateShuZiFlag: function (card, pos, init) {
        var flag = card.getChildByName("shuziFlag");
        if (init) {
            flag = init;
        }

        var m_size = card.getContentSize();
        if (flag || init) {
            if (MJModel.mj_bg_use == 0) {
                if (pos == 0) {
                    flag.setPosition(cc.p(m_size.width * 0.05, m_size.height));
                    flag.setAnchorPoint(cc.p(0, 1));
                } else if ((pos == 1)) {
                    flag.setPosition(cc.p(m_size.width * 0.2, m_size.height * 0.4));
                    flag.setAnchorPoint(cc.p(0, 0));
                } else if ((pos == 2)) {
                    flag.setPosition(cc.p(m_size.width * 0.9, m_size.height * 0.5));
                    flag.setAnchorPoint(cc.p(1, 0.5));
                    flag.setRotation(0);
                } else if ((pos == 3)) {
                    flag.setPosition(cc.p(m_size.width * 0.8, m_size.height * 0.85));
                    flag.setAnchorPoint(cc.p(1, 1));
                }
            } else {
                if (pos == 0) {
                    flag.setPosition(cc.p(m_size.width * 0.15, m_size.height * 0.85));
                    flag.setAnchorPoint(cc.p(0, 1));
                } else if ((pos == 1)) {
                    flag.setPosition(cc.p(m_size.width * 0.15, m_size.height * 0.4));
                    flag.setAnchorPoint(cc.p(0, 0));
                } else if ((pos == 2)) {
                    flag.setPosition(cc.p(m_size.width * 0.65, m_size.height * 0.68));
                    flag.setAnchorPoint(cc.p(0.5, 0.5));
                    flag.setRotation(180);
                } else if ((pos == 3)) {
                    flag.setPosition(cc.p(m_size.width * 0.8, m_size.height * 0.85));
                    flag.setAnchorPoint(cc.p(1, 1));

                }
            }
        }
    },
    isHuaValue: function (card) {
        if (this._curLaizi == card) {
            return true;
        }
        return false;
    },
    addCardNum: function (card, pos, num) {
        card.removeChildByName("shuziFlag");
        //添加标志
        var flag_str = __String.createWithFormat(getResPath("lingqiu/flag/num/%1_%2.png"), num, pos);
        var flag = new cc.Sprite(flag_str);
        var m_size = card.getContentSize();
        if (flag) {
            this.updateShuZiFlag(card, pos, flag);

            flag.setName("shuziFlag");
            flag.setScale(1.1);
            card.addChild(flag, 1000);
        }
        return flag;
    },
    _showPiaoLayer: function () {
        if (this.getChildByName("linqiu_PiaoLayer")) {
            this.removeChildByName("linqiu_PiaoLayer");
        }
        var layer = new PiaoLayer();
        layer.setName("linqiu_PiaoLayer");
        layer.initPiao();
        this.addChild(layer, 299);
    },
    _showPiaoWaitLayer: function (result) {
        if (this.getChildByName("linqiu_PiaoLayer")) {
            return;
        }

        if (this.getChildByName("linqiu_PiaoWaitLayer")) {
            this.removeChildByName("linqiu_PiaoWaitLayer");
        }
        var layer = new PiaoWaitLayer();
        layer.setName("linqiu_PiaoWaitLayer");
        layer.initPiao(result);
        this.addChild(layer, 299);
    },
    _setPiaoNum: function (piao, pos) {
        var player = this.players[pos];
        player.removeChildByName("piao_tip");
        var str = "lingqiu/flag/icon_bufang.png"
        if (piao == 1) {
            str = "lingqiu/flag/icon_fangtou.png";
        }
        var tip = new cc.Sprite(getResPath(str));
        tip.setName("piao_tip");
        tip.setPosition(pos == 2 ? player.m_size.width + tip.getContentSize().width / 2 - 5 : player.m_size.width / 2, pos == 2 ? 0 + 3 : player.m_size.height * 1.15);
        player.addChild(tip, -100);
    },
    myselfOpenOutCard: function (IsMoCard, showTip) {
        if (IsMoCard == undefined) IsMoCard = false;
        if (showTip == undefined) showTip = true;
        if (MJModel.isOnVideo) {
            return;
        }

        if (MJModel.isAutoOutCard && IsMoCard) {
            this.autoOutCard();
            return;
        }
        this.room_Card.resetAllCardClickState();
        MJModel.canTouchCard = true;
        MJModel.canChoiceMore = false;
        this.room_Card.setTingPaiFlag(true);

        if (this.room_Action) this.room_Action.setTingPaiVis(false);
        if (this.room_Action) this.room_Action.setAutoOutCardVis(false);

        this.room_Card.setSomeCardClickState();

        //this.room_Tip.showOutCardTip();
    },
});

var MJResult_XinYu = MJCommonResult.extend({
    btns: {},
    ctor: function () {
        this._super();
        var size = this.bgSpr.getContentSize();
        var y = 62;
        //继续游戏
        var continueBtn = this.bgSpr.getChildByName("continueBtn");
        var name = "lingqiu/action/btn_continue.png";
        continueBtn.loadTextures(getResPath(name), getResPath(name), getResPath(name));
        continueBtn.setPosition(cc.p(size.width / 2 + 200, y));
        var continueSize = continueBtn.getContentSize();
        this.btns["continue"] = continueBtn;
        //添加一个分享按钮
        {
            name = "lingqiu/action/btn_share.png";
            var btn = new ccui.Button();
            btn.loadTextures(getResPath(name), getResPath(name), "");
            this.bgSpr.addChild(btn, 100);
            btn.setPosition(cc.p(size.width / 2 - 200, y));
            this.btns["share"] = btn;
            var self = this;
            btn.addClickEventListener(function (sender, evt) {
                var myposition = cc.p(sender.getContentSize().width / 2, sender.getContentSize().height / 2);
                var sharelist = new ShareList();
                sharelist.initList(self, 3, myposition);
                sender.addChild(sharelist);
            });
        }

        var self = this;
        if (!MJModel.isOnVideo) {
            this._cur_time = 15;
            //this.readyLable = new cc.LabelTTF(this.getReadyTip(), "Arial", 25);
            this.readyLable = new cc.LabelAtlas(this.getReadyTip(), getResPath("lingqiu/flag/font_daojishi.png"), 22, 31, '/');
            this.readyLable.setAnchorPoint(cc.p(0.5, 0.5));
            this.readyLable.setPosition(cc.p(continueSize.width * 0.75, continueSize.height * 0.6));
            continueBtn.addChild(this.readyLable);
            this.schedule(this.updateTime, 1.0);
        }

        var offy = 25;
        var startY = 20;
        var width = size.width * 0.99;
        var fontSize = 22;
        //添加配置信息
        var str = "房间号:" + MJModel.roomCode + " " + MJModel.currentCount + "/" + MJModel.RoomCountSum;
        var roomIdLabel = new cc.LabelTTF(str, "Arial", fontSize);
        roomIdLabel.setAnchorPoint(cc.p(1, 0.5));
        roomIdLabel.setPosition(cc.p(width, startY + offy * 2));
        this.bgSpr.addChild(roomIdLabel);

        var renshuStr = "4人"
        if (MJModel.mj_table.mj_roomType == 1) {
            renshuStr = "3人"
        } else if (MJModel.mj_table.mj_roomType == 2) {
            renshuStr = "2人"
        }
        str = "灵丘麻将-" + renshuStr;
        var gameNameLabel = new cc.LabelTTF(str, "Arial", fontSize);
        gameNameLabel.setAnchorPoint(cc.p(1, 0.5));
        gameNameLabel.setPosition(cc.p(width, startY + offy));
        this.bgSpr.addChild(gameNameLabel);

        var play_id = MJModel.play_id_str;
        var gameDes = "";
        for (var i = 0; i < play_id.length; i++) {
            if (play_id[i] != "2人" && play_id[i] != "4人" && play_id[i] != "3人") {
                gameDes += play_id[i];
                if (i != play_id.length - 1) {
                    gameDes += " ";
                }
            }
        }

        var configLabel = new cc.LabelTTF(gameDes, "Arial", fontSize);
        configLabel.setAnchorPoint(cc.p(1, 0.5));
        configLabel.setPosition(cc.p(width, startY));
        this.bgSpr.addChild(configLabel);

    },
    updateTime: function (dt) {
        if (this._cur_time > 0) {
            this._cur_time = this._cur_time - 1;
            this.readyLable.setString(this.getReadyTip());
            if (this._cur_time == 0) {
                this.unschedule(this.updateTime);
                if (MJModel.mj_table._isJieSan) {
                    //请求大结算
                    sendGameEndRecordReq();
                }
                //this.continueClick();
            }
        }
    },
    continueClick: function (ref) {
        if (MJModel.isOnVideo)return;
        if (MJModel.mj_table._isJieSan) {
            //请求大结算
            sendGameEndRecordReq();
            this.removeFromParent();
            MJModel.state = MJ_STATUS.MJ_GAME_FREE;
        }
        sendReady();

        this.removeFromParent();
        MJModel.state = MJ_STATUS.MJ_GAME_FREE;
    }
    ,
    getReadyTip: function () {
        return this._cur_time + "/";
    },
    updateContentView: function (ackGameEndJS) {
        //this.ackGameEnd = ackGameEndJS.gameend;
        this.ackGameEnd = ackGameEndJS;
        this.ackGameEndJS = ackGameEndJS;
        //输赢标志
        var seatId = MJModel.seatid;
        var score = this.ackGameEnd.Score[seatId];
        var effectName = "lose";
        if (score > 0) {
            effectName = "win";
        }
        this._win_effect(effectName);

        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);

        var itemHeight = 120;

        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;

            var countY = m;

            if (MJModel.mj_roomType == 1) {
                if (pos == 2) {
                    continue;
                }
            }

            if (MJModel.mj_roomType == 2) {
                if (pos == 1 || pos == 3) {
                    continue;
                }

                if (pos == 0) {
                    countY = 1;
                } else if (pos == 2) {
                    countY = 2;
                }
            }

            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 495 - count * itemHeight;
            var startX = 40;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX + 60, startY + 55));
            this.bgSpr.addChild(headLayer, 10);

            //上排牌 杠
            var ganghuLayer = this.createFanTypeLayer(seatid);
            this.bgSpr.addChild(ganghuLayer, 10);
            ganghuLayer.setPosition(cc.p(startX + 230, startY + 65));

            //下排牌
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX + 0, startY));
            this.bgSpr.addChild(handCardLayer);

            // this.createSpecialHuTip(startX + 785, startY + 40, seatid);
            this.createSpecialHuTip(startX + 865, startY + 40, seatid);
            this.createAllScoreLabel(startX + 865, startY + 70, seatid);

            // 输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX + 1100, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            //中马列表
            var maLayer = this.createMaLayer(seatid);
            if (maLayer) {
                maLayer.setPosition(cc.p(startX + 230, startY + 65));
                this.bgSpr.addChild(maLayer);
            }
            count++;
        }

        this.addPaoConfig();
    },
    addPaoConfig: function () {
        var str = ""
        if (MJModel.RoomConfigID.indexOf(1194002) != -1) {
            str = "跑1";
        }

        if (MJModel.RoomConfigID.indexOf(1194003) != -1) {
            str = "跑3";
        }

        if (MJModel.RoomConfigID.indexOf(1194004) != -1) {
            str = "跑5";
        }

        if (MJModel.RoomConfigID.indexOf(1194005) != -1) {
            str = "跑10";
        }

        var maPic = new cc.LabelTTF(str, "Arial", 22);
        maPic.setColor(this.leftColor);
        maPic.setAnchorPoint(cc.p(0.5, 0.5));
        maPic.setPosition(cc.p(50, 47));
        this.bgSpr.addChild(maPic);

    },
    createMaLayer: function (seatid) {
        return;
        var layer = null;
        layer = new cc.Layer();
        var mapaiList = [[0x51, 0x52, 0x51, 0x52], [0x51, 0x52, 0x51, 0x52], [0x51, 0x52, 0x51, 0x52], [0x51, 0x52, 0x51, 0x52]];
        if (mapaiList) {
            var startx = 10;
            if (mapaiList[seatid].length > 0) {
                var maPic = new cc.LabelTTF("花牌: ", "Arial", 22);
                maPic.setName("huapaiTip");
                maPic.setColor(this.leftColor);
                maPic.setAnchorPoint(cc.p(0.0, 0));
                maPic.setPosition(cc.p(startx));
                layer.addChild(maPic);

                var cardlist = mapaiList[seatid];
                for (var i = 0; i < cardlist.length; i++) {
                    var card = new MJCard();
                    card.setValue(cardlist[i], 0, CardType.Card_End, 0);
                    card.setAnchorPoint(cc.p(0.0, 0));
                    card.setScale(0.3);
                    card.setPosition(cc.p(startx + maPic.getContentSize().width + parseInt((i )) * 25, -5));
                    layer.addChild(card, 50 - i);
                }

            }

        }
        return layer;
    }
    ,
    createFanTypeLayer: function (seatid) {
        //牌型
        //---
        var huType = ["", "", "", ""];
        for (var i = 0; i < this.ackGameEnd.faninfo.length; i++) {
            var specialType = this.ackGameEnd.faninfo[i].SpecialType;

            switch (specialType) {
                case HuType.HU_ZIMO:
                case HuType.HU_PAOHU:
                case HuType.HU_QIANG_GANG:
                case HuType.HU_GANG_SHANG_HUA:
                case HuType.HU_DIANPAO:
                    for (var j = 0; j < this.ackGameEnd.faninfo[i].addfan.length; j++) {
                        var add_fan = this.ackGameEnd.faninfo[i].addfan[j];
                        var add_type = add_fan.AddType;
                        if (AddFanTypeArray.indexOf(add_type) != -1) {
                            huType[i] += AddFanNameArray[AddFanTypeArray.indexOf(add_type)] + " ";
                        }
                    }
                    if (specialType == HuType.HU_DIANPAO) {
                        huType[i] = "包赔 " + huType[i];
                    }
                    break;
            }

            if (specialType == HuType.HU_BEI_QIANG_GANG) {
                huType[i] = "包赔 被抢杠 " + huType[i];
            }
        }
        for (var i = 0; i < MJModel.mj_table._piaoResult.length; i++) {
            if (MJModel.mj_table._piaoResult[i] == 0) {
                huType[i] = "不放头 " + huType[i];
            }

            if (MJModel.mj_table._piaoResult[i] == 1) {
                var baseScore = MJModel.base_money;
                huType[i] = "放头x" + baseScore + " " + huType[i];
            }
        }

        if (this.ackGameEnd.EndGangInfo) {
            for (var i = 0; i < this.ackGameEnd.EndGangInfo.length; i++) {
                var gangscore = this.ackGameEnd.EndGangInfo[i].TotalGangScore;
                if (gangscore) {
                    var str = "";
                    if (gangscore > 0)str = "+" + gangscore;
                    if (gangscore < 0)str = gangscore;
                    huType[i] = huType[i] + "杠分" + str + " ";
                }
            }
        }

        var layer = new cc.Layer();
        var startx = 0;
        var y = 0;
        var maPic = new cc.LabelTTF(huType[seatid], "Arial", 24);
        maPic.setColor(this.leftColor);
        maPic.setAnchorPoint(cc.p(0.0, 0));
        maPic.setPosition(cc.p(startx, y + 7));
        layer.addChild(maPic);

        startx = maPic.getContentSize().width + 10;
        return layer;
    }
    ,
    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var path = "";
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5天和 6地和 7抢杠胡 8杠上开花 9花上添花
            switch (fanInfo.SpecialType) {
                case 1:
                    path = "RoomMJ/result2/zi_mo_icon.png";
                    break;
                case 2:
                    path = "RoomMJ/result2/pao_hu_icon.png";
                    break;
                case 3:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                case 5:
                    path = "RoomMJ/result2/qiang_gang_icon.png";
                    break;
                case 7:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                default:
                    break;
            }
            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setAnchorPoint(cc.p(0, 0.5));
                typeSprite.setPosition(cc.p(startX, startY));
                this.bgSpr.addChild(typeSprite);
                typeSprite.setScale(1.2);

            }
        }
    }
    ,
    createAllScoreLabel: function (startX, startY, seatid) {
        return;
        var ackGameEnd = this.ackGameEndJS;
        var endinfo = ackGameEnd.endinfo[seatid]


        var tagHu = this.ackGameEnd.faninfo[seatid].hucard;

        var gang_add = endinfo.gang_add;
        var lianbanker_add = endinfo.lianbanker_add;
        var hua_add = endinfo.hua_add;
        var sihua_add = endinfo.sihua_add;

        var hutypeStr = "";
        if (MJModel.banker_seatid == seatid) {
            hutypeStr += "连庄:" + ((lianbanker_add != null) ? lianbanker_add : 0);
        }
        if (tagHu) {
            if (hutypeStr != "") {
                hutypeStr += " ";
            }
            hutypeStr += "杠:" + ((gang_add != null) ? gang_add : 0);
            hutypeStr += " 花:" + ((hua_add != null) ? hua_add : 0);
            //hutypeStr += " 四花:" + ((sihua_add != null) ? sihua_add : 0);
        }

        var maPic = new cc.LabelTTF(hutypeStr, "Arial", 20);
        maPic.setColor(this.leftColor);
        maPic.setAnchorPoint(cc.p(0, 0));
        maPic.setPosition(cc.p(startX, startY));
        this.bgSpr.addChild(maPic);
    },
    //输赢分
    createScoreLayer: function (seatid) {
        var layer = new cc.Layer();
        var score = 0;
        if (this.ackGameEnd.Score && this.ackGameEnd.Score.length > seatid) score = this.ackGameEnd.Score[seatid];
        var width = 0;
        var path = getResPath("RoomMJ/result2/result_small_label_lose.png");
        if (score > 0) {
            path = getResPath("RoomMJ/result2/result_small_label_win.png");
        }
        var scoredes = ":";
        if (score == 0) scoredes = "";

        var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), path, 29, 37, '0');

        scoreLabel.setAnchorPoint(cc.p(0.0, 0.5));

        scoreLabel.setPosition(cc.p(width, 15));
        scoreLabel.setName("scoreLabel");
        layer.addChild(scoreLabel);

        if (Math.abs(score) < 10) {
            scoreLabel.setScale(1.5);
        } else if (Math.abs(score) < 100) {
            scoreLabel.setScale(1.3);
        } else if (Math.abs(score) < 1000) {
            scoreLabel.setScale(1.0);
        } else {
            scoreLabel.setScale(0.8);
        }
        return layer;
    }
    ,
});

var PiaoLayer = cc.Layer.extend({
    ctor: function () {
        this._super();
        var size = cc.director.getWinSize();
        var layout = new ccui.Layout();
        layout.setContentSize(size);
        layout.setAnchorPoint(cc.p(0, 0));
        layout.setPosition(cc.p(0, 0));
        layout.setTouchEnabled(true);
        layout.setSwallowTouches(true);
        layout.addClickEventListener(function (btn) {
        });
        this.addChild(layout);

        //添加蒙版
        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 70));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);
    },
    initPiao: function () {
        var self = this;
        var size = cc.director.getWinSize();
        var by = size.height / 2;
        var strs = ["lingqiu/action/btn_bufang.png", "lingqiu/action/btn_fangtou.png"];
        var dx = 300;
        var bx = size.width / 2 - dx * (strs.length - 1) * 0.5;
        for (var i = 0; i < strs.length; i++) {
            var submitBtn = new ccui.Button(getResPath(strs[i]), getResPath(strs[i]));
            submitBtn.setTag(i);
            submitBtn.setPosition(bx + i * dx, by);
            submitBtn.addClickEventListener(function (sender, evt) {
                self.removeFromParent(true);
                sendLingQiuPao(sender.getTag());
            });
            this.addChild(submitBtn);
        }
    },
});


//放头等待家界面
var PiaoWaitLayer = cc.Layer.extend({
    _isPiao: true,
    _isNotify: true,
    _items: [],
    ctor: function () {
        this._super();
    },
    initPiao: function (result) {
        var self = this;
        var size = cc.director.getWinSize();
        var bg = new cc.Sprite(getResPath("lingqiu/bg/wait_di_bg.png"));
        bg.setName("selectBg");
        bg.setPosition(MJConfig.getInfoPos());
        this.addChild(bg);
        this._bg = bg;

        var testData = result;

        this._items = [];
        for (var i = 0; i < MJModel.players.length; i++) {
            var player = MJModel.players[i];
            if (player.uid != -1) {
                this.addItem(player.name, testData[i]);
            }
        }
        this.updateItemPos();
    },

    addItem: function (name, type) {
        var size = this._bg.getContentSize();
        var str = "[ " + name + " ] ";
        if (type == 0) {
            str = str + "考虑中";
            this.leftColor = cc.color(135, 97, 69);
        } else {
            this.leftColor = cc.color(52, 205, 47);
            str = str + "已选择";
        }
        var item = new cc.LabelTTF(str, "Arial", 24);
        item.setAnchorPoint(cc.p(0.5, 0.5));
        item.setColor(this.leftColor);
        item.setPosition(cc.p(size.width / 2, size.height / 2));
        this._bg.addChild(item);
        this._items.push(item);
    },
    updateItemPos: function () {
        var size = this._bg.getContentSize();
        var offy = 25;
        var index = 0;
        var startY = 0;
        var allNum = this._items.length;

        if (allNum % 2 == 1) {
            startY = size.height / 2 + offy * parseInt(allNum / 2);
        } else {
            startY = size.height / 2 + offy * parseInt(allNum / 2) - offy / 2;
        }

        for (var i = 0; i < this._items.length; i++) {
            var opBtn = this._items[i];
            if (opBtn) {
                opBtn.setPosition(size.width / 2, startY - index * offy);
                index++;
            }
        }
        return index;
    },
    updatePiao: function (data) {
        this.removeAllItem();
        this._items = [];
        for (var i = 0; i < MJModel.players.length; i++) {
            var player = MJModel.players[i];
            if (player.uid != -1) {
                this.addItem(player.name, data[i]);
            }
        }
        this.updateItemPos();
    },
    removeAllItem: function () {
        this._bg.removeAllChildren();
        this._items = [];
    },
});
var sendLingQiuPao = function (v) {
    var packet = createPacket("proto.game.lingqiu.ReqChoosePiao");
    packet.num = v;
    sendPacket(packet, selfCMD.CLENT_ReqChoosePiao);
};
