/**
 * 饶平麻将
 * Created by sherard on 2018/5/28.
 * v = sanxi r = sanximj
 */

// 游金按钮消息
loadProtoFile("proto/shuozhougameproto.proto");
var ActionTypeMJ = {
    TYPE_QX_TING: 0x8000, //取消报听
    TYPE_Qiang: 0x40000,//抢拾
    TYPE_Shi: 0x20000, //拾
    TYPE_BAO_TING: 0x4000,//报听
};
var HuType = {
    HU_INVALID: 0,
    HU_ZIMO: 1,
    HU_PAOHU: 2,
    HU_HeiMo: 2,
    Hu_RuanMo: 1,
    HU_DIANPAO: 3,
    HU_BEIZIMO: 4,
    HU_QIANG_GANG: 5,
    HU_BEI_QIANG_GANG: 6,
    HU_YI_PAO_DUO_XIANG: 7,
    HU_GANG_SHANG_HUA: 8,
    HU_GANG_HOU_PAO: 9,
};
var sendQiangShiReq = function (isQiangShi) {
    var packet = createPacket("proto.game.shuozhoumj.ReqQiangShi");
    packet.ChairID = MJModel.seatid;
    packet.IsQiangShi = isQiangShi;
    sendPacket(packet, SEL_CMD.CLINET_MJ_QIANG_SHI);
};

var SEL_CMD = {
    SERVER_ACK_CHANGE_MODE: 6200, //修改模式返回
    SERVER_USER_UPDATE_CARD: 5080,
    SERVER_ENSURE_JOKER: 5019,  //开始翻癞子
    CLINET_MJ_QIANG_SHI: 1110, //开启或取消抢拾
};

var TuiDaoHu_MJ_TYPE = {
    18: "自摸",
    88: "报听"
};
var HUGANG =
{
    HUGANG_HUITOUGANG:123,            //回头杠
    HUGANG_ZHIGANG: 2,				//直杠
    HUGANG_WANGANG: 4,				//弯杠
    HUGANG_ANGANG: 8,				//暗杠
    HUGANG_DIANPAO: 16,			//点炮
    HUGANG_PAOHU: 32,				//炮胡
    HUGANG_DIANPENGGANG:33,     //点碰杠
    HUGANG_DIANGANG: 64,			//点杠
    HUGANG_BEIZIMO: 128,			//被自摸
    HUGANG_ZIMO: 256,				//自摸
    HUGANG_HUAZHU: 512,            //花猪
    HUGANG_DAJIAO: 1024,            //大叫
    HUGANG_BEIHUAZHU: 2048,            //被花猪赔付
    HUGANG_BEIDAJIAO: 4096,            //被大叫赔付

    //梅河自定义
    HUGANG_BAOPEI:0X400000,            //包赔，梅河新加
    HUGANG_XUANFENG:0x20000,           //旋风杠，梅河新加
    HUGANG_ZHONGFB:0x10000,            //中发白杠，梅河新加
    HUGANG_SANYAO:0x40000,              //三幺杠
    HUGANG_SANJIU:0x80000,              //三九杠
    HUGANG_BUGANG:0x100000,             //补杠
    HUGANG_QUETUIANGANG:0x8000,         //瘸腿暗杠
    HUGANG_QUETUIZHIGANG:0x200000,      //瘸腿直杠
    HUGANG_SIGUIYI:0X2000000,           //四归一

    //自定义部分
    HUGANG_HUAPAI: 250,                //广东麻将花牌
    HUGANG_PIAO: 260,                  //飘
    HUGANG_TINGPAI: 261,               //听牌
    HUGANG_TUIGANG: 270,               //退杠
    HUGANG_BEITUIGANG: 271,            //被退杠
    HUGANG_CHAOZHUANG: 280,            //抄庄
    HUGANG_BEICHAOZHUANG: 281,         //被抄庄

    HUGANG_BAOPAI: 500,            //包牌
    HUGANG_BEIBAOPAI: 501,            //被包牌
    HUGANG_SHABAO: 502,            //杀报
    HUGANG_BEISHABAO: 503,            //被杀报
}
var AddFanNameArray = {
    1: "九莲宝灯",
    2: "大四喜",
    3: "小四喜",
    4: "大三元",
    5: "四暗刻",
    6: "十八罗汉",
    7: "幺九",
    8: "全风",
    9: "小三元",
    10: "清幺九",
    11: "清对",
    12: "清碰",
    13: "混碰",
    14: "清一色",
    15: "混一色",
    16: "碰碰胡",
    17: "平胡",
    18: "鸡胡",
    19: "天胡",
    20: "地胡",
    21: "人胡",
    22: "抢杠胡",
    23: "海底捞月",
    24: "杠上花",
    25: "清七对",
    26: "清龙七对",
    27: "豪华七小对",
    28: "全求人",
    29: "杠上炮",
    30: "门前清",
    31: "风一色",
    32: "门前清+清一色",
    33: "清一色+四暗刻",
    34: "海底炮",
    35: "十三幺",
    36: "七小对",
    37: "带幺九",
    38: "平胡",
    39: "一条龙",
    40: "清一条龙",
    41: "四鬼胡",
    42: "无鬼胡",
    43: "清全求人",
    44: "庄家",
    45: "杠",

    512: "四喜",
    513: "板板胡",
    514: "缺一色",
    515: "六六顺",
    516: "将将胡",
    517: "四个红中胡",
    518: "抢杠全包",
    519: "杠爆全包",
    524: "花单钓",
    525: "花钓花",
    526: "双花钓花",
    527: "三花钓花",
    528: "双豪华七小对",
    529: "三豪华七小对",
    530: "清双龙七对",
    531: "清三龙七对",
    532: "报九全包",
    543: "将一枝花",
    544: "单色一枝花",
    545: "一只鸟",
    546: "三同",
    547: "中途四喜",
    548: "节节高",
    549: "中途六六顺",
    557: "金童玉女",
};
var MJTable_ShuoZhouTDH = MJTable.extend({
    tag: "MJTable_ShuoZhouTDH",
    _curLaizi: -1,
    _curLaizipi: -1,
    _curLaizipi2: -1,
    PLAY_ID: {
        BaoTing: 83910001,
        DaiFeng: 83910002,
        HuangZhuang: 83910003,
        GuoHu: 83910004,
        AnGang: 83910005,
        ThourPeople: 83920001,
        ThreePeople: 83920002,
        PingHu: 83930001,
        DaHu: 83930002,
        TwoPeople: 83920003,
        FangZuoBi: 84380001,
        QueYiMen: 85380001,
        LaiZI: 83910006,
        TingHou: 83910007,
        ZiMo: 83910008,
        LunZhuang: 83910009,
        YiFenZhong: 85410001,
        SanFenZhong: 85410002,
        WuFenZhong: 85410003,
    },
    //暗杠可见标志位
    AnGangKeJian: false,
    //判断是否带风牌
    IsDaiFeng: false,
    //是否抢拾标志位
    IsQiangShi: [0, 0, 0, 0],
    //是否轮到我自己出牌
    IsMyOutCard: false,
    IsBaoTingCard: 0,
    isquxiao: false,
    Player_num: 4,
    _fanmain_card: [-1, -1, -1, -1],
    _baotingStates: [-1, -1, -1, -1],
    preLoadSound: function () {
        //TODO
    },

    preLoadAnim: function () {
        //TODO
    },

    getMjTypePath: function () {
        return getResPath("shuozhoutdh/mj_shanxituidaohu.png");
    },

    isSupportBigEnd: function () {
        return true;
    },

    _init_extend: function () {
        this.initMJAction();
        this.initMJCard();
        this.initMJPlayer();
        this.initMJTips();
        this.initMJConfig();
        this.initMJResult();
        this.initMJHelp();
        this.initMJDialogs();
        this.initMJPublic();
        this.initUtils();
    },
    initUtils: function () {
        Utils.createCircleAvatarBypng = function (url, defualtFile, clipfile, size) {
            try {
                savePath = url;
                var avatar = new cc.Sprite(savePath);
                if (avatar == null) {
                    avatar = new cc.Sprite(defualtFile);
                }
                Utils.makeCircleSprite(avatar, savePath, clipfile, size);
                return avatar;

            } catch (e) {
                var avatar = new cc.Sprite(defualtFile);
                var s_izex = size.width / avatar.getContentSize().width;
                var s_izey = size.height / avatar.getContentSize().height;
                avatar.setScale(s_izex, s_izey);
                return avatar;
            }
        };
    },
    initMJPublic: function () {
        MJRecordDetail.prototype.updateAvatar = function (pos) {
            var headIcon = this.headIcons[pos];
            var seatid = MJModel.getSeatidByPos(pos);
            var player = MJModel.players[seatid];
            var headPic = null;
            if (pos != 0 && MJModel.mj_isFZB && !MJModel.isOnVideo) {
                headPic = Utils.createCircleAvatarBypng(getResPath("RoomMJ/head_room2.png"), getResPath("RoomMJ/mj_public/common/dialog/zhanji/head_default.png"), "Avatars/user4_unlogin.png", cc.size(85, 85));
            } else {
                headPic = Utils.createCircleAvatar(player.avatar, getResPath("RoomMJ/mj_public/common/dialog/zhanji/head_default.png"), "Avatars/user4_unlogin.png", cc.size(85, 85));
            }
            Utils.findNode(headIcon, "head").addChild(headPic);

            var nameText = Utils.findNode(headIcon, "text");
            nameText.ignoreContentAdaptWithSize(true);
            if (player.name != "") {
                Utils.findNode(headIcon, "nameBg").setVisible(true);
                if (pos != 0 && MJModel.mj_isFZB && !MJModel.isOnVideo) {
                    nameText.setString(Utils.parseName(6, __String.createWithFormat("玩家%1", pos)));
                } else {
                    nameText.setString(Utils.parseName(6, player.name));
                }
            } else {
                Utils.findNode(headIcon, "nameBg").setVisible(false);
            }

        };
    },
    initMJDialogs: function () {
        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(false);
        };
        Setting.prototype.showPaiBanView = function () {
            this._gameSettingLayer.getChildByName("light_title").setVisible(false);
            this.checkboxs_gamesetting["paiban_horizontal"].setVisible(false);
            this.checkboxs_gamesetting["paiban_vertical"].setVisible(false);
            //this.checkboxs_gamesetting["table_25d"].setVisible(false);
            //var size = cc.director.getWinSize();
            //this.checkboxs_gamesetting["table_2d"].setPosition(cc.p(size.width / 2 - 150, size.height - 500));
        };
        Setting.prototype.initUI = function () {
            var uiJson = ccs.load(getResPath("shuozhoutdh/public/setting.json"));
            var uiNode = uiJson.node;
            var self = this;
            var size = cc.director.getWinSize();
            var bg = uiNode.getChildByName("bg");
            bg.removeFromParent();
            bg.setPosition(size.width / 2, size.height / 2);
            this.addChild(bg);
            this._bg = bg;
            this._settingLayer = bg.getChildByName("setting");
            this._gameSettingLayer = bg.getChildByName("gamesetting");

            //init button
            {
                var btns_node = bg.getChildByName("btns");
                var cs = btns_node.getChildren();
                for (var i in cs) {
                    var btn = cs[i];
                    if (btn) {
                        btn.addClickEventListener(function (sender, evt) {
                            self.btnsCallBack(sender);
                        });
                        this.btns[btn.getName()] = btn;
                    }
                }
            }
            this.initSetting();
            this.initGameSetting();
            this.showPaiBanView(false);
        };

        Setting.prototype.initSetting = function () {
            var self = this;
            //init slider
            {
                var btns_node = this._settingLayer.getChildByName("slider");
                var cs = btns_node.getChildren();
                for (var i in cs) {
                    var btn = cs[i];
                    if (btn) {
                        btn.addEventListener(function (slider, event) {
                            self.setting_slidersCallBack(slider, event);
                        });

                        if (btn.getName() == "yinxiao") {
                            btn.setPercent(ZJHModel.getInstance().sound * 100);
                        }

                        if (btn.getName() == "yinyue") {
                            btn.setPercent(ZJHModel.getInstance().bgMusic * 100);
                        }
                    }
                }
            }

            //init checkboxs
            {
                var btns_node = this._settingLayer.getChildByName("checkbox");
                var cs = btns_node.getChildren();
                for (var i in cs) {
                    var btn = cs[i];
                    if (btn) {
                        btn.addEventListener(function (slider, event) {
                            self.setting_selectedStateEvent(slider, event);
                        });
                        this.checkboxs_setting[btn.getName()] = btn;
                    }

                    btn.setEnabled(true);
                    btn.setSelected(false);

                    if (btn.getName().indexOf(MJModel.fangyan) != -1) {
                        btn.setSelected(true);
                        btn.setEnabled(false);
                    }

                    if (btn.getName().indexOf(MJModel.yinyue) != -1) {
                        btn.setSelected(true);
                        btn.setEnabled(false);
                    }

                }
            }

            this.checkboxs_setting["zhendong"].setSelected(ZJHModel.getInstance().vibrate == 1);
            this.checkboxs_setting["hudong"].setSelected(MJModel.hudong == 1);
            this.checkboxs_setting["danjichupai"].setSelected(MJModel.danjichupai == 1);

            this.doSupportFangYan();
            this.doSupportYinYue();

        };


        Setting.prototype.setting_selectedStateEvent = function (sender, type) {
            var name = sender.getName();
            switch (type) {
                case  ccui.CheckBox.EVENT_UNSELECTED:
                    if (name == "zhendong") {
                        cc.sys.localStorage.setItem("vibrate", 0);
                        ZJHModel.getInstance().vibrate = 0;
                        JsUtils.postNotifi("save_setting");
                    }
                    else if (name == "hudong") {
                        cc.sys.localStorage.setItem("hudong", 0);
                        MJModel.hudong = 0;
                    } else if (name == "danjichupai") {
                        cc.sys.localStorage.setItem("danjichupai", 0);
                        MJModel.danjichupai = 0;
                        JsUtils.postNotifi("save_setting");
                    }
                    break;

                case ccui.CheckBox.EVENT_SELECTED:
                    if (name.indexOf("fangyan_") != -1) {
                        for (var i in this.checkboxs_setting) {
                            var btn = this.checkboxs_setting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("fangyan_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        MJModel.fangyan = name.split("_")[1];
                        cc.sys.localStorage.setItem("mj_fangyan", MJModel.fangyan);
                    }
                    else if (name.indexOf("yinyue_") != -1) {
                        for (var i in this.checkboxs_setting) {
                            var btn = this.checkboxs_setting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("yinyue_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        MJModel.yinyue = name.split("_")[1];
                        cc.sys.localStorage.setItem("mj_yinyue", MJModel.yinyue);
                        MJModel.mj_table.reflashBgMusic();
                    }
                    else if (name == "zhendong") {
                        cc.sys.localStorage.setItem("vibrate", 1);
                        ZJHModel.getInstance().vibrate = 1;
                        JsUtils.postNotifi("save_setting");
                    }
                    else if (name == "hudong") {
                        cc.sys.localStorage.setItem("mj_hudong", 1);
                        MJModel.hudong = 1;
                    } else if (name == "danjichupai") {
                        cc.sys.localStorage.setItem("danjichupai", 1);
                        MJModel.danjichupai = 1;
                        JsUtils.postNotifi("save_setting");
                    }
                    break;

                default:
                    break;
            }
        };


        Setting.prototype.gamesetting_selectedStateEvent = function (sender, type) {
            var name = sender.getName();
            switch (type) {
                case  ccui.CheckBox.EVENT_UNSELECTED:
                    break;

                case ccui.CheckBox.EVENT_SELECTED:
                    if (name.indexOf("fontSize_") != -1) {
                        for (var i in this.checkboxs_gamesetting) {
                            var btn = this.checkboxs_gamesetting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("fontSize_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        this.mj_fontSize = name.split("_")[1];
                    }
                    else if (name.indexOf("font_") != -1) {
                        for (var i in this.checkboxs_gamesetting) {
                            var btn = this.checkboxs_gamesetting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("font_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        this.mj_font = name.split("_")[1];
                    }
                    else if (name.indexOf("style_") != -1) {
                        for (var i in this.checkboxs_gamesetting) {
                            var btn = this.checkboxs_gamesetting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("style_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        this.mj_style = name.split("_")[1];
                    }
                    else if (name.indexOf("light_") != -1) {
                        for (var i in this.checkboxs_gamesetting) {
                            var btn = this.checkboxs_gamesetting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("light_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        this.mj_light = name.split("_")[1];
                    }
                    else if (name.indexOf("paiban_") != -1) {
                        for (var i in this.checkboxs_gamesetting) {
                            var btn = this.checkboxs_gamesetting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("paiban_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        this.mj_paiban = name.split("_")[1];
                    }
                    else if (name.indexOf("table_") != -1) {
                        for (var i in this.checkboxs_gamesetting) {
                            var btn = this.checkboxs_gamesetting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("table_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        this.mj_table_view = name.split("_")[1];
                        this.showPaiBanView(false);
                    }
                    break;

                default:
                    break;
            }
        };
        PlayerInfo.prototype.updateInfo = function () {
            var hasnocity = false;
            var hastoonear = false;
            var playerNums = 4;
            if (MJModel.mj_roomType == 1) {
                playerNums = 3;
            } else if (MJModel.mj_roomType == 2) {
                playerNums = 2;
            }
            for (var i = 0; i < playerNums; i++) {
                var player = MJModel.players[i];
                var playerData = this.getPlayerData(player.uid);
                var pos = MJModel.getPosBySeatid(i);
                var playerUI = this.players.getChildByName("player" + pos);
                var avatar = playerUI.getChildByName("avatar");
                var name = playerUI.getChildByName("name");
                var city = playerUI.getChildByName("city");
                city.stopAllActions();
                avatar.removeAllChildren();
                name.setString("");
                name.ignoreContentAdaptWithSize(true);

                city.setString("");
                city.ignoreContentAdaptWithSize(true);
                if (player.uid <= 0) {
                    city.setString("");
                    var m_pAvatar = new cc.Sprite("Avatars/user4_unlogin.png");
                    m_pAvatar.setScale(85 / m_pAvatar.getContentSize().width, 85 / m_pAvatar.getContentSize().height);
                    avatar.addChild(m_pAvatar);
                } else {
                    var m_pAvatar = null;
                    if (pos != 0 && MJModel.mj_isFZB && !MJModel.isOnVideo) {
                        m_pAvatar = Utils.createCircleAvatarBypng(getResPath("RoomMJ/head_room2.png"), "Avatars/user4_unlogin.png", "Avatars/user4_unlogin.png", cc.size(85, 85));
                    } else {
                        m_pAvatar = Utils.createCircleAvatar(player.avatar, "Avatars/user4_unlogin.png", "Avatars/user4_unlogin.png", cc.size(85, 85));
                    }
                    avatar.addChild(m_pAvatar);
                    if (pos != 0 && MJModel.mj_isFZB && !MJModel.isOnVideo) {
                        name.setString(__String.createWithFormat("玩家%1", pos));
                    } else {
                        name.setString(player.name);
                    }
                    //city.setColor(cc.color(255, 255, 255));
                    if (this.isNoData(playerData)) {
                        hasnocity = true;
                        //city.setColor(cc.color(255, 0, 0));
                        city.setString("未检测到位置");
                        //city.runAction(cc.sequence(cc.moveBy(0.5, cc.p(0, 5)), cc.moveBy(0.5, cc.p(0, -5))).repeatForever());
                    } else {
                        city.setString(Utils.parseName(10, playerData.city));
                    }
                }
            }
            var cs = this.julitips.getChildren();
            for (var i in cs) {
                var tips = cs[i];
                if (!tips)continue;
                var name = tips.getName();
                var ps = name.split("_");
                var label = tips.getChildByName("num");
                var s1 = MJModel.getSeatidByPos(parseInt(ps[0]));
                var s2 = MJModel.getSeatidByPos(parseInt(ps[1]));
                var p1 = MJModel.players[s1];
                var p2 = MJModel.players[s2];

                tips.getChildByName("hong").setVisible(false);
                tips.getChildByName("lv").setVisible(false);
                tips.getChildByName("hong").setScaleX(1);
                tips.getChildByName("lv").setScaleX(1);
                tips.getChildByName("hong").stopAllActions();
                tips.getChildByName("lv").stopAllActions();
                label.setString("");
                label.ignoreContentAdaptWithSize(true);

                if (!p1 || !p2 || p1.uid <= 0 || p2.uid <= 0) {
                    continue;
                }

                var playerData1 = this.getPlayerData(p1.uid);
                var playerData2 = this.getPlayerData(p2.uid);

                if (this.isNoData(playerData1)) {
                    continue;
                }

                if (this.isNoData(playerData2)) {
                    continue;
                }

                if (playerData1.city != playerData2.city) {
                    continue;
                }

                var dis = Utils.getDistance(playerData1.latitude, playerData1.longitude, playerData2.latitude, playerData2.longitude);
                tips.setVisible(true);
                if (dis >= 1000) {
                    var tip = tips.getChildByName("lv");
                    tip.setVisible(true);
                    var dis_f = parseFloat(dis / 1000);
                    label.setString(dis_f.toFixed(1) + "千米");
                    tip.setScaleX((label.getContentSize().width + 20) / tip.getContentSize().width);
                    label.setScaleX(1 / tip.getScaleX());
                } else {
                    label.setString(dis + "米");
                }

                if (dis <= 100) {
                    tips.getChildByName("hong").setVisible(true);
                    //tip.runAction(cc.sequence(cc.moveBy(0.5, cc.p(0, 5)), cc.moveBy(0.5, cc.p(0, -5))).repeatForever());
                    hastoonear = true;
                } else {
                    tips.getChildByName("lv").setVisible(true);
                }
            }

            this.warningTip.setVisible(false);
            this.btns["jieshan"].setVisible(false);
            this.btns["continue"].setVisible(false);
            this.warningTip.stopAllActions();
            if (hasnocity || hastoonear) {
                this.warningTip.setVisible(true);
                this.btns["jieshan"].setVisible(true);
                this.btns["continue"].setVisible(true);
                this.warningTip.runAction(cc.sequence(cc.delayTime(1), cc.hide(), cc.delayTime(0.1), cc.show()).repeatForever());
                this.warningTip.ignoreContentAdaptWithSize(true);
                if (hasnocity && hastoonear) {
                    this.warningTip.setString("* 发现距离过近、未检测到位置的玩家，是否解散？");
                } else if (hasnocity) {
                    this.warningTip.setString("* 发现未检测到位置的玩家，是否解散？");
                } else if (hastoonear) {
                    this.warningTip.setString("* 发现距离过近的玩家，是否解散？");
                }
            }

            MJModel.mj_table.room_Action.updateGPSTip(hasnocity, hastoonear);
            if (MJModel.mj_table.pre_scene) {
                MJModel.mj_table.pre_scene.updateGPSTip(hasnocity, hastoonear);
            }
        };

    },
    _pkg_id: 0,

    initRoom: function () {
        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];

            MJModel.mj_suport_fangyan = 1;
            MJModel.mj_fontSize = "dahao";
            MJModel.mj_font = "jianjie";
            MJModel.mj_bg_use = 1;
            MJModel.shareType = 1;
            MJModel.isSupportRealTimeVoices = true;
            MJModel.mj_double_click_style = 1;
            MJModel.mj_isFZB = false;
            MJModel.mj_roomType = 0;
            MJModel.mj_public_style = 1;
            MJModel.fangyan = "fangyan1";
            this.mj_roomType = 0;
            if (this._pkg_id == 3564 || this._pkg_id == 3320) { //4人
                MJModel.mj_roomType = 0;
                this.mj_roomType = 0;
            }
            if (this._pkg_id == 3565 || this._pkg_id == 3321) { //3人
                MJModel.mj_roomType = 1;
                this.mj_roomType = 1;
            }
            if (this._pkg_id == 3566 || this._pkg_id == 3322) { //2人
                MJModel.mj_roomType = 2;
                this.mj_roomType = 2;
            }
        } catch (e) {
            Log(this, e);
        }

        var danjichupai = cc.sys.localStorage.getItem("danjichupai");
        if (danjichupai) MJModel.danjichupai = danjichupai;

        var danjichupai = cc.sys.localStorage.getItem("danjichupai");
        cc.log("shanxi danjichupai=", danjichupai);
        if (danjichupai) MJModel.danjichupai = danjichupai;
        this._init_extend();

        this._super();

        MJModel.mj_paiban = "horizontal";
        //this.schedule(this.test, 1.0);
    },

    test: function (dt) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;


        if (tempCount == 5 && true) {
            var packet = {
                "gameend": {
                    "UserCard": [{
                        "ChangeableCardsLen": 13,
                        "ChangeableCards": [34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 38, 41, 41],
                        "FixedCardsLen": 0,
                        "stFixedCards": [],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 10,
                        "ChangeableCards": [3, 3, 3, 35, 35, 37, 39, 39, 52, 52],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{"CardData": 8, "state": 4, "chairID": 0, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }],
                    "Score": [2, -2],
                    "EndState": 0,
                    "EndGangInfo": [{"Gang": [], "TotalGangScore": -1}, {
                        "Gang": [{"GangType": 4, "GangCard": 8}],
                        "TotalGangScore": 1
                    }],
                    "faninfo": [{
                        "chairid": 0,
                        "SpecialType": 2,
                        "FanNum": 9,
                        "addfan": [{"AddType": 14, "AddNum": 3, "AddType2": null}, {
                            "AddType": 88,
                            "AddNum": 0,
                            "AddType2": null
                        }],
                        "hucard": 37,
                        "DianPao": []
                    }, {"chairid": 1, "SpecialType": 3, "FanNum": 0, "addfan": [], "hucard": 0, "DianPao": []}],
                    "money": [1002, 998],
                    "ts": 1552448226,
                    "md5": []
                }, "laizicard": 255, "ShiCards": [{"card": []}, {"card": []}]
            };
            this.handler_server_game_end_bc(packet);
        }
    },

    initMJHelp: function () {
        HelpBox.prototype.image = null;
        HelpBox.prototype.initTxt = function () {
            this.image = new ccui.ImageView(getResPath("shuozhoutdh/txt_bg.png"));
            this.image.setScale9Enabled(true);
            this.image.setCapInsets(cc.rect(40, 25, 18, 13));
            this.image.setAnchorPoint(cc.p(0.5, 0));
            this.image.setVisible(false);
            this.image.setPosition(cc.p(200, 200));


            var content = "勾选时，听牌后，杠后牌型仍有听口就可杠；未勾选时，听牌后，少听口或变听口都不可以杠";
            var isSingleLine = true;
            var text = new cc.LabelTTF(content, "Thonburi", 25);
            if (text.getContentSize().width > 300) {
                text = new cc.LabelTTF(content, "Thonburi", 25, cc.size(300, 0));
                isSingleLine = false;
            }

            text.setColor(cc.color(0x71, 0x2f, 0x07));
            text.setAnchorPoint(cc.p(0, 0));
            this.image.addChild(text);

            var textSize = text.getContentSize();
            this.image.setContentSize(cc.size(textSize.width + 20, isSingleLine ? textSize.height + 35 : textSize.height + 27));

            var tx = 15;
            var ty = 15;

            text.setPosition(cc.p(tx, ty));

        };

        HelpBox.prototype.initUI = function () {
            //规则获取平台的
            var webView = new ccui.WebView();
            webView.setName("webView");
            var detailLayout = this.getUI("detailLayout");
            webView.setAnchorPoint(cc.p(0, 0));
            webView.setContentSize(detailLayout.getContentSize());
            webView.loadURL(ZJHModel.getInstance().gameHelpUrl);
            detailLayout.addChild(webView);

            this.initTxt();

            var configLayout = this.getUI("configLayout");
            var listViewSize = configLayout.getContentSize();
            var ruleListView = ccui.ListView();
            ruleListView.setAnchorPoint(cc.p(0, 0));
            ruleListView.setBounceEnabled(false);
            ruleListView.setScrollBarEnabled(true);
            ruleListView.setDirection(ccui.ScrollView.DIR_VERTICAL);
            ruleListView.setContentSize(listViewSize);
            ruleListView.setItemsMargin(2);
            ruleListView.setGravity(ccui.ListView.GRAVITY_CENTER_HORIZONTAL);
            configLayout.addChild(ruleListView);

            var roomData = MJModel.roomData["gameRoom"]["innerWayRecommend"][0];
            var fistBao = roomData["gameCustomClassifyVOList"];
            for (var i = 0; i < fistBao.length; i++) {
                var pointJson = fistBao[i]["gameCustomPlayValInfoList"];
                if (!pointJson || !fistBao[i]["platformVisible"]) {
                    continue;
                }

                var isHave = false;

                for (var k = 0; k < pointJson.length; k++) {
                    if (pointJson[k]["iptValue"]) {
                        isHave = true;
                        break;
                    }
                }


                if (isHave == false) {
                    continue;
                }

                var cell = new ccui.Layout();
                var count = pointJson.length % 3 == 0 ? pointJson.length / 3 : parseInt(pointJson.length / 3) + 1;
                cell.setContentSize(cc.size(listViewSize.width, 50 + count * 50));
                ruleListView.addChild(cell);

                var title = cc.LabelTTF(roomData["gameCustomClassifyVOList"][i]["classifyName"], ".SFUIDisplay-Semibold", 30, cc.size(listViewSize.width, 32), cc.TEXT_ALIGNMENT_LEFT);

                title.setColor(cc.color(0x71, 0x2f, 0x07));
                title.setAnchorPoint(cc.p(0, 0.5));
                title.setPosition(cc.p(20, cell.getContentSize().height - 15));
                cell.addChild(title, 2);

                for (var j = 0; j < pointJson.length; j++) {
                    var isSelect = true;
                    if (!pointJson[j]["iptValue"]) {
                        isSelect = false;
                    }

                    var selecBtn = null;
                    if (roomData["gameCustomClassifyVOList"][i]["choiceType"] == 1 || roomData["gameCustomClassifyVOList"][i]["choiceType"] == 2) {
                        //1、2单选双选

                        selecBtn = this.selectBtnDraw(pointJson[j]["playName"], isSelect, roomData["gameCustomClassifyVOList"][i]["choiceType"]);
                        selecBtn.setAnchorPoint(cc.p(0, 1));
                        selecBtn.setPosition(cc.p(10 + j % 3 * (300), cell.getContentSize().height - 60 - parseInt(j / 3) * 50));
                        cell.addChild(selecBtn, 2);


                        var self = this;
                        if (pointJson[j]["iptValue"] == 83910007) {
                            var btn = new ccui.Button();
                            btn.loadTextures(getResPath("shuozhoutdh/help.png"), "", "");
                            btn.setPosition(cc.p(selecBtn.getPosition().x + 250, selecBtn.getPosition().y));
                            btn.setName("help");
                            cell.addChild(this.image, 1000);
                            btn.addClickEventListener(function (sender, evt) {
                                self.image.setPosition(cc.p(sender.getPosition().x - 20, sender.getPosition().y + 15));
                                if (self.image.isVisible()) {
                                    self.image.setVisible(false);
                                } else {
                                    self.image.setVisible(true);
                                }
                            });
                            cell.addChild(btn, 5);
                        }
                    }
                }
            }
        };
    },


    initMJConfig: function () {
        var super_getPlayerPos = MJConfig.getPlayerPos;
        MJConfig.getPlayerPos = function (pos) {
            var p = super_getPlayerPos.call(this, pos);
            if (pos == 0) {
                if (MJModel.mj_bg_use == 0) {
                    p.y -= 45;
                    p.x -= 5;
                } else {
                    p.y -= 0;
                }
            }
            return p;
        };

        MJConfig.getQiangCardPos = function (pos, index) {
            var point = cc.p(0, 0);
            var size = cc.director.getWinSize();
            if (MJModel.mj_bg_use == 1) {


                if (MJModel.mj_font == "jianjie" && MJModel.mj_fontSize == "dahao") {
                    if (pos == 0) {
                        point.x = 45 + index * 70;
                        point.y = 62;
                    } else if (pos == 1) {
                        point.x = size.width - 150;
                        point.y = 200 + index * 30;
                    } else if (pos == 2) {
                        point.x = size.width - 280 - index * 37;
                        point.y = size.height - 100;
                    } else if (pos == 3) {
                        point.x = 150;
                        point.y = size.height - 125 - index * 30;
                    }
                } else {
                    if (pos == 0) {
                        point.x = 45 + index * 80;
                        point.y = 62;
                    } else if (pos == 1) {
                        point.x = size.width - 150;
                        point.y = 200 + index * 35;
                    } else if (pos == 2) {
                        point.x = size.width - 280 - index * 38;
                        point.y = size.height - 100;
                    } else if (pos == 3) {
                        point.x = 150;
                        point.y = size.height - 150 - index * 35;
                    }
                }

            } else {
                if (pos == 0) {
                    point.x = 45 + index * 74;
                    point.y = 62;
                } else if (pos == 1) {
                    point.x = size.width - 170 - index * 8;
                    point.y = 200 + index * 35;
                } else if (pos == 2) {
                    point.x = size.width - 300 - index * 35;
                    point.y = size.height - 50;
                } else if (pos == 3) {
                    point.x = 265 - index * 8;
                    point.y = size.height - 100 - index * 35;
                }
            }

            return point;
        };


        MJConfig.getQiangCardOrder = function (pos, index) {
            var order = [
                [
                    400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
                ],
                [
                    13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
                ],
            ];
            return order[pos][index];
        };


        var superCardStr = MJConfig.getCardStr_new;
        MJConfig.getCardStr_new = function (value, pos, type, index) {

            if (MJModel.mj_bg_use == 1 && MJModel.mj_font == "jianjie" && MJModel.mj_fontSize == "dahao" && pos == 2) {
                var _reValue = "";
                var c = Utils.toHex2(value);
                if (type == CardType.Card_Hand) {
                    _reValue = "hand_2/00.png";
                } else if (type == CardType.Card_Outing) {
                    _reValue = "hand_0/" + c + ".png";
                } else if (type == CardType.Card_Peng || type == CardType.Card_End) {
                    _reValue = "peng_end_2/" + c + ".png";
                } else if (type == CardType.Card_Mo) {
                    _reValue = "hand_2/00.png";
                } else if (type == CardType.Card_Out || type == CardType.Card_Hu) {
                    _reValue = "out_2/" + c + ".png";
                } else if (type == CardType.Card_Public) {
                    _reValue = "public_2/" + c + ".png";
                }
            } else {
                _reValue = superCardStr.call(this, value, pos, type, index);
            }

            return _reValue;
        };


        MJConfig.getNewIndex = function (pos, index, type) {
            if (type == CardType.Card_Hu) {
                return index % 8;
            }

            if (type == CardType.Card_Out) {
                if (MJModel.mj_roomType == 2) {
                    return index % 60;
                } else {
                    if ((pos == 0 || pos == 2) && MJModel.mj_bg_use == 1) {
                        return index % 36;
                    } else {
                        return index % 40;
                    }
                }
            }


        };

        var super_mjconfig_getOutCardOrder = MJConfig.getOutCardOrder;
        MJConfig.getOutCardOrder = function (pos, index) {
            var order = null;
            index = this.getNewIndex(pos, index, CardType.Card_Out);
            if (MJModel.mj_bg_use == 1) {
                if (MJModel.mj_roomType == 2) {
                    order = [
                        [
                            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        ],
                        [
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        ],
                        [
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                        ],
                        [
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        ],
                    ];
                } else {
                    order = [
                        [
                            3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                            2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        ],
                        [
                            9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                            9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                            9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                            9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                        ],
                        [
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                            3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                        ],
                        [
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                        ],
                    ];
                }

            } else {
                if (MJModel.mj_roomType == 2) {
                    order = [
                        [
                            0, 1, 2, 3, 4, 5,
                            6, 7, 8, 9, 10, 11, 12, 13,
                            14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
                            26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
                            38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
                        ],
                        [
                            25, 24, 23, 22, 21, 20,
                            19, 18, 17, 16, 15, 14, 13, 12,
                            11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                        ],
                        [
                            59, 58, 57, 56, 55, 54, 53, 52, 51, 50,
                            49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38,
                            37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26,
                            25, 24, 23, 22, 21, 20,
                            19, 18, 17, 16, 15, 14, 13, 12,
                            11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                        ],
                        [
                            20, 21, 22, 23, 24, 25,
                            12, 13, 14, 15, 16, 17, 18, 19,
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                        ],
                    ];
                } else {
                    order = [
                        [
                            0, 1, 2, 3, 4, 5,
                            6, 7, 8, 9, 10, 11, 12, 13,
                            14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
                            26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
                            38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                        ],
                        [
                            40, 39, 38,
                            37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26,
                            25, 24, 23, 22, 21, 20,
                            19, 18, 17, 16, 15, 14, 13, 12,
                            11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                        ],
                        [
                            40, 39, 38,
                            37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26,
                            25, 24, 23, 22, 21, 20,
                            19, 18, 17, 16, 15, 14, 13, 12,
                            11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                        ],
                        [
                            34, 35, 36, 37, 38, 39,
                            26, 27, 28, 29, 30, 31, 32, 33,
                            14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,

                        ],
                    ];
                }
            }
            return order[pos][index];
        };

        var super_mjconfig_getOutCardPos = MJConfig.getOutCardPos;
        MJConfig.getOutCardPos = function (pos, index) {

            if ((pos == 1 || pos == 3) && MJModel.mj_bg_use == 1 && MJModel.mj_paiban == "vertical") {
                if (MJModel.mj_bg_use == 1) {
                    if (pos == 0 || pos == 2) {
                        index = index % 26;
                    } else {
                        if (MJModel.mj_paiban == "vertical") {
                            index = index % 28;
                        } else {
                            index = index % 30;
                        }
                    }
                }
                return this.getWorldPosition("out_v_" + pos, "o_" + index);
            }

            index = this.getNewIndex(pos, index, CardType.Card_Out);

            return this.getWorldPosition("out_" + pos, "o_" + index);

        };
    },

    initMJAction: function () {
        var selfTable = this;
        MJAction.prototype.qiangshi = null;

        var superCtor = MJAction.prototype.ctor;
        MJAction.prototype.ctor = function () {
            superCtor.call(this);
            var self = this;
            var size = cc.director.getWinSize();
            {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("RoomMJ/action/baoting1.png"), "", "");
                this.actions["baoting"] = btn;
                btn.setName("baoting");
                btn.addClickEventListener(function (sender, evt) {
                    self.btnCallback(sender);
                });
                btn.setVisible(false);
                this.addChild(btn);
                this.opBtns.push(btn);
            }

            {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("shuozhoutdh/action/qiang1.png"), "", "");
                this.actions["qiang"] = btn;
                btn.setName("qiang");
                btn.addClickEventListener(function (sender, evt) {
                    self.btnCallback(sender);
                });
                btn.setVisible(false);
                this.addChild(btn);
                this.opBtns.push(btn);
            }

            {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("shuozhoutdh/action/shi1.png"), "", "");
                this.actions["shi"] = btn;
                btn.setName("shi");
                btn.addClickEventListener(function (sender, evt) {
                    self.btnCallback(sender);
                });
                btn.setVisible(false);
                this.addChild(btn);
                this.opBtns.push(btn);
            }

            {

                var btn = new ccui.Button();
                btn.loadTextures(getResPath("shuozhoutdh/action/qxbaoting1.png"), "", "");
                this.actions["qxting"] = btn;
                this.actions["qxting"].setTag(0);
                btn.setName("qxting");
                btn.addClickEventListener(function (sender, evt) {
                    self.btnCallback(sender);
                });
                var size = cc.director.getWinSize();
                btn.setPosition(cc.p(size.width - 300, 200));
                btn.setVisible(false);
                this.addChild(btn, 1001);
                this.opBtns.push(btn);
            }

            {
                this.qiangshi = new ccui.CheckBox();
                this.qiangshi.loadTextures(getResPath("shuozhoutdh/action/qiangshi1.png"),
                    getResPath("shuozhoutdh/action/qiangshi1.png"),
                    getResPath("shuozhoutdh/action/qiangshi2.png"),
                    getResPath("shuozhoutdh/action/qiangshi2.png"),
                    getResPath("shuozhoutdh/action/qiangshi2.png"));
                this.qiangshi.setPosition(cc.p(70, 300));
                this.qiangshi.addEventListener(function (sender, type) {
                    switch (type) {
                        case ccui.CheckBox.EVENT_SELECTED:
                            sender.setName("openqiangshi");
                            self.btnCallback(sender);
                            break;
                        case ccui.CheckBox.EVENT_UNSELECTED:
                            sender.setName("closeqiangshi");
                            self.btnCallback(sender);
                            break;
                    }
                });
                this.qiangshi.setVisible(false);
                this.addChild(this.qiangshi);
            }
        };

        MJAction.prototype.setQiangShiVis = function (v) {
            //屏蔽抢拾按钮
            v = false;
            if (this.qiangshi) {
                this.qiangshi.setVisible(v);
            }
        };

        MJAction.prototype.setQiangShiSelected = function (v) {
            if (this.qiangshi) {
                this.qiangshi.setSelected(v);
            }
        };

        MJAction.prototype.setQXTing = function (v) {
            if (this.actions["qxting"]) {
                this.actions["qxting"].setVisible(v);
            }
            if (v) {
                this.reflashOpBtns();
            }
        };

        var superSetOperator = MJAction.prototype.setOperator;
        MJAction.prototype.setOperator = function (operat) {
            Log(this, "shanxi operat=" + operat);
            var isShowOp = superSetOperator.call(this, operat);
            if (isShowOp) {
                if ((operat & ActionTypeMJ.TYPE_BAO_TING) == ActionTypeMJ.TYPE_BAO_TING) {
                    if (this.actions["baoting"]) {
                        this.actions["baoting"].setVisible(true);
                        MJModel.canTouchCard = false;
                    }
                }

                if ((operat & ActionTypeMJ.TYPE_QX_TING) === ActionTypeMJ.TYPE_QX_TING) {
                    if (this.actions["qxting"]) {
                        this.actions["qxting"].setVisible(true);
                    }
                }

                if ((operat & ActionTypeMJ.TYPE_Qiang) == ActionTypeMJ.TYPE_Qiang) {
                    if (this.actions["qiang"]) {
                        this.actions["qiang"].setVisible(true);
                    }
                }

                if ((operat & ActionTypeMJ.TYPE_Shi) == ActionTypeMJ.TYPE_Shi) {
                    if (this.actions["shi"]) {
                        this.actions["shi"].setVisible(true);
                    }
                }
                this.reflashOpBtns();
            }
            return isShowOp;
        };


        var superBtnCallback = MJAction.prototype.btnCallback;
        MJAction.prototype.btnCallback = function (ref) {
            var n = ref;
            var name = n.getName();
            var card = MJModel.curOperateCard;
            if (name == "baoting") {
                sendOperateCard(ActionTypeMJ.TYPE_BAO_TING, 0);
                this.setOperator(-1);
            } else if (name == "qiang") {
                sendOperateCard(ActionTypeMJ.TYPE_Qiang, card);
                this.setOperator(-1);
            } else if (name == "shi") {
                sendOperateCard(ActionTypeMJ.TYPE_Shi, card);
                this.setOperator(-1);
            }
            else if (name == "qxting") {
                sendOperateCard(ActionTypeMJ.TYPE_QX_TING, 0);
                this.setOperator(-1);
            }
            else if (name == "openqiangshi") {
                sendQiangShiReq(1);
            }
            else if (name == "closeqiangshi") {
                sendQiangShiReq(0);
            }
            else {
                superBtnCallback.call(this, ref);
            }
        };

        MJPreTable.prototype.getPathRes = function () {
            return getResPath("shuozhoutdh/mj_public/preScene.json");
        };

    },
    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.getValue();
            if (typeof b === "object") bv = b.getValue();
            if (av == this._curLaizi && bv != this._curLaizi)return 1;//赖子放在最前边
            if (av != this._curLaizi && bv == this._curLaizi)return -1;//赖子放在最前边
            return bv - av;
        } catch (e) {
            return 0;
        }
    },
    initMJCard: function () {
        var selftable = this;

        MJCards.prototype.sortCard = function (a, b) {
            return self_table._sortCard(a, b);
        };

        MJCard.prototype.check_addFlag = function () {
            self_table._checkAddCardFlag(this);
        };


        MJCards.prototype.qiangshi_card = [];

        var superCtor = MJCards.prototype.ctor;
        MJCards.prototype.ctor = function () {
            superCtor.call(this);
            this.qiangshi_card = [];
            for (var i = 0; i < MJModel.Play_num; i++) {
                var a = [];
                this.qiangshi_card.push(a);
                //this.secondInit.push(false);
            }
        };

        var superReset = MJCards.prototype.reset;
        MJCards.prototype.reset = function () {
            superReset.call(this);
            for (var i = 0; i < MJModel.Play_num; i++) {
                this.qiangshi_card[i] = [];
            }
        };


        MJCards.prototype.outHandCardEffct2 = function (pos, value) {
            this.addOutCard(pos, value);
            this.reflashHandCard(pos, true, true);
        };
        var self_table = this;
        var super_addOutCard = MJCards.prototype.addOutCard;
        MJCards.prototype.addOutCard = function (pos, value, showPoint) {
            var isFanPai = false;

            if (self_table._fanmain_card[pos] == value && MJModel.isOnVideo) {
                isFanPai = true;
                self_table._fanmain_card[pos] = -1;
            }
            if (MJModel.mj_lockcard_type == 1) {
                value = 0;
            }
            var card = super_addOutCard.call(this, pos, value, showPoint);
            if (MJModel.isOnVideo && isFanPai) {
                self_table._checkAddTingFlag(card)
            }
            return card;
        };

        MJCards.prototype.isDuoPai = function (pos) {
            try {
                if (selftable.IsQiangShi[pos]) {
                    return false;
                } else {
                    var len = this.hand_card[pos].length
                    var v = parseInt(len % 3);
                    if (v == 2) {
                        return true;
                    }
                }
                return false;
            } catch (e) {
                return false;
            }
        };

        MJCards.prototype.addQiangCard = function (pos, value) {
            var card = new MJCard();
            cc.log("2pos:" + pos);
            this.qiangshi_card[pos].push(card);
            card.setValue(value, pos, CardType.Card_Peng, 0);
            card.setMyPosition(MJConfig.getQiangCardPos(pos, this.qiangshi_card[pos].length - 1));
            if (MJModel.mj_bg_use == 1) {
                if (MJModel.mj_font == "jianjie" && MJModel.mj_fontSize == "dahao") {
                    card.setScale(1);
                } else {
                    card.setScale(0.9);
                }
            }
            this.addChild(card, MJConfig.getQiangCardOrder(pos, this.qiangshi_card[pos].length - 1));
        };


        MJPeng.prototype.setValue = function (type, pos, value, index, out_pos, isEnd, OpType) {
            var values = [];
            for (var i = 0; i < 3; i++) {
                if (type == PengType.Chi_L || type == PengType.Chi_M || type == PengType.Chi_R) {
                    if (MJModel.chi_layout == 0) {
                        if (type == PengType.Chi_L) {
                            values.push(value + i);
                        } else if (type == PengType.Chi_M) {
                            values.push(value + (i - 1));
                        } else if (type == PengType.Chi_R) {
                            values.push(value + (i - 2));
                        }
                    } else {
                        if (type == PengType.Chi_L) {
                            if (i == 0) {
                                values.push(value + 1);
                            } else if (i == 1) {
                                values.push(value);
                            } else if (i == 2) {
                                values.push(value + 2);
                            }
                        }
                        else if (type == PengType.Chi_M) {
                            values.push(value + (i - 1));
                        }
                        else if (type == PengType.Chi_R) {
                            if (i == 0) {
                                values.push(value - 2);
                            } else if (i == 1) {
                                values.push(value);
                            } else if (i == 2) {
                                values.push(value - 1);
                            }
                        }
                    }
                } else {
                    values.push(type == PengType.Peng_AnKang ? 0 : value);
                }
            }
            if (type == PengType.Peng_Kang) {
                values.push(value);
            } else if (type == PengType.Peng_AnKang) {
                if (isEnd || selftable.AnGangKeJian) {
                    values.push(value);
                } else {
                    if (pos == 0) {
                        values.push(value);
                    } else {
                        values.push(0);
                    }
                }
            }
            this.showUI(type, pos, values, index, out_pos, isEnd, OpType, value);
        };

        MJCards.prototype.ChangeLastCardPos = function (pos) {
            var card = this.hand_card[pos][0];
            this.removeHandCard(pos, card.value, 1);
            this.initMoCard(pos, card.value);
        };

        MJCards.prototype.outHandCard = function (pos, value) {
            this.resetLastOutCard();
            var size = cc.director.getWinSize();
            if (pos == 0 && MJModel.seatid != -1) {
                MJModel.isEnterWait = false;

                //MJModel.mj_table.removeChildByName("tingpai_layer");
                if (this.outCardBtn) this.outCardBtn.setVisible(false);
                if (this.isDuoPai(pos)) {
                    var card = null;
                    if (MJModel.isMyPos(pos) && this.curOutCard && this.curOutCard.getValue() == value) {
                        card = this.curOutCard;
                    }
                    if (card == null)card = findCardByValue(value, this.hand_card[pos]);
                    if (card) {
                        this.outMyCard(card, true);
                    }
                }
            }
            else {
                var card = null;
                var isHaveZiero = true;
                if (MJModel.getTangPaiFlag(pos)) {
                    isHaveZiero = false;
                    for (var i = 0; i < this.hand_card[pos].length; i++) {
                        if (this.hand_card[pos][i].getValue() == 0) {
                            isHaveZiero = true;
                        }
                    }
                }

                card = removeCardByValue(MJModel.isOnVideo || !isHaveZiero ? value : 0, this.hand_card[pos], this.canMoveHandCard(pos));
                if (card) {
                    card.removeFromParent(true);
                    this.outHandCardEffct2(pos, value);
                }
            }
            this.curOutCard = null;
        };

        MJCards.prototype.clickHandCardCallback = function (n) {
            if (MJModel.canTouchCard == false) {
                return;
            }
            var card = n;
            if (MJModel.canChoiceMore) {
                if (MJModel.canChoiceMoreType == 1) {
                    //选择多个杠的时刻
                    var size = MJModel.gang_info.length;
                    for (var j = 0; j < size; j++) {
                        var gif = MJModel.gang_info[j];
                        if (card.getValue() == gif.curCard) {
                            MJModel.canTouchCard = false;
                            MJModel.canChoiceMore = false;
                            MJModel.canChoiceMoreType = 0;
                            sendOperateCard(MJModel.gang_info[j].state, MJModel.gang_info[j].curCard);
                            MJModel.mj_table.room_Action.setOperator(-1);
                            MJModel.mj_table.room_Action.removeChildByName("ChooseGang_selectLayer");
                            return;
                        }
                    }
                } else {
                    if (card.isUp) {
                        card.setUp(false);
                        var upCards = this.getChoiceCards();
                        if (upCards.length == 0) {
                            this.setCurChoiceType(-1);
                        }
                    }
                    else {
                        card.setUp(true);//自己添加的，使牌抬起
                        var upCards = this.getChoiceCards();
                        if (upCards.length == 0) {
                            this.setCurChoiceType(parseInt(card.getValue() / 16));
                        }
                        if (upCards.length < 3) {
                            card.setUp(true);
                        }
                    }
                }
                return;
            }

            var preCard = null;

            for (var i = 0; i < this.hand_card[0].length; i++) {
                var fcard = this.hand_card[0][i];
                if (fcard) {
                    if (fcard.isUp) preCard = fcard;
                    fcard.setUp(false);
                }
            }

            if (this.outCardBtn) this.outCardBtn.setVisible(false);


            if (MJModel.danjichupai == 1 && !card.tingpai_flag.isVisible()) {
                this.outHandCardCallback(n);
                return;
            }

            if (preCard && preCard == card) {
                if (MJModel.mj_double_click_style == 1)this.outHandCardCallback(n);
                return;
            }

            card.setUp(true);

            var hasTingPaiInfo = false;

            try {
                MJModel.mj_table.room_Tip.hideOutCardTip();
                MJModel.mj_table.removeChildByName("tingpai_layer");
                for (var i = 0; i < MJModel.listen_info.length; i++) {
                    var tli = MJModel.listen_info[i];
                    if (card.getValue() == tli.OutCard) {
                        var can_show_listen_info = true;
                        for (var j = 0; j < tli.HuInfo.length; j++) {
                            if (tli.HuInfo[j].Card == 255) {
                                can_show_listen_info = false;
                                break;
                            }
                        }

                        if (can_show_listen_info) {
                            MJModel.mj_listenLayer_autoshow = false;
                            var curTingPaiLayer = new TingPaiLayer();
                            curTingPaiLayer.show2(tli.HuInfo);

                            curTingPaiLayer.setName("tingpai_layer");
                            MJModel.mj_table.addChild(curTingPaiLayer, 100);
                            hasTingPaiInfo = true;
                        } else {
                            PlatformHelper.showToast("见字胡不显示听牌张");
                        }
                        break;
                    }
                }
            } catch (e) {
                Log(this, e);
            }


            if (this.outCardBtn == null) {
                this.createOutCardBtn();
            }
            else {
                this.outCardBtn.setVisible(true);
            }

            if (this.outCardBtn) {
                var size = cc.director.getWinSize();
                this.outCardBtn.setPosition(cc.p(size.width - 120, 189));
            }
        };
    },

    initMJTips: function () {
        var selfTable = this;
        MJTips.prototype.showSimpleEffect = function (pos, out_pos, type, effect, hold) {
            try {
                if (hold == undefined)hold = false;
                var begin = MJConfig.getOperatorTipPos(pos);
                var path = null;
                var parentPath = "RoomMJ/simple/";
                if (effect == "qiangganghu") {
                    hold = true;
                    this.showSimpleEffect(out_pos, null, ActionType.TYPE_WANGANG, null, hold);
                    path = getResPath(parentPath + "qiangganghu.png");
                } else if (effect == "dianpao") {
                    hold = true;
                    path = getResPath(parentPath + "dianpao.png");
                } else if (effect == "haidi") {
                    path = getResPath(parentPath + "haidi.png");
                } else if (effect == "baoting") {
                    path = getResPath(parentPath + "baoting.png");
                } else if (effect == "buzhang") {
                    path = getResPath(parentPath + "buzhang.png");
                } else if (effect == "genzhuang") {
                    var size = cc.director.getWinSize();
                    begin = cc.p(size.width / 2, size.height / 2);
                    path = getResPath(parentPath + "genzhuang.png");
                } else if (effect == "peng") {
                    path = getResPath(parentPath + "peng.png");
                }
                else if (effect == "qiangganghu") {
                    path = getResPath("shuozhoutdh/action/qiang.png");
                }
                else if (effect == "shi") {
                    path = getResPath("shuozhoutdh/action/shi.png");
                }
                else if (effect == "qxbaoting") {
                    path = getResPath("shuozhoutdh/action/qxbaoting.png");
                }
                else if (type == ActionType.TYPE_HU) {
                    hold = true;
                    if (effect == "zimo") {
                        path = getResPath(parentPath + "zimo.png");
                    } else {
                        if (pos != out_pos) {
                            this.showSimpleEffect(out_pos, null, null, "dianpao");
                        }
                        path = getResPath(parentPath + "hu.png");
                    }
                } else if (effect == "chi") {
                    path = getResPath(parentPath + "chi.png");
                } else {
                    path = getResPath(parentPath + "gang.png");
                }

                var bg = new cc.Sprite(getResPath(parentPath + "bg.png"));
                bg.setPosition(begin);
                bg.setName("hu_effect");
                // this.addChild(bg, 10000);

                var sp = new cc.Sprite(path);
                sp.setPosition(begin);
                sp.setName("hu_effect");
                this.addChild(sp, 10000);

                if (hold) {
                    sp.runAction(cc.sequence(cc.delayTime(this.getHuEffectTime()), cc.removeSelf()));
                } else {
                    sp.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
                }
            } catch (e) {
                Log(this, e);
            }
        };


        MJTips.prototype.showOutCardTip = function () {
            try {
                if (this._curOutCardTip == null) {
                    var size = cc.director.getWinSize();
                    this._curOutCardTip = new cc.Sprite(getResPath("RoomMJ/out_card_tip.png"));
                    this._curOutCardTip.setVisible(false);
                    this._curOutCardTip.setPosition(cc.p(size.width - 181, 132));
                    this._curOutCardTip.setAnchorPoint(cc.p(0.8, 0));
                    this.addChild(this._curOutCardTip, 100000);

                    if (!this._curOutCardTip.isVisible()) {
                        this._curOutCardTip.setVisible(true);
                        this._curOutCardTip.runAction(cc.sequence(cc.delayTime(5), cc.scaleTo(0.1, 1), cc.delayTime(0.5)));
                    }
                }

            } catch (e) {
                this._curOutCardTip = null;
            }
        };
    },

    initMJPlayer: function () {
        MJPlayer.prototype.tingFlag = null;
        MJPlayer.prototype.showTingFlag = function (pos) {
            if (!this.tingFlag) {
                this.tingFlag = new cc.Sprite(getResPath("RoomMJ/ting_tip.png"));
                this.tingFlag.setAnchorPoint(cc.p(0, 1));
                //var pos = MJModel.getSeatidByPos(this.seatid);
                if (pos != 1) {
                    this.tingFlag.setPosition(cc.p(this.m_size.width / 2 + 10, this.m_size.height + 3));
                } else {
                    this.tingFlag.setPosition(cc.p(0, this.m_size.height + 3));
                }
                this.addChild(this.tingFlag);
            }
            this.tingFlag.setVisible(true);
        };

        var superReset = MJPlayer.prototype.reset;
        MJPlayer.prototype.reset = function () {
            superReset.call(this);
            if (this.tingFlag) {
                this.tingFlag.setVisible(false);
            }
        };

        MJPlayer.prototype.hideTingFlag = function () {
            if (this.tingFlag) {
                this.tingFlag.setVisible(false);
            }
        }
        MJPlayer.prototype.login = function (seatid) {
            try {
                this.seatid = seatid;
                var player = MJModel.players[this.seatid];
                if (!player)return;
                this.uid = player.uid;
                var dm = player.money - MJModel.take_in;
                this.m_pMoney.setString(dm);
                this.m_pMoney.ignoreContentAdaptWithSize(true);
                var pos = MJModel.getPosBySeatid(seatid);
                if (pos != 0 && MJModel.mj_isFZB && !MJModel.isOnVideo) {
                    this.name_label.setString(Utils.parseName(6, __String.createWithFormat("玩家%1", pos)));
                } else {
                    this.name_label.setString(Utils.parseName(6, player.name));
                }
                this.name_label.ignoreContentAdaptWithSize(true);

                this.m_pAvatar.removeAllChildren();
                var avatar = null;
                if (pos != 0 && MJModel.mj_isFZB && !MJModel.isOnVideo) {
                    avatar = Utils.createCircleAvatarBypng(getResPath("RoomMJ/head_room2.png"), "Avatars/user4_unlogin.png", "Avatars/user4_unlogin.png", cc.size(90, 90));
                } else {
                    avatar = Utils.createCircleAvatar(player.avatar, "Avatars/user4_unlogin.png", "Avatars/user4_unlogin.png", cc.size(90, 90));
                }
                avatar.setPosition(cc.p(0, 0))
                this.m_pAvatar.addChild(avatar);

                this.setVisible(true);
                this.setPosition(MJConfig.getPlayerPos(this.pid));

                this.setBankerFlag(false);
                this.setReadyFlag(false);
                this.setTimeOut(false);
                this.setOffline(false);
            } catch (e) {

            }
        }
    },

    timeEnd: function (dt) {
        cc.log("lin=timeEnd=" + MJModel.isState(MJ_STATUS.MJ_GAME_FREE));
        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            cc.log("lin=timeEnd=1");
            sendGameEndRecordReq();
        }
    }
    ,

    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        cc.log("lin=handler_cmd=" + cmd);
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);

            var ackGameFree = parsePacket("proto.game.shuozhoumj.tagCurGameScence", jpacket);
            //var ackGameFree = parsePacket("proto.game.AckGameScene", jpacket);
            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }

        if (cmd == SEL_CMD.SERVER_ENSURE_JOKER) {
            this._handler_server_laizi_bc(jpacket, canDelay);
            return;
        }

        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.shuozhoumj.AckCurGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }

        if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
            return;
        }

        if(cmd == CMD.SERVER_USER_HU){
            this.handler_server_user_hufan(jpacket,canDelay);
        }

        if (cmd == SEL_CMD.SERVER_ACK_CHANGE_MODE) {
            this.handler_change_mode_bc(jpacket, canDelay);
        }
        else if (cmd == SEL_CMD.SERVER_USER_UPDATE_CARD) {//托管异常处理
            this.handler_server_update_cards_bc(jpacket, canDelay);
        }
        else {
            this._super(cmd, jpacket, canDelay, svrid);
        }
    },

    handler_server_user_hufan : function (data, canDelay) {
        var ackUserhu = parsePacket("proto.game.AckUserHu", data);
        var seatid = ackUserhu.HuChairID;
        var pos = MJModel.getPosBySeatid(seatid);
        var out_pos = -1;
        var dianpaoSeatid = ackUserhu.PasHuChairID;
        if(dianpaoSeatid >= 0){
            out_pos = MJModel.getPosBySeatid(dianpaoSeatid);
        }
        var hu_fans = ackUserhu.fan;
        var spehu_list = [];
        if(hu_fans && hu_fans.length > 0){
            for(var i = 0;i < hu_fans.length;i++){
                var fan_str = 0;
                if(AddFanNameArray[hu_fans[i]]){
                    fan_str = __String.createWithFormat("shuozhoutdh/hu_effect/effect_%1.png",hu_fans[i]);
                }
                if(fan_str != 0){
                    spehu_list.push(fan_str);
                }
            }
        }
        var player = MJModel.players[seatid];
        this.hufanlen = spehu_list.length;
        if(spehu_list.length > 0){
            this.play_hufans_effect(pos,player.sex,spehu_list);
            //播放点炮动画
            if(pos != out_pos &&out_pos >=0){
                this.room_Tip.showSimpleEffect(out_pos , null , null , "dianpao");
            }
        }else{
            //播发胡牌或自摸动画
            this.room_Tip.showSimpleEffect(pos, out_pos,ActionType.TYPE_HU, this.room_Card.isDuoPai(pos)? "zimo":"hu");
        }
    },

    play_hufans_effect : function (pos,sex,fan_list) {
        if(fan_list.length > 0){
            var self = this;
            for(var i = 0;i < fan_list.length;i++){
                var callback = cc.callFunc(this.showhufanEffect,this,[pos,fan_list[i]]);
                this.runAction(cc.sequence(cc.delayTime(i*1.2), callback));
            }
        }
    },
    showhufanEffect : function (tager,date) {
        try {
            var pos = date[0];
            var effect = date[1];
            var begin = MJConfig.getOperatorTipPos(pos);
            var parentPath = "shuozhoutdh/hu_effect/";
            var bg = new cc.Sprite(getResPath(parentPath + "bg.png"));
            bg.setPosition(begin);
            bg.setName("hu_effect");
            // this.addChild(bg, 10000);

            var path = getResPath(effect);
            var sp = new cc.Sprite(path);
            sp.setPosition(begin);
            sp.setName("hu_effect");
            this.addChild(sp, 10000);

            sp.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
        } catch (e) {
            Log(this, e);
        }
    },
    _handler_game_record: function (data, canDelay) {
        if (MJModel.gpsInfo) {
            MJModel.gpsInfo.removeFromParent(true);
            MJModel.gpsInfo = null;
        }

        //-----新总结算界面
        var gpsInfo = cc.director.getRunningScene().getChildByName("gpsInfo");
        if (gpsInfo) {
            gpsInfo.removeFromParent(true);
        }

        cc.log("------big End");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var pkgId = this._pkg_id;
        var gameType = "朔州推倒胡";
        if (this.mj_roomType == 1) {
            gameType = gameType + " 3人"
        } else if (this.mj_roomType == 2) {
            gameType = gameType + " 2人"
        } else {
            gameType = gameType + " 4人"
        }
        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];
        //gameType += " · " + MJModel.base_money + "分底";

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        //var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;

        var max_score = 0;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            if (recoreInfo.totalscore > max_score) {
                max_score = recoreInfo.totalscore;
            }
        }

        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            //var playerRecord = totalRecord.player_records[i];
            var player = MJModel.players[i];
            var arrStr = [];
            //次数
            var arrcount = [];

            arrStr = ["坐庄次数", "胡牌次数", "赢分次数", "超时次数"];
            arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.WinCounts, recoreInfo.outtime_num];

            if (player && player.uid != -1 && player.uid != 0) {
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var isWin = false;
                if (max_score > 0 && recoreInfo.totalscore == max_score) {
                    isWin = true;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, isWin, _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner, recoreInfo.dissState);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }
        }
        bigResult.refresh(PlayerNumber);
        this.release();
    },
    checkRoomEnd: function () {
        if (MJModel.RoomCountSum == MJModel.currentCount) {
            JsUtils.postNotifi("notify_against_room_end");
        }
    },
    showJiangMa: function (ackGameEnd) {
        var jiangma = ackGameEnd.hunanGameEndInfo.Niao;
        if (jiangma && jiangma.Num > 0) {
            var self = this;
            this.room_Card.removePublicCardByNums(jiangma.Num, false);
            this._showZhuaNiao(jiangma);
            var callback = cc.callFunc(function () {
                self._showUserScore(ackGameEnd);
                self._showGameEnd(ackGameEnd.EndState, ackGameEnd);
            });
            this.runAction(cc.sequence(cc.delayTime(this.showZhuaNiaoTime()), callback));
            return true;
        }
        return false;
    },
    handler_server_game_end_bc: function (ackGameEndJS, canDelay) {
        Log(this, "handler_server_game_end_bc");
        //try {
        var ackGameEnd = ackGameEndJS.gameend;
        var self = this;
        this.room_Card.setAutoOutCard(false);
        if (this.room_Action) this.room_Action.setTingPaiVis(false);
        if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
        if (this.room_Action) this.room_Action.setOperator(-1);

        if (MJModel.mj_table.getChildByName("tingpai_layer")) {
            MJModel.mj_table.removeChildByName("tingpai_layer")
        }

        this.room_Info.stopTime();
        this.room_Tip.hideOutCardTip();

        var show_all_handcard = cc.callFunc(function () {
            self.gameend_showAllHandCard(ackGameEnd);
        });

        var state = ackGameEnd.EndState;
        var show_liuju = cc.callFunc(function () {
            if (ackGameEnd.EndState == 1) {
                //流局
                self.room_Tip.ShowGameState(3);
            }
        });

        var show_end_score = cc.callFunc(function () {
            self.gameend_showAllScoreEffect(ackGameEnd);
        });

        var update_all_money = cc.callFunc(function () {
            self.gameend_updatePlayersInfo(ackGameEnd);
        });

        var game_end_reset = cc.callFunc(function () {
            self.room_Action.setReady2Visible(false);
            var result = new MJResult_XinYu();
            result.updateContentView(ackGameEndJS);
            result.setName("reset_remove");
            self.addChild(result, 100000);
            return;
            try {
                var result = new MJResult_XinYu();
                result.updateContentView(ackGameEnd);
                result.setName("reset_remove");
                self.addChild(result, 100000);
            } catch (e) {
                cc.log("game end:", e);
                self.room_Action.setReady2Visible(true);
            }
        });

        var show_all_public_card = cc.callFunc(function () {
            self.gameend_showAllPublicCard(ackGameEnd);
        });

        if (MJModel.isOnVideo && canDelay == false) {
            this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(2), update_all_money));
            return;
        }

        this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(1), show_liuju, cc.delayTime(ackGameEnd.EndState == 1 ? 1 : 0), show_end_score, cc.delayTime(0), update_all_money, cc.delayTime(1), game_end_reset));
        //} catch (e) {
        //    ERROR(this, "handler_server_game_end_bc" + e);
        //}
    },
    _showGameEnd: function (state, ackGameEnd) {
        var self = this;
        this.isStart = false;
        if (state == 1) {
            //流局
            this.room_Tip.ShowGameState(3);
        }
        else {
            this.room_Tip.ShowGameState(2);
        }
        var callback = cc.callFunc(function () {
            self.showFinalMJResult(ackGameEnd);
            self.hufanlen = 1;
        });
        if (this.hufanlen < 1) this.hufanlen = 1;
        this.runAction(cc.sequence(cc.delayTime(1.1 * this.hufanlen), callback));
    },
    showFinalMJResult: function (data) {
        var result = new MJResult_Base();
        result.setName("RoomMJResultDetail");
        this.addChild(result, 100000);
        result.updateContentView(data);
        var self = this;
        result.showRoomConfigs(this.configIds, function (configId) {
            return self.getResultConfigNameById(configId);
        });
    },
    handler_server_update_cards_bc: function (data, canDelay) {
        var ackGameFree = parsePacket("proto.game.SyncHandCard", data);
        //各个玩家碰杠牌
        if (ackGameFree.UserCard && ackGameFree.UserCard.stFixedCards) {
            var fixedCardSize = ackGameFree.UserCard.stFixedCards.length;
            //我碰杠胡的牌
            for (var i = 0; i < fixedCardSize; i++) {
                var cardData = ackGameFree.UserCard.stFixedCards[i].CardData;
                var opChairid = ackGameFree.UserCard.stFixedCards[i].chairID;
                var state = ackGameFree.UserCard.stFixedCards[i].state;
                var cardList = ackGameFree.UserCard.stFixedCards[i].OpCards;
                var out_pos = MJModel.getPosBySeatid(opChairid);
                if ((state & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                    this.room_Card.addPengCard(0, PengType.Peng_Peng, cardData, out_pos, state, cardList);
                }
                else if ((state & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                    this.room_Card.addPengCard(0, PengType.Peng_AnKang, cardData, out_pos, state, cardList);
                }
                else if ((state & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                    this.room_Card.addPengCard(0, PengType.Chi_L, cardData, out_pos, state, cardList);
                }
                else if ((state & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                    this.room_Card.addPengCard(0, PengType.Chi_M, cardData, out_pos, state, cardList);
                }
                else if ((state & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                    this.room_Card.addPengCard(0, PengType.Chi_R, cardData, out_pos, state, cardList);
                }
                else {
                    this.room_Card.addPengCard(0, PengType.Peng_Kang, cardData, out_pos, state, cardList);
                }
            }
        }


        var cardList = [];

        if (ackGameFree.UserCard && ackGameFree.UserCard.ChangeableCards) {
            var changeable_Size = ackGameFree.UserCard.ChangeableCards.length;

            for (var i = 0; i < changeable_Size; i++) {
                cardList.push(ackGameFree.UserCard.ChangeableCards[i]);
            }
            this.room_Card.initHandCard(0, cardList);
            this.room_Card.reflashHandCard(0, true);
        }

        {
            for (var i = 0; i < this.room_Card.out_card.length; i++) {
                for (var j = 0; j < this.room_Card.out_card[i].length; j++) {
                    var card = this.room_Card.out_card[i][j];
                    card.removeFromParent(true);
                }
                this.room_Card.out_card[i] = [];
            }
        }


        //各个方位的出牌
        {
            cc.log("handler_server_update_cards_bc1", ackGameFree.ShowCard.length)
            var showCardSize = ackGameFree.ShowCard.length;
            for (var i = 0; i < showCardSize; i++) {
                var outCardLen = ackGameFree.ShowCard[i].OutCard.length;
                cardList = [];
                var pos = MJModel.getPosBySeatid(i);
                for (var j = 0; j < outCardLen; j++) {
                    cardList.push(ackGameFree.ShowCard[i].OutCard[j]);
                }
                this.room_Card.initOutCard(pos, cardList);

                if (pos == 0) {
                    this.room_Card.initCurOutCardTip(0, cardList[outCardLen - 1]);
                }
            }
        }

    },


    updateBg: function (isInit) {
        if (isInit == undefined)isInit = false;
        var size = cc.director.getWinSize();
        if (this.bg == null) {
            this.bg = new ccui.ImageView(getResPath(this.getBgStr()));
            this.bg.setAnchorPoint(cc.p(0.5, 0.5));
            this.bg.setContentSize(size);
            this.bg.setScale9Enabled(true);
            this.bg.setPosition(size.width / 2, size.height / 2);
            this.addChild(this.bg, -100);
        } else {
            this.bg.loadTexture(getResPath(this.getBgStr()));
        }

        if (MJModel.mj_bg_use == 1 && MJModel.mj_font == "jianjie" && MJModel.mj_fontSize == "dahao") {
            Utils.addCardSprites("shuozhoutdh/cards/jianjie_dahao_2d_debug");
        } else {
            Utils.addCardSprites(__String.createWithFormat("RoomMJ/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));
        }


        if (MJModel.mj_bg_use == 1 && MJModel.mj_font == "jianjie" && MJModel.mj_fontSize == "dahao") {
            this.loadCardConfig(MJModel.mj_roomType == 2 ? "shuozhoutdh/2d_config/card_config2d_2ren.json" : "shuozhoutdh/2d_config/card_config2d.json");
        } else {
            if (MJModel.mj_bg_use == 1) {
                this.loadCardConfig(MJModel.mj_roomType == 2 ? "shuozhoutdh/newcard_Config/card_config2d_eren.json" : "shuozhoutdh/newcard_Config/card_config2d.json");
            } else {
                this.loadCardConfig(MJModel.mj_roomType == 2 ? "shuozhoutdh/newcard_Config/card_config25d_eren.json" : "shuozhoutdh/newcard_Config/card_config.json");
            }
        }

        if (isInit)return;

        if (isInit)return;

        this.room_Card.reflashAllCardUI();
        for (var i = 0; i < 4; i++) {
            this.players[i].setPosition(MJConfig.getPlayerPos(i));
            this.players[i].reflashNameMoneyPosition();
        }
        if (this.room_Info)this.room_Info.reflash();
    },


    isSupportPublicCard: function () {
        return false;
    },


    getBgStr: function () {
        return __String.createWithFormat("shuozhoutdh/bgs/%1_%2.png", MJModel.mj_style, MJModel.mj_table_view);
    },

    _handler_server_laizi_bc: function (data, canDelay) {
        var packet = parsePacket("proto.game.shuozhoumj.AckLaiziCard", data);
        var self = this;
        var curLaizi = packet.laizicard;
        //var chaotian = packet.banzi;
        //var cardLeft = packet.cardnum;
        //this.room_Info.showCardNums(cardLeft);
        this._setLaizi(curLaizi, -1, -1, canDelay ? true : false);
        if (canDelay == false) {
            this._showHandcardFlag(false);
            this.room_Card.reflashHandCard(0, true);
            this.room_Card.reflashHandCard(1, true);
            this.room_Card.reflashHandCard(2, true);
            this.room_Card.reflashHandCard(3, true);
            return;
        }
        MJModel.isEnterWait = true;

        var move_end = cc.callFunc(function () {
            self._showHandcardFlag(false);

            var mo_card = null;
            if (self.room_Card.isDuoPai(0)) {
                mo_card = self.room_Card.hand_card[0][self.room_Card.hand_card[0].length - 1];
                self.room_Card.hand_card[0].splice(self.room_Card.hand_card[0].length - 1, 1);
            }

            var allPreCars = [];
            var allLaiZi = [];
            var dd = 0;

            for (var i = self.room_Card.hand_card[0].length - 1; i >= 0; i--) {
                var card = self.room_Card.hand_card[0][i];
                if (card.getValue() == curLaizi) {
                    allLaiZi.push(card);
                } else {
                    if (allLaiZi.length > 0) {
                        break;
                    }
                    allPreCars.push(card);
                }
            }

            if (allLaiZi.length > 0 && allPreCars.length > 0) {
                var allDelay = 0;
                for (var i = 0; i < allLaiZi.length; i++) {
                    var card = allLaiZi[i];
                    var begin_pos = card.getPosition();
                    var end_pos = MJConfig.getHandCardPos(0, self.room_Card.hand_card[0].length - 1 - i, self.room_Card.hand_card[0].length, self.room_Card.isDuoPai(0));
                    var allL = Math.abs(end_pos.x - begin_pos.x);

                    //if (MJModel.outCardEffect_style == 0 || true) {
                    var time = allL / 1000;
                    if (time < 0.17) time = 0.17;
                    if (time > 0.3) time = 0.3;
                    card.runAction(cc.sequence(cc.spawn(cc.rotateTo(0.1, 15), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + 100))), cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y + 100)).easing(cc.easeSineOut()), cc.spawn(cc.rotateTo(0.1, 0), cc.moveTo(0.17, end_pos))));
                    allDelay += 1;
                }
                for (var i = 0; i < allPreCars.length; i++) {
                    var card = allPreCars[i];
                    //card.runAction(cc.sequence(cc.moveBy(0.3, cc.p(83, 0)), cc.delayTime(1 - 0.3)).repeat(allLaiZi.length));
                    card.runAction(cc.moveBy(0.3, cc.p(83 * allLaiZi.length, 0)));
                }

                var callback = cc.callFunc(function () {
                    MJModel.isEnterWait = false;
                    self.room_Card.reflashHandCard(0, true);
                    if (mo_card) {
                        mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                        self.room_Card.hand_card[0].push(mo_card);
                    }
                });
                self.runAction(cc.sequence(cc.delayTime(0.5), callback));
            } else {
                MJModel.isEnterWait = false;
                self.room_Card.reflashHandCard(0, true);
                if (mo_card) {
                    mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                    self.room_Card.hand_card[0].push(mo_card);
                }
            }
        });
        this.runAction(cc.sequence(cc.delayTime(1), move_end));
    }

    ,
    _showHandcardFlag: function (isEndShow) {
        if (MJModel.isOnVideo) {
            for (var j = 0; j < 4; j++) {
                var allcards = this.room_Card.hand_card[j];
                if (allcards) {
                    for (var i = 0; i < allcards.length; i++) {
                        var card = allcards[i];
                        this._checkAddCardFlag(card);
                    }
                }
            }
            return;
        }
        var allcards = this.room_Card.hand_card[0];
        if (allcards) {
            for (var i = 0; i < allcards.length; i++) {
                var card = allcards[i];
                this._checkAddCardFlag(card);
            }
        }
    },
    _checkAddCardFlag: function (card) {
        cc.log("lin=_checkAddCardFlag=1");
        try {
            if (card.type == CardType.Card_Outing)return;
            if (card.type == CardType.Card_Peng)return;
            if (card.getValue() == 0)return;
            var flag_str = "";
            if (card.getValue() == this._curLaizi)flag_str = "shuozhoutdh/flag/lai_flag2.png";
            if (card.getValue() == this._curLaizipi)flag_str = "shuozhoutdh/flag/laipi_flag2.png";
            if (card.getValue() == this._curLaizipi2)flag_str = "shuozhoutdh/flag/laipi_flag2.png";
            if (flag_str != "") {
                if (card.getValue() == this._curLaizi)card.setStoreColor(cc.color(255, 249, 137));
                var p = card.getChildByName("sprite");
                p.removeChildByName("laizi_flag");
                var flag = null;

                flag = new cc.Sprite(getResPath(flag_str));

                var m_size = p.getContentSize();
                if (flag) {
                    flag.setPosition(cc.p(0, m_size.height));
                    flag.setAnchorPoint(cc.p(0, 1));
                    flag.setName("laizi_flag");
                    p.addChild(flag);
                    this._flagDirection(card.pos, flag, m_size);
                    flag.setScale(0.5);
                    if (card.pos == 0 && card.type != CardType.Card_Out)flag.setScale(1);
                }
                return;
            }
        } catch (e) {
            Log(this, e);
        }
    },
    //每个方向角标对应
    _flagDirection: function (pos, flag, m_size) {
        if (MJModel.mj_table_view == "2d") {
            if (MJModel.mj_paiban == "vertical" || pos == 2) {
                return;
            }
        }
        if (pos == 1) {
            flag.setPosition(cc.p(0, 15));
            flag.setRotation(-90);
        } else if (pos == 2) {
            flag.setPosition(cc.p(m_size.width, 5));
            flag.setRotation(180);
        } else if (pos == 3) {
            flag.setPosition(cc.p(m_size.width, m_size.height));
            flag.setRotation(90);
        }
    },
    _setLaizi: function (laizi, laizipi, laizipi2, gamestart) {
        this._curLaizi = laizi;
        this._curLaizipi = laizipi;
        this._curLaizipi2 = laizipi2;

        var size = cc.director.getWinSize();
        if (laizi == null || laizi == undefined || laizi == -1 || laizi == 255) {
            if (this._curLaizi_bg) this._curLaizi_bg.setVisible(false);
            return;
        }
        if (gamestart == undefined) gamestart = false;

        if (this._curLaizi_bg == null) {
            this._curLaizi_bg = new cc.Sprite(getResPath("shuozhoutdh/laizi_bg3.png"));
            this._curLaizi_bg.setPosition(cc.p(size.width - 220, size.height - 70));
            this.addChild(this._curLaizi_bg, 200);
        }
        this._curLaizi_bg.removeAllChildren();
        this._curLaizi_bg.setVisible(true);

        if (this._curLaizi > 0) {
            var card = new MJCard();
            card.setValue(this._curLaizi, 0, CardType.Card_Out, 0);
            card.setPosition(cc.p(this._curLaizi_bg.getContentSize().width / 2, this._curLaizi_bg.getContentSize().height / 2));
            card.setScale(1);
            //card.setStoreColor(cc.color(255, 249, 137));
            this._curLaizi_bg.addChild(card);
            this.room_Card.other_card.push(card);

            if (gamestart) {
                var dl = 0;
                var ppos = card.getPosition();
                card.setScale(0);
                card.setVisible(false);
                var self = this;
                var callFunc = cc.CallFunc(function () {
                    self._showLaizi_effect("赖子皮");
                });
                card.setPosition(cc.p(size.width / 2 - this._curLaizi_bg.getPositionX() + this._curLaizi_bg.getContentSize().width / 2, size.height / 2 - this._curLaizi_bg.getPositionY() + this._curLaizi_bg.getContentSize().height / 2));
                card.runAction(cc.sequence(cc.delayTime(0 + dl), cc.show(), callFunc, cc.scaleTo(0.1, 2), cc.delayTime(1.0), cc.spawn(cc.moveTo(0.17, ppos), cc.scaleTo(0.17, 1))));
            }
        }
    },
    _showLaizi_effect: function (name) {
        ccs.armatureDataManager.addArmatureFileInfo(getResPath("shuozhoutdh/effect/laizi/effects_mjhunancx.ExportJson"));
        var size = cc.director.getWinSize();
        if (true) {
            var armature = new ccs.Armature("effects_mjhunancx");
            var animation = armature.getAnimation();
            if (animation) {
                if (typeof animation.playWithIndex === "function") {
                    animation.playWithIndex(0, -1, 0);
                    armature.setPosition(cc.p(size.width / 2, size.height / 2));
                    this.addChild(armature, 100);
                    armature.runAction(cc.sequence(cc.delayTime(1.0), cc.removeSelf()));
                }
            }
        }
        Sound.getInstance().playEffect(__String.createWithFormat(getResPath("shuozhoutdh/sound/laizi.mp3")));
        return armature;
    },
    handler_server_get_guipai: function (data, canDelay) {

        var joker = parsePacket("proto.game.AckEnSureJoker", data);

        var self = this;
        var callback = cc.callFunc(function () {
            self.setSceneJoker(joker);
        });

        this.runAction(cc.sequence(callback));
    },


    setSceneJoker: function (joker) {
        if (!joker) return;
        this._JokerType = joker.JokerType;
        this._curLaizi = joker.CurJokerCard;
        this._curLaizi2 = joker.CurJokerCard2;
        this._curLaizipi = joker.OpenCard;


        if (((joker && joker.JokerType == GUI_TYPE.LAIZI_FAN_DOUBLE_JOKER) || (joker && joker.JokerType == GUI_TYPE.LAIZI_FAN_JOKER)) && joker.CurJokerCard > 0) {
            if (this._curLaizi_bg == null) {
                this._curLaizi_bg = new ccui.ImageView(getResPath("shuozhoutdh/guipai_bg.png"));
                this._curLaizi_bg.setPosition(cc.p(64, 536));
                this._curLaizi_bg.setScale9Enabled(true);
                this._curLaizi_bg.setAnchorPoint(cc.p(0.5, 0));
                this.addChild(this._curLaizi_bg, 200);
            }
            this._curLaizi_bg.removeAllChildren();
            this._curLaizi_bg.setVisible(true);


            var openCard = joker.CurJokerCard;
            var card = new MJCard();
            card.setValue(openCard, 0, CardType.Card_Hand, 0);
            card.setPosition(cc.p(80, 38));
            card.setScale(0.5);
            this._curLaizi_bg.addChild(card);

            var laizi_tip = new cc.LabelTTF("癞子", "Arial", 20);
            laizi_tip.setColor(cc.color(87, 207, 93));
            laizi_tip.setPosition(cc.p(32, 40));
            this._curLaizi_bg.addChild(laizi_tip);
            this.room_Card.other_card.push(card);
            this.room_Card.setGuipai();
            this.room_Card.reflashHandCard(0, true);
        } else {
            if (this._curLaizi_bg) this._curLaizi_bg.setVisible(false);
        }
    },


    handler_change_mode_bc: function (data, canDelay) {
        cc.log("handler_change_mode_bc");
        var packet = parsePacket("proto.game.AckChangeMode", data);
        var seatid = packet.chairid;
        var pos = MJModel.getPosBySeatid(seatid);
        var v = packet.num;
        if (this.pre_scene) this.pre_scene.showSelectMode(pos, v);
    },


    handler_shaoren_mode: function (ackGameFree) {
        if ((!MJModel.isOnVideo && MJModel.roomState != 0) || !ackGameFree.userchangemode)return;
        for (var i = 0; i < ackGameFree.userchangemode.length; i++) {
            var select_mode = ackGameFree.userchangemode[i];
            var pos = MJModel.getPosBySeatid(i);
            if (this.pre_scene) this.pre_scene.showSelectMode(pos, select_mode);
            if (MJModel.isMyPlayer(i)) {
                if (this.pre_scene) this.pre_scene.resetMode(select_mode != 0);
            }
        }
    },

    handler_server_peng_kang_bc: function (data, canDelay) {
        //Log(this,"xiaoxi come peng kang");
        var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);
        this.LockCards = ackBcOpResult.LockCards;
        this.fz_type = ackBcOpResult.fz_hu_type;
        this.isDianpao = ackBcOpResult.isDianpao;
        this._super(data, canDelay);


        var seatid = ackBcOpResult.ChairID;
        var out_seatid = ackBcOpResult.OutCardChairID;
        if (out_seatid == -1 || out_seatid == 255) {
            out_seatid = seatid;
        }
        var OpType = ackBcOpResult.OpType;
        var card = ackBcOpResult.Card;

        var pos = MJModel.getPosBySeatid(seatid);
        var out_pos = MJModel.getPosBySeatid(out_seatid);

        var needRemoveOutCard = false;
        var needOpenOutCard = false;
        var isBaoTingBc = false;

        //进行碰杠操作之后把抢拾按钮隐藏
        if (this.room_Card.peng_card[0] && this.room_Card.peng_card[0].length > 0) {
            this.room_Action.setQiangShiVis(false);
        }


        if ((OpType & ActionTypeMJ.TYPE_BAO_TING) == ActionTypeMJ.TYPE_BAO_TING) {
            needOpenOutCard = true;
            isBaoTingBc = true;

            if (this.room_Action_video && MJModel.isOnVideo) {
                this.room_Action_video.reset();
            }
            var player = MJModel.players[seatid];
            if (player && canDelay) {
                this.room_Tip.showSimpleEffect(pos, out_pos, ActionTypeMJ.TYPE_BAO_TING, "baoting");
                if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
                    Sound.getInstance().playEffect(__String.createWithFormat(getResPath("shuozhoutdh/sound/operator/%1_%2.mp3"), player.sex == SEX_ID.SEX_FEMALE ? "w" : "m", "ting"));
                } else {
                    Sound.getInstance().playEffect(__String.createWithFormat(getResPath("RoomMJ/sound/operator/%1_%2.mp3"), player.sex == SEX_ID.SEX_FEMALE ? "w" : "m", "ting"));
                }
            }
            this._baotingStates[seatid] = 1;
            this.players[pos].showTingFlag(pos);
            if (MJModel.isMyPlayer(seatid)) {
                MJModel.mj_lockcard_type = 1;
                this.room_Action.setQXTing(true);
                this.myselfOpenOutCard(false);
                this.room_Action.setQiangShiVis(false);
            }
            return;
        }

        if ((OpType & ActionTypeMJ.TYPE_QX_TING) === ActionTypeMJ.TYPE_QX_TING) {
            needOpenOutCard = true;
            isBaoTingBc = false;
            this.players[pos].hideTingFlag();
            this._baotingStates[seatid] = -1;
            if (this.room_Action_video && MJModel.isOnVideo) {
                this.room_Action_video.reset();
            }
            if (MJModel.isMyPlayer(seatid)) {
                MJModel.mj_lockcard_type = 0;
                this.room_Action.setQXTing(false);
                this.room_Card.resetAllCardClickState();
            }
            this.room_Card.setSomeCardClickState();

            if (this.IsDaiFeng && MJModel.mj_roomType == 0) {
                if (!this.room_Action.qiangshi.isVisible()) this.room_Action.setQiangShiVis(true);
            }
            //进行碰杠操作之后把抢拾按钮隐藏
            if ((this.room_Card.peng_card[0] && this.room_Card.peng_card[0].length > 0) || this.IsQiangShi[pos] == 1) {
                this.room_Action.setQiangShiVis(false);
            }

            return;
        }

        if ((OpType & ActionTypeMJ.TYPE_Qiang) == ActionTypeMJ.TYPE_Qiang || (OpType & ActionTypeMJ.TYPE_Shi) == ActionTypeMJ.TYPE_Shi) {
            needRemoveOutCard = true;
            needOpenOutCard = true;
            //MJModel.mj_mo_cards[pos] = -1;
            this.IsQiangShi[pos] = 1;
            if (pos == 0) {
                this.room_Action.qiangshi.setTouchEnabled(false);
            }
            this.room_Card.ChangeLastCardPos(pos);
            this.room_Card.addQiangCard(pos, card);
        }

        if (needRemoveOutCard) {
            MJModel.cur_seat = seatid;
            this.room_Card.removeOutCard(out_pos, card, canDelay);
            this.room_Card.setCurCardTip(false);
        }

        if (needOpenOutCard) {
            MJModel.cur_seat = seatid;
            this.room_Info.showDirectionTip(pos);
            if (MJModel.isMyPlayer(seatid)) {
                this.myselfOpenOutCard(false, isBaoTingBc);
            }
        }
    },


    handler_op_sound: function (pos, sex, OpType, OpType2, effect) {
        if ((OpType & ActionTypeMJ.TYPE_Qiang) == ActionTypeMJ.TYPE_Qiang || (OpType & ActionTypeMJ.TYPE_Shi) == ActionTypeMJ.TYPE_Shi || (OpType & ActionTypeMJ.TYPE_QX_TING) == ActionTypeMJ.TYPE_QX_TING) {
            return;
        }
        if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
            if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU && effect == "") {
                var zimo = this.room_Card.isDuoPai(pos);
                effect = "hu";
                if (zimo) {
                    effect = "zimo";
                }
            } else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                effect = "peng";
            }
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("shuozhoutdh/sound/operator/%1_%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", effect));
        } else {
            this._super(pos, sex, OpType, OpType2, effect);
        }
    },

    handler_gang_scores: function (scores, OpType, OpType2, canDelay) {

    },

    handler_server_mo_card_bc: function (data, canDelay) {
        var userGetCard = parsePacket("proto.game.AckUserGetCard", data);
        var seatId = userGetCard.ChairID;
        var card = userGetCard.Card;
        var operate = userGetCard.OpType;
        var leftCardNum = userGetCard.LeftCardNum;
        var encrypt_code = userGetCard.encrypt_code;
        if (card == null)encrypt_code = 0;

        var fcard = Utils.getFCardValue(card, encrypt_code);
        if (fcard != 255) this.room_Card.removePublicCardByNums(1, userGetCard.OpType2 == 1 || userGetCard.GetCardDir == 1);
        if (this.room_Action) this.room_Action.setOperator(-1);
        MJModel.cur_seat = seatId;
        if (MJModel.isMyPlayer(seatId))MJModel.curOperateID = userGetCard.operateid;
        Log(this, "kaifeng mopai optype=" + operate);

        if (leftCardNum != null) this.room_Info.showCardNums(leftCardNum);
        this.room_Info.showDirectionTip(MJModel.getPosBySeatid(seatId));
        this.room_Info.showTime(MJModel.outCardTime);

        Sound.getInstance().playEffect(getResPath("RoomMJ/sound/effect/mo_card.mp3"));
        var pos = MJModel.getPosBySeatid(seatId);

        if (this.room_Action_video) {
            this.room_Action_video.reset();
            this.room_Action_video.setOperator(pos, operate);
        }

        if (fcard != 255) this.room_Card.reflashHandCard(pos, true, false, true);
        if (canDelay == false) {
            this.room_Card.initMoCard(pos, card, true, encrypt_code);
            return;
        }

        if (MJModel.isMyPlayer(seatId)) {
            MJModel.curOperateCard = fcard;
            MJModel.curOperate = operate;
            this.room_Card.initMoCard(pos, card, false, encrypt_code);
            //my operate action
            {
                MJModel.gang_info = [];
                MJModel.listen_info = [];
                //点击出来有听操作提示
                if (userGetCard.ListenInfo.length > 0) {
                    var listeninfo_size = userGetCard.ListenInfo.length;

                    for (var i = 0; i < listeninfo_size; i++) {
                        var tli = Utils.clone(tagListenInfo);
                        tli.HuInfo = [];

                        tli.OutCard = userGetCard.ListenInfo[i].OutCard;
                        var huinfoLen = userGetCard.ListenInfo[i].HuInfo.length;
                        tli.HuInfoLen = huinfoLen;
                        for (var j = 0; j < huinfoLen; j++) {
                            var huInfo = Utils.clone(tagHuInfo);
                            huInfo.Card = userGetCard.ListenInfo[i].HuInfo[j].Card;
                            huInfo.LeftNum = userGetCard.ListenInfo[i].HuInfo[j].LeftNum;
                            huInfo.HuFanNum = userGetCard.ListenInfo[i].HuInfo[j].HuFanNum;
                            tli.HuInfo.push(huInfo);
                        }
                        MJModel.listen_info.push(tli);
                    }
                }


                if (userGetCard.GangInfo.length > 0) {
                    var gang_size = userGetCard.GangInfo.length;

                    for (var i = 0; i < gang_size; i++) {
                        var tgInfo = Utils.clone(tagGangInfo);
                        tgInfo.curCard = userGetCard.GangInfo[i].Card;
                        tgInfo.state = userGetCard.GangInfo[i].state;

                        MJModel.gang_info.push(tgInfo);
                    }
                }

                if (( operate & ActionType.TYPE_LISTEN) == ActionType.TYPE_LISTEN) {
                    operate = operate - ActionType.TYPE_LISTEN;
                }

                //是否有碰杠胡的操作
                if (operate > 0) {
                    if (this.room_Action) {
                        this.room_Action.setOperator(operate);
                        this.room_Action.setTingPaiVis(false);
                        this.autoHuCard();
                    }
                    return;
                }
                else {
                    this.myselfOpenOutCard(true);
                }
            }

            this.room_Card.checkCardSafe();
        }
        else {
            this.room_Card.initMoCard(pos, card, false, encrypt_code);
        }
    },

    setDuoPaiTip: function () {
        //自己手牌多的情况下，并且没有摸牌，将手牌最后一张移动到摸牌位置提示用户出牌
        if (this.IsQiangShi[0] || this.IsQiangShi[2]) {
            //if(MJModel.mj_mo_cards[0] == -1 && this.IsMyOutCard){
            //    this.IsMyOutCard = false;
            //    var lastIndex = 0;
            //    var lastCard = this.room_Card.hand_card[0][lastIndex];
            //    this.room_Card.setCurCardTip(false);
            //    lastCard.setMyPosition(MJConfig.getMoCardPos(0));
            //}
        } else {
            //自己手牌多的情况下，并且没有摸牌，将手牌最后一张移动到摸牌位置提示用户出牌
            if (this.room_Card.isDuoPai(0) && MJModel.mj_mo_cards[0] == -1) {
                var lastIndex = 0;
                var lastCard = this.room_Card.hand_card[0][lastIndex];
                this.room_Card.setCurCardTip(false);
                lastCard.setMyPosition(MJConfig.getMoCardPos(0));
            }
        }

    },


    resetGame: function (allClean) {
        this._super(allClean);
        cc.log("lin=resetgame=2");
        this._curLaizi = -1;
        this._curLaizipi = -1;
        this._curLaizipi2 = -1;
        this.IsQiangShi = [0, 0, 0, 0];
        if (this.room_Action.qiangshi) {
            this.room_Action.qiangshi.setTouchEnabled(true);
        }
        this._fanmain_card = [-1, -1, -1, -1];
        this._baotingStates = [-1, -1, -1, -1];
        this.room_Action.setQiangShiSelected(false);
        this.room_Action.setQiangShiVis(false);
        if (this.IsDaiFeng && MJModel.mj_roomType == 0) {
            if (!this.room_Action.qiangshi.isVisible()) this.room_Action.setQiangShiVis(true);
        }
    },

    initMJResult: function () {
        MJResult.prototype.createAvatar = function (pos) {
            var seatid = MJModel.getSeatidByPos(pos);
            var player = MJModel.players[seatid];
            var layer = new cc.Layer();
            var headPic = null;
            if (pos != 0 && MJModel.mj_isFZB && !MJModel.isOnVideo) {
                headPic = Utils.createCircleAvatarBypng(getResPath("RoomMJ/head_room2.png"), "Avatars/user4_unlogin.png", "Avatars/user4_unlogin.png", cc.size(96, 96));
            } else {
                headPic = Utils.createCircleAvatar(player.avatar, "Avatars/user4_unlogin.png", "Avatars/user4_unlogin.png", cc.size(96, 96));
            }
            layer.addChild(headPic);

            var framepath = getResPath("RoomMJ/result2/head_bg.png");
            var scale = 1;

            var headFrame = new cc.Sprite(framepath);
            headFrame.setAnchorPoint(cc.p(0.5, 0.5));
            headFrame.setScale(scale);
            headFrame.setPosition(cc.p(0, 0));
            layer.addChild(headFrame, -1);

            var headSize = cc.size(96, 96);

            //是否是庄家
            if (MJModel.banker_seatid == seatid) {
                var bankerPic = new cc.Sprite(getResPath("RoomMJ/banker.png"));
                bankerPic.setAnchorPoint(cc.p(0.5, 0));
                bankerPic.setPosition(cc.p(-headSize.width / 2 + 5, 0));
                layer.addChild(bankerPic);
            }

            //位置
            var posPic = new cc.Sprite(__String.createWithFormat(getResPath("RoomMJ/result2/result_detail_pos_%1.png"), pos));
            posPic.setAnchorPoint(cc.p(0, 0));
            posPic.setPosition(cc.p(-headSize.width / 2 - 10, -headSize.height / 2 - 10));
            layer.addChild(posPic);

            //玩家名字
            var nameLabel = null;
            if (pos != 0 && MJModel.mj_isFZB && !MJModel.isOnVideo) {
                nameLabel = new cc.LabelTTF(Utils.parseName(6, __String.createWithFormat("玩家%1", pos)), "Arial", 24);
            } else {
                nameLabel = new cc.LabelTTF(Utils.parseName(6, player.name), "Arial", 24);
            }
            nameLabel.setColor(this.leftColor);
            nameLabel.setAnchorPoint(cc.p(0, 0));
            nameLabel.setPosition(cc.p(65, -30));
            layer.addChild(nameLabel);

            return layer;
        };
    },

    //handler_op_effect: function (pos, out_pos, sex, OpType, OpType2, effect) {
    //    this.room_Tip.showSimpleEffect(pos, out_pos, OpType, effect);
    //},
    handler_op_effect: function (pos, out_pos, sex, OpType, OpType2 , effect) {
        if((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU || (OpType & ActionType.TYPE_QX_TING) == ActionType.TYPE_QX_TING){
            return;
        }else{
            this.room_Tip.showSimpleEffect(pos , out_pos , OpType , effect);
        }
    },
    handler_out_card_sound: function (sex, card) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("shuozhoutdh/sound/chupai/%1_%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", Utils.toHex2(card)));
        } else {
            this._super(sex, card);
        }
    },
    handler_server_out_card_bc: function (data, canDelay) {
        var userOutCard = parsePacket("proto.game.AckUserOutCard", data);
        var seatId = userOutCard.ChairID;
        var card = userOutCard.Card;
        var da_type = userOutCard.da_type;
        var XianNingLaiZi = userOutCard.XianNingLaiZi;
        var pos = MJModel.getPosBySeatid(seatId);
        if (XianNingLaiZi) {
            var cardItem = this.room_Card.out_card[pos][this.room_Card.out_card[pos].length - 1];
            if (MJModel.isMyPlayer(seatId) && cardItem && cardItem.value == card && !MJModel.isOnVideo) {
                cardItem.updateValue(0);
            }
            this._fanmain_card[pos] = card;
        }

        this._super(data, canDelay)

        if (MJModel.isOnVideo) {
            this.room_Action.setOperator(-1);
        }

        if (MJModel.isMyPlayer(seatId) && MJModel.mj_lockcard_type == 1) {
            MJModel.mj_lockcard_type = 2;
        }

        if (this.room_Card) {
            this.room_Card.setSomeCardClickState();
        }
    },
    _setGameType: function () {
        var pkg_id = 1;
        var play_id = [];
        if (this.mj_roomType == 0) {
            play_id.push("四人");
        } else if (this.mj_roomType == 1) {
            play_id.push("三人");
        } else if (this.mj_roomType == 2) {
            play_id.push("二人");
        }

        if (MJModel.RoomConfigID.indexOf(10400001) != -1) {
            play_id.push("报听");
        }

        if (MJModel.RoomConfigID.indexOf(10400002) != -1) {
            play_id.push("带风");
            this.IsDaiFeng = true;
        }

        if (MJModel.RoomConfigID.indexOf(10400003) != -1) {
            play_id.push("荒庄不荒杠");
        }

        if (MJModel.RoomConfigID.indexOf(10400004) != -1) {
            play_id.push("过胡只可自摸");
        }

        if (MJModel.RoomConfigID.indexOf(10400005) != -1) {
            play_id.push("暗杠可见");
            this.AnGangKeJian = true;
        }

        if (MJModel.RoomConfigID.indexOf(10400006) != -1) {
            play_id.push("癞子");
        }
        if (MJModel.RoomConfigID.indexOf(10400007) != -1) {
            play_id.push("听后可杠");
        }
        if (MJModel.RoomConfigID.indexOf(10400008) != -1) {
            play_id.push("自摸胡");
        }
        if (MJModel.RoomConfigID.indexOf(10400009) != -1) {
            play_id.push("轮庄");
        }
        //----
        if (MJModel.RoomConfigID.indexOf(10410001) != -1) {
            play_id.push("平胡");
        }

        if (MJModel.RoomConfigID.indexOf(10410002) != -1) {
            play_id.push("大胡");
        }
        if (MJModel.RoomConfigID.indexOf(99990001) != -1) {
            play_id.push("防作弊");
            MJModel.mj_isFZB = true;
        }

        if (MJModel.RoomConfigID.indexOf(2000001) != -1) {
            play_id.push("可少人开局");
        }
        if (MJModel.RoomConfigID.indexOf(2000002) != -1) {
            play_id.push("可少人开局");
        }
        if (MJModel.RoomConfigID.indexOf(2000003) != -1) {
            play_id.push("可少人开局");
        }
        //---
        if (MJModel.RoomConfigID.indexOf(10420001) != -1) {
            play_id.push("缺一门(条)");
        }

        if (MJModel.RoomConfigID.indexOf(10430001) != -1) {
            play_id.push("1分钟解散");
        }
        if (MJModel.RoomConfigID.indexOf(10430002) != -1) {
            play_id.push("3分钟解散");
        }
        if (MJModel.RoomConfigID.indexOf(10430003) != -1) {
            play_id.push("5分钟解散");
        }

        MJModel.play_id_str = play_id;

        var gameDes = "";
        for (var i = 0; i < play_id.length; i++) {
            gameDes += play_id[i];
            if (i != play_id.length - 1) {
                gameDes += " ";
            }
        }
        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);
        this._setFastChat();
    },
    fastChat3: [
        "不好意思，刚才接了个电话",//1
        "不要走，决战到天亮",//2
        "赶紧出牌吧，不要墨迹了",//3
        "赶紧出牌吧",//4
        "留个微信吧，以后一起玩",//5
        "听见碰，不要动",//6
        "我起什么打什么，就你胡牌吧",//7
        "想胡牌打发财",//8
        "呀，碰上高手了，你这个牌打的真好",//9
        "又打错牌了",//10
        "又点了炮了，你可真是个炮手",//11
        "咱也自摸一下吧",//12
        "这是什么破网啊，又掉线了",//13
    ],
    _setFastChat: function () {
        var chatList = this.fastChat3;
        MJModel.mj_fastChat = this.fastChat3;

        var self = this;
        Utils.getFastChatSound = function (chat, sex) {
            for (var i = 0; i < chatList.length; i++) {
                if (chatList[i] == chat) {
                    cc.log("lin=getFastChatSound=" + chat);
                    cc.log("lin=getFastChatSound=" + getResPath(__String.createWithFormat("shuozhoutdh/sound/fastchat/%1_%2.mp3", sex == SEX_ID.SEX_MAN ? "m" : "w", i + 1)));
                    return getResPath(__String.createWithFormat("shuozhoutdh/sound/fastchat/%1_%2.mp3", sex == SEX_ID.SEX_MAN ? "m" : "w", i + 1));
                }
            }
            return "";
        };
    },

    handler_server_scene_info_uc: function (hubei_scene, canDelay) {
        cc.log("lin=resetgame=1");
        if (hubei_scene) {
            if (hubei_scene.laizicard) {
                this._setLaizi(hubei_scene.laizicard, -1, false);
            }
        }
        var ackGameFree = hubei_scene.GameSence;
        if (ackGameFree.RoomConfigID.indexOf(2000001) != -1)MJModel.changMode = 2;
        if (ackGameFree.RoomConfigID.indexOf(2000002) != -1)MJModel.changMode = 1;
        if (ackGameFree.RoomConfigID.indexOf(2000003) != -1)MJModel.changMode = 3;
        MJModel.RoomConfigID = ackGameFree.RoomConfigID;
        this._setGameType();

        this._super(hubei_scene.GameSence, canDelay);
        if (this.IsDaiFeng && MJModel.mj_roomType == 0) {
            if (!this.room_Action.qiangshi.isVisible()) this.room_Action.setQiangShiVis(true);
        }
        if (hubei_scene.GameSence.sceneStatus != 0) {
            var baoting = hubei_scene.tingstatus;
            for (var i = 0; i < baoting.length; i++) {
                var pos = MJModel.getPosBySeatid(i);
                var isbaoting = baoting[i];
                if (MJModel.isMyPlayer(i)) {
                    if (isbaoting == 2) {
                        MJModel.mj_lockcard_type = 2;
                    } else if (isbaoting == 1) {
                        MJModel.mj_lockcard_type = 1;
                        this.room_Action.setQXTing(false);
                    }
                }

                if (isbaoting == 1 || isbaoting == 2) {
                    this._baotingStates[i] = 1;
                    this.players[pos].showTingFlag(pos);
                    this.room_Action.setQiangShiVis(false);
                }
            }
        }
        var IsQiangShi = hubei_scene.IsQiangShi;
        if (IsQiangShi) {
            for (var i = 0; i < IsQiangShi.length; i++) {
                if (MJModel.isMyPlayer(i)) {
                    if (IsQiangShi[i]) {
                        this.room_Action.setQiangShiSelected(true);
                    } else {
                        this.room_Action.setQiangShiSelected(false);
                    }
                }
            }
        }
        if (this.IsDaiFeng && MJModel.mj_roomType == 0) {
            if (!this.room_Action.qiangshi.isVisible()) this.room_Action.setQiangShiVis(true);
        }
        //检查是否有碰杠牌，如果有碰杠牌则将抢拾按钮隐藏
        if (this.room_Card.peng_card[0] && this.room_Card.peng_card[0].length > 0) {
            this.room_Action.setQiangShiVis(false);
        }

        if (this.room_Card.qiangshi_card[0] && this.room_Card.qiangshi_card[0].length > 0) {
            this.room_Action.setQiangShiVis(true);
            this.room_Action.qiangshi.setTouchEnabled(false);
        }

        //初始化抢拾
        var ShiCards = hubei_scene.ShiCards;
        if (ShiCards) {
            for (var i = 0; i < ShiCards.length; i++) {
                var cards = ShiCards[i].card;
                var pos = MJModel.getPosBySeatid(i);
                for (var k = 0; k < cards.length; k++) {
                    this.IsQiangShi[pos] = 1;
                    if (pos == 0) {
                        this.room_Action.qiangshi.setTouchEnabled(false);
                    }
                    this.room_Card.ChangeLastCardPos(pos);
                    this.room_Card.addQiangCard(pos, cards[k]);
                }
                if (pos == 0) {
                    var isOpenOutCard = false;
                    var len = this.room_Card.hand_card[pos].length + cards.length;
                    var v = parseInt(len % 3);
                    if (v == 2) {
                        isOpenOutCard = true;
                    }
                    cc.log("lin=scene=1");
                    var opType = MJModel.curOperate;
                    if ((opType & ActionType.TYPE_LISTEN) == ActionType.TYPE_LISTEN) {
                        opType = opType - ActionType.TYPE_LISTEN;
                    }
                    if (isOpenOutCard && opType <= 0) {

                        MJModel.cur_seat = MJModel.seatid;
                        this.myselfOpenOutCard(true);
                    }
                }
            }
        }

        if (this.room_Card) {
            this.room_Card.setSomeCardClickState();
        }

    },
    //自动出牌
    autoOutCardTimeOut: function (dt) {
        this.unschedule(this.autoOutCardTimeOut);
        if (MJModel.isAutoOutCard == false && MJModel.mj_lockcard_type != 2)return;
        if (MJModel.TouPiaoING == true) return;//投票期间 该功能不起作用
        sendOutCard(MJModel.curOperateCard);
    },
    autoOutCard: function () {
        this.schedule(this.autoOutCardTimeOut, 0.5);
    },
    myselfOpenOutCard: function (IsMoCard, showTip) {
        if (IsMoCard == undefined) IsMoCard = false;
        if (showTip == undefined) showTip = true;
        if (MJModel.isOnVideo) {
            return;
        }

        if ((MJModel.isAutoOutCard && IsMoCard) || (MJModel.mj_lockcard_type == 2)) {
            this.autoOutCard();
            this.room_Card.resetAllCardClickState();
            this.room_Card.setSomeCardClickState();
            return;
        }
        this.room_Card.resetAllCardClickState();
        MJModel.canTouchCard = true;
        MJModel.canChoiceMore = false;
        this.room_Card.setTingPaiFlag(true);

        if (this.room_Action) this.room_Action.setTingPaiVis(false);
        if (this.room_Action) this.room_Action.setAutoOutCardVis(false);

        this.room_Card.setSomeCardClickState();

        if (showTip)this.room_Tip.showOutCardTip();
    },
});
var MJResult_XinYu = MJCommonResult.extend({
    updateContentView: function (ackGameEndJS) {
        this.ackGameEnd = ackGameEndJS.gameend;
        this.ackGameEndJS = ackGameEndJS;
        //输赢标志
        var seatId = MJModel.seatid;
        var score = this.ackGameEnd.Score[seatId];
        var effectName = "lose";
        if (score > 0) {
            effectName = "win";
        }
        this._win_effect(effectName);

        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);

        var itemHeight = 120;

        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;

            var countY = m;

            if (MJModel.mj_roomType == 1) {
                if (pos == 2) {
                    continue;
                }
            }

            if (MJModel.mj_roomType == 2) {
                if (pos == 1 || pos == 3) {
                    continue;
                }

                if (pos == 0) {
                    countY = 1;
                } else if (pos == 2) {
                    countY = 2;
                }
            }

            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 495 - count * itemHeight;
            var startX = 40;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX + 60, startY + 55));
            this.bgSpr.addChild(headLayer, 10);

            //上排牌 杠
            var ganghuLayer = this.createFanTypeLayer(seatid);
            this.bgSpr.addChild(ganghuLayer, 10);
            ganghuLayer.setPosition(cc.p(startX + 230, startY + 65));

            //下排牌
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX + 0, startY));
            this.bgSpr.addChild(handCardLayer);

            // this.createSpecialHuTip(startX + 785, startY + 40, seatid);
            this.createSpecialHuTip(startX + 865, startY + 40, seatid);
            this.createAllScoreLabel(startX + 865, startY + 70, seatid);

            // 输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX + 1100, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            //中马列表
            var maLayer = this.createMaLayer(seatid);
            if (maLayer) {
                maLayer.setPosition(cc.p(startX + 230, startY + 65));
                this.bgSpr.addChild(maLayer);
            }
            count++;
        }

        this.addPaoConfig();
    },
    createHandCard: function (seatid) {
        //胡的那张牌....
        try {
            this.ackGameEnd.UserCard[seatid].ChangeableCards.sort(MJModel.mj_table.room_Card.sortCardValue);
        } catch (e) {
            Log(this, e);
        }
        var tagHu = this.ackGameEnd.faninfo[seatid].hucard;

        var layer = new cc.Layer();
        var imageView = new ccui.ImageView(getResPath("RoomMJ/result2/item_bg.png"));
        imageView.setPosition(cc.p(0, 0));
        imageView.setAnchorPoint(cc.p(0, 0));
        layer.addChild(imageView);

        var pos = MJModel.getPosBySeatid(seatid);
        var isDuo = false;
        var isDuoCard = 0;

        if (this.ackGameEnd.UserCard.length > seatid) {
            var x = 230;
            var y = 15;
            var ShiCards = this.ackGameEndJS.ShiCards;
            if (ShiCards) {
                var shicards = ShiCards[seatid];
                for (var i = 0; i < shicards.card.length; i++) {
                    isDuo = true;
                    isDuoCard++;

                    var QiangshiCard = new MJCard();
                    QiangshiCard.setValue(shicards.card[i], 0, CardType.Card_End, 0);
                    QiangshiCard.setScale(0.3);
                    QiangshiCard.setPosition(cc.p(x + QiangshiCard.getBoundingBox().width, y + 20));
                    layer.addChild(QiangshiCard);
                    x += QiangshiCard.getBoundingBox().width;
                }
            }
            if (isDuo) {
                if (isDuoCard == 1) {
                    x += 15;
                } else {
                    x += isDuoCard * 7;
                }
            }
            var paiSpace = 10;
            var penggangSize = cc.size(88, 40);
            for (var i = 0; i < this.ackGameEnd.UserCard[seatid].FixedCardsLen; i++) {

                var state = this.ackGameEnd.UserCard[seatid].stFixedCards[i].state;
                var card = this.ackGameEnd.UserCard[seatid].stFixedCards[i].CardData;
                var chairID = this.ackGameEnd.UserCard[seatid].stFixedCards[i].chairID;
                var out_pos = MJModel.getPosBySeatid(chairID);

                if (card == undefined || card == null || card == 0) {
                    continue;
                }
                //下排杠牌
                var gangCard = new MJPeng();
                var QiangshiCard = new MJCard();
                gangCard.setAnchorPoint(cc.p(0.0, 0.0));

                if ((state & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                    gangCard.setValue(PengType.Peng_Peng, pos, card, 0, out_pos, true, state);
                }
                else if ((state & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                    gangCard.setValue(PengType.Peng_AnKang, pos, card, 0, out_pos, true, state);
                }
                else if ((state & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                    gangCard.setValue(PengType.Chi_L, pos, card, 0, out_pos, true, state);
                }
                else if ((state & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                    gangCard.setValue(PengType.Chi_M, pos, card, 0, out_pos, true, state);
                }
                else if ((state & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                    gangCard.setValue(PengType.Chi_R, pos, card, 0, out_pos, true, state);
                }
                else if ((state & ActionType.TYPE_Qiang) == ActionType.TYPE_Qiang || (state & ActionType.TYPE_Shi) == ActionType.TYPE_Shi) {
                    isDuo = true;
                    isDuoCard++;
                    QiangshiCard.setValue(card, 0, CardType.Card_End, 0);

                    QiangshiCard.setScale(0.3);
                    QiangshiCard.setPosition(cc.p(x + QiangshiCard.getBoundingBox().width, y + 20));
                    layer.addChild(QiangshiCard);
                    x += QiangshiCard.getBoundingBox().width;
                    continue;
                }
                else {
                    gangCard.setValue(PengType.Peng_Kang, pos, card, 0, out_pos, true, state);
                }
                gangCard.setScale(0.35);
                gangCard.setPosition(cc.p(x + penggangSize.width / 2, y + penggangSize.height / 2));
                layer.addChild(gangCard);

                x += penggangSize.width + 18;


            }

            var is_remove = 0;
            var need_remove = (parseInt(this.ackGameEnd.UserCard[seatid].ChangeableCardsLen % 3) == 2);
            //var need_remove = false;
            //if (this.ackGameEnd.EndInfo[seatid].EndType == 1) {
            //    need_remove = true;
            //}
            this.hand_card[pos] = [];
            this.ackGameEnd.UserCard[seatid].ChangeableCards.sort(MJModel.mj_table.room_Card.sortCard);
            //牌面信息
            for (var i = this.ackGameEnd.UserCard[seatid].ChangeableCardsLen - 1; i >= 0; i--) {
                //去掉type＝＝1的判断 有些游戏自摸不一定叫自摸 只判断玩家的手牌数量 只要多牌 而且有胡牌数据 就跳过
                if (is_remove == 0 && need_remove && tagHu) {
                    if (this.ackGameEnd.UserCard[seatid].ChangeableCards[i] == tagHu) {
                        is_remove = 1;
                        continue;
                    }
                }
                var handCard = new MJCard();
                handCard.setValue(this.ackGameEnd.UserCard[seatid].ChangeableCards[i], 0, CardType.Card_Hand, 0);
                handCard.setScale(0.4);
                handCard.setAnchorPoint(cc.p(0.0, 0.0));
                handCard.setPosition(cc.p(x, y));
                x += handCard.getBoundingBox().width;
                layer.addChild(handCard);
                this.hand_card[pos].push(handCard);
            }

            //胡的牌
            cc.log("----tagHu---: " + tagHu);
            this.hu_card[pos] = null;
            if (tagHu) {
                //多加一个是否多牌的判断 防止前面又没有跳过 这里又多加的bug
                var huCard = new MJCard();
                huCard.setValue(tagHu, 0, CardType.Card_End, 0);
                huCard.setScale(0.4);
                huCard.setAnchorPoint(cc.p(0.0, 0.0));
                huCard.setPosition(cc.p(x + paiSpace, y));
                layer.addChild(huCard);
                this.hu_card[pos] = huCard;
            }
        }
        this.handCradPos.x = x;
        this.handCradPos.y = y;
        return layer;
    },
    addPaoConfig: function () {
        var str = ""
        if (MJModel.RoomConfigID.indexOf(1194002) != -1) {
            str = "跑1";
        }

        if (MJModel.RoomConfigID.indexOf(1194003) != -1) {
            str = "跑3";
        }

        if (MJModel.RoomConfigID.indexOf(1194004) != -1) {
            str = "跑5";
        }

        if (MJModel.RoomConfigID.indexOf(1194005) != -1) {
            str = "跑10";
        }

        var maPic = new cc.LabelTTF(str, "Arial", 22);
        maPic.setColor(this.leftColor);
        maPic.setAnchorPoint(cc.p(0.5, 0.5));
        maPic.setPosition(cc.p(50, 47));
        this.bgSpr.addChild(maPic);

    },
    createMaLayer: function (seatid) {
        return;
        var layer = null;
        layer = new cc.Layer();
        var mapaiList = [[0x51, 0x52, 0x51, 0x52], [0x51, 0x52, 0x51, 0x52], [0x51, 0x52, 0x51, 0x52], [0x51, 0x52, 0x51, 0x52]];
        if (mapaiList) {
            var startx = 10;
            if (mapaiList[seatid].length > 0) {
                var maPic = new cc.LabelTTF("花牌: ", "Arial", 22);
                maPic.setName("huapaiTip");
                maPic.setColor(this.leftColor);
                maPic.setAnchorPoint(cc.p(0.0, 0));
                maPic.setPosition(cc.p(startx));
                layer.addChild(maPic);

                var cardlist = mapaiList[seatid];
                for (var i = 0; i < cardlist.length; i++) {
                    var card = new MJCard();
                    card.setValue(cardlist[i], 0, CardType.Card_End, 0);
                    card.setAnchorPoint(cc.p(0.0, 0));
                    card.setScale(0.3);
                    card.setPosition(cc.p(startx + maPic.getContentSize().width + parseInt((i )) * 25, -5));
                    layer.addChild(card, 50 - i);
                }

            }

        }
        return layer;
    }
    ,
    createFanTypeLayer: function (seatid) {
        var ackGameEnd = this.ackGameEnd;
        //牌型
        //---
        var huType = ["", "", "", ""];
        for (var i = 0; i < ackGameEnd.faninfo.length; i++) {
            var specialType = ackGameEnd.faninfo[i].SpecialType;

            switch (specialType) {
                case HuType.HU_ZIMO:
                case HuType.HU_PAOHU:
                case HuType.HU_QIANG_GANG:
                case HuType.HU_GANG_SHANG_HUA:
                case HuType.HU_DIANPAO:
                    for (var j = 0; j < ackGameEnd.faninfo[i].addfan.length; j++) {
                        var add_fan = ackGameEnd.faninfo[i].addfan[j];
                        var add_type = add_fan.AddType;
                        var add_num = add_fan.AddNum;
                        huType[i] += this.getFanStr(add_type, add_num);
                    }
                    break;
            }
        }

        if (MJModel.mj_table._baotingStates[seatid] == 1) {
            huType[seatid] = huType[seatid] + "报听"
        }
        //if(huType[seatid]){
        //    huType[seatid] = "" + huType[seatid] + "]";
        //}
        var layer = new cc.Layer();
        var startx = 0;
        var y = 0;
        var maPic = new cc.LabelTTF(huType[seatid], "Arial", 20);
        maPic.setColor(this.leftColor);
        maPic.setAnchorPoint(cc.p(0.0, 0));
        maPic.setPosition(cc.p(startx, y + 10));
        layer.addChild(maPic);

        startx = maPic.getContentSize().width + 10;
        var x = startx
        var y = 0;
        if (this.ackGameEnd.EndGangInfo.length > seatid) {
            var gameEndInfo = this.ackGameEnd.EndGangInfo[seatid];
            var map = {};
            for (var i = 0; i < gameEndInfo.Gang.length; i++) {
                var gang = gameEndInfo.Gang[i];
                if (map[gang.GangType] == undefined) {
                    map[gang.GangType] = [];
                }
                map[gang.GangType].push(gang.GangCard);
            }
            for (var key in map) {
                if (!map.hasOwnProperty(key))continue;
                var a = key;
                var typeLabel = new cc.LabelTTF(this.getStringByType(a), "Arial", 20);
                typeLabel.setColor(this.leftColor);
                typeLabel.setAnchorPoint(cc.p(0, 0));
                typeLabel.setPosition(cc.p(x, y + 10));
                layer.addChild(typeLabel);

                x += typeLabel.getContentSize().width;

                var temp = map[key];
                for (var j = 0; j < temp.length; j++) {
                    var smallCard = null;
                    var c = Utils.toHex2(temp[j]);
                    smallCard = new cc.Sprite(__String.createWithFormat(getResPath("shuozhoutdh/smallCard/%1.png"), c));
                    if (smallCard != undefined) {
                        smallCard.setAnchorPoint(cc.p(0.0, 0.0));
                        smallCard.setPosition(cc.p(x, y));
                        layer.addChild(smallCard);
                    }
                    x += 28;
                    if (j == temp.length - 1) {
                        x += 18;
                    }
                }
            }
        }
        return layer;
    }
    ,
    getStringByType: function (stype) {
        var type = Number(stype);
        var str = "";
        switch (type) {
            case HUGANG.HUGANG_ZHIGANG:
                str = "直杠";
                break;
            case HUGANG.HUGANG_WANGANG:
                str = "补杠";
                break;
            case HUGANG.HUGANG_ANGANG:
                str = "暗杠";
                break;
            case HUGANG.HUGANG_DIANPAO:
                str = "点炮";
                break;
            case HUGANG.HUGANG_PAOHU:
                str = "炮胡";
                break;
            case 512:
                str = "点杠(听)";
                break;
            case 64:
                str = "点杠";
                break;
            case HUGANG.HUGANG_ZIMO:
                str = "自摸";
                break;
            default:
                break;
        }
        return str;
    },
    getFanStr: function (fanType, num) {
        var str = AddFanNameArray[fanType];
        if (!str) {
            return "";
        }
        return "" + str + "x" + num + " ";
    },
    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var path = "";
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5天和 6地和 7抢杠胡 8杠上开花 9花上添花
            switch (fanInfo.SpecialType) {
                case 1:
                    path = "RoomMJ/result2/zi_mo_icon.png";
                    break;
                case 2:
                    path = "RoomMJ/result2/pao_hu_icon.png";
                    break;
                case 3:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                case 5:
                    path = "RoomMJ/result2/qiang_gang_icon.png";
                    break;
                case 7:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                default:
                    break;
            }
            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setAnchorPoint(cc.p(0, 0.5));
                typeSprite.setPosition(cc.p(startX, startY));
                this.bgSpr.addChild(typeSprite);

            }
        }
    }
    ,
    createAllScoreLabel: function (startX, startY, seatid) {
        return;
        var ackGameEnd = this.ackGameEndJS;
        var endinfo = ackGameEnd.endinfo[seatid]


        var tagHu = this.ackGameEnd.faninfo[seatid].hucard;

        var gang_add = endinfo.gang_add;
        var lianbanker_add = endinfo.lianbanker_add;
        var hua_add = endinfo.hua_add;
        var sihua_add = endinfo.sihua_add;

        var hutypeStr = "";
        if (MJModel.banker_seatid == seatid) {
            hutypeStr += "连庄:" + ((lianbanker_add != null) ? lianbanker_add : 0);
        }
        if (tagHu) {
            if (hutypeStr != "") {
                hutypeStr += " ";
            }
            hutypeStr += "杠:" + ((gang_add != null) ? gang_add : 0);
            hutypeStr += " 花:" + ((hua_add != null) ? hua_add : 0);
            //hutypeStr += " 四花:" + ((sihua_add != null) ? sihua_add : 0);
        }

        var maPic = new cc.LabelTTF(hutypeStr, "Arial", 20);
        maPic.setColor(this.leftColor);
        maPic.setAnchorPoint(cc.p(0, 0));
        maPic.setPosition(cc.p(startX, startY));
        this.bgSpr.addChild(maPic);
    },
    //输赢分
    createScoreLayer: function (seatid) {
        var layer = new cc.Layer();
        var score = 0;
        if (this.ackGameEnd.Score && this.ackGameEnd.Score.length > seatid) score = this.ackGameEnd.Score[seatid];
        var width = 0;
        var path = getResPath("RoomMJ/result2/result_small_label_lose.png");
        if (score > 0) {
            path = getResPath("RoomMJ/result2/result_small_label_win.png");
        }
        var scoredes = ":";
        if (score == 0) scoredes = "";
        var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), path, 29, 37, '0');

        scoreLabel.setAnchorPoint(cc.p(0.0, 0.5));

        scoreLabel.setPosition(cc.p(width, 15));
        scoreLabel.setName("scoreLabel");
        layer.addChild(scoreLabel);

        if (Math.abs(score) >= 10000) {
            scoreLabel.setScale(0.8);
        }
        return layer;
    }
    ,
});
