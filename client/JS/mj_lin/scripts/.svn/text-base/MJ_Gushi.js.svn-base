loadProtoFile("proto/xinyanggushimj.proto");

var selfCMD = {
    CLIENT_XIAPAO: 1112,   //象棋玩家走子
    CLIENT_DINGQUE: 1101,   //象棋悔棋
    CLIENT_YAHU: 1402,   //象棋悔棋
    SERVER_XIAPAO_START: 5076,    //换玩家下棋
    SERVER_XIAPAO_OK: 5077,    //广播玩家下棋
    SERVER_XIAPAO_END: 5085,   //象棋求和
    SERVER_DINGQUE_START: 5002,    //换玩家下棋
    SERVER_DINGQUE_OK: 5063,    //广播玩家下棋
    SERVER_DINGQUE_END: 5084,   //象棋求和
    SERVER_YAHU_START: 5082,    //换玩家下棋
    SERVER_YAHU_OK: 5083,    //广播玩家下棋
    SERVER_YAHU_END: 5086,   //象棋求和
};

var sendXiaPao = function (v) {
    var packet = createPacket("proto.game.xinyanggushimj.ReqXiaPaoZi");
    packet.PaoZi = v;
    sendPacket(packet, selfCMD.CLIENT_XIAPAO);
};

var sendDingQue = function (v) {
    var packet = createPacket("proto.game.xinyanggushimj.ReqChooseLack");
    packet.ChooseLack = v;
    sendPacket(packet, selfCMD.CLIENT_DINGQUE);
};

var MJTable_Gushi = MJTable.extend({
    tag: "MJTable_Gushi",
    isRecordShow: false,
    _pkg_id: 0,
    myLackcard: -1,
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        ZJHModel.getInstance().sound = 0.25;
        ZJHModel.getInstance().bgMusic = 0.5;
        cc.audioEngine.setEffectsVolume(ZJHModel.getInstance().sound);
        cc.audioEngine.setMusicVolume(ZJHModel.getInstance().bgMusic);

        MJModel.mj_suport_fangyan = 0;
        MJModel.otherOutCardEffect = false;
        MJModel.outCardEffect_style = 1;

        MJModel.mj_bg_use = 0;
        MJModel.toupiaoTipsType = 1;
        MJModel.chi_layout = 3;
        MJModel.needTipWhenPass = 0;
        MJModel.mj_touch_tip = 1;
        MJModel.isOutCard = true;
        MJModel.mj_chat_style = 5;
        MJModel.mj_gps_type = 1;
        MJModel.mj_public_style = 1;
        MJModel.choiceMoreGang_stlye = 1;
        MJModel.mj_listenLayer_autoshow = true;
        MJModel.mj_double_click_style = 1;
        MJModel.mj_font = "xieshi";
        MJModel.mj_fontSize = "dahao";
        MJModel.mj_style = "huaijiu";
        MJModel.mj_table_view = "25d";
        MJModel.shareType = 1;
        MJModel.mj_reflashcardtype = 1;
        MJModel.orderType = 1;

        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];
            if (this._pkg_id == 1571 || this._pkg_id == 1533) {
                MJModel.mj_roomType = 1;
            }
        } catch (e) {
            Log(this, e);
        }

        try {
            var help = this.roomPublic.getChildByName("game_help");
            help.setVisible(false);
        } catch (e) {

        }
        this._init_extend();
        this._super();
        //this.schedule(this.test, 1.0);
        //this.handler_jiaocheng();
        MJModel.mj_paiban = "horizontal";
        this.init_pao();
        this.init_dingque();
    },
    isSupportPublicCard: function () {
        return false;
    },
    playBgSound: function () {
        if (MJModel.yinyue == "jingkuai") {
            Sound.getInstance().PlayBgSound(getResPath("xinyanggushi/sound/csmj1.mp3"));
        } else if (MJModel.yinyue == "suhuan") {
            Sound.getInstance().PlayBgSound(getResPath("RoomMJ/sound/csmj2.mp3"));
        } else {
            Sound.getInstance().PlayBgSound(getResPath("xinyanggushi/sound/csmj.mp3"));
        }
    },
    getBgStr: function () {
        if (MJModel.mj_style != "shishang" && MJModel.mj_style != "huaijiu" && MJModel.mj_style != "jingdian") {
            MJModel.mj_style = "shishang";
        }
        if (MJModel.mj_table_view != "25d" && MJModel.mj_table_view != "2d") {
            MJModel.mj_table_view = "25d";
        }
        if (MJModel.mj_table_view == "25d") {
            return __String.createWithFormat("xinyanggushi/bgs/%1_%2.png", MJModel.mj_style, MJModel.mj_table_view);
        }
        return __String.createWithFormat("RoomMJ/bgs/%1_%2.png", MJModel.mj_style, MJModel.mj_table_view);
    },
    updateBg: function (isInit) {
        if (isInit == undefined)isInit = false;
        var size = cc.director.getWinSize();
        if (this.bg == null) {
            this.bg = new ccui.ImageView(getResPath(this.getBgStr()));
            this.bg.setAnchorPoint(cc.p(0.5, 0.5));
            this.bg.setContentSize(size);
            this.bg.setScale9Enabled(true);
            this.bg.setPosition(size.width / 2, size.height / 2);
            this.addChild(this.bg, -100);
        } else {
            this.bg.loadTexture(getResPath(this.getBgStr()));
        }

        if (MJModel.mj_bg_use == 0) {
            Utils.addCardSprites(__String.createWithFormat("xinyanggushi/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));
            this.loadCardConfig("xinyanggushi/card_Config/card_config.json");
        } else {
            Utils.addCardSprites(__String.createWithFormat("RoomMJ/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));
            //if (MJModel.mj_roomType == 2) {
            //    this.loadCardConfig("RoomMJ/config/card_config2d_2ren.json");
            //} else {
            //    this.loadCardConfig("RoomMJ/config/card_config2d.json");
            //}
            this.loadCardConfig("xinyanggushi/card_Config/card_config2d.json");
        }

        if (isInit)return;
        if (this.pre_scene)this.pre_scene.bg.loadTexture(getResPath(this.getBgStr()));
        this.room_Card.reflashAllCardUI();
        for (var i = 0; i < 4; i++) {
            this.players[i].setPosition(MJConfig.getPlayerPos(i));
            this.players[i].reflashNameMoneyPosition();
        }
        if (this.room_Info)this.room_Info.reflash();

        GetChild(this.paoLayer, "tips").setPosition(MJConfig.getInfoPos());
        if (this.room_Card.isDuoPai(0)) {
            this.room_Card.setSomeCardClickState();
        }

    },
    _init_extend: function () {
        var self_table = this;
        //MJCards.prototype.checkCardSafe = function () {
        //
        //};

        MJCards.prototype.outHandCardEffct2 = function (pos, value) {
            this.addOutCard(pos, value);
            this.reflashHandCard(pos, true, true);
        };

        //不要出牌按钮
        MJCards.prototype.createOutCardBtn = function (pos, value) {

        };

        MJPreTable.prototype.setTableIcon = function () {
            var size = cc.director.getWinSize();
            var mjType = new cc.Sprite(MJModel.mj_table.getMjTypePath());
            if (mjType != null) {
                mjType.setPosition(cc.p(size.width / 2, size.height / 2 + 170));
                this.addChild(mjType, 0);
            }
        };

        var super_MJPreTable_ctor = MJPreTable.prototype.ctor;
        MJPreTable.prototype.ctor = function () {
            super_MJPreTable_ctor.call(this);
            var yaoqing = this.btns["yaoqing"];
            var copy = this.btns["copyshare"];
            var yaoqingpos = yaoqing.getPosition();
            var copypos = copy.getPosition();
            yaoqing.setPosition(copypos);
            copy.setPosition(yaoqingpos);

            this.bg.loadTexture(getResPath(self_table.getBgStr()));
        };

        //var super_mjcards_reflashAllCardUI = MJCards.prototype.reflashAllCardUI;
        //MJCards.prototype.reflashAllCardUI = function () {
        //    super_mjcards_reflashAllCardUI.call(this);
        //    for (var i = 0; i < 4; i++) {
        //        this.reflashOutCard(i);
        //    }
        //};
        //MJCards.prototype.addOutCard = function (pos, value, showPoint) {
        //    if (showPoint == undefined) showPoint = true;
        //    var card = new MJCard();
        //
        //    this.out_card[pos].push(card);
        //    card.setValue(value, pos, CardType.Card_Out, this.out_card[pos].length - 1);
        //    card.setMyPosition(MJConfig.getOutCardPos(pos, 0));
        //    this.addChild(card, MJConfig.getOutCardOrder(pos, 0));
        //    this.reflashOutCard(pos);
        //    if (showPoint == false) {
        //        return card;
        //    }
        //    try {
        //        if (this.curCardTip == null) {
        //            this.curCardTip = new cc.Sprite(getResPath("RoomMJ/cur_card.png"));
        //            this.curCardTip.setAnchorPoint(cc.p(0.5, 0));
        //            this.curCardTip.runAction(cc.sequence(cc.moveBy(0.5, cc.p(0, 10)), cc.moveBy(0.5, cc.p(0, -10))).repeatForever());
        //            this.curCardTip.setVisible(false);
        //            this.addChild(this.curCardTip, 1000);
        //        }
        //    } catch (e) {
        //        this.curCardTip = null;
        //    }
        //
        //    if (this.curCardTip != null) {
        //        this.curCardTip.setPosition(cc.p(card.getPosition().x, card.getPosition().y + card.getBoundingBox().height / 2));
        //        this.curCardTip.setVisible(true);
        //    }
        //    return card;
        //};

        var super_MJConfig_getOutCardPos = MJConfig.getOutCardPos;
        MJConfig.getOutCardPos = function (pos, index) {
            if (MJModel.mj_bg_use == 1) {
                index = index % 20;
            } else {
                if (pos == 0 || pos == 2) {
                    index = index % 18;
                } else {
                    index = index % 16;
                }
            }
            return super_MJConfig_getOutCardPos.call(this, pos, index);
        };

        var super_MJConfig_getOutCardOrder = MJConfig.getOutCardOrder;
        MJConfig.getOutCardOrder = function (pos, index) {
            if (MJModel.mj_bg_use == 1) {
                index = index % 20;
                var order = [
                    [
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    ],
                    [
                        19, 18, 17, 16, 15, 14, 13, 12, 11, 10,
                        9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                    ],
                    [
                        2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    ],
                    [
                        10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                    ],
                ];
                return order[pos][index];
            } else {

                if (pos == 0 || pos == 2) {
                    index = index % 18;
                } else {
                    index = index % 16;
                }

                var order = [
                    [
                        1, 1, 1, 1, 1, 1, 1, 1,
                        20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
                    ],
                    [
                        15, 14, 13, 12, 11, 10, 9,
                        8, 7, 6, 5, 4, 3, 2, 1, 0,
                    ],
                    [
                        2, 2, 2, 2, 2, 2, 2, 2,
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    ],
                    [
                        9, 10, 11, 12, 13, 14, 15,
                        0, 1, 2, 3, 4, 5, 6, 7, 8,
                    ],
                ];
                return order[pos][index];
            }
        };

        //MJCards.prototype.reflashOutCard = function (pos) {
        //    for (var j = 0; j < this.out_card[pos].length; j++) {
        //        try {
        //            var index = this.getOutCardRealOrder(pos, j, this.out_card[pos].length);
        //            var card = this.out_card[pos][j];
        //            card.reflash(index);
        //            card.check_addFlag(j);
        //            card.setMyPosition(MJConfig.getOutCardPos(pos, index));
        //            this.reorderChild(card, MJConfig.getOutCardOrder(pos, index));
        //        } catch (e) {
        //
        //        }
        //    }
        //};
        //
        //MJCards.prototype.getOutCardRealOrder = function (pos, index, all) {
        //    if (MJModel.mj_bg_use == 0) {
        //        var dindex = 0;
        //        if (pos == 0 || pos == 2) {
        //            index = parseInt(index % 18);
        //            if (all < 10) {
        //                dindex = parseInt((10 - all) / 2);
        //            } else if (all < 18 && index >= 10) {
        //                dindex = parseInt((8 - (all - 10)) / 2);
        //            }
        //            return parseInt((dindex + index) % 18);
        //        } else {
        //            index = parseInt(index % 16);
        //            if (all < 9) {
        //                dindex = parseInt((9 - all) / 2);
        //            } else if (all < 16 && index >= 9) {
        //                dindex = parseInt((6 - (all - 9)) / 2);
        //            }
        //            return parseInt((dindex + index) % 16);
        //        }
        //    } else {
        //        if (pos == 1 | pos == 3) {
        //            var dindex = 0;
        //            if (all < 10) {
        //                dindex = parseInt((10 - all) / 2);
        //            } else if (all < 20 && index >= 10) {
        //                dindex = parseInt((10 - (all - 10)) / 2);
        //            } else if (all < 30 && index >= 20) {
        //                dindex = parseInt((10 - (all - 10 - 10)) / 2);
        //            }
        //            return dindex + index;
        //        } else {
        //            var dindex = 0;
        //            if (all < 10) {
        //                dindex = parseInt((10 - all) / 2);
        //            } else if (all < 20 && index >= 10) {
        //                dindex = parseInt((10 - (all - 10)) / 2);
        //            }
        //            return dindex + index;
        //        }
        //    }
        //};

        Setting.prototype.showPaiBanView = function (is) {
            is = false;
            this._gameSettingLayer.getChildByName("light_title").setVisible(is);
            this.checkboxs_gamesetting["paiban_horizontal"].setVisible(is);
            this.checkboxs_gamesetting["paiban_vertical"].setVisible(is);
        };

        MJTips.prototype.showGameStateEffect = function (type) {
            var path = "";
            var name = "";
            if (type == 1) {
                path = getResPath("xinyanggushi/effect/kaiju/effects_pjks.ExportJson");
                name = "effects_pjks";
                Sound.getInstance().playEffect(getResPath("RoomMJ/sound/mj_kj.mp3"));
            } else if (type == 3) {
                path = getResPath("RoomMJ/effect/liuju/effects_xmjliuju.ExportJson");
                name = "effects_xmjliuju";
            } else {
                return;
            }
            try {
                ccs.armatureDataManager.addArmatureFileInfo(path);
                var size = cc.director.getWinSize();
                var armature = new ccs.Armature(name);
                if (armature != null) {
                    var animation = armature.getAnimation();
                    if (animation) {
                        if (typeof animation.playWithIndex === "function") {
                            animation.playWithIndex(0);

                            armature.setPosition(MJConfig.getInfoPos());
                            this.addChild(armature, 10000);

                            armature.runAction(cc.sequence(cc.delayTime(type == 1 ? 2.5 : 1.2), cc.removeSelf()));
                        }
                    }
                }
            } catch (e) {
                Log(this, e);
            }
        };

        var super_initList = ShareList.prototype.initList;
        ShareList.prototype.initList = function (bigresult, sharetype, position, ischangebg, applist) {
            super_initList.call(this, bigresult, sharetype, position, ischangebg, [4, 1, 5]);
        };

        MJCards.prototype.sortCard = function (a, b) {
            return self_table._sortCard(a, b);
        };

        MJCard.prototype.check_addFlag = function (index) {
            self_table._checkAddCardFlag(this, index);
        };

        //湖北麻将不要自动胡牌功能
        MJAction.prototype.setAutoOutCardVis = function (value) {
        };

        var super_setSomeCardClickState = MJCards.prototype.setSomeCardClickState;
        MJCards.prototype.setSomeCardClickState = function () {
            super_setSomeCardClickState.call(this);
            var hasLackCard = false;
            for (var i = 0; i < this.hand_card[0].length; i++) {
                var card = this.hand_card[0][i];
                if (parseInt(card.getValue() / 16) == self_table.myLackcard) {
                    hasLackCard = true;
                    break;
                }
            }

            if (hasLackCard) {
                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    if (parseInt(card.getValue() / 16) != self_table.myLackcard) {
                        card.setBlackVis(true);
                        card.setCardTouchEnable(false);
                    }
                }
            }
        };

        MJPlayer.prototype.setDingQue = function (v) {
            if (!this.liangpai_flag) {
                this.liangpai_flag = new cc.Sprite(getResPath("xinyanggushi/dingque/que0.png"));
                this.liangpai_flag.setVisible(false);
                this.liangpai_flag.setScale(0.3);
                if (this.pid == 1) {
                    this.liangpai_flag.setPosition(cc.p(10, this.m_size.height - 10));
                }
                else {
                    this.liangpai_flag.setPosition(cc.p(this.m_size.width - 10, this.m_size.height - 10));
                }
                this.addChild(this.liangpai_flag);
            }
            if (this.liangpai_flag) {
                this.liangpai_flag.setTexture(getResPath("xinyanggushi/dingque/que" + v + ".png"));
                this.liangpai_flag.setVisible(v != -1);
            }
        };

        var superreset = MJPlayer.prototype.reset;
        MJPlayer.prototype.reset = function (allClean, isGameStart) {
            superreset.call(this);
            this.setDingQue(-1);
        };

        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(false);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };
    },

    playBgSound: function () {
        if (MJModel.yinyue == "jingkuai") {
            Sound.getInstance().PlayBgSound(getResPath("xinyanggushi/sound/csmj1.mp3"));
        } else if (MJModel.yinyue == "suhuan") {
            Sound.getInstance().PlayBgSound(getResPath("RoomMJ/sound/csmj2.mp3"));
        } else {
            Sound.getInstance().PlayBgSound(getResPath("xinyanggushi/sound/csmj.mp3"));
        }
    },
    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.getValue();
            if (typeof b === "object") bv = b.getValue();
            var lackType = this.myLackcard;
            if (lackType != -1) {
                var paiSea = parseInt(av / 16);
                var paiSeb = parseInt(bv / 16);
                if (paiSea == lackType && paiSeb != lackType)return -1;
                if (paiSea != lackType && paiSeb == lackType)return 1;
            }
            return bv - av;
        } catch (e) {
            return 0;
        }
    },
    test: function (dt) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;
        if (tempCount == 5 && true) {
            var packet = {
                "gameend": {
                    "UserCard": [{
                        "ChangeableCardsLen": 11,
                        "ChangeableCards": [17, 17, 17, 34, 34, 36, 37, 38, 39, 40, 41],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{"CardData": 18, "state": 4, "chairID": 2, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 7,
                        "ChangeableCards": [7, 8, 8, 23, 23, 24, 24],
                        "FixedCardsLen": 2,
                        "stFixedCards": [{
                            "CardData": 4,
                            "state": 1,
                            "chairID": 2,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 19, "state": 1, "chairID": 2, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 13,
                        "ChangeableCards": [2, 3, 4, 6, 7, 7, 8, 9, 22, 22, 23, 24, 25],
                        "FixedCardsLen": 0,
                        "stFixedCards": [],
                        "stFenZhangCard": null
                    }],
                    "Score": [20, -9, -11],
                    "EndState": 0,
                    "EndGangInfo": [{
                        "Gang": [{"GangType": 4, "GangCard": 18}, {"GangType": 16, "GangCard": 18}],
                        "TotalGangScore": 2
                    }, {"Gang": [], "TotalGangScore": -1}, {"Gang": [], "TotalGangScore": -1}],
                    "faninfo": [{
                        "chairid": 0,
                        "SpecialType": 1,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 36,
                        "DianPao": []
                    }, {
                        "chairid": 1,
                        "SpecialType": 0,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {"chairid": 2, "SpecialType": 0, "FanNum": 0, "addfan": [], "hucard": 0, "DianPao": []}],
                    "money": [100020, 99991, 99989],
                    "ts": 1543299930,
                    "md5": []
                }, "xiapao": [2, 1, 2], "yahu": [], "hufen": [18, -8, -10], "gangfen": [2, -1, -1]
            };
            this.handler_server_game_end_bc(packet, true);
            return
        }
    },

    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.xinyanggushimj.tagCDGameScence", jpacket);
            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.xinyanggushimj.XYGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_XIAPAO_START) {
            this._handler_server_start_xiapao_bc(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_XIAPAO_OK) {
            this._handler_server_xiapao_ok_bc(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_XIAPAO_END) {
            this._handler_server_xiapao_end_bc(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_DINGQUE_START) {
            this._handler_server_start_dingque_bc(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_DINGQUE_OK) {
            this._handler_server_dingque_ok_bc(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_DINGQUE_END) {
            this._handler_server_dingque_end_bc(jpacket, canDelay);
            return;
        }
        this._super(cmd, jpacket, canDelay, svrid);
    },
    handlerAutoUpTableReady: function (nums, selfIsReady) {
        if (MJModel.seatid == -1 && nums < 4) {
            this.actionCallBack("uptable");
        }
        else if (selfIsReady == false) {
            //if (MJModel.canQuxiaoZhun()) {
            //    if (MJModel.roomState != 0) this.actionCallBack("ready");
            //} else {
            //    this.actionCallBack("ready");
            //}
        }
    },
    handler_server_out_card_bc: function (data, canDelay) {
        try {
            this._super(data, canDelay);
            var userOutCard = parsePacket("proto.game.AckUserOutCard", data);
            var seatId = userOutCard.ChairID;
            var can_show_listen_info = true;
            for (var j = 0; j < MJModel.final_listen_info.length; j++) {
                if (MJModel.final_listen_info[j].Card == 255) {
                    can_show_listen_info = false;
                    break;
                }
            }
            if (MJModel.isMyPlayer(seatId))MJModel.mj_table.removeChildByName("tingpai_layer");
            if (MJModel.final_listen_info.length > 0 && can_show_listen_info && MJModel.isMyPlayer(seatId)) {
                MJModel.mj_listenLayer_autoshow = true;
                var selectLayer = new TingPaiLayer();
                selectLayer.show2(MJModel.final_listen_info);
                selectLayer.setName("tingpai_layer");
                MJModel.mj_table.addChild(selectLayer, 100);//一定要在MJAction下边
            } else {
                cc.eventManager.dispatchCustomEvent("tingpai_info_notice_reflash");
            }

            if (MJModel.isOnVideo) {
                this.room_Action.setOperator(-1);
            }
        } catch (e) {
            Log(this, e);
        }
        if (MJModel.isMyPlayer(seatId) && this.room_Card.isDuoPai(0) && !MJModel.isOnVideo) {
            if (MJModel.isLogOut)return;
            MJModel.isLogOut = true;

            MJModel.mj_table.release();
            ZJHModel.getInstance().roomToHall();
            ERROR(this, "error no the card:");
            PlatformHelper.showToast("数据错误，请勿进行违规操作");
        }
    },
    _handler_game_record: function (data, canDelay) {
        //-----新总结算界面
        cc.log("------big End");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var pkgId = this._pkg_id;
        var gameType = "固始麻将";
        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];
        gameType += " · " + MJModel.base_money + "分底";

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        //var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;

        var max_score = 0;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            if (recoreInfo.totalscore > max_score) {
                max_score = recoreInfo.totalscore;
            }
        }

        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            //var playerRecord = totalRecord.player_records[i];
            var player = MJModel.players[i];
            var arrStr = ["自摸次数", "接炮次数", "公杠次数", "暗杠次数", "点炮次数"];
            //次数
            var arrcount = [recoreInfo.Ex1, recoreInfo.Ex2, recoreInfo.Ex3, recoreInfo.Ex4, recoreInfo.Ex5];
            if (player && player.uid != -1 && player.uid != 0) {
                addX = 39 + (i * 302);
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var isWin = false;
                if (max_score > 0 && recoreInfo.totalscore == max_score) {
                    isWin = true;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, isWin, _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner, recoreInfo.dissState);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }

            if (recoreInfo.totalscore != 0) {
                has_result = true;
            }

        }
        bigResult.refresh(PlayerNumber);
        if (has_result) {
            if ((MJModel.mj_roomType == 0 && PlayerNumber != 4) || (MJModel.mj_roomType == 1 && PlayerNumber != 3) || (MJModel.mj_roomType == 2 && PlayerNumber != 2)) {
                ERROR(this, "pId:" + pkgId + "type:" + MJModel.mj_roomType + "num:" + PlayerNumber + "d:" + data);
            }
        }
        this.release();
    },

    handler_server_game_end_bc: function (hubeiGameend, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            var ackGameEnd = hubeiGameend.gameend;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            this.room_Card.hideOutCardBtn();
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);
            this.room_Info.stopTime();

            var showhandcard = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var showendstate = cc.callFunc(function () {
                if (state == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
                else {
                }
            });

            var showendscore = cc.callFunc(function () {
                self.room_Tip.reset();
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var tongbumoney = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var gameendreset = cc.callFunc(function () {
                self.room_Action.setReady2Visible(false);
                try {
                    var result = new MJResult_XinYu();
                    result.updateContentView(hubeiGameend);
                    result.setName("reset_remove");
                    self.addChild(result, 100000);
                } catch (e) {
                    cc.log("game end:", e);
                    self.room_Action.setReady2Visible(true);
                }
            });

            if (MJModel.isOnVideo && canDelay == false) {
                this.runAction(cc.sequence(tongbumoney, cc.delayTime(0), gameendreset));
                return;
            }
            if (state == 1) {
                this.runAction(cc.sequence(cc.delayTime(0), showhandcard, cc.delayTime(1), showendscore, cc.delayTime(0), tongbumoney, showendstate, cc.delayTime(1), gameendreset));
            } else {
                this.runAction(cc.sequence(cc.delayTime(0), showhandcard, cc.delayTime(1), showendscore, cc.delayTime(0), tongbumoney, gameendreset));
            }
        } catch (e) {
            ERROR(this, e);
        }
    },

    timeEnd: function (dt) {

        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    },
    getMjTypePath: function () {
        return getResPath("xinyanggushi/flag/pkgid1.png");
    },
    _setGameType: function () {
        MJModel.play_id_str = [];
        //甩字胡不可炮胡
        if (MJModel.RoomConfigID.indexOf(1084001) != -1)MJModel.play_id_str.push("固始断门");
        if (MJModel.RoomConfigID.indexOf(1084002) != -1)MJModel.play_id_str.push("花三坡");
        if (MJModel.RoomConfigID.indexOf(1085001) != -1)MJModel.play_id_str.push("点炮收一家");
        if (MJModel.RoomConfigID.indexOf(1085002) != -1)MJModel.play_id_str.push("点炮收三家");
        if (MJModel.RoomConfigID.indexOf(1085003) != -1)MJModel.play_id_str.push("自摸胡");
        if (MJModel.RoomConfigID.indexOf(1086001) != -1)MJModel.play_id_str.push("买嘴");
        if (MJModel.RoomConfigID.indexOf(1086002) != -1)MJModel.play_id_str.push("带风牌");
        if (MJModel.RoomConfigID.indexOf(1086003) != -1)MJModel.play_id_str.push("占庄");
        if (MJModel.RoomConfigID.indexOf(1086004) != -1)MJModel.play_id_str.push("荒庄不荒杠");
        if (MJModel.RoomConfigID.indexOf(1086005) != -1)MJModel.play_id_str.push("七对");
        if (MJModel.RoomConfigID.indexOf(1086006) != -1)MJModel.play_id_str.push("清一色");
        if (MJModel.RoomConfigID.indexOf(1086007) != -1)MJModel.play_id_str.push("窟窿");
        if (MJModel.RoomConfigID.indexOf(1086009) != -1)MJModel.play_id_str.push("边吃");
        if (MJModel.RoomConfigID.indexOf(1086010) != -1)MJModel.play_id_str.push("单吊");
        if (MJModel.RoomConfigID.indexOf(1086008) != -1)MJModel.play_id_str.push("杠上开花");
        if (MJModel.RoomConfigID.indexOf(1086011) != -1)MJModel.play_id_str.push("抢杠胡");
        if (MJModel.RoomConfigID.indexOf(1086012) != -1)MJModel.play_id_str.push("豪华七对");
        if (MJModel.RoomConfigID.indexOf(1086013) != -1)MJModel.play_id_str.push("自摸不翻倍");
        if (MJModel.RoomConfigID.indexOf(1086014) != -1)MJModel.play_id_str.push("位置变动");
        if (MJModel.RoomConfigID.indexOf(1086015) != -1)MJModel.play_id_str.push("杠跑");

        var gameDes = "";
        for (var i = 0; i < MJModel.play_id_str.length; i++) {
            gameDes += MJModel.play_id_str[i];
            if (i != MJModel.play_id_str.length - 1) {
                gameDes += " ";
            }
        }

        if (MJModel.isOnVideo)cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);
        this._setFastChat();
    },
    fastChat3: ["你太牛了", "手气真好", "快点出牌", "今天真高兴", "你放炮，我不胡", "你家里开银行的吧", "你的牌打的太好了"],
    _setFastChat: function () {
        var chatList = [];
        chatList = this.fastChat3;
        MJModel.mj_fastChat = this.fastChat3;
        var self = this;
        Utils.getFastChatSound = function (chat, sex) {
            for (var i = 0; i < chatList.length; i++) {
                if (chatList[i] == chat) {
                    return getResPath(__String.createWithFormat("xinyanggushi/sound/fastchat/%1/fix_msg_%2.mp3", sex == SEX_ID.SEX_MAN ? "m" : "w", i + 1));
                }
            }
            return "";
        };
    },

    _showHandcardFlag: function (isEndShow) {
        if (MJModel.isOnVideo) {
            for (var j = 0; j < 4; j++) {
                var allcards = this.room_Card.hand_card[j];
                if (allcards) {
                    for (var i = 0; i < allcards.length; i++) {
                        var card = allcards[i];
                        this._checkAddCardFlag(card);
                    }
                }
            }
            return;
        }
        var allcards = this.room_Card.hand_card[0];
        if (allcards) {
            for (var i = 0; i < allcards.length; i++) {
                var card = allcards[i];
                this._checkAddCardFlag(card);
            }
        }
    },
    _checkAddCardFlag: function (card, index) {
        try {
            if (MJModel.RoomConfigID.indexOf(1084001) == -1)return;

            if (card.type != CardType.Card_Out) {
                return;
            }

            var cinex = card.index;
            if (index != undefined)cinex = index;
            if (cinex != 0) {
                return;
            }

            try {
                var p = card.getChildByName("sprite");
                p.removeChildByName("laizi_flag");
                var m_size = p.getContentSize();
                var flagName = this._getFlagName(card.pos, card.type);
                if (flagName == "") {
                    return;
                }
                var flag_str = "duan";
                if (MJModel.mj_bg_use == 0) {
                    flag_str += "25d";
                } else {
                    flag_str += "2d";
                }
                //if (card.getValue() == this._curLaizi) card.setStoreColor(cc.color(255, 249, 137));

                var uiJson = ccs.load(getResPath("xinyanggushi/mjFlag.json"));
                var flag = uiJson.node;
                flag.setName("laizi_flag");
                flag.setPosition(cc.p(m_size.width / 2, m_size.height / 2));
                p.addChild(flag);
                flag.getChildByName(flag_str).getChildByName(flagName).setVisible(true);
            } catch (e) {
                Log(this, e);
            }
        } catch (e) {
            Log(this, e);
        }
    },
    //每个方向角标对应
    _getFlagName: function (pos, type) {
        if (type == CardType.Card_Out || type == CardType.Card_Hu) {
            return "out" + pos;
        }
        if (type == CardType.Card_Hand) {
            return "h" + pos;
        }
        if (type == CardType.Card_End) {
            return "end" + pos;
        }
        return "";
    },
    //每个方向角标对应
    _flagDirection: function (pos, flag, m_size) {
        if (pos == 1) {
            flag.setPosition(cc.p(0, 17));
            flag.setRotation(-90);
        } else if (pos == 2) {
            flag.setPosition(cc.p(m_size.width, 17));
            flag.setRotation(180);
        } else if (pos == 3) {
            flag.setPosition(cc.p(m_size.width, m_size.height));
            flag.setRotation(90);
        }
    },
    resetGame: function (allClean) {
        this._super(allClean);
        this.myLackcard = -1;
        this.hidePaoLayer();
        this.hideDingQueLayer();
        this.hideDingQueOk();

        this.hidePaoOk();
        this.hideDingQueResult();
        this.hidePaoResult();
    },
    handler_server_scene_info_uc: function (hubei_scene, canDelay) {
        this.updateBg(true);
        var ackGameFree = hubei_scene.GameSence;
        var sceneStatus = ackGameFree.SceneStatus;
        if (hubei_scene.GameSence.SceneStatus != MJ_STATUS.MJ_GAME_FREE) {
            if (hubei_scene.paoziing && hubei_scene.xiapaoziisok) {
                for (var i = 0; i < hubei_scene.xiapaoziisok.length; i++) {
                    var ok = hubei_scene.xiapaoziisok[i];
                    if (ok == 0) {
                        if (MJModel.isMyPlayer(i)) {
                            this.showPaoLayer();
                        }
                    } else {
                        this.showPaoOk(i, true);
                    }
                }
            } else {
                if (hubei_scene.paozi)this.showPaoResult(hubei_scene.paozi);
            }

            if (hubei_scene.chooselack && hubei_scene.chooselackisok) {
                for (var i = 0; i < hubei_scene.chooselackisok.length; i++) {
                    var ok = hubei_scene.chooselackisok[i];
                    if (ok == 0) {
                        if (MJModel.isMyPlayer(i)) {
                            this.showDingQueLayer();
                        }
                    } else {
                        this.showDingQueOk(i, true);
                    }
                }
            } else {
                if (hubei_scene.lacktype)this.showDingQueResult(hubei_scene.lacktype);
            }
        }
        if (ackGameFree.RoomConfigID.indexOf(2000001) != -1)MJModel.changMode = 2;
        this._super(ackGameFree, canDelay);

        this._setGameType();
        if (hubei_scene.paoziing || hubei_scene.chooselack || hubei_scene.yahu) {
            this.myselfCloseOutCard();
        }
    },
    handler_out_card_sound: function (sex, card) {
        Sound.getInstance().playEffect(getResPath("xinyanggushi/sound/luopai.mp3"));
        Sound.getInstance().playEffect(__String.createWithFormat(getResPath("xinyanggushi/sound/chupai/%1/%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", Utils.toHex2(card)));
        return;
        if (MJModel.mj_suport_fangyan == 1 && MJModel.mj_sound_use == 1) {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("xinyanggushi/sound/chupai/%1_%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", Utils.toHex2(card)));
        } else {
            this._super(sex, card);
        }
    },

    handler_op_sound: function (pos, sex, OpType, OpType2, effect) {
        if (true || (MJModel.mj_suport_fangyan == 1 && MJModel.mj_sound_use == 1)) {
            if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                effect = "angang";
            }
            else if ((OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
                effect = "zhigang";
            }
            else if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
                effect = "wangang";
            }
            else if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                var zimo = this.room_Card.isDuoPai(pos);
                effect = "paohu_" + Utils.Random(1, 4);
                if (zimo) {
                    effect = "zm_" + Utils.Random(1, 3);
                }
            } else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                effect = "peng_" + Utils.Random(1, 4);
            }
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("xinyanggushi/sound/operate/%1/%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", effect));
        } else {
            this._super(pos, sex, OpType, OpType2, effect);
        }
    },

    _handler_server_start_xiapao_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.xinyanggushimj.StartXiaPaoZi", data);
        this.showPaoLayer();
    },

    _handler_server_xiapao_ok_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.xinyanggushimj.AckXiaPaoZiOk", data);
        this.showPaoOk(jpacket.ChairID, true);
        if (MJModel.isMyPlayer(jpacket.ChairID))this.hidePaoLayer();
    },

    _handler_server_xiapao_end_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.xinyanggushimj.AckXiaPaoResult", data);
        this.hidePaoOk();
        this.showPaoResult(jpacket.paozi);
    },

    _handler_server_start_dingque_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.xinyanggushimj.StartChooseLack", data);
        this.showDingQueLayer();
    },

    _handler_server_dingque_ok_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.xinyanggushimj.AckBroadLack", data);
        this.showDingQueOk(jpacket.chairid, true);
        if (MJModel.isMyPlayer(jpacket.chairid))this.hideDingQueLayer();
    },

    _handler_server_dingque_end_bc: function (data, canDelay) {
        this.hideDingQueOk();
        var jpacket = parsePacket("proto.game.xinyanggushimj.AckLackResult", data);
        this.showDingQueResult(jpacket.lacktype);
        var mo_card = null;
        if (this.room_Card.isDuoPai(0)) {
            mo_card = this.room_Card.hand_card[0][this.room_Card.hand_card[0].length - 1];
            this.room_Card.hand_card[0].splice(this.room_Card.hand_card[0].length - 1, 1);
        }
        this.room_Card.reflashHandCard(0, true);
        if (mo_card) {
            mo_card.setMyPosition(MJConfig.getMoCardPos(0));
            this.room_Card.hand_card[0].push(mo_card);
        }
    },
    paoLayer: null,
    paoBtnLayer: null,
    init_pao: function () {
        var size = cc.director.getWinSize();
        var uiJson = ccs.load(getResPath("xinyanggushi/paoLayer.json"));
        this.paoLayer = uiJson.node;
        this.addChild(this.paoLayer);

        var btnLayer = GetChild(this.paoLayer, "btns");
        btnLayer.removeFromParent();
        setNodeSize(btnLayer, size);
        setNodeSize(GetChild(this.paoLayer, "tips2"), size);

        this.paoBtnLayer = btnLayer;
        this.addChild(this.paoBtnLayer, 100);
        var css = btnLayer.getChildren();
        for (var i in css) {
            var btn = css[i];
            if (btn) {
                btn.addClickEventListener(function (sender, evt) {
                    sendXiaPao(sender.getTag());
                });
            }
        }
        this.hidePaoLayer();
        this.hidePaoOk();
        this.hidePaoResult();
        GetChild(this.paoLayer, "tips").setPosition(MJConfig.getInfoPos());
    },
    showPaoLayer: function () {
        setNodeVis(this.paoBtnLayer, true);
    },
    hidePaoLayer: function () {
        setNodeVis(this.paoBtnLayer, false);
    },
    showPaoOk: function (seatid, v) {
        var pos = MJModel.getPosBySeatid(seatid);
        var node = GetChild(this.paoLayer, "tips2", "ok" + pos);
        setNodeVis(node, v);
    },
    hidePaoOk: function () {
        for (var i = 0; i < MJModel.Play_num; i++) {
            this.showPaoOk(i, false);
        }
    },
    showPaoResult: function (vs) {
        for (var i = 0; i < vs.length; i++) {
            if (vs[i] == -1 || vs[i] == 255)continue;
            var pos = MJModel.getPosBySeatid(i);
            var node = GetChild(this.paoLayer, "tips", "tip" + pos);
            node.setTexture(getResPath("xinyanggushi/pao/tip_" + vs[i] + ".png"));
            setNodeVis(node, true);
        }
    },
    hidePaoResult: function () {
        for (var i = 0; i < MJModel.Play_num; i++) {
            var node = GetChild(this.paoLayer, "tips", "tip" + i);
            setNodeVis(node, false);
        }
    },
    queLayer: null,
    init_dingque: function () {
        var size = cc.director.getWinSize();
        var uiJson = ccs.load(getResPath("xinyanggushi/queLayer.json"));
        this.queLayer = uiJson.node;
        this.addChild(this.queLayer, 100);
        var btnLayer = GetChild(this.queLayer, "btns");
        setNodeSize(btnLayer, size);
        var css = btnLayer.getChildren();
        for (var i in css) {
            var btn = css[i];
            if (btn && btn.getName() != "tip") {
                btn.addClickEventListener(function (sender, evt) {
                    sendDingQue(sender.getTag());
                });
            }
        }
        this.hidePaoLayer();
        this.hideDingQueLayer();
        this.hideDingQueOk();
    },

    showDingQueLayer: function () {
        var node = GetChild(this.queLayer, "btns");
        setNodeVis(node, true);
    },
    hideDingQueLayer: function () {
        var node = GetChild(this.queLayer, "btns");
        setNodeVis(node, false);
    },
    showDingQueOk: function (seatid, v) {
        var pos = MJModel.getPosBySeatid(seatid);
        var node = GetChild(this.queLayer, "tips2", "ok" + pos);
        setNodeVis(node, v);
    },
    hideDingQueOk: function () {
        for (var i = 0; i < MJModel.Play_num; i++) {
            this.showDingQueOk(i, false);
        }
    },
    showDingQueResult: function (vs) {
        for (var i = 0; i < vs.length; i++) {
            if (vs[i] == -1 || vs[i] == 0xFF)continue;
            var pos = MJModel.getPosBySeatid(i);
            var playerUI = this.players[pos];
            playerUI.setDingQue(vs[i]);
            if (MJModel.isMyPlayer(i))this.myLackcard = vs[i];
        }
    },
    hideDingQueResult: function () {
        for (var i = 0; i < MJModel.Play_num; i++) {
            var pos = MJModel.getPosBySeatid(i);
            var playerUI = this.players[pos];
            var node = GetChild(playerUI.rootNode, "que");
            setNodeVis(node, false);
        }
    },
});

var HuType = {
    HU_INVALID: 0,
    HU_ZIMO: 1,
    HU_PAOHU: 2,
    HU_HeiMo: 2,
    Hu_RuanMo: 1,
    HU_DIANPAO: 3,
    HU_BEIZIMO: 4,
    HU_QIANG_GANG: 5,
    HU_BEI_QIANG_GANG: 6,
    HU_YI_PAO_DUO_XIANG: 7,
    HU_GANG_SHANG_HUA: 8,
    HU_GANG_HOU_PAO: 9,
};

var AddFanType = {
    80: "窟窿",
    36: "七对",
    14: "清一色",
    24: "杠上开花",
    27: "豪华七对",
    79: "边张",
    89: "单吊",
    22: "抢杠胡",
};

var MJResult_XinYu = MJCommonResult.extend({
    updateContentView: function (ackGameEndJS) {
        this.ackGameEnd = ackGameEndJS.gameend;
        this.ackGameEndJS = ackGameEndJS;
        //输赢标志
        var seatId = MJModel.seatid;
        var score = this.ackGameEnd.Score[seatId];
        var effectName = "lose";
        if (score > 0) {
            effectName = "win";
        }
        this._win_effect(effectName);

        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);

        var itemHeight = 120;

        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;

            var countY = m;

            if (MJModel.mj_roomType == 1) {
                if (pos == 2) {
                    continue;
                }
            }

            if (MJModel.mj_roomType == 2) {
                if (pos == 1 || pos == 3) {
                    continue;
                }

                if (pos == 0) {
                    countY = 1;
                } else if (pos == 2) {
                    countY = 2;
                }
            }

            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 495 - count * itemHeight;
            var startX = 40;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX + 60, startY + 55));
            this.bgSpr.addChild(headLayer, 10);

            //上排牌 杠
            var ganghuLayer = this.createGangHuLayer(seatid);
            this.bgSpr.addChild(ganghuLayer, 10);
            ganghuLayer.setPosition(cc.p(startX + 230, startY + 65));

            //下排牌
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX + 0, startY));
            this.bgSpr.addChild(handCardLayer);

            this.createSpecialHuTip(startX + 785, startY + 40, seatid);
            //this.createSpecialHuTip(startX + 900, startY + 40, seatid);

            // 输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX + 1100, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            //中马列表
            var maLayer = this.createMaLayer(seatid);
            if (maLayer) {
                maLayer.setPosition(cc.p(startX + 845, startY + 85));
                this.bgSpr.addChild(maLayer);
            }
            count++;
        }
    },
    getXiaPao: function (v) {
        if (v == 0)return "不跑";
        if (v == 1)return "跑一";
        if (v == 2)return "跑二";
        if (v == 3)return "跑三";
    },
    createGangHuLayer: function (seatid) {
        var layer = new cc.Layer();
        var x = 0;
        var y = 0;
        var addFanType = [];
        if (this.ackGameEnd.faninfo.length > seatid) {
            var specialType = this.ackGameEnd.faninfo[seatid].SpecialType;
            switch (specialType) {
                case HuType.HU_ZIMO:
                case HuType.HU_PAOHU:
                case HuType.HU_QIANG_GANG:
                case HuType.HU_GANG_SHANG_HUA:
                    var addfan = this.ackGameEnd.faninfo[seatid].addfan;
                    for (var i = 0; i < addfan.length; i++) {
                        var add_fan = addfan[i];
                        var add_type = add_fan.AddType;
                        var add_value = add_fan.AddNum;
                        if (AddFanType[add_type]) {
                            addFanType.push(AddFanType[add_type]);
                        }
                    }
                    break;
            }
        }

        if (this.ackGameEndJS.xiapao.length > seatid && this.ackGameEndJS.xiapao[seatid] != -1) {
            addFanType.push(this.getXiaPao(this.ackGameEndJS.xiapao[seatid]));
        }
        for (var i = 0; i < addFanType.length; i++) {
            var fanType = new cc.LabelTTF(addFanType[i], "Arial", 20);
            fanType.setColor(this.leftColor);
            fanType.setAnchorPoint(cc.p(0, 0));
            fanType.setPosition(cc.p(x, y + 10));
            layer.addChild(fanType);
            x += fanType.getContentSize().width + 5;
        }
        return layer;
    },

    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var path = "";
            var ss = 1;
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5天和 6地和 7抢杠胡 8杠上开花 9花上添花
            switch (fanInfo.SpecialType) {
                case HuType.HU_ZIMO:
                    path = "RoomMJ/result2/zi_mo_icon.png";
                    break;
                case HuType.HU_PAOHU:
                    path = "RoomMJ/result2/pao_hu_icon.png";
                    break;
                case HuType.HU_DIANPAO:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                case HuType.HU_QIANG_GANG:
                    path = "RoomMJ/result2/qiang_gang_icon.png";
                    ss = 0.8;
                    break;
                case HuType.HU_BEI_QIANG_GANG:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                default:
                    break;
            }
            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setPosition(cc.p(startX, startY));
                typeSprite.setScale(ss);
                this.bgSpr.addChild(typeSprite);
            }
        }
    },
    //输赢分
    createScoreLayer: function (seatid) {
        var layer = new cc.Layer();

        var names = ["总分", "胡分", "杠分"];
        var values = [0, 0, 0];

        if (this.ackGameEnd.Score && this.ackGameEnd.Score.length > seatid) values[0] = this.ackGameEnd.Score[seatid];
        if (this.ackGameEndJS.hufen && this.ackGameEndJS.hufen.length > seatid) values[1] = this.ackGameEndJS.hufen[seatid];
        if (this.ackGameEndJS.gangfen && this.ackGameEndJS.gangfen.length > seatid) values[2] = this.ackGameEndJS.gangfen[seatid];

        var width = 30;
        var dx = 130;
        for (var i = 0; i < 3; i++) {
            var nameLabel = new cc.LabelTTF(names[i], "Arial", 24);
            nameLabel.setColor(this.leftColor);
            nameLabel.setAnchorPoint(cc.p(0, 0));
            nameLabel.setPosition(cc.p(width - dx * i, 20));
            layer.addChild(nameLabel);

            var score = values[i];
            var path = getResPath("RoomMJ/result2/result_small_label_lose.png");
            if (score > 0) {
                path = getResPath("RoomMJ/result2/result_small_label_win.png");
            }
            var scoredes = ":";
            if (score == 0) scoredes = "";
            var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), path, 29, 37, '0');
            scoreLabel.setAnchorPoint(cc.p(0.0, 0.5));
            scoreLabel.setPosition(cc.p(width - dx * i, -10));
            scoreLabel.setName("scoreLabel");
            layer.addChild(scoreLabel);
            scoreLabel.setScale(0.7);
        }

        return layer;
    },
});