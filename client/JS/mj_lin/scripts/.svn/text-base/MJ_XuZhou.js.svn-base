loadProtoFile("proto/xuzhougameproto.proto");

var AddFanType = {
    SYS_FAN_TYPE_PINGHU: 0,				//平胡
    SYS_FAN_TYPE_JIAHU: 1,				//夹胡
    SYS_FAN_TYPE_QIDUI: 2,				//七小对
    SYS_FAN_TYPE_HAOHUAQIDUI: 3,		//豪华七小对
    SYS_FAN_TYPE_QINGQIDUI: 4,		    //清一色七小对
    SYS_FAN_TYPE_QINGHAOHUAQIDUI: 5,    //清一色豪华七小对
    SYS_FAN_TYPE_PIAOHU: 6,		        //飘胡
    SYS_FAN_TYPE_QINGPIAOHU: 7,		    //清一色飘胡
    SYS_FAN_TYPE_TEHU: 8,			    //特胡
    SYS_FAN_TYPE_GANGSHANGHUA: 9,		//杠上开花
    SYS_FAN_TYPE_GANGHOUPAO: 10,		//杠后流泪
    SYS_FAN_TYPE_QUEYAOHUYAO: 11,       //缺幺胡幺
    SYS_FAN_TYPE_QINGYISE: 12,			//清一色
    SYS_FAN_TYPE_SHOUBAYI: 13,			//手把一
    SYS_FAN_TYPE_BAOTING: 14,			//报听
    SYS_FAN_TYPE_ZHANLITING: 15,		//站立听
    SYS_FAN_TYPE_HAIDILAOYUE: 16,		//海底捞月
};

var AddFanTypeArray = {
    17: "平胡",
    36: "七对",
    75: "大乱",
    20: "天听",
    24: "杠上开花",
    29: "杠后炮",
    34: "海底炮",
    23: "海底捞月",
    134: "楼上楼",
    90: "四配子",
    135: "跑配",
};

var HuType = {
    HU_INVALID: 0,
    HU_ZIMO: 1,
    HU_PAOHU: 2,
    HU_DIANPAO: 3,
    HU_BEIZIMO: 4,
    HU_QIANG_GANG: 5,
    HU_BEI_QIANG_GANG: 6,
    HU_YI_PAO_DUO_XIANG: 7,
    HU_GANG_SHANG_HUA: 8,
    HU_GANG_HOU_PAO: 9,
    HU_HeiMo: 10, //自摸且硬胡
    Hu_RuanMo: 11, //自摸且软胡
};

var selfCMD = {
    //下嘴
    SERVER_START_JIA: 5072, //开始下嘴
    SERVER_BROAD_JIA: 5073, //广播下嘴数
    CLIENT_MJ_CHOOSE_JIA: 1112, //客户端选择下嘴

    //天听
    SERVER_START_PIAO: 5024,
    SERVER_BROAD_PIAO: 5022,
    CLIENT_MJ_CHOOSE_PIAO: 1108,
};

var GameActionType =
{
    TYPE_BAOTING: 0x80000,//报听
};

var MJTable_XuZhou = MJTable.extend({
    tag: "MJTable_XuZhou",
    _curLaizi: -1,
    _curLaizipi: -1,
    _curLaizipi2: -1,
    _curLaizi_bg: null,
    isRecordShow: false,
    _pkg_id: 0,
    _piaoLayer: null,
    _lockCards: [], //吃完不能打的牌
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];
            if (this._pkg_id == 3535 || this._pkg_id == 3535) {
                MJModel.mj_roomType == 1;
            }
            if (this._pkg_id == 3536 || this._pkg_id == 3536) {
                MJModel.mj_roomType == 2;
            }

        } catch (e) {
            Log(this, e);
        }
        MJModel.mj_suport_fangyan = 1;
        MJModel.mj_sound_use = 0;
        MJModel.otherOutCardEffect = false;
        MJModel.outCardEffect_style = 1;

        MJModel.mj_suport_change_bg = 0;
        MJModel.toupiaoTipsType = 1;
        MJModel.chi_layout = 2;
        MJModel.needTipWhenPass = 0;
        MJModel.mj_touch_tip = 1;
        MJModel.isOutCard = true;
        MJModel.mj_chat_style = 5;
        MJModel.mj_gps_type = 1;
        MJModel.mj_public_style = 1;
        MJModel.choiceMoreGang_stlye = 1;
        MJModel.mj_card_lib_type = 1;
        MJModel.shareType = 1;

        //1.默认2d界面，简洁，绿色桌布 背景音乐默认舒缓
        MJModel.mj_bg_use = 1;
        MJModel.mj_table_view = "2d";
        MJModel.mj_font = "jianjie";
        MJModel.mj_style = "huaijiu";
        MJModel.fangyan = "fangyan1";

        MJModel.isTianTing = false;//正在天听
        MJModel.isCompleteChi = false; //吃完

        var size = cc.director.getWinSize();
        this._init_extend();
        this._super();
        try {
            var help = this.roomPublic.getChildByName("game_help");
            help.setVisible(false);
        } catch (e) {

        }
        this._piaoLayer = new XiaZuiLayer();
        this._piaoLayer.initPiao();
        this.addChild(this._piaoLayer, 10);
        this._piaoLayer.setVisible(false);

        this._init_ui();
        this._setNewJuShu();
        // this.schedule(this.test, 1.0);
    },

    _setNewJuShu: function () {
        var size = cc.director.getWinSize();

        var bgwidth = 120;
        var bgheight = 35;
        {
            var bg = new ccui.ImageView(getResPath("RoomMJ/bg.9.png"));
            bg.setScale9Enabled(true);
            bg.setContentSize(cc.size(bgwidth, bgheight));
            bg.setPosition(size.width / 2 + 150, size.height / 2 + 15);
            this.addChild(bg, 99);
            bg.setName("jushubg");
            bg.setVisible(MJModel.mj_bg_use == 1);

            var label = new cc.LabelTTF("局数:", "Arial", 24);
            label.setColor(cc.color(108, 168, 236));
            label.setPosition(cc.p(8, bg.getContentSize().height / 2));
            label.setAnchorPoint(0, 0.5);
            bg.addChild(label);

            this.jushu = new cc.LabelTTF("1/1", "Arial", 24);
            this.jushu.setColor(cc.color(230, 219, 116));
            this.jushu.setPosition(cc.p(bg.getContentSize().width / 2 + 30, bg.getContentSize().height / 2));
            bg.addChild(this.jushu);
        }

        {
            var bg = new ccui.ImageView(getResPath("RoomMJ/bg.9.png"));
            bg.setScale9Enabled(true);
            bg.setContentSize(cc.size(bgwidth, bgheight));
            bg.setPosition(size.width / 2 - 150, size.height / 2 + 15);
            this.addChild(bg, 99);
            bg.setName("shengyubg");
            bg.setVisible(MJModel.mj_bg_use == 1);

            var label = new cc.LabelTTF("剩:", "Arial", 24);
            label.setColor(cc.color(108, 168, 236));
            label.setPosition(cc.p(8, bg.getContentSize().height / 2));
            label.setAnchorPoint(0, 0.5);
            bg.addChild(label);

            var label = new cc.LabelTTF("张", "Arial", 24);
            label.setColor(cc.color(108, 168, 236));
            label.setPosition(cc.p(bg.getContentSize().width - 8, bg.getContentSize().height / 2));
            label.setAnchorPoint(1, 0.5);
            bg.addChild(label);

            this.shengyu = new cc.LabelTTF("30", "Arial", 24);
            this.shengyu.setColor(cc.color(230, 219, 116));
            this.shengyu.setPosition(cc.p(bg.getContentSize().width / 2 + 5, bg.getContentSize().height / 2));
            bg.addChild(this.shengyu);
        }

    },
    getMjTypePath: function () {
        return getResPath("xuzhoumj/name.png");
    },

    getBgStr: function () {
        if (MJModel.mj_style != "shishang" && MJModel.mj_style != "huaijiu" && MJModel.mj_style != "jingdian") {
            MJModel.mj_style = "shishang";
        }
        if (MJModel.mj_table_view != "25d" && MJModel.mj_table_view != "2d") {
            MJModel.mj_table_view = "25d";
        }
        if (MJModel.mj_style == "huaijiu") {
            return __String.createWithFormat("xuzhoumj/bgs/%1_%2.png", MJModel.mj_style, MJModel.mj_table_view);
        } else {
            return __String.createWithFormat("RoomMJ/bgs/%1_%2.png", MJModel.mj_style, MJModel.mj_table_view);
        }
    },

    updateBg: function (isInit) {
        if (isInit == undefined)isInit = false;
        var size = cc.director.getWinSize();
        if (this.bg == null) {
            this.bg = new ccui.ImageView(getResPath(this.getBgStr()));
            this.bg.setAnchorPoint(cc.p(0.5, 0.5));
            this.bg.setContentSize(size);
            this.bg.setScale9Enabled(true);
            this.bg.setPosition(size.width / 2, size.height / 2);
            this.addChild(this.bg, -100);
        } else {
            this.bg.loadTexture(getResPath(this.getBgStr()));
        }

        if (MJModel.mj_font == "jianjie" && MJModel.mj_fontSize == "dahao" && MJModel.mj_table_view == "2d") {
            Utils.addCardSprites(__String.createWithFormat("xuzhoumj/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));
        } else {
            Utils.addCardSprites(__String.createWithFormat("RoomMJ/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));
        }

        if (MJModel.mj_roomType == 2) {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config_2ren.json" : "RoomMJ/config/card_config2d_2ren.json");
        } else {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config.json" : "RoomMJ/config/card_config2d.json");
        }

        //
        if (this.getChildByName("jushubg")) {
            this.getChildByName("jushubg").setVisible(MJModel.mj_bg_use == 1);
        }
        if (this.getChildByName("shengyubg")) {
            this.getChildByName("shengyubg").setVisible(MJModel.mj_bg_use == 1);
        }

        if (this.room_Info) this.room_Info.showCardNums(this.room_Info.curCardNums);
        //

        if (isInit)return;

        this.room_Card.reflashAllCardUI();
        for (var i = 0; i < 4; i++) {
            this.players[i].setPosition(MJConfig.getPlayerPos(i));
            this.players[i].reflashNameMoneyPosition();
        }
        if (this.room_Info)this.room_Info.reflash();
    },
    _init_extend: function () {
        var self_table = this;

        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };

        var super_setOperator = MJAction.prototype.setOperator;
        MJAction.prototype.setOperator = function (operat) {
            this.removeChildByName("ChooseGang_selectLayer");
            if (operat != -1 && (operat & GameActionType.TYPE_BAOTING) == GameActionType.TYPE_BAOTING) {
                if (this.actions["ting"]) {
                    this.actions["ting"].setVisible(true);
                }
            }

            super_setOperator.call(this, operat);

            if (self_table.room_Card.isDuoPai(0) && ((operat & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (operat & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG)) {
                self_table.myselfOpenOutCard();
            }
        };

        var super_btnCallback = MJAction.prototype.btnCallback;
        MJAction.prototype.btnCallback = function (ref) {
            var n = ref;
            var name = n.getName();
            Log(this, "btnCallback:" + name);
            if (name == "ting") {
                sendTianTing(1);
                this.setOperator(-1);
                MJModel.isTianTing = false;
                return;
            }
            if (name == "pass" && MJModel.isTianTing) {
                sendTianTing(0);
                this.setOperator(-1);
                MJModel.isTianTing = false;
                return;
            }
            super_btnCallback.call(this, ref);
        };

        MJPlayer.prototype.setLiangPaiVisible = function (v) {
            if (!this.liangpai_flag) {
                this.liangpai_flag = new cc.Sprite(getResPath("xuzhoumj/flag/ting.png"));
                this.liangpai_flag.setVisible(false);
                if (this.pid == 1) {
                    this.liangpai_flag.setPosition(cc.p(0, 30));
                }
                else {
                    this.liangpai_flag.setPosition(cc.p(this.m_size.width, 30));
                }
                this.addChild(this.liangpai_flag, 1);
            }
            if (this.liangpai_flag) {
                this.liangpai_flag.setVisible(v);
            }
        };
        var superreset = MJPlayer.prototype.reset;
        MJPlayer.prototype.reset = function (allClean, isGameStart) {
            superreset.call(this);
            this.setLiangPaiVisible(false);
        };

        MJCards.prototype.sortCard = function (a, b) {
            return self_table._sortCard(a, b);
        };

        MJCard.prototype.check_addFlag = function () {
            self_table._checkAddCardFlag(this);
        };

        var super_setPengValue = MJPeng.prototype.setValue;
        MJPeng.prototype.setValue = function (type, pos, value, index, out_pos, isEnd, OpType, cardList, LaiziNum, cardList2) {
            super_setPengValue.call(this, type, pos, value, index, out_pos, isEnd, OpType, cardList2);
        };

        MJCards.prototype.setSomeCardClickState = function () {
            if (MJModel.mj_lockcard_type == 1) {
                var listen_cards = [];
                for (var i = 0; i < MJModel.listen_info.length; i++) {
                    var lsi = MJModel.listen_info[i];
                    listen_cards.push(lsi.OutCard);
                }

                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    if (listen_cards.indexOf(card.getValue()) == -1) {
                        card.setBlackVis(true);
                        card.setCardTouchEnable(false);
                    }
                }
            } else if (MJModel.mj_lockcard_type == 2) {
                if (this.isDuoPai(0) == false) return;
                for (var i = 0; i < this.hand_card[0].length - 1; i++) {
                    var card = this.hand_card[0][i];
                    card.setBlackVis(true);
                    card.setCardTouchEnable(false);
                }
            } else {
                if (MJModel.isCompleteChi && self_table._lockCards.length != 0) {
                    for (var i = 0; i < this.hand_card[0].length; i++) {
                        var card = this.hand_card[0][i];
                        if (self_table._lockCards.indexOf(card.getValue()) != -1) {
                            card.setBlackVis(true);
                            card.setCardTouchEnable(false);
                        }
                    }
                }
            }
        };

        var super_getScale_new = MJConfig.getScale_new;
        MJConfig.getScale_new = function (pos, type, index, isCard) {
            if (MJModel.mj_font == "jianjie" && MJModel.mj_fontSize == "dahao" && MJModel.mj_table_view == "2d") {
                if (type == CardType.Card_Hand) {
                    if (pos == 0) {
                        return 0.93;
                    }
                    if (pos == 2) {
                        return 1.2;
                    }
                } else if (type == CardType.Card_Out) {
                    if (pos == 0 || pos == 2) {
                        return 0.95;
                    }
                } else if (type == CardType.Card_End) {
                    if (pos == 0) {
                        return 0.95;
                    }
                    if (pos == 2) {
                        return 0.88;
                    }
                }
            }
            return super_getScale_new.call(this, pos, type, index, isCard);
        };

        var super_showJuShuTip = MJPublic.prototype.showJuShuTip;
        MJPublic.prototype.showJuShuTip = function () {
            super_showJuShuTip.call(this);
            if (self_table.jushu) {
                self_table.jushu.setString(MJModel.currentCount + "/" + MJModel.RoomCountSum);
            }
        };

        MJPublic.prototype.showCardNum = function (num) {
            if(num >= 0){
                this.cardNumView.setVisible(true);
                this.cardNumText.setString(num);
            }else {
                this.cardNumText.setString(0);
                this.cardNumView.setVisible(false);
            }

            if (self_table.shengyu) {
                self_table.shengyu.setString(num >= 0 ? num : 0);
            }
            if (MJModel.mj_bg_use == 1) {
                this.cardNumView.setVisible(false);
            }
        };

        MJCard.prototype.setTingPai = function (v) {
            if (this.tingpai_flag) this.tingpai_flag.setVisible(false);
        };

        MJAction.prototype.setTingPaiVis = function (v) {
            if (this.tingpai) {
                this.tingpai.setVisible(false);
                if (v == false) cc.director.getRunningScene().removeChildByName("tingpai_layer");
            }
        };

        TingPaiLayer.prototype.show2 = function (list) {
        };

        MJPeng.prototype.showUI = function (type, pos, values, index, out_pos, isEnd, OpType, value, value1) {
            if (isEnd == undefined)isEnd = false;
            if (OpType == undefined)OpType = ActionType.TYPE_PASS;
            if (value1 == null || value1 == undefined)value1 = 0;
            this.pengType = type;
            this.value = value;
            this._value1 = value1;
            this.out_pos = out_pos;
            this.isEnd = isEnd;
            this.OpType = OpType;
            this.pointSp = null;
            this.removeAllChildren();
            this.cardList = [];
            this.pos = pos;
            this.index = index;
            var temp_pos = pos;
            if (isEnd)pos = 0;
            for (var i = 0; i < 3; i++) {
                var card = new MJCard();
                card.setValue(values[i], pos, CardType.Card_Peng, i, value1);
                card.setMyPosition(MJConfig.getPengKangCardPos2(pos, index, i));
                this.addChild(card, MJConfig.getPengKangCardOrder2(pos, index, i));
                this.cardList[i] = card;
            }

            if (type == PengType.Peng_Kang || type == PengType.Peng_AnKang) {
                var card = new MJCard();
                card.setValue(values[3], pos, CardType.Card_Peng, 3, value1);
                card.setMyPosition(MJConfig.getPengKangCardPos2(pos, index, 3));
                this.addChild(card, MJConfig.getPengKangCardOrder2(pos, index, 3));
                this.cardList[3] = card;
            }

            //如果该牌可以加半透明层 且该游戏支持该设定 则添加
            if (MJModel.chi_layout == 2) {
                try {
                    var playerNums = 4;
                    if (MJModel.mj_roomType == 1) playerNums = 3;
                    if (MJModel.mj_roomType == 2) playerNums = 2;

                    var card = null;
                    var cardIndex = -1;
                    var seatid = MJModel.getSeatidByPos(temp_pos);
                    var pre_seatid = seatid - 1;
                    if (pre_seatid < 0)pre_seatid += playerNums;

                    var next_seatid = seatid + 1;
                    if (next_seatid >= playerNums)next_seatid = 0;

                    var out_seatid = MJModel.getSeatidByPos(out_pos);

                    if (this.pengType == PengType.Peng_Peng) {
                        // if (out_seatid == pre_seatid) {
                        //     cardIndex = 0;
                        // }
                        // else if (out_seatid == next_seatid) {
                        //     cardIndex = 2;
                        // }
                        // else {
                        //     cardIndex = 1;
                        // }
                        //
                        // if (MJModel.mj_roomType == 1 && pos == 1 && cardIndex == 2) {
                        //     cardIndex = 1;
                        // } else if (MJModel.mj_roomType == 1 && pos == 3 && cardIndex == 0) {
                        //     cardIndex = 1;
                        // } else if (MJModel.mj_roomType == 2) {
                        //     cardIndex = 1;
                        // }

                    } else if (this.pengType == PengType.Peng_Kang) {
                        // if (out_seatid == pre_seatid) {
                        //     cardIndex = 0;
                        // }
                        // else if (out_seatid == next_seatid) {
                        //     cardIndex = 2;
                        // }
                        // else {
                        //     cardIndex = 3;
                        // }
                        //
                        // if (MJModel.mj_roomType == 1 && pos == 1 && cardIndex == 2) {
                        //     cardIndex = 3;
                        // } else if (MJModel.mj_roomType == 1 && pos == 3 && cardIndex == 0) {
                        //     cardIndex = 3;
                        // } else if (MJModel.mj_roomType == 2) {
                        //     cardIndex = 3;
                        // }
                    }
                    else if (this.pengType == PengType.Chi_L || this.pengType == PengType.Chi_M || this.pengType == PengType.Chi_R) {
                        cardIndex = 1;
                    }
                    if (cardIndex != -1) {
                        card = this.cardList[cardIndex];
                    }

                    if (card) {
                        card.setStoreColor(this.getPointColor());
                    }
                } catch (e) {

                }
            }

            //碰扛牌要显示指向箭头
            if (isEnd) return;
            if (MJModel.chi_layout == 3) {
                try {
                    if (temp_pos == out_pos)return;

                    if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                        if (temp_pos == 0) return;
                        out_pos = 0;
                    }

                    if (this.pengType == PengType.Peng_Peng) {
                        cardIndex = 1;
                    } else {
                        cardIndex = 3;
                    }
                    if (cardIndex != -1) {
                        card = this.cardList[cardIndex];
                    }

                    if (card) {
                        var black_bg = new cc.Sprite(getResPath("RoomMJ/point/peng_gang_point" + out_pos + ".png"));
                        black_bg.setPosition(this.getPointPos(temp_pos));
                        black_bg.setAnchorPoint(cc.p(0.5, 0.5));
                        black_bg.setScale(0.6);
                        this.addChild(black_bg, 10);
                        this.pointSp = black_bg;
                    }

                    if((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG){
                        if(this.pointSp){
                            this.pointSp.setVisible(false);
                        }
                    }
                } catch (e) {

                }
            }
        };
    },

    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.getValue();
            if (typeof b === "object") bv = b.getValue();

            if (av == this._curLaizi && bv != this._curLaizi)return 1;//赖子放在最前边
            if (av != this._curLaizi && bv == this._curLaizi)return -1;//赖子放在最前边

            if (av == 67) {
                av = this._curLaizi;
            }
            if (bv == 67) {
                bv = this._curLaizi;
            }
            return bv - av;
        } catch (e) {
            return 0;
        }
    },

    _init_ui: function () {
        var self = this;
        {
            var btn = new ccui.Button();
            btn.loadTextures(getResPath("xuzhoumj/action/btn_baoting.png"), getResPath("xuzhoumj/action/btn_baoting.png"), "");
            this.room_Action.actions["ting"] = btn;
            btn.setName("ting");
            btn.addClickEventListener(function (sender, evt) {
                self.room_Action.btnCallback(sender);
            });
            btn.setVisible(false);
            this.room_Action.addChild(btn);
            this.room_Action.opBtns.push(btn);
        }
    },

    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.xuzhoumj.tagCurGameScence", jpacket);
            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.xuzhoumj.AckCurGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
            return;
        }

        //下嘴
        if (cmd == selfCMD.SERVER_START_JIA) {
            this._handler_server_start_xiazui(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_BROAD_JIA) {
            this._handler_server_broad_xiazui_result_bc(jpacket, canDelay);
            return;
        }
        //天听
        if (cmd == selfCMD.SERVER_START_PIAO) {
            this._handler_server_start_tianting(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_BROAD_PIAO) {
            this._handler_server_broad_tianting_result_bc(jpacket, canDelay);
            return;
        }
        //癞子
        if (cmd == CMD.SERVER_LAIZI_BC) {
            this._handler_server_laizi_bc(jpacket, canDelay);
            return;
        }
        this._super(cmd, jpacket, canDelay, svrid);
    },

    _handler_server_laizi_bc: function (data, canDelay) {
        var packet = parsePacket("proto.game.xuzhoumj.AckLaiziCard", data);
        var self = this;
        var curLaizi = packet.laizicard;
        var laizipicard = packet.laizipicard;
        this._setLaizi(curLaizi, laizipicard, -1, canDelay ? true : false);
        if (canDelay == false) {
            this._showHandcardFlag(false);
            this.room_Card.reflashHandCard(0, true);
            this.room_Card.reflashHandCard(1, true);
            this.room_Card.reflashHandCard(2, true);
            this.room_Card.reflashHandCard(3, true);
            return;
        }
        MJModel.isEnterWait = true;

        var move_end = cc.callFunc(function () {
            self._showHandcardFlag(false);

            var mo_card = null;
            if (self.room_Card.isDuoPai(0)) {
                mo_card = self.room_Card.hand_card[0][self.room_Card.hand_card[0].length - 1];
                self.room_Card.hand_card[0].splice(self.room_Card.hand_card[0].length - 1, 1);
            }

            var allPreCars = [];
            var allLaiZi = [];
            var dd = 0;

            for (var i = self.room_Card.hand_card[0].length - 1; i >= 0; i--) {
                var card = self.room_Card.hand_card[0][i];
                if (card.getValue() == curLaizi) {
                    allLaiZi.push(card);
                } else {
                    if (allLaiZi.length > 0) {
                        break;
                    }
                    allPreCars.push(card);
                }
            }

            if (allLaiZi.length > 0 && allPreCars.length > 0) {
                var allDelay = 0;
                for (var i = 0; i < allLaiZi.length; i++) {
                    var card = allLaiZi[i];
                    var begin_pos = card.getPosition();
                    var end_pos = MJConfig.getHandCardPos(0, self.room_Card.hand_card[0].length - 1 - i, self.room_Card.hand_card[0].length, self.room_Card.isDuoPai(0));
                    var allL = Math.abs(end_pos.x - begin_pos.x);

                    //if (MJModel.outCardEffect_style == 0 || true) {
                    var time = allL / 1000;
                    if (time < 0.17) time = 0.17;
                    if (time > 0.3) time = 0.3;
                    card.runAction(cc.sequence(cc.spawn(cc.rotateTo(0.1, 15), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + 100))), cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y + 100)).easing(cc.easeSineOut()), cc.spawn(cc.rotateTo(0.1, 0), cc.moveTo(0.17, end_pos))));
                    allDelay += 1;
                }
                for (var i = 0; i < allPreCars.length; i++) {
                    var card = allPreCars[i];
                    //card.runAction(cc.sequence(cc.moveBy(0.3, cc.p(83, 0)), cc.delayTime(1 - 0.3)).repeat(allLaiZi.length));
                    card.runAction(cc.moveBy(0.3, cc.p(83 * allLaiZi.length, 0)));
                }

                var callback = cc.callFunc(function () {
                    MJModel.isEnterWait = false;
                    self.room_Card.reflashHandCard(0, true);
                    if (mo_card) {
                        mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                        self.room_Card.hand_card[0].push(mo_card);
                    }
                });
                self.runAction(cc.sequence(cc.delayTime(0.5), callback));
            } else {
                MJModel.isEnterWait = false;
                self.room_Card.reflashHandCard(0, true);
                if (mo_card) {
                    mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                    self.room_Card.hand_card[0].push(mo_card);
                }
            }
        });
        this.runAction(cc.sequence(cc.delayTime(1), move_end));
    },

    _setLaizi: function (laizi, laizipi, laizipi2, gamestart) {
        if (laizi == null || laizi == undefined || laizi == -1 || laizi == 255) {
            if (this._curLaizi_bg) this._curLaizi_bg.setVisible(false);
            this._curLaizi = -1;
            this._curLaizipi = -1;
            this._curLaizipi2 = -1;
            return;
        }
        if (gamestart == undefined) gamestart = false;
        var size = cc.director.getWinSize();

        if (this._curLaizi_bg == null) {
            this._curLaizi_bg = new cc.Sprite(getResPath("xuzhoumj/flag/fanpai.png"));

            this._curLaizi_bg.setPosition(cc.p(size.width - 245, size.height - 70));
            this.addChild(this._curLaizi_bg, 200);
        }

        this._curLaizi_bg.removeAllChildren();
        this._curLaizi_bg.setVisible(true);
        this._curLaizi = laizi;
        this._curLaizipi = laizipi;
        if (this._curLaizipi > 0) {
            var card = new MJCard();
            card.setValue(this._curLaizipi, 0, CardType.Card_Hand, 0);
            card.setPosition(cc.p(-this._curLaizi_bg.getContentSize().width / 2 - 10, this._curLaizi_bg.getContentSize().height / 2));
            card.setScale(0.4);
            card.setStoreColor(cc.color(255, 249, 137));
            this._curLaizi_bg.addChild(card);

            if (gamestart) {
                var dl = 0;
                card.setVisible(false);
                var ppos = card.getPosition();
                var self = this;
                var callFunc = cc.CallFunc(function () {
                    self._showLaizi_effect("赖子");
                });
                card.setPosition(cc.p(size.width / 2 - this._curLaizi_bg.getPositionX() + this._curLaizi_bg.getContentSize().width / 2, size.height / 2 - this._curLaizi_bg.getPositionY() + this._curLaizi_bg.getContentSize().height / 2));
                card.runAction(cc.sequence(cc.delayTime(0 + dl), cc.show(), callFunc, cc.scaleTo(0.1, 1.5), cc.delayTime(0.5), cc.spawn(cc.moveTo(0.17, ppos), cc.scaleTo(0.17, 0.4))));
            }
        }
    },

    _showLaizi_effect: function (name) {
        ccs.armatureDataManager.addArmatureFileInfo(getResPath("xuzhoumj/effect/laizi/effects_mjhunancx.ExportJson"));
        var size = cc.director.getWinSize();
        if (true) {
            var armature = new ccs.Armature("effects_mjhunancx");
            var animation = armature.getAnimation();
            if (animation) {
                if (typeof animation.playWithIndex === "function") {
                    animation.playWithIndex(0, -1, 0);
                    armature.setPosition(cc.p(size.width / 2, size.height / 2));
                    this.addChild(armature, 100);
                    armature.runAction(cc.sequence(cc.delayTime(1.0), cc.removeSelf()));
                }
            }
        }
        Sound.getInstance().playEffect(__String.createWithFormat(getResPath("xuzhoumj/sound/laizi.mp3")));
        return armature;
    },

    _showHandcardFlag: function (isEndShow) {
        if (MJModel.isOnVideo) {
            for (var j = 0; j < 4; j++) {
                var allcards = this.room_Card.hand_card[j];
                if (allcards) {
                    for (var i = 0; i < allcards.length; i++) {
                        var card = allcards[i];
                        this._checkAddCardFlag(card);
                    }
                }
            }
            return;
        }
        var allcards = this.room_Card.hand_card[0];
        if (allcards) {
            for (var i = 0; i < allcards.length; i++) {
                var card = allcards[i];
                this._checkAddCardFlag(card);
            }
        }
    },
    _checkAddCardFlag: function (card) {
        try {
            if (card.type == CardType.Card_Outing)return;
            if (card.type == CardType.Card_Peng)return;
            if (card.getValue() == 0)return;
            var flag_str = "";
            // if (card.getValue() == this._curLaizi)flag_str = "xuzhoumj/flag/lai_flag2.png";
            // if (card.getValue() == this._curLaizipi)flag_str = "xuzhoumj/flag/laipi_flag2.png";
            // if (card.getValue() == this._curLaizipi2)flag_str = "xuzhoumj/flag/laipi_flag2.png";
            if (card.getValue() == this._curLaizi)card.setStoreColor(cc.color(153, 204, 255));
            if (flag_str != "") {
                if (card.getValue() == this._curLaizi)card.setStoreColor(cc.color(255, 249, 137));
                var p = card.getChildByName("sprite");
                p.removeChildByName("laizi_flag");
                var flag = null;

                flag = new cc.Sprite(getResPath(flag_str));

                var m_size = p.getContentSize();
                if (flag) {
                    flag.setPosition(cc.p(0, m_size.height));
                    flag.setAnchorPoint(cc.p(0, 1));
                    flag.setName("laizi_flag");
                    p.addChild(flag);
                    this._flagDirection(card.pos, flag, m_size);
                    flag.setScale(0.5);
                    if (card.pos == 0 && card.type != CardType.Card_Out)flag.setScale(1);
                }
                return;
            }
        } catch (e) {
            Log(this, e);
        }
    },
    //每个方向角标对应
    _flagDirection: function (pos, flag, m_size) {
        if (MJModel.mj_table_view == "2d") {
            if (MJModel.mj_paiban == "vertical" || pos == 2) {
                return;
            }
        }
        if (pos == 1) {
            flag.setPosition(cc.p(0, 15));
            flag.setRotation(-90);
        } else if (pos == 2) {
            flag.setPosition(cc.p(m_size.width, 5));
            flag.setRotation(180);
        } else if (pos == 3) {
            flag.setPosition(cc.p(m_size.width, m_size.height));
            flag.setRotation(90);
        }
    },

    //开始下嘴
    _handler_server_start_xiazui: function (data, canDelay) {
        MJModel.roomState = 1;
        this.resetGame(false);
        this.room_Info.setVisible(true);
        if (this.room_Action.actions["yaoqing"]) {
            this.room_Action.actions["yaoqing"].setVisible(false);
        }
        if (this.room_Action.actions["copyshare"]) {
            this.room_Action.actions["copyshare"].setVisible(false);
        }

        if (this.pre_scene) {
            this.pre_scene.removeFromParent(true);
            this.pre_scene = null;
        }

        JsUtils.postNotifi("notify_game_check_end");//为了刷新局数 或者  开始倒计时

        for (var i = 0; i < 4; i++) {
            this.players[i].removeChildByName("piao_tip");
        }

        var packet = parsePacket("proto.game.xuzhoumj.AckStartPaoTou", data);
        this._piaoLayer.setVisible(true);
    },

    //广播下嘴结果
    _handler_server_broad_xiazui_result_bc: function (data, canDelay) {
        var packet = parsePacket("proto.game.xuzhoumj.AckBroadPaoTou", data);
        var chairid = packet.chairid;
        var UserPaoTou = packet.UserPaoTou;
        var pos = MJModel.getPosBySeatid(chairid);
        if (pos == 0) {
            this._piaoLayer.setVisible(false);
        }
        this._setPiaoNum(UserPaoTou, pos, false);

        if (UserPaoTou == 1 || UserPaoTou == 2) {
            var player = MJModel.players[chairid];
            if (player && canDelay) {
                Sound.getInstance().playEffect(__String.createWithFormat(getResPath("xuzhoumj/sound/operator/%1_zui%2.mp3"), player.sex == SEX_ID.SEX_MAN ? "m" : "w", UserPaoTou));
            }
        }
    },

    _setPiaoNum: function (piao, pos, useEffect) {
        var player = this.players[pos];
        player.removeChildByName("piao_tip");
        if (piao != -1) {
            var p = MJConfig.getPlayerPos(pos);
            var tip = new cc.Sprite(getResPath("xuzhoumj/action/tip_" + piao + "zui.png"));
            tip.setName("piao_tip");
            tip.setPosition(pos == 2 ? player.m_size.width + tip.getContentSize().width / 2 - 5 : player.m_size.width / 2, pos == 2 ? 0 + 3 : player.m_size.height * 1.25);
            player.addChild(tip, -100);
        }
    },

    //正在天听
    _handler_server_start_tianting: function (data, canDelay) {
        var packet = parsePacket("proto.game.xuzhoumj.AckStartPiao", data);
        var piaonum = packet.piaonum;
        for (var i = 0; i < piaonum.length; i++) {
            var pos = MJModel.getPosBySeatid(i);
            if (pos == 0 && piaonum[i] == 1) {
                MJModel.isTianTing = true;
                if (this.room_Action) {
                    this.room_Action.setOperator(GameActionType.TYPE_BAOTING);
                }
                return;
            }
        }
    },

    //广播天听结果
    _handler_server_broad_tianting_result_bc: function (data, canDelay) {
        var packet = parsePacket("proto.game.xuzhoumj.AckBroadPiao", data);
        var UserPiao = packet.UserPiao;
        var chairid = packet.chairid;
        var pos = MJModel.getPosBySeatid(chairid);
        if (UserPiao) {
            this.players[pos].setLiangPaiVisible(true);
            if (pos == 0) {
                MJModel.mj_lockcard_type = 2;
                if (MJModel.banker_seatid == chairid) {
                    MJModel.mj_lockcard_type = 1;
                }
            }

            var player = MJModel.players[chairid];
            if (player && canDelay) {
                Sound.getInstance().playEffect(__String.createWithFormat(getResPath("xuzhoumj/sound/operator/%1_%2.mp3"), player.sex == SEX_ID.SEX_MAN ? "m" : "w", "tianting"));
            }
        }
    },

    handler_server_scene_info_uc: function (hubei_scene, canDelay) {
        var ackGameFree = hubei_scene.GameSence;
        var SceneStatus = ackGameFree.SceneStatus;
        var ChiNoOutCards = hubei_scene.ChiNoOutCards;
        var iscanting = hubei_scene.iscanting;
        var tiantingState = hubei_scene.State;//天听状态

        if (SceneStatus != 0) {
            this._setLaizi(hubei_scene.laizicard, hubei_scene.laizipicard, -1, false);
        }

        if (ChiNoOutCards && ChiNoOutCards.length != 0) {
            MJModel.isCompleteChi = true;
            this._lockCards = ChiNoOutCards;
        }

        for (var i = 0; i < tiantingState.length; i++) {
            var pos = MJModel.getPosBySeatid(i);
            if (tiantingState[i] == 1) {
                this.players[pos].setLiangPaiVisible(true);
                if (pos == 0) {
                    MJModel.mj_lockcard_type = 2;
                    if (SceneStatus == 4 && i == ackGameFree.BankerChairid) {
                        MJModel.mj_lockcard_type = 1;
                    }
                }
            }
        }

        this._super(ackGameFree, canDelay);
        this._setGameType();

        //天听

        if (SceneStatus == 4) {
            for (var i = 0; i < iscanting.length; i++) {
                var pos = MJModel.getPosBySeatid(i);
                if (pos == 0 && iscanting[i] && tiantingState[i] == -1) {
                    MJModel.isTianTing = true;
                    if (this.room_Action) {
                        this.room_Action.setOperator(GameActionType.TYPE_BAOTING);
                    }
                }
            }
        }

        //下嘴
        if (SceneStatus == 5) {
            this._piaoLayer.setVisible(true);
            for (var i = 0; i < hubei_scene.userzui.length; i++) {
                var pos = MJModel.getPosBySeatid(i);
                if (hubei_scene.userzui[i] != -1) {
                    this._setPiaoNum(hubei_scene.userzui[i], pos, false);
                    if (pos == 0) {
                        this._piaoLayer.setVisible(false);
                    }
                }
            }
            return;
        }

        for (var i = 0; i < hubei_scene.userzui.length; i++) {
            var pos = MJModel.getPosBySeatid(i);
            this._setPiaoNum(hubei_scene.userzui[i], pos, false);
        }
    },

    _setGameType: function () {
        var play_id = [];

        if (MJModel.RoomConfigID.indexOf(1014001) != -1) {
            play_id.push("下嘴");
        }
        if (MJModel.RoomConfigID.indexOf(1014002) != -1) {
            play_id.push("不下嘴");
        }

        if (MJModel.RoomConfigID.indexOf(1015001) != -1) {
            play_id.push("轮庄");
        }
        if (MJModel.RoomConfigID.indexOf(1015002) != -1) {
            play_id.push("多个配子可以顺赢");
        }

        MJModel.play_id_str = play_id;

        var gameDes = "";
        for (var i = 0; i < play_id.length; i++) {
            gameDes += play_id[i];
            if (i != play_id.length - 1) {
                gameDes += " ";
            }
        }
        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);
        this._setFastChat();
    },

    myselfOpenOutCard: function (IsMoCard, showTip) {
        this._super(IsMoCard, showTip);
        this.checkAutoOutCard();
    },
    checkAutoOutCard: function () {
        if (MJModel.isMyPlayer(MJModel.cur_seat) && this.room_Card.isDuoPai(0) && MJModel.mj_lockcard_type == 2) {
            this.autoOutCard();
        }
    },
    autoOutCard: function () {
        this.schedule(this.autoOutCardTimeOut, 0.5);
    },
    autoOutCardTimeOut: function (dt) {
        if (MJModel.TouPiaoING == true) return;//投票期间 该功能不起作用
        this.unschedule(this.autoOutCardTimeOut);
        var operate = MJModel.curOperate;
        if ((operate & ActionType.TYPE_LISTEN) == ActionType.TYPE_LISTEN) {
            operate = operate - ActionType.TYPE_LISTEN;
        }

        if (operate > 0) {
            return;
        }
        sendOutCard(MJModel.curOperateCard);
    },

    showShaiZiEffect: function (shaizi1, shaizi2) {
        // this.removeChildByName("shaizi_effect");
        // this.removeChildByName("shaizi_effect");
        // this.removeChildByName("shaizi_effect");

        var size = cc.director.getWinSize();

        var self = this;
        var showShaizi = cc.CallFunc(function () {
            //uiNode.removeFromParent(true);
            ccs.armatureDataManager.addArmatureFileInfo(getResPath("RoomMJ/effect/shaizi/effects_xssaizik.ExportJson"));
            var armature = new ccs.Armature("effects_xssaizik");
            armature.setScale(1.2);
            armature.setName("shaizi_effect");

            if (armature != null) {
                animation = armature.getAnimation();
                if (animation) {
                    if (typeof animation.playWithIndex === "function") {
                        animation.playWithIndex(0);
                    }
                }
                armature.setPosition(MJConfig.getInfoPos());
                self.addChild(armature, 10000);

                var removeEffect = cc.CallFunc(function () {
                    try {
                        while (self.getChildByName("shaizi_effect")) {
                            self.removeChildByName("shaizi_effect");
                        }
                    } catch (e) {

                    }
                });
                var callback = cc.CallFunc(function () {
                    var sp1 = new cc.Sprite(__String.createWithFormat(getResPath("RoomMJ/effect/shaizi/%1.png"), shaizi1));
                    var sp2 = new cc.Sprite(__String.createWithFormat(getResPath("RoomMJ/effect/shaizi/%1.png"), shaizi2));
                    var radius = 30;
                    var M_PI = 3.14159;
                    var rotation = Utils.Random(0, 360);
                    sp1.setPosition(size.width / 2 + radius * Math.cos((-90.0 + rotation) / 180.0 * M_PI), 404 + radius * Math.sin((-90.0 + rotation) / 180.0 * M_PI));
                    sp2.setPosition(size.width / 2 + radius * Math.cos((-90.0 + rotation + 180) / 180.0 * M_PI), 404 + radius * Math.sin((-90.0 + rotation + 180) / 180.0 * M_PI));
                    sp1.setName("shaizi_effect");
                    sp2.setName("shaizi_effect");
                    self.addChild(sp1, 10000);
                    self.addChild(sp2, 10000);
                    sp1.setScale(1.2);
                    sp2.setScale(1.2);
                });
                self.runAction(cc.sequence(cc.delayTime(0.5), removeEffect, callback, cc.delayTime(0.5), removeEffect));
                Sound.getInstance().playEffect(__String.createWithFormat(getResPath("RoomMJ/sound/touzi.mp3")));
            }
        });

        this.runAction(cc.sequence(cc.delayTime(0), showShaizi));
    },

    handler_server_mo_card_bc: function (data, canDelay) {
        this._super(data, canDelay);
        var userGetCard = parsePacket("proto.game.AckUserGetCard", data);
        var cards = userGetCard.cards;
        if (cards && cards.length >= 2) {
            this.showShaiZiEffect(cards[0], cards[1]);
        }

    },

    handler_server_out_card_bc: function (data, canDelay) {
        this._super(data, canDelay);
        MJModel.isCompleteChi = false;
        if (MJModel.mj_lockcard_type == 1) {
            MJModel.mj_lockcard_type = 2;
        }
    },

    handler_server_peng_kang_bc: function (data, canDelay) {
        var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);
        var seatid = ackBcOpResult.ChairID;
        var OpType = ackBcOpResult.OpType;
        var ChiNoOutCards = ackBcOpResult.ChiNoOutCards;
        var pos = MJModel.getPosBySeatid(seatid);

        if (pos == 0 && (OpType & ActionType.TYPE_PASS) != ActionType.TYPE_PASS && ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI || (OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI)) {
            MJModel.isCompleteChi = true;
            if (ChiNoOutCards) {
                this._lockCards = ChiNoOutCards;
            }
        }

        this._super(data, canDelay);
    },

    handler_server_game_end_bc: function (hubeiGameend, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            var ackGameEnd = hubeiGameend.gameend;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);
            this.room_Info.stopTime();
            this.room_Tip.hideOutCardTip();

            var ispaopei = false;
            var specialType = ackGameEnd.faninfo[MJModel.seatid].SpecialType;
            if (specialType == HuType.HU_ZIMO || specialType == HuType.HU_GANG_SHANG_HUA) {
                var addfan = ackGameEnd.faninfo[MJModel.seatid].addfan;
                for (var i = 0; i < addfan.length; i++) {
                    var add_fan = addfan[i];
                    var add_type = add_fan.AddType;
                    if (add_type == 135) {
                        ispaopei = true;
                    }
                }
            }

            var show_all_handcard = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var show_liuju = cc.callFunc(function () {
                if (ackGameEnd.EndState == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
            });

            var show_end_score = cc.callFunc(function () {
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var update_all_money = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var game_end_reset = cc.callFunc(function () {
                self.room_Action.setReady2Visible(false);
                try {
                    var result = new XuZhouMJResult();
                    result.updateContentView(hubeiGameend);
                    result.setName("reset_remove");
                    self.addChild(result, 100000);
                } catch (e) {
                    cc.log("game end:", e);
                    self.room_Action.setReady2Visible(true);
                }
            });

            var show_all_public_card = cc.callFunc(function () {
                self.gameend_showAllPublicCard(ackGameEnd);
            });

            var show_paopei_action = cc.callFunc(function () {
                if (ispaopei) {
                    var size = cc.director.getWinSize();
                    var handCardLayer = self.createpaopeicards(ackGameEnd);
                    handCardLayer.setPosition(cc.p(size.width, 0));
                    self.addChild(handCardLayer, 100000);

                    handCardLayer.runAction(cc.sequence(cc.moveTo(0.5, cc.p(-200, 0)), cc.moveTo(0.3, cc.p(0, 0)), cc.delayTime(2.2), cc.hide()));
                }
            });

            if (MJModel.isOnVideo && canDelay == false) {
                this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(2), update_all_money));
                return;
            }

            this.runAction(cc.sequence(show_all_public_card, show_all_handcard, show_paopei_action, cc.delayTime(2), show_liuju, cc.delayTime(ackGameEnd.EndState == 1 ? 1 : 0), show_end_score, cc.delayTime(0), update_all_money, cc.delayTime(1), game_end_reset));
        }
        catch (e) {
            ERROR(this, "handler_server_game_end_bc" + e);
        }
    },

    createpaopeicards : function (ackGameEnd) {
        var seatid = MJModel.seatid;
        var tagHu = 1;
        var size = cc.director.getWinSize();
        //占时注释掉，胡的那张牌

        if (ackGameEnd.faninfo.length > seatid) {
            if (ackGameEnd.faninfo[seatid].hucard && ackGameEnd.faninfo[seatid].hucard != 255) {
                tagHu = ackGameEnd.faninfo[seatid].hucard;
            }
        }

        var layer = new cc.Layer();
        var imageView = new ccui.ImageView(getResPath("xuzhoumj/flag/paopeibg.png"));
        imageView.setPosition(cc.p(size.width / 2 - 20, size.height / 2));
        imageView.setAnchorPoint(cc.p(0.5, 0.5));
        layer.addChild(imageView);

        var pos = MJModel.getPosBySeatid(seatid);
        if (ackGameEnd.UserCard.length > seatid) {
            var x = 70;
            var y = 120;
            var paiSpace = 8;
            var penggangSize = cc.size(205, 100);
            for (var i = 0; i < ackGameEnd.UserCard[seatid].FixedCardsLen; i++) {

                var state = ackGameEnd.UserCard[seatid].stFixedCards[i].state;
                var card = ackGameEnd.UserCard[seatid].stFixedCards[i].CardData;
                var chairID = ackGameEnd.UserCard[seatid].stFixedCards[i].chairID;
                var cardList = ackGameEnd.UserCard[seatid].stFixedCards[i].OpCards;
                var LaiziNum = ackGameEnd.UserCard[seatid].stFixedCards[i].LaiziNum;
                var specialCard = ackGameEnd.UserCard[seatid].stFixedCards[i].SpecialCard;
                var out_pos = MJModel.getPosBySeatid(chairID);

                if (card == undefined || card == null || card == 0) {
                    continue;
                }
                //下排杠牌
                var gangCard = new MJPeng();
                gangCard.setAnchorPoint(cc.p(0.0, 0.0));

                if ((state & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                    gangCard.setValue(PengType.Peng_Peng, pos, card, 0, out_pos, true, state, specialCard,LaiziNum,cardList);
                }
                else if ((state & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                    gangCard.setValue(PengType.Peng_AnKang, pos, card, 0, out_pos, true, state, specialCard,LaiziNum,cardList);
                }
                else if ((state & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                    gangCard.setValue(PengType.Chi_L, pos, card, 0, out_pos, true, state, specialCard,LaiziNum,cardList);
                }
                else if ((state & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                    gangCard.setValue(PengType.Chi_M, pos, card, 0, out_pos, true, state, specialCard,LaiziNum,cardList);
                }
                else if ((state & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                    gangCard.setValue(PengType.Chi_R, pos, card, 0, out_pos, true, state, specialCard,LaiziNum,cardList);
                }
                else {
                    gangCard.setValue(PengType.Peng_Kang, pos, card, 0, out_pos, true, state, specialCard,LaiziNum,cardList);
                }
                if (MJModel.mj_bg_use == 1) {
                    gangCard.setScale(0.8);
                }
                gangCard.setPosition(cc.p(x + penggangSize.width/2 , y));
                imageView.addChild(gangCard);

                x += penggangSize.width + 18;

            }

            var is_remove = 0;
            var need_remove = (parseInt(ackGameEnd.UserCard[seatid].ChangeableCardsLen % 3) == 2);
            ackGameEnd.UserCard[seatid].ChangeableCards.sort(MJModel.mj_table.room_Card.sortCard);

            var carddx = 2;
            if (MJModel.mj_bg_use == 1) carddx = 6;
            //牌面信息
            for (var i = ackGameEnd.UserCard[seatid].ChangeableCardsLen - 1; i >= 0; i--) {

                //去掉type＝＝1的判断 有些游戏自摸不一定叫自摸 只判断玩家的手牌数量 只要多牌 而且有胡牌数据 就跳过
                if (is_remove == 0 && need_remove && tagHu) {
                    if (ackGameEnd.UserCard[seatid].ChangeableCards[i] == tagHu) {
                        is_remove = 1;
                        continue;
                    }
                }
                var handCard = new MJCard();
                handCard.seatid = seatid;
                handCard.setValue(ackGameEnd.UserCard[seatid].ChangeableCards[i], 0, CardType.Card_End, 0);
                handCard.setScale(0.9);
                handCard.setAnchorPoint(cc.p(0, 0));
                handCard.setPosition(cc.p(x , y - 54));
                x += handCard.getBoundingBox().width - carddx;
                imageView.addChild(handCard);
            }

            //胡的牌
            if (tagHu) {
                //多加一个是否多牌的判断 防止前面又没有跳过 这里又多加的bug
                var huCard = new MJCard();
                huCard.setValue(tagHu, 0, CardType.Card_End, 0);
                huCard.setScale(0.9);
                huCard.setAnchorPoint(cc.p(0.0, 0.0));
                huCard.setPosition(cc.p(x + paiSpace, y - 54));
                imageView.addChild(huCard);
            }
        }

        return layer;
    },

    timeEnd: function (dt) {

        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    },

    resetGame: function (allClean) {
        this._super(allClean);
        this._setLaizi(-1, -1, -1);
        if (this._piaoLayer) {
            this._piaoLayer.setVisible(false);
        }
        if (allClean) {
            for (var i = 0; i < 4; i++) {
                this.players[i].removeChildByName("piao_tip");
            }
        }
        MJModel.isTianTing = false;
        MJModel.isCompleteChi = false;
        this._lockCards = [];
    },

    _handler_game_record: function (data, canDelay) {
        //-----新总结算界面
        cc.log("------big End");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var pkgId = this._pkg_id;
        var gameType = "徐州麻将";

        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];
        gameType += " · " + MJModel.base_money + "分底";

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        //var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;

        var max_score = 0;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            if (recoreInfo.totalscore > max_score) {
                max_score = recoreInfo.totalscore;
            }
        }

        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            //var playerRecord = totalRecord.player_records[i];
            var player = MJModel.players[i];
            var arrStr = [];
            //次数
            var arrcount = [];

            arrStr = ["坐庄次数", "胡牌次数", "点炮次数", "杠牌次数"];
            arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.Ex1, recoreInfo.GangTimes];

            if (player && player.uid != -1 && player.uid != 0) {
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var isWin = false;
                if (max_score > 0 && recoreInfo.totalscore == max_score) {
                    isWin = true;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, isWin, _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner, recoreInfo.dissState);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }
        }
        bigResult.refresh(PlayerNumber);
        this.release();
    },

    fastChat3: [
        "哎呦，你真不撑劲，你要是撑劲我搁这等你",
        "搏一搏，单车变摩托",
        "不打的你满脸桃花开，你就不知道花儿为什么这样红",
        "不是吧，这样都能赢",
        "哼，没了吧，用不用给你留点盘缠回家啊",
        "你搁那修炼的牌技，打的真好",
        "你紧趁能趁出花？",
        "你是猴子派来玩我的吗？",
        "你这呆子，快点快点啊",
        "哇，土豪，咱们做朋友吧",
        "以西，拍打的不孬啊",
    ],
    _setFastChat: function () {
        var chatList = [];
        chatList = this.fastChat3;
        MJModel.mj_fastChat = this.fastChat3;
        var self = this;
        Utils.getFastChatSound = function (chat, sex) {
            for (var i = 0; i < chatList.length; i++) {
                if (chatList[i] == chat) {
                    return getResPath(__String.createWithFormat("xuzhoumj/sound/fastchat/%1_chat_%2.mp3", sex == SEX_ID.SEX_MAN ? "m" : "w", i + 1));
                }
            }
            return "";
        };
    },

    handler_out_card_sound: function (sex, card) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("xuzhoumj/sound/chupai/%1_%2.mp3"), sex == SEX_ID.SEX_MAN ? "m" : "w", Utils.toHex2(card)));
        } else {
            this._super(sex, card);
        }
    },

    handler_op_sound: function (pos, sex, OpType, OpType2, effect) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("xuzhoumj/sound/operator/%1_%2.mp3"), sex == SEX_ID.SEX_MAN ? "m" : "w", effect));
        } else {
            this._super(pos, sex, OpType, OpType2, effect);
        }
    },

    test: function (dt) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;
        if (tempCount == 5 && true) {
            // var cards = [18, 18, 22, 24, 25, 33, 33, 33, 36, 37, 38, 67, 67];
            // for (var i in cards) {
            //     this.room_Card.addOutCard(0, cards[i], false);
            //     this.room_Card.addOutCard(1, cards[i], false);
            //     this.room_Card.addOutCard(2, cards[i], false);
            //     this.room_Card.addOutCard(3, cards[i], false);
            // }


            // return;
            var packet = {
                "gameend": {
                    "UserCard": [{
                        "ChangeableCardsLen": 7,
                        "ChangeableCards": [4, 6, 22, 22, 35, 36, 37],
                        "FixedCardsLen": 2,
                        "stFixedCards": [{
                            "CardData": 65,
                            "state": 1,
                            "chairID": 1,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 1, "state": 2, "chairID": 1, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 4,
                        "ChangeableCards": [2, 4, 7, 52],
                        "FixedCardsLen": 3,
                        "stFixedCards": [{
                            "CardData": 18,
                            "state": 1,
                            "chairID": 0,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 34, "state": 8, "chairID": 1, "OpCards": [], "LaiziNum": null}, {
                            "CardData": 23,
                            "state": 256,
                            "chairID": 0,
                            "OpCards": [21, 22, 23],
                            "LaiziNum": null
                        }],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 10,
                        "ChangeableCards": [5, 9, 22, 23, 35, 36, 37, 38, 38, 39],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{
                            "CardData": 20,
                            "state": 128,
                            "chairID": 1,
                            "OpCards": [19, 20, 21],
                            "LaiziNum": null
                        }],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 7,
                        "ChangeableCards": [2, 4, 5, 6, 7, 37, 39],
                        "FixedCardsLen": 2,
                        "stFixedCards": [{
                            "CardData": 6,
                            "state": 64,
                            "chairID": 2,
                            "OpCards": [6, 7, 8],
                            "LaiziNum": null
                        }, {"CardData": 41, "state": 1, "chairID": 1, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }],
                    "Score": [0, 0, 0, 0],
                    "EndState": 0,
                    "EndGangInfo": [{"Gang": [], "TotalGangScore": 0}, {"Gang": [], "TotalGangScore": 0}, {
                        "Gang": [],
                        "TotalGangScore": 0
                    }, {"Gang": [], "TotalGangScore": 0}],
                    "faninfo": [{
                        "chairid": 0,
                        "SpecialType": 1,
                        "FanNum": 0,
                        "addfan": [{"AddType": 135, "AddNum": 0}],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 1,
                        "SpecialType": 1,
                        "FanNum": 0,
                        "addfan": [{"AddType": 135, "AddNum": 0}],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 2,
                        "SpecialType": 1,
                        "FanNum": 0,
                        "addfan": [{"AddType": 135, "AddNum": 0}],
                        "hucard": 0,
                        "DianPao": []
                    }, {"chairid": 3, "SpecialType": 1, "FanNum": 0, "addfan": [{"AddType": 135, "AddNum": 0}], "hucard": 0, "DianPao": []}],
                    "money": [1000, 1000, 1000, 1000],
                    "ts": null,
                    "md5": []
                }, "State": [], "zui": [], "ShowCardPool": {"seat_id": [0, 1, 2, 3], "lastcard": [2, 3, 4, 6]}
            };
            this.handler_server_game_end_bc(packet);
        }
    },
});

var XuZhouMJResult = MJCommonResult.extend({
    clickCallBack: function (ref) {
        var name = ref.getName();
        if (name == "nextBtn") {
            if (this.shownextcard) return;
            var seat_id = this.ackGameEndJS.ShowCardPool.seat_id;
            var lastcard = this.ackGameEndJS.ShowCardPool.lastcard;
            for (var i = 0; i < seat_id.length; i++) {
                if (seat_id[i] == MJModel.seatid) {
                    var cardvalue = lastcard[i];
                    var card = new MJCard();
                    card.setValue(cardvalue, 0, CardType.Card_Hand, 0);
                    card.setPosition(cc.p(ref.getPositionX() + ref.getContentSize().width / 2 + 50, ref.getPositionY() + 10));
                    card.setScale(0.6);
                    // card.setStoreColor(cc.color(255, 249, 137));
                    this.addChild(card);
                    this.shownextcard = true;
                    return;
                }
            }
        }
    },
    shownextcard: false,
    updateContentView: function (ackGameEndJS) {
        this.ackGameEnd = ackGameEndJS.gameend;
        this.ackGameEndJS = ackGameEndJS;
        //输赢标志
        var seatId = MJModel.seatid;
        var score = this.ackGameEnd.Score[seatId];
        var effectName = "lose";
        if (score > 0) {
            effectName = "win";
        }
        this._win_effect(effectName);

        if (this.ackGameEnd.EndState != 1 && this.ackGameEnd.faninfo[MJModel.seatid].SpecialType != HuType.HU_ZIMO) {
            var self = this;
            var nextBtn = new ccui.Button(getResPath("xuzhoumj/action/btn_nextcard1.png"), getResPath("xuzhoumj/action/btn_nextcard2.png"), "");
            nextBtn.setPosition(cc.p(200, 45));
            nextBtn.setName("nextBtn");
            nextBtn.addClickEventListener(function (sender, evt) {
                self.clickCallBack(sender);
            });
            this.addChild(nextBtn);
        }

        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);

        var itemHeight = 120;

        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;

            var countY = m;

            if (MJModel.mj_roomType == 1) {
                if (pos == 2) {
                    continue;
                }
            }

            if (MJModel.mj_roomType == 2) {
                if (pos == 1 || pos == 3) {
                    continue;
                }

                if (pos == 0) {
                    countY = 1;
                } else if (pos == 2) {
                    countY = 2;
                }
            }

            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 495 - count * itemHeight;
            var startX = 40;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX + 60, startY + 55));
            this.bgSpr.addChild(headLayer, 10);

            //上排牌 杠
            var ganghuLayer = this.createGangHuLayer(seatid);
            this.bgSpr.addChild(ganghuLayer, 10);
            ganghuLayer.setPosition(cc.p(startX + 230, startY + 65));

            //下排牌
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX + 0, startY));
            this.bgSpr.addChild(handCardLayer);

            // this.createSpecialHuTip(startX + 785, startY + 40, seatid);
            this.createSpecialHuTip(startX + 900, startY + 40, seatid);

            // 输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX + 1100, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            //中马列表
            var maLayer = this.createMaLayer(seatid);
            if (maLayer) {
                maLayer.setPosition(cc.p(startX + 845, startY + 85));
                this.bgSpr.addChild(maLayer);
            }
            count++;
        }
    },
    createGangHuLayer: function (seatid) {
        var layer = new cc.Layer();
        var x = 0;
        var y = 0;

        // for (var i = 0; i < this.ackGameEnd.EndGangInfo[seatid].Gang.length; i++) {
        //     var gangType = this.ackGameEnd.EndGangInfo[seatid].Gang[i].GangType;
        //     if (gangType == 16) {
        //         var cardvalue = this.ackGameEnd.EndGangInfo[seatid].Gang[i].GangCard;
        //         var fanType = new cc.LabelTTF("点杠", "Arial", 20);
        //         fanType.setColor(this.leftColor);
        //         fanType.setAnchorPoint(cc.p(0, 0));
        //         fanType.setPosition(cc.p(x, y + 10));
        //         layer.addChild(fanType);
        //         x += fanType.getContentSize().width;
        //
        //         var card = new MJCard();
        //         card.setValue(cardvalue, 0, CardType.Card_Hand, 0);
        //         card.setScale(0.25);
        //         card.setAnchorPoint(cc.p(0, 0));
        //         card.setPosition(cc.p(x, y + 7));
        //         x += card.getBoundingBox().width + 10;
        //         layer.addChild(card);
        //     }
        // }


        var addFanType = [];
        if (this.ackGameEndJS.zui) {
            addFanType.push(this.getXiaZuiStr(this.ackGameEndJS.zui[seatid]));
        }

        var specialType = this.ackGameEnd.faninfo[seatid].SpecialType;
        switch (specialType) {
            case HuType.HU_ZIMO:
            case HuType.HU_PAOHU:
            case HuType.HU_QIANG_GANG:
            case HuType.HU_GANG_SHANG_HUA:
            case HuType.HU_GANG_HOU_PAO:
                var addfan = this.ackGameEnd.faninfo[seatid].addfan;
                for (var i = 0; i < addfan.length; i++) {
                    var add_fan = addfan[i];
                    var add_type = add_fan.AddType;
                    var add_value = add_fan.AddNum;
                    if (AddFanTypeArray[add_type]) {
                        addFanType.push(AddFanTypeArray[add_type]);
                    }
                }
                break;
            case HuType.HU_BEI_QIANG_GANG:
                addFanType.push("被抢杠");
                break;
        }

        for (var i = 0; i < addFanType.length; i++) {
            var fanType = new cc.LabelTTF(addFanType[i], "Arial", 20);
            fanType.setColor(this.leftColor);
            fanType.setAnchorPoint(cc.p(0, 0));
            fanType.setPosition(cc.p(x, y + 10));
            layer.addChild(fanType);
            x += fanType.getContentSize().width + 10;
        }

        return layer;
    },

    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var path = "";
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5天和 6地和 7抢杠胡 8杠上开花 9花上添花
            switch (fanInfo.SpecialType) {
                case 1:
                    path = "RoomMJ/result2/zi_mo_icon.png";
                    break;
                case 2:
                    path = "RoomMJ/result2/pao_hu_icon.png";
                    break;
                case 3:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                case 5:
                    path = "RoomMJ/result2/qiang_gang_icon.png";
                    break;
                case 7:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                case 9:
                    path = "RoomMJ/result2/pao_hu_icon.png";
                    break;
                default:
                    break;
            }
            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setPosition(cc.p(startX, startY));
                this.bgSpr.addChild(typeSprite);

            }
        }
    },
    //输赢分
    createScoreLayer: function (seatid) {
        var layer = new cc.Layer();

        var width = 65;
        var nameLabel = new cc.LabelTTF("总分", "Arial", 32);
        nameLabel.setColor(this.leftColor);
        nameLabel.setAnchorPoint(cc.p(0.5, 0.5));
        nameLabel.setPosition(cc.p(width, 40));
        layer.addChild(nameLabel);

        var score = 0;
        if (this.ackGameEnd.Score && this.ackGameEnd.Score.length > seatid) score = this.ackGameEnd.Score[seatid];

        var path = getResPath("RoomMJ/result2/result_small_label_lose.png");
        if (score > 0) {
            path = getResPath("RoomMJ/result2/result_small_label_win.png");
        }
        var scoredes = ":";
        if (score == 0) scoredes = "";
        var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), path, 29, 37, '0');

        scoreLabel.setAnchorPoint(cc.p(0.5, 0.5));

        scoreLabel.setPosition(cc.p(width, -10));
        scoreLabel.setName("scoreLabel");
        layer.addChild(scoreLabel);

        if (Math.abs(score) >= 10000) {
            scoreLabel.setScale(0.8);
        }
        return layer;
    },
    getXiaZuiStr: function (v) {
        var str = "";
        if (v == 0) {
            str = "不下";
        }
        if (v == 1) {
            str = "1嘴";
        }
        if (v == 2) {
            str = "2嘴";
        }
        return str;
    },
});

var sendXiaZuiNums = function (v) {
    var packet = createPacket("proto.game.xuzhoumj.ReqChoosePaoTou");
    packet.paotounum = v;
    sendPacket(packet, selfCMD.CLIENT_MJ_CHOOSE_JIA);
};

var sendTianTing = function (v) {
    var packet = createPacket("proto.game.xuzhoumj.ReqChoosePiao");
    packet.piaonum = v;
    sendPacket(packet, selfCMD.CLIENT_MJ_CHOOSE_PIAO);
};

var XiaZuiLayer = cc.Layer.extend({
    ctor: function () {
        this._super();
    },
    initPiao: function () {
        var self = this;
        var size = cc.director.getWinSize();
        var by = 150;
        var strs = ["xuzhoumj/action/btn_buxia", "xuzhoumj/action/btn_1zui", "xuzhoumj/action/btn_2zui"];
        var dx = 200;
        var bx = size.width / 2 - dx * (strs.length - 1) * 0.5;
        for (var i = 0; i < strs.length; i++) {
            var submitBtn = new ccui.Button(getResPath(strs[i] + ".png"), getResPath(strs[i] + ".png"));
            submitBtn.setTag(i);
            submitBtn.setPosition(bx + i * dx, by);
            submitBtn.addClickEventListener(function (sender, evt) {
                sendXiaZuiNums(sender.getTag());
                // self.removeFromParent(true);
            });
            this.addChild(submitBtn);
        }
    },
});


