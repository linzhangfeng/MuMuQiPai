loadProtoFile("proto/xishuimjgameproto.proto");

var LaiZiGangType = {
    TYPE_LAIZI_GANG: 0x10000,
    TYPE_LAIZIPI_GANG: 0x80000
};
var Action_LiangBao = 0x4000;//亮宝

var selCMD = {
    SERVER_LAIZI_BC:5029, //赖子
    SERVER_BROAD_BEISHU: 5071, //杠的番数
};

var MJTable_XiShui = MJTable.extend({
    isRecordShow: false,
    _isgang: false,
    gameDes: "",
    _pkgid: 0,
    _piaoNums:0,
    _playname:1, //1代表红中赖子杠，2代表晃晃
    _ishongzhonggang:false,//晃晃是否勾选红中杠
    _curLaizi: -1,
    _curLaizipi: -1,
    _curLaizipi2: -1,
    _curLaizi_bg: null,
    _allGangCard: [[], [], [], []],
    _allBeiShu: [null, null, null, null],
    _allBeiShu_Nums: [1, 1, 1, 1],
    _bao_nums: [0, 0, 0, 0],
    _pi_nums: [0, 0, 0, 0],
    ctor: function () {
        this._super();
    },

    initRoom: function () {
        this._init_extend();

        MJModel.mj_bg_use = 1;
        MJModel.mj_suport_change_bg = 0;
        MJModel.toupiaoTipsType = 1;
        MJModel.chi_layout = 3;
        MJModel.needTipWhenPass = 1;
        MJModel.mj_touch_tip = 1;
        MJModel.isOutCard = true;
        //MJModel.mj_public_style = 1;
        MJModel.mj_card_lib_type = 1;
        MJModel.mj_chat_style = 1;
        MJModel.mj_public_style = 1;
        MJModel.mj_chat_style = 5;
        MJModel.mj_touch_tip = 1;
        MJModel.mj_suport_fangyan = 0;
        MJModel.otherOutCardEffect = false;
        MJModel.outCardEffect_style = 1;
        MJModel.mj_double_click_style = 1;
        MJModel.shareType = 1;
        MJModel.mj_font = "jianjie";
        MJModel.mj_style = "shishang";
        MJModel.mj_table_view ="2d";
        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];
            if (this._pkg_id == 3006 || this._pkg_id == 2918){
                MJModel.mj_roomType = 1;
            }
            if (this._pkg_id == 3007 || this._pkg_id == 2919) {
                MJModel.mj_roomType = 2;
            }
            if (this._pkg_id == 3009 || this._pkg_id == 2921 ){
                MJModel.mj_roomType = 1;
            }
            if (this._pkg_id == 3010 || this._pkg_id == 2922) {
                MJModel.mj_roomType = 2;
            }
            if(this._pkg_id == 3005 || this._pkg_id == 3006 ||this._pkg_id == 3007 || this._pkg_id == 2917 || this._pkg_id == 2918 || this._pkg_id == 2919){
                this._playname = 1;
            }
            if(this._pkg_id == 3008 || this._pkg_id == 3009 ||this._pkg_id == 3010 || this._pkg_id == 2920 || this._pkg_id == 2921 || this._pkg_id == 2922){
                this._playname = 2;
            }

        } catch (e) {
            Log(this, e);
        }
        try {
            if (!MJModel.isOnVideo) {
                var game_help = this.roomPublic.getChildByName("game_help");
                if (game_help !== null) {
                    game_help.setVisible(false);
                }
            }
        } catch (e) {

        }
        this._super();
        this._init_ui();
        MJModel.mj_paiban = "horizontal";
        this._update_action();

    },

    _init_ui: function () {
        var self = this;
        {
            var btn = new ccui.Button();
            btn.loadTextures(getResPath("xishuimj/action/liang1.png"),getResPath("xishuimj/action/liang1.png"), "");
            this.room_Action.actions["liang"] = btn;
            btn.setName("liang");
            btn.addClickEventListener(function (sender, evt) {
                self.room_Action.btnCallback(sender);
            });
            //btn.setPosition()
            btn.setVisible(false);
            this.room_Action.addChild(btn);
            this.room_Action.opBtns.push(btn);
        }
    },
    _update_action: function () {
        this.room_Action.actions["pass"].loadTextures(getResPath("xishuimj/action/pass1.png"), "", "");

        this.room_Action.actions["chi"].loadTextures(getResPath("xishuimj/action/chi1.png"), "", "");

        this.room_Action.actions["peng"].loadTextures(getResPath("xishuimj/action/peng1.png"), "", "");

        this.room_Action.actions["gang"].loadTextures(getResPath("xishuimj/action/gang1.png"), "", "");

        this.room_Action.actions["hu"].loadTextures(getResPath("xishuimj/action/hu1.png"), "", "");

        this.room_Action.actions["liang"].loadTextures(getResPath("xishuimj/action/liang1.png"), "", "");

        this.room_Action.opBtns = [];
        this.room_Action.opBtns.push(this.room_Action.actions["pass"]);
        this.room_Action.opBtns.push(this.room_Action.actions["chi"]);
        this.room_Action.opBtns.push(this.room_Action.actions["peng"]);
        this.room_Action.opBtns.push(this.room_Action.actions["gang"]);
        this.room_Action.opBtns.push(this.room_Action.actions["hu"]);
        this.room_Action.opBtns.push(this.room_Action.actions["liang"]);
    },

    //设置背景
    getBgStr: function () {
        if ( MJModel.mj_style != "shishang" && MJModel.mj_style != "huaijiu" && MJModel.mj_style != "jingdian"){
            MJModel.mj_style = "shishang";
        }
        return __String.createWithFormat("xishuimj/bgs/%1_%2.png", MJModel.mj_style, MJModel.mj_table_view);
    },

    updateBg: function (isInit) {
        if (isInit == undefined)isInit = false;
        var size = cc.director.getWinSize();
        if (this.bg == null) {
            this.bg = new ccui.ImageView(getResPath(this.getBgStr()));
            this.bg.setAnchorPoint(cc.p(0.5, 0.5));
            this.bg.setContentSize(size);
            this.bg.setScale9Enabled(true);
            this.bg.setPosition(size.width / 2, size.height / 2);
            this.addChild(this.bg, -100);
        } else {
            this.bg.loadTexture(getResPath(this.getBgStr()));
        }
        //Utils.addCardSprites(__String.createWithFormat("RoomMJ/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));
        Utils.addCardSprites("xishuimj/cards/jianjie_dahao_2d_debug");

        //if (MJModel.mj_roomType == 2) {
        //    this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config_2ren.json" : "RoomMJ/config/card_config2d_2ren.json");
        //} else {
        //    this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config.json" : "RoomMJ/config/card_config2d.json");
        //}
        this.loadCardConfig("xishuimj/config/card_config2d.json");
        if (isInit)return;

        this.room_Card.reflashAllCardUI();
        for (var i = 0; i < 4; i++) {
            this.players[i].setPosition(MJConfig.getPlayerPos(i));
            this.players[i].reflashNameMoneyPosition();
        }
        if (this.room_Info)this.room_Info.reflash();
    },

    getMjTypePath: function () {
        var pkg_id = this._playname;
        return __String.createWithFormat(getResPath("xishuimj/flag/pkgname%1.png"), pkg_id);
    },
    test: function (dt) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;
        if (tempCount == 5 && true) {
        }
    },
    updateBaoPiUI: function () {
        for (var i = 0; i < 4; i++) {
            this.setPlayerBaoPi(i, this._bao_nums[i]);
        }
    },

    hideBaoPiUI: function () {
        for (var i = 0; i < 4; i++) {
            if (this._allbao[i])this._allbao[i].setVisible(false);
        }
    },
    _allbao: [null, null, null, null],
    setPlayerBaoPi: function (pos, bao) {
        Log(this, "setPlayerBaoPi");
        if(bao == 0){
            return;
        }
        var sp = this._allbao[pos];
        if (sp == null) {
            sp = new cc.Sprite(getResPath("xishuimj/flag/tip_bg.png"));
            //var m_pMoney = new cc.LabelAtlas(bao, getResPath("RoomMJ/player/money.png"), 12, 22, '0');//new cc.LabelTTF("0", "Thonburi", 20);
            var text = bao.toString();
            var m_pMoney = new cc.LabelTTF(text+" 杠", "Thonburi", 20);
            m_pMoney.setName("text");
            m_pMoney.setAnchorPoint(cc.p(0, 0.5));
            m_pMoney.setPosition(sp.getContentSize().width/4, sp.getContentSize().height / 2);
            sp.addChild(m_pMoney);
            this._allbao[pos] = sp;

            var player = this.players[pos];
            var p = MJConfig.getPlayerPos(pos);
            if(pos==2){
                sp.setPosition(player.m_size.width +25, player.m_size.height-15);
            }else{
                sp.setPosition(player.m_size.width / 2, player.m_size.height+15);
            }

            player.addChild(sp, 12);
        } else {
            var text = bao.toString();
            this._allbao[pos].getChildByName("text").setString(text+"杠");
            this._allbao[pos].setVisible(true);


        }
    },
    handler_game_time_over_bc: function (data, canDelay) {
        if (!this.gameending)MJModel.state = MJ_STATUS.MJ_GAME_FREE;
        this.startTimeEnd();
        // PlatformHelper.showToast("服务器通知房间结束！");
    },
    gameending:false,
    handler_server_game_end_bc: function (shanxiGameEnd, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            this.gameending = true;
            var ackGameEnd = shanxiGameEnd.gameend;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);
            this.room_Info.stopTime();

            var callback0 = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var callback2 = cc.callFunc(function () {
                if (state == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
                else {
                }
            });

            var callback4 = cc.callFunc(function () {
                self.room_Tip.reset();
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var callback5 = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var callback3 = cc.callFunc(function () {
                self.room_Action.setReady2Visible(false);

                try {
                    var result = new MJResult_XiShui();
                    result.updateContentView(shanxiGameEnd);
                    result.setName("reset_remove");
                    self.addChild(result, 100000);
                } catch (e) {
                    cc.log("game end:", e);
                    self.gameending = false;
                    self.room_Action.setReady2Visible(true);
                }
            });

            if (MJModel.isOnVideo) {
                if (canDelay) {
                    this.runAction(cc.sequence(callback0,callback4, cc.delayTime(1), callback5, cc.delayTime(2), callback3));
                } else {
                    this.runAction(cc.sequence(callback0,callback5, cc.delayTime(2), callback3));
                }
                return;
            }

            this.runAction(cc.sequence(cc.delayTime(0), callback0, cc.delayTime(0.3), callback4, cc.delayTime(0), callback5, cc.delayTime(0.6), callback2, cc.delayTime(0.8), callback3));
        } catch (e) {
            ERROR(this, e);
        }
    },

    _init_extend: function () {
        var self = this;
        var superreset_ctor = MJPreTable.prototype.ctor;
        MJPreTable.prototype.ctor = function (allClean, isGameStart) {
            superreset_ctor.call(this, allClean, isGameStart);
            this.bg.loadTexture(getResPath("xishuimj/bgs/shishang_2d.png"));
        };

        var super_continueClick = MJResult.prototype.continueClick;
        MJResult.prototype.continueClick = function (ref) {
            super_continueClick.call(this,ref);
            self.gameending = false;
        };

        var super_setId = MJPlayer.prototype.setId;
        MJPlayer.prototype.setId = function (id) {
            super_setId.call(this, id);
            this.liangpai_flag = new cc.Sprite(getResPath("xishuimj/flag/bao_tip.png"));
            this.liangpai_flag.setVisible(false);
            if (id == 1) {
                this.liangpai_flag.setPosition(cc.p(-this.banker_flag.getBoundingBox().width / 2 + 10, this.liangpai_flag.getBoundingBox().height / 2 - 5 + 50));
            }
            else {
                this.liangpai_flag.setPosition(cc.p(this.m_size.width + this.liangpai_flag.getBoundingBox().width / 2 - 40, this.liangpai_flag.getBoundingBox().height / 2 + 60));
            }
            this.addChild(this.liangpai_flag, 100000);
        };

        MJPlayer.prototype.setLiangPaiVisible = function (v) {
            if (this.liangpai_flag) {
                this.liangpai_flag.setVisible(v);
            }
        };

        var super_mjplayerreset = MJPlayer.prototype.reset;
        MJPlayer.prototype.reset = function (allClean, isGameStart) {
            super_mjplayerreset.call(this);
            this.setLiangPaiVisible(false);
        };

        MJCard.prototype.check_addFlag = function () {
            self._checkAddCardFlag(this);
        };
        //去掉出牌按钮
        MJCards.prototype.createOutCardBtn = function () {

        };
        //去掉出牌放大
        MJCards.prototype.outHandCardEffct2 = function (pos, value) {
            this.addOutCard(pos, value);
            this.reflashHandCard(pos, true, true);
        };

        var super_addOutCard = MJCards.prototype.addOutCard;
        MJCards.prototype.addOutCard = function (pos, value, showPoint) {

            if (value == self._curLaizi || value == self._curLaizipi ||value == self._curLaizipi2) {
                //if (value == self._curLaizi){
                //    self._bao_nums[pos]++;
                //    self._bao_nums[pos]++;
                //}
                //if (value == self._curLaizipi ||value == self._curLaizipi2){
                //    self._bao_nums[pos]++;
                //}
                //self.updateBaoPiUI();
                return this.addHuCard(pos, value);
            }
            else {
                return super_addOutCard.call(this, pos, value, showPoint);
            }


        };

        var super_clickHandCardCallback = MJCards.prototype.clickHandCardCallback;
        MJCards.prototype.clickHandCardCallback = function (n) {
            var card = n;
            if (MJModel.canChoiceMore) {
                if (MJModel.canChoiceMoreType == 1) {
                    //选择多个杠的时刻
                    var size = MJModel.gang_info.length;
                    for (var j = 0; j < size; j++) {
                        var gif = MJModel.gang_info[j];
                        if (card.getValue() == gif.curCard) {
                            MJModel.canTouchCard = false;
                            MJModel.canChoiceMore = false;
                            MJModel.canChoiceMoreType = 0;
                            sendOperateCard(MJModel.gang_info[j].state, MJModel.gang_info[j].curCard);
                            MJModel.mj_table.room_Action.setOperator(-1);
                            MJModel.mj_table.room_Action.removeChildByName("ChooseGang_selectLayer");
                            return;
                        }

                        if (card.getValue() == self._curLaizi || card.getValue() == self._curLaizipi || card.getValue() == self._curLaizipi2) {
                            MJModel.canTouchCard = false;
                            MJModel.canChoiceMore = false;
                            MJModel.canChoiceMoreType = 0;
                            sendOutCard(card.getValue());
                            MJModel.mj_table.room_Action.setOperator(-1);
                            MJModel.mj_table.room_Action.removeChildByName("ChooseGang_selectLayer");
                            return;
                        }
                    }
                }
            }
            super_clickHandCardCallback.call(this, n);
        };

        //锁住赖子牌
        MJCards.prototype.locklaizipai = function () {
            for (var i = 0; i < this.hand_card[0].length; i++) {
                var card = this.hand_card[0][i];
                if (card.getValue() == self._curLaizi) {
                    card.setBlackVis(true);
                    card.setCardTouchEnable(false);
                }
            }

        };
        MJCards.prototype.setSomeCardClickState = function () {
            if (MJModel.mj_lockcard_type == 1) {
                var listen_cards = [];
                for (var i = 0; i < MJModel.listen_info.length; i++) {
                    var lsi = MJModel.listen_info[i];
                    listen_cards.push(lsi.OutCard);
                }

                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    if (listen_cards.indexOf(card.getValue()) == -1) {
                        card.setBlackVis(true);
                        card.setCardTouchEnable(false);
                    }
                }
            } else if (MJModel.mj_lockcard_type == 2) {
                if (this.isDuoPai(0) == false) return;
                for (var i = 0; i < this.hand_card[0].length - 1; i++) {
                    var card = this.hand_card[0][i];
                    card.setBlackVis(true);
                    card.setCardTouchEnable(false);
                }
            }else{
                if (self._playname == 2){
                    if(self._ishongzhonggang == false){
                        this.locklaizipai();
                    }else{

                    }

                }
            }
        };

        MJCards.prototype.getFapaiTmpCard = function (pos, index, position) {
            var card = new MJCard();
            card.setValue(0, pos, CardType.Card_Hand, index);
            card.setMyPosition(position);
            return card;
        };

        var super_setOperator = MJAction.prototype.setOperator;
        MJAction.prototype.setOperator = function (operat) {
            this.removeChildByName("ChooseGang_selectLayer");
            if (operat != -1 &&(operat & Action_LiangBao) == Action_LiangBao) {
                if (this.actions["liang"]) {
                    this.actions["liang"].setVisible(true);
                }
            }
            super_setOperator.call(this, operat);
        };

        var super_btnCallback = MJAction.prototype.btnCallback;
        MJAction.prototype.btnCallback = function (ref) {
            var n = ref;
            var name = n.getName();
            Log(this, "btnCallback:" + name);
            if (name == "liang") {
                var type = Action_LiangBao;
                sendOperateCard(type, 0);
                this.setOperator(-1);
            }
            super_btnCallback.call(this, ref);
        };

        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(false);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言1");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };
        Setting.prototype.showPaiBanView = function (is) {
            is = false;
            this._gameSettingLayer.getChildByName("light_title").setVisible(is);
            this.checkboxs_gamesetting["paiban_horizontal"].setVisible(is);
            this.checkboxs_gamesetting["paiban_vertical"].setVisible(is);

            this._gameSettingLayer.getChildByName("table_tip").setVisible(is);
            this.checkboxs_gamesetting["table_2d"].setVisible(is);
            this.checkboxs_gamesetting["table_25d"].setVisible(is);
        };

        //湖北麻将不要自动胡牌功能
        MJAction.prototype.setAutoOutCardVis = function (value) {
        };

        MJCards.prototype.sortCard = function (a, b) {
            return self._sortCard(a, b);
        };



        MJConfig.getOutCardOrder = function (pos, index) {
            if (MJModel.mj_bg_use == 1) {
                //if(pos == 0 || pos == 2){
                    index = index%20;
                //}else {
                //    if(MJModel.mj_paiban == "vertical"){
                //        index = index%28;
                //    }else {
                //        index = index%30;
                //    }
                //}
                var order = null;
                if((pos == 1 || pos == 3) && MJModel.mj_paiban == "vertical"){
                    order = [
                        [
                            3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                            2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                            1, 1, 1, 1, 1, 1,
                            0, 0, 0, 0, 0, 0,
                        ],
                        [
                            6, 5, 4, 3, 2, 1, 0,
                            6, 5, 4, 3, 2, 1, 0,
                            6, 5, 4, 3, 2, 1, 0,
                            6, 5, 4, 3, 2, 1, 0,
                        ],
                        [
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            2, 2, 2, 2, 2, 2,
                            3, 3, 3, 3, 3, 3,
                        ],
                        [
                            0, 1, 2, 3, 4, 5, 6,
                            0, 1, 2, 3, 4, 5, 6,
                            0, 1, 2, 3, 4, 5, 6,
                            0, 1, 2, 3, 4, 5, 6,
                        ],
                    ];
                }else {
                    order = [
                        [
                            3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                            2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                            1, 1, 1, 1, 1, 1,
                            0, 0, 0, 0, 0, 0,
                        ],
                        [
                            9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                            9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                            9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                        ],
                        [
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            2, 2, 2, 2, 2, 2,
                            3, 3, 3, 3, 3, 3,
                        ],
                        [
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                        ],
                    ];
                }
                return order[pos][index];
            }else{

                if(MJModel.has_hu_layout == 1){
                    index = index%20;
                }else {
                    index = index%20;
                }

                var order = [
                    [
                        0,  1,  2,  3,  4,  5,
                        6,  7,  8,  9,  10, 11, 12, 13,
                        14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 , 25,
                    ],
                    [
                        25 , 24 , 23, 22, 21, 20,
                        19, 18, 17, 16, 15, 14, 13, 12,
                        11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                    ],
                    [
                        25 , 24 , 23, 22, 21, 20,
                        19, 18, 17, 16, 15, 14, 13, 12,
                        11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                    ],
                    [
                        20, 21, 22, 23, 24, 25,
                        12 , 13, 14, 15, 16, 17, 18, 19,
                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                    ],
                ];
                return order[pos][index];
            }
        };
        MJConfig.getOutCardPos = function (pos, index) {
            //if (MJModel.mj_roomType == 2) {
            //    index = index%58;
            //    return this.getWorldPosition("out_" + pos, "o_" + index);
            //}

            if (MJModel.mj_bg_use == 1) {
                //if(pos == 0 || pos == 2){
                    index = index%20;
                //}else {
                //    if(MJModel.mj_paiban == "vertical"){
                //        index = index%28;
                //    }else {
                //        index = index%30;
                //    }
                //}
            } else {
                if(MJModel.has_hu_layout == 1){
                    index = index%20;
                }else {
                    index = index%20;
                }
            }
            if((pos == 1 || pos == 3) && MJModel.mj_bg_use == 1 && MJModel.mj_paiban == "vertical"){
                return this.getWorldPosition("out_v_" + pos, "o_" + index);
            }else {
                return this.getWorldPosition("out_" + pos, "o_" + index);
            }
        };
        MJConfig.getHuCardOrder= function(pos, index) {
            index = index%10;
            if(MJModel.mj_bg_use == 0){
                var order = [
                    [
                        22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
                    ],
                    [
                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                    ],
                    [
                        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
                    ],
                    [
                        11, 10, 9, 8, 15, 14, 13, 12, 19, 18, 17, 16,
                    ],
                ];
                return order[pos][index];
            }else {
                var order = [
                    [
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ],
                    [
                        11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                    ],
                    [
                        100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
                    ],
                    [
                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                    ],
                ];
                return order[pos][index];
            }

        };

    },
    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.xishuimj.tagCurGameScence", jpacket);
            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.xishuimj.AckCurGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
        }
        this._super(cmd, jpacket, canDelay, svrid);

        if (cmd == selCMD.SERVER_LAIZI_BC) {
            this._handler_server_laizi_bc(jpacket, canDelay);
        }
        if(cmd == selCMD.SERVER_BROAD_BEISHU){
            this._handler_server_beishu(jpacket, canDelay);
        }
    },
    timeEnd: function (dt) {
        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    },
    _handler_server_beishu: function (data, canDelay) {
        var packet = parsePacket("proto.game.xishuimj.AckBeiShu", data);
        var gang_count = packet.bei_shu;
        if (gang_count){
            for( var i = 0; i< gang_count.length; i++){
                var pos = MJModel.getPosBySeatid(i);
                this._bao_nums[pos] = gang_count[i];
            }
            this.updateBaoPiUI();
        }
    },
    _handler_server_laizi_bc: function (data, canDelay) {
        var packet = parsePacket("proto.game.xishuimj.AckLaiziCard", data);
        var self = this;
        var curLaizi = packet.laizicard;
        var curLaizipi = packet.laizipicard;
        var cuiLaizipi2 = packet.laizipicardsub;
        this._setLaizi(curLaizi, curLaizipi, cuiLaizipi2, canDelay ? true : false);
        //try {
        //    var publiccard = this.room_Card.getNextPublicCard(false);
        //    publiccard.setVisible(false);
        //} catch (e) {
        //
        //}
        if (canDelay == false || true) {
            this._showHandcardFlag(false);
            var mo_card = null;
            if (this.room_Card.isDuoPai(0)){
                mo_card = this.room_Card.hand_card[0][this.room_Card.hand_card[0].length - 1];
                this.room_Card.hand_card[0].splice(this.room_Card.hand_card[0].length - 1,1);
            }
            this.room_Card.reflashHandCard(0, true);
            this.room_Card.reflashHandCard(1, true);
            this.room_Card.reflashHandCard(2, true);
            this.room_Card.reflashHandCard(3, true);
            if (mo_card){
                mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                self.room_Card.hand_card[0].push(mo_card);
            }
            return;
        }
        MJModel.isEnterWait = true;

        var move_end = cc.callFunc(function () {
            self._showHandcardFlag(false);
            var allPreCars = [];
            var allLaiZi = [];
            for (var i = self.room_Card.hand_card[0].length - 1; i >= 0; i--) {
                var card = self.room_Card.hand_card[0][i];
                if (card.getValue() == curLaizi) {
                    allLaiZi.push(card);
                } else {
                    if (allLaiZi.length > 0) {
                        break;
                    }
                    allPreCars.push(card);
                }
            }

            if (allLaiZi.length > 0 && allPreCars.length > 0) {
                var allDelay = 0;
                for (var i = 0; i < allLaiZi.length; i++) {
                    var card = allLaiZi[i];
                    var begin_pos = card.getPosition();
                    var end_pos = MJConfig.getHandCardPos(0, self.room_Card.hand_card[0].length - 1 - i, self.room_Card.hand_card[0].length, self.room_Card.isDuoPai(0));
                    var allL = Math.abs(end_pos.x - begin_pos.x);

                    //if (MJModel.outCardEffect_style == 0 || true) {
                    var time = allL / 1000;
                    if (time < 0.17) time = 0.17;
                    if (time > 0.3) time = 0.3;
                    //    card.runAction(cc.sequence(cc.delayTime(allDelay), cc.spawn(cc.rotateTo(0.1, 15), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + 100))), cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y + 100)).easing(cc.easeSineOut()), cc.spawn(cc.rotateTo(0.1, 0), cc.moveTo(0.17, end_pos))));
                    //} else {
                    //    card.runAction(cc.sequence(cc.moveTo(0.0, cc.p(end_pos.x + 0, end_pos.y + 100)), cc.moveTo(0.3, end_pos)));
                    //}
                    card.runAction(cc.sequence(cc.spawn(cc.rotateTo(0.1, 15), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + 100))), cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y + 100)).easing(cc.easeSineOut()), cc.spawn(cc.rotateTo(0.1, 0), cc.moveTo(0.17, end_pos))));
                    allDelay += 1;
                }
                for (var i = 0; i < allPreCars.length; i++) {
                    var card = allPreCars[i];
                    //card.runAction(cc.sequence(cc.moveBy(0.3, cc.p(83, 0)), cc.delayTime(1 - 0.3)).repeat(allLaiZi.length));
                    card.runAction(cc.moveBy(0.3, cc.p(83 * allLaiZi.length, 0)));
                }

                var callback = cc.callFunc(function () {
                    MJModel.isEnterWait = false;
                    self.room_Card.reflashHandCard(0, true);
                });
                self.runAction(cc.sequence(cc.delayTime(allLaiZi.length * 1), callback));
            } else {
                MJModel.isEnterWait = false;
            }
        });
        this.runAction(cc.sequence(cc.delayTime(2.5), move_end));
    },
    _handler_game_record: function (data, canDelay) {
        //-----新总结算界面
        cc.log("-_handler_game_record-");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var gameType = "浠水麻将 · 4人 ";
        if (MJModel.mj_roomType == 1) {
            gameType = "浠水麻将 · 3人 ";
        }
        if (MJModel.mj_roomType == 2) {
            gameType = "浠水麻将 · 2人 ";
        }
        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }

        for (var i = 0; i < gameRecord.MostWinScoreUser.length; i++) {
            var seatId = gameRecord.MostWinScoreUser[i];
            if (seatId != 255) {
                _winSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            var player = MJModel.players[i];
            var arrStr = ["坐庄次数", "胡牌次数", "赢分次数", "超时次数"];
            var arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.WinCounts, recoreInfo.outtime_num];

            if (player && player.uid != -1) {
                addX = 39 + (i * 302);
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, _winSeatid[i], _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }

            if (recoreInfo.totalscore != 0) {
                has_result = true;
            }

        }
        bigResult.refresh(PlayerNumber);

        this.release();
    },
    //每个方向角标对应
    _flagDirection: function (pos, flag, m_size) {
        if (pos == 1) {
            flag.setPosition(cc.p(m_size.width, m_size.height));
            flag.setRotation(-90);
        } else if (pos == 2) {
            flag.setPosition(cc.p(0, m_size.height));
            flag.setRotation(180);
        } else if (pos == 3) {
            flag.setPosition(cc.p(0, 13));
            flag.setRotation(90);
        }
    },
    resetGame: function (allClean) {
        this._super(allClean);
        this._curLaizi = -1;
        this._curLaizipi = -1;
        this._curLaizipi2 = -1;
        this._setLaizi(-1, -1, -1);
        this._clearAllScore();
        this.gameending = false;
        this._bao_nums = [0, 0, 0, 0];
        this.hideBaoPiUI();
    },
    handler_gang_scores: function (scores, OpType, OpType2, canDelay) {
        if (this._isgang) {
            this._super(scores, OpType, OpType2, canDelay);
        }
    },
    handler_out_card_sound: function (sex, card) {
        if (card == this._curLaizi || card == this._curLaizipi || card == this._curLaizipi2) {
            //自己出赖子 会触发特效 不用播声音
            return;
        }
        if (MJModel.mj_suport_fangyan == 1 && MJModel.mj_sound_use == 1) {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
        } else {
            this._super(sex, card);
        }
    },

    handler_op_sound: function (pos, sex, OpType, OpType2, effect) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.mj_sound_use == 1) {

        } else {
            this._super(pos, sex, OpType, OpType2, effect);
        }
    },

    handler_server_peng_kang_bc: function (data, canDelay) {
        var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);
        var seatid = ackBcOpResult.ChairID;
        var out_seatid = ackBcOpResult.OutCardChairID;
        var OpType = ackBcOpResult.OpType;
        var OpType2 = ackBcOpResult.OpType2;

        var card = ackBcOpResult.Card;

        var pos = MJModel.getPosBySeatid(seatid);
        var out_pos = MJModel.getPosBySeatid(out_seatid);

        if ((OpType & ActionType.TYPE_PASS) != ActionType.TYPE_PASS && (OpType & Action_LiangBao) == Action_LiangBao) {
            var player = MJModel.players[seatid];
            //var effect = "ting";
            if (player && canDelay) {
                Sound.getInstance().playEffect(getResPath("RoomMJ/sound/give.mp3"));
                //this.handler_op_sound(pos, player.sex, OpType, OpType2, effect);
                //this._show_op_effect(pos, effect);

            }
            this.players[pos].setLiangPaiVisible(true);
            this.myselfOpenOutCard();

            return;
        }

        //
        //if ((OpType & ActionType.TYPE_PASS) != ActionType.TYPE_PASS && (OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
        //    this._bao_nums[pos]++;
        //    this._bao_nums[pos]++;
        //}
        //else if ((OpType & ActionType.TYPE_PASS) != ActionType.TYPE_PASS && (OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
        //    this._bao_nums[pos]++;
        //}
        //else if ((OpType & ActionType.TYPE_PASS) != ActionType.TYPE_PASS && (OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
        //    this._bao_nums[pos]++;
        //}
        if ((OpType & ActionType.TYPE_PASS) != ActionType.TYPE_PASS &&
            ((OpType & LaiZiGangType.TYPE_LAIZI_GANG) == LaiZiGangType.TYPE_LAIZI_GANG
            || (OpType & LaiZiGangType.TYPE_LAIZIPI_GANG) == LaiZiGangType.TYPE_LAIZIPI_GANG)) {
            var scores = ackBcOpResult.Score;
            //this.handler_gang_scores(scores, OpType, OpType2, canDelay);
            var isOutCard = false;
            var isEnterWait = false;
            if (canDelay == false) {
                this.room_Card.removeHandCard(pos, card);
                this.room_Card.addOutCard(pos, card);
                return;
            }

            isOutCard = true;
            this.room_Card.outHandCard(pos, card);

            if (MJModel.isMyPos(pos)) {
                MJModel.isEnterWait = true;
                isEnterWait = true;
                var move_end = cc.callFunc(function () {
                    MJModel.isEnterWait = false;
                });

                this.runAction(cc.sequence(cc.delayTime(0.5), move_end));
            }

            if (MJModel.isMyPlayer(seatid)) {
                MJModel.hasCardOutIng = false;
                if (isEnterWait == false) MJModel.isEnterWait = false;
                MJModel.final_listen_info = [];
                //检测出的牌是否在听牌里边 不在的话就清楚听牌信息
                for (var i = 0; i < MJModel.listen_info.length; i++) {
                    var lsi = MJModel.listen_info[i];
                    if (lsi.OutCard == card) {
                        MJModel.final_listen_info = lsi.HuInfo;
                        break;
                    }
                }

                MJModel.listen_info = [];

                //可以听牌  可以选择自动胡牌
                if (MJModel.final_listen_info.length > 0) {
                    if (this.room_Action) this.room_Action.checkAutoOutCardVis();
                    this.room_Card.setAutoOutCard(MJModel.isAutoOutCard);
                }
                else {
                    if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
                    this.room_Card.setAutoOutCard(false);
                    MJModel.isAutoOutCard = false;
                }

                this.myselfCloseOutCard();
            }

            var player = MJModel.players[seatid];
            if (player && canDelay) {
                this.handler_op_sound(pos, player.sex, ActionType.TYPE_ZHIGANG, ActionType.TYPE_ZHIGANG, "gang");
                this.room_Tip.showEffect(pos, ActionType.TYPE_ZHIGANG, this.room_Card.isDuoPai(pos));
            }
            return;
        }


        this._super(data, canDelay);


    },

    handler_server_scene_info_uc: function (hubei_scene, canDelay) {
        var ackGameFree = hubei_scene.GameSence;
        var sceneStatus = ackGameFree.SceneStatus;
        MJModel.RoomConfigID = ackGameFree.RoomConfigID;
        if (MJModel.RoomConfigID.indexOf(85470001) != -1) {
            this._ishongzhonggang = true;
        }
        if (hubei_scene) {
            if (sceneStatus != 0) {
                this._setLaizi(hubei_scene.laizicard, hubei_scene.laizipicard, hubei_scene.laizipicardsub);//还原赖子
            }
        }
        if(hubei_scene.beishu) {
           for( var i = 0; i< hubei_scene.beishu.length; i++){
               var pos = MJModel.getPosBySeatid(i);
               this._bao_nums[pos] = hubei_scene.beishu[i];
           }
           this.updateBaoPiUI();
       }

        this._super(ackGameFree, canDelay);
        if(hubei_scene.liangbao ){
            for( var i = 0; i< hubei_scene.liangbao.length; i++){
                var isliang = hubei_scene.liangbao[i];
                var pos = MJModel.getPosBySeatid(i);
                if(isliang == 1){
                    this.players[pos].setLiangPaiVisible(true)
                }
            }

        }

        this._setGameType();
    },

    handler_out_card_sound: function (sex, card) {
        if (card == this._curLaizi || card == this._curLaizipi || card == this._curLaizipi2) {
            //自己出赖子 会触发特效 不用播声音
            return;
        }
        //if (MJModel.mj_suport_fangyan == 1 && MJModel.mj_sound_use == 1) {
        //    Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
        //    Sound.getInstance().playEffect(__String.createWithFormat(getResPath("luotian/sound/chupai/%1_%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", Utils.toHex2(card)));
        //} else {
            this._super(sex, card);
        //}
    },

    _setGameType: function () {
        //浠水麻将
        MJModel.play_id_str = [];
        if (MJModel.RoomConfigID.indexOf(85430001) != -1) {
            this._playname = 1;
        }
        if (MJModel.RoomConfigID.indexOf(85430002) != -1) {
            this._playname = 2;
        }
        if (MJModel.RoomConfigID.indexOf(85440001) != -1) {
            MJModel.play_id_str.push("2/3");
        }
        if (MJModel.RoomConfigID.indexOf(85440002) != -1) {
            MJModel.play_id_str.push("3/4/5");
        }
        if (MJModel.RoomConfigID.indexOf(85440003) != -1) {
            MJModel.play_id_str.push("6/8/10");
        }
        if (MJModel.RoomConfigID.indexOf(85440004) != -1) {
            MJModel.play_id_str.push("12/16/20");
        }
        if (MJModel.RoomConfigID.indexOf(85450001) != -1) {
            MJModel.play_id_str.push("全求人");
        }
        if (MJModel.RoomConfigID.indexOf(85450002) != -1) {
            MJModel.play_id_str.push("屁胡门清多赖");
        }
        if (MJModel.RoomConfigID.indexOf(85450003) != -1) {
            MJModel.play_id_str.push("七对可胡");
        }
        if (MJModel.RoomConfigID.indexOf(85450004) != -1) {
            MJModel.play_id_str.push("赖子包胡");
        }
        if (MJModel.RoomConfigID.indexOf(85450005) != -1) {
            MJModel.play_id_str.push("大胡杠开加番");
        }
        if (MJModel.RoomConfigID.indexOf(85450006) != -1) {
            MJModel.play_id_str.push("无风");
        }
        //晃晃
        if (MJModel.RoomConfigID.indexOf(85460001) != -1) {
            MJModel.play_id_str.push("1分");
        }
        if (MJModel.RoomConfigID.indexOf(85460002) != -1) {
            MJModel.play_id_str.push("2分");
        }
        if (MJModel.RoomConfigID.indexOf(85460003) != -1) {
            MJModel.play_id_str.push("5分");
        }
        if (MJModel.RoomConfigID.indexOf(85460004) != -1) {
            MJModel.play_id_str.push("10分");
        }
        if (MJModel.RoomConfigID.indexOf(85470001) != -1) {
            MJModel.play_id_str.push("红中杠");
            this._ishongzhonggang = true;
        }


        var gameDes = "";
        for (var i = 0; i < MJModel.play_id_str.length; i++) {
            gameDes += MJModel.play_id_str[i];
            if (i != MJModel.play_id_str.length - 1) {
                gameDes += " ";
            }
        }
        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);



    },

    _setLaizi: function (laizi, laizipi, laizipi2, gamestart) {
        if (laizi == -1 || laizi == 255) {
            if (this._curLaizi_bg) this._curLaizi_bg.setVisible(false);
            return;
        }
        if (gamestart == undefined) gamestart = false;

        var size = cc.director.getWinSize();
        if (this._curLaizi_bg == null) {
            if(this._playname == 1) {
                this._curLaizi_bg = new cc.Sprite(getResPath("xishuimj/flag/bao_pi_bg.png"));
                this._curLaizi_bg.setPosition(cc.p(70-5, size.height - 130));
            }else{
                this._curLaizi_bg = new cc.Sprite(getResPath("xishuimj/flag/bao_pi_bg2.png"));
                this._curLaizi_bg.setPosition(cc.p(70-10, size.height - 130));
            }

            this._curLaizi_bg.setScale(0.9);
            this.addChild(this._curLaizi_bg, 500);
        }

        this._curLaizi_bg.removeAllChildren();
        this._curLaizi_bg.setVisible(true);
        this._curLaizi = laizi;
        this._curLaizipi = laizipi;
        this._curLaizipi2 = laizipi2;

        if (this._curLaizi > 0) {
            laizi_tip = new cc.LabelTTF("", "Arial", 24);
            //laizi_tip.setColor(cc.color(87, 207, 93));
            laizi_tip.setColor(cc.color(0, 0, 0));
            if (laizi_tip) {
                laizi_tip.setPosition(cc.p(45 + 17, 100+5));
                this._curLaizi_bg.addChild(laizi_tip);
            }

            var card = new MJCard();
            card.setValue(laizi, 0, CardType.Card_Out, 0);//CardType.Card_Out
            card.setPosition(cc.p(110, 70));
            card.setScale(0.9);//0.9
            card.setStoreColor(cc.color(255, 249, 137));
            this._curLaizi_bg.addChild(card);
            this.room_Card.other_card.push(card);
            if(this._playname == 1) {
                card.setPosition(cc.p(45+45 , 50-15));
            }else{
                card.setPosition(cc.p(45 , 50-15));
            }

        }
        if (this._curLaizipi > 0 && this._curLaizipi !=255) {
            var card = new MJCard();
            card.setValue(laizipi, 0, CardType.Card_Out, 0);//CardType.Card_Out
            card.setPosition(cc.p(25+8, 50-15));
            card.setScale(0.9);//0.9
            //card.setStoreColor(cc.color(255, 249, 137));
            this._curLaizi_bg.addChild(card);
            this.room_Card.other_card.push(card);
        }
    },

    _showHandcardFlag: function (isEndShow) {
        var allcards = this.room_Card.hand_card[0];
        if (allcards) {
            for (var i = 0; i < allcards.length; i++) {
                var card = allcards[i];
                this._checkAddCardFlag(card);
            }
        }
    },
    _checkAddCardFlag: function (card) {
        try {
            if (card.type == CardType.Card_Outing)return;
            if (card.type == CardType.Card_Peng)return;
            if (card.type == CardType.Card_Public)return;
            if (card.getValue() == 0)return;
            if (MJModel.mj_bg_use == 1) {
                var flag_str = "";
                if (card.getValue() == this._curLaizi)flag_str = "xishuimj/flag/bao_flag.png";
                if (card.getValue() == this._curLaizipi)flag_str = "xishuimj/flag/pi_flag.png";
                if (card.getValue() == this._curLaizipi2)flag_str = "xishuimj/flag/pi_flag.png";
                if (flag_str != "") {
                    if (card.getValue() == this._curLaizi)card.setStoreColor(cc.color(255, 249, 137));
                    var p = card.getChildByName("sprite");
                    p.removeChildByName("laizi_flag");
                    var flag = null;

                    flag = new cc.Sprite(getResPath(flag_str));

                    var m_size = p.getContentSize();
                    if (flag) {
                        flag.setPosition(cc.p(m_size.width, 0));
                        if (card.pos == 0 && (card.type == CardType.Card_End || card.type == CardType.Card_Out )) {
                            flag.setPosition(cc.p(m_size.width, 15));
                        }
                        if(card.pos == 0 && (card.type == CardType.Card_Hu)){
                            flag.setPosition(cc.p(m_size.width, 15));
                        }
                        flag.setAnchorPoint(cc.p(1, 0));
                        flag.setName("laizi_flag");
                        p.addChild(flag);
                        this._flagDirection(card.pos, flag, m_size);
                        if (card.type == CardType.Card_End) {
                            if (card.pos == 1 || card.pos == 3) {
                                flag.setScale(0.5);
                            } else {
                                flag.setScale(0.8);
                            }
                        }

                        if (card.type == CardType.Card_Out || card.type == CardType.Card_Hu) {
                            flag.setScale(0.6);
                            if (card.pos == 0) {
                                flag.setScale(0.7);
                            } else {
                                flag.setScale(0.6);
                            }
                        }
                    }
                    return;
                }
            }
            else {
                try {
                    var p = card.getChildByName("sprite");
                    p.removeChildByName("laizi_flag");
                    var m_size = p.getContentSize();
                    var flagName = this._getFlagName(card.pos, card.type);
                    if (flagName == "") {
                        return;
                    }
                    var flag_str = "";
                    if (card.getValue() == this._curLaizi)flag_str = "bao";
                    if (card.getValue() == this._curLaizipi)flag_str = "pi";
                    if (card.getValue() == this._curLaizipi2)flag_str = "pi";
                    if (flag_str == "") {
                        return;
                    }
                    if (card.getValue() == this._curLaizi) card.setStoreColor(cc.color(255, 249, 137));

                    var uiJson = ccs.load(getResPath("luotian/cardFlag/mjFlag.json"));
                    var flag = uiJson.node;
                    flag.setName("laizi_flag");

                    var dy = 0;
                    if (card.pos == 0 && card.type == CardType.Card_End)dy = -5;
                    if (card.pos == 0 && card.type == CardType.Card_Hand)dy = -3;
                    flag.setPosition(cc.p(m_size.width / 2, m_size.height / 2 + dy));
                    p.addChild(flag);
                    flag.getChildByName(flag_str).getChildByName(flagName).setVisible(true);
                } catch (e) {
                    Log(this, e);
                }
            }
        } catch (e) {
            Log(this, e);
        }
    },

    _clearAllScore: function () {
        try {
            for (var i = 0; i < this._allBeiShu.length; i++) {
                var iscore = this._allBeiShu[i];
                if (iscore) {
                    iscore.setVisible(false);
                }
            }
        } catch (e) {

        }
    },

    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.getValue();
            if (typeof b === "object") bv = b.getValue();

            if (av == this._curLaizipi2 && bv != this._curLaizipi2)return 1;//赖子放在最前边
            if (av != this._curLaizipi2 && bv == this._curLaizipi2)return -1;//赖子放在最前边

            if (av == this._curLaizipi && bv != this._curLaizipi)return 1;//赖子放在最前边
            if (av != this._curLaizipi && bv == this._curLaizipi)return -1;//赖子放在最前边

            if (av == this._curLaizi && bv != this._curLaizi)return 1;//赖子放在最前边
            if (av != this._curLaizi && bv == this._curLaizi)return -1;//赖子放在最前边

            return bv - av;
        } catch (e) {
            return 0;
        }
    },


    _ResultAddHandCardFlag: function (card) {
        try {
            card.removeChildByName("hubei_flag2");
            var flag = null;
            if (flag) {
                flag.setAnchorPoint(cc.p(0, 0));
                flag.setPosition(cc.p(10, 30));
                flag.setName("hubei_flag2");
                card.addChild(flag);
            }
        } catch (e) {

        }
    },
});

var AddFanType = {
    14: "清一色",
    16: "碰碰胡",
    27: "豪华七对",
    28: "全求人",
    30:"门前清",
    31:"风一色",
    36: "七对",
    47: "将一色",
    58: "硬胡",
    61: "豪华七对",
    63: "豪华七对",
};
var AddFanType_HH = {
    14: "清一色",
    16: "碰碰胡",
    27: "豪华七对",
    28: "全求人",
    30:"门前清",
    31:"风一色",
    36: "七对",
    47: "将一色",
    58: "硬胡",
    61: "超豪华七对",
    63: "超豪华七对",
};

var MJResult_XiShui = MJCommonResult.extend({
    updateContentView: function (ackGameEndJS) {
        this.ackGameEnd = ackGameEndJS.gameend;
        this.shanxiGameEnd = ackGameEndJS;
        //输赢标志
        var seatId = MJModel.seatid;
        var score = this.ackGameEnd.Score[seatId];
        var effectName = "lose";
        if (score > 0) {
            effectName = "win";
        }
        this._win_effect(effectName);

        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);

        var itemHeight = 120;

        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;

            var countY = m;

            if (MJModel.mj_roomType == 1) {
                if (pos == 2) {
                    continue;
                }
            }

            if (MJModel.mj_roomType == 2) {
                if (pos == 1 || pos == 3) {
                    continue;
                }

                if (pos == 0) {
                    countY = 1;
                } else if (pos == 2) {
                    countY = 2;
                }
            }

            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 495 - count * itemHeight;
            var startX = 40;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX + 60, startY + 55));
            this.bgSpr.addChild(headLayer, 10);

            //上排牌 杠
            var ganghuLayer = this.createGangHuLayer(seatid);
            this.bgSpr.addChild(ganghuLayer, 10);
            ganghuLayer.setPosition(cc.p(startX + 230, startY + 65));

            //下排牌
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX + 0, startY));
            this.bgSpr.addChild(handCardLayer);

            // this.createSpecialHuTip(startX + 785, startY + 40, seatid);
            this.createSpecialHuTip(startX + 900, startY + 40, seatid);

            // 输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX + 1100, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            //中马列表
            var maLayer = this.createMaLayer(seatid);
            if (maLayer) {
                maLayer.setPosition(cc.p(startX + 845, startY + 85));
                this.bgSpr.addChild(maLayer);
            }
            count++;
        }
    },

    createGangHuLayer: function (seatid) {
        var layer = new cc.Layer();
        var x = 0;
        var y = 0;
        var sxendInfo = this.shanxiGameEnd;
        //庄家加倍
        //if (MJModel.banker_seatid == seatid) {
        //    var str = "[庄家加倍]";
        //    if (MJModel.RoomConfigID.indexOf(1327005) != -1)str = "[庄家不加倍]";
        //    var banker = new cc.LabelTTF(str, "Arial", 20);
        //    banker.setColor(this.leftColor);
        //    banker.setAnchorPoint(cc.p(0, 0));
        //    banker.setPosition(cc.p(x, y + 10));
        //    layer.addChild(banker);
        //
        //    x += banker.getContentSize().width + 5;
        //}
        if (this.ackGameEnd.EndGangInfo.length > seatid) {
            var gameEndInfo = this.ackGameEnd.EndGangInfo[seatid];
            var map = {};
            for (var i = 0; i < gameEndInfo.Gang.length; i++) {
                var gang = gameEndInfo.Gang[i];
                if (map[gang.GangType] == undefined) {
                    map[gang.GangType] = [];
                }
                map[gang.GangType].push(gang.GangCard);
            }
            for (var key in map) {
                if (!map.hasOwnProperty(key))continue;
                var a = key;
                var typeLabel = new cc.LabelTTF(this.getStringByType(a), "Arial", 20);
                typeLabel.setColor(this.leftColor);
                typeLabel.setAnchorPoint(cc.p(0, 0));
                typeLabel.setPosition(cc.p(x, y + 10));
                layer.addChild(typeLabel);

                x += typeLabel.getContentSize().width;


                var temp = map[key];
                var count = 0;
                var picount = 0;
                for (var j = 0; j < temp.length; j++) {
                    if (key == LaiZiGangType.TYPE_LAIZI_GANG ){
                        count++;
                        continue;
                    } else if(key == LaiZiGangType.TYPE_LAIZIPI_GANG) {
                        picount++;
                        continue;
                    }

                    if(Number(key)>9){
                        continue;
                    }

                    var smallCard = null;
                    var c = Utils.toHex2(temp[j]);
                    var smallCard = new MJCard();
                    smallCard.setValue(temp[j], 0, CardType.Card_Hand, 0);
                    smallCard.setScale(0.3);
                    smallCard = new cc.Sprite(__String.createWithFormat(getResPath("xishuimj/smallCard/%1.png"), c));
                    if (smallCard != undefined) {
                        smallCard.setAnchorPoint(cc.p(0.0, 0.0));
                        smallCard.setPosition(cc.p(x, y));
                        layer.addChild(smallCard);
                    }
                    x += 28;
                    if (j == temp.length - 1) {
                        x += 20;
                    }
                }
                if (key == LaiZiGangType.TYPE_LAIZI_GANG) {
                    x += 10;
                    typeLabel.setString("宝: +" + count + " ");
                    x += 50;
                }
                if (key == LaiZiGangType.TYPE_LAIZIPI_GANG) {
                    x += 10;
                    typeLabel.setString("皮:+" + picount + " ");
                    x += 50;
                }
            }
        }
        ////杠牌分
        //var gangScore = this.ackGameEnd.EndGangInfo[seatid].TotalGangScore;
        //if (gangScore) {
        //    var txt = "杠牌分  +";
        //    if (gangScore < 0) {
        //        txt = "杠牌分  ";
        //    }
        //    var gangfen = new cc.LabelTTF(txt + gangScore, "Arial", 20);
        //    gangfen.setColor(this.leftColor);
        //    gangfen.setAnchorPoint(cc.p(0, 0));
        //    gangfen.setPosition(cc.p(x, y + 10));
        //    layer.addChild(gangfen);
        //    x += gangfen.getContentSize().width + 10;
        //}
        var addfan = this.ackGameEnd.faninfo[seatid].addfan;
        if (addfan) {
            if(MJModel.mj_table._playname == 1){
                for (var i = 0; i < addfan.length; i++) {
                    if (AddFanType[addfan[i].AddType]) {
                        var fanType = new cc.LabelTTF(AddFanType[addfan[i].AddType], "Arial", 20);
                        fanType.setColor(this.leftColor);
                        fanType.setAnchorPoint(cc.p(0, 0));
                        fanType.setPosition(cc.p(x, y + 10));
                        layer.addChild(fanType);
                        x += fanType.getContentSize().width + 10;
                    }
                }
            }else{
                for (var i = 0; i < addfan.length; i++) {
                    if (AddFanType_HH[addfan[i].AddType]) {
                        var fanType = new cc.LabelTTF(AddFanType_HH[addfan[i].AddType], "Arial", 20);
                        fanType.setColor(this.leftColor);
                        fanType.setAnchorPoint(cc.p(0, 0));
                        fanType.setPosition(cc.p(x, y + 10));
                        layer.addChild(fanType);
                        x += fanType.getContentSize().width + 10;
                    }
                }
            }


        }
        //var hutype = this.ackGameEnd.faninfo[seatid];
        //if (hutype.SpecialType == 8) {
        //    var hutypetip = new cc.LabelTTF("杠上开花", "Arial", 20);
        //    hutypetip.setColor(this.leftColor);
        //    hutypetip.setAnchorPoint(cc.p(0, 0));
        //    hutypetip.setPosition(cc.p(x, y + 10));
        //    layer.addChild(hutypetip);
        //    x += hutypetip.getContentSize().width + 10;
        //}

        //包牌
        var isbaopai = this.shanxiGameEnd.baopai[seatid];
        if (isbaopai) {
            x += 10;
            var txt = "包牌";
            var baopaitip = new cc.LabelTTF(txt, "Arial", 20);
            baopaitip.setColor(this.leftColor);
            baopaitip.setAnchorPoint(cc.p(0, 0));
            baopaitip.setPosition(cc.p(x, y + 10));
            layer.addChild(baopaitip);
            x += 35;
        }

        //封顶
        var jinding = this.shanxiGameEnd.jinding[seatid];
        if (jinding) {
            x += 10;
            var txt = this.getFengDingStr(jinding);
            var jindingtip = new cc.LabelTTF(txt, "Arial", 20);
            jindingtip.setColor(this.leftColor);
            jindingtip.setAnchorPoint(cc.p(0, 0));
            jindingtip.setPosition(cc.p(x, y + 10));
            layer.addChild(jindingtip);
        }

        return layer;
    },

    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var path = "";
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5抢杠胡 6被抢杠 7一炮多响 8杠上开花 9花上添花
            switch (fanInfo.SpecialType) {
                case 1:
                    path = "xishuimj/result-detail/result_detail_zimo.png";
                    break;
                case 2:
                    path = "xishuimj/result-detail/result_detail_paohu.png";
                    break;
                case 3:
                    path = "xishuimj/result-detail/result_detail_dianpao.png";
                    break;
                case 4:
                    path = "xishuimj/result-detail/result_detail_beizimo.png";
                    break;
                case 5:
                    path = "xishuimj/result-detail/result_detail_qiangganghu.png";
                    break;
                case 6:
                    path = "xishuimj/result-detail/result_detail_beiqianggang.png";
                    break;
                case 7:
                    path = "xishuimj/result-detail/result_detail_dianpao.png";
                    break;
                case 8:
                    path = "xishuimj/result-detail/result_detail_gangshang.png";
                    break;
                default:
                    break;
            }
            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setPosition(cc.p(startX + 90, startY + 20));
                this.bgSpr.addChild(typeSprite);

            }
        }
    },
    getFengDingStr:function(v){
        if (v == 1) return "封顶";
        if (v == 2) return "银顶";
        if (v == 3) return "金顶";
        return "";
    },
    getStringByType: function (stype) {
        var type = Number(stype);
        var str = "";
        switch (type) {
            case 0:
                str = "宝:";
                break;
            case 1:
                str = "皮:";
                break;
            case 2:
                str = "明杠:";
                break;
            case 4:
                str = "明杠:";
                break;
            case 8:
                str = "暗杠:";
                break;
            case 16:
                //str = "被明杠:";
                //break;
            case 32:
                //str = "被明杠:";
                //break;
            case 64:
                //str = "点杠:";
                //break;
            case 128:
                //str = "被暗杠:";
                //break;
            default:
                break;
        }
        return str;
    },
});
