/**
 * Created by jasenwu on 18/10/26.
 */
loadProtoFile("proto/yangzhongmjgameproto.proto");


var HuType = {
    HU_INVALID: 0,
    HU_ZIMO: 1,
    HU_PAOHU: 2,
    HU_HeiMo: 2,
    Hu_RuanMo: 1,
    HU_DIANPAO: 3,
    HU_BEIZIMO: 4,
    HU_QIANG_GANG: 5,
    HU_BEI_QIANG_GANG: 6,
    HU_YI_PAO_DUO_XIANG: 7,
    HU_GANG_SHANG_HUA: 8,
    HU_GANG_HOU_PAO: 9,
};

var AddFanType = {
    121: "屁胡",
    16: "对对胡",
    14: "清一色",
    15: "混一色",
    122: "混对对",
    123: "清对对",
    22: "抢杠胡 X3",
    23: "海底捞月 X2",
    24: "杠上开花 X2",
    124: "大字",
    125: "大吊 X2",
};


var selfCMD = {
    SERVER_Laizi_BC: 5084,   //亮牌
    SERVER_FLOWER_HAND_CARD: 5026,  //发第一手牌后补花
    SERVER_GET_HUA_CARD: 5027,  //游戏过程中摸到花牌
};

var MJTable_YangZhong = MJTable.extend({
    tag: "MJTable_YangZhong",
    _curLaizi: -1,
    _curLaizipi: -1,
    _curLaizipi2: -1,
    _curLaizi_bg: null,
    _huaCards: [[], [], [], []],
    isRecordShow: false,
    _pkg_id: 0,
    maxQuan: 1,
    _tuoguanBtn: null,
    _tuoguanFlag: [null, null, null, null],
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        MJModel.outCardEffect_style = 1;

        MJModel.mj_bg_use = 1;
        MJModel.mj_suport_change_bg = 1;
        MJModel.toupiaoTipsType = 1;
        MJModel.chi_layout = 3;
        MJModel.mj_touch_tip = 1;
        MJModel.isOutCard = true;
        MJModel.mj_chat_style = 5;
        MJModel.mj_public_style = 1;
        MJModel.mj_card_lib_type = 1;

        MJModel.mj_gps_type = 1;
        MJModel.mj_double_click_style = 1;
        MJModel.shareType = 1;

        MJModel.mj_font = "jianjie";
        MJModel.mj_fontSize = "dahao";
        MJModel.mj_style = "shishang";
        MJModel.yinyue = "jingdian";

        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];
            if (this._pkg_id == 2927 || this._pkg_id == 2798) {
                MJModel.mj_roomType = 0;
            }
        } catch (e) {
            Log(this, e);
        }

        try {
            var help = this.roomPublic.getChildByName("game_help");
            help.setVisible(false);
        } catch (e) {

        }

        this._init_extend();
        this._super();
        this._update_action();
        //this._init_public();
        // this.schedule(this.test, 1.0);
    },
    _update_action: function () {
        this.room_Action.actions["pass"].loadTextures(getResPath("yangzhong/action/pass1.png"), getResPath("yangzhong/action/pass2.png"), getResPath("yangzhong/action/pass2.png"));

        this.room_Action.actions["chi"].loadTextures(getResPath("yangzhong/action/chi1.png"), getResPath("yangzhong/action/chi2.png"), getResPath("yangzhong/action/pass2.png"));

        this.room_Action.actions["peng"].loadTextures(getResPath("yangzhong/action/peng1.png"), getResPath("yangzhong/action/peng2.png"), getResPath("yangzhong/action/pass2.png"));

        this.room_Action.actions["gang"].loadTextures(getResPath("yangzhong/action/gang1.png"), getResPath("yangzhong/action/gang2.png"), getResPath("yangzhong/action/pass2.png"));

        this.room_Action.actions["hu"].loadTextures(getResPath("yangzhong/action/hu1.png"), getResPath("yangzhong/action/hu2.png"), getResPath("yangzhong/action/pass2.png"));

        this.room_Action.opBtns = [];
        this.room_Action.opBtns.push(this.room_Action.actions["pass"]);
        this.room_Action.opBtns.push(this.room_Action.actions["chi"]);
        this.room_Action.opBtns.push(this.room_Action.actions["peng"]);
        this.room_Action.opBtns.push(this.room_Action.actions["gang"]);
        this.room_Action.opBtns.push(this.room_Action.actions["hu"]);
    },
    getMjTypePath: function () {
        return getResPath("yangzhong/mj_type_1033.png");
    },

    updateBg: function (isInit) {
        if (isInit == undefined)isInit = false;
        var size = cc.director.getWinSize();
        if (this.bg == null) {
            this.bg = new ccui.ImageView(getResPath(this.getBgStr()));
            this.bg.setAnchorPoint(cc.p(0.5, 0.5));
            this.bg.setContentSize(size);
            this.bg.setScale9Enabled(true);
            this.bg.setPosition(size.width / 2, size.height / 2);
            this.addChild(this.bg, -100);
        } else {
            this.bg.loadTexture(getResPath(this.getBgStr()));
        }
        //简洁版本的幺鸡牌换了
        if (MJModel.mj_font == "jianjie") {
            Utils.addCardSprites(__String.createWithFormat("yangzhong/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));
        } else {
            Utils.addCardSprites(__String.createWithFormat("RoomMJ/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));
        }

        if (MJModel.mj_roomType == 2) {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config_2ren.json" : "RoomMJ/config/card_config2d_2ren.json");
        } else {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config.json" : "RoomMJ/config/card_config2d.json");
        }

        if (isInit)return;

        this.room_Card.reflashAllCardUI();
        for (var i = 0; i < 4; i++) {
            this.players[i].setPosition(MJConfig.getPlayerPos(i));
            this.players[i].reflashNameMoneyPosition();
        }
        if (this.room_Info)this.room_Info.reflash();
    },

    isSupportPublicCard: function () {
        return false;
    },

    _init_extend: function () {
        var self_table = this;

        MJCards.prototype.sortCard = function (a, b) {
            return self_table._sortCard(a, b);
        };

        //湖北麻将不要自动胡牌功能
        MJAction.prototype.setAutoOutCardVis = function (value) {
        };

        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(false);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };
        //Setting.prototype.showPaiBanView = function () {
        //    this._gameSettingLayer.getChildByName("light_title").setVisible(false);
        //    this.checkboxs_gamesetting["paiban_horizontal"].setVisible(false);
        //    this.checkboxs_gamesetting["paiban_vertical"].setVisible(false);
        //};

        MJConfig.getHuCardPos = function (pos, index) {
            index = index%12;
            if((pos == 1 || pos == 3) && MJModel.mj_bg_use == 1 && MJModel.mj_paiban == "vertical"){
                var p = this.getWorldPosition("hu_" + pos , "h_" + index);
                if(pos == 3) {
                    p.y = p.y - 10 * index;
                    p.x = p.x;
                }
                if(pos == 1){
                    p.y = p.y + 10 * index;
                    p.x = p.x;
                }
                return p;
            }else {
                var p = this.getWorldPosition("hu_" + pos , "h_" + index);
                if(pos == 2 && MJModel.mj_bg_use == 1){
                    p.y = p.y - 5;
                    p.x = p.x + index*4;
                }else{
                    if (MJModel.mj_bg_use == 0) {
                        var startIdex = 4;
                        if (pos == 0) {
                            startIdex = 5;
                        }
                        if (pos == 3) {
                            startIdex = 10;
                        }
                        var index_new = startIdex + index * 2;
                        var p = MJConfig.getPublicCardPos(pos, index_new);
                        if (MJModel.mj_roomType == 0) {
                            if (pos == 0) {
                                p.y = p.y - 5;
                                p.x = p.x - 2 * index
                            }else if(pos == 3){
                                p.y = p.y + 2.5 * index;
                                p.x = p.x + 2 * index
                            }else if(pos == 2){
                                p.y = p.y - 5;
                                p.x = p.x
                            }else {
                                p.y = p.y - 10;
                                p.x = p.x - 0.1 * index
                            }
                        }
                        return p;
                    }
                }
                return p;
            }
        };

        var super_getscale_new = MJConfig.getScale_new;
        MJConfig.getScale_new = function (pos, type, index, isCard) {
            try {
                var ss = 1;
                if (type == CardType.Card_Peng && MJModel.mj_bg_use == 1) {
                    if (type == CardType.Card_Peng && isCard == false) {
                        if((pos == 1 || pos == 3) && MJModel.mj_bg_use == 1 && MJModel.mj_paiban == "vertical"){
                            ss = MJModel.cardConfig.getChildByName("peng_v_" + pos).getChildByName("p_" + index).getScale();
                        }else {
                            ss = MJModel.cardConfig.getChildByName("peng_" + pos).getChildByName("p_" + index).getScale();
                        }
                    }
                    if (type == CardType.Card_Peng && isCard == true) {
                        if((pos == 1 || pos == 3) && MJModel.mj_bg_use == 1 && MJModel.mj_paiban == "vertical"){
                            ss = MJModel.cardConfig.getChildByName("peng_v_" + pos).getChildByName("p_0").getChildByName("p_" + index).getScale();
                        }else {
                            ss = MJModel.cardConfig.getChildByName("peng_" + pos).getChildByName("p_0").getChildByName("p_" + index).getScale();
                        }
                    }
                    if (MJModel.mj_bg_use == 1 && pos == 2) {
                        ss = ss * 0.95;
                    }
                    cc.log("Bbbbbbbbbbbbbb");
                } else {
                    ss = super_getscale_new.call(this, pos, type, index, isCard);
                    cc.log("Ccccccccccccccccc");
                }
            } catch (e) {
                cc.log("Dddddddddddddddddd");
                ss = 1;
            }

            return ss;
        };

        //MJConfig.getHandCardPos = function (pos, index, all, needRestri) {
        //    if (needRestri == undefined)needRestri = false;
        //    if (MJModel.isOnVideo) {
        //        return this.getEndCardPos(pos, index, all, needRestri);
        //    }
        //    var findex = index;
        //    if (needRestri) {
        //        findex = index - 1;
        //    }
        //    var p = this.getWorldPosition("hu_" + pos , "h_" + findex);
        //    if(pos == 2 && MJModel.mj_bg_use == 1){
        //        p.y = p.y + 5;
        //        p.x = p.x + findex;
        //    }
        //    return p;
        //};

        MJConfig.getHuCardOrder = function (pos, index) {
            index = index % 12;
            if (MJModel.mj_bg_use == 0) {
                index = index * 2;
                return MJConfig.getPublicCardOrder(pos, index);
            } else {
                var order = [
                    [
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ],
                    [
                        11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                    ],
                    [
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ],
                    [
                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                    ],
                ];
                return order[pos][index];
            }
        };

        var super_mjcards_reflashAllCardUI = MJCards.prototype.reflashAllCardUI;
        MJCards.prototype.reflashAllCardUI = function () {
            super_mjcards_reflashAllCardUI.call(this);
            for (var i = 0; i < this.hu_card.length; i++) {
                for (var j = 0; j < this.hu_card[i].length; j++) {
                    try {
                        var card = this.hu_card[i][j];
                        var value = card.getValue();
                        if (value >= 0x51 && value <= 0x58) {
                            if (MJModel.mj_bg_use == 0) {
                                card.setScale(0.7);
                                if(i == 0){
                                    card.setScale(1);
                                }
                                if(i == 1){
                                    card.setScale(1);
                                }
                                if(i == 2){
                                    card.setScale(0.9);
                                }
                            }else{
                                card.setScale(1);
                                if(i == 2){
                                    card.setScale(0.8);
                                }
                            }

                        }
                    } catch (e) {

                    }
                }
            }
        };

        //去掉出牌按钮
        MJCards.prototype.createOutCardBtn = function () {

        };

        MJPeng.prototype.getPointPos = function (pos) {
            var x = 0;
            var y = 0;
            cc.log("");
            if (MJModel.mj_bg_use == 1) {
                if(MJModel.mj_paiban == "vertical"){
                    if (pos == 0) {
                        y = -50;
                    } else if(pos == 1){
                        x = -70;
                        y = 5;

                    } else if(pos == 2){
                        y = -25;
                    }else if(pos == 3){
                        x = 70;
                        y = 5;
                    }
                }else {
                    if (pos == 0) {
                        y = -50;
                    } else if(pos == 1){
                        x = -30;
                        if(this.pengType == PengType.Peng_Peng){
                            y = 5;
                        }else {
                            y = 15;
                        }

                    } else if(pos == 2){
                        y = -25;
                    }else if(pos == 3){
                        x = 30;
                        if(this.pengType == PengType.Peng_Peng){
                            y = 5;
                        }else {
                            y = 15;
                        }
                    }
                }

            } else {
                cc.log("ningjiebiaoAANSDHOIASHD");
                if (pos == 0) {
                    y = -35;
                } else if(pos == 1){
                    x = -30;
                    if(this.pengType == PengType.Peng_Peng){
                        y = 5;
                    }else {
                        y = 15;
                    }

                } else if(pos == 3){
                    x = 30;
                    if(this.pengType == PengType.Peng_Peng){
                        y = 5;
                    }else {
                        y = 15;
                    }
                }else if(pos == 2){
                    y = - 15;
                }
            }

            return cc.p(x, y);
        };

        var super_addOutCard = MJCards.prototype.addOutCard;
        MJCards.prototype.addOutCard = function (pos, value, showPoint) {
            //var seatid = MJModel.getPosBySeatid(pos);
            //cc.log("ningjieibao11111111" + self_table._huaCards[seatid]);
            //if (self_table._huaCards[seatid].indexOf(value) != -1) {
            if (self_table._isHuaPai(value)) {
                cc.log("ningjiebiao++++++++++++++");
                var card = this.addHuCard(pos, value);
                if (pos == 2 && MJModel.mj_bg_use == 1) {
                    card.setScale(0.8);
                }
                if (pos == 2 && MJModel.mj_bg_use == 0) {
                    card.setScale(0.9);
                }
                if(pos == 3 && MJModel.mj_bg_use == 0) {
                    card.setScale(0.7);
                }
                return card;
            } else {
                return super_addOutCard.call(this, pos, value, showPoint);
            }
        };

        MJCards.prototype.setSomeCardClickState = function () {
            if (MJModel.mj_lockcard_type == 1) {
                var listen_cards = [];
                for (var i = 0; i < MJModel.listen_info.length; i++) {
                    var lsi = MJModel.listen_info[i];
                    listen_cards.push(lsi.OutCard);
                }

                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    if (listen_cards.indexOf(card.getValue()) == -1) {
                        card.setBlackVis(true);
                        card.setCardTouchEnable(false);
                    }
                }
            } else if (MJModel.mj_lockcard_type == 2) {
                if (this.isDuoPai(0) == false) return;
                for (var i = 0; i < this.hand_card[0].length - 1; i++) {
                    var card = this.hand_card[0][i];
                    card.setBlackVis(true);
                    card.setCardTouchEnable(false);
                }
            } else {
                if (this.isDuoPai(0) == false) return;
                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    var seatid = MJModel.getPosBySeatid(0);
                    if (self_table._huaCards[seatid].indexOf(card.getValue()) != -1) {
                        card.setBlackVis(true);
                        card.setCardTouchEnable(false);
                    } else {
                        card.setBlackVis(false);
                        card.setCardTouchEnable(true);
                    }
                }
            }
        };

        MJCard.prototype.createTingFlag = function () {
            if (this.tingpai_flag) {
                try {
                    this.tingpai_flag.removeFromParent(true);
                } catch (e) {

                }

                this.tingpai_flag = null;
            }

            var m_size = this.getContentSize();
            this.tingpai_flag = new cc.Sprite(getResPath("yangzhong/flag/ting.png"));
            this.tingpai_flag.setAnchorPoint(cc.p(0.5, 0));
            this.tingpai_flag.setPosition(cc.p(m_size.width / 2, m_size.height - 23));
            this.tingpai_flag.setVisible(false);
            this.addChild(this.tingpai_flag);
        };

        BigFaceMenu.prototype.getIconsIndexArray = function (seatid) {
            var icons = [1, 3, 7, 8, 18, 19];//需要显示的动画表情
            return icons;
        };

        //不同城市也要显示距离
        PlayerInfo.prototype.updateInfo = function () {
            var hasnocity = false;
            var hastoonear = false;
            var playerNums = 4;
            if (MJModel.mj_roomType == 1) {
                playerNums = 3;
            } else if (MJModel.mj_roomType == 2) {
                playerNums = 2;
            }
            for (var i = 0; i < playerNums; i++) {
                var player = MJModel.players[i];
                var playerData = this.getPlayerData(player.uid);
                var pos = MJModel.getPosBySeatid(i);
                var playerUI = this.players.getChildByName("player" + pos);
                var avatar = playerUI.getChildByName("avatar");
                var name = playerUI.getChildByName("name");
                var city = playerUI.getChildByName("city");
                city.stopAllActions();
                avatar.removeAllChildren();
                name.setString("");
                name.ignoreContentAdaptWithSize(true);

                city.setString("");
                city.ignoreContentAdaptWithSize(true);
                if (player.uid <= 0) {
                    city.setString("");
                    var m_pAvatar = new cc.Sprite("Avatars/user4_unlogin.png");
                    m_pAvatar.setScale(85 / m_pAvatar.getContentSize().width, 85 / m_pAvatar.getContentSize().height);
                    avatar.addChild(m_pAvatar);
                } else {
                    var m_pAvatar = Utils.createCircleAvatar(player.avatar, "Avatars/user4_unlogin.png", "Avatars/user4_unlogin.png", cc.size(85, 85));
                    avatar.addChild(m_pAvatar);
                    name.setString(player.name);
                    //city.setColor(cc.color(255, 255, 255));
                    if (this.isNoData(playerData)) {
                        hasnocity = true;
                        //city.setColor(cc.color(255, 0, 0));
                        city.setString("未检测到位置");
                        //city.runAction(cc.sequence(cc.moveBy(0.5, cc.p(0, 5)), cc.moveBy(0.5, cc.p(0, -5))).repeatForever());
                    } else {
                        city.setString(Utils.parseName(10, playerData.city));
                    }
                }
            }
            var cs = this.julitips.getChildren();
            for (var i in cs) {
                var tips = cs[i];
                if (!tips)continue;
                var name = tips.getName();
                var ps = name.split("_");
                var label = tips.getChildByName("num");
                var s1 = MJModel.getSeatidByPos(parseInt(ps[0]));
                var s2 = MJModel.getSeatidByPos(parseInt(ps[1]));
                var p1 = MJModel.players[s1];
                var p2 = MJModel.players[s2];

                tips.getChildByName("hong").setVisible(false);
                tips.getChildByName("lv").setVisible(false);
                tips.getChildByName("hong").setScaleX(1);
                tips.getChildByName("lv").setScaleX(1);
                tips.getChildByName("hong").stopAllActions();
                tips.getChildByName("lv").stopAllActions();
                label.setString("");
                label.ignoreContentAdaptWithSize(true);

                if (!p1 || !p2 || p1.uid <= 0 || p2.uid <= 0) {
                    continue;
                }

                var playerData1 = this.getPlayerData(p1.uid);
                var playerData2 = this.getPlayerData(p2.uid);

                if (this.isNoData(playerData1)) {
                    continue;
                }

                if (this.isNoData(playerData2)) {
                    continue;
                }

                // if (playerData1.city != playerData2.city) {
                //     continue;
                // }

                var dis = Utils.getDistance(playerData1.latitude, playerData1.longitude, playerData2.latitude, playerData2.longitude);
                tips.setVisible(true);
                if (dis >= 1000) {
                    var tip = tips.getChildByName("lv");
                    tip.setVisible(true);
                    var dis_f = parseFloat(dis / 1000);
                    label.setString(dis_f.toFixed(1) + "千米");
                    tip.setScaleX((label.getContentSize().width + 20) / tip.getContentSize().width);
                    label.setScaleX(1 / tip.getScaleX());
                } else {
                    label.setString(dis + "米");
                }

                if (dis <= 100) {
                    tips.getChildByName("hong").setVisible(true);
                    //tip.runAction(cc.sequence(cc.moveBy(0.5, cc.p(0, 5)), cc.moveBy(0.5, cc.p(0, -5))).repeatForever());
                    hastoonear = true;
                } else {
                    tips.getChildByName("lv").setVisible(true);
                }
            }

            this.warningTip.setVisible(false);
            this.btns["jieshan"].setVisible(false);
            this.btns["continue"].setVisible(false);
            this.warningTip.stopAllActions();
            if (hasnocity || hastoonear) {
                this.warningTip.setVisible(true);
                this.btns["jieshan"].setVisible(true);
                this.btns["continue"].setVisible(true);
                this.warningTip.runAction(cc.sequence(cc.delayTime(1), cc.hide(), cc.delayTime(0.1), cc.show()).repeatForever());
                this.warningTip.ignoreContentAdaptWithSize(true);
                if (hasnocity && hastoonear) {
                    this.warningTip.setString("* 发现距离过近、未检测到位置的玩家，是否解散？");
                } else if (hasnocity) {
                    this.warningTip.setString("* 发现未检测到位置的玩家，是否解散？");
                } else if (hastoonear) {
                    this.warningTip.setString("* 发现距离过近的玩家，是否解散？");
                }
            }

            MJModel.mj_table.room_Action.updateGPSTip(hasnocity, hastoonear);
            if (MJModel.mj_table.pre_scene) {
                MJModel.mj_table.pre_scene.updateGPSTip(hasnocity, hastoonear);
            }
        };
    },

    playBgSound: function () {
        if (MJModel.yinyue == "jingkuai") {
            Sound.getInstance().PlayBgSound(getResPath("RoomMJ/sound/csmj1.mp3"));
        } else if (MJModel.yinyue == "suhuan") {
            Sound.getInstance().PlayBgSound(getResPath("RoomMJ/sound/csmj2.mp3"));
        } else {
            Sound.getInstance().PlayBgSound(getResPath("yangzhong/sound/music_hall.mp3"));
        }
    },
    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.getValue();
            if (typeof b === "object") bv = b.getValue();
            //if (av == this._curLaizi && bv != this._curLaizi)return 1;//赖子放在最前边
            //if (av != this._curLaizi && bv == this._curLaizi)return -1;//赖子放在最前边
            return bv - av;
        } catch (e) {
            return 0;
        }
    },
    test: function (dt) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;
        if (tempCount == 5 && true) {
            var cards = [18, 18, 22, 24, 25, 33, 33, 33, 36, 37, 38, 67, 67];
            for (var i in cards) {
                this.room_Card.addOutCard(0, cards[i], false);
                this.room_Card.addOutCard(1, cards[i], false);
                this.room_Card.addOutCard(2, cards[i], false);
                this.room_Card.addOutCard(3, cards[i], false);
            }


            return;
            var packet = {
                "gameend": {
                    "UserCard": [{
                        "ChangeableCardsLen": 13,
                        "ChangeableCards": [1, 6, 7, 9, 18, 19, 21, 21, 36, 38, 38, 51, 86],
                        "FixedCardsLen": 0,
                        "stFixedCards": [],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 10,
                        "ChangeableCards": [2, 4, 17, 23, 36, 39, 39, 51, 67, 67],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{"CardData": 23, "state": 256, "chairID": 2, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 4,
                        "ChangeableCards": [17, 18, 19, 20],
                        "FixedCardsLen": 3,
                        "stFixedCards": [{
                            "CardData": 8,
                            "state": 1,
                            "chairID": 3,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 6, "state": 128, "chairID": 1, "OpCards": [], "LaiziNum": null}, {
                            "CardData": 38,
                            "state": 64,
                            "chairID": 3,
                            "OpCards": [],
                            "LaiziNum": null
                        }],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 10,
                        "ChangeableCards": [2, 9, 33, 37, 41, 50, 50, 52, 65, 67],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{"CardData": 6, "state": 128, "chairID": 2, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }],
                    "Score": [0, 0, 4, -4],
                    "EndState": 0,
                    "EndGangInfo": [{"Gang": [], "TotalGangScore": 0}, {"Gang": [], "TotalGangScore": 0}, {
                        "Gang": [],
                        "TotalGangScore": 0
                    }, {"Gang": [], "TotalGangScore": 0}],
                    "faninfo": [{
                        "chairid": 0,
                        "SpecialType": 0,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 1,
                        "SpecialType": 0,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 2,
                        "SpecialType": 2,
                        "FanNum": 4,
                        "addfan": [{"AddType": 121, "AddNum": 1, "AddType2": null}],
                        "hucard": 17,
                        "DianPao": []
                    }, {"chairid": 3, "SpecialType": 3, "FanNum": 0, "addfan": [], "hucard": 0, "DianPao": []}],
                    "money": [100000, 100000, 100022, 99978]
                }, "flowerCards": []
            };
            this.handler_server_game_end_bc(packet);
        }
    },

    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.yangzhongmj.tagYangZhongGameScence", jpacket);
            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.yangzhongmj.AckYangZhongGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_FLOWER_HAND_CARD) {
            this._handler_server_buhua_bc(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_GET_HUA_CARD) {
            this._handler_server_buhua_bc2(jpacket, canDelay);
            return;
        }
        this._super(cmd, jpacket, canDelay, svrid);
    },

    handler_server_update_info_uc: function (data, canDelay) {
    },

    _isHuaPai: function (card) {
        try {
            var allhua = [0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58];
            if (allhua.indexOf(card) != -1) {
                return true;
            } else {
                return false;
            }
        } catch (e) {
            return false;
        }
    },

    _handler_server_buhua_bc2: function (data, canDelay) {
        var packet = parsePacket("proto.game.yangzhongmj.BuHuaOne", data);
        var buhua = packet.bu_hua;
        var seatId = packet.chair_id;
        var pos = MJModel.getPosBySeatid(seatId);
        this.room_Card.addOutCard(pos, buhua);
        if (canDelay) {
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("RoomMJ/sound/operator/%1_buhua.mp3"), "m"));
        }
    },

    _handler_server_buhua_bc: function (data, canDelay) {
        var packet = parsePacket("proto.game.yangzhongmj.AckAutoBuHua", data);
        var buhua = packet.bu_hua;
        var seatId = packet.chair_id;
        var pos = MJModel.getPosBySeatid(seatId);

        //var leftcount = packet.leftcount;
        //this.room_Info.showCardNums(leftcount, true);
        for (var i = 0; i < buhua.length; i++) {

            var huaArr = buhua[i].hua;
            var getcardArr = buhua[i].bu;
            for (var j = 0; j < huaArr.length; j++) {
                this.room_Card.removeHandCard(pos, huaArr[j]);
            }
            cc.log("ningjiebiaohuaArr" + JSON.stringify(huaArr));
            for (var j = 0; j < getcardArr.length; j++) {
                this.room_Card.addHandCard(pos, getcardArr[j]);
            }
            cc.log("ningjiebiaogetcardArr" + JSON.stringify(getcardArr));
            this.room_Card.reflashHandCard(pos);

            if (MJModel.isMyPlayer(seatId) && this.room_Card.isDuoPai(0)) {
                MJModel.mj_mo_cards[0] = getcardArr[getcardArr.length - 1];
                var is_ok = this.room_Card.removeHandCard(0, MJModel.mj_mo_cards[0]);
                if (is_ok) this.room_Card.initMoCard(0, MJModel.mj_mo_cards[0], true);
            }

            for (var j = 0; j < huaArr.length; j++) {
                this.room_Card.addOutCard(pos, huaArr[j]);
                //this.room_Card.removeHandCard(pos, huaArr[j]);
            }

            //if (canDelay && huaArr.length > 0) {
            //    this.room_Tip.showOtherEffect(pos, "gaogang/effect/buhua/effects_mjxxbuhuax.ExportJson", "effects_mjxxbuhuax", 1);
            //}
        }
        if (canDelay) {
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("RoomMJ/sound/operator/%1_buhua.mp3"), "m"));
        }
    },

    _handler_game_record: function (data, canDelay) {
        //-----新总结算界面
        cc.log("------big End");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var pkgId = this._pkg_id;
        var gameType = "扬中麻将";

        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];
        gameType += " · " + MJModel.base_money + "分底";

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        //var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;

        var max_score = 0;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            if (recoreInfo.totalscore > max_score) {
                max_score = recoreInfo.totalscore;
            }
        }

        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            //var playerRecord = totalRecord.player_records[i];
            var player = MJModel.players[i];
            var arrStr = [];
            //次数
            var arrcount = [];

            arrStr = ["坐庄次数", "胡牌次数", "点炮次数", "超时次数"];
            arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.Ex1, recoreInfo.outtime_num];

            if (player && player.uid != -1 && player.uid != 0) {
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var isWin = false;
                if (max_score > 0 && recoreInfo.totalscore == max_score) {
                    isWin = true;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, isWin, _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner, recoreInfo.dissState);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }
        }
        bigResult.refresh(PlayerNumber);
        this.release();
    },

    handler_server_game_end_bc: function (hubeiGameend, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            var ackGameEnd = hubeiGameend.gameend;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);
            this.room_Info.stopTime();
            this.room_Tip.hideOutCardTip();

            var show_all_handcard = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var show_liuju = cc.callFunc(function () {
                if (ackGameEnd.EndState == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
            });

            var show_end_score = cc.callFunc(function () {
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var update_all_money = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var game_end_reset = cc.callFunc(function () {
                self.room_Action.setReady2Visible(false);
                try {
                    var result = new MJResult_XinYu();
                    result.updateContentView(hubeiGameend);
                    result.setName("reset_remove");
                    self.addChild(result, 100000);
                } catch (e) {
                    cc.log("game end:", e);
                    self.room_Action.setReady2Visible(true);
                }
            });

            var show_all_public_card = cc.callFunc(function () {
                self.gameend_showAllPublicCard(ackGameEnd);
            });

            if (MJModel.isOnVideo && canDelay == false) {
                this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(2), update_all_money));
                return;
            }

            this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(1), show_liuju, cc.delayTime(ackGameEnd.EndState == 1 ? 1 : 0), show_end_score, cc.delayTime(0), update_all_money, cc.delayTime(1), game_end_reset));
        } catch (e) {
            ERROR(this, "handler_server_game_end_bc" + e);
        }
    },

    timeEnd: function (dt) {

        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            cc.log("________________________");
            sendGameEndRecordReq();
        }
        cc.log("=======isState" + MJModel.isState(MJ_STATUS.MJ_GAME_FREE));
    },

    //handler_server_peng_kang_bc: function (data, canDelay) {
    //    var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);
    //
    //    var seatid = ackBcOpResult.ChairID;
    //    var out_seatid = ackBcOpResult.OutCardChairID;
    //    var OpType = ackBcOpResult.OpType;
    //    var OpType2 = ackBcOpResult.OpType2;
    //    var card = ackBcOpResult.Card;
    //
    //    var pos = MJModel.getPosBySeatid(seatid);
    //    var out_pos = MJModel.getPosBySeatid(out_seatid);
    //
    //    if ((OpType & ActionType.TYPE_PASS) != ActionType.TYPE_PASS && ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG ||
    //        (OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG)) {
    //        //var scores = ackBcOpResult.Score;
    //        //this.handler_gang_scores(scores, OpType, OpType2, canDelay);
    //        this.room_Card.addPengCard(pos, PengType.Peng_AnKang, card, out_pos, OpType);
    //        this.room_Card.removeHandCard(pos, card, 3);
    //        MJModel.cur_seat = seatid;
    //        this.room_Info.showDirectionTip(pos);
    //        if (MJModel.isMyPlayer(seatid)) {
    //            this.myselfOpenOutCard();
    //        }
    //        var player = MJModel.players[seatid];
    //        if (player && canDelay) {
    //            this.handler_op_sound(pos, player.sex, OpType, OpType2, "");
    //            this.handler_op_effect(pos, out_pos, player.sex, OpType, OpType2);
    //        }
    //        return;
    //    }
    //
    //    try {
    //        var hasHua = false;
    //        for (var i = 0; i < this.room_Card.hand_card[0].length; i++) {
    //            if (this._isHuaPai(this.room_Card.hand_card[0][i].getValue())) {
    //                hasHua = true;
    //                break;
    //            }
    //        }
    //        if (hasHua) {
    //            MJModel.isEnterWait = true;
    //            var out_card_over = cc.callFunc(function () {
    //                MJModel.isEnterWait = false;
    //            });
    //
    //            this.runAction(cc.sequence(cc.delayTime(1), out_card_over));
    //        }
    //    } catch (e) {
    //
    //    }
    //    this._super(data, canDelay);
    //},
    handler_server_peng_kang_bc: function (data, canDelay) {
        this.room_Tip.showTextTip("");
        this.check_tip_operate_card(0, 0);
        var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);
        this.unschedule(this.autoOutCardTimeOut);
        this.unschedule(this.autoHuCardTimeOut);

        var seatid = ackBcOpResult.ChairID;
        var out_seatid = ackBcOpResult.OutCardChairID;
        var OpType = ackBcOpResult.OpType;
        var OpType2 = ackBcOpResult.OpType2;
        var card = ackBcOpResult.Card;
        var specialCard = ackBcOpResult.SpecialCard;

        //var scores = ackBcOpResult.Score;
        //this.handler_gang_scores(scores, OpType, OpType2, canDelay);

        if (MJModel.isMyPlayer(seatid)) {
            if (this.room_Action) this.room_Action.setOperator(-1);
        }

        if (this.room_Action_video) this.room_Action_video.reset();

        var pos = MJModel.getPosBySeatid(seatid);
        var out_pos = MJModel.getPosBySeatid(out_seatid);

        this.players[pos].setTimeOut(false);
        this.players[pos].setOffline(false);

        if ((OpType & ActionType.TYPE_PASS) == ActionType.TYPE_PASS) {

            if (MJModel.isMyPlayer(seatid) && seatid == out_seatid && this.room_Card.isDuoPai(0))//如果是我自己摸的牌  自己过 则放开选牌功能
            {
                this.room_Info.showTime(MJModel.outCardTime);
                MJModel.cur_seat = seatid;
                this.myselfOpenOutCard(true);
            }

            return;
        }

        var needRemoveOutCard = false;
        var needOpenOutCard = false;
        if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
            var ok = this.room_Card.addPengCard(pos, PengType.Peng_AnKang, card, out_pos, OpType, specialCard);
            if (!ok)return;
            this.room_Card.removeHandCard(pos, card, 4);
        }
        else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
            this.room_Card.addPengCard(pos, PengType.Peng_Peng, card, out_pos, OpType, specialCard);
            this.room_Card.removeHandCard(pos, card, 2);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
            var ok = this.room_Card.addPengCard(pos, PengType.Peng_Kang, card, out_pos, OpType, specialCard);
            if (!ok)return;
            this.room_Card.removeHandCard(pos, card, 3);
            needRemoveOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
            var ok = this.room_Card.changPengCard(pos, PengType.Peng_Kang, card, out_pos, OpType);
            if (!ok)return;
            this.room_Card.removeHandCard(pos, card, 1);
        }
        else if ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
            this.room_Card.addPengCard(pos, PengType.Chi_L, card, out_pos, OpType, specialCard);
            this.room_Card.removeHandCard(pos, card + 1, 1);
            this.room_Card.removeHandCard(pos, card + 2, 1);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
            this.room_Card.addPengCard(pos, PengType.Chi_M, card, out_pos, OpType, specialCard);
            this.room_Card.removeHandCard(pos, card - 1, 1);
            this.room_Card.removeHandCard(pos, card + 1, 1);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
            this.room_Card.addPengCard(pos, PengType.Chi_R, card, out_pos, OpType, specialCard);
            this.room_Card.removeHandCard(pos, card - 1, 1);
            this.room_Card.removeHandCard(pos, card - 2, 1);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
            this.room_Info.showDirectionTip(-1);
            this.room_Info.stopTime();
            MJModel.canTouchCard = false;
            //抢弯杠
            if ((OpType2 && OpType2 == 5)) {
                this.room_Card.changeWanGang(out_pos, PengType.Peng_Peng, card);
                if (this.room_Card.isDuoPai(out_pos)) this.room_Card.removeHandCard(out_pos, card, 1);
            }
            //抢直杠
            if ((OpType2 && OpType2 == 11)) {
                var ok = this.room_Card.changeZhiGang(out_pos, PengType.Peng_Peng, card);
                if (ok) {
                    this.room_Card.initMoCard(out_pos, (out_pos == 0 || MJModel.isOnVideo ) ? card : 0);
                    this.room_Card.initMoCard(out_pos, (out_pos == 0 || MJModel.isOnVideo ) ? card : 0);
                    this.room_Card.initMoCard(out_pos, (out_pos == 0 || MJModel.isOnVideo ) ? card : 0);
                    this.room_Card.reflashHandCard(out_pos, true, false);
                }
            }

            if ((OpType2 && OpType2 == 5) || (OpType2 && OpType2 == 11)) {
                //避免双抢杠的时候 会出两次牌
                if (this.room_Card.out_card[out_pos].length == 0 || this.room_Card.out_card[out_pos][this.room_Card.out_card[out_pos].length - 1].getValue() != card) {
                    this.room_Card.addOutCard(out_pos, card);
                }
            }
        }

        if (MJModel.isMyPlayer(seatid)) {
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            MJModel.isAutoOutCard = false;
            this.room_Card.setAutoOutCard(false);
        }

        if (needRemoveOutCard) {
            MJModel.cur_seat = seatid;
            var isok = this.room_Card.removeOutCard(out_pos, card, canDelay);
            this.room_Card.setCurCardTip(false);
            if (isok == false) {
                try {
                    ERROR(this, "removeOutCard error card:" + card + "lastoutcard:" + this.room_Card.out_card[out_pos][this.room_Card.out_card[out_pos].length - 1].getValue());
                } catch (e) {
                    ERROR(this, "needRemoveOutCard" + e);
                }
                this.reConnect("", false);
            }
        }

        if (needOpenOutCard) {
            this.room_Info.showDirectionTip(pos);
            if (MJModel.isMyPlayer(seatid)) {
                this.myselfOpenOutCard();
            }
        }

        var player = MJModel.players[seatid];
        if (player && canDelay) {

            var effect = "gang";
            if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                var zimo = this.room_Card.isDuoPai(pos);
                effect = "hu";
                if (zimo) {
                    effect = "zimo";
                }

                if (OpType2 == 5 || OpType2 == 11) {
                    effect = "qiangganghu";
                }
            }
            else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                effect = "peng";
            }
            else if ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI || (OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                effect = "chi";
            }

            this.handler_op_sound(pos, player.sex, OpType, OpType2, effect);
            this.handler_op_effect(pos, out_pos, player.sex, OpType, OpType2, effect);
        }
    },

    _setGameType: function () {
        var pkg_id = 1;
        var play_id = [];
        //甩字胡不可炮胡
        play_id.push(MJModel.base_money + "分底");

        if (MJModel.RoomConfigID.indexOf(1220001) != -1) {
            play_id.push("混五清十");
        }
        if (MJModel.RoomConfigID.indexOf(1220002) != -1) {
            play_id.push("混十清二十");
        }
        if (MJModel.RoomConfigID.indexOf(1221001) != -1) {
            play_id.push("一摸二冲");
        }
        if (MJModel.RoomConfigID.indexOf(1221002) != -1) {
            play_id.push("硬二花");
        }

        if (MJModel.RoomConfigID.indexOf(1221003) != -1) {
            play_id.push("硬三花");
        }

        if (MJModel.RoomConfigID.indexOf(1221004) != -1) {
            play_id.push("硬五花");
        }
        MJModel.play_id_str = play_id;

        var gameDes = "";
        for (var i = 0; i < play_id.length; i++) {
            gameDes += play_id[i];
            if (i != play_id.length - 1) {
                gameDes += " ";
            }
        }
        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);

        MJModel.ConfigStr = gameDes;
        cc.log("lin=MJModel.ConfigStr="+MJModel.ConfigStr);
        var size = cc.director.getWinSize();
        var allL = 0;
        var allPlayId = [];
        for (var i = 0; i < MJModel.play_id_str.length; i++) {
            // var _gameType_sp = new cc.Sprite(__String.createWithFormat(getResPath("hanchuan/flag/playid%1.png"), play_id[i]));
            cc.log("lin=MJModel.ConfigStr1="+MJModel.play_id_str[i]);
            var _gameType_sp = new cc.LabelTTF(MJModel.play_id_str[i], "Arial", 22);
            _gameType_sp.setColor(cc.color(0x10, 0x35, 0x38));
            _gameType_sp.setAnchorPoint(cc.p(0.5, 0));
            //MJModel.mj_ui.rootNode.getChildByName("roomConfig").addChild(_gameType_sp, 0);
            allL += _gameType_sp.getContentSize().width + 10;
            allPlayId.push(_gameType_sp);
        }
        var curP = 0;
        for (var i = 0; i < MJModel.play_id_str.length; i++) {
            var _gameType_sp = allPlayId[i];
            _gameType_sp.setPosition(cc.p(size.width / 2 - allL / 2 + curP + _gameType_sp.getContentSize().width / 2, size.height / 2 + 210));
            curP += _gameType_sp.getContentSize().width + 10;
        }
    },

    resetGame: function (allClean) {
        this._super(allClean);
        this._huaCards = [[], [], [], []];
    },
    handler_server_scene_info_uc: function (hubei_scene, canDelay) {
        var ackGameFree = hubei_scene.GameSence;
        var flowerCards = hubei_scene.flowerCards;
        if (flowerCards) {
            for (var j = 0; j < flowerCards.length; j++) {
                var cards = flowerCards[j].cards;
                for (var i in cards) {
                    this._huaCards[j].push(cards[i]);
                    var pos = MJModel.getPosBySeatid(j);
                    this.room_Card.addOutCard(pos, cards[i]);
                }
            }
        }
        if (ackGameFree.RoomConfigID.indexOf(1366002) != -1) {
            MJModel.take_in = MJModel.take_in - 20 * ackGameFree.basescore;
        }
        this._super(ackGameFree, canDelay);

        this._setGameType();

    },
    handler_out_card_sound: function (sex, card) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("yangzhong/sound/chupai/%1_%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", Utils.toHex2(card)));
        } else {
            this._super(sex, card);
        }
    },

    handler_op_sound: function (pos, sex, OpType, OpType2, effect) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
            if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU && effect == "") {
                var zimo = this.room_Card.isDuoPai(pos);
                effect = "hu";
                if (zimo) {
                    effect = "zimo";
                }
            } else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                effect = "peng";
            }
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("yangzhong/sound/operator/%1_%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", effect));
        } else {
            this._super(pos, sex, OpType, OpType2, effect);
        }
    },

    handlerAutoUpTableReady: function (nums, selfIsReady) {
        if (MJModel.seatid == -1 && nums < 4) {
            this.actionCallBack("uptable");
        }
        else if (selfIsReady == false) {
            if (MJModel.canQuxiaoZhun()) {
                if (MJModel.roomState != 0) this.actionCallBack("ready");
            }
        }
    },

    isjieshan: false,
    handler_server_end_room_result_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.AckDisbandResult", data);
        if (this.room_EndTouPiao) this.room_EndTouPiao.removeFromParent(true);
        this.room_EndTouPiao = null;
        MJModel.TouPiaoING = false;
        var result = jpacket.Result;
        if (result == 1) {
            PlatformHelper.showToast("房间解散成功，3秒后房间自动结束");
            this.isjieshan = true;
        }
        else {
            PlatformHelper.showToast("解散失败，稍后游戏继续！");
        }
    },

    handler_game_time_over_bc: function (data, canDelay) {
        if (this.isjieshan)MJModel.state = MJ_STATUS.MJ_GAME_FREE;
        this.startTimeEnd();
        // PlatformHelper.showToast("服务器通知房间结束！");
    },

    handler_op_effect: function (pos, out_pos, sex, OpType, OpType2, effect) {
        this.room_Tip.showEffect(pos, OpType, this.room_Card.isDuoPai(pos));

        // this.room_Tip.showSimpleEffect(pos, out_pos, OpType, effect);
    },
});

var MJResult_XinYu = MJCommonResult.extend({
    updateContentView: function (ackGameEndJS) {
        this.ackGameEnd = ackGameEndJS.gameend;
        this.ackGameEndJS = ackGameEndJS;
        //输赢标志
        var seatId = MJModel.seatid;
        var score = this.ackGameEnd.Score[seatId];
        var effectName = "lose";
        if (score > 0) {
            effectName = "win";
        }
        this._win_effect(effectName);

        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);

        var itemHeight = 120;

        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;

            var countY = m;

            if (MJModel.mj_roomType == 1) {
                if (pos == 2) {
                    continue;
                }
            }

            if (MJModel.mj_roomType == 2) {
                if (pos == 1 || pos == 3) {
                    continue;
                }

                if (pos == 0) {
                    countY = 1;
                } else if (pos == 2) {
                    countY = 2;
                }
            }

            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 495 - count * itemHeight;
            var startX = 40;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX + 60, startY + 55));
            this.bgSpr.addChild(headLayer, 10);

            //上排牌 杠
            var ganghuLayer = this.createGangHuLayer(seatid);
            this.bgSpr.addChild(ganghuLayer, 10);
            ganghuLayer.setPosition(cc.p(startX + 230, startY + 65));

            //下排牌
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX + 0, startY));
            this.bgSpr.addChild(handCardLayer);

            // this.createSpecialHuTip(startX + 785, startY + 40, seatid);
            this.createSpecialHuTip(startX + 900, startY + 40, seatid);

            // 输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX + 1100, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            //中马列表
            var maLayer = this.createMaLayer(seatid);
            if (maLayer) {
                maLayer.setPosition(cc.p(startX + 845, startY + 85));
                this.bgSpr.addChild(maLayer);
            }
            count++;
        }
    },

    createGangHuLayer: function (seatid) {
        var layer = new cc.Layer();
        var x = 0;
        var y = 0;
        var sxendInfo = this.ackGameEndJS;
        if (this.ackGameEnd.EndGangInfo.length > seatid) {
            var gameEndInfo = this.ackGameEnd.EndGangInfo[seatid];
            var map = {};
            for (var i = 0; i < gameEndInfo.Gang.length; i++) {
                var gang = gameEndInfo.Gang[i];
                if (map[gang.GangType] == undefined) {
                    map[gang.GangType] = [];
                }
                map[gang.GangType].push(gang.GangCard);
            }
            for (var key in map) {
                if (!map.hasOwnProperty(key))continue;
                var a = key;
                var typeLabel = new cc.LabelTTF(this.getStringByType(a), "Arial", 20);
                typeLabel.setColor(this.leftColor);
                typeLabel.setAnchorPoint(cc.p(0, 0));
                typeLabel.setPosition(cc.p(x, y + 10));
                layer.addChild(typeLabel);

                x += typeLabel.getContentSize().width;

                var temp = map[key];
                for (var j = 0; j < temp.length; j++) {
                    var smallCard = null;
                    var c = Utils.toHex2(temp[j]);
                    smallCard = new cc.Sprite(__String.createWithFormat(getResPath("yangzhong/smallCard/%1.png"), c));
                    if (smallCard != undefined) {
                        smallCard.setAnchorPoint(cc.p(0.0, 0.0));
                        smallCard.setPosition(cc.p(x, y));
                        layer.addChild(smallCard);
                    }
                    x += 28;
                    if (j == temp.length - 1) {
                        x += 20;
                    }
                }
            }
        }
        x += 10;
        //杠牌分
        var gangScore = this.ackGameEnd.EndGangInfo[seatid].TotalGangScore;
        cc.log("ningjiebiaogangScore" + gangScore);
        if (gangScore) {
            var txt = "杠牌分 +";
            if (gangScore < 0) {
                txt = "杠牌分 ";
            }
            var gangfen = new cc.LabelTTF(txt + gangScore, "Arial", 20);
            gangfen.setColor(this.leftColor);
            gangfen.setAnchorPoint(cc.p(0, 0));
            gangfen.setPosition(cc.p(x, y + 10));
            layer.addChild(gangfen);
            x += gangfen.getContentSize().width + 10;
        }
        x += 10;
        var fengpengScore = sxendInfo.fengpengfen[seatid];
        cc.log("ningjiebiaogangScore" + fengpengScore);
        if (this.ackGameEnd.faninfo[seatid].hucard && this.ackGameEnd.faninfo[seatid].hucard != 255) {
            if (fengpengScore) {
                var txt = "风碰分 +";
                if (fengpengScore < 0) {
                    txt = "风碰分 ";
                }
                var fengpengfen = new cc.LabelTTF(txt + fengpengScore, "Arial", 20);
                fengpengfen.setColor(this.leftColor);
                fengpengfen.setAnchorPoint(cc.p(0, 0));
                fengpengfen.setPosition(cc.p(x, y + 10));
                layer.addChild(fengpengfen);
                x += fengpengfen.getContentSize().width + 10;
            }
        }

        x += 10;
        var menfengpengScore = sxendInfo.menfengpengfen[seatid];
        cc.log("ningjiebiaogangScore" + menfengpengScore);
        if (this.ackGameEnd.faninfo[seatid].hucard && this.ackGameEnd.faninfo[seatid].hucard != 255) {
            if (menfengpengScore) {
                var txt = "门风碰分 +";
                if (menfengpengScore < 0) {
                    txt = "门风碰分 ";
                }
                var menfengpengfen = new cc.LabelTTF(txt + menfengpengScore, "Arial", 20);
                menfengpengfen.setColor(this.leftColor);
                menfengpengfen.setAnchorPoint(cc.p(0, 0));
                menfengpengfen.setPosition(cc.p(x, y + 10));
                layer.addChild(menfengpengfen);
                x += menfengpengfen.getContentSize().width + 10;
            }
        }

        x += 10;
        var huacardplayer = sxendInfo.flowerCards;
        var huacardnum = 0;
        if (huacardplayer) {
            var huacardsss = huacardplayer[seatid].cards;
            for (var i = 0; i < huacardsss.length; i++) {
                huacardnum++;
            }
        }
        if (this.ackGameEnd.faninfo[seatid].hucard && this.ackGameEnd.faninfo[seatid].hucard != 255) {
            if (huacardnum != -1) {
                var txt = "花分  +";
                if (huacardnum < 0) {
                    txt = "花分  ";
                }
                if(huacardnum > 0) {
                    var huacardnumnum = new cc.LabelTTF(txt + huacardnum, "Arial", 20);
                    huacardnumnum.setColor(this.leftColor);
                    huacardnumnum.setAnchorPoint(cc.p(0, 0));
                    huacardnumnum.setPosition(cc.p(x, y + 10));
                    layer.addChild(huacardnumnum);
                    x += huacardnumnum.getContentSize().width + 10;
                }
            }
        }

        var addfan = this.ackGameEnd.faninfo[seatid].addfan;
        if (addfan) {
            for (var i = 0; i < addfan.length; i++) {
                if (AddFanType[addfan[i].AddType]) {
                    var fanType = new cc.LabelTTF(AddFanType[addfan[i].AddType], "Arial", 20);
                    fanType.setColor(this.leftColor);
                    fanType.setAnchorPoint(cc.p(0, 0));
                    fanType.setPosition(cc.p(x, y + 10));
                    layer.addChild(fanType);
                    x += fanType.getContentSize().width + 10;
                }
            }
        }

        var str = MJModel.ConfigStr;
        var size = cc.director.getWinSize();
        var _gameType_sp = new cc.LabelTTF(str, "Arial", 23);
        _gameType_sp.setColor(cc.color("#A3BD4F"));
        _gameType_sp.setAnchorPoint(cc.p(0.5, 0.5));
        _gameType_sp.setPosition(cc.p(size.width / 7, 50));
        this.addChild(_gameType_sp);
        return layer;
    },

    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var path = "";
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5天和 6地和 7抢杠胡 8杠上开花 9花上添花
            switch (fanInfo.SpecialType) {
                case 1:
                    path = "RoomMJ/result2/zi_mo_icon.png";
                    break;
                case 2:
                    path = "RoomMJ/result2/pao_hu_icon.png";
                    break;
                case 3:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                case 5:
                    path = "RoomMJ/result2/qiang_gang_icon.png";
                    break;
                case 7:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                default:
                    break;
            }
            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setPosition(cc.p(startX, startY));
                this.bgSpr.addChild(typeSprite);

            }
        }
    },
    //输赢分
    createScoreLayer: function (seatid) {
        var layer = new cc.Layer();
        var score = 0;
        if (this.ackGameEnd.Score && this.ackGameEnd.Score.length > seatid) score = this.ackGameEnd.Score[seatid];
        var width = 0;
        var path = getResPath("RoomMJ/result2/result_small_label_lose.png");
        if (score > 0) {
            path = getResPath("RoomMJ/result2/result_small_label_win.png");
        }
        var scoredes = ":";
        if (score == 0) scoredes = "";
        var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), path, 29, 37, '0');

        scoreLabel.setAnchorPoint(cc.p(0.0, 0.5));

        scoreLabel.setPosition(cc.p(width, 15));
        scoreLabel.setName("scoreLabel");
        layer.addChild(scoreLabel);

        if (Math.abs(score) >= 10000) {
            scoreLabel.setScale(0.8);
        }
        return layer;
    },
    getStringByType: function (stype) {
        var type = Number(stype);
        var str = "";
        switch (type) {
            case 2:
                str = "明杠";
                break;
            case 4:
                str = "明杠";
                break;
            case 8:
                str = "暗杠";
                break;
            case 16:
                str = "被明杠";
                break;
            case 32:
                str = "被放杠";
                break;
            case 64:
                str = "放杠";
                break;
            case 128:
                str = "被暗杠";
                break;
            default:
                break;
        }
        return str;
    },
});

