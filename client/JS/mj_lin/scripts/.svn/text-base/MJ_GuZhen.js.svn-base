loadProtoFile("proto/guzhengameproto.proto");

var GameActionType =
{
    TYPE_BAO_TING: 0x4000,//报听
    TYPE_BAO_YING: 0x8000,//报应
};

var HuType = {
    HU_INVALID: 0,
    HU_ZIMO: 1,
    HU_PAOHU: 2,
    HU_HeiMo: 2,
    Hu_RuanMo: 1,
    HU_DIANPAO: 3,
    HU_BEIZIMO: 4,
    HU_QIANG_GANG: 5,
    HU_BEI_QIANG_GANG: 6,
    HU_YI_PAO_DUO_XIANG: 7,
    HU_GANG_SHANG_HUA: 8,
    HU_GANG_HOU_PAO: 9,
};

var AddFanType = {
    GZ_FAN_TYPE_TIANHU: 0,			//天胡
    GZ_FAN_TYPE_BAOYING: 1,			//报应
    GZ_FAN_TYPE_TINGPAI: 2,			//听牌
    GZ_FAN_TYPE_QIDUI: 3,		    //七对
    GZ_FAN_TYPE_DALUAN: 4,			//大乱
    GZ_FAN_TYPE_WUHUAGUO: 5,		//无花果
    GZ_FAN_TYPE_PINGHU: 6,		    //平胡
    GZ_FAN_TYPE_ZI: 7,		        //三字牌
};

var AddFanTypeArray = {
    0: "天胡",
    1: "报应",
    2: "听牌",
    3: "七对",
    4: "大乱",
    5: "无花果",
    6: "平胡",
    7: "三字牌",
};

var selfCMD = {
    SERVER_BUHUA: 5009, //补花
};

var MJTable_GuZhen = MJTable.extend({
    tag: "MJTable_LianHuaGM",
    _curLaizi: -1,
    _curLaizipi: -1,
    _curLaizipi2: -1,
    _curLaizi_bg: null,
    _huaCards: [],
    isRecordShow: false,
    _pkg_id: 0,
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        MJModel.mj_suport_fangyan = 0;
        MJModel.outCardEffect_style = 1;

        MJModel.mj_bg_use = 1;
        MJModel.mj_suport_change_bg = 1;
        MJModel.toupiaoTipsType = 1;
        // MJModel.chi_layout = 3;
        MJModel.mj_touch_tip = 1;
        MJModel.isOutCard = true;
        MJModel.mj_chat_style = 5;
        MJModel.mj_public_style = 1;
        MJModel.mj_card_lib_type = 1;

        MJModel.mj_gps_type = 1;

        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];
            if (this._pkg_id == 2855 || this._pkg_id == 2779) {
                MJModel.mj_roomType = 2;
            } else if (this._pkg_id == 2854 || this._pkg_id == 2778) {
                MJModel.mj_roomType = 1;
            }
        } catch (e) {
            Log(this, e);
        }

        try {
            var help = this.roomPublic.getChildByName("game_help");
            help.setVisible(false);
        } catch (e) {

        }
        this._init_extend();
        this._super();
        this._init_ui();
        this.preLoadCardConfig("guzhen/config/card_config_2ren.json");
        this.preLoadCardConfig("guzhen/config/card_config2d_2ren.json");
        this.preLoadCardConfig("guzhen/config/card_config.json");
        this.preLoadCardConfig("guzhen/config/card_config2d.json");
        // this.schedule(this.test, 1.0);
    },
    _init_ui: function () {
        var self = this;
        {
            var btn = new ccui.Button();
            btn.loadTextures(getResPath("guzhen/action/baoting1.png"), getResPath("guzhen/action/baoting1.png"), "");
            this.room_Action.actions["baoting"] = btn;
            btn.setName("baoting");
            btn.addClickEventListener(function (sender, evt) {
                self.room_Action.btnCallback(sender);
            });
            btn.setVisible(false);
            this.room_Action.addChild(btn);
            this.room_Action.opBtns.push(btn);
        }

        {
            var btn = new ccui.Button();
            btn.loadTextures(getResPath("guzhen/action/baoying1.png"), getResPath("guzhen/action/baoying1.png"), "");
            this.room_Action.actions["baoying"] = btn;
            btn.setName("baoying");
            btn.addClickEventListener(function (sender, evt) {
                self.room_Action.btnCallback(sender);
            });
            btn.setVisible(false);
            this.room_Action.addChild(btn);
            this.room_Action.opBtns.push(btn);
        }
    },
    getMjTypePath: function () {
        if (MJModel.mj_roomType == 2) {
            return getResPath("guzhen/flag/pkgid2.png");
        } else if (MJModel.mj_roomType == 1) {
            return getResPath("guzhen/flag/pkgid3.png");
        }
        return getResPath("guzhen/flag/pkgid4.png");
    },

    loadCardConfig: function (path) {
        if (MJModel.mj_roomType == 2) {
            if(MJModel.mj_bg_use == 0){
                path = "guzhen/config/card_config_2ren.json";
            } else{
                path = "guzhen/config/card_config2d_2ren.json";
            }
        } else{
            if(MJModel.mj_bg_use == 0){
                path = "guzhen/config/card_config.json";
            } else{
                path = "guzhen/config/card_config2d.json";
            }
        }

        this._super(path);
    },

    isSupportPublicCard: function () {
        return false;
    },

    _init_extend: function () {
        var self_table = this;

        //湖北麻将不要自动胡牌功能
        MJAction.prototype.setAutoOutCardVis = function (value) {
        };

        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(false);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };

        var super_addOutCard = MJCards.prototype.addOutCard;
        MJCards.prototype.addOutCard = function (pos, value, showPoint) {
            if (self_table._huaCards.indexOf(value) != -1) {
                return this.addHuCard(pos, value);
            } else {
                return super_addOutCard.call(this, pos, value, showPoint);
            }
        };

        var super_setOperator = MJAction.prototype.setOperator;
        MJAction.prototype.setOperator = function (operat) {
            this.removeChildByName("ChooseGang_selectLayer");
            if (operat != -1 && (operat & GameActionType.TYPE_BAO_TING) == GameActionType.TYPE_BAO_TING) {
                if (this.actions["baoting"]) {
                    this.actions["baoting"].setVisible(true);
                }
            }
            if (operat != -1 && (operat & GameActionType.TYPE_BAO_YING) == GameActionType.TYPE_BAO_YING) {
                if (this.actions["baoying"]) {
                    this.actions["baoying"].setVisible(true);
                }
            }

            super_setOperator.call(this, operat);
        };

        var super_btnCallback = MJAction.prototype.btnCallback;
        MJAction.prototype.btnCallback = function (ref) {
            var n = ref;
            var name = n.getName();
            Log(this, "btnCallback:" + name);
            if (name == "baoting") {
                this.setOperator(-1);
                MJModel.isLiangPai = 1;
                MJModel.mj_lockcard_type = 1;
                self_table.myselfOpenOutCard();
                self_table.room_Card.setSomeCardClickState();
                return;
            } else if (name == "baoying") {
                this.setOperator(-1);
                MJModel.isLiangPai = 2;
                MJModel.mj_lockcard_type = 1;
                self_table.myselfOpenOutCard();
                self_table.room_Card.setSomeCardClickState();
                return;
            }
            super_btnCallback.call(this, ref);
        };

        MJPlayer.prototype.setLiangPaiVisible = function (v, type) {
            if (!this.liangpai_flag) {
                this.liangpai_flag = new cc.Sprite(getResPath("guzhen/flag/ting.png"));
                this.liangpai_flag.setVisible(false);
                if (this.pid == 1) {
                    this.liangpai_flag.setPosition(cc.p(0, 30));
                }
                else {
                    this.liangpai_flag.setPosition(cc.p(this.m_size.width, 30));
                }
                this.addChild(this.liangpai_flag, 1);
            }
            if (this.liangpai_flag) {
                this.liangpai_flag.setVisible(v);
                if (type && type == 1) {
                    this.liangpai_flag.setTexture(getResPath("guzhen/flag/baoting.png"));
                }
                if (type && type == 2) {
                    this.liangpai_flag.setTexture(getResPath("guzhen/flag/baoying.png"));
                }
            }
        };
        var superreset = MJPlayer.prototype.reset;
        MJPlayer.prototype.reset = function (allClean, isGameStart) {
            superreset.call(this);
            this.setLiangPaiVisible(false);
        };

        MJCards.prototype.setSomeCardClickState = function () {
            if (MJModel.mj_lockcard_type == 1) {
                var listen_cards = [];
                for (var i = 0; i < MJModel.listen_info.length; i++) {
                    var lsi = MJModel.listen_info[i];
                    listen_cards.push(lsi.OutCard);
                }

                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    if (listen_cards.indexOf(card.getValue()) == -1) {
                        card.setBlackVis(true);
                        card.setCardTouchEnable(false);
                    }
                }
            } else if (MJModel.mj_lockcard_type == 2) {
                if (this.isDuoPai(0) == false) return;
                for (var i = 0; i < this.hand_card[0].length - 1; i++) {
                    var card = this.hand_card[0][i];
                    card.setBlackVis(true);
                    card.setCardTouchEnable(false);
                }
            } else {
                if (this.isDuoPai(0) == false) return;
                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    if (self_table._huaCards.indexOf(card.getValue()) != -1) {
                        card.setBlackVis(true);
                        card.setCardTouchEnable(false);
                    } else {
                        card.setBlackVis(false);
                        card.setCardTouchEnable(true);
                    }
                }
            }
        };

        MJConfig.getHuCardPos = function (pos, index) {
            index = index%20;
            if((pos == 1 || pos == 3) && MJModel.mj_bg_use == 1 && MJModel.mj_paiban == "vertical"){
                return this.getWorldPosition("hu_v_" + pos , "h_" + index);

            }else {
                return this.getWorldPosition("hu_" + pos , "h_" + index);
            }
        };

        MJConfig.getHuCardOrder = function (pos, index) {
            index = index%20;
            if(MJModel.mj_bg_use == 0){
                var order = [
                    [
                        30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
                    ],
                    [
                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
                    ],
                    [
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    ],
                    [
                        19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                    ],
                ];
                return order[pos][index];
            }else {
                if (MJModel.mj_paiban == "vertical") {
                    var order = [
                        [
                            100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
                        ],
                        [
                            15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 1, 2, 3,
                        ],
                        [
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        ],
                        [
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
                        ],
                    ];
                    return order[pos][index];
                } else {
                    var order = [
                        [
                            100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
                        ],
                        [
                            19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                        ],
                        [
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                        ],
                        [
                            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
                        ],
                    ];
                    return order[pos][index];
                }
            }
        };

    },

    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.guzhenmj.tagCurGameScence", jpacket);
            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.guzhenmj.AckCurGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
            return;
        }

        //花牌
        if (cmd == CMD.SERVER_LAIZI_BC) {
            this.handler_server_huapai_bc(jpacket, canDelay);
        }

        if (cmd == selfCMD.SERVER_BUHUA) {
            this.handler_server_buhua_bc(jpacket, canDelay);
            return;
        }
        this._super(cmd, jpacket, canDelay, svrid);
    },

    handler_server_huapai_bc: function (data, canDelay) {
        var packet = parsePacket("proto.game.guzhenmj.AckHuaCard", data);
        if (packet.card.length > 0) {
            this._huaCards = packet.card;
        }
    },

    handler_server_buhua_bc: function (data, canDelay) {
        var packet = parsePacket("proto.game.guzhenmj.AckBuHua", data);
        var buhuaData = packet.buhua;
        if (!buhuaData) return;
        var seatId = buhuaData.chairid;
        var outcard = buhuaData.hua;
        var incard = buhuaData.getcard;

        var pos = MJModel.getPosBySeatid(seatId);
        this.room_Card.removePublicCardByNums(incard.length, false);
        if (canDelay == false) {
            for (var i = 0; i < outcard.length; i++) {
                this.room_Card.addOutCard(pos, outcard[i]);
                this.room_Card.removeHandCard(pos, outcard[i]);
            }
            for (var i = 0; i < incard.length; i++) {
                this.room_Card.addHandCard(pos, incard[i]);
            }
            this.room_Card.reflashHandCard(pos, true, false, true);
            return;
        }

        for (var i = 0; i < outcard.length; i++) {
            this.room_Card.addOutCard(pos, outcard[i]);
            if (MJModel.isMyPlayer(seatId) || MJModel.isOnVideo)this.room_Card.removeHandCard(pos, outcard[i]);
        }

        if (MJModel.isMyPlayer(seatId) || MJModel.isOnVideo) {
            for (var i = 0; i < incard.length; i++) {
                this.room_Card.initMoCard(pos, incard[i]);
            }
            var mo_card = null;
            if (this.room_Card.isDuoPai(0)) {
                mo_card = this.room_Card.hand_card[0][this.room_Card.hand_card[0].length - 1];
                this.room_Card.hand_card[0].splice(this.room_Card.hand_card[0].length - 1, 1);
            }
            this.room_Card.reflashHandCard(pos, true, false, true);
            if (mo_card) {
                mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                this.room_Card.hand_card[0].push(mo_card);
                MJModel.mj_mo_cards[pos] = mo_card.getValue();
            }
        }
        this._ShowEffect("buhua", pos);
        var player = MJModel.players[seatId];
        Sound.getInstance().playEffect(__String.createWithFormat(getResPath("guzhen/sound/buhua/%1_buhua.mp3"), player.sex == SEX_ID.SEX_FEMALE ? "w" : "m"));
        MJModel.isEnterWait = true;
        var self = this;
        var callback = cc.callFunc(function () {
            MJModel.isEnterWait = false;
        });
        this.runAction(cc.sequence(cc.delayTime(1), callback));
    },

    _ShowEffect: function (name, pos) {
        try {
            var begin = MJConfig.getOperatorTipPos(pos);
            var armature = null;
            var effect_name = "";
            if (name == "buhua") {
                effect_name = "effects_mjxxbuhuax";
                ccs.armatureDataManager.addArmatureFileInfo(getResPath("guzhen/effect/buhua/effects_mjxxbuhuax.ExportJson"));
            }
            armature = new ccs.Armature(effect_name);
            if (armature != null) {
                var animation = armature.getAnimation();
                if (animation) {
                    if (typeof animation.playWithIndex === "function") {
                        animation.playWithIndex(0);

                        armature.setPosition(begin);
                        this.room_Tip.addChild(armature, 10000);
                    }
                }
                armature.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
            }
            // Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
        } catch (e) {
            Log(this, e);
        }
    },

    _setGameType: function () {
        var pkg_id = 1;
        var play_id = [];
        //甩字胡不可炮胡
        // play_id.push(MJModel.base_money + "分底");
        if (MJModel.RoomConfigID.indexOf(1203001) != -1) {
            play_id.push("自摸不加花");
        }
        if (MJModel.RoomConfigID.indexOf(1203002) != -1) {
            play_id.push("自摸加1花");
        }
        if (MJModel.RoomConfigID.indexOf(1203003) != -1) {
            play_id.push("自摸加2花");
        }

        if (MJModel.RoomConfigID.indexOf(1204001) != -1) {
            play_id.push("无花果");
        }
        if (MJModel.RoomConfigID.indexOf(1204002) != -1) {
            play_id.push("中发白是花");
        }
        if (MJModel.RoomConfigID.indexOf(1204003) != -1) {
            play_id.push("带花");
        }

        MJModel.play_id_str = play_id;

        var gameDes = "";
        for (var i = 0; i < play_id.length; i++) {
            gameDes += play_id[i];
            if (i != play_id.length - 1) {
                gameDes += " ";
            }
        }
        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);
        // this._setFastChat();
    },
    fastChat3: [
        "各位老板老板娘好",
        "快滴啊打撒，嘛区闹",
        "让我稍微想下子",
        "小心滴啊，我听牌了，别出纵",
        "我滴个乖乖，又自摸了",
        "你这个牌打滴太夯了，直接要喊你师父",
        "别吵别吵，专心打牌",
        "啊呦歪，你们两个打联子闹",
        "打滴什么牌哎，会打牌啊",
        "对不住啊，刚才接了个电话，继续继续",
        "不好意思不好意思，一打牌事就来了，嘛就到",
        "咦，怎么又断线了，网络怎么那么差",
    ],
    _setFastChat: function () {
        var chatList = [];
        chatList = this.fastChat3;
        MJModel.mj_fastChat = this.fastChat3;
        var self = this;
        Utils.getFastChatSound = function (chat, sex) {
            for (var i = 0; i < chatList.length; i++) {
                if (chatList[i] == chat) {
                    return getResPath(__String.createWithFormat("yangzhou/sound/fastchat/%1_%2.mp3", sex == SEX_ID.SEX_MAN ? "m" : "w", i + 1));
                }
            }
            return "";
        };
    },

    handler_server_scene_info_uc: function (hubei_scene, canDelay) {
        var ackGameFree = hubei_scene.GameSence;
        var huacard = hubei_scene.huacard;
        if (huacard) {
            var cards = huacard.card;
            for (var i in cards) {
                this._huaCards.push(cards[i]);
            }
        }

        var baoting = hubei_scene.State;
        for (var i = 0; i < baoting.length; i++) {
            if (baoting[i] == 1 || baoting[i] == 2) {
                var pos = MJModel.getPosBySeatid(i);
                this.players[pos].setLiangPaiVisible(true, baoting[i]);
                if (MJModel.isMyPlayer(i)) {
                    MJModel.mj_lockcard_type = 2;
                }
            }
        }

        this._super(ackGameFree, canDelay);
        this._setGameType();
    },

    myselfOpenOutCard: function (IsMoCard, showTip) {
        this._super(IsMoCard, showTip);
        this.checkAutoOutCard();
    },
    checkAutoOutCard: function () {
        if (MJModel.isMyPlayer(MJModel.cur_seat) && this.room_Card.isDuoPai(0) && MJModel.mj_lockcard_type == 2) {
            this.autoOutCard();
        }
    },
    autoOutCard: function () {
        this.schedule(this.autoOutCardTimeOut, 0.5);
    },
    autoOutCardTimeOut: function (dt) {
        if (MJModel.TouPiaoING == true) return;//投票期间 该功能不起作用
        this.unschedule(this.autoOutCardTimeOut);
        var operate = MJModel.curOperate;
        if (( operate & ActionType.TYPE_LISTEN) == ActionType.TYPE_LISTEN) {
            operate = operate - ActionType.TYPE_LISTEN;
        }

        if (operate > 0) {
            return;
        }
        sendOutCard(MJModel.curOperateCard);
    },

    handler_server_out_card_bc: function (data, canDelay) {
        this._super(data, canDelay);
        var userOutCard = parsePacket("proto.game.AckUserOutCard", data);
        var seatId = userOutCard.ChairID;
        var da_type = userOutCard.da_type;
        var card = userOutCard.Card;
        var pos = MJModel.getPosBySeatid(seatId);
        if (da_type == 1 || da_type == 2) {
            //报听
            if (MJModel.isMyPlayer(seatId)) {
                MJModel.mj_lockcard_type = 2;
            }
            this.players[pos].setLiangPaiVisible(true, da_type);
            var player = MJModel.players[seatId];
            if (player && canDelay) {
                // this.room_Tip.showSimpleEffect(pos, pos, GameActionType.TYPE_BAOTING, "baoting");
                Sound.getInstance().playEffect(__String.createWithFormat(getResPath("guzhen/sound/operator/%1_%2.mp3"), player.sex == SEX_ID.SEX_FEMALE ? "w" : "m", "ting"));

            }
        }

        if (this._huaCards.indexOf(card) != -1) {
            this._ShowEffect("buhua", pos);
            var player = MJModel.players[seatId];
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("guzhen/sound/buhua/%1_buhua.mp3"), player.sex == SEX_ID.SEX_FEMALE ? "w" : "m"));
        }
    },

    resetGame: function (allClean) {
        this._super(allClean);
        this._huaCards = [];
    },

    handler_server_game_end_bc: function (hubeiGameend, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            var ackGameEnd = hubeiGameend.gameend;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);
            this.room_Info.stopTime();
            this.room_Tip.hideOutCardTip();

            var show_all_handcard = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var show_liuju = cc.callFunc(function () {
                if (ackGameEnd.EndState == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
            });

            var show_end_score = cc.callFunc(function () {
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var update_all_money = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var game_end_reset = cc.callFunc(function () {
                if (ackGameEnd.EndState == 1) {
                    self.room_Action.setReady2Visible(true);
                    return;
                }
                self.room_Action.setReady2Visible(false);
                try {
                    var result = new GuZhenJResult();
                    result.updateContentView(hubeiGameend);
                    result.setName("reset_remove");
                    self.addChild(result, 100000);
                } catch (e) {
                    self.room_Action.setReady2Visible(true);
                }
            });

            var show_all_public_card = cc.callFunc(function () {
                self.gameend_showAllPublicCard(ackGameEnd);
            });

            if (MJModel.isOnVideo && canDelay == false) {
                this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(2), update_all_money));
                return;
            }

            this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(1), show_liuju, cc.delayTime(ackGameEnd.EndState == 1 ? 1 : 0), show_end_score, cc.delayTime(0), update_all_money, cc.delayTime(1), game_end_reset));
        } catch (e) {
            ERROR(this, "handler_server_game_end_bc" + e);
        }
    },

    timeEnd: function (dt) {

        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    },

    _handler_game_record: function (data, canDelay) {
        //-----新总结算界面
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var pkgId = this._pkg_id;
        var gameType = "固镇麻将";

        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];
        gameType += " · " + MJModel.base_money + "分底";

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        //var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;

        var max_score = 0;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            if (recoreInfo.totalscore > max_score) {
                max_score = recoreInfo.totalscore;
            }
        }

        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            //var playerRecord = totalRecord.player_records[i];
            var player = MJModel.players[i];
            var arrStr = [];
            //次数
            var arrcount = [];

            arrStr = ["坐庄次数", "胡牌次数", "点炮次数", "杠牌次数"];
            arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.Ex1, recoreInfo.GangTimes];

            if (player && player.uid != -1 && player.uid != 0) {
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var isWin = false;
                if (max_score > 0 && recoreInfo.totalscore == max_score) {
                    isWin = true;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, isWin, _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner, recoreInfo.dissState);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }
        }
        bigResult.refresh(PlayerNumber);
        this.release();
    },

    test: function (dt) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;
        if (tempCount == 5 && true) {

            var cardlist = [3, 4, 5, 5, 7, 8, 9, 18, 18, 21, 35, 37, 22, 3, 4, 5, 5, 7, 8, 9, 18, 18, 21, 35, 37, 22, 3, 4, 5, 5, 7, 8, 9, 18, 18, 21, 35, 37, 22, 3, 4, 5, 5, 7, 8, 9, 18, 18, 21, 35, 37, 22];
            // this.room_Card.initOutCard(0, cardlist);
            // this.room_Card.initOutCard(1, cardlist);
            // this.room_Card.initOutCard(2, cardlist);
            // this.room_Card.initOutCard(3, cardlist);

            var list = [3, 4, 5, 5, 7, 8, 9, 18, 18, 21, 35, 37, 22, 3, 4, 5, 5, 7, 8, 9];
            // this.room_Card.initHuCard(0, list);
            // this.room_Card.initHuCard(1, list);
            // this.room_Card.initHuCard(2, list);
            // this.room_Card.initHuCard(3, list);

            // this.room_Card.addOutCard(0, 65);
            // this.room_Card.addOutCard(1, 65);
            // this.room_Card.addOutCard(2, 65);
            // this.room_Card.addOutCard(3, 65);
            // this.room_Card.addOutCard(0, 65);
            // this.room_Card.addOutCard(1, 65);
            // this.room_Card.addOutCard(2, 65);
            // this.room_Card.addOutCard(3, 65);


            // return;
            var packet = {
                "gameend": {
                    "UserCard": [{
                        "ChangeableCardsLen": 7,
                        "ChangeableCards": [3, 4, 36, 38, 38, 39, 41],
                        "FixedCardsLen": 2,
                        "stFixedCards": [{
                            "CardData": 65,
                            "state": 1,
                            "chairID": 1,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 1, "state": 64, "chairID": 3, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 8,
                        "ChangeableCards": [5, 5, 7, 8, 9, 33, 34, 35],
                        "FixedCardsLen": 2,
                        "stFixedCards": [{
                            "CardData": 21,
                            "state": 2,
                            "chairID": 3,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 9, "state": 1, "chairID": 2, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 7,
                        "ChangeableCards": [4, 8, 8, 22, 23, 37, 39],
                        "FixedCardsLen": 2,
                        "stFixedCards": [{
                            "CardData": 24,
                            "state": 1,
                            "chairID": 3,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 20, "state": 1, "chairID": 3, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 13,
                        "ChangeableCards": [5, 6, 7, 34, 34, 34, 35, 36, 36, 37, 38, 38, 39],
                        "FixedCardsLen": 0,
                        "stFixedCards": [],
                        "stFenZhangCard": null
                    }],
                    "Score": [0, 0, 0, 0],
                    "EndState": 0,
                    "EndGangInfo": [{"Gang": [], "TotalGangScore": 0}, {
                        "Gang": [{"GangType": 16, "GangCard": 21}, {"GangType": 16, "GangCard": 22}],
                        "TotalGangScore": 0
                    }, {"Gang": [], "TotalGangScore": 0}, {
                        "Gang": [{"GangType": 16, "GangCard": 23}],
                        "TotalGangScore": 0
                    }],
                    "faninfo": [{
                        "chairid": 0,
                        "SpecialType": 4,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 1,
                        "SpecialType": 1,
                        "FanNum": 0,
                        "addfan": [{"AddType": 1, "AddNum": 2}, {"AddType": 5, "AddNum": 2}],
                        "hucard": 9,
                        "DianPao": []
                    }, {
                        "chairid": 2,
                        "SpecialType": 4,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {"chairid": 3, "SpecialType": 4, "FanNum": 0, "addfan": [], "hucard": 0, "DianPao": []}],
                    "money": [10000, 10000, 10000, 10000]
                },
                "endinfo": [
                    {
                        "gang_add": 4,
                        "hua_add": 4,
                    }, {
                        "gang_add": 4,
                        "hua_add": 4,
                    }, {
                        "gang_add": 4,
                        "hua_add": 4,
                    }, {
                        "gang_add": 4,
                        "hua_add": 4,
                    }
                ],
                "hualist": [],
            };
            this.handler_server_game_end_bc(packet);
        }
    },
});

var GuZhenJResult = MJCommonResult.extend({
    updateContentView: function (ackGameEndJS) {
        this.ackGameEnd = ackGameEndJS.gameend;
        this.ackGameEndJS = ackGameEndJS;
        //输赢标志
        var seatId = MJModel.seatid;
        var score = this.ackGameEnd.Score[seatId];
        var effectName = "lose";
        if (score > 0) {
            effectName = "win";
        }
        this._win_effect(effectName);
        this.setConfigStr();

        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);

        var itemHeight = 120;

        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;

            var countY = m;

            if (MJModel.mj_roomType == 1) {
                if (pos == 2) {
                    continue;
                }
            }

            if (MJModel.mj_roomType == 2) {
                if (pos == 1 || pos == 3) {
                    continue;
                }

                if (pos == 0) {
                    countY = 1;
                } else if (pos == 2) {
                    countY = 2;
                }
            }

            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 495 - count * itemHeight;
            var startX = 40;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX + 60, startY + 55));
            this.bgSpr.addChild(headLayer, 10);

            //上排牌 杠
            var ganghuLayer = this.createGangHuLayer(seatid);
            this.bgSpr.addChild(ganghuLayer, 10);
            ganghuLayer.setPosition(cc.p(startX + 230, startY + 65));

            //下排牌
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX + 0, startY));
            this.bgSpr.addChild(handCardLayer);

            this.createSpecialHuTip(startX + 785, startY + 40, seatid);
            // this.createSpecialHuTip(startX + 900, startY + 40, seatid);

            // 输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX + 1100, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            // // 输赢分
            var scoreLayer = this.createScoreLayer2(seatid, this.ackGameEndJS.endinfo[seatid].gang_add, "杠分");
            scoreLayer.setPosition(cc.p(startX + 900, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            // // 输赢分
            var scoreLayer = this.createScoreLayer2(seatid, this.ackGameEndJS.endinfo[seatid].hua_add, "花分");
            scoreLayer.setPosition(cc.p(startX + 1030, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            //中马列表
            var maLayer = this.createMaLayer(seatid);
            if (maLayer) {
                maLayer.setPosition(cc.p(startX + 845, startY + 85));
                this.bgSpr.addChild(maLayer);
            }
            count++;
        }
    },
    createGangHuLayer: function (seatid) {
        var layer = new cc.Layer();
        var x = 0;
        var y = 0;

        // for (var i = 0; i < this.ackGameEnd.EndGangInfo[seatid].Gang.length; i++) {
        //     var gangType = this.ackGameEnd.EndGangInfo[seatid].Gang[i].GangType;
        //     if (gangType == 16) {
        //         var cardvalue = this.ackGameEnd.EndGangInfo[seatid].Gang[i].GangCard;
        //         var fanType = new cc.LabelTTF("点杠", "Arial", 20);
        //         fanType.setColor(this.leftColor);
        //         fanType.setAnchorPoint(cc.p(0, 0));
        //         fanType.setPosition(cc.p(x, y + 10));
        //         layer.addChild(fanType);
        //         x += fanType.getContentSize().width;
        //
        //         var card = new MJCard();
        //         card.setValue(cardvalue, 0, CardType.Card_Hand, 0);
        //         card.setScale(0.25);
        //         card.setAnchorPoint(cc.p(0, 0));
        //         card.setPosition(cc.p(x , y + 7));
        //         x += card.getBoundingBox().width + 10;
        //         layer.addChild(card);
        //     }
        // }
        var addFanType = [];
        if (seatid == MJModel.banker_seatid) {
            addFanType.push("庄家1花");
        }

        var specialType = this.ackGameEnd.faninfo[seatid].SpecialType;
        if (specialType == HuType.HU_ZIMO) {
            addFanType.push("自摸2花");
        }
        if (specialType == HuType.HU_DIANPAO || specialType == HuType.HU_BEI_QIANG_GANG) {
            addFanType.push("点炮1花");
        }

        switch (specialType) {
            case HuType.HU_ZIMO:
            case HuType.HU_PAOHU:
            case HuType.HU_QIANG_GANG:
            case HuType.HU_GANG_SHANG_HUA:
                var addfan = this.ackGameEnd.faninfo[seatid].addfan;
                for (var i = 0; i < addfan.length; i++) {
                    var add_fan = addfan[i];
                    var add_type = add_fan.AddType;
                    var add_value = add_fan.AddNum;
                    if (AddFanTypeArray[add_type]) {
                        if (add_type == AddFanType.GZ_FAN_TYPE_TIANHU || add_type == AddFanType.GZ_FAN_TYPE_BAOYING) {
                            addFanType.push(AddFanTypeArray[add_type] + "x" + add_value);
                        } else {
                            addFanType.push(AddFanTypeArray[add_type] + add_value + "花");
                        }
                    }
                }
                break;
        }

        for (var i = 0; i < addFanType.length; i++) {
            var fanType = new cc.LabelTTF(addFanType[i], "Arial", 20);
            fanType.setColor(this.leftColor);
            fanType.setAnchorPoint(cc.p(0, 0));
            fanType.setPosition(cc.p(x, y + 10));
            layer.addChild(fanType);
            x += fanType.getContentSize().width + 10;
        }

        return layer;
    },

    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var path = "";
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5天和 6地和 7抢杠胡 8杠上开花 9花上添花
            switch (fanInfo.SpecialType) {
                case 1:
                    path = "RoomMJ/result2/zi_mo_icon.png";
                    break;
                case 2:
                    path = "RoomMJ/result2/pao_hu_icon.png";
                    break;
                case 3:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                case 5:
                    path = "RoomMJ/result2/qiang_gang_icon.png";
                    break;
                case 7:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                default:
                    break;
            }
            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setPosition(cc.p(startX, startY));
                this.bgSpr.addChild(typeSprite);

            }
        }
    },
    //输赢分
    createScoreLayer: function (seatid) {
        var layer = new cc.Layer();

        var width = 65;
        var nameLabel = new cc.LabelTTF("总分", "Arial", 32);
        nameLabel.setColor(this.leftColor);
        nameLabel.setAnchorPoint(cc.p(0.5, 0.5));
        nameLabel.setPosition(cc.p(width, 40));
        layer.addChild(nameLabel);

        var score = 0;
        if (this.ackGameEnd.Score && this.ackGameEnd.Score.length > seatid) score = this.ackGameEnd.Score[seatid];

        var path = getResPath("RoomMJ/result2/result_small_label_lose.png");
        if (score > 0) {
            path = getResPath("RoomMJ/result2/result_small_label_win.png");
        }
        var scoredes = ":";
        if (score == 0) scoredes = "";
        var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), path, 29, 37, '0');

        scoreLabel.setAnchorPoint(cc.p(0.5, 0.5));

        scoreLabel.setPosition(cc.p(width, -10));
        scoreLabel.setName("scoreLabel");
        layer.addChild(scoreLabel);

        if (Math.abs(score) >= 10000) {
            scoreLabel.setScale(0.8);
        }
        return layer;
    },

    //输赢分
    createScoreLayer2: function (seatid, score, text) {
        var layer = new cc.Layer();

        var width = 0;
        var nameLabel = new cc.LabelTTF(text, "Arial", 32);
        nameLabel.setColor(this.leftColor);
        nameLabel.setAnchorPoint(cc.p(0.5, 0.5));
        nameLabel.setPosition(cc.p(width, 40));
        layer.addChild(nameLabel);

        var path = getResPath("RoomMJ/result2/result_small_label_lose.png");
        if (score > 0) {
            path = getResPath("RoomMJ/result2/result_small_label_win.png");
        }
        var scoredes = ":";
        if (score == 0) scoredes = "";
        var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), path, 29, 37, '0');

        scoreLabel.setAnchorPoint(cc.p(0.5, 0.5));

        scoreLabel.setPosition(cc.p(width, -10));
        scoreLabel.setName("scoreLabel");
        layer.addChild(scoreLabel);

        if (Math.abs(score) >= 10000) {
            scoreLabel.setScale(0.8);
        }
        return layer;
    },

    setConfigStr: function () {
        var gameDes = "";
        for (var i = 0; i < MJModel.play_id_str.length; i++) {
            gameDes += MJModel.play_id_str[i];
            if (i != MJModel.play_id_str.length - 1) {
                gameDes += " ";
            }
        }
        if (gameDes != "") {
            var str = new cc.LabelTTF(gameDes, "Arial", 20);
            str.setColor(this.leftColor);
            str.setAnchorPoint(cc.p(0, 0));
            str.setPosition(cc.p(100, 50));
            this.addChild(str);
        }
    },
});
