loadProtoFile("proto/shanximj.proto");
var SHANXI_SERVER_CMD = {
    SERVER_SHANXI_START_PAOZI: 5076,
    SERVER_SHANXI_USER_XIAPAOZI_DONE: 5077,
    SERVER_SHANXI_CLIENT_LAIZIPAI: 5078,
}
var MJPao = cc.Layer.extend(
    {
        _allpao: [],
        ctor: function () {
            this._super();
            var size = cc.director.getWinSize();
            var dx = 200;
            var by = 220;
            var bx = size.width / 2 - 2 * dx;
            var tipBg = new cc.Sprite(getResPath("shanximj/pao/selectPaoTxt.png"));
            tipBg.setPosition(cc.p(size.width / 2, by + 130));
            this.addChild(tipBg);
            for (var i = 0; i < 5; i++) {
                var pao = new ccui.Button(getResPath("shanximj/pao/pao" + i + "0.png"), getResPath("shanximj/pao/pao" + i + "1.png"));
                pao.setPosition(cc.p(bx + dx * i, by));
                pao.setTag(i);
                this.addChild(pao);
                this._allpao[i] = pao;
            }
        },
        addClickEventListener: function (callback) {
            this._allpao[0].addClickEventListener(callback);
            this._allpao[1].addClickEventListener(callback);
            this._allpao[2].addClickEventListener(callback);
            this._allpao[3].addClickEventListener(callback);
            this._allpao[4].addClickEventListener(callback);
        }
    });

var ShanxiPackgName = {
    jingdian: 114,
    zidingyi: 115,
    dasewanfa: 116,
}
var MJTable_shanxian = MJTable.extend({

    mPaoBar: null,
    isRecordShow: false,
    _allBeiShu: [null, null, null, null],
    _curLaizi_bg: null,
    _curLaizi: 0,
    _isgang: false,
    gameDes: "",
    _pkgid: 0,
    effectType: "horizontal",
    ctor: function () {
        this._super();
    },

    initRoom: function () {
        this._init_extend();

        MJModel.mj_bg_use = 1;
        MJModel.mj_suport_change_bg = 0;
        MJModel.toupiaoTipsType = 1;
        MJModel.chi_layout = 3;
        MJModel.needTipWhenPass = 1;
        MJModel.mj_touch_tip = 1;
        MJModel.isOutCard = true;
        MJModel.mj_card_lib_type = 1;
        //MJModel.mj_chat_style = 1;
        MJModel.mj_public_style = 1;
        MJModel.mj_chat_style = 5;
        MJModel.mj_touch_tip = 1;
        MJModel.mj_suport_fangyan = 0;
        MJModel.otherOutCardEffect = false;
        MJModel.outCardEffect_style = 1;
        MJModel.mj_gps_type = 1;
        MJModel.shareType = 1;
        MJModel.table_gps_init = 1;
        MJModel.isSupportRealTimeVoices = true;
        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];
            if (this._pkg_id == 2117 || this._pkg_id == 1999) {
                //经典玩法3人
                MJModel.mj_roomType = 1;
            }
            if (this._pkg_id == 3530 || this._pkg_id == 3301) {
                //经典玩法2人
                MJModel.mj_roomType = 2;
            }
            if (this._pkg_id == 2362 || this._pkg_id == 2299) {
                //3人双色
                MJModel.mj_roomType = 1;
            }
            if (this._pkg_id == 2361 || this._pkg_id == 2298) {
                //2人单色
                MJModel.mj_roomType = 2;
            }
            if (this._pkg_id == 754 || this._pkg_id == 1369) {
                //自定义4人
                this._pkg_id = ShanxiPackgName.zidingyi;
            }

        } catch (e) {
            Log(this, e);
        }
        try {
            if (!MJModel.isOnVideo) {
                var game_help = this.roomPublic.getChildByName("game_help");
                if (game_help !== null) {
                    game_help.setVisible(false);
                }
            }
        } catch (e) {

        }
        this._super();

        MJModel.mj_paiban = "horizontal";
        var self = this;
        this.mPaoBar = new MJPao();
        this.mPaoBar.setVisible(false);
        this.mPaoBar.addClickEventListener(function (node) {
            self.onPaoClick(node);
        });
        this.addChild(this.mPaoBar, 100);
        //this.schedule(this.test, 1.0);
        this._init_ui(true);

        //this._update_action_ui();
    },
    //_update_action_ui:function(){
    //    this.room_Action.actions["hu"].setScale(0.75);
    //    this.room_Action.actions["gang"].setScale(0.75);
    //    this.room_Action.actions["peng"].setScale(0.75);
    //    this.room_Action.actions["chi"].setScale(0.75);
    //    this.room_Action.opBtns = [];
    //    this.room_Action.opBtns.push(this.room_Action.actions["pass"]);
    //    this.room_Action.opBtns.push(this.room_Action.actions["chi"]);
    //    this.room_Action.opBtns.push(this.room_Action.actions["peng"]);
    //    this.room_Action.opBtns.push(this.room_Action.actions["gang"]);
    //    this.room_Action.opBtns.push(this.room_Action.actions["gang0"]);
    //    this.room_Action.opBtns.push(this.room_Action.actions["gang1"]);
    //    this.room_Action.opBtns.push(this.room_Action.actions["gang2"]);
    //    this.room_Action.opBtns.push(this.room_Action.actions["hu"]);
    //
    //    MJAction.prototype.getOpBtnWidth = function () {
    //        return 220;
    //    };
    //
    //    MJAction.prototype.getOpBtnBX = function(){
    //        var size = cc.director.getWinSize();
    //        var bx = size.width - 184 - 92 + 100;
    //        return bx;
    //    };
    //},
    getMjTypePath: function () {
        if (this._pkg_id == 2362 || this._pkg_id == 2299) {
            //3人双色
            return getResPath("shanximj/mj_type_shuangse.png");
        }
        else if (this._pkg_id == 2361 || this._pkg_id == 2298) {
            return getResPath("shanximj/mj_type_danse.png");
        }
        else {
            return getResPath("shanximj/mj_type_2212.png");
        }

    },
    test: function (dt) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;
        if (tempCount == 5 && true) {
            this._curLaizi = 0x41;
            var packet = {
                "gameend": {
                    "UserCard": [{
                        "ChangeableCardsLen": 13,
                        "ChangeableCards": [1, 2, 3, 4, 5, 20, 20, 21, 23, 40, 40, 40, 65],
                        "FixedCardsLen": 0,
                        "stFixedCards": []
                    }, {
                        "ChangeableCardsLen": 13,
                        "ChangeableCards": [5, 6, 7, 8, 9, 17, 18, 19, 24, 24, 36, 37, 65],
                        "FixedCardsLen": 0,
                        "stFixedCards": []
                    }, {
                        "ChangeableCardsLen": 10,
                        "ChangeableCards": [5, 5, 24, 25, 34, 35, 36, 37, 37, 65],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{"CardData": 51, "state": 1, "chairID": 0, "LaiziNum": null}]
                    }, {
                        "ChangeableCardsLen": 13,
                        "ChangeableCards": [6, 17, 18, 19, 20, 22, 23, 23, 33, 34, 35, 40, 41],
                        "FixedCardsLen": 0,
                        "stFixedCards": []
                    }],
                    "Score": [2, 0, -2, 0],
                    "EndState": 0,
                    "EndGangInfo": [{"Gang": [], "TotalGangScore": 0}, {"Gang": [], "TotalGangScore": 0}, {
                        "Gang": [],
                        "TotalGangScore": 0
                    }, {"Gang": [], "TotalGangScore": 0}],
                    "faninfo": [{
                        "chairid": 0,
                        "SpecialType": 2,
                        "FanNum": 0,
                        "addfan": [{"AddType": 17, "AddNum": 1, "AddType2": 1}],
                        "hucard": 3,
                        "DianPao": []
                    }, {
                        "chairid": 1,
                        "SpecialType": 0,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 2,
                        "SpecialType": 3,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {"chairid": 3, "SpecialType": 0, "FanNum": 0, "addfan": [], "hucard": 0, "DianPao": []}],
                    "money": [100002, 100000, 99998, 100000]
                }, "paozi": [0, 0, 0, 0], "gangfen": [0, 0, 0, 0]
            };
            this.handler_server_game_end_bc(packet, true);
        }
    },
    updateBg: function (isInit) {
        if (isInit == undefined)isInit = false;
        this._super(isInit);
        if (isInit)return;
        this._init_ui(false);
    },

    _init_ui: function (isInit) {
        var self = this;
        var size = cc.director.getWinSize();
        this.room_Action.actions["pass"].removeFromParent();
        this.room_Action.actions["chi"].removeFromParent();
        this.room_Action.actions["peng"].removeFromParent();
        this.room_Action.actions["gang"].removeFromParent();
        if (this.room_Action.actions["gang0"]) {
            this.room_Action.actions["gang0"].removeFromParent();
        }
        if (this.room_Action.actions["gang1"]) {
            this.room_Action.actions["gang1"].removeFromParent();
        }
        if (this.room_Action.actions["gang2"]) {
            this.room_Action.actions["gang2"].removeFromParent();
        }
        this.room_Action.actions["hu"].removeFromParent();
        this.room_Action.opBtns = [];
        //特效模式
        MJModel.mj_table.effectType = getItem("shanxieffectType");
        if (MJModel.mj_table.effectType == null) {
            MJModel.mj_table.effectType = "horizontal";
        }
        if (MJModel.mj_table.effectType == "horizontal") {
            {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("RoomMJ/action/pass1.png"), "", "");
                this.room_Action.actions["pass"] = btn;
                btn.setName("pass");
                btn.addClickEventListener(function (sender, evt) {
                    self.room_Action.btnCallback(sender);
                });
                btn.setVisible(false);
                this.room_Action.addChild(btn);

                this.room_Action.opBtns.push(btn);

            }

            {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("RoomMJ/action/chi1.png"), "", "");
                this.room_Action.actions["chi"] = btn;
                btn.setName("chi");
                btn.addClickEventListener(function (sender, evt) {
                    self.room_Action.btnCallback(sender);
                });
                btn.setVisible(false);
                this.room_Action.addChild(btn);
                this.room_Action.opBtns.push(btn);
            }

            {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("RoomMJ/action/peng1.png"), "", "");
                this.room_Action.actions["peng"] = btn;
                btn.setName("peng");
                btn.addClickEventListener(function (sender, evt) {
                    self.room_Action.btnCallback(sender);
                });
                btn.setVisible(false);
                this.room_Action.addChild(btn);
                this.room_Action.opBtns.push(btn);
            }

            {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("RoomMJ/action/gang1.png"), "", "");
                this.room_Action.actions["gang"] = btn;
                btn.setName("gang");
                btn.addClickEventListener(function (sender, evt) {
                    self.room_Action.btnCallback(sender);
                });
                btn.setVisible(false);
                this.room_Action.addChild(btn);
                this.room_Action.opBtns.push(btn);
            }
            {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("RoomMJ/action/gang1.png"), "", "");
                this.room_Action.actions["gang0"] = btn;
                btn.setName("gang0");
                btn.addClickEventListener(function (sender, evt) {
                    self.room_Action.btnCallback(sender);
                });
                btn.setVisible(false);
                this.room_Action.addChild(btn);
                this.room_Action.opBtns.push(btn);
            }
            {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("RoomMJ/action/gang1.png"), "", "");
                this.room_Action.actions["gang1"] = btn;
                btn.setName("gang1");
                btn.addClickEventListener(function (sender, evt) {
                    self.room_Action.btnCallback(sender);
                });
                btn.setVisible(false);
                this.room_Action.addChild(btn);
                this.room_Action.opBtns.push(btn);
            }
            {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("RoomMJ/action/gang1.png"), "", "");
                this.room_Action.actions["gang2"] = btn;
                btn.setName("gang2");
                btn.addClickEventListener(function (sender, evt) {
                    self.room_Action.btnCallback(sender);
                });
                btn.setVisible(false);
                this.room_Action.addChild(btn);
                this.room_Action.opBtns.push(btn);
            }
            {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("RoomMJ/action/hu1.png"), "", "");
                this.room_Action.actions["hu"] = btn;
                btn.setName("hu");
                btn.addClickEventListener(function (sender, evt) {
                    self.room_Action.btnCallback(sender);
                });
                btn.setVisible(false);
                this.room_Action.addChild(btn);
                this.room_Action.opBtns.push(btn);
            }
            if (!isInit) {
                var opType = MJModel.curOperate;
                if ((opType & ActionType.TYPE_LISTEN) == ActionType.TYPE_LISTEN) {
                    opType = opType - ActionType.TYPE_LISTEN;
                }

                if (opType > 0) {
                    if (this.room_Action) {
                        this.room_Action.setOperator(-1);
                        this.room_Action.setOperator(opType);
                    }
                }
            }
        }
        else {
            {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("shanximj/action/pass1.png"), getResPath("shanximj/action/pass2.png"), "");
                this.room_Action.actions["pass"] = btn;
                btn.setName("pass");
                btn.addClickEventListener(function (sender, evt) {
                    self.room_Action.btnCallback(sender);
                });
                btn.setVisible(false);
                this.room_Action.addChild(btn);

                this.room_Action.opBtns.push(btn);

            }
            {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("shanximj/action/chi1.png"), getResPath("shanximj/action/chi2.png"), "");
                this.room_Action.actions["chi"] = btn;
                btn.setName("chi");
                btn.addClickEventListener(function (sender, evt) {
                    self.room_Action.btnCallback(sender);
                });
                btn.setVisible(false);
                this.room_Action.addChild(btn);
                this.room_Action.opBtns.push(btn);
            }
            {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("shanximj/action/peng1.png"), getResPath("shanximj/action/peng2.png"), "");
                this.room_Action.actions["peng"] = btn;
                btn.setName("peng");
                btn.addClickEventListener(function (sender, evt) {
                    self.room_Action.btnCallback(sender);
                });
                btn.setVisible(false);
                this.room_Action.addChild(btn);
                this.room_Action.opBtns.push(btn);
            }

            {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("shanximj/action/gang1.png"), getResPath("shanximj/action/gang2.png"), "");
                this.room_Action.actions["gang"] = btn;
                btn.setName("gang");
                btn.addClickEventListener(function (sender, evt) {
                    self.room_Action.btnCallback(sender);
                });
                btn.setVisible(false);
                this.room_Action.addChild(btn);
                this.room_Action.opBtns.push(btn);
            }
            {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("shanximj/action/gang1.png"), getResPath("shanximj/action/gang2.png"), "");
                this.room_Action.actions["gang0"] = btn;
                btn.setName("gang0");
                btn.addClickEventListener(function (sender, evt) {
                    self.room_Action.btnCallback(sender);
                });
                btn.setVisible(false);
                this.room_Action.addChild(btn);
                this.room_Action.opBtns.push(btn);
            }
            {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("shanximj/action/gang1.png"), getResPath("shanximj/action/gang2.png"), "");
                this.room_Action.actions["gang1"] = btn;
                btn.setName("gang1");
                btn.addClickEventListener(function (sender, evt) {
                    self.room_Action.btnCallback(sender);
                });
                btn.setVisible(false);
                this.room_Action.addChild(btn);
                this.room_Action.opBtns.push(btn);
            }
            {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("shanximj/action/gang1.png"), getResPath("shanximj/action/gang2.png"), "");
                this.room_Action.actions["gang2"] = btn;
                btn.setName("gang2");
                btn.addClickEventListener(function (sender, evt) {
                    self.room_Action.btnCallback(sender);
                });
                btn.setVisible(false);
                this.room_Action.addChild(btn);
                this.room_Action.opBtns.push(btn);
            }

            {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("shanximj/action/hu1.png"), getResPath("shanximj/action/hu2.png"), "");
                this.room_Action.actions["hu"] = btn;
                btn.setName("hu");
                btn.addClickEventListener(function (sender, evt) {
                    self.room_Action.btnCallback(sender);
                });
                btn.setVisible(false);
                this.room_Action.addChild(btn);
                this.room_Action.opBtns.push(btn);
            }
            if (!isInit) {
                var opType = MJModel.curOperate;
                if ((opType & ActionType.TYPE_LISTEN) == ActionType.TYPE_LISTEN) {
                    opType = opType - ActionType.TYPE_LISTEN;
                }

                if (opType > 0) {
                    if (this.room_Action) {
                        this.room_Action.setOperator(-1);
                        this.room_Action.setOperator(opType);
                    }
                }
            }

        }
        this.room_Action.actions["hu"].setScale(0.75);
        this.room_Action.actions["gang"].setScale(0.75);
        this.room_Action.actions["gang0"].setScale(0.75);
        this.room_Action.actions["gang1"].setScale(0.75);
        this.room_Action.actions["gang2"].setScale(0.75);
        this.room_Action.actions["peng"].setScale(0.75);
        this.room_Action.actions["chi"].setScale(0.75);
        MJAction.prototype.getOpBtnWidth = function () {
            return 220;
        };

        MJAction.prototype.getOpBtnBX = function () {
            var size = cc.director.getWinSize();
            var bx = size.width - 184 - 92 + 100;
            return bx;
        };
    },
    handler_game_time_over_bc: function (data, canDelay) {
        if (!this.gameending)MJModel.state = MJ_STATUS.MJ_GAME_FREE;
        this.startTimeEnd();
        // PlatformHelper.showToast("服务器通知房间结束！");
    },
    gameending: false,
    handler_server_game_end_bc: function (shanxiGameEnd, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            this.gameending = true;
            var ackGameEnd = shanxiGameEnd.gameend;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);
            if (MJModel.mj_table.getChildByName("tingpai_layer")) {
                MJModel.mj_table.removeChildByName("tingpai_layer")
            }
            this.room_Info.stopTime();

            var callback0 = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var callback2 = cc.callFunc(function () {
                if (state == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
                else {
                }
            });

            var callback4 = cc.callFunc(function () {
                self.room_Tip.reset();
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var callback5 = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var callback3 = cc.callFunc(function () {
                self.room_Action.setReady2Visible(false);
                //var result = new MJResult_shanxian();
                //result.setName("RoomMJResultDetail");
                //self.addChild(result, 100000);
                //result.updateContentView(self, shanxiGameEnd);
                //return;
                try {
                    var result = new MJResult_XinYu();
                    result.updateContentView(shanxiGameEnd);
                    result.setName("reset_remove");
                    self.addChild(result, 100000);
                } catch (e) {
                    cc.log("game end:", e);
                    self.gameending = false;
                    self.room_Action.setReady2Visible(true);
                }
            });

            if (MJModel.isOnVideo) {
                if (canDelay) {
                    this.runAction(cc.sequence(callback4, cc.delayTime(1), callback5, cc.delayTime(2), callback3));
                } else {
                    this.runAction(cc.sequence(callback5, cc.delayTime(2), callback3));
                }
                return;
            }

            this.runAction(cc.sequence(cc.delayTime(0), callback0, cc.delayTime(0.3), callback4, cc.delayTime(0.3), callback5, cc.delayTime(0.6), callback2, cc.delayTime(1), callback3));
        } catch (e) {
            ERROR(this, e);
        }
    },
    _init_extend: function () {

        var spuer_MJPreTable_ctor = MJPreTable.prototype.ctor;
        MJPreTable.prototype.ctor = function () {
            spuer_MJPreTable_ctor.call(this);
            var self = this;
            var size = cc.director.getWinSize();
            this.mode_btn.setPosition(cc.p(size.width / 4, 530));


        };


        //var spuer_CommonTotalResult_ctor = CommonTotalResult.prototype.ctor;
        //CommonTotalResult.prototype.ctor = function () {
        //    spuer_CommonTotalResult_ctor.call(this);
        //    var self = this;
        //    var wx_share = this.btns["share"];
        //    var xl_share = this.btns["xlshare"];
        //    var copy = this.btns["copy"];
        //    xl_share.setVisible(false);
        //
        //    var parent = wx_share.getParent();
        //    wx_share.removeFromParent();
        //    copy.removeFromParent();
        //
        //    wx_share = new ccui.Button();
        //    wx_share.loadTextures(getResPath("RoomMJ/mj_public/common/dialog/bigresult/wx_share_n.png"), getResPath("RoomMJ/mj_public/common/dialog/bigresult/wx_share_s.png"), "");
        //    parent.addChild(wx_share);
        //    wx_share.setName("share");
        //    wx_share.addClickEventListener(function (sender, evt) {
        //        self.actionCallBack(sender);
        //    });
        //    this.btns[wx_share.getName()] = wx_share;
        //
        //    copy = new ccui.Button();
        //    copy.loadTextures(getResPath("RoomMJ/mj_public/common/dialog/bigresult/coop_zhanji_n.png"), getResPath("RoomMJ/mj_public/common/dialog/bigresult/coop_zhanji_s.png"), "");
        //    parent.addChild(copy);
        //    copy.setName("copy");
        //    copy.addClickEventListener(function (sender, evt) {
        //        self.actionCallBack(sender);
        //    });
        //    this.btns[copy.getName()] = copy;
        //
        //    var size = cc.director.getWinSize();
        //    wx_share.setPosition(size.width / 2, 48);
        //    copy.setPosition(size.width / 2 + wx_share.getContentSize().width / 2 + copy.getContentSize().width / 2 + 10, wx_share.getPositionY());
        //
        //    var sharelinks = new ccui.Button(getResPath("RoomMJ/mj_public/common/dialog/bigresult/xl_share_n.png"), getResPath("RoomMJ/mj_public/common/dialog/bigresult/xl_share_s.png"), "");
        //    sharelinks.setPosition(cc.p(size.width / 2 - wx_share.getContentSize().width / 2 - sharelinks.getContentSize().width / 2 - 10, wx_share.getPositionY()));
        //    sharelinks.setName("sharelinks");
        //    sharelinks.addClickEventListener(function (sender, evt) {
        //        Utils.shareLinksToWX();
        //        sharelinks.setEnabled(false);
        //    });
        //    parent.addChild(sharelinks);
        //
        //    var jushu = this.rootNode.getChildByName("jushu");
        //    jushu.setPositionX(jushu.getPositionX() - 30);
        //};

        var self = this;
        TingPaiLayer.prototype.onTouchEnded = function (touch, event) {
            if (this._isTouchInside(touch)) {
                return;
            }
        };
        var super_continueClick = MJResult.prototype.continueClick;
        MJResult.prototype.continueClick = function (ref) {
            super_continueClick.call(this, ref);
            self.gameending = false;
        };

        MJCards.prototype.outHandCardEffct2 = function (pos, value) {
            this.addOutCard(pos, value);
            this.reflashHandCard(pos, true, true);
        };

        MJCard.prototype.check_addFlag = function () {
            self._checkAddCardFlag(this);
        };
        MJTable.prototype.updateBg = function (isInit) {
            if (isInit == undefined)isInit = false;
            var size = cc.director.getWinSize();
            if (this.bg == null) {
                this.bg = new ccui.ImageView(getResPath(this.getBgStr()));
                this.bg.setAnchorPoint(cc.p(0.5, 0.5));
                this.bg.setContentSize(size);
                this.bg.setScale9Enabled(true);
                this.bg.setPosition(size.width / 2, size.height / 2);
                this.addChild(this.bg, -100);
            } else {
                this.bg.loadTexture(getResPath(this.getBgStr()));
            }
            if (MJModel.mj_font == "gexing" && MJModel.mj_fontSize == "biaozhun") {
                Utils.addCardSprites(__String.createWithFormat("shanximj/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));
            }
            else {
                Utils.addCardSprites(__String.createWithFormat("RoomMJ/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));

            }

            if (MJModel.mj_roomType == 2) {
                this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config_2ren.json" : "RoomMJ/config/card_config2d_2ren.json");
            } else {
                this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config.json" : "RoomMJ/config/card_config2d.json");
            }

            //this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config.json" : "RoomMJ/config/card_config2d.json");

            if (isInit)return;

            this.room_Card.reflashAllCardUI();
            for (var i = 0; i < 4; i++) {
                this.players[i].setPosition(MJConfig.getPlayerPos(i));
                this.players[i].reflashNameMoneyPosition();
            }
            if (this.room_Info)this.room_Info.reflash();
        };

        MJTable.prototype.playerClickCallback = function (pos) {
            var seatid = MJModel.getSeatidByPos(pos);
            if (seatid == MJModel.seatid) {
                if (PackName == "mjnew225d") {
                    this.release();
                    ZJHModel.getInstance().roomToHall();
                }
                sendRecordReq();
            }
            else {
                if (MJModel.seatid == -1) {
                    var player = MJModel.players[MJModel.getSeatidByPos(pos)];
                    var userInfo = new MJUserInfo();
                    userInfo.init(player);
                    this.addChild(userInfo, 1000000);
                }
                else {

                    if (MJModel.hudong == 0) {
                        return;
                    }

                    this.showBigfaceMenu(pos);
                }
            }
        };

        Setting.prototype.init_ctor = function () {
            var size = cc.director.getWinSize();
            var layout = new ccui.Layout();
            layout.setContentSize(size);
            layout.setAnchorPoint(cc.p(0.5, 0.5));
            layout.setPosition(size.width / 2, size.height / 2);
            layout.setTouchEnabled(true);
            layout.setSwallowTouches(true);
            layout.addClickEventListener(function (btn) {
            });
            this.addChild(layout, -1);
            this.mj_font = MJModel.mj_font;
            this.mj_fontSize = MJModel.mj_fontSize;
            this.mj_light = MJModel.mj_light;
            this.mj_style = MJModel.mj_style;
            MJModel.mj_table.effectType = getItem("shanxieffectType");
            if (MJModel.mj_table.effectType == null) {
                MJModel.mj_table.effectType = "horizontal";
            }
            this.mj_paiban = MJModel.mj_table.effectType;
            this.mj_table_view = MJModel.mj_table_view;

            this.initUI();
        };

        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(false);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言1");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };
        Setting.prototype.gamesetting_selectedStateEvent = function (sender, type) {
            var name = sender.getName();
            switch (type) {
                case  ccui.CheckBox.EVENT_UNSELECTED:
                    break;

                case ccui.CheckBox.EVENT_SELECTED:
                    if (name.indexOf("fontSize_") != -1) {
                        for (var i in this.checkboxs_gamesetting) {
                            var btn = this.checkboxs_gamesetting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("fontSize_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        this.mj_fontSize = name.split("_")[1];
                    }
                    else if (name.indexOf("font_") != -1) {
                        for (var i in this.checkboxs_gamesetting) {
                            var btn = this.checkboxs_gamesetting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("font_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        this.mj_font = name.split("_")[1];

                    }
                    else if (name.indexOf("style_") != -1) {
                        for (var i in this.checkboxs_gamesetting) {
                            var btn = this.checkboxs_gamesetting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("style_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        this.mj_style = name.split("_")[1];
                    }
                    else if (name.indexOf("light_") != -1) {
                        for (var i in this.checkboxs_gamesetting) {
                            var btn = this.checkboxs_gamesetting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("light_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        this.mj_light = name.split("_")[1];
                    }
                    else if (name.indexOf("paiban_") != -1) {
                        for (var i in this.checkboxs_gamesetting) {
                            var btn = this.checkboxs_gamesetting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("paiban_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        this.mj_paiban = name.split("_")[1];

                    }
                    else if (name.indexOf("table_") != -1) {
                        for (var i in this.checkboxs_gamesetting) {
                            var btn = this.checkboxs_gamesetting[i];
                            var cname = btn.getName();
                            if (cname != name && cname.indexOf("table_") != -1) {
                                btn.setEnabled(true);
                                btn.setSelected(false);
                            }
                        }
                        sender.setEnabled(false);
                        this.mj_table_view = name.split("_")[1];
                        this.showPaiBanView(this.mj_table_view == "2d");
                    }
                    if (this.mj_font == "gexing") {
                        this.checkboxs_gamesetting["fontSize_dahao"].setSelected(false);
                        this.checkboxs_gamesetting["fontSize_dahao"].setVisible(false);
                        this.checkboxs_gamesetting["fontSize_dahao"].setEnabled(true);
                        this.checkboxs_gamesetting["fontSize_biaozhun"].setSelected(true);
                        this.checkboxs_gamesetting["fontSize_biaozhun"].setEnabled(false);
                        this.mj_fontSize = "biaozhun";
                    }
                    else {
                        this.checkboxs_gamesetting["fontSize_dahao"].setVisible(true);
                    }
                    break;

                default:
                    break;
            }
        };
        Setting.prototype.gamesetting_btnsCallBack = function (sender) {
            var name = sender.getName();
            if (name == "more") {
            } else if (name == "reset") {
                this.mj_font = "jianjie";
                this.mj_fontSize = "dahao";
                this.mj_light = "baitian";
                this.mj_style = "shishang";
                this.mj_paiban = "horizontal";
                this.mj_table_view = "2d";
                this.gamesetting_reset();
            } else if (name == "ok") {
                MJModel.mj_font = this.mj_font;
                MJModel.mj_fontSize = this.mj_fontSize;
                MJModel.mj_light = this.mj_light;
                MJModel.mj_style = this.mj_style;
                //MJModel.mj_paiban = "horizontal";
                MJModel.mj_table_view = this.mj_table_view;
                MJModel.mj_table.effectType = this.mj_paiban;
                this.removeFromParent();
                setItem("shanxieffectType", MJModel.mj_table.effectType);
                MJModel.saveGameSetting();
                MJModel.mj_table.reflashSetting();
            }
        };
        //把版面修改成模式
        Setting.prototype.showPaiBanView = function (is) {
            is = true;
            this._gameSettingLayer.getChildByName("light_title").setString("模式");
            this._gameSettingLayer.getChildByName("light_title").setVisible(is);
            this.checkboxs_gamesetting["paiban_horizontal"].getChildByName("text").setString("特效");
            this.checkboxs_gamesetting["paiban_horizontal"].setVisible(is);
            this.checkboxs_gamesetting["paiban_vertical"].getChildByName("text").setString("无特效");
            this.checkboxs_gamesetting["paiban_vertical"].setVisible(is);

            if (MJModel.mj_font == "gexing") {
                this.checkboxs_gamesetting["fontSize_dahao"].setVisible(false);
                MJModel.mj_fontSize = "biaozhun";
            }
            else {
                this.checkboxs_gamesetting["fontSize_dahao"].setVisible(true);
            }
        };
        //特效两套
        MJTips.prototype.showSimpleEffect = function (pos, out_pos, type, effect, hold) {
            try {
                MJModel.mj_table.effectType = getItem("shanxieffectType");
                if (MJModel.mj_table.effectType == null) {
                    MJModel.mj_table.effectType = "horizontal";
                }
                if (MJModel.mj_table.effectType == "horizontal") {
                    if (hold == undefined)hold = false;
                    var begin = MJConfig.getOperatorTipPos(pos);
                    var path = null;
                    var parentPath = "RoomMJ/simple/";
                    if (effect == "qiangganghu") {
                        hold = true;
                        path = getResPath(parentPath + "qiangganghu.png");
                    } else if (effect == "dianpao") {
                        hold = true;
                        path = getResPath(parentPath + "dianpao.png");
                    } else if (effect == "haidi") {
                        path = getResPath(parentPath + "haidi.png");
                    } else if (effect == "baoting") {
                        path = getResPath(parentPath + "baoting.png");
                    } else if (effect == "buzhang") {
                        path = getResPath(parentPath + "buzhang.png");
                    } else if (effect == "genzhuang") {
                        var size = cc.director.getWinSize();
                        begin = cc.p(size.width / 2, size.height / 2);
                        path = getResPath(parentPath + "genzhuang.png");
                    } else if (type == ActionType.TYPE_PENG) {
                        path = getResPath(parentPath + "peng.png");
                    } else if (type == ActionType.TYPE_HU) {
                        hold = true;
                        if (effect == "zimo") {
                            path = getResPath(parentPath + "zimo.png");
                        } else {
                            if (pos != out_pos) {
                                this.showSimpleEffect(out_pos, null, null, "dianpao");
                            }
                            path = getResPath(parentPath + "hu.png");
                        }
                    } else if (type == ActionType.TYPE_LEFT_CHI || type == ActionType.TYPE_CENTER_CHI || type == ActionType.TYPE_RIGHT_CHI) {
                        path = getResPath(parentPath + "chi.png");
                    } else {
                        path = getResPath(parentPath + "gang.png");
                    }

                    var bg = new cc.Sprite(getResPath(parentPath + "bg.png"));
                    bg.setPosition(begin);
                    bg.setName("hu_effect");
                    // this.addChild(bg, 10000);

                    var sp = new cc.Sprite(path);
                    sp.setPosition(begin);
                    sp.setName("hu_effect");
                    this.addChild(sp, 10000);

                    if (hold) {
                        // bg.runAction(cc.sequence(cc.delayTime(this.getHuEffectTime()), cc.removeSelf()));
                        sp.runAction(cc.sequence(cc.delayTime(this.getHuEffectTime()), cc.removeSelf()));
                    } else {
                        // bg.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
                        sp.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
                    }
                }
                else {
                    var sp = null;
                    var effect = null;
                    var begin;
                    var end;
                    var size = cc.director.getWinSize();

                    begin = MJConfig.getOperatorTipPos(pos);
                    ccs.armatureDataManager.addArmatureFileInfo(getResPath("RoomMJ/effect2/newpeng/peng.ExportJson"));
                    ;
                    var armature = new ccs.Armature("peng");
                    var name = "";
                    if (type == ActionType.TYPE_PENG) {
                        name = "peng";
                    }
                    else if (type == ActionType.TYPE_HU) {
                        name = "hu";

                    }
                    else if (type == ActionType.TYPE_LEFT_CHI || type == ActionType.TYPE_CENTER_CHI || type == ActionType.TYPE_RIGHT_CHI) {
                        name = "chi";
                    }
                    else {
                        name = "gang";
                    }
                    if (armature != null && name != "") {
                        animation = armature.getAnimation();
                        if (animation) {
                            if (typeof animation.playWithIndex === "function") {
                                animation.play(name);
                                armature.setPosition(begin);
                                this.addChild(armature, 10000);
                            }
                        }

                        var callback = cc.callFunc(function () {
                            armature.getAnimation().gotoAndPause(30);
                        });

                        if (type == ActionType.TYPE_HU) {
                            armature.runAction(cc.sequence(cc.delayTime(0.4), callback, cc.delayTime(this.getHuEffectTime()), cc.removeSelf()));
                        } else {
                            armature.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
                        }
                        armature.setName("hu_effect");
                        return armature;

                    }


                }

            } catch (e) {
                Log(this, e);
            }
            return null;
        };

        //湖北麻将不要自动胡牌功能
        MJAction.prototype.setAutoOutCardVis = function (value) {
        };

        MJAction.prototype.setOperator = function (operat) {
            this.removeChildByName("ChooseGang_selectLayer");
            if (operat == -1 || operat == 0 || operat == null || operat == undefined) {
                for (var i = 0; i < this.opBtns.length; i++) {
                    this.opBtns[i].setVisible(false);
                }
                MJModel.curOperate = -1;
                return false;
            }

            MJModel.curOperate = operat;


            if (this.actions["pass"]) {
                this.actions["pass"].setVisible(true);
            }

            if ((operat & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                if (this.actions["hu"]) {
                    this.actions["hu"].setVisible(true);
                }
            }

            if ((operat & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG || (operat & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (operat & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                if (((operat & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG || (operat & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) && MJModel.gang_info.length > 0) {
                    for (var i = 0; i < MJModel.gang_info.length; i++) {
                        var card = new MJCard();
                        card.setValue(MJModel.gang_info[i].curCard, 0, CardType.Card_End, 0);
                        this.actions["gang" + i].addChild(card);
                        card.setScale(0.8);
                        card.setMyPosition(cc.p(190, 70))
                        this.actions["gang" + i].setVisible(true)
                    }
                } else {
                    if (this.actions["gang"]) {
                        this.actions["gang"].setVisible(true);
                    }

                }
            }

            if ((operat & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                if (this.actions["peng"]) {
                    this.actions["peng"].setVisible(true);
                }
            }

            if ((operat & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (operat & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI || (operat & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                if (this.actions["chi"]) {
                    this.actions["chi"].setVisible(true);
                }
            }

            this.reflashOpBtns();
            return true;


        };

        MJAction.prototype.btnCallback = function (ref) {

            var n = ref;
            var name = n.getName();
            Log(this, "btnCallback:" + name);
            var self = this;

            if (name == "pass" || name == "hu" || name == "gang" || name == "gang0" || name == "gang1" || name == "gang2" || name == "peng" || name == "chi" || name == "huaHu") {
                var type = 0;
                if (name == "pass") {
                    type = ActionType.TYPE_PASS;
                    var op = MJModel.curOperate;
                    var card = MJModel.curOperateCard;
                    var hasGang = false;
                    var hasHu = false;

                    if ((op & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                        hasHu = true;
                    }
                    if (MJModel.needTipWhenPass == 1 && (hasHu)) {
                        var checkLayer = new PassWarn();
                        checkLayer.setChoiceInfos(hasGang, hasHu);
                        checkLayer.setName("checkLayer_selectLayer");
                        checkLayer.setCallback(function () {
                            sendOperateCard(type, card);
                            self.setOperator(-1);
                            self.removeChildByName("checkLayer_selectLayer");
                        });
                        this.addChild(checkLayer, 10000);
                        return;
                    }
                    sendOperateCard(type, card);
                    this.setOperator(-1);
                    return;
                }
                if (name == "hu") type = ActionType.TYPE_HU;
                if (name == "peng") type = ActionType.TYPE_PENG;
                if (name == "huaHu") type = ActionType.TYPE_HUA_HU;
                if (name == "gang0" || name == "gang1" || name == "gang2") {
                    if (MJModel.gang_info.length > 0) {
                        if (name == "gang0") gangindex = 0;
                        if (name == "gang1") gangindex = 1;
                        if (name == "gang2") gangindex = 2;
                        type = MJModel.gang_info[gangindex].state;
                        MJModel.curOperateCard = MJModel.gang_info[gangindex].curCard;
                    } else {
                        var op = MJModel.curOperate;
                        type = ActionType.TYPE_ZHIGANG;
                        if ((op & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG)type = ActionType.TYPE_WANGANG;
                        if ((op & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG)type = ActionType.TYPE_ANGANG;
                    }
                }
                if (name == "gang") {
                    var op = MJModel.curOperate;
                    type = ActionType.TYPE_ZHIGANG;

                    if ((op & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
                        type = ActionType.TYPE_WANGANG;
                    }
                    else if ((op & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                        type = ActionType.TYPE_ANGANG;
                    }
                }

                if (name == "chi") {
                    var op = MJModel.curOperate;
                    var op_nums = 0;
                    var op_type = ActionType.TYPE_LEFT_CHI;
                    if ((op & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                        op_nums++;
                        op_type = ActionType.TYPE_LEFT_CHI;
                    }
                    if ((op & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                        op_nums++;
                        op_type = ActionType.TYPE_CENTER_CHI;
                    }
                    if ((op & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                        op_nums++;
                        op_type = ActionType.TYPE_RIGHT_CHI;
                    }

                    if (op_nums > 1) {
                        var selectLayer = new ChooseChi();
                        selectLayer.setChoiceInfos(MJModel.curOperate, MJModel.curOperateCard)
                        selectLayer.setName("ChooseGang_selectLayer");
                        selectLayer.setPosition(cc.p(n.getPosition().x, n.getPosition().y + 50));
                        selectLayer.setCallback(function (type) {
                            sendOperateCard(type, MJModel.curOperateCard);
                            self.setOperator(-1);
                            self.removeChildByName("ChooseGang_selectLayer");
                        });
                        this.addChild(selectLayer, 10000);
                        return;
                    }
                    type = op_type;
                }
                var card = MJModel.curOperateCard;
                sendOperateCard(type, card);
                this.setOperator(-1);
                return;
            }

            if (this.callback) this.callback(name);
        };

        MJCards.prototype.sortCard = function (a, b) {
            return self._sortCard(a, b);
        };
        //修改玩家位置
        MJConfig.getPlayerPos = function (index) {
            var point = this.getWorldPosition("player", "player" + index);
            if (index == 3) {
                point.y += 30;
            }
            if (index == 2) {
                point.x = cc.director.getWinSize().width - 280;
            }
            return point;
        };

        BigFaceMenu.prototype.getIconsIndexArray = function (seatid) {
            var icons = [14, 15, 16, 17, 18, 19];//需要显示的动画表情
            return icons;
        };


    },
    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        //
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.shanximj.tagCDGameScence", jpacket);
            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.shanximj.AckCDGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == SHANXI_SERVER_CMD.SERVER_SHANXI_START_PAOZI) {
            this._handler_server_start_piao(jpacket, canDelay);
            return;
        }
        if (cmd == SHANXI_SERVER_CMD.SERVER_SHANXI_USER_XIAPAOZI_DONE) {
            this._handler_server_piaoOk(jpacket, canDelay);
            return;
        }
        if (cmd == SHANXI_SERVER_CMD.SERVER_SHANXI_CLIENT_LAIZIPAI) {
            this.handler_server_get_guipai(jpacket, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
        }

        this._super(cmd, jpacket, canDelay, svrid);
    },
    timeEnd: function (dt) {
        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    },
    _handler_game_record: function (data, canDelay) {
        //-----新总结算界面
        cc.log("-_handler_game_record-");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var gameType = "陕西麻将(经典玩法)";
        if (this._pkg_id == 2117 || this._pkg_id == 1999) {
            //经典玩法3人
            gameType = "陕西麻将(经典玩法) · 3人";
        }
        if (this._pkg_id == 3530 ) {
            //经典玩法2人
            gameType = "陕西麻将(经典玩法) · 2人";
        }
        if (this._pkg_id == ShanxiPackgName.zidingyi) {
            gameType = "陕西麻将(自定义玩法)";
        }
        if (this._pkg_id == 2362 || this._pkg_id == 2299) {
            gameType = "陕西麻将(3人双色玩法)";

        }
        if (this._pkg_id == 2361 || this._pkg_id == 2298) {
            gameType = "陕西麻将(2人单色玩法)";
        }
        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }

        for (var i = 0; i < gameRecord.MostWinScoreUser.length; i++) {
            var seatId = gameRecord.MostWinScoreUser[i];
            if (seatId != 255) {
                _winSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            var player = MJModel.players[i];
            var arrStr = ["坐庄次数", "胡牌次数", "赢分次数", "超时次数"];
            var arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.WinCounts, recoreInfo.outtime_num];

            if (player && player.uid != -1) {
                addX = 39 + (i * 302);
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, _winSeatid[i], _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }

            if (recoreInfo.totalscore != 0) {
                has_result = true;
            }

        }
        bigResult.refresh(PlayerNumber);

        this.release();
    },
    resetGame: function (allClean) {
        this._super(allClean);
        this._setLaizi(0);
        this._clearAllScore();
        this.gameending = false;
    },
    handler_gang_scores: function (scores, OpType, OpType2, canDelay) {
        if (this._isgang) {
            this._super(scores, OpType, OpType2, canDelay);
        }
    },
    handler_out_card_sound: function (sex, card) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.mj_sound_use == 1) {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
        } else {
            this._super(sex, card);
        }
    },
    //
    handler_op_sound: function (pos, sex, OpType, OpType2, effect) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.mj_sound_use == 1) {

        } else {
            this._super(pos, sex, OpType, OpType2, effect);
        }
    },

    handler_server_scene_info_uc: function (shanxi_gameScene, canDelay) {
        var ackGameFree = shanxi_gameScene.GameSence;
        var sceneStatus = ackGameFree.SceneStatus;
        if (sceneStatus != 0) {
            //恢复癞子
            if (shanxi_gameScene.laizipai) {
                this._curLaizi = shanxi_gameScene.laizipai;

                if (this._curLaizi > 0 && this._curLaizi != 255) {
                    var curLaizi = this._curLaizi;
                    this._setLaizi(curLaizi);
                }
            }
        }
        if (ackGameFree.RoomConfigID.indexOf(2000002) != -1)MJModel.changMode = 1;
        if (ackGameFree.RoomConfigID.indexOf(2000003) != -1)MJModel.changMode = 3;
        this._super(ackGameFree, canDelay);
        this._setGameType();
        this.mPaoBar.setVisible(false);
        for (var i = 0; i < shanxi_gameScene.paozi.length; i++) {
            var piao = shanxi_gameScene.paozi[i];
            var pos = MJModel.getPosBySeatid(i);
            if (piao != 255) this._setScore(pos, piao);
        }

        if (sceneStatus != 0) {
            for (var i = 0; i < shanxi_gameScene.xiapaoziisok.length; i++) {
                var pos = MJModel.getPosBySeatid(i);
                if (pos == 0 && shanxi_gameScene.xiapaoziisok[i] == 0) {
                    this.mPaoBar.setVisible(true);
                }
            }
        }
    },

    handler_server_out_card_bc: function (data, canDelay) {
        try {
            this._super(data, canDelay);
            var userOutCard = parsePacket("proto.game.AckUserOutCard", data);
            var seatId = userOutCard.ChairID;
            var can_show_listen_info = true;
            for (var j = 0; j < MJModel.final_listen_info.length; j++) {
                if (MJModel.final_listen_info[j].Card == 255) {
                    can_show_listen_info = false;
                    break;
                }
            }
            if (MJModel.isMyPlayer(seatId))MJModel.mj_table.removeChildByName("tingpai_layer");
            if (MJModel.final_listen_info.length > 0 && can_show_listen_info && MJModel.isMyPlayer(seatId)) {
                MJModel.mj_listenLayer_autoshow = true;
                var selectLayer = new TingPaiLayer();
                selectLayer.show2(MJModel.final_listen_info);
                selectLayer.setName("tingpai_layer");
                MJModel.mj_table.addChild(selectLayer, 100);//一定要在MJAction下边
            } else {
                cc.eventManager.dispatchCustomEvent("tingpai_info_notice_reflash");
            }

            if (MJModel.isOnVideo) {
                this.room_Action.setOperator(-1);
            }
        } catch (e) {
            Log(this, e);
        }
        if (MJModel.isMyPlayer(seatId) && this.room_Card.isDuoPai(0) && !MJModel.isOnVideo) {
            if (MJModel.isLogOut)return;
            MJModel.isLogOut = true;

            MJModel.mj_table.release();
            ZJHModel.getInstance().roomToHall();
            ERROR(this, "error no the card:");
            PlatformHelper.showToast("数据错误，请勿进行违规操作");
        }
    },

    handler_server_peng_kang_bc: function (data, canDelay) {
        this._super(data, canDelay);
        var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);
        var seatid = ackBcOpResult.ChairID;
        if (MJModel.isMyPlayer(seatid)) {
            MJModel.mj_table.removeChildByName("tingpai_layer");
        } else {
            cc.eventManager.dispatchCustomEvent("tingpai_info_notice_reflash");
        }
    },

    _setGameType: function () {
        //新余麻将
        MJModel.play_id_str = [];
        if (MJModel.RoomConfigID.indexOf(1121001) != -1) {
            MJModel.play_id_str.push("可以炮胡");
        }
        if (MJModel.RoomConfigID.indexOf(1121002) != -1) {
            MJModel.play_id_str.push("只炸不胡");
        }
        if (MJModel.RoomConfigID.indexOf(1122001) != -1) {
            MJModel.play_id_str.push("带风牌");
        }
        if (MJModel.RoomConfigID.indexOf(1122002) != -1) {
            MJModel.play_id_str.push("带红中赖子");
        }
        if (MJModel.RoomConfigID.indexOf(1122003) != -1) {
            MJModel.play_id_str.push("可胡七对");
        }
        if (MJModel.RoomConfigID.indexOf(1122004) != -1) {
            MJModel.play_id_str.push("可一炮多响");
        }
        if (MJModel.RoomConfigID.indexOf(1312001) != -1) {
            MJModel.play_id_str.push("可先碰再续杠");
        }
        if (MJModel.RoomConfigID.indexOf(1312002) != -1) {
            MJModel.play_id_str.push("可碰过后不能续杠");
        }
        if (MJModel.RoomConfigID.indexOf(1312003) != -1) {
            MJModel.play_id_str.push("只能杠");
        }
        if (MJModel.RoomConfigID.indexOf(1313001) != -1) {
            MJModel.play_id_str.push("明杠1倍，暗杠2倍");
        }
        if (MJModel.RoomConfigID.indexOf(1313002) != -1) {
            MJModel.play_id_str.push("明杠暗杠均1倍");
        }
        if (MJModel.RoomConfigID.indexOf(1313003) != -1) {
            MJModel.play_id_str.push("杠无分");
        }
        if (MJModel.RoomConfigID.indexOf(1314001) != -1 || MJModel.RoomConfigID.indexOf(1314003) != -1) {
            MJModel.play_id_str.push("杠随胡走");
        }
        if (MJModel.RoomConfigID.indexOf(1314002) != -1 || MJModel.RoomConfigID.indexOf(1314004) != -1) {
            MJModel.play_id_str.push("杠立即算");
            this._isgang = true;
        }
        if (MJModel.RoomConfigID.indexOf(1315001) != -1) {
            MJModel.play_id_str.push("不留牌");
        }
        if (MJModel.RoomConfigID.indexOf(1315002) != -1) {
            MJModel.play_id_str.push("留7敦");
        }
        if (MJModel.RoomConfigID.indexOf(1315003) != -1) {
            MJModel.play_id_str.push("留10敦");
        }
        if (MJModel.RoomConfigID.indexOf(1316001) != -1) {
            MJModel.play_id_str.push("258将");
        }
        if (MJModel.RoomConfigID.indexOf(1316002) != -1) {
            MJModel.play_id_str.push("缺一门");
        }
        if (MJModel.RoomConfigID.indexOf(1316003) != -1) {
            MJModel.play_id_str.push("带风牌");
        }
        if (MJModel.RoomConfigID.indexOf(1316004) != -1) {
            MJModel.play_id_str.push("庄家输赢翻倍");
        }
        if (MJModel.RoomConfigID.indexOf(1327005) != -1) {
            MJModel.play_id_str.push("庄家不加倍");
        } else {
            //MJModel.play_id_str.push("庄家加倍");
        }
        if (MJModel.RoomConfigID.indexOf(1316005) != -1) {
            MJModel.play_id_str.push("可一炮多响");
        }
        if (MJModel.RoomConfigID.indexOf(1317001) != -1) {
            MJModel.play_id_str.push("不可胡七对");
        }
        if (MJModel.RoomConfigID.indexOf(1317002) != -1) {
            MJModel.play_id_str.push("可胡七对(加倍)");
        }
        if (MJModel.RoomConfigID.indexOf(1317003) != -1) {
            MJModel.play_id_str.push("可胡七对(不加倍)");
        }
        if (MJModel.RoomConfigID.indexOf(1318001) != -1) {
            MJModel.play_id_str.push("点炮收一家");
        }
        if (MJModel.RoomConfigID.indexOf(1318002) != -1) {
            MJModel.play_id_str.push("点炮收三家");
        }
        if (MJModel.RoomConfigID.indexOf(1325001) != -1) {
            MJModel.play_id_str.push("258硬将");
        }
        if (MJModel.RoomConfigID.indexOf(1326001) != -1) {
            MJModel.play_id_str.push("0炮");
        }
        if (MJModel.RoomConfigID.indexOf(1326002) != -1) {
            MJModel.play_id_str.push("1炮");
        }
        if (MJModel.RoomConfigID.indexOf(1326003) != -1) {
            MJModel.play_id_str.push("2炮");
        }
        if (MJModel.RoomConfigID.indexOf(1326004) != -1) {
            MJModel.play_id_str.push("3炮");
        }
        if (MJModel.RoomConfigID.indexOf(1326005) != -1) {
            MJModel.play_id_str.push("4炮");
        }
        if (MJModel.RoomConfigID.indexOf(1326006) != -1) {
            MJModel.play_id_str.push("自由炮");
        }
        if (MJModel.RoomConfigID.indexOf(1327001) != -1) {
            MJModel.play_id_str.push("七对加倍");
        }
        if (MJModel.RoomConfigID.indexOf(1327002) != -1) {
            MJModel.play_id_str.push("清一色加倍");
        }
        if (MJModel.RoomConfigID.indexOf(1327003) != -1) {
            MJModel.play_id_str.push("胡258加番");
        }
        if (MJModel.RoomConfigID.indexOf(1327004) != -1) {
            MJModel.play_id_str.push("将258加番");
        }
        if (MJModel.RoomConfigID.indexOf(1328001) != -1) {
            MJModel.play_id_str.push("1分");
        }
        if (MJModel.RoomConfigID.indexOf(1328002) != -1) {
            MJModel.play_id_str.push("2分");
        }
        if (MJModel.RoomConfigID.indexOf(1328003) != -1) {
            MJModel.play_id_str.push("5分");
        }
        //单色麻将和双色麻将的配置
        if (MJModel.RoomConfigID.indexOf(1157001) != -1) {
            MJModel.play_id_str.push("普通平胡");
        }
        if (MJModel.RoomConfigID.indexOf(1157002) != -1) {
            MJModel.play_id_str.push("只炸不胡");
        }
        if (MJModel.RoomConfigID.indexOf(1158001) != -1) {
            MJModel.play_id_str.push("清一色加番");
        }
        if (MJModel.RoomConfigID.indexOf(1158002) != -1) {
            MJModel.play_id_str.push("带红中赖子");
        }
        if (MJModel.RoomConfigID.indexOf(1158003) != -1) {
            MJModel.play_id_str.push("带风牌");
        }
        if (MJModel.RoomConfigID.indexOf(1159001) != -1) {
            MJModel.play_id_str.push("可胡七对(加番)");
        }
        if (MJModel.RoomConfigID.indexOf(1159002) != -1) {
            MJModel.play_id_str.push("可胡七对(不加番)");
        }
        if (MJModel.RoomConfigID.indexOf(1160001) != -1) {
            MJModel.play_id_str.push("1分");
        }
        if (MJModel.RoomConfigID.indexOf(1160002) != -1) {
            MJModel.play_id_str.push("2分");
        }
        if (MJModel.RoomConfigID.indexOf(1160003) != -1) {
            MJModel.play_id_str.push("5分");
        }

        if (MJModel.RoomConfigID.indexOf(1162001) != -1) {
            MJModel.play_id_str.push("0炮");
        }
        if (MJModel.RoomConfigID.indexOf(1162002) != -1) {
            MJModel.play_id_str.push("1炮");
        }
        if (MJModel.RoomConfigID.indexOf(1162003) != -1) {
            MJModel.play_id_str.push("2炮");
        }
        if (MJModel.RoomConfigID.indexOf(1162004) != -1) {
            MJModel.play_id_str.push("3炮");
        }
        if (MJModel.RoomConfigID.indexOf(1162005) != -1) {
            MJModel.play_id_str.push("4炮");
        }
        if (MJModel.RoomConfigID.indexOf(1162006) != -1) {
            MJModel.play_id_str.push("自由炮");
        }
        if (MJModel.RoomConfigID.indexOf(1152001) != -1) {
            MJModel.play_id_str.push("条");
        }
        if (MJModel.RoomConfigID.indexOf(1152002) != -1) {
            MJModel.play_id_str.push("筒");
        }
        if (MJModel.RoomConfigID.indexOf(1152003) != -1) {
            MJModel.play_id_str.push("万");
        }

        var gameDes = "";
        for (var i = 0; i < MJModel.play_id_str.length; i++) {
            gameDes += MJModel.play_id_str[i];
            if (i != MJModel.play_id_str.length - 1) {
                gameDes += " ";
            }
        }

        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);
    },

    _setLaizi: function (laizi) {
        if (laizi == 0 || this._curLaizi == 255) {
            if (this._curLaizi_bg) this._curLaizi_bg.setVisible(false);
            return;
        }
        if (this._curLaizi_bg == null) {
            this._curLaizi_bg = new cc.Sprite(getResPath("shanximj/guipai_bg.png"));
            this._curLaizi_bg.setPosition(cc.p(64, 570));
            this.addChild(this._curLaizi_bg);
        }
        this._curLaizi_bg.removeAllChildren();
        this._curLaizi_bg.setVisible(true);
        var _curLaizi = laizi;
        var size = cc.director.getWinSize();
        if (_curLaizi > 0) {
            var laizi_tip = new cc.Sprite(getResPath("shanximj/lai_tip.png"));
            laizi_tip.setPosition(cc.p(32, this._curLaizi_bg.getContentSize().height / 2 + 3));
            this._curLaizi_bg.addChild(laizi_tip);

            var card = new MJCard();
            card.setValue(laizi, 0, CardType.Card_Out, 0);
            card.setPosition(cc.p(80, this._curLaizi_bg.getContentSize().height / 2));
            //card.setScaleX(32 / 86);
            //card.setScaleY(45 / 163);
            card.setScale(0.7);
            this._curLaizi_bg.addChild(card);
        }
    },
    handler_server_get_guipai: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.shanximj.AckLaiziPai", data);
        if (!jpacket.LaiziPai)return;
        this._curLaizi = jpacket.LaiziPai;
        if (this._curLaizi > 0 && this._curLaizi != 255) {
            this._setLaizi(this._curLaizi);
            this._showHandcardFlag(false);
            var mo_card = null;
            if (this.room_Card.isDuoPai(0)) {
                mo_card = this.room_Card.hand_card[0][this.room_Card.hand_card[0].length - 1];
                this.room_Card.hand_card[0].splice(this.room_Card.hand_card[0].length - 1, 1);
            }
            this.room_Card.reflashHandCard(0, true);
            if (mo_card) {
                mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                this.room_Card.hand_card[0].push(mo_card);
            }
        }
    },
    _showHandcardFlag: function (isEndShow) {
        var allcards = this.room_Card.hand_card[0];
        if (allcards) {
            for (var i = 0; i < allcards.length; i++) {
                var card = allcards[i];
                this._checkAddCardFlag(card);
            }
        }
    },
    _checkAddCardFlag: function (card) {
        try {
            if (card.pos != 0)return;
            if (card.value == 0)return;
            if (card.type != CardType.Card_Hand && card.type != CardType.Card_End) return;
            var isEnd = (card.type == CardType.Card_End);
            card.removeChildByName("hubei_flag");
            var flag = null;
            if (card.getValue() == this._curLaizi) {
                flag = new cc.Sprite(getResPath("shanximj/lai_flag.png"));
            }
            if (flag) {
                flag.setAnchorPoint(cc.p(0, 0));
                flag.setPosition(cc.p(2, isEnd ? 30 : 3));
                flag.setName("hubei_flag");
                card.addChild(flag);
            }
        } catch (e) {
            cc.log("_checkAddCardFlag", e);
        }
    },
    _handler_server_start_piao: function (data, canDelay) {
        var piaoInfo = parsePacket("proto.game.shanximj.StartXiaPaoZi", data);
        this.room_Info.showTime(1);
        if (MJModel.seatid != -1 && canDelay) {
            //var broadPiao = parsePacket("proto.game.sxmahjonggame.AckStartPiao", data);
            this.mPaoBar.setVisible(true);
        }
    },
    _handler_server_piaoOk: function (data, canDelay) {
        var broadPiao = parsePacket("proto.game.shanximj.AckXiaPaoZiOk", data);
        var seatId = broadPiao.ChairID;
        var pao_nums = broadPiao.PaoZi;
        var pos = MJModel.getPosBySeatid(seatId);
        this._setScore(pos, pao_nums);
        if (MJModel.isOnVideo && pos == 0) {
            if (canDelay) this.mPaoBar.setVisible(false);
        }
    },

    handler_server_game_start_bc2: function (data, canDelay) {
        this._super(data, canDelay);
        if (MJModel.seatid != -1 && canDelay) {
            this.mPaoBar.setVisible(false);
        }
    },
    _clearAllScore: function () {
        try {
            for (var i = 0; i < this._allBeiShu.length; i++) {
                var iscore = this._allBeiShu[i];
                if (iscore) {
                    iscore.setVisible(false);
                }
            }
        } catch (e) {

        }
    },
    reflashSetting: function (isInit) {
        this.updateBg(isInit);
        this.updateScorePos();
    },
    updateScorePos: function () {
        for (var i = 0; i < 4; i++) {
            var pos = i;
            var iscore = this._allBeiShu[pos];
            if (iscore != null) {
                var ppos = MJConfig.getPlayerPos(pos);
                iscore.setPosition(cc.p(pos == 2 ? ppos.x + 75 : ppos.x, pos == 2 ? ppos.y - 50 : ppos.y + 70));
            }
        }
    },
    _setScore: function (pos, score) {
        if (score < 0 || score > 4 || score == null) {
            return
        }
        try {
            var iscore = this._allBeiShu[pos];
            if (iscore == null) {
                var bei = new cc.Sprite(getResPath("shanximj/pao/pao_" + score + ".png"));
                if (!bei)return;
                var ppos = MJConfig.getPlayerPos(pos);
                bei.setPosition(cc.p(pos == 2 ? ppos.x + 75 : ppos.x, pos == 2 ? ppos.y - 50 : ppos.y + 70));
                this.addChild(bei, 100);
                //var str = "" + score;
                //var label = new cc.LabelAtlas(str, getResPath("shanximj/pao/selectPaoNum.png"), 17, 24, '0');
                //label.setPosition(cc.p(31 + 0, 26));
                //label.setAnchorPoint(cc.p(0, 0.5));
                //label.setColor(cc.color(255, 200, 9));
                //label.setName("label");
                ////label.setVisible(false);
                //bei.addChild(label);

                this._allBeiShu[pos] = bei;
            } else {
                iscore.setTexture(getResPath("shanximj/pao/pao_" + score + ".png"));
                iscore.setVisible(true);
            }
        } catch (e) {

        }
    },
    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.getValue();
            if (typeof b === "object") bv = b.getValue();
            if (av == this._curLaizi && bv != this._curLaizi)return 1;//赖子放在最前边
            if (av != this._curLaizi && bv == this._curLaizi)return -1;//赖子放在最前边
            return bv - av;
        } catch (e) {
            return 0;
        }
    },

    onPaoClick: function (ref) {
        var nums = ref.getTag();
        if (this.mPaoBar) {
            this.mPaoBar.setVisible(false);
        }

        sendPaoNums(nums);
    },
    _ResultAddHandCardFlag: function (card) {
        try {
            card.removeChildByName("hubei_flag2");
            var flag = null;
            if (card.getValue() == this._curLaizi) {
                flag = new cc.Sprite(getResPath("shanximj/lai_flag.png"));
            }
            if (flag) {
                flag.setAnchorPoint(cc.p(0, 0));
                flag.setPosition(cc.p(10, 30));
                flag.setName("hubei_flag2");
                card.addChild(flag);
            }
        } catch (e) {

        }
    },
    //自动准备
    //handlerAutoUpTableReady: function (nums, selfIsReady) {
    //    if (MJModel.seatid == -1 && nums < 4) {
    //        this.actionCallBack("uptable");
    //    }
    //    else if (selfIsReady == false) {
    //        if (MJModel.canQuxiaoZhun()) {
    //            if (MJModel.roomState != 0) this.actionCallBack("ready");
    //        } else {
    //            this.actionCallBack("ready");
    //        }
    //    }
    //},
});

var SX_CLIENT_CMD = {
    CLIENT_MJ_CHOOSE_PIAO: 1112,
};

var sendPaoNums = function (v) {
    var packet = createPacket("proto.game.shanximj.ReqXiaPaoZi");
    packet.PaoZi = v;
    sendPacket(packet, SX_CLIENT_CMD.CLIENT_MJ_CHOOSE_PIAO);
};

var AddFanType = {
    77: "胡258",
    78: "将258",
    14: "清一色",
    17: "平胡",
    25: "清一色七对",
    36: "七对",
};

var MJResult_XinYu = MJCommonResult.extend({
    updateContentView: function (ackGameEndJS) {
        this.ackGameEnd = ackGameEndJS.gameend;
        this.shanxiGameEnd = ackGameEndJS;
        //输赢标志
        var seatId = MJModel.seatid;
        var score = this.ackGameEnd.Score[seatId];
        var effectName = "lose";
        if (score > 0) {
            effectName = "win";
        }
        this._win_effect(effectName);

        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);

        var itemHeight = 120;

        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;

            var countY = m;

            if (MJModel.mj_roomType == 1) {
                if (pos == 2) {
                    continue;
                }
            }

            if (MJModel.mj_roomType == 2) {
                if (pos == 1 || pos == 3) {
                    continue;
                }

                if (pos == 0) {
                    countY = 1;
                } else if (pos == 2) {
                    countY = 2;
                }
            }

            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 495 - count * itemHeight;
            var startX = 40;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX + 60, startY + 55));
            this.bgSpr.addChild(headLayer, 10);

            //上排牌 杠
            var ganghuLayer = this.createGangHuLayer(seatid);
            this.bgSpr.addChild(ganghuLayer, 10);
            ganghuLayer.setPosition(cc.p(startX + 230, startY + 65));

            //下排牌
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX + 0, startY));
            this.bgSpr.addChild(handCardLayer);

            // this.createSpecialHuTip(startX + 785, startY + 40, seatid);
            this.createSpecialHuTip(startX + 900, startY + 40, seatid);

            // 输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX + 1100, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            //中马列表
            var maLayer = this.createMaLayer(seatid);
            if (maLayer) {
                maLayer.setPosition(cc.p(startX + 845, startY + 85));
                this.bgSpr.addChild(maLayer);
            }
            count++;
        }
    },

    createGangHuLayer: function (seatid) {
        var layer = new cc.Layer();
        var x = 0;
        var y = 0;
        var sxendInfo = this.shanxiGameEnd;
        //庄家加倍
        if (MJModel.banker_seatid == seatid) {
            var str = "[庄家加倍]";
            if (MJModel.RoomConfigID.indexOf(1327005) != -1)str = "[庄家不加倍]";
            var banker = new cc.LabelTTF(str, "Arial", 20);
            banker.setColor(this.leftColor);
            banker.setAnchorPoint(cc.p(0, 0));
            banker.setPosition(cc.p(x, y + 10));
            layer.addChild(banker);

            x += banker.getContentSize().width + 5;
        }
        //炮
        if (sxendInfo.paozi[seatid] && sxendInfo.paozi.length > seatid) {
            cc.log("--sxendInfo.paozi[seatid]" + sxendInfo.paozi[seatid]);
            if (sxendInfo.paozi[seatid] > 0) {
                var str = this.getPaoTip(sxendInfo.paozi[seatid]);
                var pao = new cc.LabelTTF(str, "Arial", 20);
                pao.setColor(this.leftColor);
                pao.setAnchorPoint(cc.p(0, 0));
                pao.setPosition(cc.p(x, y + 10));
                layer.addChild(pao);

                x += pao.getContentSize().width + 5;
            }
        }
        if (this.ackGameEnd.EndGangInfo.length > seatid) {
            var gameEndInfo = this.ackGameEnd.EndGangInfo[seatid];
            var map = {};
            for (var i = 0; i < gameEndInfo.Gang.length; i++) {
                var gang = gameEndInfo.Gang[i];
                if (map[gang.GangType] == undefined) {
                    map[gang.GangType] = [];
                }
                map[gang.GangType].push(gang.GangCard);
            }
            for (var key in map) {
                if (!map.hasOwnProperty(key))continue;
                var a = key;
                var typeLabel = new cc.LabelTTF(this.getStringByType(a), "Arial", 20);
                typeLabel.setColor(this.leftColor);
                typeLabel.setAnchorPoint(cc.p(0, 0));
                typeLabel.setPosition(cc.p(x, y + 10));
                layer.addChild(typeLabel);

                x += typeLabel.getContentSize().width;

                var temp = map[key];
                for (var j = 0; j < temp.length; j++) {
                    var smallCard = null;
                    var c = Utils.toHex2(temp[j]);
                    smallCard = new cc.Sprite(__String.createWithFormat(getResPath("shanximj/smallCard/%1.png"), c));
                    if (smallCard != undefined) {
                        smallCard.setAnchorPoint(cc.p(0.0, 0.0));
                        smallCard.setPosition(cc.p(x, y));
                        layer.addChild(smallCard);
                    }
                    x += 28;
                    if (j == temp.length - 1) {
                        x += 20;
                    }
                }
            }
        }
        x += 10;
        //杠牌分
        if (sxendInfo.gangfen[seatid]) {
            var txt = "杠牌分  +";
            if (sxendInfo.gangfen[seatid] < 0) {
                txt = "杠牌分  ";
            }
            var gangfen = new cc.LabelTTF(txt + sxendInfo.gangfen[seatid], "Arial", 20);
            gangfen.setColor(this.leftColor);
            gangfen.setAnchorPoint(cc.p(0, 0));
            gangfen.setPosition(cc.p(x, y + 10));
            layer.addChild(gangfen);
            x += gangfen.getContentSize().width + 10;
        }

        var addfan = this.ackGameEnd.faninfo[seatid].addfan;
        if (addfan) {
            for (var i = 0; i < addfan.length; i++) {
                if (AddFanType[addfan[i].AddType]) {
                    var fanType = new cc.LabelTTF(AddFanType[addfan[i].AddType], "Arial", 20);
                    fanType.setColor(this.leftColor);
                    fanType.setAnchorPoint(cc.p(0, 0));
                    fanType.setPosition(cc.p(x, y + 10));
                    layer.addChild(fanType);
                    x += fanType.getContentSize().width + 10;
                }
            }
        }
        return layer;
    },

    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var path = "";
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];
            //单色双色玩法改了，需与服务器对应
            if (this._pkg_id == 2361 || this._pkg_id == 2362 || this._pkg_id == 2299 || this._pkg_id == 2298) {
                //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5抢杠胡 6被抢杠/放炮 7抢杠胡 8杠上开花 9花上添花
                switch (fanInfo.SpecialType) {
                    case 1:
                        path = "shanximj/result-detail/result_detail_zimo.png";
                        break;
                    case 2:
                        path = "shanximj/result-detail/result_detail_paohu.png";
                        break;
                    case 3:
                        path = "shanximj/result-detail/result_detail_dianpao.png";
                        break;
                    case 4:
                        path = "shanximj/result-detail/result_detail_beizimo.png";
                        break;
                    case 5:
                        path = "shanximj/result-detail/result_detail_qiangganghu.png";
                        break;
                    case 6:
                        path = "shanximj/result-detail/result_detail_dianpao.png";
                        break;
                    case 7:
                        path = "shanximj/result-detail/result_detail_qiangganghu.png";
                        break;
                    case 8:
                        path = "shanximj/result-detail/result_detail_gangshang.png";
                        break;
                    case 9:
                        path = "shanximj/result-detail/result_detail_huashanghua.png";
                        break;
                    default:
                        break;
                }
            } else {
                //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5天和 6地和 7抢杠胡 8杠上开花 9花上添花
                switch (fanInfo.SpecialType) {
                    case 1:
                        path = "shanximj/result-detail/result_detail_zimo.png";
                        break;
                    case 2:
                        path = "shanximj/result-detail/result_detail_paohu.png";
                        break;
                    case 3:
                        path = "shanximj/result-detail/result_detail_dianpao.png";
                        break;
                    case 4:
                        path = "shanximj/result-detail/result_detail_beizimo.png";
                        break;
                    case 5:
                        path = "shanximj/result-detail/result_detail_tianhe.png";
                        break;
                    case 6:
                        path = "shanximj/result-detail/result_detail_dihe.png";
                        break;
                    case 7:
                        path = "shanximj/result-detail/result_detail_qiangganghu.png";
                        break;
                    case 8:
                        path = "shanximj/result-detail/result_detail_gangshang.png";
                        break;
                    case 9:
                        path = "shanximj/result-detail/result_detail_huashanghua.png";
                        break;
                    default:
                        break;
                }
            }

            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setPosition(cc.p(startX + 20, startY + 20));
                this.bgSpr.addChild(typeSprite);

            }
        }
    },
    getStringByType: function (stype) {
        var type = Number(stype);
        var str = "";
        switch (type) {
            case 2:
                str = "放杠";
                break;
            case 4:
                str = "明杠";
                break;
            case 8:
                str = "暗杠";
                break;
            case 16:
                str = "被明杠";
                break;
            case 32:
                str = "被放杠";
                break;
            case 64:
                str = "点杠";
                break;
            case 128:
                str = "被暗杠";
                break;
            default:
                break;
        }
        return str;
    },
    getPaoTip: function (piaoNum) {
        var gaTip = "[" + piaoNum + "个炮]";
        return gaTip;
    },
});

//结算
var MJResult_shanxian = cc.Layer.extend({
    ackGameEnd: null,
    shanxiGameEnd: null,
    bgSpr: "",
    leftColor: null,
    rightColor: null,
    buff: "",
    handCradPos: {x: 0, y: 0},
    hand_card: [[], [], [], []],
    hu_card: [null, null, null, null],
    self_table: null,
    ctor: function () {

        this._super();

        var size = cc.director.getWinSize();

        var layout = new ccui.Layout();
        layout.setContentSize(size);
        layout.setAnchorPoint(cc.p(0, 0));
        layout.setPosition(cc.p(0, 0));
        layout.setTouchEnabled(true);
        layout.setSwallowTouches(true);
        layout.addClickEventListener(function (Ref) {
        });
        this.addChild(layout, -1000);

        if (MJModel.mj_roomType == 1) {
            this.bgSpr = new cc.Sprite(getResPath("shanximj/result-detail/bg_three.png"));
        } else {
            this.bgSpr = new cc.Sprite(getResPath("shanximj/result-detail/bg.png"));

        }
        this.bgSpr.setPosition(cc.p(size.width / 2, size.height / 2));
        this.addChild(this.bgSpr);

        //继续游戏
        var continueBtn = new ccui.Button(getResPath("shanximj/result-detail/result_detail_btn_continue_normal.png"), getResPath("shanximj/result-detail/result_detail_btn_continue_press.png"));
        continueBtn.setAnchorPoint(cc.p(0.5, 0.5));
        continueBtn.setPosition(cc.p(1090 + 55, 40));
        continueBtn.setName("continueBtn");
        continueBtn.addClickEventListener(this.continueClick.bind(this));
        this.bgSpr.addChild(continueBtn);

        this.leftColor = cc.color(77, 45, 30, 255);
        this.rightColor = cc.color(175, 90, 34, 255);

        return true;
    },
    updateContentView: function (mjTable, gameEnd) {
        this.self_table = mjTable;
        this.ackGameEnd = gameEnd.gameend;
        this.shanxiGameEnd = gameEnd;

        cc.log("mjTable._curLaizi ----" + mjTable._curLaizi);
        if (mjTable._curLaizi > 0 && mjTable._curLaizi != 255) {
            var x = 40;
            var bg = new cc.Sprite();
            bg.setContentSize(cc.size(120, 64));

            var sp = new cc.Scale9Sprite(getResPath("shanximj/result-small/bg_frame_9.png"));
            sp.setAnchorPoint(cc.p(0.5, 0.5));
            sp.setPosition(cc.p(bg.getContentSize().width / 2, bg.getContentSize().height / 2));
            sp.setContentSize(cc.size(100, 64));
            bg.addChild(sp);

            //癞子，癞子皮
            var GuiPaibg = bg;
            GuiPaibg.setAnchorPoint(cc.p(0, 0.5));
            GuiPaibg.setPosition(cc.p(180, 40));

            var laiziTxt1 = new cc.Sprite(getResPath("shanximj/lai_tip.png"));
            laiziTxt1.setPosition(cc.p(x, GuiPaibg.getContentSize().height / 2));
            GuiPaibg.addChild(laiziTxt1);
            x += 30;
            var value = mjTable._curLaizi;
            var c = Utils.toHex2(value);
            var laiziCard = new MJCard();
            laiziCard.setValue(value, 0, CardType.Card_End, 0);
            laiziCard.setScale(0.4);
            laiziCard.setAnchorPoint(cc.p(0.0, 0.0));
            laiziCard.setPosition(cc.p(x, GuiPaibg.getContentSize().height / 2 - 25));
            GuiPaibg.addChild(laiziCard);

            this.bgSpr.addChild(GuiPaibg);
        }
        //配置

        var roomConfig = new cc.LabelTTF(mjTable.gameDes, "Arial", 18);
        roomConfig.setColor(this.leftColor);
        roomConfig.setAnchorPoint(cc.p(0, 0));
        roomConfig.setPosition(cc.p(310, 30));
        this.addChild(roomConfig);
        //房间号 局数
        if (!MJModel.isOnVideo) {
            var roomId = MJModel.roomData["gameRoom"]["code"];
            var roomIdTxt = new cc.LabelTTF("房间号: " + roomId, "Arial", 18);
            roomIdTxt.setColor(this.leftColor);
            roomIdTxt.setAnchorPoint(cc.p(0, 0));
            roomIdTxt.setPosition(cc.p(35, 40));
            this.addChild(roomIdTxt);

            var jushu = MJModel.currentCount;
            var jushuTxt = new cc.LabelTTF("局数: " + jushu + " / " + MJModel.RoomCountSum, "Arial", 18);
            jushuTxt.setColor(this.leftColor);
            jushuTxt.setAnchorPoint(cc.p(0, 0));
            jushuTxt.setPosition(cc.p(35, 15));
            this.addChild(jushuTxt);
        }

        var itemHeight = 148;

        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;
            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 590 - m * itemHeight;
            var startX = 90;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX, startY));
            this.bgSpr.addChild(headLayer);

            startX = 180;
            //上排牌 杠
            var ganghuLayer = this.createGangHuLayer(seatid);
            this.bgSpr.addChild(ganghuLayer);
            ganghuLayer.setPosition(cc.p(startX, startY + 15));

            //下排牌
            var table = mjTable;
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX, startY - 40));
            this.bgSpr.addChild(handCardLayer);

            startX = 910;
            this.createSpecialHuTip(startX, startY, seatid);

            startX = 970;
            //输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX, startY));
            this.bgSpr.addChild(scoreLayer);

            for (var l = 0; l < this.hand_card[pos].length; l++) {
                table._ResultAddHandCardFlag(this.hand_card[pos][l]);
            }
        }
    },
    createGangHuLayer: function (seatid) {
        var layer = new cc.Layer();
        var x = 0;
        var y = 0;
        var sxendInfo = this.shanxiGameEnd;
        //庄家加倍
        if (MJModel.banker_seatid == seatid) {
            var str = "[庄家加倍]";
            var banker = new cc.LabelTTF(str, "Arial", 20);
            banker.setColor(this.leftColor);
            banker.setAnchorPoint(cc.p(0, 0));
            banker.setPosition(cc.p(x, y + 10));
            layer.addChild(banker);

            x += banker.getContentSize().width + 5;
        }
        //炮
        if (sxendInfo.paozi[seatid] && sxendInfo.paozi.length > seatid) {
            cc.log("--sxendInfo.paozi[seatid]" + sxendInfo.paozi[seatid]);
            if (sxendInfo.paozi[seatid] > 0) {
                var str = this.getPaoTip(sxendInfo.paozi[seatid]);
                var pao = new cc.LabelTTF(str, "Arial", 20);
                pao.setColor(this.leftColor);
                pao.setAnchorPoint(cc.p(0, 0));
                pao.setPosition(cc.p(x, y + 10));
                layer.addChild(pao);

                x += pao.getContentSize().width + 5;
            }
        }
        if (this.ackGameEnd.EndGangInfo.length > seatid) {
            var gameEndInfo = this.ackGameEnd.EndGangInfo[seatid];
            var map = {};
            for (var i = 0; i < gameEndInfo.Gang.length; i++) {
                var gang = gameEndInfo.Gang[i];
                if (map[gang.GangType] == undefined) {
                    map[gang.GangType] = [];
                }
                map[gang.GangType].push(gang.GangCard);
            }
            for (var key in map) {
                if (!map.hasOwnProperty(key))continue;
                var a = key;
                var typeLabel = new cc.LabelTTF(this.getStringByType(a), "Arial", 20);
                typeLabel.setColor(this.leftColor);
                typeLabel.setAnchorPoint(cc.p(0, 0));
                typeLabel.setPosition(cc.p(x, y + 10));
                layer.addChild(typeLabel);

                x += typeLabel.getContentSize().width;

                var temp = map[key];
                for (var j = 0; j < temp.length; j++) {
                    var smallCard = null;
                    var c = Utils.toHex2(temp[j]);
                    smallCard = new cc.Sprite(__String.createWithFormat(getResPath("shanximj/smallCard/%1.png"), c));
                    if (smallCard != undefined) {
                        smallCard.setAnchorPoint(cc.p(0.0, 0.0));
                        smallCard.setPosition(cc.p(x, y));
                        layer.addChild(smallCard);
                    }
                    x += 28;
                    if (j == temp.length - 1) {
                        x += 20;
                    }
                }
            }
        }
        x += 10;
        //杠牌分
        if (sxendInfo.gangfen[seatid]) {
            var txt = "杠牌分  +";
            if (sxendInfo.gangfen[seatid] < 0) {
                txt = "杠牌分  ";
            }
            var gangfen = new cc.LabelTTF(txt + sxendInfo.gangfen[seatid], "Arial", 20);
            gangfen.setColor(this.leftColor);
            gangfen.setAnchorPoint(cc.p(0, 0));
            gangfen.setPosition(cc.p(x, y + 10));
            layer.addChild(gangfen);
        }
        return layer;
    },
    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var path = "";
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5天和 6地和 7抢杠胡 8杠上开花 9花上添花
            switch (fanInfo.SpecialType) {
                case 1:
                    path = "shanximj/result-detail/result_detail_zimo.png";
                    break;
                case 2:
                    path = "shanximj/result-detail/result_detail_paohu.png";
                    break;
                case 3:
                    path = "shanximj/result-detail/result_detail_dianpao.png";
                    break;
                case 4:
                    path = "shanximj/result-detail/result_detail_beizimo.png";
                    break;
                case 5:
                    path = "shanximj/result-detail/result_detail_tianhe.png";
                    break;
                case 6:
                    path = "shanximj/result-detail/result_detail_dihe.png";
                    break;
                case 7:
                    path = "shanximj/result-detail/result_detail_qiangganghu.png";
                    break;
                case 8:
                    path = "shanximj/result-detail/result_detail_gangshang.png";
                    break;
                case 9:
                    path = "shanximj/result-detail/result_detail_huashanghua.png";
                    break;
                default:
                    break;
            }
            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setPosition(cc.p(startX + 20, startY + 20));
                this.bgSpr.addChild(typeSprite);

            }
        }
    },
    createHandCard: function (seatid) {
        //胡的那张牌....
        var tagHu = 0;
        //占时注释掉，胡的那张牌

        if (this.ackGameEnd.faninfo.length > seatid) {
            if (this.ackGameEnd.faninfo[seatid].hucard && this.ackGameEnd.faninfo[seatid].hucard != 255) {
                tagHu = this.ackGameEnd.faninfo[seatid].hucard;
            }
        }

        var layer = new cc.Layer();
        var pos = MJModel.getPosBySeatid(seatid);
        if (this.ackGameEnd.UserCard.length > seatid) {
            var x = 40;
            var y = 0;
            var paiSpace = 10;
            var penggangSize = cc.size(120, 80);
            //各个玩家碰杠牌

            for (var i = 0; i < this.ackGameEnd.UserCard[seatid].FixedCardsLen; i++) {

                var state = this.ackGameEnd.UserCard[seatid].stFixedCards[i].state;
                var card = this.ackGameEnd.UserCard[seatid].stFixedCards[i].CardData;
                var chairID = this.ackGameEnd.UserCard[seatid].stFixedCards[i].chairID;
                var out_pos = MJModel.getPosBySeatid(chairID);

                if (card == undefined || card == null || card == 0) {
                    continue;
                }
                //下排杠牌
                var gangCard = new MJPeng();
                gangCard.setAnchorPoint(cc.p(0.0, 0.0));

                if ((state & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                    gangCard.setValue(PengType.Peng_Peng, pos, card, 0, out_pos, true, state);
                }
                else if ((state & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                    gangCard.setValue(PengType.Peng_AnKang, pos, card, 0, out_pos, true, state);
                }
                else if ((state & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                    gangCard.setValue(PengType.Chi_L, pos, card, 0, out_pos, true, state);
                }
                else if ((state & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                    gangCard.setValue(PengType.Chi_M, pos, card, 0, out_pos, true, state);
                }
                else if ((state & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                    gangCard.setValue(PengType.Chi_R, pos, card, 0, out_pos, true, state);
                }
                else {
                    gangCard.setValue(PengType.Peng_Kang, pos, card, 0, out_pos, true, state);
                }

                gangCard.setPosition(cc.p(x + 16, y + 18));
                gangCard.setScale(0.5);

                x += paiSpace * 0.5 + penggangSize.width + 15;
                layer.addChild(gangCard);

            }


            var is_remove = 0;
            var need_remove = (parseInt(this.ackGameEnd.UserCard[seatid].ChangeableCardsLen % 3) == 2);
            this.hand_card[pos] = [];
            //牌面信息
            for (var i = 0; i < this.ackGameEnd.UserCard[seatid].ChangeableCardsLen; i++) {

                //去掉type＝＝1的判断 有些游戏自摸不一定叫自摸 只判断玩家的手牌数量 只要多牌 而且有胡牌数据 就跳过
                if (is_remove == 0 && need_remove && tagHu) {
                    if (this.ackGameEnd.UserCard[seatid].ChangeableCards[i] == tagHu) {
                        is_remove = 1;
                        continue;
                    }
                }
                var handCard = new MJCard();
                handCard.setValue(this.ackGameEnd.UserCard[seatid].ChangeableCards[i], 0, CardType.Card_End, 0);
                handCard.setScale(0.60);
                handCard.setAnchorPoint(cc.p(0.0, 0.0));
                handCard.setPosition(cc.p(x - 48, y - 17));
                x -= 5;
                x += handCard.getBoundingBox().width;
                layer.addChild(handCard);
                this.hand_card[pos].push(handCard);
            }

            this.hu_card[pos] = null;
            //胡的牌
            cc.log("----tagHu---: " + tagHu);
            if (tagHu) {
                //多加一个是否多牌的判断 防止前面又没有跳过 这里又多加的bug
                var huCard = new MJCard();
                huCard.setValue(tagHu, 0, CardType.Card_End, 0);
                huCard.setScale(0.63);
                huCard.setAnchorPoint(cc.p(0.0, 0.0));
                huCard.setPosition(cc.p(x - 30 + paiSpace, y - 14));
                layer.addChild(huCard);
                this.hu_card[pos] = huCard;
                this.self_table._checkAddHandCardFlag(huCard, true);
            }
        }
        this.handCradPos.x = x;
        this.handCradPos.y = y;
        return layer;
    }
    ,
    createAvatar: function (pos) {
        var seatid = MJModel.getSeatidByPos(pos);
        var player = MJModel.players[seatid];
        var layer = new cc.Layer();

        var headPic = Utils.createCircleAvatar(player.avatar, "Avatars/user4_unlogin.png", getResPath("RoomMJ2/head_bg.png"), cc.size(74, 74));
        layer.addChild(headPic);
        //    headPic.setPosition(cc.p(startX,startY));

        var framepath;
        var scale = 1;
        if (pos == 0) {
            framepath = getResPath("shanximj/result-detail/result_detail_frame_wo.png");
        } else {
            framepath = getResPath("shanximj/result-detail/result_detail_frame_others.png");
            scale = 1.1;
        }
        var headFrame = new cc.Sprite(framepath);
        headFrame.setAnchorPoint(cc.p(0.5, 0.5));
        headFrame.setScale(scale);
        headFrame.setPosition(cc.p(0, 0));
        layer.addChild(headFrame, -1);

        var headSize = cc.size(88, 88);

        //是否是庄家
        if (MJModel.banker_seatid == seatid) {
            var bankerPic = new cc.Sprite(getResPath("RoomMJ/banker.png"));
            bankerPic.setAnchorPoint(cc.p(0.5, 0));
            bankerPic.setPosition(cc.p(-headSize.width / 2 + 5, -headSize.height / 2));
            layer.addChild(bankerPic);
        }

        //位置
        var posPic = new cc.Sprite(__String.createWithFormat(getResPath("leshanmj/result/result-detail/result_detail_pos_%1.png"), pos));
        posPic.setAnchorPoint(cc.p(0.5, 0));
        posPic.setPosition(cc.p(-65, headSize.height / 2 - 60));
        layer.addChild(posPic);

        //玩家名字
        var nameLabel = new cc.LabelTTF(Utils.parseName(6, player.name), "Arial", 24);
        nameLabel.setColor(this.leftColor);
        nameLabel.setAnchorPoint(cc.p(0.5, 0.5));
        nameLabel.setPosition(cc.p(0, -headSize.height / 2 - 20));
        layer.addChild(nameLabel);
        return layer;
    }
    ,
    //输赢分
    createScoreLayer: function (seatid) {
        var layer = null;
        layer = new cc.Layer();

        var score = 0;
        if (this.ackGameEnd.Score && this.ackGameEnd.Score.length > seatid) score = this.ackGameEnd.Score[seatid];
        var width = 0;
        var totallabelpath = getResPath("shanximj/result-small/result_total.png");
        var scorelabelpath = getResPath("shanximj/result-small/result_small_label_lose.png");
        if (score > 0) {
            scorelabelpath = getResPath("shanximj/result-small/result_small_label_win.png");
        }
        var totalLabelSprite = new cc.Sprite(totallabelpath);
        totalLabelSprite.setAnchorPoint(cc.p(0, 0.5));
        totalLabelSprite.setPosition(cc.p(0, 15));
        layer.addChild(totalLabelSprite);
        width += totalLabelSprite.getContentSize().width + 10;

        var scoredes = ":;";
        if (score == 0) scoredes = "";
        var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), scorelabelpath, 27, 39, '0');
        scoreLabel.setAnchorPoint(cc.p(0.0, 0.5));
        scoreLabel.setPosition(cc.p(width, 15));
        scoreLabel.setName("scoreLabel");
        layer.addChild(scoreLabel);
        return layer;
    },
    continueClick: function (ref) {
        if (MJModel.isOnVideo)return;
        sendReady();

        this.removeFromParent();
        MJModel.state = MJ_STATUS.MJ_GAME_FREE;
    }
    ,
    getStringByType: function (stype) {
        var type = Number(stype);
        var str = "";
        switch (type) {
            case 2:
                str = "明杠";
                break;
            case 4:
                str = "明杠";
                break;
            case 8:
                str = "暗杠";
                break;
            case 16:
                str = "被明杠";
                break;
            case 32:
                str = "被明杠";
                break;
            case 64:
                str = "点杠";
                break;
            case 128:
                str = "被暗杠";
                break;
            default:
                break;
        }
        return str;
    }
    ,


    getPaoTip: function (piaoNum) {
        var gaTip = "[" + piaoNum + "个炮]";
        return gaTip;
    },
});