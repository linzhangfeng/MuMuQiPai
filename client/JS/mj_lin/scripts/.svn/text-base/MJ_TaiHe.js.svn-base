/**
 * Created by pengzhifang on 2018/10/16.
 */
loadProtoFile("proto/taihegameproto.proto");


var HuType = {
    HU_INVALID: 0,
    HU_ZIMO: 1,
    HU_PAOHU: 2,
    HU_HeiMo: 2,
    Hu_RuanMo: 1,
    HU_DIANPAO: 3,
    HU_BEIZIMO: 4,
    HU_QIANG_GANG: 5,
    HU_BEI_QIANG_GANG: 6,
    HU_YI_PAO_DUO_XIANG: 7,
    HU_GANG_SHANG_HUA: 8,
    HU_GANG_HOU_PAO: 9,
};
var AddFanType = {
    HY_FAN_TYPE_PINGHU: 17,		//   平胡

};

var AddFanTypeArray = [
    AddFanType.HY_FAN_TYPE_PINGHU,

];

var AddFanNameArray = [
    "平胡",
];

var selfCMD = {
    SERVER_KAI_MEN:5088, //开门
};

var MJTable_TaiHe = MJTable.extend({
    tag: "MJTable_TaiHe",
    _curLaizi: -1,
    _curLaizipi: -1,
    _curLaizipi2: -1,
    _curLaizi_bg: null,
    isRecordShow: false,
    _pkg_id: 0,
    maxQuan: 1,
    _huaCard: [[], [], [], []],
    isForceTing: false,
    _huaValues: [],
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        MJModel.mj_suport_fangyan = 0;
        MJModel.outCardEffect_style = 1;

        MJModel.mj_bg_use = 1;
        MJModel.mj_suport_change_bg = 1;
        MJModel.toupiaoTipsType = 1;
        MJModel.chi_layout = 3;
        MJModel.mj_touch_tip = 1;
        MJModel.isOutCard = true;
        MJModel.mj_chat_style = 5;
        MJModel.mj_public_style = 1;
        MJModel.mj_card_lib_type = 1;

        MJModel.mj_gps_type = 1;
        MJModel.mj_double_click_style = 1;

        MJModel.mj_font = "jianjie";
        MJModel.mj_fontSize = "dahao";
        MJModel.mj_style = "shishang";
        MJModel.yinyue = "jingdian";
        MJModel.has_hu_layout = 0;
        MJModel.shareType = 1;
        this.KaiMen = [0,0,0,0];


        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];

            MJModel.mj_roomType = 0;

            if (this._pkg_id == 2911|| this._pkg_id == 2785) { //4人
                MJModel.mj_roomType = 0;
            }
            if (this._pkg_id == 2912 || this._pkg_id == 2786) { //3人
                MJModel.mj_roomType = 1;
            }
            if (this._pkg_id == 2913 || this._pkg_id == 2787) { //2人
                MJModel.mj_roomType = 2;
            }
        } catch (e) {
            Log(this, e);
        }

        try {
            var help = this.roomPublic.getChildByName("game_help");
            help.setVisible(false);
        } catch (e) {

        }

        this._init_extend();
        this._super();
        //this.schedule(this.test, 1.0);
    },
    getMjTypePath: function () {
        if(MJModel.mj_roomType == 2){
            return getResPath("taihemj/mj_taihe2.png");
        }else if(MJModel.mj_roomType == 1) {
            return getResPath("taihemj/mj_taihe3.png");
        }else{
            return getResPath("taihemj/mj_taihe4.png");
        }
    },

    isSupportPublicCard: function () {
        return false;
    },

    _init_extend: function () {
        this.initMJCard();
        this.initMJConfig();
        var self_table = this;

        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(false);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };


        //去掉出牌按钮
        MJCards.prototype.createOutCardBtn = function () {

        };

        //去掉出牌放大的效果
        MJCards.prototype.outHandCardEffct2 = function (pos, value) {
            var size = cc.director.getWinSize();
            this.addOutCard(pos, value);
            this.reflashHandCard(pos, true, true);
        };

        ////湖北麻将不要自动胡牌功能
        //MJAction.prototype.setAutoOutCardVis = function (value) {
        //};
    },



    initMJCard: function () {
        var self_table = this;

        MJPeng.prototype.setValue = function (type, pos, value, index, out_pos, isEnd, OpType) {
            var values = [];
            for (var i = 0; i < 3; i++) {
                if (type == PengType.Chi_L || type == PengType.Chi_M || type == PengType.Chi_R) {
                    if (MJModel.chi_layout == 0) {
                        if (type == PengType.Chi_L) {
                            values.push(value + i);
                        } else if (type == PengType.Chi_M) {
                            values.push(value + (i - 1));
                        } else if (type == PengType.Chi_R) {
                            values.push(value + (i - 2));
                        }
                    } else {
                        if (type == PengType.Chi_L) {
                            if (i == 0) {
                                values.push(value + 1);
                            } else if (i == 1) {
                                values.push(value);
                            } else if (i == 2) {
                                values.push(value + 2);
                            }
                        }
                        else if (type == PengType.Chi_M) {
                            values.push(value + (i - 1));
                        }
                        else if (type == PengType.Chi_R) {
                            if (i == 0) {
                                values.push(value - 2);
                            } else if (i == 1) {
                                values.push(value);
                            } else if (i == 2) {
                                values.push(value - 1);
                            }
                        }
                    }
                } else {
                    values.push(type == PengType.Peng_AnKang ? 0 : value);
                }
            }

            if (type == PengType.Peng_Kang) {
                values.push(value);
            }else if(type == PengType.Peng_AnKang){
                if(isEnd){
                    values.push(value);
                }else{
                    if(pos == 0 || self_table.KaiMen[pos]){
                        values.push(value);
                    }else{
                        values.push(0);
                    }
                }
            }

            this.showUI(type, pos, values, index, out_pos, isEnd, OpType, value);
        };
        var super_addOutCard = MJCards.prototype.addOutCard;
        MJCards.prototype.addOutCard = function (pos, value, showPoint) {

            if (value == 0x43 && self_table.IsBuhua) {
                var card = this.addHuCard(pos, value);
                if (pos == 2 && MJModel.mj_bg_use == 1) {
                    card.setScale(0.9);
                }

                if (MJModel.mj_bg_use == 0) {
                    card.setScale(0.9);
                    if (pos == 0) {
                        card.setScale(0.95);
                    }
                }
                self_table._huaCard[pos].push(value);
                return card;
            } else {
                return super_addOutCard.call(this, pos, value, showPoint);
            }
        };

        MJCards.prototype.setSomeCardClickState = function () {
            cc.log("lin=setSomeCardClickState=0");
            if (MJModel.mj_lockcard_type == 1) {
                var listen_cards = [];
                for (var i = 0; i < MJModel.listen_info.length; i++) {
                    var lsi = MJModel.listen_info[i];
                    listen_cards.push(lsi.OutCard);
                }

                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    if (listen_cards.indexOf(card.getValue()) == -1) {
                        card.setBlackVis(true);
                        card.setCardTouchEnable(false);
                    }
                }
            } else if (MJModel.mj_lockcard_type == 2) {
                cc.log("lin=setSomeCardClickState=1");
                cc.log("lin=setSomeCardClickState=2");
                if (this.isDuoPai(0) == false) {
                    for (var i = 0; i < this.hand_card[0].length; i++) {
                        var card = this.hand_card[0][i];
                        card.setBlackVis(true);
                        card.setCardTouchEnable(false);
                    }
                } else {
                    for (var i = 0; i < this.hand_card[0].length - 1; i++) {
                        var card = this.hand_card[0][i];
                        card.setBlackVis(true);
                        card.setCardTouchEnable(false);
                    }
                }
            }
        };


        MJCards.prototype.ChangeAngang = function(pos){
            if(this.peng_card[pos].length == 0) return;
            for(var i = 0;i < this.peng_card[pos].length;i++){
                var peng = this.peng_card[pos][i];
                if(peng.pengType == PengType.Peng_AnKang){
                    this.peng_card[pos][i].setValue(peng.pengType, peng.pos, peng.value, i, peng.out_pos);
                }
            }
        };

        var super_mjcards_reflashAllCardUI = MJCards.prototype.reflashAllCardUI;
        MJCards.prototype.reflashAllCardUI = function () {
            super_mjcards_reflashAllCardUI.call(this);
            for (var i = 0; i < this.hu_card.length; i++) {
                for (var j = 0; j < this.hu_card[i].length; j++) {
                    try {
                        var card = this.hu_card[i][j];
                        var value = card.getValue();
                        if (value == 0x43) {
                            if (i == 2 && MJModel.mj_bg_use == 1) {
                                card.setScale(0.9);
                            } else {
                                card.setScale(1.0);
                            }

                            if (MJModel.mj_bg_use == 0) {
                                card.setScale(0.9);
                                if (i == 0) {
                                    card.setScale(0.96);
                                }
                            }
                        }
                    } catch (e) {

                    }
                }
            }
        };
    },

    initMJConfig: function () {
        MJConfig.getHuCardPos = function (pos, index) {
            index = index % 12;
            if ((pos == 1 || pos == 3) && MJModel.mj_bg_use == 1 && MJModel.mj_paiban == "vertical") {
                return this.getWorldPosition("hu_v_" + pos, "h_" + index);

            } else {
                if (MJModel.mj_bg_use == 0) {
                    var startIdex = 4;
                    if (pos == 0) {
                        startIdex = 5;
                    }
                    var index_new = startIdex + index * 2;
                    return MJConfig.getPublicCardPos(pos, index_new);
                } else {
                    return this.getWorldPosition("hu_" + pos, "h_" + index);
                }

            }
        };

        MJConfig.getHuCardOrder = function (pos, index) {
            index = index % 12;
            if (MJModel.mj_bg_use == 0) {
                index = index * 2;
                return MJConfig.getPublicCardOrder(pos, index);
            } else {
                var order = [
                    [
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ],
                    [
                        11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                    ],
                    [
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ],
                    [
                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                    ],
                ];
                return order[pos][index];
            }
        };

        var super_getscale_new = MJConfig.getScale_new;
        MJConfig.getScale_new = function (pos, type, index, isCard) {
            try {
                var ss = 1;
                if (type == CardType.Card_Hu && MJModel.mj_bg_use == 0) {
                    ss = MJModel.cardConfig.getChildByName("public_" + pos).getChildByName("p_" + index).getScale();
                    if (MJModel.mj_bg_use == 0 && (pos == 1 || pos == 3)) {
                        ss = ss * 0.95;
                    }
                } else {
                    ss = super_getscale_new.call(this, pos, type, index, isCard);
                }
            } catch (e) {
                ss = 1;
            }

            return ss;
        };
    },


    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.taihemj.tagCurGameScence", jpacket);
            //var ackGameFree = parsePacket("proto.game.AckGameScene", jpacket);

            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.taihemj.AckCurGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
            return;
        }


        if(cmd == selfCMD.SERVER_KAI_MEN){
            this._handler_server_kaimen_bc(jpacket,canDelay);
            return;
        }

        this._super(cmd, jpacket, canDelay, svrid);
    },

    KaiMen:[0,0,0,0],
    _handler_server_kaimen_bc:function(data,canDelay){
        cc.log("_handler_server_kaimen_bc");
        var userKaimen = parsePacket("proto.game.taihemj.AckKaiMen",data);
        cc.log("taihe seatid",userKaimen.ChairID)
        var seatId = userKaimen.ChairID;
        var pos = MJModel.getPosBySeatid(seatId);
        this.KaiMen[pos] = 1;
        this.room_Card.ChangeAngang(pos);
        if(MJModel.isMyPlayer(seatId)){
            MJModel.mj_lockcard_type = 2;
        }
    },


    resetGame: function (allClean) {
        this._super(allClean);
        this.KaiMen = [0,0,0,0];
        MJModel.mj_lockcard_type = 0;
    },


    handler_server_peng_kang_bc: function (data, canDelay) {
        this._super(data, canDelay);
        if (this.room_Card) {
            this.room_Card.setSomeCardClickState();
        }
    },


    handler_server_mo_card_bc: function (data, canDelay) {
        this._super(data, canDelay);
        if (this.room_Card) {
            this.room_Card.setSomeCardClickState();
        }
    },

    handler_server_out_card_bc: function (data, canDelay) {
        this._super(data, canDelay)
        var userOutCard = parsePacket("proto.game.AckUserOutCard", data);
        var seatId = userOutCard.ChairID;
        var card = userOutCard.Card;
        //cc.log("taihe candlay",canDelay);
        if (card == 0x43 && canDelay && this.IsBuhua) {
            this.room_Tip.showOtherEffect(MJModel.getPosBySeatid(seatId), "taihemj/effect/buhua/effects_mjxxbuhuax.ExportJson", "effects_mjxxbuhuax", 1);
        }

        if (this.room_Card) {
            this.room_Card.setSomeCardClickState();
        }
    },

    handler_out_card_sound: function (sex, card) {
        if (card == 0x43 && this.IsBuhua) {
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("RoomMJ/sound/operator/%1_buhua.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m"));
        } else {
            this._super(sex, card);
        }
    },


    handler_gang_scores: function (scores, OpType, OpType2, canDelay) {

    },

    _handler_game_record: function (data, canDelay) {
        if (MJModel.gpsInfo) {
            MJModel.gpsInfo.removeFromParent(true);
            MJModel.gpsInfo = null;
        }

        //-----新总结算界面
        var gpsInfo = cc.director.getRunningScene().getChildByName("gpsInfo");
        if (gpsInfo) {
            gpsInfo.removeFromParent(true);
        }

        cc.log("------big End");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var pkgId = this._pkg_id;
        var gameType = "太和麻将";
        if (MJModel.mj_roomType == 1) {
            gameType = gameType + " 3人"
        } else if (MJModel.mj_roomType == 2) {
            gameType = gameType + " 2人"
        } else {
            gameType = gameType + " 4人"
        }
        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];
        //gameType += " · " + MJModel.base_money + "分底";

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        //var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;

        var max_score = 0;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            if (recoreInfo.totalscore > max_score) {
                max_score = recoreInfo.totalscore;
            }
        }

        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            //var playerRecord = totalRecord.player_records[i];
            var player = MJModel.players[i];
            var arrStr = [];
            //次数
            var arrcount = [];

            arrStr = ["坐庄次数", "胡牌次数", "点炮次数", "超时次数"];
            arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.Ex1, recoreInfo.outtime_num];

            if (player && player.uid != -1 && player.uid != 0) {
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var isWin = false;
                if (max_score > 0 && recoreInfo.totalscore == max_score) {
                    isWin = true;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, isWin, _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner, recoreInfo.dissState);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }
        }
        bigResult.refresh(PlayerNumber);
        this.release();
    },

    handler_server_game_end_bc: function (hubeiGameend, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            var ackGameEnd = hubeiGameend.gameend;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);
            this.room_Info.stopTime();
            this.room_Tip.hideOutCardTip();

            var show_all_handcard = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var show_liuju = cc.callFunc(function () {
                if (ackGameEnd.EndState == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
            });

            var show_end_score = cc.callFunc(function () {
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var update_all_money = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var game_end_reset = cc.callFunc(function () {
                self.room_Action.setReady2Visible(false);
                try {
                    var result = new MJResult_TaiHe();
                    result.updateContentView(hubeiGameend);
                    result.setName("reset_remove");
                    self.addChild(result, 100000);
                } catch (e) {
                    cc.log("game end:", e);
                    self.room_Action.setReady2Visible(true);
                }
            });

            var show_all_public_card = cc.callFunc(function () {
                self.gameend_showAllPublicCard(ackGameEnd);
            });

            if (MJModel.isOnVideo && canDelay == false) {
                this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(2), update_all_money));
                return;
            }

            this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(1), show_liuju, cc.delayTime(ackGameEnd.EndState == 1 ? 1 : 0), show_end_score, cc.delayTime(0), update_all_money, cc.delayTime(1), game_end_reset));
        } catch (e) {
            ERROR(this, "handler_server_game_end_bc" + e);
        }
    },


    timeEnd: function (dt) {

        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    },

    IsBuhua:true,
    _setGameType: function () {
        var pkg_id = 1;
        var play_id = [];
        //甩字胡不可炮胡
        //play_id.push(MJModel.base_money + "分底");

        cc.log("lin=MJModel.RoomConfigID=" + JSON.stringify(MJModel.RoomConfigID));

        if (MJModel.RoomConfigID.indexOf(1212001) != -1) {
            play_id.push("不压跑");
        }

        if (MJModel.RoomConfigID.indexOf(1212002) != -1) {
            play_id.push("压跑1分");
        }

        if (MJModel.RoomConfigID.indexOf(1212003) != -1) {
            play_id.push("压跑2分");
        }

        if (MJModel.RoomConfigID.indexOf(1213001) != -1) {
            play_id.push("可一炮多响");
        }

        if (MJModel.RoomConfigID.indexOf(1213002) != -1) {
            play_id.push("不可一炮多响");
        }

        if (MJModel.RoomConfigID.indexOf(1214001) != -1) {
            play_id.push("有花");
        }

        if (MJModel.RoomConfigID.indexOf(1214002) != -1) {
            play_id.push("没有花");
            this.IsBuhua = false;
        }

        if (MJModel.RoomConfigID.indexOf(1215001) != -1) {
            play_id.push("去万牌");
        }


        MJModel.play_id_str = play_id;

        var gameDes = "";
        for (var i = 0; i < play_id.length; i++) {
            gameDes += play_id[i];
            if (i != play_id.length - 1) {
                gameDes += " ";
            }
        }
        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);
    },

    handler_server_scene_info_uc: function (guangxi_scene, canDelay) {
        var ackGameFree = guangxi_scene.GameSence;
        if (guangxi_scene) {
            var is_kaimen = guangxi_scene.iskaimen;
            if (is_kaimen) {
                for (var i = 0; i < is_kaimen.length; i++) {
                    var pos = MJModel.getSeatidByPos(i);
                    if(is_kaimen[i]){
                        this.KaiMen[pos] = 1;
                    }else{
                        this.KaiMen[pos] = 0;
                    }
                    if (MJModel.isMyPlayer(i) && is_kaimen[i]) {
                        MJModel.mj_lockcard_type = 2;
                    }
                }
            }
        }

        if (ackGameFree.RoomConfigID.indexOf(1214002) != -1) {
            this.IsBuhua = false;
        }

        this._super(ackGameFree,canDelay);
        this._setGameType();
    },

    //自动准备
    handlerAutoUpTableReady: function (nums, selfIsReady) {
        if (MJModel.seatid == -1 && nums < 4) {
            this.actionCallBack("uptable");
        }
        else if (selfIsReady == false) {
            if (MJModel.canQuxiaoZhun()) {
                if (MJModel.roomState != 0) this.actionCallBack("ready");
            } else {
                this.actionCallBack("ready");
            }
        }
    },
});


var MJResult_TaiHe = MJCommonResult.extend({
    configLayout:null,
    updateContentView: function (ackGameEndJS) {
        this.ackGameEnd = ackGameEndJS.gameend;
        this.ackGameEndJS = ackGameEndJS;
        //输赢标志
        var seatId = MJModel.seatid;
        var score = this.ackGameEnd.Score[seatId];
        var effectName = "lose";
        if (score > 0) {
            effectName = "win";
        }
        this._win_effect(effectName);

        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);

        var itemHeight = 120;

        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;

            var countY = m;

            if (MJModel.mj_roomType == 1) {
                if (pos == 2) {
                    continue;
                }
            }

            if (MJModel.mj_roomType == 2) {
                if (pos == 1 || pos == 3) {
                    continue;
                }

                if (pos == 0) {
                    countY = 1;
                } else if (pos == 2) {
                    countY = 2;
                }
            }

            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 495 - count * itemHeight;
            var startX = 40;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX + 60, startY + 55));
            this.bgSpr.addChild(headLayer, 10);

            //上排牌 杠
            var ganghuLayer = this.createGangHuLayer(seatid);
            this.bgSpr.addChild(ganghuLayer, 10);
            ganghuLayer.setPosition(cc.p(startX + 230, startY + 65));

            //下排牌
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX + 0, startY));
            this.bgSpr.addChild(handCardLayer);

            // this.createSpecialHuTip(startX + 785, startY + 40, seatid);
            this.createSpecialHuTip(startX + 785, startY + 40, seatid);

            // 输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX + 1100, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            //中马列表
            var maLayer = this.createMaLayer(seatid);
            if (maLayer) {
                maLayer.setPosition(cc.p(startX + 845, startY + 85));
                this.bgSpr.addChild(maLayer);
            }
            count++;
        }

        this.showRoomConfigs();

    },

    createGangHuLayer: function (seatid) {
        var layer = new cc.Layer();
        var x = 0;
        var y = 0;

        var addFanType = [];
        //var specialType = this.ackGameEnd.faninfo[seatid].SpecialType;

        var addfan = this.ackGameEnd.faninfo[seatid].addfan;
        for (var i = 0; i < addfan.length; i++) {
            var add_fan = addfan[i];
            var add_type = add_fan.AddType;
            var add_value = add_fan.AddNum;
            if (AddFanTypeArray.indexOf(add_type) != -1) {
                    addFanType.push(AddFanNameArray[AddFanTypeArray.indexOf(add_type)] + " +" + add_value);
            }
        }

        for (var i = 0; i < addFanType.length; i++) {
            var fanType = new cc.LabelTTF(addFanType[i], "Arial", 20);
            fanType.setColor(this.leftColor);
            fanType.setAnchorPoint(cc.p(0, 0));
            fanType.setPosition(cc.p(x, y + 10));
            layer.addChild(fanType);
            x += fanType.getContentSize().width + 10;
        }
        this.createEndInfoTip(x, y, layer, seatid);
        return layer;
    },

    createMaLayer: function (seatid) {
        var layer = null;
        var buhua = this.ackGameEndJS.buhua;

        if (buhua[seatid] > 0) {
            var niaoCards = buhua[seatid];
            if (niaoCards > 0) {
                layer = new cc.Layer();
                var maPic = new cc.LabelTTF("补花：","Arial", 25);
                maPic.setName("zhongmaTip");
                maPic.setAnchorPoint(cc.p(0.0, 1));
                maPic.setPosition(cc.p(0 , -20));
                layer.addChild(maPic);

                var length = niaoCards;
                for (var i = 0; i < niaoCards; i++) {
                    var card = new MJCard();
                    card.setValue(0x43, 0, CardType.Card_End, 0);
                    card.setAnchorPoint(cc.p(0.0, 1));
                    card.setZhongMaColor(2);
                    card.setScale(0.35);
                    var startX = 5;
                    var startY = -10;
                    var count = 6;
                    if(length > count){
                        startY = length <= 14 ? 5 : 50;
                    }
                    card.setPosition(cc.p(startX + maPic.getPositionX() + maPic.getContentSize().width + parseInt((i % count)) * card.getBoundingBox().width ,startY - parseInt(i/count) * 35));
                    layer.addChild(card);
                }
            }
        }
        return layer;

    },

    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var path = "";
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5天和 6地和 7抢杠胡 8杠上开花 9花上添花
            switch (fanInfo.SpecialType) {
                case 1:
                    path = "RoomMJ/result2/zi_mo_icon.png";
                    break;
                case 2:
                    path = "RoomMJ/result2/pao_hu_icon.png";
                    break;
                case 3:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                case 5:
                    path = "RoomMJ/result2/qiang_gang_icon.png";
                    break;
                case 7:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                default:
                    break;
            }
            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                if(fanInfo.SpecialType == 5){
                    typeSprite.setScale(0.8);
                }
                typeSprite.setPosition(cc.p(startX, startY));
                this.bgSpr.addChild(typeSprite);

            }
        }
    },
    //输赢分
    createScoreLayer: function (seatid) {
        var layer = new cc.Layer();
        var score = 0;
        if (this.ackGameEnd.Score && this.ackGameEnd.Score.length > seatid) score = this.ackGameEnd.Score[seatid];
        var width = 0;
        var path = getResPath("RoomMJ/result2/result_small_label_lose.png");
        if (score > 0) {
            path = getResPath("RoomMJ/result2/result_small_label_win.png");
        }
        var scoredes = ":";
        if (score == 0) scoredes = "";
        var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), path, 29, 37, '0');

        scoreLabel.setAnchorPoint(cc.p(0.0, 0.5));

        scoreLabel.setPosition(cc.p(width, 15));
        scoreLabel.setName("scoreLabel");
        layer.addChild(scoreLabel);

        if (Math.abs(score) >= 10000) {
            scoreLabel.setScale(0.8);
        }
        return layer;
    },


    showRoomConfigs: function () {
        this.configLayout = new cc.Layer();
        this.configLayout.setPosition(150,50);
        this.bgSpr.addChild(this.configLayout);
        var sp = new cc.LabelTTF(this.getRooMInfo(),"Arial", 25);
        sp.setColor(cc.color(0xd7, 0xf2, 0xf8));
        sp.setPosition(cc.p(10 + sp.getContentSize().width / 2, 25));
        this.configLayout.addChild(sp);

    },


    getRooMInfo:function(){
        if (MJModel.RoomConfigID.indexOf(1212001) != -1) {
           return "不压跑";
        }

        if (MJModel.RoomConfigID.indexOf(1212002) != -1) {
            return "跑1分";
        }

        if (MJModel.RoomConfigID.indexOf(1212003) != -1) {
            return "跑2分";
        }
    }

});