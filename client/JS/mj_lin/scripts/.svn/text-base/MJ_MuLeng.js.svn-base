/**
 * Created by jasenwu on 18/11/9.
 */
loadProtoFile("proto/mulingmjproto.proto");

var MJTable_muleng = MJTable.extend({

    isRecordShow: false,
    _allBeiShu: [null, null, null, null],
    _curLaizi_bg: null,
    _curLaizi: -1,
    _curLaizipi :-1,
    _out_card_temp: [],
    _has_show_pi_flag: false,
    _isgang: false,
    _isfenggang: false,
    _isjiangang: false,
    _isdaxianggang: false,
    gameDes: "",
    _last_four_card:[-1,-1,-1,-1],
    _pkgid: 0,
    effectType: "horizontal",
    ctor: function () {
        this._super();
    },

    initRoom: function () {
        this._init_extend();

        MJModel.mj_bg_use = 1;
        MJModel.mj_suport_change_bg = 0;
        MJModel.toupiaoTipsType = 1;
        MJModel.chi_layout = 3;
        MJModel.needTipWhenPass = 1;
        MJModel.mj_touch_tip = 1;
        MJModel.isOutCard = true;
        //MJModel.mj_public_style = 1;
        MJModel.mj_card_lib_type = 1;
        MJModel.mj_chat_style = 1;
        MJModel.mj_public_style = 1;
        //MJModel.Is_yipaoduoxiang = true;
        MJModel.mj_chat_style = 5;
        MJModel.mj_touch_tip = 1;
        MJModel.mj_suport_fangyan = 0;
        MJModel.otherOutCardEffect = false;
        MJModel.outCardEffect_style = 1;
        MJModel.shareType = 1;
        MJModel.mj_font = "gexing";
        MJModel.mj_fontSize = "biaozhun";
        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];
            MJModel.mj_roomType = 0;
            if (this._pkg_id == 2990 || this._pkg_id == 2944){
                MJModel.mj_roomType = 1;
            }else if(this._pkg_id == 2991 || this._pkg_id == 2945){
                MJModel.mj_roomType = 2;
            }

        } catch (e) {
            Log(this, e);
        }
        try {
            if (!MJModel.isOnVideo) {
                var game_help = this.roomPublic.getChildByName("game_help");
                if (game_help !== null) {
                    game_help.setVisible(false);
                }
            }
        } catch (e) {

        }
        this._super();
        this._init_ui();
        MJModel.mj_paiban = "horizontal";
        //this.schedule(this.test, 1.0);


    },
    _init_ui: function () {
        var self = this;
        {
            var btn = new ccui.Button();
            btn.loadTextures(getResPath("mulengmj/action/qiangting.png"), getResPath("mulengmj/action/qiangting.png"), "");
            this.room_Action.actions["qiangting"] = btn;
            btn.setName("qiangting");
            btn.addClickEventListener(function (sender, evt) {
                self.room_Action.btnCallback(sender);
            });
            btn.setVisible(false);
            this.room_Action.addChild(btn);
            this.room_Action.opBtns.push(btn);
        }
    },

    getMjTypePath: function () {
        var pkg_id = 1;
        if (MJModel.mj_roomType == 1) pkg_id = 3;
        return __String.createWithFormat(getResPath("mulengmj/flag/pkgid%1.png"), pkg_id);

    },
    //updateBg: function (isInit) {
    //    if (isInit == undefined)isInit = false;
    //    //this._super(isInit);
    //
    //    if (isInit == undefined)isInit = false;
    //    var size = cc.director.getWinSize();
    //    if (this.bg == null) {
    //        this.bg = new ccui.ImageView(getResPath(this.getBgStr()));
    //        this.bg.setAnchorPoint(cc.p(0.5, 0.5));
    //        this.bg.setContentSize(size);
    //        this.bg.setScale9Enabled(true);
    //        this.bg.setPosition(size.width / 2, size.height / 2);
    //        this.addChild(this.bg, -100);
    //    } else {
    //        this.bg.loadTexture(getResPath(this.getBgStr()));
    //    }
    //    if ( MJModel.mj_table_view =="2d") {
    //        Utils.addCardSprites(__String.createWithFormat("mulengmj/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));
    //    } else {
    //        Utils.addCardSprites(__String.createWithFormat("mulengmj/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));
    //    }
    //
    //    if (MJModel.mj_roomType == 2) {
    //        this.loadCardConfig(MJModel.mj_bg_use == 0 ? "mulengmj/config/card_config_muleng_2p.json" : "mulengmj/config/card_config2d_muleng_2p.json");
    //    } else {
    //        this.loadCardConfig(MJModel.mj_bg_use == 0 ? "mulengmj/config/card_config_muleng.json" : "mulengmj/config/card_config2d_muleng.json");
    //    }
    //
    //    if (isInit)return;
    //
    //    this.room_Card.reflashAllCardUI();
    //    for (var i = 0; i < 4; i++) {
    //        this.players[i].setPosition(MJConfig.getPlayerPos(i));
    //        this.players[i].reflashNameMoneyPosition();
    //    }
    //    if (this.room_Info)this.room_Info.reflash();
    //},
    _flagDirection: function (pos, flag, m_size) {
        if (pos == 1) {
            if(MJModel.mj_bg_use == 1){
                flag.setPosition(cc.p(0, 17))
                flag.setRotation(-90);
            }else{
                flag.setPosition(cc.p(8, 17));
                flag.setRotation(-100);
            }
        } else if (pos == 2) {
            flag.setPosition(cc.p(m_size.width, 17));
            flag.setRotation(180);
        } else if (pos == 3) {
            if(MJModel.mj_bg_use == 1){
                flag.setPosition(cc.p(m_size.width, m_size.height));
                flag.setRotation(90);
            }else{
                flag.setPosition(cc.p(m_size.width, m_size.height - 4));
                flag.setRotation(100);
            }
        }
    },
    test: function (dt) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;
        if (tempCount == 5 && true) {
            this._curLaizi = 0x41;
        }
    },

    handler_game_time_over_bc: function (data, canDelay) {
        if (!this.gameending)MJModel.state = MJ_STATUS.MJ_GAME_FREE;
        this.startTimeEnd();
        // PlatformHelper.showToast("服务器通知房间结束！");
    },
    gameending: false,
    handler_server_game_end_bc: function (shanxiGameEnd, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            this.gameending = true;
            var ackGameEnd = shanxiGameEnd.gameend;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);
            this.room_Info.stopTime();

            var callback0 = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            for (var i = 0; i < ackGameEnd.Score.length; i++){
                if (this._last_four_card[i] != -1)ackGameEnd.faninfo[i].hucard = this._last_four_card[i];
            }

            var state = ackGameEnd.EndState;
            var callback2 = cc.callFunc(function () {
                if (state == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
                else {
                }
            });

            var callback4 = cc.callFunc(function () {
                self.room_Tip.reset();
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var callback5 = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var callback3 = cc.callFunc(function () {
                self.room_Action.setReady2Visible(false);
                try {
                    var result = new MJResult_MuLeng();
                    result.updateContentView(shanxiGameEnd);
                    result.setName("reset_remove");
                    self.addChild(result, 100000);
                } catch (e) {
                    cc.log("game end:", e);
                    self.gameending = false;
                    self.room_Action.setReady2Visible(true);
                }
            });

            if (MJModel.isOnVideo) {
                if (canDelay) {
                    this.runAction(cc.sequence(callback4, cc.delayTime(1), callback5, cc.delayTime(2), callback3));
                } else {
                    this.runAction(cc.sequence(callback5, cc.delayTime(2), callback3));
                }
                return;
            }

            this.runAction(cc.sequence(cc.delayTime(0), callback0, cc.delayTime(0), callback4, cc.delayTime(0), callback5, cc.delayTime(0.5), callback2, cc.delayTime(1.5), callback3));
        } catch (e) {
            ERROR(this, e);
        }
    },
    _init_extend: function () {
        this.initMJActionVideo();
        this.initMJPlayer();
        var self = this;

        var super_continueClick = MJResult.prototype.continueClick;
        MJResult.prototype.continueClick = function (ref) {
            super_continueClick.call(this, ref);
            self.gameending = false;
        };

        ////碰杠牌处理
        //MJCards.prototype.addPengCard = function (pos, type, value, out_pos, OpType, specialCard,LaiziNum,cardList) {
        //    var card = new MJPeng();
        //    this.peng_card[pos].push(card);
        //    card.setValue(type, pos, value, this.peng_card[pos].length - 1, out_pos, false, OpType,specialCard, LaiziNum,cardList);
        //    card.setPosition(MJConfig.getPengKangCardPos(pos, this.peng_card[pos].length - 1));
        //    card.setScale(MJConfig.getScale_new(pos, CardType.Card_Peng, this.peng_card[pos].length - 1, false));
        //    this.addChild(card, MJConfig.getPengKangCardOrder(pos, this.peng_card[pos].length - 1));
        //};

        MJAction.prototype.sureOperate = function (type, card,cardlist) {
            if (MJModel.needTipWhenPass == 1) {
                var op = MJModel.curOperate;
                if (type == ActionType.TYPE_PASS && (op & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                    this.showPassWarn(type, card, "确定放弃胡牌？");
                    return;
                }
            } else if (MJModel.needTipWhenPass == 2) {
                var op = MJModel.curOperate;
                if (type == ActionType.TYPE_PASS && (op & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                    if (MJModel.mj_table.room_Card.isDuoPai(0) || MJModel.gangMoPai) {
                        this.showPassWarn(type, card, "确定放弃胡牌？");
                        return;
                    }
                }
            }
            sendOperateCard(type, card,cardlist);
            this.setOperator(-1);
        };

        //这里改为 仅仅是为了找出所有要显示的牌的数组 setValue2通过牌数组生成牌 方便外部继承使用自己的生成规则
        MJPeng.prototype.setValue = function (type, pos, value, index, out_pos, isEnd, OpType, specialCard,LaiziNum, cardList) {
            var values = [];
            cc.log("ningjiebiaoMJModel._isfenggang==" + MJModel.mj_table._isfenggang + "ningjiebiao_isjiangang==" + MJModel.mj_table._isjiangang +
                "ningjiebiaoMJModel._isdaxianggang==" + MJModel.mj_table._isdaxianggang + "type==" + type + "ningcardlist" + JSON.stringify(cardList));
            if (cardList && cardList.length > 0) {
                if (cardList.length == 3 && value != 255 && (type == PengType.Chi_L || type == PengType.Chi_M || type == PengType.Chi_R)) {
                    values = cardList;
                    var index = 0;
                    for (var i = 0; i < cardList.length; i++) {
                        if (cardList[i] != value) {
                            values[index] = cardList[i];
                            if (index == 0)index = 2;
                        }
                    }
                    values[1] = value;

                    this.showUI(type, pos, cardList, index, out_pos, isEnd, OpType, values);
                    return;
                }
                //else {
                //    values = cardList;
                //}

            }

            if(self.isfenggang(cardList) || self.isjiangang(cardList) || self.isdaxianggang(cardList)) {
                if(type == PengType.Peng_AnKang) {
                    for (var i = 0; i < cardList.length; i++) {
                        values.push(cardList[i]);
                    }
                }
                if(type == PengType.Peng_Kang){
                    for (var i = 0; i < cardList.length; i++) {
                        values.push(cardList[i]);
                    }
                }
            } else {
                for (var i = 0; i < 3; i++) {
                    if (type == PengType.Chi_L || type == PengType.Chi_M || type == PengType.Chi_R) {
                        if (MJModel.chi_layout == 0) {
                            if (type == PengType.Chi_L) {
                                values.push(value + i);
                            } else if (type == PengType.Chi_M) {
                                values.push(value + (i - 1));
                            } else if (type == PengType.Chi_R) {
                                values.push(value + (i - 2));
                            }
                        } else {
                            if (type == PengType.Chi_L) {
                                if (i == 0) {
                                    values.push(value + 1);
                                } else if (i == 1) {
                                    values.push(value);
                                } else if (i == 2) {
                                    values.push(value + 2);
                                }
                            }
                            else if (type == PengType.Chi_M) {
                                values.push(value + (i - 1));
                            }
                            else if (type == PengType.Chi_R) {
                                if (i == 0) {
                                    values.push(value - 2);
                                } else if (i == 1) {
                                    values.push(value);
                                } else if (i == 2) {
                                    values.push(value - 1);
                                }
                            }
                        }
                    } else {
                        values.push(type == PengType.Peng_AnKang ? 0 : value);
                    }
                }

                if (type == PengType.Peng_Kang) {
                    values.push(value);
                }
                if (type == PengType.Peng_AnKang) {
                    var seatid = MJModel.getSeatidByPos(pos);
                    if(isEnd){
                        values.push(value);
                    }else {
                        if (MJModel.isMyPlayer(seatid)) {
                            values.push(value);
                        } else {
                            if (MJModel.isOnVideo) {
                                values.push(value);
                            }
                        }
                    }
                }
            }

            this.showUI(type, pos, values, index, out_pos, isEnd, OpType, value);
        },

        ChooseGang.prototype.setChoiceInfos = function (choiceInfos) {
            var op_type_v = [];
            var op_cards_v = [];
            for(var i = 0;i < choiceInfos.length;i++){

                var op = choiceInfos[i].OpType;

                var cardlist = [];

                for(var k = 0;k < choiceInfos[i].Cards.length;k++) {
                    cardlist.push(choiceInfos[i].Cards[k]);
                }

                if((op & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG){
                    op_type_v.push(ActionType.TYPE_ANGANG);
                    op_cards_v.push(cardlist);
                }

                if((op & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG){
                    op_type_v.push(ActionType.TYPE_WANGANG);
                    op_cards_v.push(cardlist);
                }
                if((op & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG){
                    op_type_v.push(ActionType.TYPE_ZHIGANG);
                    op_cards_v.push(cardlist);
                }
            }
            this.showUI(op_type_v, op_cards_v);
        };

        ChooseChi.prototype.setChoiceInfos = function (curOperate, curOperateCard,name) {
            var op_type_v = [];
            var op_cards_v = [];
            var op = curOperate;
            var cur_card = curOperateCard;

            if ((op & SpecialGangType.TYPE_LAIZIPI_GANG) == SpecialGangType.TYPE_LAIZIPI_GANG && name == "qiangting") {
                op_type_v.push(SpecialGangType.TYPE_LAIZIPI_GANG);
            }

            if ((op & SpecialGangType.TYPE_FACAI_GANG) == SpecialGangType.TYPE_FACAI_GANG && name == "qiangting") {
                op_type_v.push(SpecialGangType.TYPE_FACAI_GANG);
            } else if ((op & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                op_type_v.push(ActionType.TYPE_RIGHT_CHI);
            }

            if ((op & SpecialGangType.TYPE_HONGZHONG_GANG) == SpecialGangType.TYPE_HONGZHONG_GANG && name == "qiangting") {
                op_type_v.push(SpecialGangType.TYPE_HONGZHONG_GANG);
            } else if ((op & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                op_type_v.push(ActionType.TYPE_CENTER_CHI);
            }

            if ((op & SpecialGangType.TYPE_LAIZI_GANG) == SpecialGangType.TYPE_LAIZI_GANG && name == "qiangting") {
                op_type_v.push(SpecialGangType.TYPE_LAIZI_GANG);
            } else if ((op & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                op_type_v.push(ActionType.TYPE_LEFT_CHI);
            }

            for (var i = 0; i < op_type_v.length; i++) {
                op_cards_v[i] = [];
                var opType = op_type_v[i];
                for (var j = 0; j < 3; j++) {
                    var card_value = 0;
                    if (opType == SpecialGangType.TYPE_LAIZIPI_GANG && name == "qiangting") {
                        card_value = cur_card;
                    }
                    if (opType == ActionType.TYPE_LEFT_CHI || opType == SpecialGangType.TYPE_LAIZI_GANG) {
                        card_value = cur_card + j;
                    }
                    if (opType == ActionType.TYPE_CENTER_CHI || opType == SpecialGangType.TYPE_HONGZHONG_GANG) {
                        card_value = cur_card + j - 1;
                    }
                    if (opType == ActionType.TYPE_RIGHT_CHI || opType == SpecialGangType.TYPE_FACAI_GANG) {
                        card_value = cur_card + j - 2;
                    }
                    op_cards_v[i].push(card_value);
                }
                if (MJModel.operator_info.length > 0) {
                    for (var j = 0; j < MJModel.operator_info.length; j++) {
                        if (MJModel.operator_info[j].OpType == opType) {
                            op_cards_v[i] = MJModel.operator_info[j].Cards;
                            break;
                        }
                    }
                }
            }
            if(op_type_v.length >= 4){
                this.setScale(0.8);
            }
            this.showUI(op_type_v, op_cards_v, cur_card,name);
        };

        ChooseChi.prototype.showUI = function (op_type_v, op_cards_v, cur_card,name) {
            var self = this;
            var op_nums = op_type_v.length;
            var card_size = cc.size(65, 96);
            var item_size = cc.size(65 * 3 + 30, 96 + 20);
            var size = cc.size((item_size.width + 20) * op_nums, item_size.height);
            this.setContentSize(size);

            var lineNums = 3;
            if(name == "qiangting"){
                lineNums = 1;
            }
            var temp = (op_nums >= lineNums)?lineNums:op_nums;
            var bx = size.width / 2 - (item_size.width + 20) / 2 * (temp - 1);
            for (var i = 0; i < op_nums; i++) {
                var opType = op_type_v[i];
                var layout = new ccui.Layout();
                layout.setAnchorPoint(cc.p(0.5, 0.5));
                layout.setContentSize(item_size);
                layout.setTag(opType);
                this.addChild(layout);
                layout.setPosition(cc.p(bx + (item_size.width + 20) * (i%lineNums), size.height / 2 + parseInt(i/lineNums) * 120));
                layout.setTouchEnabled(true);
                layout.addClickEventListener(function (ref, evt) {
                    var lay = ref;
                    if (self._callback) self._callback(lay.getTag());
                });

                var sp = new ccui.ImageView(getResPath("RoomMJ/bg.9.png"));
                sp.setScale9Enabled(true);
                sp.setAnchorPoint(cc.p(0.5, 0.5));
                sp.setContentSize(item_size);
                sp.setPosition(cc.p(layout.getContentSize().width / 2, layout.getContentSize().height / 2));
                layout.addChild(sp);

                for (var j = 0; j < op_cards_v[i].length; j++) {
                    var card_value = op_cards_v[i][j];
                    var tingCard = new MJCard();
                    tingCard.setValue(card_value, 0, CardType.Card_Hand, 0);
                    tingCard.setPosition(cc.p(45 + (card_size.width + 3) * j, item_size.height / 2));
                    tingCard.setAnchorPoint(cc.p(0.5, 0.5));
                    if (card_value == cur_card) {
                        tingCard.setChoiceTipShow(true);
                    }
                    tingCard.setScale(card_size.width / tingCard.getContentSize().width * MJConfig.getTipCardScale());
                    sp.addChild(tingCard);
                }
            }
        },

        ChooseGang.prototype.showUI = function (op_type_v, op_cards_v, cur_card) {
            var self = this;
            var op_nums = op_type_v.length;
            var card_size = cc.size(65, 96);
            var item_size = cc.size(65 * 3 + 30, 96 + 20);
            var size = cc.size((item_size.width + 20) * op_nums, item_size.height);
            this.setContentSize(size);

            var temp = (op_nums >= 3)?3:op_nums;
            var bx = size.width / 2 - (item_size.width + 20) / 2 * (temp - 1);
            for (var i = 0; i < op_nums; i++) {
                var opType = op_type_v[i];
                var layout = new ccui.Layout();
                layout.setAnchorPoint(cc.p(0.5, 0.5));
                layout.setContentSize(item_size);
                layout.setTag(i);
                this.addChild(layout);
                layout.setPosition(cc.p(bx + (item_size.width + 20) * (i%3), size.height / 2 + parseInt(i/3) * 120));
                layout.setTouchEnabled(true);
                layout.addClickEventListener(function (ref, evt) {
                    var lay = ref;
                    if (self._callback) self._callback(lay.getTag());
                });

                var sp = new ccui.ImageView(getResPath("RoomMJ/bg.9.png"));
                sp.setScale9Enabled(true);
                sp.setAnchorPoint(cc.p(0.5, 0.5));
                sp.setContentSize(item_size);
                sp.setPosition(cc.p(layout.getContentSize().width / 2, layout.getContentSize().height / 2));
                layout.addChild(sp);

                for (var j = 0; j < op_cards_v[i].length; j++) {
                    var card_value = op_cards_v[i][j];
                    var scale = 0.5;
                    var tingCard = new MJCard();
                    tingCard.setValue(card_value, 0, CardType.Card_Hand, 0);
                    tingCard.setPosition(cc.p(45 + (card_size.width * scale + 10) * j, item_size.height / 2));
                    tingCard.setAnchorPoint(cc.p(0.5, 0.5));
                    if (card_value == cur_card) {
                        tingCard.setChoiceTipShow(true);
                    }
                    tingCard.setScale(scale);
                    sp.addChild(tingCard);
                }
            }
        };

        MJTips.prototype.showSimpleEffect = function (pos, out_pos, type, effect, hold){
            try {
                if (hold == undefined)hold = false;
                var begin = MJConfig.getOperatorTipPos(pos);
                var path = null;
                var parentPath = "mulengmj/simple/";
                if (effect == "qiangganghu") {
                    hold = true;
                    path = getResPath(parentPath + "qiangganghu.png");
                } else if (effect == "dianpao") {
                    hold = true;
                    path = getResPath(parentPath + "dianpao.png");
                } else if (effect == "haidi") {
                    path = getResPath(parentPath + "haidi.png");
                } else if (effect == "baoting") {
                    path = getResPath(parentPath + "baoting.png");
                } else if (effect == "buzhang") {
                    path = getResPath(parentPath + "buzhang.png");
                } else if (effect == "genzhuang") {
                    var size = cc.director.getWinSize();
                    begin = cc.p(size.width / 2, size.height / 2);
                    path = getResPath(parentPath + "genzhuang.png");
                }
                else if (effect == "qiangting") {
                    path = getResPath(parentPath + "qiangting.png");
                }
                else if (effect == "fenggang") {
                    path = getResPath(parentPath + "fenggang.png");
                    MJModel.mj_table._isfenggang = false;
                }else if (effect == "jiangang") {
                    path = getResPath(parentPath + "jiangang.png");
                    MJModel.mj_table._isjiangang = false;
                }else if (effect == "daxianggang") {
                    path = getResPath(parentPath + "daxianggang.png");
                    MJModel.mj_table._isdaxianggang = false;
                }else if (type == ActionType.TYPE_PENG) {
                    path = getResPath(parentPath + "peng.png");
                } else if (type == ActionType.TYPE_HU) {
                    hold = true;
                    if (effect == "zimo") {
                        path = getResPath(parentPath + "zimo.png");
                    } else {
                        if (pos != out_pos) {
                            this.showSimpleEffect(out_pos, null, null, "dianpao");
                        }
                        path = getResPath(parentPath + "hu.png");
                    }
                } else if (type == ActionType.TYPE_LEFT_CHI || type == ActionType.TYPE_CENTER_CHI || type == ActionType.TYPE_RIGHT_CHI) {
                    path = getResPath(parentPath + "chi.png");
                } else {
                    path = getResPath(parentPath + "gang.png");
                }

                var bg = new cc.Sprite(getResPath(parentPath + "bg.png"));
                bg.setPosition(begin);
                bg.setName("hu_effect");
                // this.addChild(bg, 10000);

                var sp = new cc.Sprite(path);
                sp.setPosition(begin);
                sp.setName("hu_effect");
                this.addChild(sp, 10000);

                if (hold) {
                    // bg.runAction(cc.sequence(cc.delayTime(this.getHuEffectTime()), cc.removeSelf()));
                    sp.runAction(cc.sequence(cc.delayTime(this.getHuEffectTime()), cc.removeSelf()));
                } else {
                    // bg.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
                    sp.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
                }
            } catch (e) {
                Log(this, e);
            }
        };


        //var super_addOutCard = MJCards.prototype.addOutCard;
        //MJCards.prototype.addOutCard = function (pos, value, showPoint, isReflash) {
        //    if (isReflash == undefined)isReflash = false;
        //    if (isReflash == false)self._out_card_temp.push({"pos": pos, "card": value});
        //    if (self._mj_style == 0) {
        //        var banker_pos = MJModel.getPosBySeatid(MJModel.banker_seatid);
        //        if (banker_pos == pos && value == self._curLaizipi ) {
        //
        //        } else {
        //            return this.addHuCard(pos, value);
        //        }
        //
        //    }
        //    return super_addOutCard.call(this, pos, value, showPoint);
        //};

        MJCards.prototype.sortCard = function (a, b) {
            return self._sortCard(a, b);
        };

        //去掉出牌放大
        MJCards.prototype.outHandCardEffct2 = function (pos, value) {
            this.addOutCard(pos, value);
            this.reflashHandCard(pos, true, true);
        };

        //湖北麻将不要自动胡牌功能
        MJAction.prototype.setAutoOutCardVis = function (value) {
        };
        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(false);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言1");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };

        Setting.prototype.showPaiBanView = function (is) {
            is = false;
            this._gameSettingLayer.getChildByName("light_title").setVisible(is);
            this.checkboxs_gamesetting["paiban_horizontal"].setVisible(is);
            this.checkboxs_gamesetting["paiban_vertical"].setVisible(is);
        };
        //var supersetValue = MJPeng.prototype.setValue;
        //MJPeng.prototype.setValue = function (type, pos, value, index, out_pos, isEnd, OpType) {
        //    supersetValue.call(this, type, pos, value, index, out_pos, isEnd, OpType);
        //
        //    if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
        //        if (this.pointSp) this.pointSp.setVisible(false);
        //    }
        //};

        ////添加碰听吃听按钮
        //var super_mjaction_ctor = MJAction.prototype.ctor;
        //MJAction.prototype.ctor = function (value) {
        //    super_mjaction_ctor.call(this, value);
        //    var self = this;
        //    {
        //        var btn = new ccui.Button();
        //        btn.loadTextures(getResPath("mulengmj/action/qiangting.png"), getResPath("mulengmj/action/qiangting.png"), "");
        //        this.room_Action.actions["qiangting"] = btn;
        //        btn.setName("qiangting");
        //        btn.addClickEventListener(function (sender, evt) {
        //            self.room_Action.btnCallback(sender);
        //        });
        //        btn.setVisible(false);
        //        this.room_Action.addChild(btn);
        //        this.room_Action.opBtns.push(btn);
        //    }
        //};

        var super_setOperator = MJAction.prototype.setOperator;
        MJAction.prototype.setOperator = function (operat) {
            this.removeChildByName("ChooseGang_selectLayer");
            this.removeChildByName("ChooseGang_selectLayer");
            if (operat == -1 || operat == 0 || operat == null || operat == undefined) {
                for (var i = 0; i < this.opBtns.length; i++) {
                    this.opBtns[i].setVisible(false);
                }
                MJModel.curOperate = -1;
                return false;
            }
            MJModel.curOperate = operat;
            if (operat != -1 && MJModel.mj_table._isfenggang || operat != -1 && MJModel.mj_table._isjiangang
            || operat != -1 && MJModel.mj_table._isdaxianggang) {
                if (this.actions["gang"]) {
                    this.actions["gang"].setVisible(true);
                }
            }
            //if (operat != -1 && (operat & SpecialGangType.TYPE_LAIZIPI_GANG) == SpecialGangType.TYPE_LAIZIPI_GANG) {
            //    if (this.actions["pengting"]) {
            //        this.actions["pengting"].setVisible(true);
            //    }
            //}
            //if (operat != -1 && (operat & SpecialGangType.TYPE_LAIZI_GANG) == SpecialGangType.TYPE_LAIZI_GANG || operat != -1 && (operat & SpecialGangType.TYPE_HONGZHONG_GANG) == SpecialGangType.TYPE_HONGZHONG_GANG
            //    || operat != -1 && (operat & SpecialGangType.TYPE_FACAI_GANG) == SpecialGangType.TYPE_FACAI_GANG) {
            //    if (this.actions["chiting"]) {
            //        this.actions["chiting"].setVisible(true);
            //    }
            //}
            if (operat != -1 && self.isQiangTing(MJModel.curOperate)) {
                this.setQiangTingOperator(operat);
                //return;
            }
            super_setOperator.call(this, operat);
        };

        MJAction.prototype.setQiangTingOperator = function (Gangoperat) {
            if (this.actions["pass"]) {
                this.actions["pass"].setVisible(true);
            }


            if ((Gangoperat & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG ||
                (Gangoperat & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG ||
                (Gangoperat & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG   ||
                Gangoperat && MJModel.mj_table._isfenggang || Gangoperat && MJModel.mj_table._isjiangang
                || Gangoperat && MJModel.mj_table._isdaxianggang) {
                if (this.actions["gang"]) {
                    this.actions["gang"].setVisible(true);
                }
            }

            if (this.actions["qiangting"]) {
                this.actions["qiangting"].setVisible(true);
            }

            this.reflashOpBtns();
        };

        MJAction.prototype.btnCallback = function (ref) {
            var n = ref;
            var name = n.getName();
            Log(this, "btnCallback:" + name);
            var self = this;

            if (name == "yaoqing") {
                if (MJModel.shareType == 1) {
                    var myposition = cc.p(n.getContentSize().width / 2, n.getContentSize().height / 2);
                    var sharelist = new ShareList();
                    sharelist.initList(this, 0, myposition);
                    n.addChild(sharelist);
                    return;
                }
            }
            if (name == "qiangting" || name == "pass" || name == "hu" || name == "gang" || name == "peng" || name == "chi" || name == "huaHu") {
                var type = 0;
                if (name == "pass") {
                    type = ActionType.TYPE_PASS;
                    var op = MJModel.curOperate;
                    var card = MJModel.curOperateCard;
                    var hasGang = false;
                    var hasHu = false;
                    if ((op & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG
                        || (op & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG
                        || (op & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
                        hasGang = true;
                    }

                    if ((op & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                        hasHu = true;
                    }

                    hasGang = false;//暂时不要杠
                    if (MJModel.needTipWhenPass == 1 && (hasGang || hasHu)) {
                        var checkLayer = new PassWarn();
                        checkLayer.setChoiceInfos(hasGang, hasHu);
                        checkLayer.setName("checkLayer_selectLayer");
                        checkLayer.setCallback(function () {
                            sendOperateCard(type, card);
                            self.setOperator(-1);
                            self.removeChildByName("checkLayer_selectLayer");
                        });
                        this.addChild(checkLayer, 10000);
                        return;
                    }
                    sendOperateCard(type, card);
                    this.setOperator(-1);
                    return;
                }
                if (name == "qiangting") {
                    var type = ActionType.TYPE_PASS;
                    var op = MJModel.curOperate;

                    cc.log("lin=op=" + MJModel.curOperate);
                    var op_nums = 0;
                    if ((op & SpecialGangType.TYPE_LAIZIPI_GANG) == SpecialGangType.TYPE_LAIZIPI_GANG) {
                        type = SpecialGangType.TYPE_LAIZIPI_GANG;
                        op_nums++;
                    }

                    if ((op & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {

                    }

                    if ((op & SpecialGangType.TYPE_LAIZI_GANG) == SpecialGangType.TYPE_LAIZI_GANG) {
                        type = SpecialGangType.TYPE_LAIZI_GANG;
                        op_nums++;
                    }

                    if ((op & SpecialGangType.TYPE_HONGZHONG_GANG) == SpecialGangType.TYPE_HONGZHONG_GANG) {
                        type = SpecialGangType.TYPE_HONGZHONG_GANG;
                        op_nums++;
                    }

                    if ((op & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {

                    }

                    if ((op & SpecialGangType.TYPE_FACAI_GANG) == SpecialGangType.TYPE_FACAI_GANG) {
                        type = SpecialGangType.TYPE_FACAI_GANG;
                        op_nums++;
                    }

                    if (op_nums > 1) {
                        var selectLayer = new ChooseChi();
                        selectLayer.setChoiceInfos(MJModel.curOperate, MJModel.curOperateCard,name)
                        selectLayer.setName("ChooseGang_selectLayer");
                        selectLayer.setPosition(cc.p(n.getPosition().x, n.getPosition().y + 50));
                        selectLayer.setCallback(function (type) {
                            sendOperateCard(type, MJModel.curOperateCard);
                            self.setOperator(-1);
                            self.removeChildByName("ChooseGang_selectLayer");
                        });
                        this.addChild(selectLayer, 10000);
                        return;
                    }

                    sendOperateCard(type, MJModel.curOperateCard);
                    this.setOperator(-1);
                    return;
                }
                if (name == "hu") type = ActionType.TYPE_HU;
                if (name == "peng") type = ActionType.TYPE_PENG;
                if (name == "huaHu") type = ActionType.TYPE_HUA_HU;
                if (name == "gang") {
                    var op = MJModel.curOperate;
                    type = ActionType.TYPE_ZHIGANG;

                    if ((op & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
                        type = ActionType.TYPE_WANGANG;
                    }
                    else if ((op & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                        type = ActionType.TYPE_ANGANG;
                    }
                    cc.log("ningjiebiaooperator_info111111" + MJModel.operator_info.length);
                    if ((op & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG || (op & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG
                    ||(op & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
                        if (MJModel.operator_info.length > 1) {
                            var selectLayer = new ChooseGang();
                            selectLayer.setChoiceInfos(MJModel.operator_info);
                            selectLayer.setName("ChooseGang_selectLayer");
                            //selectLayer.setTitle("请点击选择要杠的牌");
                            selectLayer.setPosition(cc.p(n.getPosition().x + 0, n.getPosition().y + 50));
                            selectLayer.setCallback(function (index) {
                                self.removeChildByName("ChooseGang_selectLayer");
                                MJModel.curOperateCard = MJModel.operator_info[index].Cards[0];
                                var card = MJModel.curOperateCard;
                                cc.log("ningjiebiaocard" + card);
                                self.sureOperate(MJModel.operator_info[index].OpType,card, MJModel.operator_info[index].Cards);
                            });
                            this.addChild(selectLayer, 10000);
                            return;
                        }
                        else if (MJModel.operator_info.length > 0) {
                            MJModel.curOperateCard = MJModel.operator_info[0].Cards[0];
                            cc.log("ningjiebiaooperator_info" + JSON.stringify(MJModel.operator_info));
                            var card = MJModel.curOperateCard;
                            sendOperateCard(type, card, MJModel.operator_info[0].Cards);
                            this.setOperator(-1);
                            return;
                        }
                        else {
                            return;
                        }
                    }
                }

                if (name == "chi") {
                    var op = MJModel.curOperate;
                    var op_nums = 0;
                    var op_type = ActionType.TYPE_LEFT_CHI;
                    if ((op & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                        op_nums++;
                        op_type = ActionType.TYPE_LEFT_CHI;
                    }
                    if ((op & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                        op_nums++;
                        op_type = ActionType.TYPE_CENTER_CHI;
                    }
                    if ((op & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                        op_nums++;
                        op_type = ActionType.TYPE_RIGHT_CHI;
                    }

                    if (op_nums > 1) {
                        var selectLayer = new ChooseChi();
                        selectLayer.setChoiceInfos(MJModel.curOperate, MJModel.curOperateCard)
                        selectLayer.setName("ChooseGang_selectLayer");
                        selectLayer.setPosition(cc.p(n.getPosition().x, n.getPosition().y + 50));
                        selectLayer.setCallback(function (type) {
                            sendOperateCard(type, MJModel.curOperateCard);
                            self.setOperator(-1);
                            self.removeChildByName("ChooseGang_selectLayer");
                        });
                        this.addChild(selectLayer, 10000);
                        return;
                    }
                    type = op_type;
                }
                var card = MJModel.curOperateCard;
                sendOperateCard(type, card);
                this.setOperator(-1);
                return;
            }

            if (this.callback) this.callback(name);
        }

    },
    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        //
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.mulingmj.tagCurGameScence", jpacket);
            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.mulingmj.AckCurGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
        }
        if (cmd == selfCMD.SERVER_FOURCARD_HUANGHUANG) {
            this._handler_server_haidi_cards(jpacket, canDelay);
            return;
        }

        this._super(cmd, jpacket, canDelay, svrid);
    },
    timeEnd: function (dt) {
        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    },

    _handler_server_haidi_cards: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.mulingmj.AckLastFourCard", data);
        var nums = jpacket.stLastFourCard.length;
        this.room_Card.removePublicCardByNums(nums);
        this.room_Info.showCardNums(this.room_Info.curCardNums - nums);
        MJModel.isEnterWait = true;
        var move_end = cc.callFunc(function () {
            MJModel.isEnterWait = false;
        });

        this.runAction(cc.sequence(cc.delayTime(3.5), move_end));


        if (canDelay == false) {
            for (var i = 0; i < jpacket.stLastFourCard.length; i++) {
                var seatid = jpacket.stLastFourCard[i].ChairID;
                var pos = MJModel.getPosBySeatid(seatid);
                var v = jpacket.stLastFourCard[i].Card;
                this.room_Card.initMoCard(pos, v, true);
            }
            return;
        }

        var size = cc.director.getWinSize();

        var by = size.height / 2 - 26;
        var dx = 117;
        var bx = size.width / 2 - 117 * 1.5;
        var self = this;
        for (var i = 0; i < jpacket.stLastFourCard.length; i++) {
            (function (i) {
                var seatid = jpacket.stLastFourCard[i].ChairID;
                var v = jpacket.stLastFourCard[i].Card;
                self._last_four_card[seatid] = v;
                var pos = MJModel.getPosBySeatid(seatid);
                if (MJModel.isOnVideo == false && pos != 0) {
                    v = 0;
                }
                var card = new MJCard();
                card.setValue(0, 0, CardType.Card_Hand, 0);
                if(MJModel.mj_roomType == 2){
                    card.setPosition(cc.p(bx + dx * (i + 1), by));
                }else{
                    card.setPosition(cc.p(bx + dx * i, by));
                }
                self.room_Card.addChild(card, 1000 - i);
                var move_callbck = cc.callFunc(function () {
                    self.room_Card.initMoCard(pos, v, true);
                });
                card.runAction(cc.sequence(cc.delayTime(1 + i * 0.3), cc.moveTo(0.3, MJConfig.getMoCardPos(pos)), move_callbck, cc.removeSelf()));
            })(i);
        }
    },
    _handler_game_record: function (data, canDelay) {
        //-----新总结算界面
        cc.log("-_handler_game_record-");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var gameType = "穆棱麻将 · 4人 ";
        if (MJModel.mj_roomType == 1) {
            gameType = "穆棱麻将 · 3人 ";
        }
        if (MJModel.mj_roomType == 2) {
            gameType = "穆棱麻将 · 2人 ";
        }
        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }

        for (var i = 0; i < gameRecord.MostWinScoreUser.length; i++) {
            var seatId = gameRecord.MostWinScoreUser[i];
            if (seatId != 255) {
                _winSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            var player = MJModel.players[i];
            var arrStr = ["坐庄次数", "胡牌次数", "赢分次数", "超时次数"];
            var arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.WinCounts, recoreInfo.outtime_num];

            if (player && player.uid != -1) {
                addX = 39 + (i * 302);
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, _winSeatid[i], _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }

            if (recoreInfo.totalscore != 0) {
                has_result = true;
            }

        }
        bigResult.refresh(PlayerNumber);

        this.release();
    },

    resetGame: function (allClean) {
        this._super(allClean);
        this._out_card_temp = [];
        this.gameending = false;
        this._isfenggang = false;
        this._isjiangang = false;
        this._isdaxianggang = false;
        this._last_four_card = [-1,-1,-1,-1];
    },

    handler_server_peng_kang_bc: function (data, canDelay) {
        this.room_Tip.showTextTip("");
        this.check_tip_operate_card(0, 0);
        var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);
        this.unschedule(this.autoOutCardTimeOut);
        this.unschedule(this.autoHuCardTimeOut);

        var seatid = ackBcOpResult.ChairID;
        var out_seatid = ackBcOpResult.OutCardChairID;
        var OpType = ackBcOpResult.OpType;
        var OpType2 = ackBcOpResult.OpType2;
        var card = ackBcOpResult.Card;
        var cardList = ackBcOpResult.OpCards;
        var removeHandcards1 = ackBcOpResult.cardDel;
        var specialCard = ackBcOpResult.SpecialCard;
        var ListenInfo = ackBcOpResult.ListenInfo;
        var LaiziNum = ackBcOpResult.LaiziNum;


        var scores = ackBcOpResult.Score;
        this.handler_gang_scores(scores, OpType, OpType2, canDelay);

        if (MJModel.isMyPlayer(seatid)) {
            if (this.room_Action) this.room_Action.setOperator(-1);
        }

        if (this.room_Action_video) this.room_Action_video.reset();

        var pos = MJModel.getPosBySeatid(seatid);
        var out_pos = MJModel.getPosBySeatid(out_seatid);

        this.players[pos].setTimeOut(false);
        this.players[pos].setOffline(false);

        if ((OpType & ActionType.TYPE_PASS) == ActionType.TYPE_PASS) {
            if (MJModel.isMyPlayer(seatid) && seatid == out_seatid && this.room_Card.isDuoPai(0))//如果是我自己摸的牌  自己过 则放开选牌功能
            {
                this.room_Info.showTime(MJModel.outCardTime);
                MJModel.cur_seat = seatid;
                this.myselfOpenOutCard(true);
            }

            return;
        }

        //是否风蛋
        var isdong = false;
        var isnan = false;
        var isxi = false;
        var isbei = false;
        for(var i = 0 ; i < cardList.length; i++){
            if(cardList[i] == 0x31){
                isdong = true;
            }
            if(cardList[i] == 0x32){
                isnan = true;
            }
            if(cardList[i] == 0x33){
                isxi = true;
            }
            if(cardList[i] == 0x34){
                isbei = true;
            }
        }
        if(isdong && isnan && isxi && isbei){
            this._isfenggang = true;
        }

        //是否箭蛋
        var iszhong = false;
        var isfa = false;
        var isbai = false;
        var isyiwan = false;
        var isyitong = false;
        var isyitiao = false;
        for(var i = 0 ; i < cardList.length; i++){
            if(cardList[i] == 0x41){
                iszhong = true;
            }
            if(cardList[i] == 0x42){
                isfa = true;
            }
            if(cardList[i] == 0x43){
                isbai = true;
            }
            if(cardList[i] == 0x01){
                isyiwan = true;
            }
            if(cardList[i] == 0x11){
                isyitiao = true;
            }
            if(cardList[i] == 0x21){
                isyitong = true;
            }
        }
        if((iszhong && isfa && isbai) && (isyiwan || isyitiao || isyitong) || (isyiwan && isyitiao && isyitong) && (iszhong || isfa || isbai)){
            this._isjiangang = true;
        }

        //是否大象蛋
        var isjiuwan = false;
        var isjiutiao = false;
        var isjiutong = false;
        cc.log("ningjiebiaobbbbbbbbbb" + JSON.stringify(cardList));
        for(var i = 0 ; i < cardList.length; i++){
            if(cardList[i] == 0x09){
                isjiuwan = true;
            }
            if(cardList[i] == 0x19){
                isjiutiao = true;
            }
            if(cardList[i] == 0x29){
                isjiutong = true;
            }
        }
        if(isjiuwan && isjiutiao && isjiutong){
            this._isdaxianggang = true;
        }

        var needRemoveOutCard = false;
        var needOpenOutCard = false;
        var removeHandcards2 = [];
        if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
            var ok = this.room_Card.addPengCard(pos, PengType.Peng_AnKang, card, out_pos, OpType,specialCard,LaiziNum, cardList);
            if (!ok)return;
            //this.room_Card.removeHandCard(pos, card, 4);
            //removeHandcards2.push(card);
            //removeHandcards2.push(card);
            //removeHandcards2.push(card);
            //removeHandcards2.push(card);
            for(var i = 0;i < cardList.length; i++){
                removeHandcards2.push(cardList[i]);
            }
        }
        else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG
            || (OpType & SpecialGangType.TYPE_LAIZIPI_GANG) == SpecialGangType.TYPE_LAIZIPI_GANG) {
            this.room_Card.addPengCard(pos, PengType.Peng_Peng, card, out_pos, OpType,specialCard,LaiziNum, cardList);
            this.room_Card.removeHandCard(pos, card, 2);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
            var ok = this.room_Card.addPengCard(pos, PengType.Peng_Kang, card, out_pos, OpType,specialCard, LaiziNum,cardList);
            if (!ok)return;
            //this.room_Card.removeHandCard(pos, card, 3);
            var issame = false;
            var samenum = 0;
            for(var i = 1;i < cardList.length; i++){
                if(cardList[0] == cardList[i]){
                    samenum++;
                    cc.log("ningjiebiaosamenum" + samenum);
                    cc.log("ningjiebiaocardList[i]" + cardList[i]);
                }
            }
            if(samenum == 3){
                issame = true;
            }
            cc.log("ningjiebiaocardList" + JSON.stringify(cardList));
            cc.log("ningjiebiaoissame" + issame);
            cc.log("ningjiebiaocardList.length" + cardList.length);
            if(issame){
                removeHandcards2.push(card);
                removeHandcards2.push(card);
                removeHandcards2.push(card);
            }else {
                for (var i = 0; i <= cardList.length; i++) {
                    if (cardList[i] != card) {
                        cc.log("ningjiebiaoqqqqqqqqq");
                        removeHandcards2.push(cardList[i]);
                    }
                }
            }
            needRemoveOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
            var ok = this.room_Card.changPengCard(pos, PengType.Peng_Kang, card, out_pos, OpType,specialCard);
            if (!ok)return;
            //this.room_Card.removeHandCard(pos, card, 1);
            removeHandcards2.push(card);
        }
        else if ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI
            || (OpType & SpecialGangType.TYPE_LAIZI_GANG) == SpecialGangType.TYPE_LAIZI_GANG) {
            this.room_Card.addPengCard(pos, PengType.Chi_L, card, out_pos, OpType,specialCard, LaiziNum,cardList);
            //this.room_Card.removeHandCard(pos, card + 1, 1);
            //this.room_Card.removeHandCard(pos, card + 2, 1);
            removeHandcards2.push(card + 1);
            removeHandcards2.push(card + 2);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI
            || (OpType & SpecialGangType.TYPE_HONGZHONG_GANG) == SpecialGangType.TYPE_HONGZHONG_GANG) {
            this.room_Card.addPengCard(pos, PengType.Chi_M, card, out_pos, OpType,specialCard,LaiziNum, cardList);
            //this.room_Card.removeHandCard(pos, card - 1, 1);
            //this.room_Card.removeHandCard(pos, card + 1, 1);
            removeHandcards2.push(card - 1);
            removeHandcards2.push(card + 1);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI
            || (OpType & SpecialGangType.TYPE_FACAI_GANG) == SpecialGangType.TYPE_FACAI_GANG) {
            this.room_Card.addPengCard(pos, PengType.Chi_R, card, out_pos, OpType,specialCard, LaiziNum,cardList);
            //this.room_Card.removeHandCard(pos, card - 1, 1);
            //this.room_Card.removeHandCard(pos, card - 2, 1);
            removeHandcards2.push(card - 1);
            removeHandcards2.push(card - 2);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
            this.room_Info.showDirectionTip(-1);
            this.room_Info.stopTime();
            MJModel.canTouchCard = false;
            //抢弯杠
            if ((OpType2 && OpType2 == 5)) {
                this.room_Card.changeWanGang(out_pos, PengType.Peng_Peng, card);
                if (this.room_Card.isDuoPai(out_pos)) this.room_Card.removeHandCard(out_pos, card, 1);
            }
            //抢直杠
            if ((OpType2 && OpType2 == 11)) {
                var ok = this.room_Card.changeZhiGang(out_pos, PengType.Peng_Peng, card);
                if (ok) {
                    this.room_Card.initMoCard(out_pos, (out_pos == 0 || MJModel.isOnVideo ) ? card : 0);
                    this.room_Card.initMoCard(out_pos, (out_pos == 0 || MJModel.isOnVideo ) ? card : 0);
                    this.room_Card.initMoCard(out_pos, (out_pos == 0 || MJModel.isOnVideo ) ? card : 0);
                    this.room_Card.reflashHandCard(out_pos, true, false);
                }
            }

            if ((OpType2 && OpType2 == 5) || (OpType2 && OpType2 == 11)) {
                //避免双抢杠的时候 会出两次牌
                if (this.room_Card.out_card[out_pos].length == 0 || this.room_Card.out_card[out_pos][this.room_Card.out_card[out_pos].length - 1].getValue() != card) {
                    this.room_Card.addOutCard(out_pos, card);
                }
            }
        }

        if (removeHandcards2.length > 0) {
            if (removeHandcards1 && removeHandcards1.length > 0) {
                for (var i = 0; i < removeHandcards1.length; i++) {
                    this.room_Card.removeHandCard(pos, removeHandcards1[i], 1);
                }
            } else {
                for (var i = 0; i < removeHandcards2.length; i++) {
                    this.room_Card.removeHandCard(pos, removeHandcards2[i], 1);
                }
            }
        }
        cc.log("ningjibieoaremoveHandcards2" + JSON.stringify(removeHandcards2));
        cc.log("ningjibieoaremoveHandcards22222" + removeHandcards2);
        if (MJModel.isMyPlayer(seatid)) {
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            MJModel.isAutoOutCard = false;
            this.room_Card.setAutoOutCard(false);
        }

        if (needRemoveOutCard) {
            MJModel.cur_seat = seatid;
            var isok = this.room_Card.removeOutCard(out_pos, card, canDelay);
            this.room_Card.setCurCardTip(false);
            if (isok == false) {
                try {
                    ERROR(this, "removeOutCard error card:" + card + "lastoutcard:" + this.room_Card.out_card[out_pos][this.room_Card.out_card[out_pos].length - 1].getValue());
                } catch (e) {
                    ERROR(this, "needRemoveOutCard" + e);
                }
                this.reConnect("", false);
            }
        }

        if (needOpenOutCard) {
            this.room_Info.showDirectionTip(pos);
            if (MJModel.isMyPlayer(seatid)) {
                this.myselfOpenOutCard();
            }
        }

        var player = MJModel.players[seatid];
        if (player && canDelay) {

            var effect = "gang";
            if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                var zimo = this.room_Card.isDuoPai(pos);
                effect = "hu";
                if (zimo) {
                    effect = "zimo";
                }

                if (OpType2 == 5 || OpType2 == 11) {
                    effect = "qiangganghu";
                }
            }
            else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                effect = "peng";
            }
            else if (MJModel.mj_table._isfenggang) {
                effect = "fenggang";
            }
            else if (MJModel.mj_table._isjiangang) {
                effect = "jiangang";
            }
            else if (MJModel.mj_table._isdaxianggang) {
                effect = "daxianggang";
            }
            else if ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI || (OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                effect = "chi";
            }

            this.handler_op_sound(pos, player.sex, OpType, OpType2, effect);
            this.handler_op_effect(pos, out_pos, player.sex, OpType, OpType2, effect);
        }

        //--------------------------------------
        MJModel.listen_info = [];
        //点击出来有听操作提示
        if (ListenInfo.length > 0) {
            var listeninfo_size = ListenInfo.length;

            for (var i = 0; i < listeninfo_size; i++) {
                var tli = Utils.clone(tagListenInfo);
                tli.HuInfo = [];

                tli.OutCard = ListenInfo[i].OutCard;
                var huinfoLen = ListenInfo[i].HuInfo.length;
                tli.HuInfoLen = huinfoLen;
                for (var j = 0; j < huinfoLen; j++) {
                    var huInfo = Utils.clone(tagHuInfo);
                    huInfo.Card = ListenInfo[i].HuInfo[j].Card;
                    huInfo.LeftNum = ListenInfo[i].HuInfo[j].LeftNum;
                    huInfo.HuFanNum = ListenInfo[i].HuInfo[j].HuFanNum;
                    tli.HuInfo.push(huInfo);
                }
                MJModel.listen_info.push(tli);
            }
        }

cc.log("ningjiebiaolisten" + JSON.stringify(MJModel.listen_info));
        if (this.isQiangTing(OpType)) {
            var player = MJModel.players[seatid];
            if (player && canDelay) {
                this.room_Tip.showSimpleEffect(pos, out_pos, 0, "qiangting");
                Sound.getInstance().playEffect(__String.createWithFormat(getResPath("RoomMJ/sound/operator/%1_%2.mp3"), player.sex == SEX_ID.SEX_FEMALE ? "w" : "m", "ting"));
            }
            this.players[pos].setTingPaiVisible(true);
            if (MJModel.isMyPlayer(seatid)) {
                MJModel.mj_lockcard_type = 1;
                this.myselfOpenOutCard(false);
            }
        }
    },

    handler_server_out_card_bc: function (data, canDelay) {
        var userOutCard = parsePacket("proto.game.AckUserOutCard", data);
        var seatId = userOutCard.ChairID;
        if (MJModel.isMyPlayer(seatId) && MJModel.mj_lockcard_type == 1) {
            MJModel.mj_lockcard_type = 2;
        }

        this._super(data, canDelay)

        //if (this.room_Card) {
        //    this.room_Card.setSomeCardClickState();
        //}
    },

    myselfOpenOutCard: function (IsMoCard, showTip) {
        if (IsMoCard == undefined) IsMoCard = false;
        if (showTip == undefined) showTip = true;
        if (MJModel.isOnVideo) {
            return;
        }
        if ((MJModel.isAutoOutCard && IsMoCard) || MJModel.mj_lockcard_type == 2) {
            if (this.room_Card) {
                this.room_Card.setSomeCardClickState();
            }
            this.autoOutCard();
            return;
        }
        this.room_Card.resetAllCardClickState();
        MJModel.canTouchCard = true;
        MJModel.canChoiceMore = false;
        this.room_Card.setTingPaiFlag(true);

        if (this.room_Action) this.room_Action.setTingPaiVis(false);
        if (this.room_Action) this.room_Action.setAutoOutCardVis(false);

        this.room_Card.setSomeCardClickState();

        if (showTip)this.room_Tip.showOutCardTip();
    },
    //handler_server_mo_card_bc: function (data, canDelay) {
    //    this._super(data, canDelay);
    //    if (MJModel.isMyPlayer(MJModel.cur_seat) && this.room_Card.isDuoPai(0) && MJModel.mj_lockcard_type == 2) {
    //        cc.log("ningjiebiaozidongdapai");
    //        this.autoOutCard();
    //    }
    //},

    handler_server_tingpai_notify: function (data, canDelay) {
      this._super(data, canDelay);

        if (this.room_Card) {
            this.room_Card.resetAllCardClickState();
            this.room_Card.setSomeCardClickState();
        }
    },
    autoOutCardTimeOut: function (dt) {
        this.unschedule(this.autoOutCardTimeOut);
        if (MJModel.isAutoOutCard == false && MJModel.mj_lockcard_type != 2)return;
        if (MJModel.TouPiaoING == true) return;//投票期间 该功能不起作用
        sendOutCard(MJModel.curOperateCard);
    },
    autoOutCard: function () {
        this.schedule(this.autoOutCardTimeOut, 0.5);
    },
    isjiangang: function(cardList){
        try {
            var iszhong = false;
            var isfa = false;
            var isbai = false;
            var isyiwan = false;
            var isyitong = false;
            var isyitiao = false;
            for( var i = 0 ; i < cardList.length; i++){
                if(cardList[i] == 0x41){
                    iszhong = true;
                }
                if(cardList[i] == 0x42){
                    isfa = true;
                }
                if(cardList[i] == 0x43){
                    isbai = true;
                }
                if(cardList[i] == 0x01){
                    isyiwan = true;
                }
                if(cardList[i] == 0x11){
                    isyitiao = true;
                }
                if(cardList[i] == 0x21){
                    isyitong = true;
                }
            }
            if((iszhong && isfa && isbai) && (isyiwan || isyitiao || isyitong) || (isyiwan && isyitiao && isyitong) && (iszhong || isfa || isbai)){
                return true;
            }else{
                return false;
            }
        } catch (e) {
            return false;
        }
    },

    isfenggang: function(cardList){
        try {
            var isdong = false;
            var isnan = false;
            var isxi = false;
            var isbei = false;
            for(var i = 0 ; i < cardList.length; i++){
                if(cardList[i] == 0x31){
                    isdong = true;
                }
                if(cardList[i] == 0x32){
                    isnan = true;
                }
                if(cardList[i] == 0x33){
                    isxi = true;
                }
                if(cardList[i] == 0x34){
                    isbei = true;
                }
            }
            if(isdong && isnan && isxi && isbei){
                return true;
            }else{
                return false;
            }
        } catch (e) {
            return false;
        }
    },

    isdaxianggang: function(cardList){
        try {
            var isjiuwan = false;
            var isjiutiao = false;
            var isjiutong = false;
            for( var i = 0 ; i < cardList.length; i++){
                if(cardList[i] == 0x09){
                    isjiuwan = true;
                }
                if(cardList[i] == 0x19){
                    isjiutiao = true;
                }
                if(cardList[i] == 0x29){
                    isjiutong = true;
                }
            }
            if(isjiuwan && isjiutiao && isjiutong){
                return true;
            }else{
                return false;
            }
        } catch (e) {
            return false;
        }
    },

    handler_out_card_sound: function (sex, card) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.mj_sound_use == 1) {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
        } else {
            this._super(sex, card);
        }
    },
    //
    handler_op_sound: function (pos, sex, OpType, OpType2, effect) {
        if (this.isQiangTing(OpType)) {
            return;
            cc.log("asdasdasfasfhsdfsa");
        }
        if (effect == "qiangganghu") {
            effect = "hu";
        }
        if(effect == "fenggang" || effect == "jiangang" || effect == "daxianggang"){
            effect = "gang";
        }
        Sound.getInstance().playEffect(__String.createWithFormat(getResPath("RoomMJ/sound/operator/%1_%2.mp3"), sex == SEX_ID.SEX_MAN ? "m" : "w", effect));
    },

    handler_op_effect: function (pos, out_pos, sex, OpType, OpType2, effect) {
        if (this.isQiangTing(OpType)) {
            return;
        }
        this.room_Tip.showSimpleEffect(pos, out_pos, OpType, effect);
    },

    isQiangTing: function (OpType) {
        if (((OpType & SpecialGangType.TYPE_LAIZI_GANG) == SpecialGangType.TYPE_LAIZI_GANG)
            || ((OpType & SpecialGangType.TYPE_HONGZHONG_GANG) == SpecialGangType.TYPE_HONGZHONG_GANG)
            || ((OpType & SpecialGangType.TYPE_LAIZIPI_GANG) == SpecialGangType.TYPE_LAIZIPI_GANG)
            || ((OpType & SpecialGangType.TYPE_FACAI_GANG) == SpecialGangType.TYPE_FACAI_GANG)) {
            return true;
        }
    },

    handler_server_scene_info_uc: function (shanxi_gameScene, canDelay) {
        var ackGameFree = shanxi_gameScene.GameSence;
        this._super(ackGameFree, canDelay);
        this._setGameType();

        if (shanxi_gameScene.GameSence.sceneStatus != 0) {
            var baoting = shanxi_gameScene.issuopai;
            for (var i = 0; i < baoting.length; i++) {
                var pos = MJModel.getPosBySeatid(i);
                var isbaoting = baoting[i];
                if (MJModel.isMyPlayer(i)) {
                    if (isbaoting == 2) {
                        MJModel.mj_lockcard_type = 2;
                    }
                    if(isbaoting == 1){
                        MJModel.mj_lockcard_type = 1;
                    }
                }
                if (isbaoting == 1 || isbaoting == 2) {
                    this.players[pos].setTingPaiVisible(true);
                }
            }
        }

        if (this.room_Card) {
            this.room_Card.setSomeCardClickState();
        }

    },

    initMJPlayer: function () {
        MJPlayer.prototype.setTingPaiVisible = function (v) {
            if (!this.liangpai_flag) {
                this.liangpai_flag = new cc.Sprite(getResPath("RoomMJ/tingpai_flag.png"));
                this.liangpai_flag.setVisible(false);
                if (this.pid == 1) {
                    this.liangpai_flag.setPosition(cc.p(0, 30));
                }
                else {
                    this.liangpai_flag.setPosition(cc.p(this.m_size.width, 30));
                }
                this.addChild(this.liangpai_flag, 1);
            }
            if (this.liangpai_flag) {
                this.liangpai_flag.setVisible(v);
            }
        };
        var superreset = MJPlayer.prototype.reset;
        MJPlayer.prototype.reset = function (allClean, isGameStart) {
            superreset.call(this);
            this.setTingPaiVisible(false);
        };
    },

    initMJActionVideo: function () {
        var selfTable = this;
        var super_mjactionvideo_ctor = MJActionVideo.prototype.ctor;
        MJActionVideo.prototype.ctor = function () {
            super_mjactionvideo_ctor.call(this);

            for (var i = 0; i < 4; i++) {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("mulengmj/action/qiangting.png"), getResPath("mulengmj/action/qiangting.png"), "");
                btn.setName("qiangting");
                btn.setVisible(false);
                btn.setTag(1);
                this.addChild(btn);

                this.actions[i]["qiangting"] = btn;
                this.opBtns[i].push(btn);
            }
        };

        MJActionVideo.prototype.setOperator = function (pos, operat) {
            for (var i = 0; i < this.opBtns[pos].length; i++) {
                this.opBtns[pos][i].setVisible(false);
            }

            if (operat == -1 || operat == 0 || operat == null || operat == undefined) {
                return false;
            }

            if (( operat & ActionType.TYPE_LISTEN) == ActionType.TYPE_LISTEN) {
                operat = operat - ActionType.TYPE_LISTEN;
            }

            if(operat <= 0){
                return false;
            }

            if (this.actions[pos]["pass"]) {
                this.actions[pos]["pass"].setVisible(true);
            }

            if ((operat & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                if (this.actions[pos]["hu"]) {
                    this.actions[pos]["hu"].setVisible(true);
                }
            }

            if ((operat & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG || (operat & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (operat & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                if (this.actions[pos]["gang"]) {
                    this.actions[pos]["gang"].setVisible(true);
                }
            }

            if ((operat & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                if (this.actions[pos]["peng"]) {
                    this.actions[pos]["peng"].setVisible(true);
                }
            }

            if ((operat & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (operat & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI || (operat & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                if (this.actions[pos]["chi"]) {
                    this.actions[pos]["chi"].setVisible(true);
                }
            }

            if (operat != -1 && selfTable.isQiangTing(operat)) {
                if (this.actions[pos]["qiangting"]) {
                    this.actions[pos]["qiangting"].setVisible(true);
                }
            }

            this.reflashOpBtns(pos);
            return true;
        };
    },

    _setGameType: function () {
        //穆棱麻将
        MJModel.play_id_str = [];
        if (MJModel.RoomConfigID.indexOf(85400001) != -1) {
            MJModel.play_id_str.push("风箭可吃");
        }
        if (MJModel.RoomConfigID.indexOf(85400002) != -1) {
            MJModel.play_id_str.push("上听吃三家");
        }
        if (MJModel.RoomConfigID.indexOf(85400003) != -1) {
            MJModel.play_id_str.push("两色可胡");
        }
        if (MJModel.RoomConfigID.indexOf(85400004) != -1) {
            MJModel.play_id_str.push("七对");
        }
        if (MJModel.RoomConfigID.indexOf(85400005) != -1) {
            MJModel.play_id_str.push("抢杠包三家");
        }
        if (MJModel.RoomConfigID.indexOf(85400006) != -1) {
            MJModel.play_id_str.push("起手蛋");
        }
        var gameDes = "";
        for (var i = 0; i < MJModel.play_id_str.length; i++) {
            gameDes += MJModel.play_id_str[i];
            if (i != MJModel.play_id_str.length - 1) {
                gameDes += " ";
            }
        }
        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);
    },

    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.getValue();
            if (typeof b === "object") bv = b.getValue();
            //if (av == this._curLaizi && bv != this._curLaizi)return 1;//赖子放在最前边
            //if (av != this._curLaizi && bv == this._curLaizi)return -1;//赖子放在最前边

            //if (av == this._curLaizipi && bv != this._curLaizipi)return 1;//赖子皮放在最前边
            //if (av != this._curLaizipi && bv == this._curLaizipi)return -1;//赖子皮放在最前边
            return bv - av;
        } catch (e) {
            return 0;
        }
    },

});

var AddFanType = {
    30: "门前清",
    48: "夹胡",
    15: "混一色",
    14: "清一色",
    22: "抢杠胡",
    16: "飘胡",
    36: "七对",
    27: "豪华七对",
    1: "大搂",
    12: "清一色飘",
    13: "混一色飘",
    24: "杠上开花",
    17: "平胡",
};

var SpecialGangType = {
    //TYPE_FENG_GANG: 0x10000,
    //TYPE_JIAN_GANG: 0x20000,
    TYPE_LAIZIPI_GANG: 0x80000,     //碰听
    TYPE_HONGZHONG_GANG: 0x20000,  //中吃听
    TYPE_LAIZI_GANG: 0x10000,  //左吃听
    TYPE_FACAI_GANG: 0x40000,  //右吃听
};

var selfCMD = {
    SERVER_FOURCARD_HUANGHUANG: 5036, //海底捞月协议
};

var MJResult_MuLeng= MJCommonResult.extend({
    updateContentView: function (ackGameEndJS) {
        this.ackGameEnd = ackGameEndJS.gameend;
        this.shanxiGameEnd = ackGameEndJS;
        //输赢标志
        var seatId = MJModel.seatid;
        var score = this.ackGameEnd.Score[seatId];
        var effectName = "lose";
        if (score > 0) {
            effectName = "win";
        }
        this._win_effect(effectName);

        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);

        var itemHeight = 120;

        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;

            var countY = m;

            if (MJModel.mj_roomType == 1) {
                if (pos == 2) {
                    continue;
                }
            }

            if (MJModel.mj_roomType == 2) {
                if (pos == 1 || pos == 3) {
                    continue;
                }

                if (pos == 0) {
                    countY = 1;
                } else if (pos == 2) {
                    countY = 2;
                }
            }

            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 495 - count * itemHeight;
            var startX = 40;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX + 60, startY + 55));
            this.bgSpr.addChild(headLayer, 10);

            //上排牌 杠
            var ganghuLayer = this.createGangHuLayer(seatid);
            this.bgSpr.addChild(ganghuLayer, 10);
            ganghuLayer.setPosition(cc.p(startX + 230, startY + 65));

            //下排牌
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX + 0, startY));
            this.bgSpr.addChild(handCardLayer);

            // this.createSpecialHuTip(startX + 785, startY + 40, seatid);
            this.createSpecialHuTip(startX + 900, startY + 40, seatid);

            // 输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX + 1100, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            //中马列表
            var maLayer = this.createMaLayer(seatid);
            if (maLayer) {
                maLayer.setPosition(cc.p(startX + 845, startY + 85));
                this.bgSpr.addChild(maLayer);
            }
            count++;
        }
    },

    createGangHuLayer: function (seatid) {
        var layer = new cc.Layer();
        var x = 0;
        var y = 0;
        var sxendInfo = this.shanxiGameEnd;
        if (this.ackGameEnd.EndGangInfo.length > seatid) {
            var gameEndInfo = this.ackGameEnd.EndGangInfo[seatid];
            var map = {};
            for (var i = 0; i < gameEndInfo.Gang.length; i++) {
                var gang = gameEndInfo.Gang[i];
                if (map[gang.GangType] == undefined) {
                    map[gang.GangType] = [];
                }
                map[gang.GangType].push(gang.GangCard);
            }
            for (var key in map) {
                if (!map.hasOwnProperty(key))continue;
                var a = key;
                var typeLabel = new cc.LabelTTF(this.getStringByType(a), "Arial", 20);
                typeLabel.setColor(this.leftColor);
                typeLabel.setAnchorPoint(cc.p(0, 0));
                typeLabel.setPosition(cc.p(x, y + 10));
                layer.addChild(typeLabel);

                x += typeLabel.getContentSize().width;

                var temp = map[key];
                for (var j = 0; j < temp.length; j++) {
                    var smallCard = null;
                    var c = Utils.toHex2(temp[j]);
                    smallCard = new cc.Sprite(__String.createWithFormat(getResPath("mulengmj/smallCard/%1.png"), c));
                    if (smallCard != undefined) {
                        smallCard.setAnchorPoint(cc.p(0.0, 0.0));
                        smallCard.setPosition(cc.p(x, y));
                        layer.addChild(smallCard);
                    }
                    x += 28;
                    if (j == temp.length - 1) {
                        x += 20;
                    }
                }
            }
        }
        x += 10;
        //杠牌分
        var gangScore = this.ackGameEnd.EndGangInfo[seatid].TotalGangScore;
        if (gangScore) {
            var txt = "杠牌分  +";
            if (gangScore < 0) {
                txt = "杠牌分  ";
            }
            var gangfen = new cc.LabelTTF(txt + gangScore, "Arial", 20);
            gangfen.setColor(this.leftColor);
            gangfen.setAnchorPoint(cc.p(0, 0));
            gangfen.setPosition(cc.p(x, y + 10));
            layer.addChild(gangfen);
            x += gangfen.getContentSize().width + 10;
        }

        x += 10;
        var addfan = this.ackGameEnd.faninfo[seatid].addfan;
        if (addfan) {
            for (var i = 0; i < addfan.length; i++) {
                if (AddFanType[addfan[i].AddType]) {
                    var fanType = new cc.LabelTTF(AddFanType[addfan[i].AddType], "Arial", 20);
                    fanType.setColor(this.leftColor);
                    fanType.setAnchorPoint(cc.p(0, 0));
                    fanType.setPosition(cc.p(x, y + 10));
                    layer.addChild(fanType);
                    x += fanType.getContentSize().width + 10;
                }
            }
        }
        return layer;
    },

    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var path = "";
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5抢杠胡 6被抢杠 7一炮多响
            switch (fanInfo.SpecialType) {
                case 1:
                    path = "mulengmj/result-detail/result_detail_zimo.png";
                    break;
                case 2:
                    path = "mulengmj/result-detail/result_detail_paohu.png";
                    break;
                case 3:
                    path = "mulengmj/result-detail/result_detail_dianpao.png";
                    break;
                case 4:
                    path = "mulengmj/result-detail/result_detail_beizimo.png";
                    break;
                case 5:
                    path = "mulengmj/result-detail/result_detail_qiangganghu.png";
                    break;
                case 6:
                    path = "mulengmj/result-detail/result_detail_beiqianggang.png";
                    break;
                case 7:
                    path = "mulengmj/result-detail/result_detail_dianpao.png";
                    break;
                default:
                    break;
            }
            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setPosition(cc.p(startX + 20, startY + 20));
                this.bgSpr.addChild(typeSprite);

            }
        }
    },
    getStringByType: function (stype) {
        var type = Number(stype);
        var str = "";
        switch (type) {
            case 2:
                str = "点杠";
                break;
            case 4:
                str = "弯杠";
                break;
            case 8:
                str = "暗杠";
                break;
            case 16:
                str = "被弯杠";
                break;
            case 32:
                str = "被放杠";
                break;
            case 64:
                str = "放杠";
                break;
            case 128:
                str = "被暗杠";
                break;
            default:
                break;
        }
        return str;
    },
});
