loadProtoFile("proto/lianhuagmgameproto.proto");


var HuType = {
    HU_INVALID: 0,
    HU_ZIMO: 1,
    HU_PAOHU: 2,
    HU_HeiMo: 2,
    Hu_RuanMo: 1,
    HU_DIANPAO: 3,
    HU_BEIZIMO: 4,
    HU_QIANG_GANG: 5,
    HU_BEI_QIANG_GANG: 6,
    HU_YI_PAO_DUO_XIANG: 7,
    HU_GANG_SHANG_HUA: 8,
    HU_GANG_HOU_PAO: 9,
};
var AddFanType = {
    MJ_FAN_TYPE_PIHU: 121,  //屁胡
    MJ_FAN_TYPE_PENGPENGHU: 16,				//碰碰胡
    MJ_FAN_TYPE_QINGYISE: 14,					//清一色
    MJ_FAN_TYPE_HUNYISE: 15,					//混一色
    MJ_FAN_TYPE_HUNDUIDUI: 122, //混对对
    MJ_FAN_TYPE_QINGDUIDUI: 123,  //清对对
    MJ_FAN_TYPE_FENGQING: 124,//风清
    MJ_FAN_TYPE_4LAIHUPAI: 125,//四配胡
    MJ_FAN_TYPE_TIANHU: 19,					//天胡
    MJ_FAN_TYPE_QIDUI: 36,						//七对
    MJ_FAN_TYPE_QINGQIDUI: 25,					//清七对
    MJ_FAN_TYPE_HUNQIDUI: 126,   //混七对
    MJ_FAN_TYPE_YITIAOLONG: 39,				//一条龙
    MJ_FAN_TYPE_BANZIFANBEI: 130, //搬子翻倍
    MJ_FAN_TYPE_DIHU: 20,						//地胡
};

var AddFanTypeArray = [
    AddFanType.MJ_FAN_TYPE_PIHU,
    AddFanType.MJ_FAN_TYPE_PENGPENGHU,
    AddFanType.MJ_FAN_TYPE_QINGYISE,
    AddFanType.MJ_FAN_TYPE_HUNYISE,
    AddFanType.MJ_FAN_TYPE_HUNDUIDUI,
    AddFanType.MJ_FAN_TYPE_QINGDUIDUI,
    AddFanType.MJ_FAN_TYPE_FENGQING,
    AddFanType.MJ_FAN_TYPE_4LAIHUPAI,
    AddFanType.MJ_FAN_TYPE_TIANHU,
    AddFanType.MJ_FAN_TYPE_QIDUI,						//七对
    AddFanType.MJ_FAN_TYPE_QINGQIDUI,					//清七对
    AddFanType.MJ_FAN_TYPE_HUNQIDUI,   //混七对
    AddFanType.MJ_FAN_TYPE_YITIAOLONG,   //一条龙
    AddFanType.MJ_FAN_TYPE_BANZIFANBEI,   //搬子翻倍
    AddFanType.MJ_FAN_TYPE_DIHU,   //地胡
];

var AddFanNameArray = [
    "屁胡",
    "碰碰胡",
    "清一色",
    "混一色",
    "混对对",
    "清对对",
    "风清",
    "四配胡",
    "天胡",
    "七对",
    "清七对",
    "混七对",
    "一条龙",
    "搬子翻倍",
    "地胡",
];


var selfCMD = {
    SERVER_BUHUA: 5080, //补花（红中）
};

var MJTable_LianHuaGM = MJTable.extend({
    tag: "MJTable_LianHuaGM",
    _curLaizi: -1,
    _curLaizipi: -1,
    _curLaizipi2: -1,
    _curLaizi_bg: null,
    isRecordShow: false,
    _pkg_id: 0,
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        MJModel.mj_suport_fangyan = 0;
        MJModel.outCardEffect_style = 1;

        MJModel.mj_bg_use = 1;
        MJModel.mj_suport_change_bg = 1;
        MJModel.toupiaoTipsType = 1;
        // MJModel.chi_layout = 3;
        MJModel.mj_touch_tip = 1;
        MJModel.isOutCard = true;
        MJModel.mj_chat_style = 5;
        MJModel.mj_public_style = 1;
        MJModel.mj_card_lib_type = 1;

        MJModel.mj_gps_type = 1;
        MJModel.shareType = 1;

        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];
            if (this._pkg_id == 2208 || this._pkg_id == 2211) {
                MJModel.mj_roomType = 2;
            } else if (this._pkg_id == 2209) {
                MJModel.mj_roomType = 1;
            }
        } catch (e) {
            Log(this, e);
        }

        try {
            var help = this.roomPublic.getChildByName("game_help");
            help.setVisible(false);
        } catch (e) {

        }
        this._init_extend();
        this._super();
        // this.schedule(this.test, 1.0);
    },
    getMjTypePath: function () {
        if (MJModel.mj_roomType == 2) {
            return getResPath("lianhuagm/flag/pkgid3.png");
        } else if (MJModel.mj_roomType == 1) {
            return getResPath("lianhuagm/flag/pkgid2.png");
        }
        return getResPath("lianhuagm/flag/pkgid1.png");
    },

    loadCardConfig: function (path) {
        if (MJModel.mj_bg_use == 0 && MJModel.mj_roomType != 2) {
            path = "lianhuagm/config/card_config_lhgm.json";
        }
        this._super(path);
    },

    isSupportPublicCard: function () {
        return false;
    },
    _init_extend: function () {
        var self_table = this;

        MJCards.prototype.sortCard = function (a, b) {
            return self_table._sortCard(a, b);
        };

        MJCard.prototype.check_addFlag = function () {
            self_table._checkAddCardFlag(this);
        };

        //湖北麻将不要自动胡牌功能
        MJAction.prototype.setAutoOutCardVis = function (value) {
        };

        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(false);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };

        MJCards.prototype.addHuCard = function (pos, value) {
            for (var i = 0; i < this.hu_card[pos].length; i++) {
                var tcard = this.hu_card[pos][i];
                if (tcard.getValue() == value) {
                    tcard._fengNum++;
                    self_table.addCardNum(tcard, pos, tcard._fengNum);
                    return tcard;
                }
            }

            var card = new MJCard();
            if (card._fengNum == undefined) {
                card._fengNum = 1;
            }

            this.hu_card[pos].push(card);
            card.setValue(value, pos, CardType.Card_Hu, this.hu_card[pos].length - 1);
            self_table.addCardNum(card, pos, card._fengNum);

            card.setMyPosition(MJConfig.getHuCardPos(pos, this.hu_card[pos].length - 1));
            this.addChild(card, MJConfig.getHuCardOrder(pos, this.hu_card[pos].length - 1));
            return card;
        };
        var super_addOutCard = MJCards.prototype.addOutCard;
        MJCards.prototype.addOutCard = function (pos, value, showPoint) {
            if (value == 65) {
                return this.addHuCard(pos, value);
            } else {
                return super_addOutCard.call(this, pos, value, showPoint);
            }
        };

    },

    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.getValue();
            if (typeof b === "object") bv = b.getValue();
            if (av == this._curLaizi && bv != this._curLaizi)return 1;//赖子放在最前边
            if (av != this._curLaizi && bv == this._curLaizi)return -1;//赖子放在最前边
            return bv - av;
        } catch (e) {
            return 0;
        }
    },
    test: function (dt) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;
        if (tempCount == 5 && true) {

            var cardlist = [3, 4, 5, 5, 7, 8, 9, 18, 18, 21, 35, 37, 66, 3, 4, 5, 5, 7, 8, 9, 18, 18, 21, 35, 37, 66, 3, 4, 5, 5, 7, 8, 9, 18, 18, 21, 35, 37, 66, 3, 4, 5, 5, 7, 8, 9, 18, 18, 21, 35, 37, 66];
            this.room_Card.initOutCard(0, cardlist);
            this.room_Card.initOutCard(2, cardlist);
            // this.room_Card.addOutCard(0, 65);
            // this.room_Card.addOutCard(1, 65);
            // this.room_Card.addOutCard(2, 65);
            // this.room_Card.addOutCard(3, 65);
            // this.room_Card.addOutCard(0, 65);
            // this.room_Card.addOutCard(1, 65);
            // this.room_Card.addOutCard(2, 65);
            // this.room_Card.addOutCard(3, 65);


            // return;
            var packet = {
                "gameend": {
                    "UserCard": [{
                        "ChangeableCardsLen": 7,
                        "ChangeableCards": [17, 18, 18, 19, 67, 67, 67],
                        "FixedCardsLen": 2,
                        "stFixedCards": [{"CardData": 3, "state": 8, "chairID": 0, "LaiziNum": null}, {
                            "CardData": 2,
                            "state": 2,
                            "chairID": 1,
                            "LaiziNum": null
                        }]
                    }, {
                        "ChangeableCardsLen": 13,
                        "ChangeableCards": [3, 4, 5, 5, 7, 8, 9, 18, 18, 21, 35, 37, 66],
                        "FixedCardsLen": 0,
                        "stFixedCards": []
                    }, {
                        "ChangeableCardsLen": 11,
                        "ChangeableCards": [19, 21, 37, 51, 51, 51, 52, 52, 67, 67, 67],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{"CardData": 50, "state": 2, "chairID": 1, "LaiziNum": null}]
                    }],
                    "Score": [2, -10, 8],
                    "EndState": 0,
                    "EndGangInfo": [{
                        "Gang": [{"GangType": 8, "GangCard": 3}, {"GangType": 2, "GangCard": 2}],
                        "TotalGangScore": 0
                    }, {
                        "Gang": [{"GangType": 64, "GangCard": 2}, {"GangType": 64, "GangCard": 50}],
                        "TotalGangScore": 0
                    }, {"Gang": [{"GangType": 2, "GangCard": 50}], "TotalGangScore": 0}],
                    "faninfo": [{
                        "chairid": 0,
                        "SpecialType": 4,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 1,
                        "SpecialType": 4,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 2,
                        "SpecialType": 1,
                        "FanNum": 1,
                        "addfan": [{"AddType": 17, "AddNum": 1, "AddType2": null}],
                        "hucard": 21,
                        "DianPao": []
                    }],
                    "money": [99992, 99992, 100016]
                },
                "zhongma_score": [],
                "zhongma_num": [],
                "UserHorseInfo": {"chair_id": [2], "card": [4, 6, 17, 7, 65, 35], "zhongmacard": [17, 65]},
                "total_score": [2, -10, 8],
                "hongzhong_num": [0, 1, 1],
                "gang_score": [6, -4, -2, 0, 0, 0, 0, -2, 2]
            }
            // {
            //     "gameend": {
            //         "UserCard": [{
            //             "ChangeableCardsLen": 11,
            //             "ChangeableCards": [2, 2, 19, 19, 19, 35, 35, 41, 41, 41, 67],
            //             "FixedCardsLen": 1,
            //             "stFixedCards": [{"CardData": 50, "state": 1, "chairID": 1, "LaiziNum": null}]
            //         }, {
            //             "ChangeableCardsLen": 13,
            //             "ChangeableCards": [4, 4, 4, 6, 6, 7, 20, 21, 25, 25, 36, 37, 67],
            //             "FixedCardsLen": 0,
            //             "stFixedCards": []
            //         }, {
            //             "ChangeableCardsLen": 10,
            //             "ChangeableCards": [6, 7, 8, 9, 17, 17, 18, 18, 34, 35],
            //             "FixedCardsLen": 1,
            //             "stFixedCards": [{"CardData": 22, "state": 8, "chairID": 2, "LaiziNum": null}]
            //         }, {
            //             "ChangeableCardsLen": 7,
            //             "ChangeableCards": [1, 2, 3, 5, 6, 7, 18],
            //             "FixedCardsLen": 2,
            //             "stFixedCards": [{"CardData": 38, "state": 1, "chairID": 0, "LaiziNum": null}, {
            //                 "CardData": 24,
            //                 "state": 1,
            //                 "chairID": 0,
            //                 "LaiziNum": null
            //             }]
            //         }],
            //         "Score": [4, -4, 4, -4],
            //         "EndState": 0,
            //         "EndGangInfo": [{"Gang": [], "TotalGangScore": 0}, {
            //             "Gang": [],
            //             "TotalGangScore": 0
            //         }, {"Gang": [{"GangType": 8, "GangCard": 22}], "TotalGangScore": 0}, {
            //             "Gang": [],
            //             "TotalGangScore": 0
            //         }],
            //         "faninfo": [{
            //             "chairid": 0,
            //             "SpecialType": 1,
            //             "FanNum": 1,
            //             "addfan": [{"AddType": 17, "AddNum": 1, "AddType2": null}],
            //             "hucard": 19,
            //             "DianPao": []
            //         }, {
            //             "chairid": 1,
            //             "SpecialType": 4,
            //             "FanNum": 0,
            //             "addfan": [],
            //             "hucard": 0,
            //             "DianPao": []
            //         }, {
            //             "chairid": 2,
            //             "SpecialType": 4,
            //             "FanNum": 0,
            //             "addfan": [],
            //             "hucard": 0,
            //             "DianPao": []
            //         }, {"chairid": 3, "SpecialType": 4, "FanNum": 0, "addfan": [], "hucard": 0, "DianPao": []}],
            //         "money": [100004, 99996, 100004, 99996]
            //     },
            //     "zhongma_score": [],
            //     "zhongma_num": [],
            //     "UserHorseInfo": {"chair_id": [0], "card": [40, 49, 39, 23, 3, 66, 67, 19], "zhongmacard": [49]},
            //     "total_score": [4, -4, 4, -4],
            //     "hongzhong_num": [0, 1, 1, 0],
            //     "gang_score": [0, 1, 1, 0],
            // }
            // this.handler_server_game_end_bc(packet, true);
        }
    },

    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.lianhuagm.tagCurGameScence", jpacket);
            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.lianhuagm.AckCurGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
            return;
        }

        if (cmd == selfCMD.SERVER_BUHUA) {
            this.handler_server_buhua_bc(jpacket, canDelay);
            return;
        }
        this._super(cmd, jpacket, canDelay, svrid);
    },

    handler_server_buhua_bc: function (data, canDelay) {
        var userOutCard = parsePacket("proto.game.lianhuagm.buhua", data);
        var seatId = userOutCard.chairid;
        var outcard = userOutCard.outcard;
        var incard = userOutCard.incard;
        var pos = MJModel.getPosBySeatid(seatId);
        this.room_Card.removePublicCardByNums(userOutCard.outcard.length, false);
        if (canDelay == false) {
            for (var i = 0; i < outcard.length; i++) {
                this.room_Card.addOutCard(pos, outcard[i]);
                this.room_Card.removeHandCard(pos, outcard[i]);
            }
            for (var i = 0; i < incard.length; i++) {
                this.room_Card.addHandCard(pos, incard[i]);
            }
            this.room_Card.reflashHandCard(pos, true, false, true);
            return;
        }
        cc.log("handler_server_buhua_bc:" + pos);
        for (var i = 0; i < outcard.length; i++) {
            this.room_Card.addOutCard(pos, outcard[i]);
            if (MJModel.isMyPlayer(seatId) || MJModel.isOnVideo)this.room_Card.removeHandCard(pos, outcard[i]);
        }

        if (MJModel.isMyPlayer(seatId) || MJModel.isOnVideo) {
            for (var i = 0; i < incard.length; i++) {
                this.room_Card.initMoCard(pos, incard[i]);
            }
            var mo_card = null;
            if (this.room_Card.isDuoPai(0)) {
                mo_card = this.room_Card.hand_card[0][this.room_Card.hand_card[0].length - 1];
                this.room_Card.hand_card[0].splice(this.room_Card.hand_card[0].length - 1, 1);
            }
            this.room_Card.reflashHandCard(pos, true, false, true);
            if (mo_card) {
                mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                this.room_Card.hand_card[0].push(mo_card);
                MJModel.mj_mo_cards[pos] = mo_card.getValue();
            }
        }
        this._ShowEffect("buhua", pos);
        var player = MJModel.players[seatId];
        Sound.getInstance().playEffect(__String.createWithFormat(getResPath("lianhuagm/sound/buhua/%1_buhua.mp3"), player.sex == SEX_ID.SEX_FEMALE ? "w" : "m"));
        MJModel.isEnterWait = true;
        var self = this;
        var callback = cc.callFunc(function () {
            MJModel.isEnterWait = false;
        });
        this.runAction(cc.sequence(cc.delayTime(1), callback));
    },

    _ShowEffect: function (name, pos) {
        try {
            var begin = MJConfig.getOperatorTipPos(pos);
            var armature = null;
            var effect_name = "";
            if (name == "buhua") {
                effect_name = "effects_mjxxbuhuax";
                ccs.armatureDataManager.addArmatureFileInfo(getResPath("lianhuagm/effect/buhua/effects_mjxxbuhuax.ExportJson"));
            }
            armature = new ccs.Armature(effect_name);
            if (armature != null) {
                var animation = armature.getAnimation();
                if (animation) {
                    if (typeof animation.playWithIndex === "function") {
                        animation.playWithIndex(0);

                        armature.setPosition(begin);
                        this.room_Tip.addChild(armature, 10000);
                    }
                }
                armature.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
            }
            // Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
        } catch (e) {
            Log(this, e);
        }
    },
    _handler_game_record: function (data, canDelay) {
        //-----新总结算界面
        cc.log("------big End");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var pkgId = this._pkg_id;
        var gameType = "莲花广麻";

        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];
        gameType += " · " + MJModel.base_money + "分底";

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        //var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;

        var max_score = 0;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            if (recoreInfo.totalscore > max_score) {
                max_score = recoreInfo.totalscore;
            }
        }

        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            //var playerRecord = totalRecord.player_records[i];
            var player = MJModel.players[i];
            var arrStr = [];
            //次数
            var arrcount = [];

            arrStr = ["坐庄次数", "胡牌次数", "点炮次数", "杠牌次数"];
            arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.Ex1, recoreInfo.GangTimes];

            if (player && player.uid != -1 && player.uid != 0) {
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var isWin = false;
                if (max_score > 0 && recoreInfo.totalscore == max_score) {
                    isWin = true;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, isWin, _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner, recoreInfo.dissState);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }
        }
        bigResult.refresh(PlayerNumber);
        this.release();
    },

    _showNiaoEffect: function (cardList, zhongList, seatids, canDelay) {
        // if (canDelay == false) {
        //     for (var i = 0; i < seatids.length; i++) {
        //         var pos = MJModel.getPosBySeatid(seatids[i]);
        //         if (cardList.length > 0)this._initZhongNiaoCard(pos, cardList, zhongList);
        //     }
        //     return;
        // }
        this.room_Tip.reset();
        var self = this;
        //结束亮马牌动画
        var size = cc.director.getWinSize();
        var dx = 100;
        var bg = new cc.Sprite(getResPath("lianhuagm/flag/niao_bg2.png"));
        bg.setPosition(size.width / 2, size.height / 2);
        bg.setScaleY(0.7);
        this.room_Card.addChild(bg, 10000);
        bg.runAction(cc.sequence(cc.delayTime(2), cc.removeSelf()));

        var bg = new cc.Sprite(getResPath("lianhuagm/flag/niao_effect.png"));
        bg.setPosition(size.width / 2, size.height / 2 + 100);
        this.room_Card.addChild(bg, 10000);
        bg.runAction(cc.sequence(cc.delayTime(2), cc.removeSelf()));

        var pos = MJModel.getPosBySeatid(seatids[0]);
        var bx = size.width / 2 - dx * (cardList.length - 1) / 2;
        for (var j = 0; j < cardList.length; j++) {
            var card = new MJCard();
            card.setValue(cardList[j], 0, CardType.Card_Hand, 0);
            card.setPosition(bx + dx * j, size.height / 2);
            self.room_Card.addChild(card, 10000 + cardList.length);
            // card.runAction(cc.sequence(cc.delayTime(1 + 0), cc.spawn(cc.moveTo(0.17, p), cc.scaleTo(0.17, s)), cc.removeSelf()));
            card.runAction(cc.sequence(cc.delayTime(2), cc.removeSelf()));
            if (zhongList.indexOf(cardList[j]) != -1) {
                card.setStoreColor(cc.color(240, 182, 147));
            }
        }


        var callBack2 = cc.callFunc(function () {
            // for (var i = 0; i < seatids.length; i++) {
            //     var pos = MJModel.getPosBySeatid(seatids[i]);
            //     if (cardList.length > 0)self._initZhongNiaoCard(pos, cardList, zhongList);
            // }
        });
        this.runAction(cc.sequence(cc.delayTime(1.17), callBack2));
    },

    _initZhongNiaoCard: function (pos, cardList, zhongList) {
        for (var i = 0; i < cardList.length; i++) {
            var card = this.room_Card.addHuCard(pos, cardList[i]);
            if (zhongList.indexOf(cardList[i]) != -1) {
                card.setStoreColor(cc.color(240, 182, 147));
            }
        }
    },

    handler_server_game_end_bc: function (hubeiGameend, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            var ackGameEnd = hubeiGameend.gameend;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);
            this.room_Info.stopTime();
            this.room_Tip.hideOutCardTip();

            var show_all_handcard = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var show_liuju = cc.callFunc(function () {
                if (ackGameEnd.EndState == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
            });

            var has_niao = false;
            var UserHorseInfo = hubeiGameend.UserHorseInfo;

            var liangniaocard = [];
            var zhongniaocard = [];
            var liangchairid = [];
            if (UserHorseInfo) {
                liangniaocard = UserHorseInfo.card;
                zhongniaocard = UserHorseInfo.zhongmacard;
                liangchairid = UserHorseInfo.chair_id;
            }
            if (liangniaocard && liangniaocard.length != 0) {
                has_niao = true;
            }

            if (state == 1)has_niao = false;

            //亮鸟牌
            var showniaocard = cc.callFunc(function () {
                if (has_niao == false)return;
                self._showNiaoEffect(liangniaocard, zhongniaocard, liangchairid, canDelay);
            });

            var show_end_score = cc.callFunc(function () {
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var update_all_money = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var game_end_reset = cc.callFunc(function () {
                self.room_Action.setReady2Visible(false);
                var result = new JieSuan();
                result.setName("reset_remove");
                result.init(hubeiGameend);
                self.addChild(result, 100000);
                // try {
                //     var result = new JieSuan();
                //     result.setName("reset_remove");
                //     result.init(hubeiGameend);
                //     self.addChild(result, 100000);
                // } catch (e) {
                //     self.room_Action.setReady2Visible(true);
                // }
            });

            var show_all_public_card = cc.callFunc(function () {
                self.gameend_showAllPublicCard(ackGameEnd);
            });

            if (MJModel.isOnVideo && canDelay == false) {
                this.runAction(cc.sequence(show_all_public_card, show_all_handcard, showniaocard, cc.delayTime(2), update_all_money));
                return;
            }

            this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(1), showniaocard, cc.delayTime(has_niao ? 2 : 0), show_liuju, cc.delayTime(ackGameEnd.EndState == 1 ? 1 : 0), show_end_score, cc.delayTime(0), update_all_money, cc.delayTime(1), game_end_reset));
        } catch (e) {
            ERROR(this, "handler_server_game_end_bc" + e);
        }
    },

    timeEnd: function (dt) {

        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    },

    _setGameType: function () {
        var pkg_id = 1;
        var play_id = [];
        //甩字胡不可炮胡
        // play_id.push(MJModel.base_money + "分底");
        if (MJModel.RoomConfigID.indexOf(2000001) != -1 || MJModel.RoomConfigID.indexOf(2000003) != -1) {
            play_id.push("可少人开局");
        }

        if (MJModel.RoomConfigID.indexOf(1150001) != -1) {
            play_id.push("无字牌");
        }
        if (MJModel.RoomConfigID.indexOf(1150002) != -1) {
            play_id.push("白板癞子");
        }
        if (MJModel.RoomConfigID.indexOf(1150003) != -1) {
            play_id.push("4白板胡牌");
        }

        if (MJModel.RoomConfigID.indexOf(1151001) != -1) {
            play_id.push("一码全中");
        }
        if (MJModel.RoomConfigID.indexOf(1151002) != -1) {
            play_id.push("扎4码");
        }
        if (MJModel.RoomConfigID.indexOf(1151003) != -1) {
            play_id.push("扎6码");
        }
        if (MJModel.RoomConfigID.indexOf(1151004) != -1) {
            play_id.push("扎8码");
        }

        if (MJModel.RoomConfigID.indexOf(1152001) != -1) {
            play_id.push("没码全中");
        }

        MJModel.play_id_str = play_id;

        var gameDes = "";
        for (var i = 0; i < play_id.length; i++) {
            gameDes += play_id[i];
            if (i != play_id.length - 1) {
                gameDes += " ";
            }
        }
        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);
        // this._setFastChat();
    },
    fastChat3: [
        "各位老板老板娘好",
        "快滴啊打撒，嘛区闹",
        "让我稍微想下子",
        "小心滴啊，我听牌了，别出纵",
        "我滴个乖乖，又自摸了",
        "你这个牌打滴太夯了，直接要喊你师父",
        "别吵别吵，专心打牌",
        "啊呦歪，你们两个打联子闹",
        "打滴什么牌哎，会打牌啊",
        "对不住啊，刚才接了个电话，继续继续",
        "不好意思不好意思，一打牌事就来了，嘛就到",
        "咦，怎么又断线了，网络怎么那么差",
    ],
    _setFastChat: function () {
        var chatList = [];
        chatList = this.fastChat3;
        MJModel.mj_fastChat = this.fastChat3;
        var self = this;
        Utils.getFastChatSound = function (chat, sex) {
            for (var i = 0; i < chatList.length; i++) {
                if (chatList[i] == chat) {
                    return getResPath(__String.createWithFormat("yangzhou/sound/fastchat/%1_%2.mp3", sex == SEX_ID.SEX_MAN ? "m" : "w", i + 1));
                }
            }
            return "";
        };
    },

    _checkAddCardFlag: function (card) {
        try {
            if (card.type == CardType.Card_Outing)return;
            if (card.type == CardType.Card_Peng)return;
            if (card.getValue() == 0)return;
            if (card.type == CardType.Card_Hu && card.getValue() == 65) {
                this.addCardNum(card, card.pos, card._fengNum);
                return;
            }
            var flag_str = "";
            if (card.getValue() == this._curLaizi)flag_str = "lianhuagm/flag/lai_flag2.png";
            if (flag_str != "") {
                if (card.getValue() == this._curLaizi)card.setStoreColor(cc.color(255, 249, 137));
                var p = card.getChildByName("sprite");
                p.removeChildByName("laizi_flag");
                var flag = null;

                flag = new cc.Sprite(getResPath(flag_str));

                var m_size = p.getContentSize();
                if (flag) {
                    flag.setPosition(cc.p(0, m_size.height));
                    flag.setAnchorPoint(cc.p(0, 1));
                    flag.setName("laizi_flag");
                    p.addChild(flag);
                    this._flagDirection(card.pos, flag, m_size);
                    flag.setScale(0.5);
                    if (card.pos == 0 && card.type != CardType.Card_Out && card.type != CardType.Card_Hu)flag.setScale(1);
                }
                return;
            }
        } catch (e) {
            Log(this, e);
        }
    },
    //每个方向角标对应
    _flagDirection: function (pos, flag, m_size) {
        if (MJModel.mj_table_view == "2d") {
            if (MJModel.mj_paiban == "vertical" || pos == 2) {
                return;
            }
        }
        if (pos == 1) {
            flag.setPosition(cc.p(0, 15));
            flag.setRotation(-90);
        } else if (pos == 2) {
            flag.setPosition(cc.p(m_size.width, 5));
            flag.setRotation(180);
        } else if (pos == 3) {
            flag.setPosition(cc.p(m_size.width, m_size.height));
            flag.setRotation(90);
        }
    },

    handler_server_scene_info_uc: function (hubei_scene, canDelay) {
        this.reflashSetting(true);
        var ackGameFree = hubei_scene.GameSence;
        var sceneStatus = ackGameFree.SceneStatus;
        if (ackGameFree.RoomConfigID.indexOf(1150002) != -1) {
            this._curLaizi = 67;
        }
        if (ackGameFree.RoomConfigID.indexOf(2000001) != -1)MJModel.changMode = 1;
        if (ackGameFree.RoomConfigID.indexOf(2000003) != -1)MJModel.changMode = 3;
        this._super(ackGameFree, canDelay);

        this._setGameType();
    },
    handlerAutoUpTableReady: function (nums, selfIsReady) {
        if (MJModel.seatid == -1 && nums < 4) {
            this.actionCallBack("uptable");
        }
        else if (selfIsReady == false) {
            if (MJModel.canQuxiaoZhun()) {
                if (MJModel.roomState != 0) this.actionCallBack("ready");
            }
        }
    },
    addCardNum: function (card, pos, num) {
        card.removeChildByName("shuziFlag");
        if (MJModel.mj_table_view == "2d") {
            if (MJModel.mj_paiban == "vertical" || pos == 2) {
                pos = 0;
            }
        }
        //添加标志
        var flag_str = __String.createWithFormat(getResPath("lianhuagm/flag/num/%1_%2.png"), num, pos);
        var flag = new cc.Sprite(flag_str);
        var m_size = card.getContentSize();
        if (flag) {
            if (pos == 0) {
                flag.setPosition(cc.p(m_size.width * 0.9, m_size.height * 0.6));
                flag.setAnchorPoint(cc.p(1, 1));
            } else if ((pos == 1)) {
                flag.setPosition(cc.p(m_size.width * 0.8, m_size.height * 0.85));
                flag.setAnchorPoint(cc.p(1, 1));
            } else if ((pos == 2)) {
                flag.setPosition(cc.p(m_size.width * 0.1, m_size.height * 0.6));
                flag.setAnchorPoint(cc.p(0, 0));
            } else if ((pos == 3)) {
                flag.setPosition(cc.p(m_size.width * 0.2, m_size.height * 0.3));
                flag.setAnchorPoint(cc.p(0, 0));
            }

            flag.setName("shuziFlag");
            flag.setScale(1.1);
            card.addChild(flag, 1000);
        }
        return flag;
    },

    handler_server_out_card_bc: function (data, canDelay) {
        var userOutCard = parsePacket("proto.game.AckUserOutCard", data);
        var seatId = userOutCard.ChairID;
        this._super(data, canDelay);

        var can_show_listen_info = true;
        for (var j = 0; j < MJModel.final_listen_info.length; j++) {
            if (MJModel.final_listen_info[j].Card == 255) {
                can_show_listen_info = false;
                break;
            }
        }
        if (MJModel.isMyPlayer(seatId))MJModel.mj_table.removeChildByName("tingpai_layer");
        if (MJModel.final_listen_info.length > 0 && can_show_listen_info && MJModel.isMyPlayer(seatId)) {
            MJModel.mj_listenLayer_autoshow = true;
            var selectLayer = new TingPaiLayer();
            selectLayer.show2(MJModel.final_listen_info);
            selectLayer.setName("tingpai_layer");
            MJModel.mj_table.addChild(selectLayer, 100);//一定要在MJAction下边
        } else {
            cc.eventManager.dispatchCustomEvent("tingpai_info_notice_reflash");
        }
    },
});

var JieSuan = cc.Layer.extend({
    continueClick: function (ref) {
        if (MJModel.isOnVideo)return;
        sendReady();

        this.removeFromParent();
        MJModel.state = MJ_STATUS.MJ_GAME_FREE;
    },
    saveClick: function (ref) {
        var size = this.getContentSize();
        // this.setScale(0.5);
        var renderTexture = new cc.RenderTexture(size.width, size.height, cc.Texture2D.PIXEL_FORMAT_RGBA8888);
        renderTexture.beginWithClear(255, 255, 255, 255);
        this.visit();
        renderTexture.end();
        renderTexture.saveToFile("record.jpg", cc.IMAGE_FORMAT_JPEG, false, function (text, path) {
            // this.setScale(1);
        }.bind(this));
    },
    init: function (ackGameEnd) {
        var size = cc.director.getWinSize();

        this.ackGameEnd = ackGameEnd;
        var layout = new ccui.Layout();
        layout.setTouchEnabled(true);
        layout.setContentSize(size);
        layout.setAnchorPoint(0.0, 0.0);
        layout.setSwallowTouches(false);
        this.addChild(layout, 400);

        var uiJson = ccs.load(getResPath("lianhuagm/jiesuan/jiesuan.json"));
        var uiNode = uiJson.node;
        uiNode.setPosition(size.width / 2, size.height / 2);
        this.addChild(uiNode);
        var bg = uiNode;

        //继续游戏
        var continueBtn = bg.getChildByName("continue");
        continueBtn.addClickEventListener(this.continueClick.bind(this));

        //继续游戏
        //var saveBtn = bg.getChildByName("save");
        //saveBtn.addClickEventListener(this.saveClick.bind(this));

        var huType = [0, 0, 0, 0];
        var allzongfen = [0, 0, 0, 0];
        var huCards = [0, 0, 0, 0];
        var addFanType = [[], [], [], []];

        for (var i = 0; i < ackGameEnd.gameend.faninfo.length; i++) {
            var specialType = ackGameEnd.gameend.faninfo[i].SpecialType;
            huCards[i] = ackGameEnd.gameend.faninfo[i].hucard;
            huType[i] = specialType;

            switch (specialType) {
                case HuType.HU_ZIMO:
                case HuType.HU_PAOHU:
                case HuType.HU_QIANG_GANG:
                case HuType.HU_GANG_SHANG_HUA:
                    huType[i] = 1;
                    break;
            }

            if (specialType == HuType.HU_ZIMO) {
                addFanType[i].push("自摸");
            }

            if (specialType == HuType.HU_QIANG_GANG) {
                addFanType[i].push("抢杠胡");
            }

            // for (var j = 0; j < ackGameEnd.gameend.faninfo[i].addfan.length; j++) {
            //     var add_fan = ackGameEnd.gameend.faninfo[i].addfan[j];
            //     var add_type = add_fan.AddType;
            //     var add_value = add_fan.AddNum;
            //     if (AddFanNameArray[add_type]) {
            //         addFanType[i].push(AddFanNameArray[add_type]);
            //     }
            // }
        }

        var hongzhong_num = ackGameEnd.hongzhong_num;
        for (var i = 0; i < hongzhong_num.length; i++) {
            addFanType[i].push("红中" + hongzhong_num[i] + "个");
        }

        if (ackGameEnd.gang_score) {
            for (var i = 0; i < ackGameEnd.gang_score.length; i++) {
                if (ackGameEnd.gang_score[i]) {
                    addFanType[i].push("杠分 " + ackGameEnd.gang_score[i] + "分");
                }
            }
        }


        // var zhongma_num = ackGameEnd.zhongma_num;
        // for (var i = 0; i < zhongma_num.length; i++) {
        //     if (zhongma_num[i]) {
        //         addFanType[i].push("中马个数 x" + zhongma_num[i]);
        //     }
        // }

        // var zhongma_score = ackGameEnd.zhongma_score;
        // for (var i = 0; i < zhongma_score.length; i++) {
        //     if (zhongma_score[i]) {
        //         addFanType[i].push("中马分" + " +" + zhongma_score[i]);
        //     }
        // }

        var count = 0;
        var itemNode = bg.getChildByName("players");
        for (var i = 0; i < 4; i++) {
            var item_node = itemNode.getChildByName("item" + i);
            item_node.removeAllChildren();
        }
        for (var i = 0; i < MJModel.Play_num; i++) {
            var seatid = i;
            var player = MJModel.players[seatid];
            var item_node = itemNode.getChildByName("item" + count);
            if (MJModel.mj_roomType == 1 && i == 3)continue;
            if (MJModel.mj_roomType == 2 && (i == 2 || i == 3))continue;
            var item = this.addItem(player.name, player.avatar, player.uid, ackGameEnd.gameend.UserCard, huType, ackGameEnd.gameend.Score, seatid, huCards, addFanType, ackGameEnd.total_score);
            item_node.addChild(item, -10);
            count++;
        }

        var layout2 = new ccui.Layout();
        layout2.setTouchEnabled(true);
        layout2.setContentSize(size);
        layout2.setAnchorPoint(0.0, 0.0);
        layout2.setSwallowTouches(true);
        layout2.addClickEventListener(function (sender, evt) {
        });
        this.addChild(layout2, -400);

        var str = "";
        for (var i = 0; i < MJModel.play_id_str.length; i++) {
            str += MJModel.play_id_str[i];
            if (i != MJModel.play_id_str.length - 1) str += ",";
        }
        uiNode.getChildByName("roomInfo").getChildByName("config").ignoreContentAdaptWithSize(true);
        uiNode.getChildByName("roomInfo").getChildByName("code").ignoreContentAdaptWithSize(true);
        uiNode.getChildByName("roomInfo").getChildByName("jushu").ignoreContentAdaptWithSize(true);
        uiNode.getChildByName("roomInfo").getChildByName("config").setString(str);
        uiNode.getChildByName("roomInfo").getChildByName("code").setString(MJModel.curRoomID);
        uiNode.getChildByName("roomInfo").getChildByName("jushu").setString(MJModel.currentCount + ":" + MJModel.RoomCountSum);
    },

    addItem: function (name, avatar, playerId, handcards, huType, finalScore, seatid, huCards, addFanType, allzongfen) {
        var uiJson = ccs.load(getResPath("lianhuagm/jiesuan/jiesuanItem.json"));
        var uiNode = uiJson.node;
        uiNode.getChildByName("name").setString(Utils.parseName(7, name));
        uiNode.getChildByName("name").ignoreContentAdaptWithSize(true);

        var m_pAvatar = Utils.createCircleAvatar(avatar, "Avatars/user4_unlogin.png", getResPath("RoomMJ/head_bg.png"), cc.size(82, 82));
        uiNode.getChildByName("avatar").addChild(m_pAvatar);

        uiNode.getChildByName("banker").setVisible(MJModel.banker_seatid == seatid);
        uiNode.getChildByName("hu_flag").setVisible(huType[seatid] == 1);

        uiNode.getChildByName("zongfen_win").setVisible(allzongfen[seatid] > 0);
        uiNode.getChildByName("zongfen_win").ignoreContentAdaptWithSize(true);
        uiNode.getChildByName("zongfen_win").setString(this.getScore(allzongfen[seatid]));

        uiNode.getChildByName("zongfen_lose").setVisible(allzongfen[seatid] <= 0);
        uiNode.getChildByName("zongfen_lose").ignoreContentAdaptWithSize(true);
        uiNode.getChildByName("zongfen_lose").setString(this.getScore(allzongfen[seatid]));

        uiNode.getChildByName("defen_win").setVisible(finalScore[seatid] > 0);
        uiNode.getChildByName("defen_win").ignoreContentAdaptWithSize(true);
        uiNode.getChildByName("defen_win").setString(this.getScore(finalScore[seatid]));

        uiNode.getChildByName("defen_lose").setVisible(finalScore[seatid] <= 0);
        uiNode.getChildByName("defen_lose").ignoreContentAdaptWithSize(true);
        uiNode.getChildByName("defen_lose").setString(this.getScore(finalScore[seatid]));

        var handcard = MJModel.mj_table.room_Card.createEndHandcardLayer(handcards[seatid], huCards[seatid]);
        handcard.setScale(0.45);
        handcard.setAnchorPoint(cc.p(0, 0));
        handcard.setPosition(-30, -10);
        uiNode.getChildByName("handcard").addChild(handcard);

        var addFanLayer = uiNode.getChildByName("addFan");
        addFanLayer.ignoreContentAdaptWithSize(true);
        addFanLayer.setString("");
        if (addFanType[seatid].length != 0) {
            var str = "";
            for (var i = 0; i < addFanType[seatid].length; i++) {
                str += addFanType[seatid][i] + " ";
            }
            // addFanLayer.setString(str);
            var addfanLabel = this.createLable(str, 20);
            addfanLabel.setPosition(cc.p(-435, 80));
            uiNode.addChild(addfanLabel);


        }

        if (this.ackGameEnd.UserHorseInfo && this.ackGameEnd.UserHorseInfo.chair_id && this.ackGameEnd.UserHorseInfo.chair_id.indexOf(seatid) != -1) {
            this.createMaCard(uiNode, this.ackGameEnd.UserHorseInfo.card, this.ackGameEnd.UserHorseInfo.zhongmacard);
        }

        return uiNode;
    },
    createMaCard: function (node, cardlist, zhongcardlist) {
        var bx = 0;
        var by = 80;
        var dx = 30;
        if (cardlist && cardlist.length != 0) {
            var addfanLabel = this.createLable("马牌：", 20);
            addfanLabel.setPosition(cc.p(bx, by));
            node.addChild(addfanLabel);
            bx += addfanLabel.getContentSize().width;
            for (var i = 0; i < cardlist.length; i++) {
                var card = new MJCard();
                card.setValue(cardlist[i], 0, CardType.Card_End, 0);
                card.setMyPosition(cc.p(bx, by));
                card.setScale(0.3);
                node.addChild(card);
                if (zhongcardlist.indexOf(cardlist[i]) != -1) {
                    card.setStoreColor(cc.color(240, 182, 147));
                }
                bx += dx;
            }
        }
    },
    createLable: function (str, x) {
        var label = new cc.LabelTTF(str, "Thonburi", 24);
        label.setColor(cc.color("#A3BD4F"));
        label.setAnchorPoint(cc.p(0, 0.5));
        label.setPosition(x, 0);
        return label;
    },
    getScore: function (s) {
        if (s > 0) {
            return "." + s;
        }
        if (s < 0) {
            return "/" + Math.abs(s);
        }
        return s;
    }
});
