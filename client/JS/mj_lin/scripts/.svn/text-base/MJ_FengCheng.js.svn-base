/**
 * Created by jasenwu on 18/10/26.
 */
loadProtoFile("proto/fengchenggameproto.proto");


var HuType = {
    HU_INVALID: 0,
    HU_ZIMO: 1,
    HU_PAOHU: 2,
    HU_HeiMo: 2,
    Hu_RuanMo: 1,
    HU_DIANPAO: 3,
    HU_BEIZIMO: 4,
    HU_QIANG_GANG: 5,
    HU_BEI_QIANG_GANG: 6,
    HU_YI_PAO_DUO_XIANG: 7,
    HU_GANG_SHANG_HUA: 8,
    HU_GANG_HOU_PAO: 9,
};

var AddFanType = {
    121: "屁胡",
    16: "对对胡",
    14: "清一色",
    15: "混一色",
    122: "混对对",
    123: "清对对",
    22: "抢杠胡 X3",
    23: "海底捞月 X2",
    24: "杠上开花 X2",
    124: "大字",
    125: "大吊 X2",
};

var PZHActionType =
{
    TYPE_TAN: 0x4000,//摊
    TYPE_SHAO: 0x8000,//勺 一坎牌暗扣
};

var selfCMD = {
    SERVER_Laizi_BC: 5084,   //亮牌
    SERVER_FLOWER_HAND_CARD: 5026,  //发第一手牌后补花
    SERVER_GET_HUA_CARD: 5027,  //游戏过程中摸到花牌
};

var MJTable_FengCheng = MJTable.extend({
    tag: "MJTable_FengCheng",
    _curLaizi: -1,
    _curLaizipi: -1,
    _curLaizipi2: -1,
    _curLaizi_bg: null,
    _tanCards: [],
    isRecordShow: false,
    isTan: false,
    _pkg_id: 0,
    maxQuan: 1,
    _tuoguanBtn: null,
    _tuoguanFlag: [null, null, null, null],
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        MJModel.outCardEffect_style = 1;

        MJModel.mj_bg_use = 1;
        MJModel.mj_suport_change_bg = 1;
        MJModel.toupiaoTipsType = 1;
        MJModel.chi_layout = 3;
        MJModel.mj_touch_tip = 1;
        MJModel.isOutCard = true;
        MJModel.mj_chat_style = 5;
        MJModel.mj_public_style = 1;
        MJModel.mj_card_lib_type = 1;
        MJModel.mj_table_view = "2d";

        MJModel.mj_gps_type = 1;
        MJModel.mj_double_click_style = 1;
        MJModel.shareType = 1;

        MJModel.mj_font = "jianjie";
        MJModel.mj_fontSize = "dahao";
        MJModel.mj_style = "shishang";
        MJModel.yinyue = "jingdian";

        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];
            if (this._pkg_id == 3434 || this._pkg_id == 3289) {
                MJModel.mj_roomType = 1;
            }
            if (this._pkg_id == 3435 || this._pkg_id == 3290) {
                MJModel.mj_roomType = 2;
            }
        } catch (e) {
            Log(this, e);
        }

        try {
            var help = this.roomPublic.getChildByName("game_help");
            help.setVisible(false);
        } catch (e) {

        }

        this._init_extend();
        this._super();
        this._init_ui();
        var self = this;
        this.mTanBar = new MJTan();
        this.mTanBar.setVisible(false);
        this.mTanBar.addClickEventListener(function (node) {
            self.onTanClick(node);
        });
        this.addChild(this.mTanBar, 2);
        //this._update_action();
        //this._init_public();
        // this.schedule(this.test, 1.0);
    },
    getMjTypePath: function () {
        var pkg_id = 1;
        //if (MJModel.mj_roomType == 1) pkg_id = 3;
        if (this._pkg_id == 3434 || this._pkg_id == 3289) pkg_id = 3;
        return __String.createWithFormat(getResPath("fengcheng/flag/pkgid%1.png"), pkg_id);
    },

    updateBg: function (isInit) {
        MJModel.mj_bg_use = 1;
        MJModel.mj_table_view = "2d";
        if (isInit == undefined)isInit = false;
        var size = cc.director.getWinSize();
        if (this.bg == null) {
            this.bg = new ccui.ImageView(getResPath(this.getBgStr()));
            this.bg.setAnchorPoint(cc.p(0.5, 0.5));
            this.bg.setContentSize(size);
            this.bg.setScale9Enabled(true);
            this.bg.setPosition(size.width / 2, size.height / 2);
            this.addChild(this.bg, -100);
        } else {
            this.bg.loadTexture(getResPath(this.getBgStr()));
        }
        //简洁版本的幺鸡牌换了
        if (MJModel.mj_font == "jianjie") {
            Utils.addCardSprites(__String.createWithFormat("fengcheng/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));
        } else {
            Utils.addCardSprites(__String.createWithFormat("RoomMJ/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));
        }

        if (MJModel.mj_roomType == 2) {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config_2ren.json" : "fengcheng/config/card_config2d_2ren.json");
        } else {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config.json" : "fengcheng/config/card_config2d.json");
        }

        if (isInit)return;

        this.room_Card.reflashAllCardUI();
        for (var i = 0; i < 4; i++) {
            this.players[i].setPosition(MJConfig.getPlayerPos(i));
            this.players[i].reflashNameMoneyPosition();
        }
        if (this.room_Info)this.room_Info.reflash();
    },

    isSupportPublicCard: function () {
        return false;
    },

    _init_extend: function () {
        this.initMJActionVideo();
        var self_table = this;

        MJCards.prototype.sortCard = function (a, b) {
            return self_table._sortCard(a, b);
        };

        //湖北麻将不要自动胡牌功能
        MJAction.prototype.setAutoOutCardVis = function (value) {
        };

        Setting.prototype.showPaiBanView = function () {
            this._gameSettingLayer.getChildByName("light_title").setVisible(false);
            this.checkboxs_gamesetting["paiban_horizontal"].setVisible(false);
            this.checkboxs_gamesetting["paiban_vertical"].setVisible(false);
            this.checkboxs_gamesetting["table_25d"].setVisible(false);
            var size = cc.director.getWinSize();
            this.checkboxs_gamesetting["table_2d"].setPosition(cc.p(size.width / 2 - 150, size.height - 500));
        };

        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(false);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };

        MJConfig.getHandCardOrder = function (pos, index) {
            var order = [
                [
                    400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400,
                ],
                [
                    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
                ],
                [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ],
                [
                    16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                ],
            ];
            return order[pos][index];
        };

        var super_setOperator = MJAction.prototype.setOperator;
        MJAction.prototype.setOperator = function (operat) {
            this.removeChildByName("ChooseGang_selectLayer");
            if (operat != -1 && (operat & PZHActionType.TYPE_TAN) == PZHActionType.TYPE_TAN) {
                if (this.actions["tan"]) {
                    this.actions["tan"].setVisible(true);
                }
            }
            if (operat != -1 && (operat & PZHActionType.TYPE_SHAO) == PZHActionType.TYPE_SHAO) {
                if (this.actions["shao"]) {
                    this.actions["shao"].setVisible(true);
                }
            }
            super_setOperator.call(this, operat);
        };

        MJTips.prototype.showEffect = function (pos, type, zimo) {
            try {
                if (zimo == undefined) zimo = false;
                var sp = null;
                var effect = null;
                var begin;
                var end;
                var size = cc.director.getWinSize();

                {
                    begin = MJConfig.getOperatorTipPos(pos);

                    var armature = null;
                    var name = "";

                    if (type == PZHActionType.TYPE_TAN) {
                        ccs.armatureDataManager.addArmatureFileInfo(getResPath("fengcheng/effect/tan/effects_yldgz_tan.ExportJson"));
                        armature = new ccs.Armature("effects_yldgz_tan");
                        name = "tan";
                    }
                    else if (type == PZHActionType.TYPE_SHAO) {
                        name = "shao";
                        ccs.armatureDataManager.addArmatureFileInfo(getResPath("fengcheng/effect/shao/effects_yldgz_shao.ExportJson"));
                        armature = new ccs.Armature("effects_yldgz_shao");
                    }

                    if (armature != null && name != "") {
                        animation = armature.getAnimation();
                        if (animation) {
                            if (typeof animation.playWithIndex === "function") {
                                //animation.play(name);
                                animation.playWithIndex(0);
                                armature.setPosition(begin);
                                this.addChild(armature, 10000);
                            }
                        }
                        armature.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
                        armature.setName("hu_effect");
                        return armature;
                    }
                }
            } catch (e) {
                Log(this, e);
            }
            return null;
        };

        MJTips.prototype.showSimpleEffect = function (pos, out_pos , type , effect , hold) {
            try{
                if (hold == undefined)hold = false;
                var begin = MJConfig.getOperatorTipPos(pos);

                var armature = null;
                var name = "";

                var path = null;
                var parentPath = "fengcheng/simple/";
                if(effect == "qiangganghu"){
                    hold = true;
                    path = getResPath(parentPath + "qiangganghu.png");
                }else if(effect == "dianpao"){
                    hold = true;
                    path = getResPath(parentPath + "dianpao.png");
                }else if(effect == "haidi"){
                    path = getResPath(parentPath + "haidi.png");
                }else if(effect == "baoting"){
                    path = getResPath(parentPath + "baoting.png");
                }else if(effect == "buzhang"){
                    path = getResPath(parentPath + "buzhang.png");
                }else if(effect == "genzhuang"){
                    var size = cc.director.getWinSize();
                    begin = cc.p(size.width / 2, size.height / 2);
                    path = getResPath(parentPath + "genzhuang.png");
                }else if(type == ActionType.TYPE_PENG){
                    path = getResPath(parentPath + "peng.png");
                }else if(type == ActionType.TYPE_HU){
                    hold = true;
                    if(effect == "zimo"){
                        path = getResPath(parentPath + "zimo.png");
                    }else {
                        if(pos != out_pos){
                            this.showSimpleEffect(out_pos , null , null , "dianpao");
                        }
                        path = getResPath(parentPath + "hu.png");
                    }
                }else if(type == ActionType.TYPE_LEFT_CHI || type == ActionType.TYPE_CENTER_CHI || type == ActionType.TYPE_RIGHT_CHI){
                    path = getResPath(parentPath + "chi.png");
                }
                else{
                    path = getResPath(parentPath + "gang.png");
                }
                var bg = new cc.Sprite(getResPath(parentPath + "bg.png"));
                bg.setPosition(begin);
                bg.setName("hu_effect");
                // this.addChild(bg, 10000);

                var sp = new cc.Sprite(path);
                sp.setPosition(begin);
                sp.setName("hu_effect");
                this.addChild(sp, 10000);

                if(hold){
                    // bg.runAction(cc.sequence(cc.delayTime(this.getHuEffectTime()), cc.removeSelf()));
                    sp.runAction(cc.sequence(cc.delayTime(this.getHuEffectTime()), cc.removeSelf()));
                }else {
                    // bg.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
                    sp.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
                }
            }catch (e){
                Log(this, e);
            }
        };

        MJCards.prototype.clickHandCardCallback = function (n) {
            if (MJModel.canTouchCard == false) {
                return;
            }
            var card = n;
            if (MJModel.canChoiceMore && MJModel.canChoiceMoreType == 0) {
                if (card)card.setUp(!card.isUp);
                var upCards = this.getChoiceCards();
                if (upCards.length == 0) {
                    self_table.mTanBar.sureChoiceBtn.setEnabled(false);
                    return;
                }
                if(MJModel.curOperate2 == 10) {
                    var temp = [];
                    var aaa = [0x41,0x42,0x43,0x31,0x32,0x33,0x34];
                    for (var i = 0; i < aaa.length; i++) {
                        if(temp[aaa[i]] == undefined){
                            temp[aaa[i]] = 0;
                        }
                    }
                    var iszhongfabai = true;
                    var isquanfeng = true;
                    for (var i = 0; i < upCards.length; i++) {
                        if(temp[upCards[i]] == undefined){
                            temp[upCards[i]] = 1;
                        }else{
                            temp[upCards[i]]++;
                        }
                    }
                    var ddd  = [0x41,0x42,0x43];
                    var eee = [0x31,0x32,0x33,0x34];
                    for(var i = 1; i < ddd.length;i++){
                        if(temp[ddd[0]] != temp[ddd[i]]){
                            iszhongfabai = false;
                            break;
                        }
                    }
                    for(var i = 1; i < eee.length;i++){
                        if(temp[eee[0]] != temp[eee[i]]){
                            isquanfeng = false;
                            break;
                        }
                    }
                    if (self_table.mTanBar.sureChoiceBtn != undefined) {
                        if (upCards.length != 0 && iszhongfabai && isquanfeng) {
                            self_table.mTanBar.sureChoiceBtn.setEnabled(true);
                        } else {
                            self_table.mTanBar.sureChoiceBtn.setEnabled(false);
                        }
                    }
                } else {
                    self_table.mTanBar.sureChoiceBtn.setEnabled(upCards.length == 1);
                }
                return;
            }

            var preCard = null;

            for (var i = 0; i < this.hand_card[0].length; i++) {
                var fcard = this.hand_card[0][i];
                if (fcard) {
                    if (fcard.isUp) preCard = fcard;
                    fcard.setUp(false);
                }
            }

            if (this.outCardBtn) this.outCardBtn.setVisible(false);

            if (preCard && preCard == card) {
                if (MJModel.mj_double_click_style == 1) this.outHandCardCallback(n);
                return;
            }

            card.setUp(true);

            var hasTingPaiInfo = false;

            try {
                MJModel.mj_table.removeChildByName("tingpai_layer");
                for (var i = 0; i < MJModel.listen_info.length; i++) {
                    var tli = MJModel.listen_info[i];
                    if (card.value == tli.OutCard) {
                        if (tli.HuInfo.length >= 10) {
                            break;
                        }
                        var curTingPaiLayer = new TingPaiLayer();
                        curTingPaiLayer.show2(tli.HuInfo);

                        curTingPaiLayer.setName("tingpai_layer");
                        MJModel.mj_table.addChild(curTingPaiLayer, 100);
                        hasTingPaiInfo = true;
                        break;
                    }
                }
            } catch (e) {
                Log(this, e);
            }


            if (this.outCardBtn == null) {
                this.createOutCardBtn();
            }
            else {
                this.outCardBtn.setVisible(true);
            }

            if (this.outCardBtn) {
                var size = cc.director.getWinSize();
                this.outCardBtn.setPosition(cc.p(size.width - 120, 189));
            }
        }

        var super_btnCallback = MJAction.prototype.btnCallback;
        MJAction.prototype.btnCallback = function (ref) {
            var n = ref;
            var name = n.getName();
            Log(this, "btnCallback:" + name);
            if (name == "tan") {
                //var type = PZHActionType.TYPE_TAN;
                //var size = cc.director.getWinSize();
                //this.tan_handtip = new cc.Sprite(getResPath("fengcheng/flag/tan_handtip.png"));
                //this.tan_handtip.setVisible(false);
                //this.tan_handtip.setPosition(cc.p(size.width - 181, 132));
                //this.tan_handtip.setAnchorPoint(cc.p(0.8, 0));
                //this.addChild(this.tan_handtip, 100000);
                //
                //if (!this.tan_handtip.isVisible()) {
                //    this.tan_handtip.setVisible(true);
                //    this.tan_handtip.setScale(0);
                //    this.tan_handtip.runAction(cc.sequence(cc.scaleTo(0.1, 1), cc.delayTime(0.5), cc.scaleTo(0.17, 0), cc.hide()));
                //}
                this.setOperator(-1);
                if (self_table._tanCards.length == 1){
                    sendOperateCard(PZHActionType.TYPE_TAN, MJModel.curOperateCard,self_table._tanCards);
                    return;
                }
                self_table.mTanBar.setVisible(true);
                MJModel.canTouchCard = true;
                MJModel.canChoiceMore = true;
                MJModel.canChoiceMoreType = 0;
                self_table.room_Card.reflashHandCard(0,true,false,true);
                var tip = false;
                for (var i = 0; i < self_table.room_Card.hand_card[0].length; i++){
                    var card = self_table.room_Card.hand_card[0][i];
                    if (self_table._tanCards.indexOf(card.getValue()) != -1){
                        if (MJModel.curOperate2 == 10){
                            card.setUp(true);
                        } else {
                            if (!tip)card.setUp(true);
                            tip = true;
                        }
                    } else {
                        card.setBlackVis(true);
                        card.setCardTouchEnable(false);
                    }
                }
                self_table.room_Card.clickHandCardCallback(null);
                return;
            }
            if (name == "shao") {
                var type = PZHActionType.TYPE_SHAO;
                var op = MJModel.curOperate;
                if ((op & PZHActionType.TYPE_SHAO) == PZHActionType.TYPE_SHAO) {
                    if (MJModel.operator_info.length > 1) {
                        var self = this;
                        var selectLayer = new ChooseGang();
                        selectLayer.setShaoInfos(MJModel.operator_info);
                        selectLayer.setName("ChooseGang_selectLayer");
                        //selectLayer.setTitle("请点击选择要杠的牌");
                        selectLayer.setPosition(cc.p(n.getPosition().x + 0, n.getPosition().y + 50));
                        selectLayer.setCallback(function (index) {
                            self.removeChildByName("ChooseGang_selectLayer");
                            var card = MJModel.operator_info[index].Cards[0];
                            sendOperateCard(type, card);
                            self.setOperator(-1);
                        });
                        this.addChild(selectLayer, 10000);
                        return;
                    }
                    else if (MJModel.operator_info.length > 0) {
                        var card = MJModel.operator_info[0].Cards[0];
                        sendOperateCard(type, card);
                        this.setOperator(-1);
                        return;
                    }
                    else {
                        return;
                    }
                }
                return;
            }
            super_btnCallback.call(this, ref);
        };

        ChooseGang.prototype.setShaoInfos = function (choiceInfos) {
            var self = this;
            var size = choiceInfos.length;
            var ddx = 40;
            var card_size = cc.size(83, 125);
            var allW = size * card_size.width + ddx * (size + 1);
            var sp = new ccui.ImageView(getResPath("RoomMJ/bg.9.2.png"));
            sp.setScale9Enabled(true);
            sp.setAnchorPoint(cc.p(0.5, 0.0));
            sp.setContentSize(cc.size(allW, 190));
            sp.setPosition(cc.p(sp.getContentSize().width / 2, sp.getContentSize().height / 2));
            this.addChild(sp);

            var bg_size = sp.getContentSize();
            this.setContentSize(bg_size);

            this.title_label = new cc.LabelTTF("请点击选择要操作的牌", "Thonburi", 28);
            this.title_label.setAnchorPoint(cc.p(0.5, 0.5));
            this.title_label.setPosition(cc.p(bg_size.width / 2, bg_size.height - 28));
            this.title_label.setColor(cc.color(255, 255, 255));
            //this.title_label.runAction(cc.sequence(cc.delayTime(1),cc.hide(),cc.delayTime(0.5),cc.show()).repeatForever());
            sp.addChild(this.title_label);

            var bx = ddx;
            for (var j = 0; j < size; j++) {
                var gif = choiceInfos[j];
                var layout = new ccui.Layout();
                layout.setTag(j);
                layout.setAnchorPoint(cc.p(0.5, 0.5));
                layout.setContentSize(card_size);
                sp.addChild(layout);

                var tingCard = new MJCard();
                tingCard.setValue(gif.Cards[0], 0, CardType.Card_Hand, 0);
                tingCard.setPosition(cc.p(bx + card_size.width / 2, 73));
                tingCard.setAnchorPoint(cc.p(0.5, 0.5));
                tingCard.setScale(card_size.width / tingCard.getContentSize().width * MJConfig.getTipCardScale());
                sp.addChild(tingCard);

                layout.setPosition(tingCard.getPosition());
                layout.setTouchEnabled(true);
                layout.addClickEventListener(function (sender, eve) {
                    if (self._callback) self._callback(sender.getTag());
                });

                bx += card_size.width + ddx;
            }
        };

        MJConfig.getHuCardPos = function (pos, index) {
            index = index%12;
            if((pos == 1 || pos == 3) && MJModel.mj_bg_use == 1 && MJModel.mj_paiban == "vertical"){
                var p = this.getWorldPosition("hu_" + pos , "h_" + index);
                if(pos == 3) {
                    p.y = p.y - 10 * index;
                    p.x = p.x;
                }
                if(pos == 1){
                    p.y = p.y + 10 * index;
                    p.x = p.x;
                }
                return p;
            }else {
                var p = this.getWorldPosition("hu_" + pos , "h_" + index);
                if(pos == 2 && MJModel.mj_bg_use == 1){
                    p.y = p.y - 5;
                    p.x = p.x + index*4;
                }else{
                    if (MJModel.mj_bg_use == 0) {
                        var startIdex = 4;
                        if (pos == 0) {
                            startIdex = 5;
                        }
                        if (pos == 3) {
                            startIdex = 10;
                        }
                        var index_new = startIdex + index * 2;
                        var p = MJConfig.getPublicCardPos(pos, index_new);
                        if (MJModel.mj_roomType == 0) {
                            if (pos == 0) {
                                p.y = p.y - 5;
                                p.x = p.x - 2 * index
                            }else if(pos == 3){
                                p.y = p.y + 2.5 * index;
                                p.x = p.x + 2 * index
                            }else if(pos == 2){
                                p.y = p.y - 5;
                                p.x = p.x
                            }else {
                                p.y = p.y - 10;
                                p.x = p.x - 0.1 * index
                            }
                        }
                        return p;
                    }
                }
                return p;
            }
        };

        var super_getscale_new = MJConfig.getScale_new;
        MJConfig.getScale_new = function (pos, type, index, isCard) {
            try {
                var ss = 1;
                if (type == CardType.Card_Peng && MJModel.mj_bg_use == 1) {
                    if (type == CardType.Card_Peng && isCard == false) {
                        if((pos == 1 || pos == 3) && MJModel.mj_bg_use == 1 && MJModel.mj_paiban == "vertical"){
                            ss = MJModel.cardConfig.getChildByName("peng_v_" + pos).getChildByName("p_" + index).getScale();
                        }else {
                            ss = MJModel.cardConfig.getChildByName("peng_" + pos).getChildByName("p_" + index).getScale();
                        }
                    }
                    if (type == CardType.Card_Peng && isCard == true) {
                        if((pos == 1 || pos == 3) && MJModel.mj_bg_use == 1 && MJModel.mj_paiban == "vertical"){
                            ss = MJModel.cardConfig.getChildByName("peng_v_" + pos).getChildByName("p_0").getChildByName("p_" + index).getScale();
                        }else {
                            ss = MJModel.cardConfig.getChildByName("peng_" + pos).getChildByName("p_0").getChildByName("p_" + index).getScale();
                        }
                    }
                    //if (MJModel.mj_bg_use == 1 && pos == 2) {
                    //    ss = ss * 0.95;
                    //}
                } else {
                    ss = super_getscale_new.call(this, pos, type, index, isCard);
                }
            } catch (e) {
                cc.log("ningjiebiaoaaaaaa" + e);
                ss = 1;
            }

            return ss;
        };

        //MJConfig.getHandCardPos = function (pos, index, all, needRestri) {
        //    if (needRestri == undefined)needRestri = false;
        //    if (MJModel.isOnVideo) {
        //        return this.getEndCardPos(pos, index, all, needRestri);
        //    }
        //    var findex = index;
        //    if (needRestri) {
        //        findex = index - 1;
        //    }
        //    var p = this.getWorldPosition("hu_" + pos , "h_" + findex);
        //    if(pos == 2 && MJModel.mj_bg_use == 1){
        //        p.y = p.y + 5;
        //        p.x = p.x + findex;
        //    }
        //    return p;
        //};

        MJConfig.getHuCardOrder = function (pos, index) {
            index = index % 12;
            if (MJModel.mj_bg_use == 0) {
                index = index * 2;
                return MJConfig.getPublicCardOrder(pos, index);
            } else {
                var order = [
                    [
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ],
                    [
                        11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                    ],
                    [
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ],
                    [
                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                    ],
                ];
                return order[pos][index];
            }
        };

        var super_mjcards_reflashAllCardUI = MJCards.prototype.reflashAllCardUI;
        MJCards.prototype.reflashAllCardUI = function () {
            super_mjcards_reflashAllCardUI.call(this);
            for (var i = 0; i < this.hu_card.length; i++) {
                for (var j = 0; j < this.hu_card[i].length; j++) {
                    try {
                        var card = this.hu_card[i][j];
                        var value = card.getValue();
                        if (value == 0x11 || (value >= 0x31 && value <= 0x43)) {
                            if (MJModel.mj_bg_use == 0) {
                                card.setScale(0.7);
                                if(i == 0){
                                    card.setScale(1);
                                }
                                if(i == 1){
                                    card.setScale(1);
                                }
                                if(i == 2){
                                    card.setScale(0.9);
                                }
                            }else{
                                card.setScale(1);
                                if(i == 2){
                                    card.setScale(0.8);
                                }
                            }

                        }
                    } catch (e) {

                    }
                }
            }
        };

        //去掉出牌按钮
        MJCards.prototype.createOutCardBtn = function () {

        };

        MJPeng.prototype.getPointPos = function (pos) {
            var x = 0;
            var y = 0;
            cc.log("");
            if (MJModel.mj_bg_use == 1) {
                if(MJModel.mj_paiban == "vertical"){
                    if (pos == 0) {
                        y = -50;
                    } else if(pos == 1){
                        x = -70;
                        y = 5;

                    } else if(pos == 2){
                        y = -25;
                    }else if(pos == 3){
                        x = 70;
                        y = 5;
                    }
                }else {
                    if (pos == 0) {
                        y = -50;
                    } else if(pos == 1){
                        x = -30;
                        if(this.pengType == PengType.Peng_Peng){
                            y = 5;
                        }else {
                            y = 15;
                        }

                    } else if(pos == 2){
                        y = -25;
                    }else if(pos == 3){
                        x = 30;
                        if(this.pengType == PengType.Peng_Peng){
                            y = 5;
                        }else {
                            y = 15;
                        }
                    }
                }

            } else {
                if (pos == 0) {
                    y = -35;
                } else if(pos == 1){
                    x = -30;
                    if(this.pengType == PengType.Peng_Peng){
                        y = 5;
                    }else {
                        y = 15;
                    }

                } else if(pos == 3){
                    x = 30;
                    if(this.pengType == PengType.Peng_Peng){
                        y = 5;
                    }else {
                        y = 15;
                    }
                }else if(pos == 2){
                    y = - 15;
                }
            }

            return cc.p(x, y);
        };

        MJCard.prototype.createTingFlag = function () {
            if (this.tingpai_flag) {
                try {
                    this.tingpai_flag.removeFromParent(true);
                } catch (e) {

                }

                this.tingpai_flag = null;
            }

            var m_size = this.getContentSize();
            this.tingpai_flag = new cc.Sprite(getResPath("fengcheng/flag/ting.png"));
            this.tingpai_flag.setAnchorPoint(cc.p(0.5, 0));
            this.tingpai_flag.setPosition(cc.p(m_size.width / 2, m_size.height - 23));
            this.tingpai_flag.setVisible(false);
            this.addChild(this.tingpai_flag);
        };

        BigFaceMenu.prototype.getIconsIndexArray = function (seatid) {
            var icons = [1, 3, 7, 8, 18, 19];//需要显示的动画表情
            return icons;
        };

        //不同城市也要显示距离
        PlayerInfo.prototype.updateInfo = function () {
            var hasnocity = false;
            var hastoonear = false;
            var playerNums = 4;
            if (MJModel.mj_roomType == 1) {
                playerNums = 3;
            } else if (MJModel.mj_roomType == 2) {
                playerNums = 2;
            }
            for (var i = 0; i < playerNums; i++) {
                var player = MJModel.players[i];
                var playerData = this.getPlayerData(player.uid);
                var pos = MJModel.getPosBySeatid(i);
                var playerUI = this.players.getChildByName("player" + pos);
                var avatar = playerUI.getChildByName("avatar");
                var name = playerUI.getChildByName("name");
                var city = playerUI.getChildByName("city");
                city.stopAllActions();
                avatar.removeAllChildren();
                name.setString("");
                name.ignoreContentAdaptWithSize(true);

                city.setString("");
                city.ignoreContentAdaptWithSize(true);
                if (player.uid <= 0) {
                    city.setString("");
                    var m_pAvatar = new cc.Sprite("Avatars/user4_unlogin.png");
                    m_pAvatar.setScale(85 / m_pAvatar.getContentSize().width, 85 / m_pAvatar.getContentSize().height);
                    avatar.addChild(m_pAvatar);
                } else {
                    var m_pAvatar = Utils.createCircleAvatar(player.avatar, "Avatars/user4_unlogin.png", "Avatars/user4_unlogin.png", cc.size(85, 85));
                    avatar.addChild(m_pAvatar);
                    name.setString(player.name);
                    //city.setColor(cc.color(255, 255, 255));
                    if (this.isNoData(playerData)) {
                        hasnocity = true;
                        //city.setColor(cc.color(255, 0, 0));
                        city.setString("未检测到位置");
                        //city.runAction(cc.sequence(cc.moveBy(0.5, cc.p(0, 5)), cc.moveBy(0.5, cc.p(0, -5))).repeatForever());
                    } else {
                        city.setString(Utils.parseName(10, playerData.city));
                    }
                }
            }
            var cs = this.julitips.getChildren();
            for (var i in cs) {
                var tips = cs[i];
                if (!tips)continue;
                var name = tips.getName();
                var ps = name.split("_");
                var label = tips.getChildByName("num");
                var s1 = MJModel.getSeatidByPos(parseInt(ps[0]));
                var s2 = MJModel.getSeatidByPos(parseInt(ps[1]));
                var p1 = MJModel.players[s1];
                var p2 = MJModel.players[s2];

                tips.getChildByName("hong").setVisible(false);
                tips.getChildByName("lv").setVisible(false);
                tips.getChildByName("hong").setScaleX(1);
                tips.getChildByName("lv").setScaleX(1);
                tips.getChildByName("hong").stopAllActions();
                tips.getChildByName("lv").stopAllActions();
                label.setString("");
                label.ignoreContentAdaptWithSize(true);

                if (!p1 || !p2 || p1.uid <= 0 || p2.uid <= 0) {
                    continue;
                }

                var playerData1 = this.getPlayerData(p1.uid);
                var playerData2 = this.getPlayerData(p2.uid);

                if (this.isNoData(playerData1)) {
                    continue;
                }

                if (this.isNoData(playerData2)) {
                    continue;
                }

                // if (playerData1.city != playerData2.city) {
                //     continue;
                // }

                var dis = Utils.getDistance(playerData1.latitude, playerData1.longitude, playerData2.latitude, playerData2.longitude);
                tips.setVisible(true);
                if (dis >= 1000) {
                    var tip = tips.getChildByName("lv");
                    tip.setVisible(true);
                    var dis_f = parseFloat(dis / 1000);
                    label.setString(dis_f.toFixed(1) + "千米");
                    tip.setScaleX((label.getContentSize().width + 20) / tip.getContentSize().width);
                    label.setScaleX(1 / tip.getScaleX());
                } else {
                    label.setString(dis + "米");
                }

                if (dis <= 100) {
                    tips.getChildByName("hong").setVisible(true);
                    //tip.runAction(cc.sequence(cc.moveBy(0.5, cc.p(0, 5)), cc.moveBy(0.5, cc.p(0, -5))).repeatForever());
                    hastoonear = true;
                } else {
                    tips.getChildByName("lv").setVisible(true);
                }
            }

            this.warningTip.setVisible(false);
            this.btns["jieshan"].setVisible(false);
            this.btns["continue"].setVisible(false);
            this.warningTip.stopAllActions();
            if (hasnocity || hastoonear) {
                this.warningTip.setVisible(true);
                this.btns["jieshan"].setVisible(true);
                this.btns["continue"].setVisible(true);
                this.warningTip.runAction(cc.sequence(cc.delayTime(1), cc.hide(), cc.delayTime(0.1), cc.show()).repeatForever());
                this.warningTip.ignoreContentAdaptWithSize(true);
                if (hasnocity && hastoonear) {
                    this.warningTip.setString("* 发现距离过近、未检测到位置的玩家，是否解散？");
                } else if (hasnocity) {
                    this.warningTip.setString("* 发现未检测到位置的玩家，是否解散？");
                } else if (hastoonear) {
                    this.warningTip.setString("* 发现距离过近的玩家，是否解散？");
                }
            }

            MJModel.mj_table.room_Action.updateGPSTip(hasnocity, hastoonear);
            if (MJModel.mj_table.pre_scene) {
                MJModel.mj_table.pre_scene.updateGPSTip(hasnocity, hastoonear);
            }
        };

        var supersetValue = MJPeng.prototype.setValue;
        MJPeng.prototype.setValue = function (type, pos, value, index, out_pos, isEnd, OpType, cardList) {
            //类型暗杠，并且是癞晃，并且value是癞子皮
            if ((OpType & PZHActionType.TYPE_SHAO) == PZHActionType.TYPE_SHAO) {
                cardList = [0,value,0];
            }
            supersetValue.call(this, type, pos, value, index, out_pos, isEnd, OpType, cardList);
        };
    },

    _init_ui: function () {
        var self = this;
        //摊
        {
            var btn = new ccui.Button();
            btn.loadTextures(getResPath("fengcheng/action/tan1.png"), getResPath("fengcheng/action/tan1.png"), "");
            this.room_Action.actions["tan"] = btn;
            btn.setName("tan");
            btn.addClickEventListener(function (sender, evt) {
                self.room_Action.btnCallback(sender);
            });
            btn.setVisible(false);
            this.room_Action.addChild(btn);
            this.room_Action.opBtns.push(btn);
        }
        //勺
        {
            var btn = new ccui.Button();
            btn.loadTextures(getResPath("fengcheng/action/shao1.png"), getResPath("fengcheng/action/shao1.png"), "");
            this.room_Action.actions["shao"] = btn;
            btn.setName("shao");
            btn.addClickEventListener(function (sender, evt) {
                self.room_Action.btnCallback(sender);
            });
            btn.setVisible(false);
            this.room_Action.addChild(btn);
            this.room_Action.opBtns.push(btn);
        }
    },

    playBgSound: function () {
        if (MJModel.yinyue == "jingkuai") {
            Sound.getInstance().PlayBgSound(getResPath("RoomMJ/sound/csmj1.mp3"));
        } else if (MJModel.yinyue == "suhuan") {
            Sound.getInstance().PlayBgSound(getResPath("RoomMJ/sound/csmj2.mp3"));
        } else {
            Sound.getInstance().PlayBgSound(getResPath("fengcheng/sound/music_hall.mp3"));
        }
    },
    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.getValue();
            if (typeof b === "object") bv = b.getValue();
            if (MJModel.canChoiceMore){
                var i_a = this._tanCards.indexOf(av);
                var i_b = this._tanCards.indexOf(bv);
                if (i_a == -1 && i_b != -1) return 1;
                if (i_a != -1 && i_b == -1) return -1;
            }
            return bv - av;
        } catch (e) {
            return 0;
        }
    },

    onTanClick: function (ref) {
        var name = ref.getName();
        if (name == "sureChoice") {
            var upCards = this.room_Card.getChoiceCards();
            sendOperateCard(PZHActionType.TYPE_TAN, MJModel.curOperateCard,upCards);
            this.mTanBar.setVisible(false);
            MJModel.canChoiceMore = false;
            MJModel.canTouchCard = false;
        } else if (name == "cancelChoice") {
            this.room_Card.setUp(false);
            this.mTanBar.setVisible(false);
            MJModel.canChoiceMore = false;
            MJModel.canTouchCard = false;
            this.room_Card.reflashHandCard(0,true,false,true);
            this.myselfOpenOutCard();
        }
    },
    test: function (dt) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;
        if (tempCount == 5 && true) {
            var cards = [18, 18, 22, 24, 25, 33, 33, 33, 36, 37, 38, 67, 67];
            for (var i in cards) {
                this.room_Card.addOutCard(0, cards[i], false);
                this.room_Card.addOutCard(1, cards[i], false);
                this.room_Card.addOutCard(2, cards[i], false);
                this.room_Card.addOutCard(3, cards[i], false);
            }


            return;
            var packet = {
                "gameend": {
                    "UserCard": [{
                        "ChangeableCardsLen": 13,
                        "ChangeableCards": [1, 6, 7, 9, 18, 19, 21, 21, 36, 38, 38, 51, 86],
                        "FixedCardsLen": 0,
                        "stFixedCards": [],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 10,
                        "ChangeableCards": [2, 4, 17, 23, 36, 39, 39, 51, 67, 67],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{"CardData": 23, "state": 256, "chairID": 2, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 4,
                        "ChangeableCards": [17, 18, 19, 20],
                        "FixedCardsLen": 3,
                        "stFixedCards": [{
                            "CardData": 8,
                            "state": 1,
                            "chairID": 3,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 6, "state": 128, "chairID": 1, "OpCards": [], "LaiziNum": null}, {
                            "CardData": 38,
                            "state": 64,
                            "chairID": 3,
                            "OpCards": [],
                            "LaiziNum": null
                        }],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 10,
                        "ChangeableCards": [2, 9, 33, 37, 41, 50, 50, 52, 65, 67],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{"CardData": 6, "state": 128, "chairID": 2, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }],
                    "Score": [0, 0, 4, -4],
                    "EndState": 0,
                    "EndGangInfo": [{"Gang": [], "TotalGangScore": 0}, {"Gang": [], "TotalGangScore": 0}, {
                        "Gang": [],
                        "TotalGangScore": 0
                    }, {"Gang": [], "TotalGangScore": 0}],
                    "faninfo": [{
                        "chairid": 0,
                        "SpecialType": 0,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 1,
                        "SpecialType": 0,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 2,
                        "SpecialType": 2,
                        "FanNum": 4,
                        "addfan": [{"AddType": 121, "AddNum": 1, "AddType2": null}],
                        "hucard": 17,
                        "DianPao": []
                    }, {"chairid": 3, "SpecialType": 3, "FanNum": 0, "addfan": [], "hucard": 0, "DianPao": []}],
                    "money": [100000, 100000, 100022, 99978]
                }, "flowerCards": []
            };
            this.handler_server_game_end_bc(packet);
        }
    },

    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.fengchengmj.tagCurGameScence", jpacket);
            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.fengchengmj.AckCurGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
            return;
        }

        if (cmd == 5080) {
            this._handler_server_tan_end(jpacket, canDelay);
            return;
        }
        this._super(cmd, jpacket, canDelay, svrid);
    },

    //handler_server_update_info_uc: function (data, canDelay) {
    //},

    _isTanPai: function (card) {
        try {
            var alltan = [0x11,0x31, 0x32, 0x33, 0x34,0x41, 0x42, 0x43];
            if (alltan.indexOf(card) != -1) {
                return true;
            } else {
                return false;
            }
        } catch (e) {
            return false;
        }
    },

    _handler_game_record: function (data, canDelay) {
        //-----新总结算界面
        cc.log("------big End");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var pkgId = this._pkg_id;
        var gameType = "丰城麻将";

        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];
        gameType += " · " + MJModel.base_money + "分底";

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        //var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;

        var max_score = 0;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            if (recoreInfo.totalscore > max_score) {
                max_score = recoreInfo.totalscore;
            }
        }

        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            //var playerRecord = totalRecord.player_records[i];
            var player = MJModel.players[i];
            var arrStr = [];
            //次数
            var arrcount = [];

            arrStr = ["坐庄次数", "胡牌次数", "点炮次数", "超时次数"];
            arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.Ex1, recoreInfo.outtime_num];

            if (player && player.uid != -1 && player.uid != 0) {
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var isWin = false;
                if (max_score > 0 && recoreInfo.totalscore == max_score) {
                    isWin = true;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, isWin, _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner, recoreInfo.dissState);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }
        }
        bigResult.refresh(PlayerNumber);
        this.release();
    },

    _handler_server_tan_end: function (data, canDelay) {
        cc.log("_handler_server_tan_end");
        var tanCard = parsePacket("proto.game.fengchengmj.AckTanResult", data);
        var seatid = tanCard.chairid;
        var pos = MJModel.getPosBySeatid(seatid);
        var taninfos = tanCard.usertaninfo.taninfos;
        for (var i = 0; i < taninfos.length; i++) {
            for (var j = 0; j < taninfos[i].cards.length; j ++){
                this.room_Card.addHuCard(pos,taninfos[i].cards[j]);
                this.room_Card.removeHandCard(pos,(pos == 0 || MJModel.isOnVideo) ? taninfos[i].cards[j] : 0);
            }
        }
        for (var i = 0; i < tanCard.getcards.length; i++) {
            this.room_Card.addHandCard(pos, (pos == 0 || MJModel.isOnVideo) ? tanCard.getcards[i] : 0);
        }

        this.room_Card.reflashHandCard(pos, true);
        if (this.room_Action_video) this.room_Action_video.reset();
        if (MJModel.isMyPlayer(seatid)){
            this.room_Card.resetAllCardClickState();
        }
        if (canDelay)this.room_Tip.showEffect(pos,PZHActionType.TYPE_TAN);
    },
    gameend_showAllHandCard: function (ackGameEnd) {
        if (MJModel.isOnVideo) {
            return;
        }
        JsUtils.postNotifi("notify_game_check_end");//为了刷新局数 或者  开始倒计时
        if (MJModel.currentCount >= MJModel.RoomCountSum && !MJModel.isDaQuan)this.startTimeEnd();
        try {
            var usercard_size = ackGameEnd.UserCard.length;
            var IsShowHandCard = true;
            if (IsShowHandCard) {
                var cardData = [];
                for (var i = 0; i < usercard_size; i++) {
                    //结束玩家手牌数组
                    var changeable_Size = ackGameEnd.UserCard[i].ChangeableCards.length;
                    cardData = [];

                    for (var j = 0; j < changeable_Size; j++) {
                        var cardDataNum = ackGameEnd.UserCard[i].ChangeableCards[j];
                        cardData.push(cardDataNum);
                    }

                    try {
                        cardData.sort(this.room_Card.sortCard);
                    } catch (e) {
                        Log(this, e);
                    }

                    var pos = MJModel.getPosBySeatid(i);
                    if (ackGameEnd.faninfo.length > i) {
                        this.room_Card.showEndCard(pos, cardData, ackGameEnd.faninfo[i].hucard, ackGameEnd.faninfo[i].SpecialType == 1);
                    }
                    else {
                        this.room_Card.showEndCard(pos, cardData, 0, false);
                    }

                    //找到暗杠的牌 需要把暗杠显示出来
                    if (ackGameEnd.UserCard[i].stFixedCards) {
                        var groupcard_size = ackGameEnd.UserCard[i].stFixedCards.length;
                        var allpenggangcards = ackGameEnd.UserCard[i].stFixedCards;
                        for (var j = 0; j < groupcard_size; j++) {
                            var cardData = allpenggangcards[j].CardData;
                            var state = allpenggangcards[j].state;
                            var chairId = allpenggangcards[j].chairID;
                            var cardList = allpenggangcards[j].OpCards;
                            var out_pos = MJModel.getPosBySeatid(chairId);


                            if ((state & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                                this.room_Card.changeAnGang(pos, PengType.Peng_AnKang, cardData, out_pos,cardList);
                            }

                            if ((state & PZHActionType.TYPE_SHAO) == PZHActionType.TYPE_SHAO) {
                                this.room_Card.peng_card[pos][j].setValue(PengType.Peng_Peng, pos, cardData, 0, pos, false, PZHActionType.TYPE_SHAO, 0,cardList);
                            }
                        }
                    }
                    if (ackGameEnd.md5 && ackGameEnd.md5.length > 0 && ackGameEnd.md5[i])this.room_Card.checkCardSafe(ackGameEnd.md5[i], pos);
                    Sound.getInstance().playEffect(getResPath("RoomMJ/sound/order_pai2.mp3"));
                }
            }
        } catch (e) {

        }
    },
    handler_server_game_end_bc: function (hubeiGameend, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            var ackGameEnd = hubeiGameend.gameend;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);
            this.room_Info.stopTime();
            this.room_Tip.hideOutCardTip();

            var show_all_handcard = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var show_liuju = cc.callFunc(function () {
                if (ackGameEnd.EndState == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
            });

            var show_end_score = cc.callFunc(function () {
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var update_all_money = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var game_end_reset = cc.callFunc(function () {
                self.room_Action.setReady2Visible(false);
                try {
                    var result = new MJResult_XinYu();
                    result.updateContentView(hubeiGameend);
                    result.setName("reset_remove");
                    self.addChild(result, 100000);
                } catch (e) {
                    cc.log("game end:", e);
                    self.room_Action.setReady2Visible(true);
                }
            });

            var show_all_public_card = cc.callFunc(function () {
                self.gameend_showAllPublicCard(ackGameEnd);
            });

            if (MJModel.isOnVideo && canDelay == false) {
                this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(2), update_all_money));
                return;
            }

            this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(1), show_liuju, cc.delayTime(ackGameEnd.EndState == 1 ? 1 : 0), show_end_score, cc.delayTime(0), update_all_money, cc.delayTime(1), game_end_reset));
        } catch (e) {
            ERROR(this, "handler_server_game_end_bc" + e);
        }
    },

    timeEnd: function (dt) {

        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            cc.log("________________________");
            sendGameEndRecordReq();
        }
        cc.log("=======isState" + MJModel.isState(MJ_STATUS.MJ_GAME_FREE));
    },

    handler_server_peng_kang_bc: function (data, canDelay) {
        this.room_Tip.showTextTip("");
        this.check_tip_operate_card(0, 0);
        var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);
        this.unschedule(this.autoOutCardTimeOut);
        this.unschedule(this.autoHuCardTimeOut);

        var seatid = ackBcOpResult.ChairID;
        var out_seatid = ackBcOpResult.OutCardChairID;
        var OpType = ackBcOpResult.OpType;
        var OpType2 = ackBcOpResult.OpType2;
        var card = ackBcOpResult.Card;
        var cardList = ackBcOpResult.OpCards;
        var removeHandcards1 = ackBcOpResult.cardDel;
        var specialCard = ackBcOpResult.SpecialCard;
        var LaiziNum = ackBcOpResult.LaiziNum;


        var scores = ackBcOpResult.Score;
        this.handler_gang_scores(scores, OpType, OpType2, canDelay);

        if (MJModel.isMyPlayer(seatid)) {
            if (this.room_Action) this.room_Action.setOperator(-1);
        }

        if (this.room_Action_video) this.room_Action_video.reset();

        var pos = MJModel.getPosBySeatid(seatid);
        var out_pos = MJModel.getPosBySeatid(out_seatid);

        this.players[pos].setTimeOut(false);
        this.players[pos].setOffline(false);
        if (MJModel.outtimeplayers.length > 1 && MJModel.outtimeplayers.indexOf(seatid) != -1) {
            MJModel.outtimeplayers.splice(MJModel.outtimeplayers.indexOf(seatid), 1);
        }

        if ((OpType & ActionType.TYPE_PASS) == ActionType.TYPE_PASS) {
            if (MJModel.isMyPlayer(seatid) && seatid == out_seatid && this.room_Card.isDuoPai(0))//如果是我自己摸的牌  自己过 则放开选牌功能
            {
                this.room_Info.showTime(MJModel.outCardTime);
                MJModel.cur_seat = seatid;
                this.myselfOpenOutCard(true);
            }
            return;
        }

        if ((OpType & PZHActionType.TYPE_SHAO) == PZHActionType.TYPE_SHAO) {
            this.room_Card.addPengCard(pos, PengType.Peng_Peng, card, pos, OpType, specialCard,LaiziNum, cardList);
            this.room_Card.removeHandCard(pos, card, 3);
            if (canDelay)this.room_Tip.showEffect(pos,PZHActionType.TYPE_SHAO);
            return;
        }
        //勺变暗杠
        if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG && OpType2 != null) {
            this.room_Card.peng_card[pos][OpType2].setValue(PengType.Peng_AnKang, pos, card, OpType2, pos, false, OpType, specialCard,cardList);
            this.room_Card.removeHandCard(pos, card, 1);
            if (canDelay)this.room_Tip.showSimpleEffect(pos,PengType.Peng_AnKang);
            return;
        }
        //勺变普通杠
        if ((OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG && OpType2 != null) {
            this.room_Card.peng_card[pos][OpType2].setValue(PengType.Peng_Kang, pos, card, OpType2, pos, false, OpType, specialCard,cardList);
            this.room_Card.removeOutCard(out_pos, card, false);
            this.room_Card.setCurCardTip(false);
            if (canDelay)this.room_Tip.showSimpleEffect(pos,PengType.Peng_Kang);
            return;
        }
        this._super(data, canDelay);
    },
    handler_server_mo_card_bc: function (data, canDelay) {
        var userGetCard = parsePacket("proto.game.AckUserGetCard", data);
        this._tanCards = userGetCard.cards;
        var seatId = userGetCard.ChairID;
        var pos = MJModel.getPosBySeatid(seatId);
        if(MJModel.isOnVideo){
            if(MJModel.isMyPos(pos))this._tanCards = userGetCard.cards;
        }
        this._super(data, canDelay);
    },
    handler_op_effect: function (pos, out_pos, sex, OpType, OpType2, effect) {
        // this.room_Tip.showEffect1(pos, out_pos, OpType, effect);
        this.room_Tip.showEffect(pos, OpType, this.room_Card.isDuoPai(pos));
        this.room_Tip.showSimpleEffect(pos, out_pos, OpType, effect);
    },

    initMJActionVideo: function () {
        var selfTable = this;
        var super_mjactionvideo_ctor = MJActionVideo.prototype.ctor;
        MJActionVideo.prototype.ctor = function () {
            super_mjactionvideo_ctor.call(this);

            for (var i = 0; i < 4; i++) {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("fengcheng/action/tan1.png"), getResPath("fengcheng/action/tan1.png"), "");
                btn.setName("tan");
                btn.setVisible(false);
                btn.setTag(1);
                this.addChild(btn);

                this.actions[i]["tan"] = btn;
                this.opBtns[i].push(btn);
            }

            for (var i = 0; i < 4; i++) {
                var btn = new ccui.Button();
                btn.loadTextures(getResPath("fengcheng/action/shao1.png"), getResPath("fengcheng/action/shao1.png"), "");
                btn.setName("shao");
                btn.setVisible(false);
                btn.setTag(1);
                this.addChild(btn);

                this.actions[i]["shao"] = btn;
                this.opBtns[i].push(btn);
            }
        };

        MJActionVideo.prototype.setOperator = function (pos, operat) {
            for (var i = 0; i < this.opBtns[pos].length; i++) {
                this.opBtns[pos][i].setVisible(false);
            }

            if (operat == -1 || operat == 0 || operat == null || operat == undefined) {
                return false;
            }

            if (( operat & ActionType.TYPE_LISTEN) == ActionType.TYPE_LISTEN) {
                operat = operat - ActionType.TYPE_LISTEN;
            }

            if(operat <= 0){
                return false;
            }

            if (this.actions[pos]["pass"]) {
                this.actions[pos]["pass"].setVisible(true);
            }

            if ((operat & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                if (this.actions[pos]["hu"]) {
                    this.actions[pos]["hu"].setVisible(true);
                }
            }

            if ((operat & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG || (operat & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (operat & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                if (this.actions[pos]["gang"]) {
                    this.actions[pos]["gang"].setVisible(true);
                }
            }

            if ((operat & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                if (this.actions[pos]["peng"]) {
                    this.actions[pos]["peng"].setVisible(true);
                }
            }

            if ((operat & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (operat & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI || (operat & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                if (this.actions[pos]["chi"]) {
                    this.actions[pos]["chi"].setVisible(true);
                }
            }

            if ((operat & PZHActionType.TYPE_TAN) == PZHActionType.TYPE_TAN) {
                if (this.actions[pos]["tan"]) {
                    this.actions[pos]["tan"].setVisible(true);
                    if(MJModel.isMyPos(pos)) {
                        for (var i = 0; i < selfTable.room_Card.hand_card[0].length; i++) {
                            var card = selfTable.room_Card.hand_card[0][i];
                            if (selfTable._tanCards.indexOf(card.getValue()) != -1) {
                                card.setUp(true);
                            }
                        }
                    }
                }
            }

            if ((operat & PZHActionType.TYPE_SHAO) == PZHActionType.TYPE_SHAO) {
                if (this.actions[pos]["shao"]) {
                    this.actions[pos]["shao"].setVisible(true);
                }
            }

            this.reflashOpBtns(pos);
            return true;
        };
    },

    _setGameType: function () {
        var pkg_id = 1;
        var play_id = [];
        //甩字胡不可炮胡
        //play_id.push(MJModel.base_money + "分底");

        if (MJModel.RoomConfigID.indexOf(1401001) != -1) {
            play_id.push("1分");
        }
        if (MJModel.RoomConfigID.indexOf(1401002) != -1) {
            play_id.push("2分");
        }
        if (MJModel.RoomConfigID.indexOf(1401003) != -1) {
            play_id.push("3分");
        }
        if (MJModel.RoomConfigID.indexOf(1401004) != -1) {
            play_id.push("4分");
        }
        if (MJModel.RoomConfigID.indexOf(1401005) != -1) {
            play_id.push("5分");
        }
        if (MJModel.RoomConfigID.indexOf(1401006) != -1) {
            play_id.push("6分");
        }
        if (MJModel.RoomConfigID.indexOf(1401007) != -1) {
            play_id.push("7分");
        }
        if (MJModel.RoomConfigID.indexOf(1401008) != -1) {
            play_id.push("8分");
        }
        if (MJModel.RoomConfigID.indexOf(1401009) != -1) {
            play_id.push("9分");
        }
        if (MJModel.RoomConfigID.indexOf(1402001) != -1) {
            play_id.push("庄家翻倍");
        }
        if (MJModel.RoomConfigID.indexOf(2000001) != -1) {
            play_id.push("可少人开局");
        }
        if (MJModel.RoomConfigID.indexOf(2000002) != -1) {
            play_id.push("可少人开局");
        }
        if (MJModel.RoomConfigID.indexOf(2000003) != -1) {
            play_id.push("可少人开局");
        }
        MJModel.play_id_str = play_id;

        var gameDes = "";
        for (var i = 0; i < play_id.length; i++) {
            gameDes += play_id[i];
            if (i != play_id.length - 1) {
                gameDes += " ";
            }
        }
        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);

        MJModel.ConfigStr = gameDes;
        cc.log("lin=MJModel.ConfigStr="+MJModel.ConfigStr);
        var size = cc.director.getWinSize();
        var allL = 0;
        var allPlayId = [];
        for (var i = 0; i < MJModel.play_id_str.length; i++) {
            // var _gameType_sp = new cc.Sprite(__String.createWithFormat(getResPath("hanchuan/flag/playid%1.png"), play_id[i]));
            cc.log("lin=MJModel.ConfigStr1="+MJModel.play_id_str[i]);
            var _gameType_sp = new cc.LabelTTF(MJModel.play_id_str[i], "Arial", 22);
            _gameType_sp.setColor(cc.color(0x10, 0x35, 0x38));
            _gameType_sp.setAnchorPoint(cc.p(0.5, 0));
            //MJModel.mj_ui.rootNode.getChildByName("roomConfig").addChild(_gameType_sp, 0);
            allL += _gameType_sp.getContentSize().width + 10;
            allPlayId.push(_gameType_sp);
        }
        var curP = 0;
        for (var i = 0; i < MJModel.play_id_str.length; i++) {
            var _gameType_sp = allPlayId[i];
            _gameType_sp.setPosition(cc.p(size.width / 2 - allL / 2 + curP + _gameType_sp.getContentSize().width / 2, size.height / 2 + 210));
            curP += _gameType_sp.getContentSize().width + 10;
        }
    },

    resetGame: function (allClean) {
        this._super(allClean);
        this._tanCards = [];
        if (this.mTanBar.sureChoiceBtn != undefined) {
            this.mTanBar.sureChoiceBtn.setEnabled(false);
        }
    },
    handler_server_scene_info_uc: function (hubei_scene, canDelay) {
        var ackGameFree = hubei_scene.GameSence;
        this.mTanBar.setVisible(false);
        if (ackGameFree.RoomConfigID.indexOf(2000001) != -1)MJModel.changMode = 2;
        if (ackGameFree.RoomConfigID.indexOf(2000002) != -1)MJModel.changMode = 1;
        if (ackGameFree.RoomConfigID.indexOf(2000003) != -1)MJModel.changMode = 3;
        if (ackGameFree.RoomConfigID.indexOf(1366002) != -1) {
            MJModel.take_in = MJModel.take_in - 20 * ackGameFree.basescore;
        }
        this._super(ackGameFree, canDelay);

        this._setGameType();

        //还原各个玩家摊的牌
        if (hubei_scene.usertaninfo) {
            for (var j = 0; j < hubei_scene.usertaninfo.length; j++) {
                var taninfos = hubei_scene.usertaninfo[j].taninfos;
                var pos = MJModel.getPosBySeatid(j);
                for(var k = 0; k < taninfos.length; k++) {
                    var cards = taninfos[k].cards;
                    for (var i in cards) {
                        this.room_Card.addHuCard(pos, cards[i]);
                    }
                }
            }
        }

        this._tanCards = hubei_scene.cards;
    },
    handler_out_card_sound: function (sex, card) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("fengcheng/sound/chupai/%1_%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", Utils.toHex2(card)));
        } else {
            this._super(sex, card);
        }
    },

    handler_op_sound: function (pos, sex, OpType, OpType2, effect) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
            if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU && effect == "") {
                var zimo = this.room_Card.isDuoPai(pos);
                effect = "hu";
                if (zimo) {
                    effect = "zimo";
                }
            } else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                effect = "peng";
            }
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("fengcheng/sound/operator/%1_%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", effect));
        } else {
            this._super(pos, sex, OpType, OpType2, effect);
        }
    },

    handlerAutoUpTableReady: function (nums, selfIsReady) {
        if (MJModel.seatid == -1 && nums < 4) {
            this.actionCallBack("uptable");
        }
        else if (selfIsReady == false) {
            if (MJModel.canQuxiaoZhun()) {
                if (MJModel.roomState != 0) this.actionCallBack("ready");
            }
        }
    },

    isjieshan: false,
    handler_server_end_room_result_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.AckDisbandResult", data);
        if (this.room_EndTouPiao) this.room_EndTouPiao.removeFromParent(true);
        this.room_EndTouPiao = null;
        MJModel.TouPiaoING = false;
        var result = jpacket.Result;
        if (result == 1) {
            PlatformHelper.showToast("房间解散成功，3秒后房间自动结束");
            this.isjieshan = true;
        }
        else {
            PlatformHelper.showToast("解散失败，稍后游戏继续！");
        }
    },

    handler_game_time_over_bc: function (data, canDelay) {
        if (this.isjieshan)MJModel.state = MJ_STATUS.MJ_GAME_FREE;
        this.startTimeEnd();
        // PlatformHelper.showToast("服务器通知房间结束！");
    },
});

var MJResult_XinYu = MJCommonResult.extend({
    updateContentView: function (ackGameEndJS) {
        this.ackGameEnd = ackGameEndJS.gameend;
        this.ackGameEndJS = ackGameEndJS;
        //输赢标志
        var seatId = MJModel.seatid;
        var score = this.ackGameEnd.Score[seatId];
        var effectName = "lose";
        if (score > 0) {
            effectName = "win";
        }
        this._win_effect(effectName);

        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);

        var itemHeight = 120;

        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;

            var countY = m;

            if (MJModel.mj_roomType == 1) {
                if (pos == 2) {
                    continue;
                }
            }

            if (MJModel.mj_roomType == 2) {
                if (pos == 1 || pos == 3) {
                    continue;
                }

                if (pos == 0) {
                    countY = 1;
                } else if (pos == 2) {
                    countY = 2;
                }
            }

            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 495 - count * itemHeight;
            var startX = 40;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX + 60, startY + 55));
            this.bgSpr.addChild(headLayer, 10);

            //上排牌 杠
            var ganghuLayer = this.createGangHuLayer(seatid);
            this.bgSpr.addChild(ganghuLayer, 10);
            ganghuLayer.setPosition(cc.p(startX + 230, startY + 65));

            //下排牌
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX + 0, startY));
            this.bgSpr.addChild(handCardLayer);

            //this.createSpecialHuTip(startX + 785, startY + 40, seatid);
            this.createSpecialHuTip(startX + 900, startY + 40, seatid);

            // 输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX + 1100, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            //中马列表
            var maLayer = this.createMaLayer(seatid);
            if (maLayer) {
                maLayer.setPosition(cc.p(startX + 845, startY + 85));
                this.bgSpr.addChild(maLayer);
            }
            count++;
        }
    },
    createMaLayer: function (seatid) {
        var layer = null;
        var tan_info = this.ackGameEndJS.usertaninfo[seatid];
        if(!tan_info){
            return;
        }
        var tagTanpai = [];
        for(var k = 0; k < tan_info.taninfos.length; k++) {
            var taninfo = tan_info.taninfos[k];
            if (taninfo) {
                for (var i = 0; i < taninfo.cards.length; i++) {
                    tagTanpai.push(taninfo.cards[i]);
                }
            }
        }
        if (tagTanpai) {
            var tanCards = tagTanpai;
            if (tanCards.length > 0) {
                layer = new cc.Layer();
                var length = tanCards.length;
                for (var i = 0; i < tanCards.length; i++) {
                    var card = new MJCard();
                    card.setValue(tanCards[i], 0, CardType.Card_End, 0);
                    card.setAnchorPoint(cc.p(0.0, 1));
                    card.setScale(0.3);
                    var tempscale = card.getChildByName("sprite").getScale();
                    var startX = 5;
                    var startY = -10;
                    var count = 10;
                    if (length > count) {
                        //startY = length <= 14 ? 5 : 50;
                        startY = -5;
                    }
                    card.setPosition(cc.p(startX + parseInt((i % count)) * card.getBoundingBox().width * tempscale, startY - parseInt(i / count) * 35));
                    layer.addChild(card);
                }
            }
        }
        return layer;
    },

    createHandCard: function (seatid) {
        var tagHu = 0;
        //占时注释掉，胡的那张牌

        if (this.ackGameEnd.faninfo.length > seatid) {
            if (this.ackGameEnd.faninfo[seatid].hucard && this.ackGameEnd.faninfo[seatid].hucard != 255) {
                tagHu = this.ackGameEnd.faninfo[seatid].hucard;
            }
        }

        var layer = new cc.Layer();
        var imageView = new ccui.ImageView(getResPath("RoomMJ/result2/item_bg.png"));
        imageView.setPosition(cc.p(0, 0));
        imageView.setAnchorPoint(cc.p(0, 0));
        layer.addChild(imageView);

        var pos = MJModel.getPosBySeatid(seatid);
        if (this.ackGameEnd.UserCard.length > seatid) {
            var x = 222;
            var y = 15;
            var paiSpace = 10;
            var penggangSize = cc.size(88, 40);
            for (var i = 0; i < this.ackGameEnd.UserCard[seatid].FixedCardsLen; i++) {

                var state = this.ackGameEnd.UserCard[seatid].stFixedCards[i].state;
                var card = this.ackGameEnd.UserCard[seatid].stFixedCards[i].CardData;
                var chairID = this.ackGameEnd.UserCard[seatid].stFixedCards[i].chairID;
                var cardList = this.ackGameEnd.UserCard[seatid].stFixedCards[i].OpCards;
                var LaiziNum = this.ackGameEnd.UserCard[seatid].stFixedCards[i].LaiziNum;
                var specialCard = this.ackGameEnd.UserCard[seatid].stFixedCards[i].SpecialCard;
                var out_pos = MJModel.getPosBySeatid(chairID);

                if (card == undefined || card == null || card == 0) {
                    continue;
                }
                //下排杠牌
                var gangCard = new MJPeng();
                gangCard.setAnchorPoint(cc.p(0.0, 0.0));

                if ((state & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                    gangCard.setValue(PengType.Peng_Peng, pos, card, 0, out_pos, true, state, specialCard,LaiziNum,cardList);
                }
                else if ((state & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                    gangCard.setValue(PengType.Peng_AnKang, pos, card, 0, out_pos, true, state, specialCard,LaiziNum,cardList);
                }
                else if ((state & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                    gangCard.setValue(PengType.Chi_L, pos, card, 0, out_pos, true, state, specialCard,LaiziNum,cardList);
                }
                else if ((state & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                    gangCard.setValue(PengType.Chi_M, pos, card, 0, out_pos, true, state, specialCard,LaiziNum,cardList);
                }
                else if ((state & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                    gangCard.setValue(PengType.Chi_R, pos, card, 0, out_pos, true, state, specialCard,LaiziNum,cardList);
                }
                else {
                    gangCard.setValue(PengType.Peng_Kang, pos, card, 0, out_pos, true, state, specialCard,LaiziNum,cardList);
                }
                gangCard.setScale(0.35);
                gangCard.setPosition(cc.p(x + penggangSize.width/2 , y + penggangSize.height/2));
                layer.addChild(gangCard);

                x += penggangSize.width + 13;

            }

            var is_remove = 0;
            var need_remove = (parseInt(this.ackGameEnd.UserCard[seatid].ChangeableCardsLen % 3) == 2);
            this.hand_card[pos] = [];
            this.ackGameEnd.UserCard[seatid].ChangeableCards.sort(MJModel.mj_table.room_Card.sortCard);
            //牌面信息
            for (var i = this.ackGameEnd.UserCard[seatid].ChangeableCardsLen - 1; i >= 0; i--) {

                //去掉type＝＝1的判断 有些游戏自摸不一定叫自摸 只判断玩家的手牌数量 只要多牌 而且有胡牌数据 就跳过
                if (is_remove == 0 && need_remove && tagHu) {
                    if (this.ackGameEnd.UserCard[seatid].ChangeableCards[i] == tagHu) {
                        is_remove = 1;
                        continue;
                    }
                }
                var handCard = new MJCard();
                handCard.seatid = seatid;
                handCard.setValue(this.ackGameEnd.UserCard[seatid].ChangeableCards[i], 0, CardType.Card_Hand, 0);
                handCard.setScale(0.4);
                handCard.setAnchorPoint(cc.p(0.0, 0.0));
                var tempscale = handCard.getChildByName("sprite").getScale();
                handCard.setPosition(cc.p(x , y));
                x += handCard.getBoundingBox().width*tempscale;
                layer.addChild(handCard);
                this.hand_card[pos].push(handCard);
            }

            //胡的牌
            cc.log("----tagHu---: " + tagHu);
            this.hu_card[pos] = null;
            if (tagHu) {
                //多加一个是否多牌的判断 防止前面又没有跳过 这里又多加的bug
                var huCard = new MJCard();
                huCard.setValue(tagHu, 0, CardType.Card_End, 0);
                huCard.setScale(0.4);
                huCard.setAnchorPoint(cc.p(0.0, 0.0));
                huCard.setPosition(cc.p(x + paiSpace, y));
                layer.addChild(huCard);
                this.hu_card[pos] = huCard;
            }
        }
        this.handCradPos.x = x;
        this.handCradPos.y = y;
        return layer;
    }
    ,

    createGangHuLayer: function (seatid) {
        var layer = new cc.Layer();
        var x = 0;
        var y = 0;
        var sxendInfo = this.ackGameEndJS;
        //if (this.ackGameEnd.EndGangInfo.length > seatid) {
        //    var gameEndInfo = this.ackGameEnd.EndGangInfo[seatid];
        //    var map = {};
        //    for (var i = 0; i < gameEndInfo.Gang.length; i++) {
        //        var gang = gameEndInfo.Gang[i];
        //        if (map[gang.GangType] == undefined) {
        //            map[gang.GangType] = [];
        //        }
        //        map[gang.GangType].push(gang.GangCard);
        //    }
        //    for (var key in map) {
        //        if (!map.hasOwnProperty(key))continue;
        //        var a = key;
        //        var typeLabel = new cc.LabelTTF(this.getStringByType(a), "Arial", 20);
        //        typeLabel.setColor(this.leftColor);
        //        typeLabel.setAnchorPoint(cc.p(0, 0));
        //        typeLabel.setPosition(cc.p(x, y + 10));
        //        layer.addChild(typeLabel);
        //
        //        x += typeLabel.getContentSize().width;
        //
        //        var temp = map[key];
        //        for (var j = 0; j < temp.length; j++) {
        //            var smallCard = null;
        //            var c = Utils.toHex2(temp[j]);
        //            smallCard = new cc.Sprite(__String.createWithFormat(getResPath("fengcheng/smallCard/%1.png"), c));
        //            if (smallCard != undefined) {
        //                smallCard.setAnchorPoint(cc.p(0.0, 0.0));
        //                smallCard.setPosition(cc.p(x, y));
        //                layer.addChild(smallCard);
        //            }
        //            x += 28;
        //            if (j == temp.length - 1) {
        //                x += 20;
        //            }
        //        }
        //    }
        //}
        if (MJModel.RoomConfigID.indexOf(1402001) != -1) {
            if (seatid == MJModel.banker_seatid) {
                x += 5;
                var bankerfan = new cc.LabelTTF("庄家翻倍", "Arial", 20);
                bankerfan.setColor(this.leftColor);
                bankerfan.setAnchorPoint(cc.p(0, 0));
                bankerfan.setPosition(cc.p(x, y + 10));
                layer.addChild(bankerfan);
                x += bankerfan.getContentSize().width + 5;
            }
        }
        var state = this.ackGameEnd.EndState;
        if (state == 1 && seatid == MJModel.banker_seatid) {
            x += 5;
            var chouzhuang = new cc.LabelTTF("臭庄", "Arial", 20);
            chouzhuang.setColor(this.leftColor);
            chouzhuang.setAnchorPoint(cc.p(0, 0));
            chouzhuang.setPosition(cc.p(x, y + 10));
            layer.addChild(chouzhuang);
            x += chouzhuang.getContentSize().width + 5;
        }

        x += 5;
        var hupailei = sxendInfo.hupailei[seatid];
        if (hupailei) {
            var txt = "胡牌 +";
            if (hupailei < 0) {
                txt = "胡牌 ";
            }
            var hupaileis = new cc.LabelTTF(txt + hupailei, "Arial", 20);
            hupaileis.setColor(this.leftColor);
            hupaileis.setAnchorPoint(cc.p(0, 0));
            hupaileis.setPosition(cc.p(x, y + 10));
            layer.addChild(hupaileis);
            x += hupaileis.getContentSize().width + 5;
        }

        x += 5;
        var ganglei = sxendInfo.ganglei[seatid];
        if (ganglei) {
            var txt = "杠牌 +";
            if (ganglei < 0) {
                txt = "杠牌 ";
            }
            var gangleis = new cc.LabelTTF(txt + ganglei, "Arial", 20);
            gangleis.setColor(this.leftColor);
            gangleis.setAnchorPoint(cc.p(0, 0));
            gangleis.setPosition(cc.p(x, y + 10));
            layer.addChild(gangleis);
            x += gangleis.getContentSize().width + 5;
        }

        x += 5;
        var penglei = sxendInfo.penglei[seatid];
        if (penglei) {
            var txt = "碰 +";
            if (penglei < 0) {
                txt = "碰 ";
            }
            var pengleis = new cc.LabelTTF(txt + penglei, "Arial", 20);
            pengleis.setColor(this.leftColor);
            pengleis.setAnchorPoint(cc.p(0, 0));
            pengleis.setPosition(cc.p(x, y + 10));
            layer.addChild(pengleis);
            x += pengleis.getContentSize().width + 5;
        }

        x += 5;
        var shaolei = sxendInfo.shaolei[seatid];
        if (shaolei) {
            var txt = "勺 +";
            if (shaolei < 0) {
                txt = "勺 ";
            }
            var shaoleis = new cc.LabelTTF(txt + shaolei, "Arial", 20);
            shaoleis.setColor(this.leftColor);
            shaoleis.setAnchorPoint(cc.p(0, 0));
            shaoleis.setPosition(cc.p(x, y + 10));
            layer.addChild(shaoleis);
            x += shaoleis.getContentSize().width + 5;
        }

        x += 5;
        var tanlei = sxendInfo.tanlei[seatid];
        if (tanlei) {
            var txt = "摊牌 +";
            if (tanlei < 0) {
                txt = "摊牌 ";
            }
            var tanleis = new cc.LabelTTF(txt + tanlei, "Arial", 20);
            tanleis.setColor(this.leftColor);
            tanleis.setAnchorPoint(cc.p(0, 0));
            tanleis.setPosition(cc.p(x, y + 10));
            layer.addChild(tanleis);
            x += tanleis.getContentSize().width + 5;
        }

        x += 5;
        var ewailei = sxendInfo.ewailei[seatid];
        if (ewailei) {
            var txt = "额外奖励 +";
            if (ewailei < 0) {
                txt = "额外奖励 ";
            }
            var ewaileis = new cc.LabelTTF(txt + ewailei, "Arial", 20);
            ewaileis.setColor(this.leftColor);
            ewaileis.setAnchorPoint(cc.p(0, 0));
            ewaileis.setPosition(cc.p(x, y + 10));
            layer.addChild(ewaileis);
            x += ewaileis.getContentSize().width + 5;
        }

        x += 5;
        //总垒
        var zonglei = hupailei + ganglei + penglei + shaolei + tanlei + ewailei;
        if (zonglei) {
            var txt = "总垒数 +";
            if (zonglei < 0) {
                txt = "总垒数 ";
            }
            var zongleis = new cc.LabelTTF(txt + zonglei, "Arial", 20);
            zongleis.setColor(this.leftColor);
            zongleis.setAnchorPoint(cc.p(0, 0));
            zongleis.setPosition(cc.p(x, y + 10));
            layer.addChild(zongleis);
            x += zongleis.getContentSize().width + 5;
        }

        var addfan = this.ackGameEnd.faninfo[seatid].addfan;
        if (addfan) {
            for (var i = 0; i < addfan.length; i++) {
                if (AddFanType[addfan[i].AddType]) {
                    var fanType = new cc.LabelTTF(AddFanType[addfan[i].AddType], "Arial", 20);
                    fanType.setColor(this.leftColor);
                    fanType.setAnchorPoint(cc.p(0, 0));
                    fanType.setPosition(cc.p(x, y + 10));
                    layer.addChild(fanType);
                    x += fanType.getContentSize().width + 5;
                }
            }
        }

        var str = MJModel.ConfigStr;
        var size = cc.director.getWinSize();
        var _gameType_sp = new cc.LabelTTF(str, "Arial", 23);
        _gameType_sp.setColor(cc.color("#A3BD4F"));
        _gameType_sp.setAnchorPoint(cc.p(0.5, 0.5));
        _gameType_sp.setPosition(cc.p(size.width / 7, 50));
        this.addChild(_gameType_sp);
        return layer;
    },

    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var path = "";
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5抢杠胡 6被抢杠 7一炮多响
            switch (fanInfo.SpecialType) {
                case 1:
                    path = "fengcheng/result-detail/result_detail_zimo.png";
                    break;
                case 2:
                    path = "fengcheng/result-detail/result_detail_paohu.png";
                    break;
                case 3:
                    path = "fengcheng/result-detail/result_detail_dianpao.png";
                    break;
                case 4:
                    path = "fengcheng/result-detail/result_detail_beizimo.png";
                    break;
                case 5:
                    path = "fengcheng/result-detail/result_detail_qiangganghu.png";
                    break;
                case 6:
                    path = "fengcheng/result-detail/result_detail_beiqianggang.png";
                    break;
                case 7:
                    path = "fengcheng/result-detail/result_detail_dianpao.png";
                    break;
                default:
                    break;
            }
            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setPosition(cc.p(startX - 85, startY));
                typeSprite.setScale(0.6);
                this.bgSpr.addChild(typeSprite);

            }
        }
    },
    //输赢分
    createScoreLayer: function (seatid) {
        var layer = new cc.Layer();
        var score = 0;
        if (this.ackGameEnd.Score && this.ackGameEnd.Score.length > seatid) score = this.ackGameEnd.Score[seatid];
        var width = 0;
        var path = getResPath("RoomMJ/result2/result_small_label_lose.png");
        if (score > 0) {
            path = getResPath("RoomMJ/result2/result_small_label_win.png");
        }
        var scoredes = ":";
        if (score == 0) scoredes = "";
        var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), path, 29, 37, '0');

        scoreLabel.setAnchorPoint(cc.p(0.0, 0.5));

        scoreLabel.setPosition(cc.p(width, 15));
        scoreLabel.setName("scoreLabel");
        layer.addChild(scoreLabel);

        if (Math.abs(score) >= 10000) {
            scoreLabel.setScale(0.8);
        }
        return layer;
    },
    getStringByType: function (stype) {
        var type = Number(stype);
        var str = "";
        switch (type) {
            case 2:
                str = "明杠";
                break;
            case 4:
                str = "明杠";
                break;
            case 8:
                str = "暗杠";
                break;
            case 16:
                str = "被明杠";
                break;
            case 32:
                str = "被放杠";
                break;
            case 64:
                str = "放杠";
                break;
            case 128:
                str = "被暗杠";
                break;
            default:
                break;
        }
        return str;
    },
});

var MJTan = cc.Layer.extend(
    {
        cancelChoiceBtn: null,
        sureChoiceBtn: null,
        ctor: function () {
            this._super();
            var wsize = cc.director.getWinSize();

            var csize = cc.size(530, 140);

            this.setIgnoreAnchorPointForPosition(false);
            this.setAnchorPoint(cc.p(0.5, 0));
            this.setContentSize(csize);
            this.setPosition(cc.p(wsize.width / 2, 158));

            var selectLayer = new cc.Sprite(getResPath("fengcheng/flag/tan_tip.png"));
            selectLayer.setName("ChooseTan_selectLayer");
            selectLayer.setPosition(cc.p(wsize.width / 2 - 350, 50));
            this.addChild(selectLayer, 10000);

             this.cancelChoiceBtn = new ccui.Button(getResPath("fengcheng/flag/tan_cancel.png"));
             this.cancelChoiceBtn.setName("cancelChoice");
             this.cancelChoiceBtn.setAnchorPoint(cc.p(1, 0));
             this.cancelChoiceBtn.setPosition(cc.p(csize.width / 2 + 380, 15));
            selectLayer.addChild(this.cancelChoiceBtn);

            this.sureChoiceBtn = new ccui.Button(getResPath("fengcheng/flag/tan_sure.png"));
            this.sureChoiceBtn.setEnabled(false);
            this.sureChoiceBtn.setName("sureChoice");
            this.sureChoiceBtn.setAnchorPoint(cc.p(1, 0));
            this.sureChoiceBtn.setPosition(cc.p(csize.width/ 2 + 550, 15));
            selectLayer.addChild(this.sureChoiceBtn);
            cc.log("---this.sureChoiceBtn---: " + this.sureChoiceBtn);
        },
        addClickEventListener: function (callback) {
            this.cancelChoiceBtn.addClickEventListener(callback);
            this.sureChoiceBtn.addClickEventListener(callback);
        },
    });