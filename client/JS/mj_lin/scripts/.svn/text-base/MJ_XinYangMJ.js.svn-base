loadProtoFile("proto/xinyangmjgameproto.proto");

var selfCMD = {
    SERVER_START_PIAO: 5024,      //开始选择跑
    SERVER_BROAD_PIAO: 5022,      //广播玩家选择的跑
    CLIENT_MJ_CHOOSE_PIAO: 1108,  //选择跑
    SERVER_START_BUYHORSE: 5037,    // 所有人选择跑后广播

    SERVER_BUY_HORSE: 5015,          //开始扣牌
    SERVER_FLOWER_HAND_CARD: 5026,   //发牌
    SERVER_GET_HUA_CARD: 5027,       //最后九张牌的录像
    CLIENT_MJ_CHOOSE_LACKTYPE: 1101, //选择扣牌
    SERVER_CP_BANKER: 5025,          //广播扣牌

    SERVER_BEGIN_QUAN_FENG: 5017, //开始闹庄
    CLIENT_MJ_CHANGE_CARD: 1100,  //选择闹庄
    SERVER_BAOPAI_REACH: 5032,    //广播闹庄
};

var sendXiaPao = function (v) {
    var packet = createPacket("proto.game.xinyangmj.ReqChoosePiao");
    packet.userpiao = v;
    sendPacket(packet, selfCMD.CLIENT_MJ_CHOOSE_PIAO);
};

var sendNaoZhuang = function (v) {
    var packet = createPacket("proto.game.xinyangmj.ReqChooseNaoZhuang");
    packet.usernao = v;
    sendPacket(packet, selfCMD.CLIENT_MJ_CHANGE_CARD);
};

var sendKouPai = function (v) {
    var packet = createPacket("proto.game.xinyangmj.ReqChooseKouPai");
    packet.userkoupai = v;
    sendPacket(packet, selfCMD.CLIENT_MJ_CHOOSE_LACKTYPE);
};

var MJTable_XinYangMJ = MJTable.extend({
    tag: "MJTable_XinYangMJ",
    isRecordShow: false,
    _pkg_id: 0,
    _curLaizi: -1,
    _curLaizipi: -1,
    _curLaizipi2: -1,
    _curLaizi_bg: null,
    cover_hand_card: [[], [], [], []], //盖着的手牌
    _showNaoZhuangfen: false, //结算是否显示闹庄分
    _needHandCardCenter: false, //手牌居中显示,扣牌时用到
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        MJModel.mj_suport_fangyan = 0;
        MJModel.otherOutCardEffect = false;
        MJModel.outCardEffect_style = 1;

        MJModel.mj_bg_use = 0;
        MJModel.toupiaoTipsType = 1;
        MJModel.chi_layout = 3;
        MJModel.needTipWhenPass = 0;
        MJModel.mj_touch_tip = 1;
        MJModel.isOutCard = true;
        MJModel.mj_chat_style = 5;
        MJModel.mj_gps_type = 1;
        MJModel.mj_public_style = 1;
        MJModel.choiceMoreGang_stlye = 1;
        MJModel.mj_listenLayer_autoshow = true;
        MJModel.mj_double_click_style = 1;
        MJModel.mj_font = "xieshi";
        MJModel.mj_fontSize = "dahao";
        MJModel.mj_style = "huaijiu";
        MJModel.mj_table_view = "25d";
        MJModel.shareType = 1;
        MJModel.orderType = 1;

        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];
            if (this._pkg_id == 3294 || this._pkg_id == 3167) {
                MJModel.mj_roomType = 1;
            } else if (this._pkg_id == 3295 || this._pkg_id == 3168) {
                MJModel.mj_roomType = 2;
            }
        } catch (e) {
            Log(this, e);
        }

        try {
            var help = this.roomPublic.getChildByName("game_help");
            help.setVisible(false);
        } catch (e) {

        }
        this._init_extend();
        this._super();
        this.init_pao();
        this.init_naozhuang();
        if (this.mjType) {
            this.mjType.setScale(0.7);
        }
        // this.schedule(this.test, 1.0);
    },

    _init_extend: function () {
        var self_table = this;

        //暂时关闭防作弊
        MJCards.prototype.checkCardSafe = function () {
            return;
        };

        var super_MJPreTable_ctor = MJPreTable.prototype.ctor;
        MJPreTable.prototype.ctor = function () {
            super_MJPreTable_ctor.call(this);
            this.bg.loadTexture(getResPath(self_table.getBgStr()));
        };

        MJPreTable.prototype.setTableIcon = function () {
            var size = cc.director.getWinSize();
            var mjType = new cc.Sprite(MJModel.mj_table.getMjTypePath());
            if (mjType != null) {
                mjType.setPosition(cc.p(size.width / 2, size.height / 2 + 120));
                this.addChild(mjType, 0);
                mjType.setScale(0.7);
            }
        };
        MJCards.prototype.sortCard = function (a, b) {
            try {
                var av = a;
                var bv = b;
                if (typeof a === "object") av = a.getValue();
                if (typeof b === "object") bv = b.getValue();

                if (a.type == CardType.Card_End && b.type != CardType.Card_End) return 1;
                if (b.type == CardType.Card_End && a.type != CardType.Card_End) return -1;

                //isblackcolor
                if (a.isblackcolor == true && b.isblackcolor != true) return -1;
                if (b.isblackcolor == true && a.isblackcolor != true) return 1;

                if (av == self_table._curLaizi && bv != self_table._curLaizi)return 1;//赖子放在最前边
                if (av != self_table._curLaizi && bv == self_table._curLaizi)return -1;//赖子放在最前边

                return bv - av;
            } catch (e) {
                return 0;
            }
        };

        var super_setSomeCardClickState = MJCards.prototype.setSomeCardClickState;
        MJCards.prototype.setSomeCardClickState = function () {
            super_setSomeCardClickState.call(this);

            for (var i = 0; i < this.hand_card[0].length; i++) {
                var card = this.hand_card[0][i];
                if (card.type == CardType.Card_End) {
                    card.setBlackVis(false);
                    card.setCardTouchEnable(false);
                }
            }
        };

        //湖北麻将不要自动胡牌功能
        MJAction.prototype.setAutoOutCardVis = function (value) {
        };

        MJCard.prototype.check_addFlag = function (index) {
            self_table._checkAddCardFlag(this, index);
        };

        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(false);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };

        MJPlayer.prototype.setNaozhuangVisible = function (v) {
            if (!this.naozhuang_flag) {
                this.naozhuang_flag = new cc.Sprite(getResPath("xinyangmj/naozhuang/tip2.png"));
                this.naozhuang_flag.setVisible(false);
                if (this.pid == 2) {
                    this.naozhuang_flag.setPosition(cc.p(this.m_size.width / 2, this.m_size.height));
                }
                else {
                    this.naozhuang_flag.setPosition(cc.p(this.m_size.width / 2, this.m_size.height));
                }
                this.addChild(this.naozhuang_flag, 1);
            }
            if (this.naozhuang_flag) {
                this.naozhuang_flag.setVisible(v);
            }
        };
        var superreset = MJPlayer.prototype.reset;
        MJPlayer.prototype.reset = function (allClean, isGameStart) {
            superreset.call(this);
            this.setNaozhuangVisible(false);
        };

        MJConfig.getHandCardPos = function (pos, index, all, needRestri) {
            if (self_table._needHandCardCenter) {
                index += 3;
            }
            if (needRestri == undefined)needRestri = false;
            if (MJModel.isOnVideo) {
                return this.getEndCardPos(pos, index, all, needRestri);
            }
            var findex = index;
            if (needRestri) {
                findex = index - 1;
            }
            //return this.getWorldPosition("hand_" + pos, "h_" + findex);
            var _postion = this.getWorldPosition("hand_" + pos, "h_" + findex);

            if(pos == 0 && MJModel.mj_font == "jianjie" && MJModel.mj_fontSize == "dahao" && MJModel.mj_bg_use == 0){
                _postion.x -= (findex * 3  - 20);
            }
            if (self_table._needHandCardCenter && pos == 0) {
                _postion.x -= 50;
            }
            return _postion;
        };

        MJConfig.getMoCardPos = function (pos) {
            if (MJModel.isOnVideo) {
                return this.getEndCardMoPos(pos);
            }
            //return this.getWorldPosition("hand_" + pos, "h_mo");
            var _postion = this.getWorldPosition("hand_" + pos, "h_mo");
            if(pos == 0 && MJModel.mj_font == "jianjie" && MJModel.mj_fontSize == "dahao" && MJModel.mj_bg_use == 0){
                _postion.x += 25;
            }
            return _postion;
        };
    },

    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.xinyangmj.tagCurGameScence", jpacket);
            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.xinyangmj.AckCurGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_LAIZI_BC) {
            this._handler_server_laizi_bc(jpacket, canDelay);
        }

        //选跑
        if (cmd == selfCMD.SERVER_START_PIAO) {
            this._handler_server_start_xiapao_bc(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_BROAD_PIAO) {
            this._handler_server_xiapao_ok_bc(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_START_BUYHORSE) {
            this._handler_server_xiapao_end_bc(jpacket, canDelay);
            return;
        }

        //闹庄
        if (cmd == selfCMD.SERVER_BEGIN_QUAN_FENG) {
            this._handler_server_start_naozhuang_bc(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_BAOPAI_REACH) {
            this._handler_server_naozhuang_result_bc(jpacket, canDelay);
            return;
        }

        //扣牌
        if (cmd == selfCMD.SERVER_BUY_HORSE) {
            this._handler_server_start_koupai_bc(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_CP_BANKER) {
            this._handler_server_koupai_result_bc(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_FLOWER_HAND_CARD) {
            this._handler_server_remain_handcards_bc(jpacket, canDelay);
            return;
        }
        //录像后几张牌
        if (cmd == selfCMD.SERVER_GET_HUA_CARD) {
            this.handler_server_remain_handcards_bc_onvideo(jpacket, canDelay);
            return;
        }
        this._super(cmd, jpacket, canDelay, svrid);
    },

    _handler_server_laizi_bc: function (data, canDelay) {
        var packet = parsePacket("proto.game.xinyangmj.AckLaiziCard", data);
        var self = this;
        var curLaizi = packet.laizicard;
        this._setLaizi(curLaizi, -1, -1, canDelay ? true : false);

        if (canDelay == false) {
            this._showHandcardFlag(false);
            this.room_Card.reflashHandCard(0, true);
            this.room_Card.reflashHandCard(1, true);
            this.room_Card.reflashHandCard(2, true);
            this.room_Card.reflashHandCard(3, true);
            return;
        }
        MJModel.isEnterWait = true;

        var move_end = cc.callFunc(function () {
            self._showHandcardFlag(false);

            var mo_card = null;
            if (self.room_Card.isDuoPai(0)) {
                mo_card = self.room_Card.hand_card[0][self.room_Card.hand_card[0].length - 1];
                self.room_Card.hand_card[0].splice(self.room_Card.hand_card[0].length - 1, 1);
            }

            var allPreCars = [];
            var allLaiZi = [];
            var dd = 0;

            for (var i = self.room_Card.hand_card[0].length - 1; i >= 0; i--) {
                var card = self.room_Card.hand_card[0][i];
                if (card.getValue() == curLaizi) {
                    allLaiZi.push(card);
                } else {
                    if (allLaiZi.length > 0) {
                        break;
                    }
                    allPreCars.push(card);
                }
            }

            if (allLaiZi.length > 0 && allPreCars.length > 0) {
                var allDelay = 0;
                for (var i = 0; i < allLaiZi.length; i++) {
                    var card = allLaiZi[i];
                    var begin_pos = card.getPosition();
                    var end_pos = MJConfig.getHandCardPos(0, self.room_Card.hand_card[0].length - 1 - i, self.room_Card.hand_card[0].length, self.room_Card.isDuoPai(0));
                    var allL = Math.abs(end_pos.x - begin_pos.x);

                    //if (MJModel.outCardEffect_style == 0 || true) {
                    var time = allL / 1000;
                    if (time < 0.17) time = 0.17;
                    if (time > 0.3) time = 0.3;
                    //    card.runAction(cc.sequence(cc.delayTime(allDelay), cc.spawn(cc.rotateTo(0.1, 15), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + 100))), cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y + 100)).easing(cc.easeSineOut()), cc.spawn(cc.rotateTo(0.1, 0), cc.moveTo(0.17, end_pos))));
                    //} else {
                    //    card.runAction(cc.sequence(cc.moveTo(0.0, cc.p(end_pos.x + 0, end_pos.y + 100)), cc.moveTo(0.3, end_pos)));
                    //}
                    card.runAction(cc.sequence(cc.spawn(cc.rotateTo(0.1, 15), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + 100))), cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y + 100)).easing(cc.easeSineOut()), cc.spawn(cc.rotateTo(0.1, 0), cc.moveTo(0.17, end_pos))));
                    allDelay += 1;
                }
                for (var i = 0; i < allPreCars.length; i++) {
                    var card = allPreCars[i];
                    //card.runAction(cc.sequence(cc.moveBy(0.3, cc.p(83, 0)), cc.delayTime(1 - 0.3)).repeat(allLaiZi.length));
                    card.runAction(cc.moveBy(0.3, cc.p(83 * allLaiZi.length, 0)));
                }

                var callback = cc.callFunc(function () {
                    MJModel.isEnterWait = false;
                    self.room_Card.reflashHandCard(0, true);
                    if (mo_card) {
                        mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                        self.room_Card.hand_card[0].push(mo_card);
                    }
                });
                self.runAction(cc.sequence(cc.delayTime(0.5), callback));
            } else {
                MJModel.isEnterWait = false;
                self.room_Card.reflashHandCard(0, true);
                if (mo_card) {
                    mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                    self.room_Card.hand_card[0].push(mo_card);
                }
            }
        });
        this.runAction(cc.sequence(cc.delayTime(1), move_end));
    },

    _setLaizi: function (laizi, laizipi, laizipi2, gamestart) {
        if (laizi == null || laizi == undefined || laizi == -1 || laizi == 255) {
            if (this._curLaizi_bg) this._curLaizi_bg.setVisible(false);
            return;
        }
        if (gamestart == undefined) gamestart = false;
        var size = cc.director.getWinSize();

        if (this._curLaizi_bg == null) {
            this._curLaizi_bg = new cc.Sprite(getResPath("xinyangmj/flag/laizi_bg3.png"));

            this._curLaizi_bg.setPosition(cc.p(size.width - 245, size.height - 70));
            this.addChild(this._curLaizi_bg, 200);
        }

        this._curLaizi_bg.removeAllChildren();
        this._curLaizi_bg.setVisible(true);
        this._curLaizi = laizi;
        if (this._curLaizi > 0) {
            var card = new MJCard();
            card.setValue(laizi, 0, CardType.Card_Out, 0);
            card.setPosition(cc.p(this._curLaizi_bg.getContentSize().width / 2, this._curLaizi_bg.getContentSize().height / 2));
            card.setScale(1);
            card.setStoreColor(cc.color(255, 249, 137));
            this._curLaizi_bg.addChild(card);

            if (gamestart) {
                var dl = 1;
                card.setVisible(false);
                var ppos = card.getPosition();
                var self = this;
                var callFunc = cc.CallFunc(function () {
                    self._showLaizi_effect("赖子");
                });
                card.setPosition(cc.p(size.width / 2 - this._curLaizi_bg.getPositionX() + this._curLaizi_bg.getContentSize().width / 2, size.height / 2 - this._curLaizi_bg.getPositionY() + this._curLaizi_bg.getContentSize().height / 2));
                card.runAction(cc.sequence(cc.delayTime(0 + dl), cc.show(), callFunc, cc.scaleTo(0.1, 2), cc.delayTime(0.5), cc.spawn(cc.moveTo(0.17, ppos), cc.scaleTo(0.17, 1))));
            }
        }
    },

    _showLaizi_effect: function (name) {
        ccs.armatureDataManager.addArmatureFileInfo(getResPath("xinyangmj/effect/laizi/effects_mjhunancx.ExportJson"));
        var size = cc.director.getWinSize();
        var armature = new ccs.Armature("effects_mjhunancx");
        var animation = armature.getAnimation();
        if (animation) {
            if (typeof animation.playWithIndex === "function") {
                if (name == "赖子") {
                    animation.playWithIndex(1, -1, 0);
                }
                if (name == "赖根") {
                    animation.playWithIndex(2, -1, 0);
                }
                if (name == "朝天") {
                    animation.playWithIndex(3, -1, 0);
                }
                armature.setPosition(cc.p(size.width / 2, size.height / 2 + 150));
                this.addChild(armature, 100);
                armature.runAction(cc.sequence(cc.delayTime(0.5), cc.removeSelf()));
            }
        }
        Sound.getInstance().playEffect(__String.createWithFormat(getResPath("xinyangmj/sound/laizi.mp3")));
        return armature;
    },

    handler_server_game_start_bc2: function (data, canDelay) {
        var firstHandCard = parsePacket("proto.game.AckFirstHandCard", data);
        if (firstHandCard.UserCard && firstHandCard.UserCard.ChangeableCards) {
            var changeable_Size = firstHandCard.UserCard.ChangeableCards.length;
            if (changeable_Size == 4) {
                this._needHandCardCenter = true;
            }
        }
        this._super(data, canDelay);
    },

    handler_server_game_start_bc_onvideo: function (data, canDelay) {
        var firstHandCard = parsePacket("proto.game.VideoFirstHandCard", data);
        for (var i = 0; i < firstHandCard.UserCard.length; i++) {
            var pos = MJModel.getPosBySeatid(i);
            var changeable_Size = firstHandCard.UserCard[i].ChangeableCards.length;
            var cardList = [];

            if (changeable_Size == 4) {
                this._needHandCardCenter = true;
            }
            //手里的牌
            for (var j = 0; j < changeable_Size; j++) {
                cardList.push(firstHandCard.UserCard[i].ChangeableCards[j]);
            }
            this.room_Card.initHandCard(pos, cardList);
            this.room_Card.reflashHandCard(pos, true);
            this.room_Card.removePublicCardByNums(changeable_Size, false);
        }
    },

    //开始扣牌
    _handler_server_start_koupai_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.xinyangmj.AckStartKouPai", data);
        this.showKouPaiLayer();
    },

    _handler_server_koupai_result_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.xinyangmj.AckBroadKouPai", data);
        var chairid = jpacket.chairid;
        var userkoupai = jpacket.userkoupai;
        if (MJModel.isMyPlayer(chairid)) {
            this.hideKouPaiLayer();
        }
        if (userkoupai) {
            var pos = MJModel.getPosBySeatid(chairid);
            for (var i = 0; i < this.room_Card.hand_card[pos].length; i++) {
                var card = this.room_Card.hand_card[pos][i];
                if (MJModel.isOnVideo) {
                    card.setStoreColor(cc.color(130, 120, 130));
                    card.isblackcolor = true;
                } else {
                    card.setValue(0, pos, CardType.Card_End, i);
                    this.cover_hand_card[pos].push(card);
                }
            }
        }
    },

    //发剩余手牌
    _handler_server_remain_handcards_bc: function (data, canDelay) {
        var firstHandCard = parsePacket("proto.game.xinyangmj.AckStartFourCard", data);
        this._needHandCardCenter = false;
        var cardData = [];
        if (firstHandCard.UserCard && firstHandCard.UserCard.ChangeableCards) {
            var changeable_Size = firstHandCard.UserCard.ChangeableCards.length;
            for (var i = 0; i < changeable_Size; i++) {
                var cardDataNum = firstHandCard.UserCard.ChangeableCards[i];
                cardData.push(cardDataNum);
            }
        }

        if (firstHandCard.HandCardNums) {
            var handcardnumsSize = firstHandCard.HandCardNums.length;
            //当前玩家手牌长度
            for (var i = 0; i < handcardnumsSize; i++) {
                var pos = MJModel.getPosBySeatid(i);
                var carNums = firstHandCard.HandCardNums[i];
                if (MJModel.isMyPlayer(i)) {
                    for (var k = 0; k < carNums; k++) {
                        this.room_Card.addHandCard(0, cardData[k]);
                    }
                    // this.room_Card.initHandCard(0, cardData);
                    this.room_Card.reflashHandCard(0, true);
                } else {
                    var cardlist = [];
                    for (var j = 0; j < carNums; j++) {
                        cardlist.push(0);
                    }

                    for (var k = 0; k < carNums; k++) {
                        this.room_Card.addHandCard(pos, cardlist[k]);
                    }

                    // this.room_Card.initHandCard(pos, cardlist);
                    this.room_Card.reflashHandCard(pos, true);
                }
            }
        }
    },

    handler_server_remain_handcards_bc_onvideo: function (data, canDelay) {
        var firstHandCard = parsePacket("proto.game.xinyangmj.VideoFirstFourCard", data);
        this._needHandCardCenter = false;
        for (var i = 0; i < firstHandCard.UserCard.length; i++) {
            var pos = MJModel.getPosBySeatid(i);
            var changeable_Size = firstHandCard.UserCard[i].ChangeableCards.length;
            var cardList = [];

            //手里的牌
            for (var j = 0; j < changeable_Size; j++) {
                cardList.push(firstHandCard.UserCard[i].ChangeableCards[j]);
            }
            for (var k = 0; k < changeable_Size; k++) {
                this.room_Card.addHandCard(pos, cardList[k]);
            }
            // this.room_Card.initHandCard(pos, cardList);
            this.room_Card.reflashHandCard(pos, true);
            this.room_Card.removePublicCardByNums(changeable_Size, false);
        }
    },

    //开始闹庄
    _handler_server_start_naozhuang_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.xinyangmj.AckStartNaoZhuang", data);
        this.showNaoZhuangLayer();
        this.showNaoZhuangTip();
    },

    naozhuangtime: 0,
    _handler_server_naozhuang_result_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.xinyangmj.AckBroadNaoZhuang", data);
        var chairid = jpacket.chairid;
        var usernaozhuang = jpacket.usernaozhuang;
        if (MJModel.isMyPlayer(chairid)) {
            this.hideNaoZhuangLayer();
        }

        var pos = MJModel.getPosBySeatid(chairid);
        this.players[pos].setNaozhuangVisible(usernaozhuang);

        this.naozhuangtime++;

        //玩家人数
        var playernum = 4;
        if (MJModel.mj_roomType == 1) playernum = 3;
        if (MJModel.mj_roomType == 2) playernum = 2;
        if (this.naozhuangtime == playernum) {
            this.hideNaoZhuangTip();
        }
    },
    getBgStr: function () {
        if (MJModel.mj_style != "shishang" && MJModel.mj_style != "huaijiu" && MJModel.mj_style != "jingdian") {
            MJModel.mj_style = "shishang";
        }
        if (MJModel.mj_table_view != "25d" && MJModel.mj_table_view != "2d") {
            MJModel.mj_table_view = "25d";
        }
        return __String.createWithFormat("xinyangmj/bgs/%1_%2.png", MJModel.mj_style, MJModel.mj_table_view);
    },

    updateBg: function (isInit) {
        if (isInit == undefined)isInit = false;
        var size = cc.director.getWinSize();
        if (this.bg == null) {
            this.bg = new ccui.ImageView(getResPath(this.getBgStr()));
            this.bg.setAnchorPoint(cc.p(0.5, 0.5));
            this.bg.setContentSize(size);
            this.bg.setScale9Enabled(true);
            this.bg.setPosition(size.width / 2, size.height / 2);
            this.addChild(this.bg, -100);
        } else {
            this.bg.loadTexture(getResPath(this.getBgStr()));
        }
        if(MJModel.mj_font == "jianjie" && MJModel.mj_fontSize == "dahao" && MJModel.mj_bg_use == 0){
            Utils.addCardSprites(__String.createWithFormat("xinyangmj/cards/%1_%2_%3_debug" , MJModel.mj_font , MJModel.mj_fontSize , MJModel.mj_table_view));
        }else if(MJModel.mj_font == "gexing" && MJModel.mj_fontSize == "dahao" && MJModel.mj_bg_use == 0){
            Utils.addCardSprites(__String.createWithFormat("RoomMJ/cards/jianjie_%1_%2_debug" , MJModel.mj_fontSize , MJModel.mj_table_view));
        }else{
            Utils.addCardSprites(__String.createWithFormat("RoomMJ/cards/%1_%2_%3_debug" , MJModel.mj_font , MJModel.mj_fontSize , MJModel.mj_table_view));
        }

        if (MJModel.mj_roomType == 2) {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config_2ren.json" : "RoomMJ/config/card_config2d_2ren.json");
        } else {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config.json" : "RoomMJ/config/card_config2d.json");
        }

        if (isInit)return;
        if (this.pre_scene)this.pre_scene.bg.loadTexture(getResPath(this.getBgStr()));

        this.room_Card.reflashAllCardUI();
        for (var i = 0; i < 4; i++) {
            this.players[i].setPosition(MJConfig.getPlayerPos(i));
            this.players[i].reflashNameMoneyPosition();
        }
        if (this.room_Info)this.room_Info.reflash();

        GetChild(this.paoLayer, "tips").setPosition(MJConfig.getInfoPos());

        if (this.mjType) {
            this.mjType.setTexture(this.getMjTypePath());
        }
    },

    getMjTypePath: function () {
        var pkgid = 1;
        if (MJModel.mj_roomType == 1) {
            pkgid = 2;
        } else if (MJModel.mj_roomType == 2) {
            pkgid = 3;
        }
        var path = __String.createWithFormat(getResPath("xinyangmj/flag/pkgid_%1_%2.png"), MJModel.mj_table_view, pkgid);
        return path;
    },

    _showHandcardFlag: function (isEndShow) {
        if (MJModel.isOnVideo) {
            for (var j = 0; j < 4; j++) {
                var allcards = this.room_Card.hand_card[j];
                if (allcards) {
                    for (var i = 0; i < allcards.length; i++) {
                        var card = allcards[i];
                        this._checkAddCardFlag(card);
                    }
                }
            }
            return;
        }
        var allcards = this.room_Card.hand_card[0];
        if (allcards) {
            for (var i = 0; i < allcards.length; i++) {
                var card = allcards[i];
                this._checkAddCardFlag(card);
            }
        }
    },
    _checkAddCardFlag: function (card) {
        try {
            if (card.getValue() == this._curLaizi) {
                card.setStoreColor(cc.color(255, 249, 137));
                var p = card.getChildByName("sprite");
                p.removeChildByName("laizi_flag");
                var flag = null;

                flag = new cc.Sprite(getResPath("xinyangmj/flag/lai_flag.png"));

                var m_size = p.getContentSize();
                if (flag) {
                    flag.setPosition(cc.p(0, m_size.height));
                    flag.setAnchorPoint(cc.p(0, 1));
                    flag.setName("laizi_flag");
                    p.addChild(flag);
                    this._flagDirection(card.pos, flag, m_size);
                    if (card.type == CardType.Card_End) {
                        if (card.pos == 1 || card.pos == 3 || card.pos == 2) {
                            flag.setScale(0.5);
                        } else {
                            flag.setScale(0.8);
                        }
                    }

                    if (card.type == CardType.Card_Out || card.type == CardType.Card_Hu) {
                        flag.setScale(0.47);
                    }
                }
                return;
            }
        } catch (e) {
            Log(this, e);
        }
    },
    //每个方向角标对应
    _flagDirection: function (pos, flag, m_size) {
        if (MJModel.mj_table_view == "2d") {
            if (MJModel.mj_paiban == "vertical" || pos == 2) {
                return;
            }
        }

        if (pos == 1) {
            flag.setPosition(cc.p(0, 17));
            flag.setRotation(-90);
        } else if (pos == 2) {
            flag.setPosition(cc.p(m_size.width, 17));
            flag.setRotation(180);
        } else if (pos == 3) {
            flag.setPosition(cc.p(m_size.width, m_size.height));
            flag.setRotation(90);
        }
    },
    resetGame: function (allClean, gamestart) {
        if (gamestart == undefined) gamestart = false;
        this._super(allClean);
        this._needHandCardCenter = false;
        this._curLaizi = -1;
        this._curLaizipi = -1;
        this._curLaizipi2 = -1;
        this._setLaizi(-1, -1, -1);
        this.hidePaoLayer();

        this.hidePaoOk();
        if (gamestart) {
            this.hidePaoResult();
        }

        this.naozhuangtime = 0;
        this.hideNaoZhuangLayer();
        this.hideNaoZhuangTip();

        this.hideKouPaiLayer();
        for (var i = 0; i < 4; i++) {
            this.cover_hand_card[i] = [];
        }
    },
    handler_server_scene_info_uc: function (hubei_scene, canDelay) {
        var ackGameFree = hubei_scene.GameSence;
        var sceneStatus = ackGameFree.SceneStatus;
        var ispiaoing = false;
        var iskoupaiing = false;
        var isnaozhuanging = false;
        if (sceneStatus == 4) ispiaoing = true;
        if (sceneStatus == 1) iskoupaiing = true;
        if (sceneStatus == 2) isnaozhuanging = true;
        if (ispiaoing) {
            var userpiao = hubei_scene.userpiao;
            for (var i = 0; i < userpiao.length; i++) {
                var choosepiao = userpiao[i];
                if (choosepiao == -1) {
                    if (MJModel.isMyPlayer(i)) {
                        this.showPaoLayer();
                    }
                } else {
                    this.showPaoOk(i, true);
                }
            }
            ackGameFree.SceneStatus = 0;
        } else {
            if (hubei_scene.userpiao)this.showPaoResult(hubei_scene.userpiao);
        }

        if (iskoupaiing) this._needHandCardCenter = true;
        this._super(ackGameFree, canDelay);
        this._setGameType();

        //添加扣的牌
        var coverCard = hubei_scene.CoverCard;
        if (coverCard) {
            var cardData = [];
            if (coverCard.UserCard && coverCard.UserCard.ChangeableCards) {
                for (var i = 0; i < coverCard.UserCard.ChangeableCards.length; i++) {
                    cardData.push(coverCard.UserCard.ChangeableCards[i]);
                }
            }
            if (coverCard.HandCardNums) {
                for (var i = 0; i < coverCard.HandCardNums.length; i++) {
                    var pos = MJModel.getPosBySeatid(i);
                    var cardNums = coverCard.HandCardNums[i];
                    if (MJModel.isMyPlayer(i)) {
                        for (var k = 0; k < cardNums; k++) {
                            this.room_Card.addHandCard(pos, cardData[k]);
                            var cardlength = this.room_Card.hand_card[pos].length;
                            var card = this.room_Card.hand_card[pos][cardlength - 1];
                            card.setValue(0, pos, CardType.Card_End, cardlength - 1);
                            this.cover_hand_card[pos].push(card);
                        }
                        this.room_Card.reflashHandCard(0, true);
                    } else {
                        for (var k = 0; k < cardNums; k++) {
                            this.room_Card.addHandCard(pos, 0);
                            var cardlength = this.room_Card.hand_card[pos].length;
                            var card = this.room_Card.hand_card[pos][cardlength - 1];
                            card.setValue(0, pos, CardType.Card_End, cardlength - 1);
                            this.cover_hand_card[pos].push(card);
                        }
                        this.room_Card.reflashHandCard(pos, true);
                    }

                }
            }
        }

        //
        var curMoPaiPos = -1;
        var curMoPaiCard = ackGameFree.Card;
        for (var i = 0; i < this.room_Card.hand_card.length; i++) {
            if (this.room_Card.hand_card[i].length % 3 == 2) {
                curMoPaiPos = i;
            }
        }

        if (curMoPaiPos != -1) {
            this.room_Info.showDirectionTip(curMoPaiPos);
        }
        else {
            this.room_Info.showDirectionTip(-1);
        }

        var opType = ackGameFree.OpType;
        if ((opType & ActionType.TYPE_LISTEN) == ActionType.TYPE_LISTEN) {
            opType = opType - ActionType.TYPE_LISTEN;
        }

        if (curMoPaiPos != -1) {
            var mopai_seatid = MJModel.getSeatidByPos(curMoPaiPos);
            MJModel.cur_seat = mopai_seatid;

            if (MJModel.isMyPlayer(MJModel.cur_seat)) {
                var is_ok = this.room_Card.removeHandCard(0, curMoPaiCard);
                if (is_ok) this.room_Card.initMoCard(0, curMoPaiCard, true);
                if (opType <= 0) this.myselfOpenOutCard(true);
            }
        }

        if (iskoupaiing) {
            var userkoupai = hubei_scene.userkoupai;
            for (var i = 0; i < userkoupai.length; i++) {
                if (MJModel.isMyPlayer(i) && userkoupai[i] == -1) {
                    this.showKouPaiLayer();
                }
            }
        }

        if (isnaozhuanging) {
            this.showNaoZhuangTip();
            var usernaozhuang = hubei_scene.usernaozhuang;
            for (var i = 0; i < usernaozhuang.length; i++) {
                if (MJModel.isMyPlayer(i) && usernaozhuang[i] == -1) {
                    this.showNaoZhuangLayer();
                } else {
                    var pos = MJModel.getPosBySeatid(i);
                    this.players[pos].setNaozhuangVisible(usernaozhuang[i] == 1);
                }
            }
        }
    },

    _setGameType: function () {
        MJModel.play_id_str = [];
        //甩字胡不可炮胡
        if (MJModel.RoomConfigID.indexOf(1240001) != -1)MJModel.play_id_str.push("四大嘴");
        if (MJModel.RoomConfigID.indexOf(1240002) != -1)MJModel.play_id_str.push("七小嘴");
        if (MJModel.RoomConfigID.indexOf(1240003) != -1)MJModel.play_id_str.push("满堂跑");

        if (MJModel.RoomConfigID.indexOf(1241001) != -1)MJModel.play_id_str.push("点炮输一家");
        if (MJModel.RoomConfigID.indexOf(1241002) != -1)MJModel.play_id_str.push("点炮输三家");

        if (MJModel.RoomConfigID.indexOf(1242001) != -1)MJModel.play_id_str.push("不跑");
        if (MJModel.RoomConfigID.indexOf(1242002) != -1)MJModel.play_id_str.push("跑一");
        if (MJModel.RoomConfigID.indexOf(1242003) != -1)MJModel.play_id_str.push("跑二");
        if (MJModel.RoomConfigID.indexOf(1242004) != -1)MJModel.play_id_str.push("跑三");
        if (MJModel.RoomConfigID.indexOf(1242005) != -1)MJModel.play_id_str.push("自由跑");

        if (MJModel.RoomConfigID.indexOf(1243001) != -1) {
            MJModel.play_id_str.push("闹庄");
            this._showNaoZhuangfen = true;
        }
        if (MJModel.RoomConfigID.indexOf(1243002) != -1)MJModel.play_id_str.push("坎牌");
        if (MJModel.RoomConfigID.indexOf(1243003) != -1)MJModel.play_id_str.push("死门清");
        if (MJModel.RoomConfigID.indexOf(1243004) != -1)MJModel.play_id_str.push("赖子");
        if (MJModel.RoomConfigID.indexOf(1243005) != -1)MJModel.play_id_str.push("清一色翻倍");
        if (MJModel.RoomConfigID.indexOf(1243006) != -1)MJModel.play_id_str.push("七对翻倍");
        if (MJModel.RoomConfigID.indexOf(1243007) != -1)MJModel.play_id_str.push("杠开翻倍");
        if (MJModel.RoomConfigID.indexOf(1243008) != -1)MJModel.play_id_str.push("不带风");
        if (MJModel.RoomConfigID.indexOf(1243009) != -1)MJModel.play_id_str.push("乱三风");

        if (MJModel.RoomConfigID.indexOf(1244001) != -1)MJModel.play_id_str.push("不封顶");
        if (MJModel.RoomConfigID.indexOf(1244002) != -1)MJModel.play_id_str.push("20分封顶");
        if (MJModel.RoomConfigID.indexOf(1244003) != -1)MJModel.play_id_str.push("40分封顶");

        var gameDes = "";
        for (var i = 0; i < MJModel.play_id_str.length; i++) {
            gameDes += MJModel.play_id_str[i];
            if (i != MJModel.play_id_str.length - 1) {
                gameDes += " ";
            }
        }

        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);
    },

    _handler_server_start_xiapao_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.xinyangmj.AckStartPiao", data);

        MJModel.roomState = 1;
        this.resetGame(false, true);
        this.room_Info.setVisible(true);
        if (this.room_Action.actions["yaoqing"]) {
            this.room_Action.actions["yaoqing"].setVisible(false);
        }
        if (this.room_Action.actions["copyshare"]) {
            this.room_Action.actions["copyshare"].setVisible(false);
        }

        if (this.pre_scene) {
            this.pre_scene.removeFromParent(true);
            this.pre_scene = null;
        }

        // if (canDelay) this.room_Tip.ShowGameState(1);
        MJModel.state = MJ_STATUS.MJ_GAME_PLAYING;

        this.showPaoLayer();
    },

    _handler_server_xiapao_ok_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.xinyangmj.AckBroadPiao", data);
        this.showPaoOk(jpacket.chairid, true);
        if (MJModel.isMyPlayer(jpacket.chairid))this.hidePaoLayer();
    },

    _handler_server_xiapao_end_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.xinyangmj.AckBroadAllPao", data);
        this.hidePaoOk();
        this.showPaoResult(jpacket.paoscore);
    },

    //扣牌界面
    koupaiBtnLayer: null,
    //闹庄
    naozhuangLayer: null,
    naozhuangBtnLayer: null,
    init_naozhuang: function () {
        var size = cc.director.getWinSize();
        var uiJson = ccs.load(getResPath("xinyangmj/naozhuangLayer.json"));
        this.naozhuangLayer = uiJson.node;
        this.addChild(this.naozhuangLayer);

        var btnLayer = GetChild(this.naozhuangLayer, "naozhuangbtns");
        btnLayer.removeFromParent();
        setNodeSize(btnLayer, size);
        this.naozhuangBtnLayer = btnLayer;
        this.addChild(this.naozhuangBtnLayer, 100);
        var css = btnLayer.getChildren();
        for (var i in css) {
            var btn = css[i];
            if (btn) {
                btn.addClickEventListener(function (sender, evt) {
                    if (sender.getName() == "naozhuang") {
                        sendNaoZhuang(1);
                    } else if (sender.getName() == "bunao") {
                        sendNaoZhuang(0);
                    }
                });
            }
        }
        this.hideNaoZhuangLayer();
        this.hideNaoZhuangTip();
        GetChild(this.paoLayer, "tips").setPosition(MJConfig.getInfoPos());

        //扣牌
        var koubtnLayer = GetChild(this.naozhuangLayer, "koupaibtns");
        koubtnLayer.removeFromParent();
        setNodeSize(koubtnLayer, size);
        this.koupaiBtnLayer = koubtnLayer;
        this.addChild(this.koupaiBtnLayer, 100);
        var css = koubtnLayer.getChildren();
        for (var i in css) {
            var btn = css[i];
            if (btn) {
                btn.addClickEventListener(function (sender, evt) {
                    if (sender.getName() == "koupai") {
                        sendKouPai(1);
                    } else if (sender.getName() == "bukou") {
                        sendKouPai(0);
                    }
                });
            }
        }
        this.hideKouPaiLayer();
    },
    showNaoZhuangLayer: function () {
        setNodeVis(this.naozhuangBtnLayer, true);
    },
    hideNaoZhuangLayer: function () {
        setNodeVis(this.naozhuangBtnLayer, false);
    },
    showNaoZhuangTip: function () {
        setNodeVis(GetChild(this.naozhuangLayer, "tips"), true);
    },
    hideNaoZhuangTip: function () {
        setNodeVis(GetChild(this.naozhuangLayer, "tips"), false);
    },

    showKouPaiLayer: function () {
        setNodeVis(this.koupaiBtnLayer, true);
    },
    hideKouPaiLayer: function () {
        setNodeVis(this.koupaiBtnLayer, false);
    },

    //下跑
    paoLayer: null,
    paoBtnLayer: null,
    init_pao: function () {
        var size = cc.director.getWinSize();
        var uiJson = ccs.load(getResPath("xinyangmj/paoLayer.json"));
        this.paoLayer = uiJson.node;
        this.addChild(this.paoLayer);

        var btnLayer = GetChild(this.paoLayer, "btns");
        btnLayer.removeFromParent();
        setNodeSize(btnLayer, size);
        setNodeSize(GetChild(this.paoLayer, "tips2"), size);

        this.paoBtnLayer = btnLayer;
        this.addChild(this.paoBtnLayer, 100);
        var css = btnLayer.getChildren();
        for (var i in css) {
            var btn = css[i];
            if (btn) {
                btn.addClickEventListener(function (sender, evt) {
                    sendXiaPao(sender.getTag());
                });
            }
        }
        this.hidePaoLayer();
        this.hidePaoOk();
        this.hidePaoResult();
        GetChild(this.paoLayer, "tips").setPosition(MJConfig.getInfoPos());
    },
    showPaoLayer: function () {
        setNodeVis(this.paoBtnLayer, true);
    },
    hidePaoLayer: function () {
        setNodeVis(this.paoBtnLayer, false);
    },
    showPaoOk: function (seatid, v) {
        var pos = MJModel.getPosBySeatid(seatid);
        var node = GetChild(this.paoLayer, "tips2", "ok" + pos);
        setNodeVis(node, v);
    },
    hidePaoOk: function () {
        for (var i = 0; i < MJModel.Play_num; i++) {
            this.showPaoOk(i, false);
        }
    },
    showPaoResult: function (vs) {
        for (var i = 0; i < vs.length; i++) {
            if (vs[i] == -1 || vs[i] == 255)continue;
            var pos = MJModel.getPosBySeatid(i);
            var node = GetChild(this.paoLayer, "tips", "tip" + pos);
            node.setTexture(getResPath("xinyangmj/pao/tip_" + vs[i] + ".png"));
            setNodeVis(node, true);
        }
    },
    hidePaoResult: function () {
        for (var i = 0; i < MJModel.Play_num; i++) {
            var node = GetChild(this.paoLayer, "tips", "tip" + i);
            setNodeVis(node, false);
        }
    },

    //移除一张盖牌
    removeCoverCard: function (pos) {
        var card = null;

        for (var i = this.cover_hand_card[pos].length - 1; i >= 0; i--) {
            var _card = this.cover_hand_card[pos][i];
            if (true) {
                card = _card;
                this.cover_hand_card[pos].splice(i, 1);
                break;
            }
        }

        return card;
    },

    handler_server_peng_kang_bc: function (data, canDelay) {
        this.room_Tip.showTextTip("");
        this.check_tip_operate_card(0, 0);
        var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);
        this.unschedule(this.autoOutCardTimeOut);
        this.unschedule(this.autoHuCardTimeOut);

        var seatid = ackBcOpResult.ChairID;
        var out_seatid = ackBcOpResult.OutCardChairID;
        var OpType = ackBcOpResult.OpType;
        var OpType2 = ackBcOpResult.OpType2;
        var card = ackBcOpResult.Card;
        var cardList = ackBcOpResult.OpCards;
        var removeHandcards1 = ackBcOpResult.cardDel;
        var specialCard = ackBcOpResult.SpecialCard;
        var LaiziNum = ackBcOpResult.LaiziNum;
        var fz_hu_type = ackBcOpResult.fz_hu_type;


        var scores = ackBcOpResult.Score;
        this.handler_gang_scores(scores, OpType, OpType2, canDelay);

        if (MJModel.isMyPlayer(seatid)) {
            if (this.room_Action) this.room_Action.setOperator(-1);
        }

        if (this.room_Action_video) this.room_Action_video.reset();

        var pos = MJModel.getPosBySeatid(seatid);
        var out_pos = MJModel.getPosBySeatid(out_seatid);

        this.players[pos].setTimeOut(false);
        this.players[pos].setOffline(false);
        if (MJModel.outtimeplayers.length > 1 && MJModel.outtimeplayers.indexOf(seatid) != -1) {
            MJModel.outtimeplayers.splice(MJModel.outtimeplayers.indexOf(seatid), 1);
        }

        if ((OpType & ActionType.TYPE_PASS) == ActionType.TYPE_PASS) {

            if (MJModel.isMyPlayer(seatid) && seatid == out_seatid && this.room_Card.isDuoPai(0))//如果是我自己摸的牌  自己过 则放开选牌功能
            {
                this.room_Info.showTime(MJModel.outCardTime);
                MJModel.cur_seat = seatid;
                this.myselfOpenOutCard(true);
            }

            return;
        }

        var needRemoveOutCard = false;
        var needOpenOutCard = false;
        var removeHandcards2 = [];
        if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
            var ok = this.room_Card.addPengCard(pos, PengType.Peng_AnKang, card, out_pos, OpType,specialCard,LaiziNum, cardList);
            if (!ok)return;
            //this.room_Card.removeHandCard(pos, card, 4);
            removeHandcards2.push(card);
            removeHandcards2.push(card);
            removeHandcards2.push(card);
            removeHandcards2.push(card);
        }
        else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
            this.room_Card.addPengCard(pos, PengType.Peng_Peng, card, out_pos, OpType,specialCard,LaiziNum, cardList);
            this.room_Card.removeHandCard(pos, card, 2);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
            var ok = this.room_Card.addPengCard(pos, PengType.Peng_Kang, card, out_pos, OpType,specialCard, LaiziNum,cardList);
            if (!ok)return;
            //this.room_Card.removeHandCard(pos, card, 3);
            removeHandcards2.push(card);
            removeHandcards2.push(card);
            removeHandcards2.push(card);
            needRemoveOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
            var ok = this.room_Card.changPengCard(pos, PengType.Peng_Kang, card, out_pos, OpType,specialCard);
            if (!ok)return;
            //this.room_Card.removeHandCard(pos, card, 1);
            removeHandcards2.push(card);
        }
        else if ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
            this.room_Card.addPengCard(pos, PengType.Chi_L, card, out_pos, OpType,specialCard, LaiziNum,cardList);
            //this.room_Card.removeHandCard(pos, card + 1, 1);
            //this.room_Card.removeHandCard(pos, card + 2, 1);
            removeHandcards2.push(card + 1);
            removeHandcards2.push(card + 2);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
            this.room_Card.addPengCard(pos, PengType.Chi_M, card, out_pos, OpType,specialCard,LaiziNum, cardList);
            //this.room_Card.removeHandCard(pos, card - 1, 1);
            //this.room_Card.removeHandCard(pos, card + 1, 1);
            removeHandcards2.push(card - 1);
            removeHandcards2.push(card + 1);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
            this.room_Card.addPengCard(pos, PengType.Chi_R, card, out_pos, OpType,specialCard, LaiziNum,cardList);
            //this.room_Card.removeHandCard(pos, card - 1, 1);
            //this.room_Card.removeHandCard(pos, card - 2, 1);
            removeHandcards2.push(card - 1);
            removeHandcards2.push(card - 2);
            needRemoveOutCard = true;
            needOpenOutCard = true;
        }
        else if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
            this.room_Info.showDirectionTip(-1);
            this.room_Info.stopTime();
            MJModel.canTouchCard = false;
            //抢弯杠
            if ((OpType2 && OpType2 == 5)) {
                this.room_Card.changeWanGang(out_pos, PengType.Peng_Peng, card);
                if (this.room_Card.isDuoPai(out_pos)) this.room_Card.removeHandCard(out_pos, card, 1);
            }
            //抢直杠
            if ((OpType2 && OpType2 == 11)) {
                var ok = this.room_Card.changeZhiGang(out_pos, PengType.Peng_Peng, card);
                if (ok) {
                    this.room_Card.initMoCard(out_pos, (out_pos == 0 || MJModel.isOnVideo ) ? card : 0);
                    this.room_Card.initMoCard(out_pos, (out_pos == 0 || MJModel.isOnVideo ) ? card : 0);
                    this.room_Card.initMoCard(out_pos, (out_pos == 0 || MJModel.isOnVideo ) ? card : 0);
                    this.room_Card.reflashHandCard(out_pos, true, false);
                }
            }

            if ((OpType2 && OpType2 == 5) || (OpType2 && OpType2 == 11)) {
                //避免双抢杠的时候 会出两次牌
                if (this.room_Card.out_card[out_pos].length == 0 || this.room_Card.out_card[out_pos][this.room_Card.out_card[out_pos].length - 1].getValue() != card) {
                    this.room_Card.addOutCard(out_pos, card);
                }
            }
        }

        if (fz_hu_type == null || fz_hu_type == undefined) fz_hu_type = 0;
        if (MJModel.isOnVideo) fz_hu_type = 0;
        if (fz_hu_type) {
            for (var i = 0; i < fz_hu_type; i++) {
                var covercard = this.removeCoverCard(pos);
                var covercard2 = removeCardByCard(covercard, this.room_Card.hand_card[pos]);
                if (covercard2) {
                    try {
                        covercard2.removeFromParent(true);
                    } catch (e) {
                    }
                }
                this.room_Card.reflashHandCard(pos, true, false, true);
            }
        }

        if (removeHandcards2.length > 0) {
            if (removeHandcards1 && removeHandcards1.length > 0) {
                for (var i = 0; i < removeHandcards1.length; i++) {
                    this.room_Card.removeHandCard(pos, removeHandcards1[i], 1);
                }
            } else {
                // for (var i = 0; i < removeHandcards2.length; i++) {
                //     this.room_Card.removeHandCard(pos, removeHandcards2[i], 1);
                // }
                for (var i = 0; i < removeHandcards2.length - fz_hu_type; i++) {
                    this.room_Card.removeHandCard(pos, removeHandcards2[i], 1);
                }
            }
        }

        if (MJModel.isMyPlayer(seatid)) {
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            MJModel.isAutoOutCard = false;
            this.room_Card.setAutoOutCard(false);
        }

        if (needRemoveOutCard) {
            MJModel.cur_seat = seatid;
            var isok = this.room_Card.removeOutCard(out_pos, card, canDelay);
            this.room_Card.setCurCardTip(false);
            if (isok == false) {
                try {
                    ERROR(this, "removeOutCard error card:" + card + "lastoutcard:" + this.room_Card.out_card[out_pos][this.room_Card.out_card[out_pos].length - 1].getValue());
                } catch (e) {
                    ERROR(this, "needRemoveOutCard" + e);
                }
                this.reConnect("", false);
            }
        }

        if (needOpenOutCard) {
            this.room_Info.showDirectionTip(pos);
            if (MJModel.isMyPlayer(seatid)) {
                this.myselfOpenOutCard();
            }
        }

        var player = MJModel.players[seatid];
        if (player && canDelay) {

            var effect = "gang";
            if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                var zimo = this.room_Card.isDuoPai(pos);
                effect = "hu";
                if (zimo) {
                    effect = "zimo";
                }

                if (OpType2 == 5 || OpType2 == 11) {
                    effect = "qiangganghu";
                }
            }
            else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                effect = "peng";
            }
            else if ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI || (OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                effect = "chi";
            }

            this.handler_op_sound(pos, player.sex, OpType, OpType2, effect);
            this.handler_op_effect(pos, out_pos, player.sex, OpType, OpType2, effect);
        }

        this.room_Card.checkCardSafe();
    },

    handler_server_game_end_bc: function (hubeiGameend, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            var ackGameEnd = hubeiGameend.gameend;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            this.room_Card.hideOutCardBtn();
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);
            this.room_Info.stopTime();

            var showhandcard = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var showendstate = cc.callFunc(function () {
                if (state == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
                else {
                }
            });

            var showendscore = cc.callFunc(function () {
                self.room_Tip.reset();
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var tongbumoney = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var gameendreset = cc.callFunc(function () {
                self.room_Action.setReady2Visible(false);
                try {
                    var result = new MJResult_XinYang();
                    result.updateContentView(hubeiGameend);
                    result.setName("reset_remove");
                    self.addChild(result, 100000);
                } catch (e) {
                    cc.log("game end:", e);
                    self.room_Action.setReady2Visible(true);
                }
            });

            if (MJModel.isOnVideo && canDelay == false) {
                this.runAction(cc.sequence(tongbumoney, cc.delayTime(0), gameendreset));
                return;
            }
            if (state == 1) {
                this.runAction(cc.sequence(cc.delayTime(0), showhandcard, cc.delayTime(1), showendscore, cc.delayTime(0), tongbumoney, showendstate, cc.delayTime(1), gameendreset));
            } else {
                this.runAction(cc.sequence(cc.delayTime(0), showhandcard, cc.delayTime(1), showendscore, cc.delayTime(0), tongbumoney, gameendreset));
            }
        } catch (e) {
            ERROR(this, e);
        }
    },

    timeEnd: function (dt) {
        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    },

    _handler_game_record: function (data, canDelay) {
        //-----新总结算界面
        cc.log("------big End");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var pkgId = this._pkg_id;
        var gameType = "信阳麻将";
        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];
        gameType += " · " + MJModel.base_money + "分底";

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        //var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;

        var max_score = 0;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            if (recoreInfo.totalscore > max_score) {
                max_score = recoreInfo.totalscore;
            }
        }

        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            //var playerRecord = totalRecord.player_records[i];
            var player = MJModel.players[i];
            var arrStr = ["坐庄次数", "胡牌次数", "超时次数"];
            //次数
            var arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.outtime_num];
            if (player && player.uid != -1 && player.uid != 0) {
                addX = 39 + (i * 302);
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var isWin = false;
                if (max_score > 0 && recoreInfo.totalscore == max_score) {
                    isWin = true;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, isWin, _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner, recoreInfo.dissState);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }

            if (recoreInfo.totalscore != 0) {
                has_result = true;
            }

        }
        bigResult.refresh(PlayerNumber);
        if (has_result) {
            if ((MJModel.mj_roomType == 0 && PlayerNumber != 4) || (MJModel.mj_roomType == 1 && PlayerNumber != 3) || (MJModel.mj_roomType == 2 && PlayerNumber != 2)) {
                ERROR(this, "pId:" + pkgId + "type:" + MJModel.mj_roomType + "num:" + PlayerNumber + "d:" + data);
            }
        }
        this.release();
    },

    test: function (dt) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;
        if (tempCount == 5 && true) {
            var packet = {
                "gameend": {
                    "UserCard": [{
                        "ChangeableCardsLen": 4,
                        "ChangeableCards": [7, 9, 24, 25],
                        "FixedCardsLen": 3,
                        "stFixedCards": [{
                            "CardData": 36,
                            "state": 1,
                            "chairID": 2,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 19, "state": 4, "chairID": 0, "OpCards": [], "LaiziNum": null}, {
                            "CardData": 5,
                            "state": 1,
                            "chairID": 3,
                            "OpCards": [],
                            "LaiziNum": null
                        }],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 7,
                        "ChangeableCards": [1, 4, 7, 8, 9, 50, 67],
                        "FixedCardsLen": 2,
                        "stFixedCards": [{
                            "CardData": 17,
                            "state": 2,
                            "chairID": 2,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 52, "state": 1, "chairID": 2, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 7,
                        "ChangeableCards": [3, 5, 7, 21, 41, 49, 51],
                        "FixedCardsLen": 2,
                        "stFixedCards": [{
                            "CardData": 65,
                            "state": 1,
                            "chairID": 1,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 35, "state": 1, "chairID": 1, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 4,
                        "ChangeableCards": [33, 34, 35, 38],
                        "FixedCardsLen": 3,
                        "stFixedCards": [{
                            "CardData": 24,
                            "state": 1,
                            "chairID": 1,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 37, "state": 2, "chairID": 0, "OpCards": [], "LaiziNum": null}, {
                            "CardData": 39,
                            "state": 1,
                            "chairID": 2,
                            "OpCards": [],
                            "LaiziNum": null
                        }],
                        "stFenZhangCard": null
                    }],
                    "Score": [0, 0, 0, 0],
                    "EndState": 1,
                    "EndGangInfo": [{
                        "Gang": [{"GangType": 4, "GangCard": 19}, {"GangType": 64, "GangCard": 37}],
                        "TotalGangScore": 0
                    }, {"Gang": [{"GangType": 2, "GangCard": 17}], "TotalGangScore": 0}, {
                        "Gang": [{
                            "GangType": 64,
                            "GangCard": 17
                        }], "TotalGangScore": 0
                    }, {"Gang": [{"GangType": 2, "GangCard": 37}], "TotalGangScore": 0}],
                    "faninfo": [{
                        "chairid": 0,
                        "SpecialType": 1,
                        "FanNum": 0,
                        "addfan": [{
                            "AddType": 7,
                            "AddNum": 2,
                            "AddType2": 0,
                        },{
                            "AddType": 7,
                            "AddNum": 2,
                            "AddType2": 1,
                        },{
                            "AddType": 7,
                            "AddNum": 2,
                            "AddType2": 2,
                        },{
                            "AddType": 3,
                            "AddNum": 2,
                            "AddType2": 0,
                        },{
                            "AddType": 4,
                            "AddNum": 2,
                            "AddType2": 0,
                        },{
                            "AddType": 5,
                            "AddNum": 2,
                            "AddType2": 0,
                        }],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 1,
                        "SpecialType": 2,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 2,
                        "SpecialType": 0,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {"chairid": 3, "SpecialType": 0, "FanNum": 0, "addfan": [], "hucard": 0, "DianPao": []}],
                    "money": [100000, 100000, 100000, 100000],
                    "ts": null,
                    "md5": []
                }, "userpiao": [0, 2, 1, 3], "usernaozhuang": [0, 2, 1, 3]
            };

            this.handler_server_game_end_bc(packet, true);
        }
    },
});

var HuType = {
    HU_INVALID: 0,
    HU_ZIMO: 1,
    HU_PAOHU: 2,
    HU_HeiMo: 2,
    Hu_RuanMo: 1,
    HU_DIANPAO: 3,
    HU_BEIZIMO: 4,
    HU_QIANG_GANG: 5,
    HU_BEI_QIANG_GANG: 6,
    HU_YI_PAO_DUO_XIANG: 7,
    HU_GANG_SHANG_HUA: 8,
    HU_GANG_HOU_PAO: 9,
};

var AddFanType = {
    2: "十张",
    3: "八张",
    4: "牌钱",
    5: "小跑",
    // 6: "三风",
    7: "九张涨",
    9: "中5",
    10: "连6",
    11: "三七赢",
    12: "清缺",
    13: "三七将",
    14: "清一色",
    15: "坎牌",
    17: "平胡",
    24: "杠上开花",
    30: "门清",
    36: "七对",
    39: "一条龙",
    44: "独赢",
    48: "夹子",
    49: "断门",
    51: "三风1",
    52: "三风2",
    53: "三风3",
    54: "三风4",
};

var MJResult_XinYang = MJCommonResult.extend({
    updateContentView: function (ackGameEndJS) {
        this.ackGameEnd = ackGameEndJS.gameend;
        this.ackGameEndJS = ackGameEndJS;
        //输赢标志
        var seatId = MJModel.seatid;
        var score = this.ackGameEnd.Score[seatId];
        var effectName = "lose";
        if (score > 0) {
            effectName = "win";
        }
        this._win_effect(effectName);

        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);

        var itemHeight = 120;

        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;

            var countY = m;

            if (MJModel.mj_roomType == 1) {
                if (pos == 2) {
                    continue;
                }
            }

            if (MJModel.mj_roomType == 2) {
                if (pos == 1 || pos == 3) {
                    continue;
                }

                if (pos == 0) {
                    countY = 1;
                } else if (pos == 2) {
                    countY = 2;
                }
            }

            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 495 - count * itemHeight;
            var startX = 40;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX + 60, startY + 55));
            this.bgSpr.addChild(headLayer, 10);

            //上排牌 杠
            var ganghuLayer = this.createGangHuLayer(seatid);
            this.bgSpr.addChild(ganghuLayer, 10);
            ganghuLayer.setPosition(cc.p(startX + 230, startY + 65));

            //下排牌
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX + 0, startY));
            this.bgSpr.addChild(handCardLayer);

            this.createSpecialHuTip(startX + 785, startY + 40, seatid);
            //this.createSpecialHuTip(startX + 900, startY + 40, seatid);

            // 输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX + 1100, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            //中马列表
            var maLayer = this.createMaLayer(seatid);
            if (maLayer) {
                maLayer.setPosition(cc.p(startX + 845, startY + 85));
                this.bgSpr.addChild(maLayer);
            }
            count++;
        }
    },
    getXiaPao: function (v) {
        if (v == 0)return "不跑";
        if (v == 1)return "跑一";
        if (v == 2)return "跑二";
        if (v == 3)return "跑三";
    },
    createGangHuLayer: function (seatid) {
        var layer = new cc.Layer();
        var x = 0;
        var y = 0;
        var addFanType = [];
        if (this.ackGameEndJS.userpiao.length > seatid && this.ackGameEndJS.userpiao[seatid] != -1) {
            addFanType.push(this.getXiaPao(this.ackGameEndJS.userpiao[seatid]));
        }
        var addfanarray1 = [];//四大嘴
        var addfanarray2 = [];//七小嘴
        var addfanarray3 = [];//满堂跑
        if (this.ackGameEnd.faninfo.length > seatid) {
            var specialType = this.ackGameEnd.faninfo[seatid].SpecialType;
            switch (specialType) {
                case HuType.HU_ZIMO:
                case HuType.HU_PAOHU:
                case HuType.HU_QIANG_GANG:
                case HuType.HU_GANG_SHANG_HUA:
                    var addfan = this.ackGameEnd.faninfo[seatid].addfan;
                    for (var i = 0; i < addfan.length; i++) {
                        var add_fan = addfan[i];
                        var add_type = add_fan.AddType;
                        var add_value = add_fan.AddNum;
                        var add_type2 = add_fan.AddType2;
                        if (AddFanType[add_type]) {
                            // addFanType.push(AddFanType[add_type]);
                            if (add_type2 == 0) {
                                addfanarray1.push(AddFanType[add_type]);
                            } else if (add_type2 == 1) {
                                addfanarray2.push(AddFanType[add_type]);
                            } else if (add_type2 == 2) {
                                addfanarray3.push(AddFanType[add_type]);
                            }
                        }
                    }
                    break;
            }
        }
        if (addfanarray1.length != 0) {
            addFanType.push("四大嘴:");
            for (var i in addfanarray1) {
                addFanType.push(addfanarray1[i]);
            }
        }

        if (addfanarray2.length != 0) {
            addFanType.push("七小嘴:");
            for (var i in addfanarray2) {
                addFanType.push(addfanarray2[i]);
            }
        }

        if (addfanarray3.length != 0) {
            addFanType.push("满堂跑:");
            for (var i in addfanarray3) {
                addFanType.push(addfanarray3[i]);
            }
        }

        for (var i = 0; i < addFanType.length; i++) {
            var fanType = new cc.LabelTTF(addFanType[i], "Arial", 20);
            fanType.setColor(this.leftColor);
            fanType.setAnchorPoint(cc.p(0, 0));
            fanType.setPosition(cc.p(x, y + 10));
            layer.addChild(fanType);
            x += fanType.getContentSize().width + 5;
        }
        return layer;
    },

    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var path = "";
            var ss = 1;
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5天和 6地和 7抢杠胡 8杠上开花 9花上添花
            switch (fanInfo.SpecialType) {
                case HuType.HU_ZIMO:
                    path = "RoomMJ/result2/zi_mo_icon.png";
                    break;
                case HuType.HU_PAOHU:
                    path = "RoomMJ/result2/pao_hu_icon.png";
                    break;
                case HuType.HU_DIANPAO:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                case HuType.HU_QIANG_GANG:
                    path = "RoomMJ/result2/qiang_gang_icon.png";
                    ss = 0.8;
                    break;
                case HuType.HU_BEI_QIANG_GANG:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                default:
                    break;
            }
            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setPosition(cc.p(startX, startY));
                typeSprite.setScale(ss);
                this.bgSpr.addChild(typeSprite);
            }
        }
    },
    //输赢分
    createScoreLayer: function (seatid) {
        var layer = new cc.Layer();

        var names = ["总分", "闹庄分"];
        var values = [0, 0];

        if (this.ackGameEnd.Score && this.ackGameEnd.Score.length > seatid) values[0] = this.ackGameEnd.Score[seatid];
        if (this.ackGameEndJS.usernaozhuang && this.ackGameEndJS.usernaozhuang.length > seatid) values[1] = this.ackGameEndJS.usernaozhuang[seatid];

        var width = 30;
        var dx = 130 + 40;
        var scorenum = 1;
        if (MJModel.mj_table._showNaoZhuangfen) {
            scorenum = 2;
        }
        for (var i = 0; i < scorenum; i++) {
            var nameLabel = new cc.LabelTTF(names[i], "Arial", 24);
            nameLabel.setColor(this.leftColor);
            nameLabel.setAnchorPoint(cc.p(0.5, 0));
            nameLabel.setPosition(cc.p(width - dx * i, 20));
            layer.addChild(nameLabel);

            var score = values[i];
            var path = getResPath("RoomMJ/result2/result_small_label_lose.png");
            if (score > 0) {
                path = getResPath("RoomMJ/result2/result_small_label_win.png");
            }
            var scoredes = ":";
            if (score == 0) scoredes = "";
            var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), path, 29, 37, '0');
            scoreLabel.setAnchorPoint(cc.p(0.5, 0.5));
            scoreLabel.setPosition(cc.p(width - dx * i, -10));
            scoreLabel.setName("scoreLabel");
            layer.addChild(scoreLabel);
            scoreLabel.setScale(0.7);
        }

        return layer;
    },
});