loadProtoFile("proto/xixiangameproto.proto");


var HuType = {
    HU_INVALID: 0,
    HU_ZIMO: 1,
    HU_PAOHU: 2,
    HU_HeiMo: 2,
    Hu_RuanMo: 1,
    HU_DIANPAO: 3,
    HU_BEIZIMO: 4,
    HU_QIANG_GANG: 5,
    HU_BEI_QIANG_GANG: 6,
    HU_YI_PAO_DUO_XIANG: 7,
    HU_GANG_SHANG_HUA: 8,
    HU_GANG_HOU_PAO: 9,
};
var AddFanType = {
    HU_FAN_TYPE_PIHU: 0,          //屁胡
    HU_FAN_TYPE_YITIAOLONG: 1,          //一条龙
    HU_FAN_TYPE_QINGYISE: 2,          //清一色
    HU_FAN_TYPE_FENGYISE: 3,          //风一色
    HU_FAN_TYPE_7DUI: 4,            //7对
    HU_FAN_TYPE_HAOHUA7DUI: 5,          //豪华7对
    HU_FAN_TYPE_BIANKANDIAO: 6,        //边坎吊
    HU_FAN_TYPE_13YAO: 7,            //13幺
};

var AddFanTypeArray = [
    AddFanType.HU_FAN_TYPE_PIHU,          //屁胡
    AddFanType.HU_FAN_TYPE_YITIAOLONG,          //一条龙
    AddFanType.HU_FAN_TYPE_QINGYISE,          //清一色
    AddFanType.HU_FAN_TYPE_FENGYISE,          //风一色
    AddFanType.HU_FAN_TYPE_7DUI,            //7对
    AddFanType.HU_FAN_TYPE_HAOHUA7DUI,          //豪华7对
    AddFanType.HU_FAN_TYPE_BIANKANDIAO,        //边坎吊
    AddFanType.HU_FAN_TYPE_13YAO,            //13幺
];
var ActionTypeLingQiu =
{
    TYPE_MUST_HU: 0x200000,
}
var AddFanNameArray = {
    17: "平胡",
    30: "门清",
    16: "碰碰胡",
    14: "清一色",
    39: "一条龙",
    36: "七小对",
    27: "龙七对",
    61: "豪华龙七对",
    19: "天胡",
    20: "天听",
    24: "杠上花",
};

var selfCMD = {
    SERVER_HUBEI_LAIZIINFO: 5029, //
    SERVER_START_PIAO: 5024, //
    SERVER_BROAD_PIAO: 5022, //
    CLIENT_MJ_CHOOSE_PIAO: 1108,//
};

var MJTable_XiXian = MJTable.extend({
    tag: "MJTable_XiXian",
    _curLaizi: -1,
    _curLaizipi: -1,
    _curLaizipi2: -1,
    _curLaizi_bg: null,
    isRecordShow: false,
    _pkg_id: 0,
    maxQuan: 1,
    _huaCard: [[], [], [], []],
    isForceTing: false,
    _huaValues: [],
    _piaoWaitLayer: null,
    _piaoLayer: null,
    _piaoState: [0, 0, 0, 0],
    _piaoResult: [],
    _isJieSan: false,
    _isWanNengPai: false,
    niaoTime: 0,
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        MJModel.mj_suport_fangyan = 0;
        MJModel.outCardEffect_style = 1;

        MJModel.mj_bg_use = 1;
        MJModel.mj_suport_change_bg = 1;
        MJModel.toupiaoTipsType = 1;
        MJModel.chi_layout = 3;
        MJModel.mj_touch_tip = 1;
        MJModel.isOutCard = true;
        MJModel.mj_chat_style = 5;
        MJModel.mj_public_style = 1;
        MJModel.mj_card_lib_type = 1;

        MJModel.mj_gps_type = 1;
        MJModel.mj_double_click_style = 1;

        MJModel.mj_font = "jianjie";
        MJModel.mj_fontSize = "dahao";
        MJModel.mj_style = "huaijiu";
        MJModel.yinyue = "jingdian";
        MJModel.mj_table_view = "25d";
        MJModel.has_hu_layout = 0;
        MJModel.shareType = 1;
        MJModel.needTipWhenPass = 1;
        MJModel.danjichupai = 0;
        MJModel.isOpenFangZuoBi = false;   //false :关闭， true:打开
        this.isForceTing = false;
        this._huaValues = [0x41, 0x42, 0x43, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x60];
        this.mj_roomType = 0;
        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];

            MJModel.mj_roomType = 0;
            this.mj_roomType = 0;
            if (this._pkg_id == 3385 || this._pkg_id == 3247) { //4人
                MJModel.mj_roomType = 0;
                this.mj_roomType = 0;
            }
            if (this._pkg_id == 3386 || this._pkg_id == 3248) { //3人
                MJModel.mj_roomType = 1;
                this.mj_roomType = 1;
            }
            if (this._pkg_id == 3387 || this._pkg_id == 3249) { //2人
                MJModel.mj_roomType = 2;
                this.mj_roomType = 2;
            }
        } catch (e) {
            Log(this, e);
        }

        var danjichupai = cc.sys.localStorage.getItem("danjichupai");
        if (danjichupai) MJModel.danjichupai = danjichupai;

        this._init_extend();
        this._super();
        this._init_ui();
        this._update_action();
        //this.schedule(this.test, 1.0);
    },
    _init_ui: function () {
        var self = this;
        var self = this;
        {
            var btn = new ccui.Button();
            btn.loadTextures(getResPath("RoomMJ/action/pass1.png"), getResPath("RoomMJ/action/pass1.png"), "");
            this.room_Action.actions["quxiaobaoting"] = btn;
            btn.setName("quxiaobaoting");
            btn.addClickEventListener(function (sender, evt) {
                self.room_Action.btnCallback(sender);
            });
            btn.setVisible(false);
            this.room_Action.addChild(btn);
            this.room_Action.opBtns.push(btn);
        }

        {
            var btn = new ccui.Button();
            btn.loadTextures(getResPath("RoomMJ/action/baoting1.png"), getResPath("RoomMJ/action/baoting1.png"), "");
            this.room_Action.actions["baoting"] = btn;
            btn.setName("baoting");
            btn.addClickEventListener(function (sender, evt) {
                self.room_Action.btnCallback(sender);
            });
            btn.setVisible(false);
            this.room_Action.addChild(btn);
            this.room_Action.opBtns.push(btn);
        }
    },
    _update_action: function () {

    },

    getMjTypePath: function () {
        return getResPath("xixian/mj_title.png");
    },

    updateBg: function (isInit) {
        if (isInit == undefined)isInit = false;
        var size = cc.director.getWinSize();
        if (this.bg == null) {
            this.bg = new ccui.ImageView(getResPath(this.getBgStr()));
            this.bg.setAnchorPoint(cc.p(0.5, 0.5));
            this.bg.setContentSize(size);
            this.bg.setScale9Enabled(true);
            this.bg.setPosition(size.width / 2, size.height / 2);
            this.addChild(this.bg, -100);
        } else {
            this.bg.loadTexture(getResPath(this.getBgStr()));
        }
        //简洁版本的幺鸡牌换了
        if (this.isNewCards()) {
            Utils.addCardSprites(__String.createWithFormat("xixian/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));
        } else {
            Utils.addCardSprites(__String.createWithFormat("RoomMJ/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));
        }

        if (MJModel.mj_roomType == 2) {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config_2ren.json" : "RoomMJ/config/card_config2d_2ren.json");
        } else {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config.json" : "RoomMJ/config/card_config2d.json");
        }

        if (isInit)return;

        this.room_Card.reflashAllCardUI();
        for (var i = 0; i < 4; i++) {
            this.players[i].setPosition(MJConfig.getPlayerPos(i));
            this.players[i].reflashNameMoneyPosition();
        }
        if (this.room_Info)this.room_Info.reflash();
    },
    getBgStr: function () {
        return __String.createWithFormat("xixian/bgs/%1_%2.png", MJModel.mj_style, MJModel.mj_table_view);
    },
    isNewCards: function () {
        if (MJModel.mj_font == "jianjie" && MJModel.mj_fontSize == "dahao" && MJModel.mj_table_view == "25d" && MJModel.mj_paiban == "horizontal") {
            return true;
        }
        return false;
    },

    onEnter: function () {
        this._super();
    },

    isSupportPublicCard: function () {
        return false;
    },

    initUtils: function () {

    },
    initMJDialogs: function () {
        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(false);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("方言");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };
    },
    initMJPlayer: function () {
        MJPlayer.prototype.setTianTingIcon = function (v) {
            if (!this.liangpai_flag) {
                this.liangpai_flag = new cc.Sprite(getResPath("RoomMJ/tingpai_flag.png"));
                this.liangpai_flag.setVisible(false);
                if (this.pid == 1) {
                    this.liangpai_flag.setPosition(cc.p(0, 30));
                }
                else {
                    this.liangpai_flag.setPosition(cc.p(this.m_size.width, 30));
                }
                this.addChild(this.liangpai_flag, 1);
            }
            if (this.liangpai_flag) {
                this.liangpai_flag.setVisible(v);
            }
        };
        var superreset = MJPlayer.prototype.reset;
        MJPlayer.prototype.reset = function (allClean, isGameStart) {
            superreset.call(this);
            this.setTianTingIcon(false);
        };
    },
    initMJVideo: function () {
        var super_mjvideo_ctor = MJVideo.prototype.ctor;
        MJVideo.prototype.ctor = function () {
            super_mjvideo_ctor.call(this);
            MJModel.roomCode = this.room_code;
        };
    },
    initMJPreTable: function () {

    },

    initMJTips: function () {

    },
    _init_extend: function () {
        this.initMJTips();
        this.initMJVideo();
        this.initMJCard();
        this.initMJPublic();
        this.initMJConfig();
        this.initMJAction();
        this.initMJInfo();
        this.initUtils();
        this.initMJDialogs();
        this.initMJPlayer();
        this.initMJPreTable();
        var self_table = this;
    },
    initMJInfo: function () {
    },
    initMJCard: function () {
        var self_table = this;

        MJCards.prototype.fapai = function () {
            var number = 4;
            if (MJModel.mj_roomType == 1) {
                number = 3;
            } else if (MJModel.mj_roomType == 2) {
                number = 2;
            }

            var fapaiCallback = cc.callFunc(function () {
                //Sound.getInstance().playEffect(getResPath("RoomMJ/sound/fapai.mp3"));
            });

            var self = this;
            var zhuaPaiOver7 = cc.callFunc(function () {
                self.removePublicCardByNums(7);
                Sound.getInstance().playEffect(getResPath("RoomMJ/sound/fapai.mp3"));
            });

            var zhuaPaiOver6 = cc.callFunc(function () {
                self.removePublicCardByNums(6);
                Sound.getInstance().playEffect(getResPath("RoomMJ/sound/fapai.mp3"));
            });
            var zhuaPaiOver5 = cc.callFunc(function () {
                Sound.getInstance().playEffect(getResPath("RoomMJ/sound/fapai.mp3"));
                self.removePublicCardByNums(5);
            });
            var zhuaPaiOver4 = cc.callFunc(function () {
                self.removePublicCardByNums(4);
                Sound.getInstance().playEffect(getResPath("RoomMJ/sound/fapai.mp3"));
            });
            var zhuaPaiOver3 = cc.callFunc(function () {
                Sound.getInstance().playEffect(getResPath("RoomMJ/sound/fapai.mp3"));
                self.removePublicCardByNums(3);
            });
            var zhuaPaiOver2 = cc.callFunc(function () {
                Sound.getInstance().playEffect(getResPath("RoomMJ/sound/fapai.mp3"));
                self.removePublicCardByNums(2);
            });

            var zhuaPaiOver1 = cc.callFunc(function () {
                Sound.getInstance().playEffect(getResPath("RoomMJ/sound/fapai.mp3"));
                self.removePublicCardByNums(1);
            });

            var dl = 0;
            var ddl = 0.1;
            var beginpos = MJModel.getPosBySeatid(MJModel.banker_seatid);
            var count = [0, 0, 0, 0];
            var loop = 2;
            if (this.hand_card[0].length >= 16)loop = 3;
            for (var i = 0; i < loop; i++) {
                for (var j = beginpos; j < beginpos + this.hand_card.length; j++) {
                    var pos = j;
                    if (pos > 3)pos -= 4;

                    if (this.hand_card[pos].length == 0)continue;

                    var left_cards = this.hand_card[pos].length - count[pos];
                    if (left_cards < 0)continue;

                    var dd = 7;
                    if (left_cards <= 7)dd = left_cards;

                    for (var k = count[pos]; k < count[pos] + dd; k++) {
                        var card = this.hand_card[pos][k];
                        card.setVisible(false);
                        card.runAction(cc.sequence(cc.delayTime(dl + 0.1), cc.show()));
                    }
                    if (dd == 7) {
                        this.runAction(cc.sequence(cc.delayTime(dl), fapaiCallback, zhuaPaiOver7));
                    } else if (dd == 6) {
                        this.runAction(cc.sequence(cc.delayTime(dl), fapaiCallback, zhuaPaiOver6));
                    } else if (dd == 5) {
                        this.runAction(cc.sequence(cc.delayTime(dl), fapaiCallback, zhuaPaiOver5));
                    } else if (dd == 4) {
                        this.runAction(cc.sequence(cc.delayTime(dl), fapaiCallback, zhuaPaiOver4));
                    } else if (dd == 3) {
                        this.runAction(cc.sequence(cc.delayTime(dl), fapaiCallback, zhuaPaiOver3));
                    } else if (dd == 2) {
                        this.runAction(cc.sequence(cc.delayTime(dl), fapaiCallback, zhuaPaiOver2));
                    } else if (dd == 1) {
                        this.runAction(cc.sequence(cc.delayTime(dl), fapaiCallback, zhuaPaiOver1));
                    }

                    count[pos] += dd;
                    dl += ddl;
                }
            }
            dl += ddl;
            var dao_pai = cc.callFunc(function () {
                for (var j = 0; j < self.hand_card.length; j++) {
                    for (var i = 0; i < self.hand_card[j].length; i++) {
                        var card = self.hand_card[j][i];
                        card.setVisible(false);
                        card.runAction(cc.sequence(cc.delayTime(0.3), cc.show()));

                        var temp_card = self.getFapaiTmpCard(j, i, card.getPosition());
                        self.addChild(temp_card, MJConfig.getHandCardOrder(j, i));
                        temp_card.runAction(cc.sequence(cc.delayTime(0.3), cc.removeSelf()));
                    }
                }
                Sound.getInstance().playEffect(getResPath("RoomMJ/sound/order_pai2.mp3"));
            });

            var li_pai = cc.callFunc(function () {
                MJModel.isEnterWait = false;
                for (var j = 0; j < self.hand_card.length; j++) {
                    for (var i = 0; i < self.hand_card[j].length; i++) {
                        var card = self.hand_card[j][i];
                        card.setVisible(true);
                    }

                    var mo_card = null;
                    if (self.isDuoPai(j)) {
                        mo_card = self.hand_card[j][self.hand_card[j].length - 1];
                        self.hand_card[j].splice(self.hand_card[j].length - 1, 1);

                    }

                    self.reflashHandCard(j, true);

                    if (mo_card) {
                        mo_card.setMyPosition(MJConfig.getMoCardPos(j));
                        self.hand_card[j].push(mo_card);
                        MJModel.mj_mo_cards[j] = mo_card.getValue();
                        mo_card.reflash(0);
                    }

                    //if (self.isDuoPai(j)) {
                    //    for (var i = 1; i < self.hand_card[j].length; i++) {
                    //        var card = self.hand_card[j][i];
                    //        card.setMyPosition(MJConfig.getHandCardPos(j, i - 1, 13, false));
                    //    }
                    //
                    //    var card = self.hand_card[j][0];
                    //    card.setMyPosition(MJConfig.getMoCardPos(j));
                    //    MJModel.mj_mo_cards[j] = card.getValue();
                    //    card.reflash(0);
                    //    self.hand_card[j].splice(0, 1);
                    //    self.hand_card[j].push(card);
                    //}
                }
                self.checkCardSafe();
                Sound.getInstance().playEffect(getResPath("RoomMJ/sound/order_pai.mp3"));
            });

            this.runAction(cc.sequence(cc.delayTime(dl), dao_pai, cc.delayTime(0.3), li_pai));
        };

        //去掉出牌按钮
        MJCards.prototype.createOutCardBtn = function () {

        };

        MJCards.prototype.sortCard = function (a, b) {
            return self_table._sortCard(a, b);
        };

        var super_mjcards_checkCardSafe = MJCards.prototype.checkCardSafe;
        MJCards.prototype.checkCardSafe = function (md5s, pos) {
            if (!MJModel.isOpenFangZuoBi) {
                return;
            }
            super_mjcards_checkCardSafe.call(md5s, pos);
        };

        MJCard.prototype.check_addFlag = function () {
            self_table._checkAddCardFlag(this);
        };

        MJCards.prototype.getFapaiTmpCard = function (pos, index, position) {
            var card = new MJCard();
            card.setValue(0, pos, CardType.Card_Hand, index);
            card.setMyPosition(position);
            return card;
        };
    },
    initMJAction: function () {
        var self_table = this;

        //湖北麻将不要自动胡牌功能
        MJAction.prototype.setAutoOutCardVis = function (value) {
        };

        var super_mjaction_setOperator = MJAction.prototype.setOperator;
        MJAction.prototype.setOperator = function (operat) {
            this.removeChildByName("ChooseGang_selectLayer");

            if (operat == -1 || operat == 0 || operat == null || operat == undefined) {
                for (var i = 0; i < this.opBtns.length; i++) {
                    this.opBtns[i].setVisible(false);
                }
                MJModel.curOperate = -1;
                return false;
            }
            MJModel.curOperate = operat;

            if ((operat & ActionTypeLingQiu.TYPE_MUST_HU) == ActionTypeLingQiu.TYPE_MUST_HU) {
                if (this.actions["hu"]) {
                    this.actions["hu"].setVisible(true);
                }
                this.reflashOpBtns();
                return true;
            } else {
                return super_mjaction_setOperator.call(this, operat);
            }
        };

        var super_btnCallback = MJAction.prototype.btnCallback;
        MJAction.prototype.btnCallback = function (ref) {
            var n = ref;
            var name = n.getName();
            Log(this, "btnCallback:" + name);
            if (name == "baoting") {
                sendLingQiuPao(1);
                this.setOperator(-1);
                return;
            }

            if (name == "quxiaobaoting") {
                sendLingQiuPao(0);
                this.setOperator(-1);
                return;
            }
            super_btnCallback.call(this, ref);
        };
        MJAction.prototype.showTianTingBtns = function () {
            if (this.actions["baoting"]) {
                this.actions["baoting"].setVisible(true);
            }
            if (this.actions["quxiaobaoting"]) {
                this.actions["quxiaobaoting"].setVisible(true);
            }
            this.reflashOpBtns();
        };
    },
    initMJConfig: function () {
        var self_table = this;
        var super_mjconfig_getHandCardPos = MJConfig.getHandCardPos;
        MJConfig.getHandCardPos = function (pos, index, all, needRestri) {
            if (needRestri == undefined)needRestri = false;
            if (MJModel.isOnVideo) {
                return this.getEndCardPos(pos, index, all, needRestri);
            }
            var findex = index;
            if (needRestri) {
                findex = index - 1;
            }

            var _postion = super_mjconfig_getHandCardPos.call(this, pos, index, all, needRestri);
            if (pos == 0 && self_table.isNewCards()) {
                _postion.x -= findex * 3 - 20;
            }
            return _postion;
        };

        var super_mjconfig_getMoCardPos = MJConfig.getMoCardPos;
        MJConfig.getMoCardPos = function (pos) {
            if (MJModel.isOnVideo) {
                return this.getEndCardMoPos(pos);
            }
            var _postion = super_mjconfig_getMoCardPos.call(this, pos);
            if (pos == 0 && self_table.isNewCards()) {
                if (MJModel.mj_bg_use == 1) {
                    _postion.x -= -5;
                } else {
                    _postion.x -= -25;
                }
            }
            return _postion;
        };

        MJConfig.getNiaoEndCardPos = function (pos, index, length, isQiShouHu) {
            if (isQiShouHu == undefined) {
                isQiShouHu = false;
            }
            var begin = cc.p(0, 0);
            var qpos = this.getQiShouHuTipPos(pos);
            var cardSize = cc.size(85, 123);
            if (pos == 0 || pos == 2) {
                if (pos == 2) {
                    begin.y = qpos.y - 50;
                    if (isQiShouHu) {
                        begin.y += 50;
                    }
                } else {
                    begin.y = qpos.y
                }
                var startX = qpos.x - parseInt(cardSize.width * length / 2);
                begin.x = startX + cardSize.width / 2 + index * cardSize.width;
            } else if (pos == 1) {
                begin.y = qpos.y;
                begin.x = qpos.x - (length - index - 1) * cardSize.width - 200;
                if (isQiShouHu) {
                    begin.x -= 50;
                }
            } else {
                begin.y = qpos.y;
                begin.x = qpos.x + index * cardSize.width + 200;
                if (isQiShouHu) {
                    begin.x += 50;
                }
            }
            if (pos >= 0) {
                var point = MJConfig.getPlayerPos(pos);
                begin.y = point.y;
            }
            return begin;
        };

        var super_mjconfig_getOutingCardPos = MJConfig.getOutingCardPos;
        MJConfig.getOutingCardPos = function (pos, index) {
            var position = super_mjconfig_getOutingCardPos.call(this, pos, index);
            if (MJModel.mj_bg_use == 0) {
                if (pos == 2) {
                    position.y += 80;
                } else if (pos == 1) {
                    position.x += 100;
                } else if (pos == 3) {
                    position.x -= 100;
                }
            }
            return position;
        };
    },
    initMJPublic: function () {
        var self_table = this;
    },
    playerClickCallback: function (pos) {
        var seatid = MJModel.getSeatidByPos(pos);
        if (seatid == MJModel.seatid) {
            if (PackName == "mjnew225d") {
                this.release();
                ZJHModel.getInstance().roomToHall();
            }
            sendRecordReq();
        }
        else {
            if (MJModel.seatid == -1) {
                var player = MJModel.players[MJModel.getSeatidByPos(pos)];
                var userInfo = new MJUserInfo();
                userInfo.init(player);
                this.addChild(userInfo, 1000000);
            }
            else {

                if (MJModel.hudong == 0) {
                    return;
                }

                this.showBigfaceMenu(pos);
            }
        }
    },
    isDanJiChuPai: function () {
        if (MJModel.danjichupai) {
            return true;
        }
        return false;
    },
    playBgSound: function () {
        if (MJModel.yinyue == "jingkuai") {
            Sound.getInstance().PlayBgSound(getResPath("RoomMJ/sound/csmj1.mp3"));
        } else if (MJModel.yinyue == "suhuan") {
            Sound.getInstance().PlayBgSound(getResPath("RoomMJ/sound/csmj2.mp3"));
        } else {
            Sound.getInstance().PlayBgSound(getResPath("xixian/sound/music_hall.mp3"));
        }
    },
    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.getValue();
            if (typeof b === "object") bv = b.getValue();
            if (av == this._curLaizi && bv != this._curLaizi)return 1;//赖子放在最前边
            if (av != this._curLaizi && bv == this._curLaizi)return -1;//赖子放在最前边
            return bv - av;
        } catch (e) {
            return 0;
        }
    },
    test: function (dt) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;

        if (tempCount == 5 && false) {
            //this._showPiaoLayer();
            //this._showPiaoWaitLayer();
            this.room_Action.showPassWarn(1, 1, "您可以胡了，如果选择过，要过圈或胡\n牌番数有变，确定过胡吗？");
            return;
            this._setPiaoNum(0, 0);
            this._setPiaoNum(0, 1);
            this._setPiaoNum(1, 2);
            this._setPiaoNum(1, 3);
        }


        if (tempCount == 5 && false) {
            for (var i = 0; i < 4; i++) {
                //var arr = [0x41, 0x42, 0x42, 0x43, 0x51, 0x52, 0x53, 0x54, 0x55, 0x51, 0x52, 0x53, 0x54, 0x55, 0x31, 0x51, 0x52, 0x53, 0x54, 0x55, 0x51, 0x52, 0x53, 0x54, 0x55, 0x31];
                var arr = [0x41, 0x42, 0x42, 0x43, 0x51, 0x52, 0x53, 0x54, 0x55, 0x51, 0x52, 0x53, 0x54, 0x55, 0x31, 0x51, 0x52];

                for (var k = 0; k < arr.length; k++) {
                    this.room_Card.addOutCard(i, arr[k]);
                }
            }
        }


        if (tempCount == 5 && false) {
            for (var j = 0; j < 4; j++) {
                for (var i = 0; i < 8; i++) {
                    this.room_Card.addOutCard(j, 0x51);
                }
            }

        }

        if (tempCount == 5 && true) {
            var packet = {
                "gameend": {
                    "UserCard": [{
                        "ChangeableCardsLen": 7,
                        "ChangeableCards": [2, 2, 2, 4, 4, 4, 7],
                        "FixedCardsLen": 2,
                        "stFixedCards": [{
                            "CardData": 1,
                            "state": 8,
                            "chairID": 0,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 5, "state": 8, "chairID": 0, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 10,
                        "ChangeableCards": [1, 7, 9, 19, 24, 25, 35, 37, 37, 40],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{"CardData": 17, "state": 1, "chairID": 2, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 8,
                        "ChangeableCards": [23, 23, 35, 35, 35, 36, 36, 36],
                        "FixedCardsLen": 2,
                        "stFixedCards": [{
                            "CardData": 24,
                            "state": 1,
                            "chairID": 1,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 37, "state": 1, "chairID": 0, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }],
                    "Score": [6, -6, 0],
                    "EndState": 0,
                    "EndGangInfo": [{
                        "Gang": [{"GangType": 8, "GangCard": 1}, {"GangType": 8, "GangCard": 5}],
                        "TotalGangScore": 0
                    }, {"Gang": [], "TotalGangScore": 0}, {"Gang": [], "TotalGangScore": 0}],
                    "faninfo": [{
                        "chairid": 0,
                        "SpecialType": 4,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 1,
                        "SpecialType": 4,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 2,
                        "SpecialType": 1,
                        "FanNum": 2,
                        "addfan": [{"AddType": 16, "AddNum": 2, "AddType2": null}],
                        "hucard": 35,
                        "DianPao": []
                    }],
                    "money": [1006, 994, 1000],
                    "ts": null,
                    "md5": []
                },
                "gangfen": [8, -4, -4],
                "hu_score": [],
                "State": [],
                "card": {"card": []},
                "cardma": {"card": []},
                "ma_score": 0,
                "hu_chairid": 2
            };
            this.handler_server_game_end_bc(packet);
        }
    },

    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        cc.log("lin=handler_cmd=" + cmd);
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.xixianmj.tagCurGameScence", jpacket);
            //var ackGameFree = parsePacket("proto.game.AckGameScene", jpacket);

            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.xixianmj.AckCurGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_HUBEI_LAIZIINFO) {
            this._handler_server_laizi_bc(jpacket, canDelay);
            return;
        }

        if (cmd == selfCMD.SERVER_START_PIAO) {
            this.handler_server_start_piao(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_BROAD_PIAO) {
            this.handler_server_broad_piao_choose(jpacket, canDelay);
            return;
        }
        if (cmd == selfCMD.SERVER_AckBroadChooseResult) {
            this.handler_server_broad_piao_result(jpacket, canDelay);
            return;
        }
        this._super(cmd, jpacket, canDelay, svrid);
    },
    handler_server_start_piao: function (jpacket, canDelay) {
        var packet = parsePacket("proto.game.xixianmj.AckStartPiao", jpacket);
        var piaonum = packet.piaonum;
        for (var i = 0; i < piaonum.length; i++) {
            if (MJModel.isMyPlayer(i) && piaonum[i] == 1) {
                this.room_Action.showTianTingBtns();
            }
        }
    },

    gameend_zhongma: function (hubeiGameend) {
        var cardma = [];
        var card = [];
        if (hubeiGameend.cardma)cardma = hubeiGameend.cardma.card;
        if (hubeiGameend.card) card = hubeiGameend.card.card;
        var hu_chairid = hubeiGameend.hu_chairid;
        if (card && card.length > 0) {
            var self = this;
            //this.room_Card.removePublicCardByNums(jiangma.Num , false);

            var ZhongChairID = [-1, -1, -1, -1, -1, -1];
            for (var i = 0; i < card.length; i++) {
                var cd = card[i];
                if (cardma.indexOf(cd) != -1) {
                    ZhongChairID[i] = hu_chairid;
                }
            }
            var oJiangmaTips = new JiangmaTips();
            oJiangmaTips.setName("JiangmaTips");

            ZhongChairID.push(hu_chairid);
            oJiangmaTips.showZhongNiaoBigTips(card, ZhongChairID);
            this.addChild(oJiangmaTips, 10000);
            oJiangmaTips.runAction(cc.sequence(cc.delayTime(3), cc.removeSelf()));
        }
    },

    handler_server_broad_piao_choose: function (jpacket, canDelay) {
        var packet = parsePacket("proto.game.xixianmj.AckBroadPiao", jpacket);
        var chairid = packet.chairid;
        var UserPiao = packet.UserPiao;
        if (UserPiao == 1) {
            var player = this.players[MJModel.getPosBySeatid(chairid)];
            if (player) {
                player.setTianTingIcon(true);
                if (MJModel.isMyPlayer(chairid)) {
                    MJModel.mj_lockcard_type = 2;
                }
                if (canDelay)this.room_Tip.showSimpleEffect(MJModel.getPosBySeatid(chairid), -1, "", "baoting");
            }
        }
    },

    handlerAutoUpTableReady: function (nums, selfIsReady) {
        //cc.log("lin=handlerAutoUpTableReady=" + MJModel.roomState);
        //if (MJModel.seatid == -1 && nums < 4) {
        //    this.actionCallBack("uptable");
        //}
        //else if (selfIsReady == false) {
        //    if (MJModel.canQuxiaoZhun()) {
        //        if (MJModel.roomState != 0) this.actionCallBack("ready");
        //    } else {
        //        this.actionCallBack("ready");
        //    }
        //}
    },

    handler_server_broad_piao_result: function (jpacket, canDelay) {
        var packet = parsePacket("proto.game.xixianmj.AckBroadChooseResult", jpacket);
        var result = packet.result;
        this._piaoResult = result;
        if (this.getChildByName("linqiu_PiaoWaitLayer")) {
            this.removeChildByName("linqiu_PiaoWaitLayer");
        }

        for (var i = 0; i < result.length; i++) {
            var pos = MJModel.getPosBySeatid(i);
            var player = this.players[pos];
            if (player) {
                player.addPiaoIcon(pos, result[i]);
            }
        }
    },

    _handler_server_buhua_bc: function (data, canDelay) {
        var packet = parsePacket("proto.game.xixianmj.AckBuHua", data);
        var buhua = packet.buhua;
        var leftcount = packet.leftcount;
        this.room_Info.showCardNums(leftcount, true);
        var alldata = [];
        var pnum = 4;
        if (MJModel.mj_roomType == 1) pnum = 3;
        if (MJModel.mj_roomType == 2) pnum = 2;

        for (var i = MJModel.banker_seatid; i < (MJModel.banker_seatid + buhua.length); i++) {
            var s = i;
            if (s >= pnum) s -= pnum;
            for (var j = 0; j < buhua.length; j++) {
                if (buhua[j].chairid == s) {
                    var data = {};
                    data.chairid = buhua[j].chairid;
                    data.hua = buhua[j].hua;
                    data.getcard = buhua[j].getcard;
                    alldata.push(data);
                    break;
                }
            }
        }

        var self = this;
        var count = -1;

        var callback1 = cc.callFunc(function () {
            count++;
            var data = alldata[count];
            if (data) {
                self._show_buhua_action(data.chairid, data.hua, data.getcard, canDelay);
            }
        });

        if (alldata.length != 0) {
            if (canDelay) {
                MJModel.isEnterWait = true;
                var self = this;
                var callback = cc.callFunc(function () {
                    MJModel.isEnterWait = false;
                });
                this.runAction(cc.sequence(cc.sequence(cc.delayTime(0.3), callback1).repeat(alldata.length), cc.delayTime(1), callback));
            }
            else {
                for (var i = 0; i < alldata.length; i++) {
                    var data = alldata[i];
                    this._show_buhua_action(data.chairid, data.hua, data.getcard, canDelay);
                }
            }
        }
    },

    _show_buhua_action: function (seatId, huaArr, getcardArr, canDelay) {
        var pos = MJModel.getPosBySeatid(seatId);
        for (var j = 0; j < huaArr.length; j++) {
            this.room_Card.removeHandCard(pos, huaArr[j]);
        }
        for (var j = 0; j < getcardArr.length; j++) {
            this.room_Card.addHandCard(pos, getcardArr[j]);
            //this.room_Card.removePublicCardByNums(1,false);
        }
        this.room_Card.reflashHandCard(pos);

        for (var j = 0; j < huaArr.length; j++) {
            this.refreshHuaCard(huaArr[j]);
            this.room_Card.addOutCard(pos, huaArr[j]);
            //this.room_Card.removeHandCard(pos, huaArr[j]);
        }
        if (canDelay && (huaArr.length > 0)) {
            this._ShowEffect("buhua", pos);
            var player = MJModel.players[seatId];
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("RoomMJ/sound/operator/%1_buhua.mp3"), player.sex == SEX_ID.SEX_FEMALE ? "w" : "m"));
        }

        //起手补花后标记摸的牌
        if (MJModel.isMyPlayer(seatId) && this.room_Card.isDuoPai(0)) {
            MJModel.mj_mo_cards[0] = getcardArr[getcardArr.length - 1];
            var is_ok = this.room_Card.removeHandCard(0, MJModel.mj_mo_cards[0]);
            if (is_ok) this.room_Card.initMoCard(0, MJModel.mj_mo_cards[0], true);
        }
    },
    _ShowEffect: function (name, pos) {
        try {
            var begin = MJConfig.getOperatorTipPos(pos);
            var armature = null;
            var effect_name = "";
            if (name == "buhua") {
                effect_name = "effects_mjxxbuhuax";
                ccs.armatureDataManager.addArmatureFileInfo(getResPath("xixian/effect/buhua/effects_mjxxbuhuax.ExportJson"));
            }
            armature = new ccs.Armature(effect_name);
            if (armature != null) {
                var animation = armature.getAnimation();
                if (animation) {
                    if (typeof animation.playWithIndex === "function") {
                        animation.playWithIndex(0);

                        armature.setPosition(begin);
                        this.room_Tip.addChild(armature, 10000);
                    }
                }
                armature.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
            }
            // Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
        } catch (e) {
            Log(this, e);
        }
    },
    refreshHuaCard: function (value) {
        if (this._huaValues.indexOf(value) == -1) {
            this._huaValues.push(value);
        }
    },
    handler_server_update_info_uc: function (data, canDelay) {
    },
    handler_server_mo_card_bc: function (data, canDelay) {
        this._super(data, canDelay);
    },
    _handler_game_record: function (data, canDelay) {
        if (MJModel.gpsInfo) {
            MJModel.gpsInfo.removeFromParent(true);
            MJModel.gpsInfo = null;
        }

        //-----新总结算界面
        var gpsInfo = cc.director.getRunningScene().getChildByName("gpsInfo");
        if (gpsInfo) {
            gpsInfo.removeFromParent(true);
        }

        cc.log("------big End");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var pkgId = this._pkg_id;
        var gameType = "息县麻将";
        if (this.mj_roomType == 1) {
            gameType = gameType + " 3人"
        } else if (this.mj_roomType == 2) {
            gameType = gameType + " 2人"
        } else {
            gameType = gameType + " 4人"
        }
        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);
        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];
        //gameType += " · " + MJModel.base_money + "分底";

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        //var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;

        var max_score = 0;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            if (recoreInfo.totalscore > max_score) {
                max_score = recoreInfo.totalscore;
            }
        }

        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            //var playerRecord = totalRecord.player_records[i];
            var player = MJModel.players[i];
            var arrStr = [];
            //次数
            var arrcount = [];

            arrStr = ["坐庄次数", "胡牌次数", "点炮次数", "超时次数"];
            arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.Ex1, recoreInfo.outtime_num];

            if (player && player.uid != -1 && player.uid != 0) {
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var isWin = false;
                if (max_score > 0 && recoreInfo.totalscore == max_score) {
                    isWin = true;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, isWin, _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner, recoreInfo.dissState);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;

                Item.getChildByName("zongfen_win").setScale(1.2);
                Item.getChildByName("zongfen_lose").setScale(1.2);
            }
        }
        bigResult.refresh(PlayerNumber);
        this.release();
    },

    handler_server_game_end_bc: function (hubeiGameend, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            var ackGameEnd = hubeiGameend.gameend;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);

            if (MJModel.mj_table.getChildByName("tingpai_layer")) {
                MJModel.mj_table.removeChildByName("tingpai_layer")
            }

            this.room_Info.stopTime();
            this.room_Tip.hideOutCardTip();

            var show_all_handcard = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var show_liuju = cc.callFunc(function () {
                if (ackGameEnd.EndState == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
            });

            var show_end_score = cc.callFunc(function () {
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var update_all_money = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var show_zhongma_effect = cc.callFunc(function () {
                self.gameend_zhongma(hubeiGameend);
            });

            var game_end_reset = cc.callFunc(function () {
                var result = new MJResult_XinYu();
                result.updateContentView(hubeiGameend);
                result.setName("reset_remove");
                self.addChild(result, 100000);
                if (MJModel.mj_table._isJieSan) {
                    result.setName("xxxxx");
                }
                return;
                try {
                    var result = new MJResult_XinYu();
                    result.updateContentView(hubeiGameend);
                    result.setName("reset_remove");
                    self.addChild(result, 100000);
                    if (MJModel.mj_table._isJieSan) {
                        result.setName("xxxxx");
                    }
                } catch (e) {
                    cc.log("game end:", e);
                    self.room_Action.setReady2Visible(true);
                }
            });

            var show_all_public_card = cc.callFunc(function () {
                self.gameend_showAllPublicCard(ackGameEnd);
            });

            if (MJModel.isOnVideo && canDelay == false) {
                this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(2), update_all_money, cc.delayTime(1), game_end_reset));
                return;
            }

            this.runAction(cc.sequence(show_all_public_card, show_all_handcard, cc.delayTime(1), show_liuju, cc.delayTime(ackGameEnd.EndState == 1 ? 1 : 0), show_end_score, cc.delayTime(0), update_all_money, show_zhongma_effect, cc.delayTime(3), game_end_reset));
        } catch (e) {
            ERROR(this, "handler_server_game_end_bc" + e);
        }
    },

    timeEnd: function (dt) {

        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    },
    //handler_game_time_over_bc: function (data, canDelay) {
    //    //cc.log("lin=startTimeEnd=handler_game_time_over_bc=1");
    //    if (MJModel.state != MJ_STATUS.MJ_GAME_PLAYING) {
    //        this.startTimeEnd();
    //    }
    //    MJModel.state = MJ_STATUS.MJ_GAME_FREE;
    //    // PlatformHelper.showToast("服务器通知房间结束！");
    //},
    handler_server_end_room_result_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.AckDisbandResult", data);
        if (this.room_EndTouPiao) this.room_EndTouPiao.removeFromParent(true);
        this.room_EndTouPiao = null;
        MJModel.TouPiaoING = false;
        var result = jpacket.Result;
        if (result == 1) {
            //PlatformHelper.showToast("房间解散成功，3秒后房间自动结束");
            this._isJieSan = true;
        }
        else {
            PlatformHelper.showToast("解散失败，稍后游戏继续！");
        }
    },
    _handler_server_laizi_bc: function (data, canDelay) {
        var packet = parsePacket("proto.game.xixianmj.AckLaiziPai", data);
        var self = this;
        var curLaizi = packet.laizicard;
        this._setLaizi(curLaizi, -1, -1, canDelay ? true : false);
        if (canDelay == false) {
            this._showHandcardFlag(false);
            this.room_Card.reflashHandCard(0, true);
            this.room_Card.reflashHandCard(1, true);
            this.room_Card.reflashHandCard(2, true);
            this.room_Card.reflashHandCard(3, true);
            return;
        }
        MJModel.isEnterWait = true;

        var move_end = cc.callFunc(function () {
            self._showHandcardFlag(false);

            var mo_card = null;
            if (self.room_Card.isDuoPai(0)) {
                mo_card = self.room_Card.hand_card[0][self.room_Card.hand_card[0].length - 1];
                self.room_Card.hand_card[0].splice(self.room_Card.hand_card[0].length - 1, 1);
            }

            //cc.log("lin=_handler_server_laizi_bc=mo="+mo_card.getValue());
            var allPreCars = [];
            var allLaiZi = [];
            var dd = 0;

            for (var i = self.room_Card.hand_card[0].length - 1; i >= 0; i--) {
                var card = self.room_Card.hand_card[0][i];
                if (card.getValue() == curLaizi) {
                    allLaiZi.push(card);
                } else {
                    if (allLaiZi.length > 0) {
                        break;
                    }
                    allPreCars.push(card);
                }
            }

            if (allLaiZi.length > 0 && allPreCars.length > 0) {
                var allDelay = 0;
                for (var i = 0; i < allLaiZi.length; i++) {
                    var card = allLaiZi[i];
                    var begin_pos = card.getPosition();
                    var end_pos = MJConfig.getHandCardPos(0, self.room_Card.hand_card[0].length - 1 - i, self.room_Card.hand_card[0].length, self.room_Card.isDuoPai(0));
                    var allL = Math.abs(end_pos.x - begin_pos.x);

                    //if (MJModel.outCardEffect_style == 0 || true) {
                    var time = allL / 1000;
                    if (time < 0.17) time = 0.17;
                    if (time > 0.3) time = 0.3;
                    card.runAction(cc.sequence(cc.spawn(cc.rotateTo(0.1, 15), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + 100))), cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y + 100)).easing(cc.easeSineOut()), cc.spawn(cc.rotateTo(0.1, 0), cc.moveTo(0.17, end_pos))));
                    allDelay += 1;
                }
                for (var i = 0; i < allPreCars.length; i++) {
                    var card = allPreCars[i];
                    //card.runAction(cc.sequence(cc.moveBy(0.3, cc.p(83, 0)), cc.delayTime(1 - 0.3)).repeat(allLaiZi.length));
                    card.runAction(cc.moveBy(0.3, cc.p(83 * allLaiZi.length, 0)));
                }

                var callback = cc.callFunc(function () {
                    MJModel.isEnterWait = false;
                    self.room_Card.reflashHandCard(0, true);
                    if (mo_card) {
                        mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                        self.room_Card.hand_card[0].push(mo_card);
                    }
                });
                self.runAction(cc.sequence(cc.delayTime(0.5), callback));
            } else {
                MJModel.isEnterWait = false;
                self.room_Card.reflashHandCard(0, true);
                if (mo_card) {
                    mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                    self.room_Card.hand_card[0].push(mo_card);
                }
            }
        });
        this.runAction(cc.sequence(cc.delayTime(1), move_end));
    },
    handler_server_game_start_bc2: function (data, canDelay) {
        this._super(data, canDelay);
    },
    _setGameType: function () {
        var pkg_id = 1;
        var play_id = [];
        //甩字胡不可炮胡
        //play_id.push(MJModel.base_money + "分底");
        if (this.mj_roomType == 0) {
            play_id.push("4人");
        } else if (this.mj_roomType == 1) {
            play_id.push("3人");
        } else if (this.mj_roomType == 2) {
            play_id.push("2人");
        }

        if (MJModel.RoomConfigID.indexOf(1007001) != -1) {
            play_id.push("红中金牌");
            this._isWanNengPai = true;
        }

        if (MJModel.RoomConfigID.indexOf(1007002) != -1) {
            play_id.push("庄翻倍");
        }

        if (MJModel.RoomConfigID.indexOf(1008001) != -1) {
            play_id.push("不买马");
        }

        if (MJModel.RoomConfigID.indexOf(1008002) != -1) {
            play_id.push("2匹马");
        }

        if (MJModel.RoomConfigID.indexOf(1008003) != -1) {
            play_id.push("4匹马");
        }

        if (MJModel.RoomConfigID.indexOf(1008004) != -1) {
            play_id.push("6匹马");
        }

        if (MJModel.RoomConfigID.indexOf(1009001) != -1) {
            play_id.push("庄家中马");
        }

        if (MJModel.RoomConfigID.indexOf(1009002) != -1) {
            play_id.push("159中马");
        }

        MJModel.play_id_str = play_id;

        var gameDes = "";
        for (var i = 0; i < play_id.length; i++) {
            gameDes += play_id[i];
            if (i != play_id.length - 1) {
                gameDes += " ";
            }
        }
        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);
        //this._setFastChat();
    },
    fastChat3: [
        "各位老板老板娘好",
        "快滴啊打撒，嘛区闹", "别虚撒，" +
        "让我稍微想下子",
        "小心滴啊，我听牌了，别出纵",
        "我滴个乖乖，又自摸了",
        "你这个牌打滴太夯了，直接要喊你师父",
        "别吵别吵，专心打牌",
        "啊呦歪，你们两个打联子闹",
        "打滴什么牌哎，会打牌啊",
        "对不住啊，刚才接了个电话，继续继续",
        "不好意思不好意思，一打牌事就来了，嘛就到",
        "咦，怎么又断线了，网络怎么那么差",
    ],
    _setFastChat: function () {
        var chatList = [];
        chatList = this.fastChat3;
        MJModel.mj_fastChat = this.fastChat3;
        var self = this;
        Utils.getFastChatSound = function (chat, sex) {
            for (var i = 0; i < chatList.length; i++) {
                if (chatList[i] == chat) {
                    return getResPath(__String.createWithFormat("xixian/sound/fastchat/%1_%2.mp3", sex == SEX_ID.SEX_MAN ? "m" : "w", i + 1));
                }
            }
            return "";
        };
    },

    _showLaizi_effect: function (name) {
        ccs.armatureDataManager.addArmatureFileInfo(getResPath("xixian/effect/laizi/effects_mjhunancx.ExportJson"));
        var size = cc.director.getWinSize();
        if (true) {
            var armature = new ccs.Armature("effects_mjhunancx");
            var animation = armature.getAnimation();
            if (animation) {
                if (typeof animation.playWithIndex === "function") {
                    animation.playWithIndex(0, -1, 0);
                    armature.setPosition(cc.p(size.width / 2, size.height / 2));
                    this.addChild(armature, 100);
                    armature.runAction(cc.sequence(cc.delayTime(1.0), cc.removeSelf()));
                }
            }
        }
        Sound.getInstance().playEffect(__String.createWithFormat(getResPath("xixian/sound/laizi.mp3")));
        return armature;
    },
    _setLaizi: function (laizi, laizipi, laizipi2, gamestart) {
        this._curLaizi = laizi;
        this._curLaizipi = laizipi;
        this._curLaizipi2 = laizipi2;

        var size = cc.director.getWinSize();
        if (laizi == null || laizi == undefined || laizi == -1 || laizi == 255) {
            if (this._curLaizi_bg) this._curLaizi_bg.setVisible(false);
            return;
        }
        if (gamestart == undefined) gamestart = false;

        if (this._curLaizi_bg == null) {
            this._curLaizi_bg = new cc.Sprite(getResPath("xixian/flag/laizi_bg3.png"));
            this._curLaizi_bg.setPosition(cc.p(size.width - 220, size.height - 70));
            this.addChild(this._curLaizi_bg, 200);
        }
        this._curLaizi_bg.removeAllChildren();
        this._curLaizi_bg.setVisible(true);

        if (this._curLaizi > 0) {
            var card = new MJCard();
            card.setValue(this._curLaizi, 0, CardType.Card_Out, 0);
            card.setPosition(cc.p(this._curLaizi_bg.getContentSize().width / 2, this._curLaizi_bg.getContentSize().height / 2));
            card.setScale(1);
            //card.setStoreColor(cc.color(255, 249, 137));
            this._curLaizi_bg.addChild(card);
            this.room_Card.other_card.push(card);

            if (gamestart) {
                var dl = 0;
                var ppos = card.getPosition();
                card.setScale(0);
                card.setVisible(false);
                var self = this;
                var callFunc = cc.CallFunc(function () {
                    self._showLaizi_effect("赖子皮");
                });
                card.setPosition(cc.p(size.width / 2 - this._curLaizi_bg.getPositionX() + this._curLaizi_bg.getContentSize().width / 2, size.height / 2 - this._curLaizi_bg.getPositionY() + this._curLaizi_bg.getContentSize().height / 2));
                card.runAction(cc.sequence(cc.delayTime(0 + dl), cc.show(), callFunc, cc.scaleTo(0.1, 2), cc.delayTime(1.0), cc.spawn(cc.moveTo(0.17, ppos), cc.scaleTo(0.17, 1))));
            }
        }
    },

    _showHandcardFlag: function (isEndShow) {
        if (MJModel.isOnVideo) {
            for (var j = 0; j < 4; j++) {
                var allcards = this.room_Card.hand_card[j];
                if (allcards) {
                    for (var i = 0; i < allcards.length; i++) {
                        var card = allcards[i];
                        this._checkAddCardFlag(card);
                    }
                }
            }
            return;
        }
        var allcards = this.room_Card.hand_card[0];
        if (allcards) {
            for (var i = 0; i < allcards.length; i++) {
                var card = allcards[i];
                this._checkAddCardFlag(card);
            }
        }
    },
    _checkAddCardFlag: function (card) {
        try {
            if (card.type == CardType.Card_Outing)return;
            if (card.type == CardType.Card_Peng)return;
            if (card.getValue() == 0)return;
            var flag_str = "";
            if (card.getValue() == this._curLaizi)flag_str = "xixian/flag/lai_flag2.png";
            if (card.getValue() == this._curLaizipi)flag_str = "xixian/flag/laipi_flag2.png";
            if (card.getValue() == this._curLaizipi2)flag_str = "xixian/flag/laipi_flag2.png";
            if (flag_str != "") {
                if (card.getValue() == this._curLaizi)card.setStoreColor(cc.color(255, 249, 137));
                var p = card.getChildByName("sprite");
                p.removeChildByName("laizi_flag");
                var flag = null;

                flag = new cc.Sprite(getResPath(flag_str));

                var m_size = p.getContentSize();
                if (flag) {
                    flag.setPosition(cc.p(0, m_size.height));
                    flag.setAnchorPoint(cc.p(0, 1));
                    flag.setName("laizi_flag");
                    p.addChild(flag);
                    this._flagDirection(card.pos, flag, m_size);
                    flag.setScale(0.5);
                    if (card.pos == 0 && card.type != CardType.Card_Out)flag.setScale(1);
                }
                return;
            }
        } catch (e) {
            Log(this, e);
        }
    },
    //每个方向角标对应
    _flagDirection: function (pos, flag, m_size) {
        if (MJModel.mj_table_view == "2d") {
            if (MJModel.mj_paiban == "vertical" || pos == 2) {
                return;
            }
        }
        if (pos == 1) {
            flag.setPosition(cc.p(0, 15));
            flag.setRotation(-90);
        } else if (pos == 2) {
            flag.setPosition(cc.p(m_size.width, 5));
            flag.setRotation(180);
        } else if (pos == 3) {
            flag.setPosition(cc.p(m_size.width, m_size.height));
            flag.setRotation(90);
        }
    },
    resetGame: function (allClean) {
        this._super(allClean);
        this._setLaizi(-1, -1, -1);
        this.isForceTing = false;
        MJModel.mj_lockcard_type = 0;
        this._huaCard = [[], [], [], []];
        this._huaValues = [0x41, 0x42, 0x43, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x60];
        this._piaoState = [0, 0, 0, 0];

        if (this.getChildByName("linqiu_PiaoLayer")) {
            this.removeChildByName("linqiu_PiaoLayer");
        }

        if (this.getChildByName("linqiu_PiaoWaitLayer")) {
            this.removeChildByName("linqiu_PiaoWaitLayer");
        }
    },
    handler_server_scene_info_uc: function (hubei_scene, canDelay) {
        if (hubei_scene) {
            this.updateBg(false);
            MJModel.RoomConfigID = hubei_scene.GameSence.RoomConfigID;
            MJModel.banker_seatid = hubei_scene.GameSence.BankerChairid;
            var ackGameFree = hubei_scene.GameSence;
            var laizicard = hubei_scene.laizicard;
            if (ackGameFree.RoomConfigID.indexOf(2000001) != -1)MJModel.changMode = 2;
            if (ackGameFree.RoomConfigID.indexOf(2000002) != -1)MJModel.changMode = 1;
            if (ackGameFree.RoomConfigID.indexOf(2000003) != -1)MJModel.changMode = 3;

            if (laizicard) {
                this._setLaizi(laizicard, -1, false);
            }

            //锁住手牌
            this._setGameType();
        }

        this._super(hubei_scene.GameSence, canDelay);

        var State = hubei_scene.State;
        var iscanting = hubei_scene.iscanting;

        for (var i = 0; i < State.length; i++) {
            var st = State[i];
            if (st == 1) {
                var player = this.players[MJModel.getPosBySeatid(i)];
                if (player) {
                    player.setTianTingIcon(true);
                }

                if (MJModel.isMyPlayer(i)) {
                    MJModel.mj_lockcard_type = 2;
                }
            }

            if (iscanting[i] && st == -1 && MJModel.isMyPlayer(i)) {
                if (this.room_Action)this.room_Action.showTianTingBtns();
            }
        }
        if (this.room_Card) {
            this.room_Card.setSomeCardClickState();
        }
    },

    handler_server_out_card_bc: function (data, canDelay) {
        var userOutCard = parsePacket("proto.game.AckUserOutCard", data);
        var seatId = userOutCard.ChairID;
        var card = userOutCard.Card;
        var da_type = userOutCard.da_type;
        var pos = MJModel.getPosBySeatid(seatId);
        this._super(data, canDelay)
    },
    handler_server_peng_kang_bc: function (data, canDelay) {
        var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);
        var seatid = ackBcOpResult.ChairID;
        var pos = MJModel.getPosBySeatid(seatid);
        this._super(data, canDelay);
        if (this.room_Card.isDuoPai(0) && MJModel.mj_mo_cards[pos] == -1) {
            var card = this.room_Card.hand_card[0][0];
            card.setMyPosition(MJConfig.getMoCardPos(0));
        }
    },

    handler_out_card_sound: function (sex, card) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("xixian/sound/chupai/%1_%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", Utils.toHex2(card)));
        } else {
            this._super(sex, card);
        }
    },

    handler_op_sound: function (pos, sex, OpType, OpType2, effect) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.fangyan != "putonghua") {
            if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU && effect == "") {
                var zimo = this.room_Card.isDuoPai(pos);
                effect = "hu";
                if (zimo) {
                    effect = "zimo";
                }
            } else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                effect = "peng";
            }
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("xixian/sound/operator/%1_%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", effect));
        } else {
            this._super(pos, sex, OpType, OpType2, effect);
        }
    },

    handler_op_effect: function (pos, out_pos, sex, OpType, OpType2, effect) {
        this.room_Tip.showEffect(pos, OpType, this.room_Card.isDuoPai(pos));
        // this.room_Tip.showSimpleEffect(pos, out_pos, OpType, effect);
    },
    reflashSetting: function (isInit) {
        this._super(isInit);

        if (this.room_Card) {
            //刷新数字角标
            for (var i = 0; i < this.room_Card.hu_card.length; i++) {
                for (var k = 0; k < this.room_Card.hu_card[i].length; k++) {
                    var card = this.room_Card.hu_card[i][k];
                    this.updateShuZiFlag(card, i);
                }
            }
        }
    },
    updateShuZiFlag: function (card, pos, init) {
        var flag = card.getChildByName("shuziFlag");
        if (init) {
            flag = init;
        }

        var m_size = card.getContentSize();
        if (flag || init) {
            if (MJModel.mj_bg_use == 0) {
                if (pos == 0) {
                    flag.setPosition(cc.p(m_size.width * 0.05, m_size.height));
                    flag.setAnchorPoint(cc.p(0, 1));
                } else if ((pos == 1)) {
                    flag.setPosition(cc.p(m_size.width * 0.2, m_size.height * 0.4));
                    flag.setAnchorPoint(cc.p(0, 0));
                } else if ((pos == 2)) {
                    flag.setPosition(cc.p(m_size.width * 0.9, m_size.height * 0.5));
                    flag.setAnchorPoint(cc.p(1, 0.5));
                    flag.setRotation(0);
                } else if ((pos == 3)) {
                    flag.setPosition(cc.p(m_size.width * 0.8, m_size.height * 0.85));
                    flag.setAnchorPoint(cc.p(1, 1));
                }
            } else {
                if (pos == 0) {
                    flag.setPosition(cc.p(m_size.width * 0.15, m_size.height * 0.85));
                    flag.setAnchorPoint(cc.p(0, 1));
                } else if ((pos == 1)) {
                    flag.setPosition(cc.p(m_size.width * 0.15, m_size.height * 0.4));
                    flag.setAnchorPoint(cc.p(0, 0));
                } else if ((pos == 2)) {
                    flag.setPosition(cc.p(m_size.width * 0.65, m_size.height * 0.68));
                    flag.setAnchorPoint(cc.p(0.5, 0.5));
                    flag.setRotation(180);
                } else if ((pos == 3)) {
                    flag.setPosition(cc.p(m_size.width * 0.8, m_size.height * 0.85));
                    flag.setAnchorPoint(cc.p(1, 1));

                }
            }
        }
    },
    isHuaValue: function (card) {
        if (this._curLaizi == card) {
            return true;
        }
        return false;
    },
    addCardNum: function (card, pos, num) {
        card.removeChildByName("shuziFlag");
        //添加标志
        var flag_str = __String.createWithFormat(getResPath("xixian/flag/num/%1_%2.png"), num, pos);
        var flag = new cc.Sprite(flag_str);
        var m_size = card.getContentSize();
        if (flag) {
            this.updateShuZiFlag(card, pos, flag);

            flag.setName("shuziFlag");
            flag.setScale(1.1);
            card.addChild(flag, 1000);
        }
        return flag;
    },
    _showPiaoLayer: function () {
        if (this.getChildByName("linqiu_PiaoLayer")) {
            this.removeChildByName("linqiu_PiaoLayer");
        }
        var layer = new PiaoLayer();
        layer.setName("linqiu_PiaoLayer");
        layer.initPiao();
        this.addChild(layer, 299);
    },
    _showPiaoWaitLayer: function (result) {
        if (this.getChildByName("linqiu_PiaoLayer")) {
            return;
        }

        if (this.getChildByName("linqiu_PiaoWaitLayer")) {
            this.removeChildByName("linqiu_PiaoWaitLayer");
        }
        var layer = new PiaoWaitLayer();
        layer.setName("linqiu_PiaoWaitLayer");
        layer.initPiao(result);
        this.addChild(layer, 299);
    },
    _setPiaoNum: function (piao, pos) {
        var player = this.players[pos];
        player.removeChildByName("piao_tip");
        var str = "xixian/flag/icon_bufang.png"
        if (piao == 1) {
            str = "xixian/flag/icon_fangtou.png";
        }
        var tip = new cc.Sprite(getResPath(str));
        tip.setName("piao_tip");
        tip.setPosition(pos == 2 ? player.m_size.width + tip.getContentSize().width / 2 - 5 : player.m_size.width / 2, pos == 2 ? 0 + 3 : player.m_size.height * 1.15);
        player.addChild(tip, -100);
    },
    myselfOpenOutCard: function (IsMoCard, showTip) {
        if (IsMoCard == undefined) IsMoCard = false;
        if (showTip == undefined) showTip = true;
        if (MJModel.isOnVideo) {
            return;
        }

        if (MJModel.isAutoOutCard && IsMoCard) {
            this.autoOutCard();
            return;
        }
        this.room_Card.resetAllCardClickState();
        MJModel.canTouchCard = true;
        MJModel.canChoiceMore = false;
        this.room_Card.setTingPaiFlag(true);

        if (this.room_Action) this.room_Action.setTingPaiVis(false);
        if (this.room_Action) this.room_Action.setAutoOutCardVis(false);

        this.room_Card.setSomeCardClickState();

        //this.room_Tip.showOutCardTip();
    },
    //自动出牌
    autoOutCardTimeOut: function (dt) {
        this.unschedule(this.autoOutCardTimeOut);
        if (MJModel.isAutoOutCard == false && MJModel.mj_lockcard_type != 2)return;
        if (MJModel.TouPiaoING == true) return;//投票期间 该功能不起作用
        sendOutCard(MJModel.curOperateCard);
    },
    autoOutCard: function () {
        this.schedule(this.autoOutCardTimeOut, 0.5);
    },
    myselfOpenOutCard: function (IsMoCard, showTip) {
        if (IsMoCard == undefined) IsMoCard = false;
        if (showTip == undefined) showTip = true;
        if (MJModel.isOnVideo) {
            return;
        }

        if ((MJModel.isAutoOutCard && IsMoCard) || (MJModel.mj_lockcard_type == 2)) {
            this.autoOutCard();
            this.room_Card.resetAllCardClickState();
            this.room_Card.setSomeCardClickState();
            return;
        }
        this.room_Card.resetAllCardClickState();
        MJModel.canTouchCard = true;
        MJModel.canChoiceMore = false;
        this.room_Card.setTingPaiFlag(true);

        if (this.room_Action) this.room_Action.setTingPaiVis(false);
        if (this.room_Action) this.room_Action.setAutoOutCardVis(false);

        this.room_Card.setSomeCardClickState();

        if (showTip)this.room_Tip.showOutCardTip();
    },
});

var MJResult_XinYu = MJCommonResult.extend({
    btns: {},
    ctor: function () {
        this._super();
        var size = this.bgSpr.getContentSize();
        var y = 62;

        var offy = 25;
        var startY = 20;
        var width = size.width * 0.99;
        var fontSize = 22;

    },
    createBottomMaLayer: function () {
        var tagJiangma = this.ackGameEndJS.card;
        var ma_cards = [];
        if (tagJiangma)ma_cards = tagJiangma.card;
        var maLength = 0;
        var marginWidth = 0;
        if (tagJiangma && ma_cards.length > 0) {
            maLength = ma_cards.length;
            var label = new cc.LabelTTF(this.getMaTips(), "Arial", 25);
            label.setAnchorPoint(cc.p(0.0, 0.5));
            label.setColor(this.leftColor);
            label.setPosition(cc.p(85, 50));
            this.bgSpr.addChild(label);

            for (var i = 0; i < ma_cards.length; i++) {
                var card = new MJCard();
                card.setValue(ma_cards[i], 0, CardType.Card_End, 0);
                card.setAnchorPoint(cc.p(0.0, 0.5));
                card.setScale(0.5);
                card.setPosition(cc.p(150 + (card.getBoundingBox().width) * i, 50));
                this.bgSpr.addChild(card);

                if (marginWidth == 0) {
                    marginWidth = card.getBoundingBox().width * maLength;
                }
            }

        }

        this.configLayout = new ccui.Layout();
        this.configLayout.setPosition(150 + marginWidth, 50);
        this.bgSpr.addChild(this.configLayout);
    },
    getMaTips: function () {
        return "马牌:";
    },
    createMaLayer: function (seatid) {
        var layer = null;
        var ma_seatid = this.ackGameEndJS.hu_chairid;
        if (seatid != ma_seatid) {
            return;
        }
        var tagJiangma = [];
        if (this.ackGameEndJS.cardma) {
            tagJiangma = this.ackGameEndJS.cardma.card;
        }
        if (tagJiangma) {
            var niaoCards = tagJiangma;
            if (niaoCards.length > 0) {
                layer = new cc.Layer();
                var length = niaoCards.length;
                for (var i = 0; i < niaoCards.length; i++) {
                    var card = new MJCard();
                    card.setValue(niaoCards[i], 0, CardType.Card_End, 0);
                    card.setAnchorPoint(cc.p(0.0, 1));
                    card.setScale(0.45);
                    var startX = 5;
                    var startY = -10;
                    var count = 6;
                    if (length > count) {
                        startY = length <= 14 ? 5 : 50;
                    }
                    card.setPosition(cc.p(startX + parseInt((i % count)) * card.getBoundingBox().width, startY - parseInt(i / count) * 35));
                    layer.addChild(card);
                }
            }
        }
        return layer;
    },

    updateContentView: function (ackGameEndJS) {
        this.ackGameEnd = ackGameEndJS.gameend;
        this.ackGameEndJS = ackGameEndJS;
        //输赢标志
        var seatId = MJModel.seatid;
        var score = this.ackGameEnd.Score[seatId];
        var effectName = "lose";
        if (score > 0) {
            effectName = "win";
        }
        this._win_effect(effectName);

        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);

        var itemHeight = 120;

        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;

            var countY = m;

            if (MJModel.mj_roomType == 1) {
                if (pos == 2) {
                    continue;
                }
            }

            if (MJModel.mj_roomType == 2) {
                if (pos == 1 || pos == 3) {
                    continue;
                }

                if (pos == 0) {
                    countY = 1;
                } else if (pos == 2) {
                    countY = 2;
                }
            }

            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 495 - count * itemHeight;
            var startX = 40;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX + 60, startY + 55));
            this.bgSpr.addChild(headLayer, 10);

            //上排牌 杠
            var ganghuLayer = this.createFanTypeLayer(seatid);
            this.bgSpr.addChild(ganghuLayer, 10);
            ganghuLayer.setPosition(cc.p(startX + 230, startY + 65));

            //下排牌
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX + 0, startY));
            this.bgSpr.addChild(handCardLayer);

            this.createSpecialHuTip(startX + 785, startY + 40, seatid);
            this.createAllScoreLabel(startX + 865, startY + 70, seatid);

            // 输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX + 1100, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            //中马列表
            var maLayer = this.createMaLayer(seatid);
            if (maLayer) {
                maLayer.setPosition(cc.p(startX + 840, startY + 80));
                this.bgSpr.addChild(maLayer);
            }
            count++;
        }

        this.createBottomMaLayer();
        this.addPaoConfig();
    },
    addPaoConfig: function () {
        var str = ""
        if (MJModel.RoomConfigID.indexOf(1194002) != -1) {
            str = "跑1";
        }

        if (MJModel.RoomConfigID.indexOf(1194003) != -1) {
            str = "跑3";
        }

        if (MJModel.RoomConfigID.indexOf(1194004) != -1) {
            str = "跑5";
        }

        if (MJModel.RoomConfigID.indexOf(1194005) != -1) {
            str = "跑10";
        }

        var maPic = new cc.LabelTTF(str, "Arial", 22);
        maPic.setColor(this.leftColor);
        maPic.setAnchorPoint(cc.p(0.5, 0.5));
        maPic.setPosition(cc.p(50, 47));
        this.bgSpr.addChild(maPic);

    },
    createFanTypeLayer: function (seatid) {
        //牌型
        //---
        var huType = ["", "", "", ""];
        for (var i = 0; i < this.ackGameEnd.faninfo.length; i++) {
            var specialType = this.ackGameEnd.faninfo[i].SpecialType;

            switch (specialType) {
                case HuType.HU_ZIMO:
                case HuType.HU_PAOHU:
                case HuType.HU_QIANG_GANG:
                case HuType.HU_GANG_SHANG_HUA:
                case HuType.HU_DIANPAO:
                    for (var j = 0; j < this.ackGameEnd.faninfo[i].addfan.length; j++) {
                        var add_fan = this.ackGameEnd.faninfo[i].addfan[j];
                        var add_type = add_fan.AddType;
                        var add_num = add_fan.AddNum;
                        huType[i] += this.getFanStr(add_type, add_num);
                    }
                    break;
            }

        }
        var ma_cards = [];
        var tagJiangma = this.ackGameEndJS.card;
        if (tagJiangma)var ma_cards = tagJiangma.card;

        if (ma_cards && ma_cards.length > 0) {
            //添加马分
            var ma_seatid = this.ackGameEndJS.hu_chairid;
            var ma_score = this.ackGameEndJS.ma_score;
            if (seatid == ma_seatid) {
                huType[seatid] = huType[seatid] + "马分+" + ma_score + " ";
            }
        }


        //藩型显示杠分
        //if (this.ackGameEnd.EndGangInfo) {
        //    for (var i = 0; i < this.ackGameEnd.EndGangInfo.length; i++) {
        //        var gangscore = this.ackGameEnd.EndGangInfo[i].TotalGangScore;
        //        if (gangscore) {
        //            var str = "";
        //            if (gangscore > 0)str = "+" + gangscore;
        //            if (gangscore < 0)str = gangscore;
        //            huType[i] = huType[i] + "杠分" + str + " ";
        //        }
        //    }
        //}

        var layer = new cc.Layer();
        var startx = 0;
        var y = 0;
        var maPic = new cc.LabelTTF(huType[seatid], "Arial", 22);
        maPic.setColor(this.leftColor);
        maPic.setAnchorPoint(cc.p(0.0, 0));
        maPic.setPosition(cc.p(startx, y + 7));
        layer.addChild(maPic);

        startx = maPic.getContentSize().width + 10;
        return layer;
    }
    ,
    getFanStr: function (fanType, num) {
        var str = AddFanNameArray[fanType];
        if (!str) {
            return "";
        }
        return "" + str + "x" + num + " ";
    },
    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var path = "";
            var ss = 1;
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5天和 6地和 7抢杠胡 8杠上开花 9花上添花
            switch (fanInfo.SpecialType) {
                case 1:
                    path = "RoomMJ/result2/zi_mo_icon.png";
                    break;
                case 2:
                    path = "RoomMJ/result2/pao_hu_icon.png";
                    break;
                case 3:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                case 5:
                    path = "RoomMJ/result2/qiang_gang_icon.png";
                    break;
                case 7:
                    path = "RoomMJ/result2/dian_pao_icon.png";
                    break;
                default:
                    break;
            }

            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setPosition(cc.p(startX, startY));
                typeSprite.setScale(ss);
                this.bgSpr.addChild(typeSprite);
            }
        }
    }
    ,
    createAllScoreLabel: function (startX, startY, seatid) {
        return;
        var ackGameEnd = this.ackGameEndJS;
        var endinfo = ackGameEnd.endinfo[seatid]


        var tagHu = this.ackGameEnd.faninfo[seatid].hucard;

        var gang_add = endinfo.gang_add;
        var lianbanker_add = endinfo.lianbanker_add;
        var hua_add = endinfo.hua_add;
        var sihua_add = endinfo.sihua_add;

        var hutypeStr = "";
        if (MJModel.banker_seatid == seatid) {
            hutypeStr += "连庄:" + ((lianbanker_add != null) ? lianbanker_add : 0);
        }
        if (tagHu) {
            if (hutypeStr != "") {
                hutypeStr += " ";
            }
            hutypeStr += "杠:" + ((gang_add != null) ? gang_add : 0);
            hutypeStr += " 花:" + ((hua_add != null) ? hua_add : 0);
            //hutypeStr += " 四花:" + ((sihua_add != null) ? sihua_add : 0);
        }

        var maPic = new cc.LabelTTF(hutypeStr, "Arial", 20);
        maPic.setColor(this.leftColor);
        maPic.setAnchorPoint(cc.p(0, 0));
        maPic.setPosition(cc.p(startX, startY));
        this.bgSpr.addChild(maPic);
    },
    //输赢分
    createScoreLayer: function (seatid) {
        var layer = new cc.Layer();
        var score = 0;
        var gangscore = 0;
        if (this.ackGameEnd.Score && this.ackGameEnd.Score.length > seatid) score = this.ackGameEnd.Score[seatid];
        if (this.ackGameEndJS.gangfen && this.ackGameEndJS.gangfen.length > seatid) gangscore = this.ackGameEndJS.gangfen[seatid];
        var width = 0;
        var path = getResPath("RoomMJ/result2/result_small_label_lose.png");
        if (score > 0) {
            path = getResPath("RoomMJ/result2/result_small_label_win.png");
        }
        var scoredes = ":";
        if (score == 0) scoredes = "";

        var gang_scoredes = ":";
        if (gangscore == 0) gang_scoredes = "";

        var maPic = new cc.LabelTTF("总分", "Arial", 23);
        maPic.setColor(this.leftColor);
        maPic.setAnchorPoint(cc.p(0.5, 0.5));
        maPic.setPosition(cc.p(width + 80, 40));
        layer.addChild(maPic);

        var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), path, 29, 37, '0');
        scoreLabel.setAnchorPoint(cc.p(0.5, 0.5));
        scoreLabel.setPosition(cc.p(width + 80, -10));
        scoreLabel.setName("scoreLabel");
        layer.addChild(scoreLabel);
        scoreLabel.setScale(0.5)

        var maPic = new cc.LabelTTF("杠分", "Arial", 23);
        maPic.setColor(this.leftColor);
        maPic.setAnchorPoint(cc.p(0.5, 0.5));
        maPic.setPosition(cc.p(width + 20, 40));
        layer.addChild(maPic);

        var path = getResPath("RoomMJ/result2/result_small_label_lose.png");
        if (gangscore > 0) {
            path = getResPath("RoomMJ/result2/result_small_label_win.png");
        }
        var scoreLabel = new cc.LabelAtlas(gang_scoredes + Math.abs(gangscore), path, 29, 37, '0');
        scoreLabel.setAnchorPoint(cc.p(0.5, 0.5));
        scoreLabel.setPosition(cc.p(width + 20, -10));
        scoreLabel.setName("gangScoreLabel");
        layer.addChild(scoreLabel);
        scoreLabel.setScale(0.5)

        return layer;
    }
    ,
});

var PiaoLayer = cc.Layer.extend({
    ctor: function () {
        this._super();
        var size = cc.director.getWinSize();
        var layout = new ccui.Layout();
        layout.setContentSize(size);
        layout.setAnchorPoint(cc.p(0, 0));
        layout.setPosition(cc.p(0, 0));
        layout.setTouchEnabled(true);
        layout.setSwallowTouches(true);
        layout.addClickEventListener(function (btn) {
        });
        this.addChild(layout);

        //添加蒙版
        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 70));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);
    },
    initPiao: function () {
        var self = this;
        var size = cc.director.getWinSize();
        var by = size.height / 2;
        var strs = ["xixian/action/btn_bufang.png", "xixian/action/btn_fangtou.png"];
        var dx = 300;
        var bx = size.width / 2 - dx * (strs.length - 1) * 0.5;
        for (var i = 0; i < strs.length; i++) {
            var submitBtn = new ccui.Button(getResPath(strs[i]), getResPath(strs[i]));
            submitBtn.setTag(i);
            submitBtn.setPosition(bx + i * dx, by);
            submitBtn.addClickEventListener(function (sender, evt) {
                self.removeFromParent(true);
                sendLingQiuPao(sender.getTag());
            });
            this.addChild(submitBtn);
        }
    },
});


//放头等待家界面
var PiaoWaitLayer = cc.Layer.extend({
    _isPiao: true,
    _isNotify: true,
    _items: [],
    ctor: function () {
        this._super();
    },
    initPiao: function (result) {
        var self = this;
        var size = cc.director.getWinSize();
        var bg = new cc.Sprite(getResPath("xixian/bg/wait_di_bg.png"));
        bg.setName("selectBg");
        bg.setPosition(MJConfig.getInfoPos());
        this.addChild(bg);
        this._bg = bg;

        var testData = result;

        this._items = [];
        for (var i = 0; i < MJModel.players.length; i++) {
            var player = MJModel.players[i];
            if (player.uid != -1) {
                this.addItem(player.name, testData[i]);
            }
        }
        this.updateItemPos();
    },

    addItem: function (name, type) {
        var size = this._bg.getContentSize();
        var str = "[ " + name + " ] ";
        if (type == 0) {
            str = str + "考虑中";
            this.leftColor = cc.color(135, 97, 69);
        } else {
            this.leftColor = cc.color(52, 205, 47);
            str = str + "已选择";
        }
        var item = new cc.LabelTTF(str, "Arial", 24);
        item.setAnchorPoint(cc.p(0.5, 0.5));
        item.setColor(this.leftColor);
        item.setPosition(cc.p(size.width / 2, size.height / 2));
        this._bg.addChild(item);
        this._items.push(item);
    },
    updateItemPos: function () {
        var size = this._bg.getContentSize();
        var offy = 25;
        var index = 0;
        var startY = 0;
        var allNum = this._items.length;

        if (allNum % 2 == 1) {
            startY = size.height / 2 + offy * parseInt(allNum / 2);
        } else {
            startY = size.height / 2 + offy * parseInt(allNum / 2) - offy / 2;
        }

        for (var i = 0; i < this._items.length; i++) {
            var opBtn = this._items[i];
            if (opBtn) {
                opBtn.setPosition(size.width / 2, startY - index * offy);
                index++;
            }
        }
        return index;
    },
    updatePiao: function (data) {
        this.removeAllItem();
        this._items = [];
        for (var i = 0; i < MJModel.players.length; i++) {
            var player = MJModel.players[i];
            if (player.uid != -1) {
                this.addItem(player.name, data[i]);
            }
        }
        this.updateItemPos();
    },
    removeAllItem: function () {
        this._bg.removeAllChildren();
        this._items = [];
    },
});
var sendLingQiuPao = function (v) {
    var packet = createPacket("proto.game.xixianmj.ReqChoosePiao");
    packet.piaonum = v;
    sendPacket(packet, selfCMD.CLIENT_MJ_CHOOSE_PIAO);
};

var JiangmaTips = cc.Layer.extend({
    ctor: function () {
        this._super();
    },

    showZhongNiaoBigTips: function (cards, ZhongChairID) {
        var length = cards.length;

        for (var i = 0; i < length; i++) {
            var zhongSeatId = ZhongChairID[i];
            var zhongLength = 0;
            var zhongIndex = 0;
            for (var m = 0; m < ZhongChairID.length; m++) {
                if (zhongSeatId == ZhongChairID[m]) {
                    zhongLength++;
                    if (m < i) {
                        zhongIndex++;
                    }
                }
            }
            var zhongPos = MJModel.getPosBySeatid(zhongSeatId);
            var cardValue = cards[i];

            var card = new MJCard();
            card.isMapai = true;
            card.setValue(cardValue, 0, CardType.Card_Hand, 0);
            card.setMyPosition(MJConfig.getNiaoBigCardPos(i, length));

            this.addChild(card);

            var endPos = MJConfig.getNiaoEndCardPos(zhongPos, zhongIndex, zhongLength);
            if (zhongSeatId >= 0 && zhongSeatId <= 3) {
                card.setLocalZOrder(100);
                var callback = cc.callFunc(function () {
                    this.setZhongMaColor(0);
                }, card);
                if (this.isNeedMove(length)) {
                    card.runAction(cc.sequence(cc.delayTime(1), callback, cc.moveTo(0.5, endPos)));
                } else {
                    card.runAction(cc.sequence(cc.delayTime(1), callback));
                }
            } else {
                endPos = MJConfig.getNiaoBigCardPos(zhongIndex, zhongLength);
                var callback = cc.callFunc(function () {
                    this.setBlackVis(true);
                }, card);
                if (this.isNeedMove(length)) {
                    card.runAction(cc.sequence(cc.delayTime(1), callback, cc.moveTo(0.5, endPos)));
                } else {
                    card.runAction(cc.sequence(cc.delayTime(1), callback));
                }
            }
        }
        this.playJiangmaSound();
    },

    isNeedMove: function (length) {
        if (length > 15) {
            return false;
        }
        return true;
    },

    playJiangmaSound: function () {
    },
});
