/**
 * Created by jasenwu on 18/8/9.
 */
/**
 * Created by jasenwu on 18/8/8.
 */
loadProtoFile("proto/qibeigameproto.proto");

var PackgName = {
    tianmen_san: 149,//202  149，线上157
    tianmen_si: 150,//202  150，线上158
};

var LaiZiGangType = {
    TYPE_LAIZI_GANG: 0x10000,
    TYPE_HONGZHONG_GANG: 0x20000,
    TYPE_LAIZIPI_GANG: 0x80000
};

var HuBeiGangPai = {
    HongZhong: 0x41,
};

var selCMD = {
    SERVER_UPDATE_BEISHU: 5071,
};

var HuType = {
    HU_INVALID: 0,
    HU_ZIMO: 1,
    HU_PAOHU: 2,
    HU_HeiMo: 2,
    Hu_RuanMo: 1,
    HU_DIANPAO: 3,
    HU_BEIZIMO: 4,
    HU_QIANG_GANG: 5,
    HU_BEI_QIANG_GANG: 6,
    HU_YI_PAO_DUO_XIANG: 7,
    HU_GANG_SHANG_HUA: 8,
    HU_GANG_HOU_PAO: 9,
    HU_SHUA_HOU_HU: 10,
    HU_QIANG_ZHI_GANG: 11,	//抢直杠
};

var AddFanType = {
    MJ_FAN_TYPE_PINGHU: 17,					//平胡
    MJ_FAN_TYPE_LONGQIDUI: 27,					//龙七对
    MJ_FAN_TYPE_QINGYISE: 14,					//清一色
    MJ_FAN_TYPE_QUANQIUREN: 28,				//全求人
    MJ_FAN_TYPE_FENGYISE: 31,					//风一色
    MJ_FAN_TYPE_PENGPENGHU: 16,				//碰碰胡
    MJ_FAN_TYPE_QIDUI: 36,						//七对
    MJ_FAN_TYPE_JIANGYISE: 47,					//将一色
    MJ_FAN_TYPE_GANGSHANGHUA: 24,				//杠上开花
    MJ_FAN_TYPE_HAIDILAOYUE: 23,				//海底胡
};

var DaHuType = [
    AddFanType.MJ_FAN_TYPE_PINGHU,					//平胡
    AddFanType.MJ_FAN_TYPE_LONGQIDUI,
    AddFanType.MJ_FAN_TYPE_QINGYISE,
    AddFanType.MJ_FAN_TYPE_QUANQIUREN,
    AddFanType.MJ_FAN_TYPE_FENGYISE,
    AddFanType.MJ_FAN_TYPE_PENGPENGHU,
    AddFanType.MJ_FAN_TYPE_QIDUI,
    AddFanType.MJ_FAN_TYPE_JIANGYISE,
    AddFanType.MJ_FAN_TYPE_HAIDILAOYUE,
    AddFanType.MJ_FAN_TYPE_GANGSHANGHUA,
];

var DaHuType_HH = {
    24: "杠上开花",
    23: "海底胡",
    17: "平胡",
};

var AddFanName = {
    1: "风番",
    2: "将番",
    3: "豹番",
    4: "元宝番",
};

var MJTable_Qibei = MJTable.extend({
    tag: "MJTable_Qibei",
    _curLaizi: -1,
    _curLaizipi: -1,
    _curLaizipi2: -1,
    _curLaizi_bg: null,
    _allGangCard: [[], [], [], []],
    _allBeiShu: [null, null, null, null],
    _allBeiShu_Nums: [1, 1, 1, 1],
    isRecordShow: false,
    _ResultCount: 0,
    _daojishiLabel: null,
    _isLeftStyle: null,
    _pkg_id: 0,
    _oldBanker: -1,
    _bao_nums: [0, 0, 0, 0],
    _hongzhong_nums: [0, 0, 0, 0],
    _gang_nums: [0, 0, 0, 0],
    _gang_tip: false,
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        MJModel.mj_suport_fangyan = 1;
        MJModel.otherOutCardEffect = true;
        MJModel.outCardEffect_style = 1;

        MJModel.mj_style = 1;
        MJModel.mj_bg_use = 1;
        MJModel.mj_bg_color = 1;
        MJModel.mj_suport_change_bg = 1;
        MJModel.toupiaoTipsType = 1;
        MJModel.chi_layout = 3;
        MJModel.needTipWhenPass = 0;
        MJModel.mj_touch_tip = 1;
        MJModel.isOutCard = true;
        MJModel.mj_chat_style = 5;
        MJModel.mj_gps_type = 1;
        MJModel.mj_public_style = 1;
        MJModel.shareType = 1;

        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];
            if (this._pkg_id == 2569 || this._pkg_id == 2471) {
                MJModel.mj_roomType = 0;
            }
            else if (this._pkg_id == 3510 || this._pkg_id == 3296) {
                MJModel.mj_roomType = 1;
            }
            else if (this._pkg_id == 3511 || this._pkg_id == 3297) {
                MJModel.mj_roomType = 2;
            }
        } catch (e) {
            Log(this, e);
        }

        try {
            var help = this.roomPublic.getChildByName("game_help");
            help.setVisible(false);
        } catch (e) {

        }

        this._init_extend();
        this._super();
        //this.schedule(this.test, 1.0);
    },

    updateBaoPiUI: function () {
        for (var i = 0; i < 4; i++) {
            this.setPlayerBaoPi(i, this._bao_nums[i], this._hongzhong_nums[i]);
        }
    },

    hideBaoPiUI: function () {
        for (var i = 0; i < 4; i++) {
            if (this._allbao[i])this._allbao[i].setVisible(false);
            if (this._allpi[i])this._allpi[i].setVisible(false);
        }
    },

    _allbao: [null, null, null, null],
    _allpi: [null, null, null, null],
    setPlayerBaoPi: function (pos, bao, pi) {
        Log(this, "setPlayerBaoPi");
        var sp = this._allbao[pos];
        if (sp == null) {
            sp = new cc.Sprite(getResPath("qibei/flag/bao.png"));
            var m_pMoney = new cc.LabelAtlas(bao, getResPath("RoomMJ/player/money.png"), 12, 22, '0');//new cc.LabelTTF("0", "Thonburi", 20);
            m_pMoney.setName("text");
            m_pMoney.setAnchorPoint(cc.p(0, 0.5));
            m_pMoney.setPosition(sp.getContentSize().width, sp.getContentSize().height / 2);
            sp.addChild(m_pMoney);
            this._allbao[pos] = sp;

            var player = this.players[pos];
            var p = MJConfig.getPlayerPos(pos);
            sp.setPosition(player.m_size.width / 2 - (pos != 1 ? 27 : 30) + (pos != 2 ? 0 : 80), player.m_size.height / 2 - player.m_size.height / 2 + (pos != 2 ? 110 : 80));
            player.addChild(sp, 12);
        } else {
            sp.getChildByName("text").setString(bao);
            sp.setVisible(true);
        }

        var sp = this._allpi[pos];
        if (sp == null) {
            sp = new cc.Sprite(getResPath("qibei/flag/pi.png"));
            var m_pMoney = new cc.LabelAtlas(pi, getResPath("RoomMJ/player/money.png"), 12, 22, '0');//new cc.LabelTTF("0", "Thonburi", 20);
            m_pMoney.setName("text");
            m_pMoney.setAnchorPoint(cc.p(0, 0.5));
            m_pMoney.setPosition(sp.getContentSize().width, sp.getContentSize().height / 2);
            sp.addChild(m_pMoney);
            this._allpi[pos] = sp;

            var player = this.players[pos];
            var p = MJConfig.getPlayerPos(pos);
            sp.setPosition(player.m_size.width / 2 - (pos != 1 ? 27 : 30) + 40 + (pos != 2 ? 0 : 80), player.m_size.height / 2 - player.m_size.height / 2 + (pos != 2 ? 110 : 80));
            player.addChild(sp, 12);
        } else {
            sp.getChildByName("text").setString(pi);
            sp.setVisible(true);
        }
    },

    isSupportPublicCard: function () {
        return false;
    },

    //loadCardConfig: function (path) {
    //    this._super(path);
    //    if (MJModel.mj_bg_color == 0) {
    //        Utils.addCardSprites(MJModel.mj_bg_use == 0 ? "RoomMJ/cards/card_25d" : "RoomMJ/cards/card_2d");
    //    }
    //    else {
    //        Utils.addCardSprites(MJModel.mj_bg_use == 0 ? "qibei/cards/card_zhangxin25d" : "qibei/cards/card_zhangxin2d");
    //    }
    //},

    getMjTypePath: function () {
        var pkg_id = 1;
        return __String.createWithFormat(getResPath("qibei/flag/pkgid%1.png"), pkg_id);
    },

    //getBgStr: function () {
    //    if (MJModel.mj_bg_use == 0) {
    //        return "qibei/bgs/bg25d_" + MJModel.mj_bg_color + ".png";
    //    } else {
    //        return "qibei/bgs/bg2d_" + MJModel.mj_bg_color + ".png";
    //    }
    //},
    updateBg: function (isInit) {
        if (isInit == undefined)isInit = false;

        var size = cc.director.getWinSize();
        if (this.bg == null) {
            this.bg = new ccui.ImageView(getResPath(this.getBgStr()));
            this.bg.setAnchorPoint(cc.p(0.5, 0.5));
            this.bg.setContentSize(size);
            this.bg.setScale9Enabled(true);
            this.bg.setPosition(size.width / 2, size.height / 2);
            this.addChild(this.bg, -100);
        } else {
            //this.bg.setTexture(getResPath(this.getBgStr()));
            this.bg.loadTexture(getResPath(this.getBgStr()));
        }

        Utils.addCardSprites(__String.createWithFormat("RoomMJ/cards/%1_%2_%3_debug", MJModel.mj_font, MJModel.mj_fontSize, MJModel.mj_table_view));

        if (MJModel.mj_roomType == 2) {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config_2ren.json" : "RoomMJ/config/card_config2d_2ren.json");
        } else {
            this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config.json" : "RoomMJ/config/card_config2d.json");
        }
        if (isInit)return;
        //this.loadCardConfig(MJModel.mj_bg_use == 0 ? "RoomMJ/config/card_config.json" : "RoomMJ/config/card_config2d.json");
        this._has_show_pi_flag = false;
        this.room_Card.reflashAllCardUI();
        if (this.room_Info)this.room_Info.reflash();
        this.updateLaiziPos();
        this.updateBaoPiUI();
        for (var i = 0; i < 4; i++) {
            var player = this.players[i];
            player.setPosition(MJConfig.getPlayerPos(i));
            player.reflashNameMoneyPosition();
        }
    },

    myselfCloseOutCard: function () {
        this._super();
        MJModel.mj_table.room_Action.removeChildByName("ChooseGang_selectLayer");
    },

    myselfOpenOutCard: function (IsMoCard, showTip) {
        this._super(IsMoCard, showTip);
        if (MJModel.isOnVideo == false && this._gang_tip == false) {
            var hasGang = false;
            for (var i = 0; i < this.room_Card.hand_card[0].length; i++) {
                var v = this.room_Card.hand_card[0][i].getValue();
                if (v == this._curLaizi || v == this._curLaizipi || v == this._curLaizipi2) {
                    hasGang = true;
                    break;
                }
            }

            if (hasGang) {
                var size = cc.director.getWinSize();
                var selectLayer = new cc.Sprite(getResPath("qibei/flag/gang_tip.png"));
                selectLayer.setName("ChooseGang_selectLayer");
                selectLayer.setPosition(cc.p(size.width / 2, 200));
                MJModel.mj_table.room_Action.addChild(selectLayer, 10000);
            }
        }
    },

    _init_extend: function () {
        var self_table = this;

        Setting.prototype.showPaiBanView = function () {
            this._gameSettingLayer.getChildByName("light_title").setVisible(false);
            this.checkboxs_gamesetting["paiban_horizontal"].setVisible(false);
            this.checkboxs_gamesetting["paiban_vertical"].setVisible(false);
        };

        MJCards.prototype.initPublicCard = function (sceneInfo) {
            if (!self_table.isSupportPublicCard()) {
                return;
            }
            var cardList = MJModel.mj_public_nums;
            for (var pos = 0; pos < cardList.length; pos++) {
                for (var i = 0; i < cardList[pos]; i++) {
                    var card = new MJCard();
                    card.setValue(0, pos, CardType.Card_Public, i);
                    this.public_card[pos].push(card);
                    card.setMyPosition(MJConfig.getPublicCardPos(pos, i));
                    this.addChild(card, MJConfig.getPublicCardOrder(pos, i));
                }
            }
        };

        MJConfig.getHuCardPos = function (pos, index) {
            index = index % 12;
            if ((pos == 1 || pos == 3) && MJModel.mj_bg_use == 1 && MJModel.mj_paiban == "vertical") {
                return this.getWorldPosition("hu_v_" + pos, "h_" + index);

            } else {
                if (MJModel.mj_bg_use == 0) {
                    var startIdex = 4;
                    if (pos == 0) {
                        startIdex = 5;
                    }
                    var index_new = startIdex + index * 2;
                    var p = MJConfig.getPublicCardPos(pos, index_new);
                    if (MJModel.mj_roomType == 2) {
                        if (pos == 0) {
                            p.y = p.y - 10;
                            p.x = p.x - 5 * index
                        } else {
                            p.y = p.y + 10;
                            p.x = p.x + 6 * index
                        }
                    }
                    return p;
                } else {
                    return this.getWorldPosition("hu_" + pos, "h_" + index);
                }

            }
        };

        MJConfig.getHuCardOrder = function (pos, index) {
            index = index % 12;
            if (MJModel.mj_bg_use == 0) {
                index = index * 2;
                return MJConfig.getPublicCardOrder(pos, index);
            } else {
                var order = [
                    [
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ],
                    [
                        11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,
                    ],
                    [
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    ],
                    [
                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
                    ],
                ];
                return order[pos][index];
            }
        };

        var super_clickHandCardCallback = MJCards.prototype.clickHandCardCallback;
        MJCards.prototype.clickHandCardCallback = function (n) {
            var card = n;
            if (MJModel.canChoiceMore) {
                if (MJModel.canChoiceMoreType == 1) {
                    //选择多个杠的时刻
                    var size = MJModel.gang_info.length;
                    for (var j = 0; j < size; j++) {
                        var gif = MJModel.gang_info[j];
                        if (card.getValue() == gif.curCard) {
                            MJModel.canTouchCard = false;
                            MJModel.canChoiceMore = false;
                            MJModel.canChoiceMoreType = 0;
                            sendOperateCard(MJModel.gang_info[j].state, MJModel.gang_info[j].curCard);
                            MJModel.mj_table.room_Action.setOperator(-1);
                            MJModel.mj_table.room_Action.removeChildByName("ChooseGang_selectLayer");
                            return;
                        }

                        if (card.getValue() == self_table._curLaizi || card.getValue() == self_table._curLaizipi || card.getValue() == self_table._curLaizipi2) {
                            MJModel.canTouchCard = false;
                            MJModel.canChoiceMore = false;
                            MJModel.canChoiceMoreType = 0;
                            sendOutCard(card.getValue());
                            MJModel.mj_table.room_Action.setOperator(-1);
                            MJModel.mj_table.room_Action.removeChildByName("ChooseGang_selectLayer");
                            return;
                        }
                    }
                }
            }
            super_clickHandCardCallback.call(this, n);
        };

        var super_btnCallback = MJAction.prototype.btnCallback;
        MJAction.prototype.btnCallback = function (ref) {
            if (MJModel.outtimeplayers.length > 1) {
                MJModel.mj_table.room_Tip.setAutoEndRoomVis(true);
            }
            var n = ref;
            var name = n.getName();
            Log(this, "btnCallback:" + name);
            var self = this;

            if (name == "gang") {
                var op = MJModel.curOperate;
                if ((op & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG || (op & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
                    var gangCards = [];

                    for (var j = 0; j < MJModel.gang_info.length; j++) {
                        var gif = MJModel.gang_info[j];
                        var value = gif.curCard;
                        gangCards.push(value);
                    }
                    if (self_table._curLaizi != -1)gangCards.push(self_table._curLaizi);
                    if (self_table._curLaizipi != -1)gangCards.push(self_table._curLaizipi);
                    if (self_table._curLaizipi2 != -1)gangCards.push(self_table._curLaizipi2);

                    var nums = MJModel.gang_info.length;
                    var needTip = false;
                    for (var i = 0; i < MJModel.mj_table.room_Card.hand_card[0].length; i++) {
                        var card = MJModel.mj_table.room_Card.hand_card[0][i];
                        if (card.getValue() == self_table._curLaizi || card.getValue() == self_table._curLaizipi || card.getValue() == self_table._curLaizipi2) {
                            nums++;
                            needTip = true;
                        }
                    }
                    if (nums > 1) {
                        this.removeChildByName("ChooseGang_selectLayer");
                        self.setOperator(-1);

                        var size = cc.director.getWinSize();
                        var selectLayer = new cc.Sprite(getResPath("RoomMJ/gang_tip.png"));
                        selectLayer.setName("ChooseGang_selectLayer");
                        selectLayer.setPosition(cc.p(size.width / 2, 200));
                        this.addChild(selectLayer, 10000);

                        if (needTip) {
                            var gangtip = new cc.Sprite(getResPath("qibei/flag/gang_tip.png"));
                            gangtip.setPosition(cc.p(selectLayer.getContentSize().width / 2, selectLayer.getContentSize().height + gangtip.getContentSize().height));
                            selectLayer.addChild(gangtip, 10000);
                        }

                        n.setVisible(false);

                        MJModel.canTouchCard = true;
                        MJModel.canChoiceMore = true;
                        MJModel.canChoiceMoreType = 1;

                        var colors = [cc.color(148, 202, 230), cc.color(104, 223, 212), cc.color(201, 204, 164), cc.color(205, 184, 212), cc.color(148, 202, 230), cc.color(104, 223, 212), cc.color(201, 204, 164), cc.color(205, 184, 212)];

                        for (var i = 0; i < MJModel.mj_table.room_Card.hand_card[0].length; i++) {
                            var card = MJModel.mj_table.room_Card.hand_card[0][i];
                            var index = gangCards.indexOf(card.getValue());
                            if (index >= 0) {
                                card.setCardTouchEnable(true);
                                card.setUp(true);
                                card.setTempColor(colors[index]);
                            } else {
                                card.setCardTouchEnable(false);
                                card.setUp(false);
                                card.resetColor();
                            }
                        }
                        return;
                    }
                }
            }

            super_btnCallback.call(this, ref);
        };

        var super_setOperator = MJAction.prototype.setOperator;
        MJAction.prototype.setOperator = function (operat, operat2) {
            if (operat2 == HuType.HU_QIANG_GANG || operat2 == HuType.HU_QIANG_ZHI_GANG) {
                this.actions["hu"].loadTextures(getResPath("RoomMJ/action/qianggang1.png"), getResPath("RoomMJ/action/qianggang1.png"), "");
            } else {
                this.actions["hu"].loadTextures(getResPath("RoomMJ/action/hu1.png"), getResPath("RoomMJ/action/hu1.png"), "");
            }
            super_setOperator.call(this, operat, operat2);
        };

        var super_getPlayerPos = MJConfig.getPlayerPos;
        MJConfig.getPlayerPos = function (pos) {
            var p = super_getPlayerPos.call(this, pos);
            if (pos == 3 && MJModel.mj_bg_use == 1)p.y -= 50;
            if (pos == 2)p.x += 15;
            return p;
        };

        var super_addOutCard = MJCards.prototype.addOutCard;
        MJCards.prototype.addOutCard = function (pos, value, showPoint) {
            if (value == self_table._curLaizi) {
                self_table._bao_nums[pos]++;
            }
            if (value == 0x41) {
                self_table._hongzhong_nums[pos]++;
            }
            self_table.updateBaoPiUI();
            if (value == 0x41 || value == self_table._curLaizi) {
                return this.addHuCard(pos, value);
            }
            return super_addOutCard.call(this, pos, value, showPoint);
        };

        MJCards.prototype.outHandCardEffct = function (pos, value, out_card_pos) {
            this.outHandCardEffct2(pos, value);
        };

        //去掉出牌按钮
        MJCards.prototype.createOutCardBtn = function () {
        };

        MJCards.prototype.sortCard = function (a, b) {
            return self_table._sortCard(a, b);
        };

        var superTipCtor = MJTips.prototype.ctor;
        MJTips.prototype.ctor = function () {
            superTipCtor.call(this);
            var size = cc.director.getWinSize();
            this.my_tip.setPosition(cc.p(size.width / 2, size.height / 2 - 190));
            this.tip.setPosition(cc.p(size.width / 2, size.height / 2 - 190));
        };

        MJCard.prototype.check_addFlag = function () {
            self_table._checkAddCardFlag(this);
        };

        //湖北麻将不要自动胡牌功能
        MJAction.prototype.setAutoOutCardVis = function (value) {
        };
    },

    playBgSound: function () {
        Sound.getInstance().PlayBgSound(getResPath("qibei/sound/music_hall.mp3"));
    },
    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.getValue();
            if (typeof b === "object") bv = b.getValue();

            if (av == this._curLaizi && bv != this._curLaizi)return 1;//赖子放在最前边
            if (av != this._curLaizi && bv == this._curLaizi)return -1;//赖子放在最前边

            if (av == HuBeiGangPai.HongZhong && bv != HuBeiGangPai.HongZhong)return 1;//红中放在最前边
            if (av != HuBeiGangPai.HongZhong && bv == HuBeiGangPai.HongZhong)return -1;//红中放在最前边

            return bv - av;
        } catch (e) {
            return 0;
        }
    },
    test: function (dt) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;
        if (tempCount == 5 && true) {
            this.room_Card.reset();
            JsUtils.postNotifi("notify_game_check_end");//为了刷新局数 或者  开始倒计时
            //this._showNiaoEffect([0], [0x01, 0x11, 0x02, 0x25, 0x24, 0x21]);
            //return;
            var packet = {
                "gameend": {
                    "UserCard": [{
                        "ChangeableCardsLen": 4,
                        "ChangeableCards": [19, 22, 23, 24],
                        "FixedCardsLen": 3,
                        "stFixedCards": [{
                            "CardData": 39,
                            "state": 256,
                            "chairID": 3,
                            "OpCards": [],
                            "LaiziNum": null
                        }, {"CardData": 6, "state": 128, "chairID": 3, "OpCards": [], "LaiziNum": null}, {
                            "CardData": 25,
                            "state": 1,
                            "chairID": 1,
                            "OpCards": [],
                            "LaiziNum": null
                        }],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 10,
                        "ChangeableCards": [6, 8, 9, 9, 17, 17, 18, 22, 35, 36],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{"CardData": 66, "state": 1, "chairID": 2, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 10,
                        "ChangeableCards": [1, 2, 7, 7, 20, 23, 35, 35, 39, 40],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{"CardData": 50, "state": 2, "chairID": 3, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }, {
                        "ChangeableCardsLen": 10,
                        "ChangeableCards": [4, 17, 18, 20, 20, 22, 23, 36, 37, 38],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{"CardData": 8, "state": 128, "chairID": 2, "OpCards": [], "LaiziNum": null}],
                        "stFenZhangCard": null
                    }],
                    "Score": [10, -10, 3, -3],
                    "EndState": 0,
                    "EndGangInfo": [{
                        "Gang": [{"GangType": 65536, "GangCard": 41}],
                        "TotalGangScore": 0
                    }, {
                        "Gang": [{"GangType": 65536, "GangCard": 65}, {"GangType": 65536, "GangCard": 65}],
                        "TotalGangScore": 0
                    }, {
                        "Gang": [{"GangType": 65536, "GangCard": 65}, {"GangType": 65536, "GangCard": 41}, {
                            "GangType": 2,
                            "GangCard": 50
                        }], "TotalGangScore": 3
                    }, {
                        "Gang": [{"GangType": 65536, "GangCard": 41}, {"GangType": 32, "GangCard": 50}],
                        "TotalGangScore": -3
                    }],
                    "faninfo": [{
                        "chairid": 0,
                        "SpecialType": 2,
                        "FanNum": 1,
                        "addfan": [{"AddType": 17, "AddNum": 1, "AddType2": null}],
                        "hucard": 19,
                        "DianPao": []
                    }, {
                        "chairid": 1,
                        "SpecialType": 3,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 2,
                        "SpecialType": 0,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {"chairid": 3, "SpecialType": 0, "FanNum": 0, "addfan": [], "hucard": 0, "DianPao": []}],
                    "money": [100010, 99990, 100003, 99997],
                    "ts": null,
                    "md5": []
                },
                "endinfo": [{
                    "hongzhonggang_count": null,
                    "hongzhonggang_add": null,
                    "laizigang_count": null,
                    "laizigang_add": null,
                    "minggang_count": null,
                    "minggang_add": null,
                    "angang_count": null,
                    "angang_add": null,
                    "yinghu_count": 1,
                    "yinghu_add": 1,
                    "hupai_count": null,
                    "hupai_add": null,
                    "total_score": 30,
                    "facaigang_count": null,
                    "facaigang_add": null,
                    "kaikou_count": null,
                    "kaikou_add": null,
                    "dianpao_count": null,
                    "dianpao_add": null,
                    "zimo_count": null,
                    "zimo_add": null,
                    "laizipigang_count": null,
                    "laizipigang_add": null,
                    "gangkai_count": null,
                    "gangkai_add": null,
                    "laizigangpai": [],
                    "fanid": null
                }, {
                    "hongzhonggang_count": null,
                    "hongzhonggang_add": null,
                    "laizigang_count": null,
                    "laizigang_add": null,
                    "minggang_count": null,
                    "minggang_add": null,
                    "angang_count": null,
                    "angang_add": null,
                    "yinghu_count": null,
                    "yinghu_add": null,
                    "hupai_count": null,
                    "hupai_add": null,
                    "total_score": 10,
                    "facaigang_count": null,
                    "facaigang_add": null,
                    "kaikou_count": null,
                    "kaikou_add": null,
                    "dianpao_count": null,
                    "dianpao_add": null,
                    "zimo_count": null,
                    "zimo_add": null,
                    "laizipigang_count": null,
                    "laizipigang_add": null,
                    "gangkai_count": null,
                    "gangkai_add": null,
                    "laizigangpai": [],
                    "fanid": null
                }, {
                    "hongzhonggang_count": null,
                    "hongzhonggang_add": null,
                    "laizigang_count": null,
                    "laizigang_add": null,
                    "minggang_count": null,
                    "minggang_add": null,
                    "angang_count": null,
                    "angang_add": null,
                    "yinghu_count": null,
                    "yinghu_add": null,
                    "hupai_count": null,
                    "hupai_add": null,
                    "total_score": 10,
                    "facaigang_count": null,
                    "facaigang_add": null,
                    "kaikou_count": null,
                    "kaikou_add": null,
                    "dianpao_count": null,
                    "dianpao_add": null,
                    "zimo_count": null,
                    "zimo_add": null,
                    "laizipigang_count": null,
                    "laizipigang_add": null,
                    "gangkai_count": null,
                    "gangkai_add": null,
                    "laizigangpai": [],
                    "fanid": null
                }, {
                    "hongzhonggang_count": null,
                    "hongzhonggang_add": null,
                    "laizigang_count": null,
                    "laizigang_add": null,
                    "minggang_count": null,
                    "minggang_add": null,
                    "angang_count": null,
                    "angang_add": null,
                    "yinghu_count": null,
                    "yinghu_add": null,
                    "hupai_count": null,
                    "hupai_add": null,
                    "total_score": 10,
                    "facaigang_count": null,
                    "facaigang_add": null,
                    "kaikou_count": null,
                    "kaikou_add": null,
                    "dianpao_count": null,
                    "dianpao_add": null,
                    "zimo_count": null,
                    "zimo_add": null,
                    "laizipigang_count": null,
                    "laizipigang_add": null,
                    "gangkai_count": null,
                    "gangkai_add": null,
                    "laizigangpai": [],
                    "fanid": null
                }],
                "stShowCardPool": [{
                    "seat_id": 1,
                    "PoolCard": [24, 17, 34, 4, 21, 37, 21, 33, 19, 34, 22, 66, 35, 52, 25]
                }, {"seat_id": 2, "PoolCard": [36, 51, 3, 2, 1, 49, 18, 21, 67, 19, 49, 9, 24, 2]}, {
                    "seat_id": 3,
                    "PoolCard": [1, 33, 39, 5, 38, 3, 20, 51, 49, 51, 5, 3, 21, 23]
                }, {"seat_id": 0, "PoolCard": [65, 67, 51, 8, 41, 24, 18, 33, 38, 4, 2, 8, 36, 67]}],
                "HuChaird": 0,
                "BuPaiZhangShu": 57
            };
            this.handler_server_game_end_bc(packet, true);
        }

        if (tempCount == 5 && false) {
            //MJModel.seatid = 0;
            //MJModel.mj_style = 1;
            //MJModel.mj_card_lib_type = 1;
            //this._pkg_id = PackgName.xiantao;
            this._curLaizi = 0x01;

            //摊开手牌
            if (false) {
                var cardlist = [];
                for (var k = 1; k <= 14; k++) {
                    var v = Utils.Random(0, 2) * 16 + Utils.Random(1, 9);
                    cardlist.push(v);
                }
                this.room_Card.showEndCard(0, cardlist, cardlist[0], true);
                this.room_Card.showEndCard(1, cardlist, cardlist[0], false);
                this.room_Card.showEndCard(2, cardlist, cardlist[0], false);
                this.room_Card.showEndCard(3, cardlist, cardlist[0], false);
                return;
            }
            JsUtils.postNotifi("notify_game_check_end");//为了刷新局数 或者  开始倒计时
            this.room_Info.setVisible(true);
            this.room_Info.showDirectionTip(0);
            this.room_Info.showTime(99);
            MJModel.canTouchCard = true;
            MJModel.seatid = 0;
            var cardlist = [];
            for (var k = 1; k <= 13; k++) {
                var v = Utils.Random(0, 2) * 16 + Utils.Random(1, 9);
                cardlist.push(v);
            }

            this.room_Card.initHandCard(0, [1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 9, 9]);
            this.room_Card.reflashHandCard(0, true);

            cardlist = [];
            for (var k = 1; k <= 1; k++) {
                var v = Utils.Random(0, 2) * 16 + Utils.Random(1, 9);
                cardlist.push(0);
            }

            this.room_Card.initHandCard(1, cardlist);
            this.room_Card.reflashHandCard(1, true);

            this.room_Card.initHandCard(2, cardlist);
            this.room_Card.reflashHandCard(2, true);

            this.room_Card.initHandCard(3, cardlist);
            this.room_Card.reflashHandCard(3, true);

            //this.room_Card.initMoCard(0, 1, false);
            //this.room_Card.initMoCard(1, 0, false);
            //this.room_Card.initMoCard(2, 0, false);
            //this.room_Card.initMoCard(3, 0, false);

            for (var i = 1; i < 4; i++) {
                this.room_Card.addPengCard(i, PengType.Peng_Peng, 1, 0, 0);
                this.room_Card.addPengCard(i, PengType.Peng_AnKang, 1, 0, 0);
                this.room_Card.addPengCard(i, PengType.Peng_Kang, 1, 0, 0);
                this.room_Card.addPengCard(i, PengType.Peng_Peng, 1, 0, 0);
            }

            for (var j = 0; j < 4; j++) {
                for (var i = 0; i < 14; i++) {
                    var v = 1;//Utils.Random(0, 2) * 16 + Utils.Random(1, 9);
                    this.room_Card.addOutCard(j, v);
                }
            }

            //for (var i = 0; i < 4; i++) {
            //    for (var j = 0; j < 12; j++) {
            //        var v = Utils.Random(0, 2) * 16 + Utils.Random(1, 9);
            //        this._addGangCard(i, v);
            //    }
            //}

            //this._initZhongMaCard([0, 0, 0, 0], [1, 2, 3, 4], true);
            //this._initZhongMaCard([1, 1, 1, 1], [1, 2, 3, 4], true);
            //this._initZhongMaCard([2, 2, 2, 2], [1, 2, 3, 4], true);
            //this._initZhongMaCard([3, 3, 3, 3], [1, 2, 3, 4], true);
            //
            //this._show_game_end_detail("");
        }

        if (tempCount == 5 && false) {
            var allPreCars = [];
            var allLaiZi = [];
            for (var i = 0; i < this.room_Card.hand_card[0].length; i++) {
                var card = this.room_Card.hand_card[0][i];
                if (card.getValue() == 9) {
                    allLaiZi.push(card);
                } else {
                    if (allLaiZi.length > 0) {
                        break;
                    }
                    allPreCars.push(card);
                }
            }
            if (allLaiZi.length > 0 && allPreCars.length > 0) {
                var allDelay = 0;
                for (var i = 0; i < allLaiZi.length; i++) {
                    var card = allLaiZi[i];
                    var begin_pos = card.getPosition();
                    var end_pos = MJConfig.getHandCardPos(0, i, 12);
                    var allL = Math.abs(end_pos.x - begin_pos.x);
                    var time = allL / 1800;
                    card.runAction(cc.sequence(cc.delayTime(allDelay), cc.spawn(cc.rotateTo(0.1, 15), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + 100))), cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y + 100)).easing(cc.easeSineOut()), cc.spawn(cc.rotateTo(0.1, 0), cc.moveTo(0.17, end_pos))));
                    allDelay += 1;
                }
                for (var i = 0; i < allPreCars.length; i++) {
                    var card = allPreCars[i];
                    card.runAction(cc.sequence(cc.moveBy(0.3, cc.p(83, 0)), cc.delayTime(1 - 0.3)).repeat(allLaiZi.length));
                }
            }
        }

        if (tempCount % 5 == 0 && false) {
            var str = PlatformHelper.getGPSInfo();
            var json = JSON.parse(str);
            PlatformHelper.showToast("GPS:" + json.city);
        }

        if (tempCount % 5 == 0 && false) {
            var d = parseInt(tempCount / 5);
            var pos = 2;
            this.room_Tip.reset();
            if (d == 1) {
                this.room_Tip.showEffect(2, ActionType.TYPE_PENG, true);
            } else if (d == 2) {
                this.room_Tip.showEffect(2, ActionType.TYPE_ANGANG, true);
            } else if (d == 3) {
                this.room_Tip.showEffect(2, ActionType.TYPE_HU, false);
            } else if (d == 4) {
                //this.room_Tip.showEffect(2, ActionType.TYPE_HU, true);
                this._show_hu_effect(2, "zimo");
            } else if (d == 5) {
                this._show_xiao_effect(2, "piao");
            } else if (d == 6) {
                this._show_xiao_effect(2, "xiaochaotian");
            } else if (d == 7) {
                this._show_xiao_effect(2, "huitouxiao");
            } else if (d == 8) {
                this._show_xiao_effect(2, "mengxiao");
            } else if (d == 9) {
                this._show_xiao_effect(2, "dianxiao");
            } else if (d == 10) {
                this._show_xiao_effect(2, "dachaotian");
            } else if (d == 11) {
                this._show_hu_effect(2, "ruanmo");
            } else if (d == 12) {
                this._show_hu_effect(2, "heimo");
            } else if (d == 13) {
                this._show_hu_effect(2, "rechong");
            } else if (d == 14) {
                this._show_hu_effect(2, "zhuarechong");
            } else if (d == 15) {
                this._show_hu_effect(2, "gangshanghu");
            } else if (d == 16) {
                this._show_hu_effect(2, "qianggang");
            }
        }
    },

    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.qibeimj.tagCurGameScence", jpacket);
            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.qibeimj.AckCurGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        this._super(cmd, jpacket, canDelay, svrid);
        if (cmd == CMD.SERVER_LAIZI_BC) {
            this._handler_server_laizi_bc(jpacket, canDelay);
        }
        else if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
        } else if (cmd == selCMD.SERVER_UPDATE_BEISHU) {
            this._handler_update_beishu(jpacket, canDelay);
        } else if (cmd == CMD.SERVER_LAST_FOUR_CARD) {
            this._handler_last_four_card(jpacket, canDelay);
            return;
        }
    },

    isSupportPublicCard: function () {
        return false;
    },

    _handler_last_four_card: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.qibeimj.AckLastFourCard", data);
        var nums = jpacket.stLastFourCard.length;
        this.room_Card.removePublicCardByNums(nums);
        this.room_Info.showCardNums(this.room_Info.curCardNums - nums);
        MJModel.isEnterWait = true;
        var move_end = cc.callFunc(function () {
            MJModel.isEnterWait = false;
        });

        this.runAction(cc.sequence(cc.delayTime(3.5), move_end));

        if (canDelay == false) {
            for (var i = 0; i < jpacket.stLastFourCard.length; i++) {
                var seatid = jpacket.stLastFourCard[i].ChairID;
                var pos = MJModel.getPosBySeatid(seatid);
                var v = jpacket.stLastFourCard[i].Card;
                this.room_Card.initMoCard(pos, v, true);
            }
            return;
        }

        var size = cc.director.getWinSize();

        ccs.armatureDataManager.addArmatureFileInfo(getResPath("qibei/haidilaoyue/effects_mjxhdly.ExportJson"));
        var armature = new ccs.Armature("effects_mjxhdly");
        if (armature != null) {
            var animation = armature.getAnimation();
            if (animation) {
                if (typeof animation.playWithIndex === "function") {
                    animation.playWithIndex(0, -1, 0);
                    armature.setPosition(cc.p(size.width / 2, size.height / 2 + 130));
                    this.room_Card.addChild(armature, 1000 - 10);
                }
            }
            armature.runAction(cc.sequence(cc.delayTime(2), cc.removeSelf()));
        }

        var by = size.height / 2 - 26;
        var dx = 117;
        var bx = size.width / 2 - 117 * 1.5;
        var self = this;
        for (var i = 0; i < jpacket.stLastFourCard.length; i++) {
            (function (i) {
                var seatid = jpacket.stLastFourCard[i].ChairID;
                var v = jpacket.stLastFourCard[i].Card;
                var pos = MJModel.getPosBySeatid(seatid);
                if (MJModel.isOnVideo == false && pos != 0) {
                    v = 0;
                }
                var card = new MJCard();
                card.setValue(0, 0, CardType.Card_Hand, 0);
                card.setPosition(cc.p(bx + dx * i, by));
                self.room_Card.addChild(card, 1000 - i);
                var move_callbck = cc.callFunc(function () {
                    self.room_Card.initMoCard(pos, v, true);
                });
                card.runAction(cc.sequence(cc.delayTime(1 + i * 0.3), cc.moveTo(0.3, MJConfig.getMoCardPos(pos)), move_callbck, cc.removeSelf()));
            })(i);
        }
    },

    _handler_update_beishu: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.qibeimj.AckBeiShu", data);
        this._setAllBeiShu(jpacket.bei_shu, canDelay);
    },

    handler_server_update_info_uc: function (data, canDelay) {
    },

    _show_hu_effect: function (pos, name) {
        var effect_name = "";
        if (name == "gangshanghu") {
            effect_name = "effects_mjxgskh";
            ccs.armatureDataManager.addArmatureFileInfo(getResPath("qibei/effect/gangshanghu/effects_mjxgskh.ExportJson"));
        } else if (name == "qianggang") {
            effect_name = "effects_mjxqianggang";
            ccs.armatureDataManager.addArmatureFileInfo(getResPath("qibei/effect/qianggang/effects_mjxqianggang.ExportJson"));
        }
        try {
            if (effect_name != "") {
                var armature = new ccs.Armature(effect_name);
                if (armature != null) {
                    animation = armature.getAnimation();
                    if (animation) {
                        if (typeof animation.playWithIndex === "function") {
                            animation.playWithIndex(0, -1, 0);

                            var begin = MJConfig.getOperatorTipPos(pos);
                            armature.setPosition(begin);
                            armature.setName("hu_effect");
                            this.room_Tip.addChild(armature, 10000);
                        }
                    }
                    //armature.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
                }
            }
        } catch (e) {

        }
    },

    _handler_game_record: function (data, canDelay) {
        //-----新总结算界面
        cc.log("------big End");
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var pkgId = this._pkg_id;
        var gameType = "蕲北麻将";

        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];
        gameType += " · " + MJModel.base_money + "分底";

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        //var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;

        var max_score = 0;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            if (recoreInfo.totalscore > max_score) {
                max_score = recoreInfo.totalscore;
            }
        }

        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            //var playerRecord = totalRecord.player_records[i];
            var player = MJModel.players[i];
            var arrStr = [];
            //次数
            var arrcount = [];

            arrStr = ["胡牌次数", "坐庄次数", "点炮次数", "杠牌次数"];
            arrcount = [recoreInfo.hu_num, recoreInfo.banker_num, recoreInfo.Ex1, recoreInfo.GangTimes];

            if (player && player.uid != -1 && player.uid != 0) {
                addX = 39 + (i * 302);
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var isWin = false;
                if (max_score > 0 && recoreInfo.totalscore == max_score) {
                    isWin = true;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, isWin, _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner, recoreInfo.dissState);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }
        }
        bigResult.refresh(PlayerNumber);
        this.release();
    },

    handler_server_game_start_bc: function (data, canDelay) {
        this._curLaizi = -1;
        this._curLaizipi = -1;
        this._curLaizipi2 = -1;
        this._setAllBeiShu([0, 0, 0, 0]);
        this._super(data, canDelay);
        this._bao_nums = [0, 0, 0, 0];
        this._hongzhong_nums = [0, 0, 0, 0];
        this.updateBaoPiUI();
    },

    _show_game_end_detail: function (hbGameEnd) {
        var result = new MJResult_QiBei();
        result.setName("reset_remove");
        result.init(hbGameEnd);
        this.addChild(result, 500);
    },

    handler_server_game_end_bc: function (hubeiGameend, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            var ackGameEnd = hubeiGameend.gameend;
            var self = this;
            this.room_Card.setAutoOutCard(false);
            this.room_Card.hideOutCardBtn();
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);
            this.room_Info.stopTime();
            this.room_Info.showDirectionTip(-1);
            this.room_Tip.hideOutCardTip();


            var showhandcard = cc.callFunc(function () {
                self.gameend_showAllHandCard(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var showendstate = cc.callFunc(function () {
                if (state == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
                else {
                }
            });

            var showendscore = cc.callFunc(function () {
                self.room_Tip.reset();
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var tongbumoney = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            //self._show_game_end_detail(hubeiGameend);
            var gameendreset = cc.callFunc(function () {
                self.room_Action.setReady2Visible(false);
                try {
                    var result = new MJResult_QiBei();
                    result.updateContentView(hubeiGameend);
                    result.setName("reset_remove");
                    self.addChild(result, 100000);
                } catch (e) {
                    cc.log("game end:", e);
                    self.room_Action.setReady2Visible(true);
                }
            });

            var show_public_card = cc.callFunc(function () {
                var carInfo = hubeiGameend.stShowCardPool;
                var bupaiNum = hubeiGameend.BuPaiZhangShu;
                var huSeatId = hubeiGameend.HuChaird;
                var last_seatid = -1;
                if (huSeatId == 255) return; //流局

                if (carInfo) {

                    var publickNum = 0;
                    for (var i = 0; i < carInfo.length; i++) {
                        var pos = MJModel.getPosBySeatid(carInfo[i].seat_id);
                        if (pos != -1 && pos != 255) {
                            publickNum += carInfo[i].PoolCard.length;
                        }
                    }
                    var PlayerNum = 4;
                    if (MJModel.mj_roomType == 1) PlayerNum = 3;
                    if (MJModel.mj_roomType == 2) PlayerNum = 2;
                    last_seatid = huSeatId + parseInt(publickNum % PlayerNum);
                    if (last_seatid >= PlayerNum) {
                        last_seatid -= PlayerNum;
                    }

                    if (parseInt(bupaiNum % 2) == 0) {
                        last_seatid = MJModel.getPreSeat(last_seatid);
                    }

                    for (var i = 0; i < carInfo.length; i++) {
                        var pos = MJModel.getPosBySeatid(carInfo[i].seat_id);
                        if (pos != -1 && pos != 255) {
                            for (var j = 0; j < carInfo[i].PoolCard.length; j++) {
                                var card = carInfo[i].PoolCard[j];
                                var cardsp = new MJCard();
                                self.room_Card.out_card[pos].push(cardsp);
                                cardsp.setValue_new(card, pos, CardType.Card_Out, self.room_Card.out_card[pos].length - 1, 0, false);
                                cardsp.setMyPosition(MJConfig.getOutCardPos(pos, self.room_Card.out_card[pos].length - 1));
                                self.room_Card.addChild(cardsp, MJConfig.getOutCardOrder(pos, self.room_Card.out_card[pos].length - 1));

                                if (carInfo[i].seat_id == last_seatid && j == carInfo[i].PoolCard.length - 1) {
                                    cardsp.setStoreColor(cc.color(126, 126, 126));
                                } else {
                                    cardsp.setStoreColor(cc.color(126, 126, 126));
                                }
                                //cardsp.setStoreColor(cc.color(234, 147, 147));
                                var dx = 0;
                                var dy = 0;
                                var ex = 0;
                                var ey = 0;
                                if (pos == 0) {
                                    dy = -30;
                                    ey = -20;
                                }
                                if (pos == 2) {
                                    dy = 30;
                                    ey = 20;
                                }
                                if (pos == 1) {
                                    dx = 30;
                                    ex = 20;
                                }
                                if (pos == 3) {
                                    dx = -30;
                                    ex = -20;
                                }
                                var init_pos = cardsp.getPosition();
                                var end_pos = cc.p(init_pos.x, init_pos.y);
                                var begin_pos = cc.p(init_pos.x + dx, init_pos.y + dy);
                                cardsp.setPosition(begin_pos);
                                cardsp.runAction(cc.sequence(cc.delayTime(1), cc.moveTo(0.25, end_pos)));
                            }
                        }
                    }
                    self.room_Card.removePublicCardByNums(publickNum);
                }
            });

            if (MJModel.isOnVideo && canDelay == false) {
                this.runAction(cc.sequence(show_public_card, tongbumoney, cc.delayTime(0), gameendreset));
                return;
            }
            if (state == 1) {
                this.runAction(cc.sequence(cc.delayTime(0), showhandcard, cc.delayTime(1), show_public_card, showendscore, cc.delayTime(0), tongbumoney, showendstate, cc.delayTime(1), gameendreset));
            } else {
                this.runAction(cc.sequence(cc.delayTime(0), showhandcard, cc.delayTime(1), show_public_card, showendscore, cc.delayTime(0), tongbumoney, gameendreset));
            }
        } catch (e) {
            ERROR(this, "handler_server_game_end_bc" + e);
        }
    },

    timeEnd: function (dt) {

        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            sendGameEndRecordReq();
        }
    },

    _clearAllBeiShu: function () {
        try {
            for (var i = 0; i < this._allBeiShu.length; i++) {
                var iscore = this._allBeiShu[i];
                this._allBeiShu_Nums[i] = 0;
                if (iscore) {
                    iscore.setVisible(false);
                }
            }
        } catch (e) {

        }
    },
    _removeAllScoreEffect: function () {
        try {
            while (this.getChildByName("hubeimj_score_effect")) {
                this.removeChildByName("hubeimj_score_effect");
            }
        } catch (e) {

        }
    },

    _setAllBeiShu: function (scores, showEffect) {
        return;
        if (showEffect == undefined) showEffect = false;
        if (scores == null || scores.length == 0) {
            return;
        }
        try {
            if (scores) {
                var l = scores.length;
                if (MJModel.mj_roomType == 1) l = 3;
                for (var j = 0; j < l; j++) {
                    var seadid = j;
                    //if (scores[seadid] == 0) {
                    //    continue;
                    //}
                    var pos = MJModel.getPosBySeatid(j);
                    var label = this._allBeiShu[pos];
                    this._allBeiShu_Nums[pos] = scores[seadid];
                    if (label == null) {
                        var ppos = MJConfig.getPlayerPos(pos);
                        //label = new cc.LabelAtlas(":" + self._allBeiShu_Nums[pos], getResPath("qibei/flag/bei_nums.png"), 12, 22, '0');
                        label = new cc.LabelTTF(this._allBeiShu_Nums[pos] + "斤", "Thonburi", 18);
                        label.setPosition(cc.p(ppos.x, (pos == 0 || pos == 1) ? ppos.y + 50 + 20 : ppos.y - 50 - 20));
                        label.setAnchorPoint(cc.p(0.5, 0.5));
                        label.setName("label");
                        this.addChild(label);

                        this._allBeiShu[pos] = label;
                    } else {
                        label.setString(this._allBeiShu_Nums[pos] + "斤");
                        label.setVisible(true);
                    }
                }
            }
        } catch (e) {
            Log(this, e);
        }
    },

    //天门出牌跟有操作的通知合在一个接口里
    _handler_server_operate_notify_bc: function (data, canDelay) {
        var ackOpNotify = parsePacket("proto.game.AckOpNotify", data);
        var seatid = ackOpNotify.ChairID;
        var operat = ackOpNotify.OpType;
        var card = ackOpNotify.Card;

        var packet = createPacket("proto.game.AckUserOutCard");
        packet.ChairID = seatid;
        packet.Card = card;
        var sendData = packet.encode64();
        this.handler_server_out_card_bc(sendData, canDelay);

        if (MJModel.seatid != -1) {
            ackOpNotify.ChairID = MJModel.seatid;
            this.handler_server_operate_notify_bc(ackOpNotify.encode64(), canDelay);
        }
    },
    handler_gang_scores: function (scores, OpType, OpType2, canDelay) {
        //this._setAllBeiShu(scores, canDelay);
    },
    handler_server_peng_kang_bc: function (data, canDelay) {
        var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);

        var seatid = ackBcOpResult.ChairID;
        var out_seatid = ackBcOpResult.OutCardChairID;
        var OpType = ackBcOpResult.OpType;
        var OpType2 = ackBcOpResult.OpType2;
        var card = ackBcOpResult.Card;

        var pos = MJModel.getPosBySeatid(seatid);
        var out_pos = MJModel.getPosBySeatid(out_seatid);

        if ((OpType & ActionType.TYPE_PASS) != ActionType.TYPE_PASS &&
            ((OpType & LaiZiGangType.TYPE_LAIZI_GANG) == LaiZiGangType.TYPE_LAIZI_GANG
            || (OpType & LaiZiGangType.TYPE_HONGZHONG_GANG) == LaiZiGangType.TYPE_HONGZHONG_GANG
            || (OpType & LaiZiGangType.TYPE_LAIZIPI_GANG) == LaiZiGangType.TYPE_LAIZIPI_GANG)) {
            MJModel.outtimeplayers = [];
            this.room_Tip.setAutoEndRoomVis(false);
            this._gang_nums[pos]++;
            var scores = ackBcOpResult.Score;
            this.handler_gang_scores(scores, OpType, OpType2, canDelay);
            var isOutCard = false;
            var isEnterWait = false;
            if (canDelay == false) {
                this.room_Card.removeHandCard(pos, card);
                this.room_Card.addOutCard(pos, card);
                return;
            }

            isOutCard = true;
            this.room_Card.outHandCard(pos, card);

            if (MJModel.isMyPos(pos)) {
                MJModel.mj_table.room_Action.removeChildByName("ChooseGang_selectLayer");
                this._gang_tip = true;

                MJModel.isEnterWait = true;
                isEnterWait = true;
                var move_end = cc.callFunc(function () {
                    MJModel.isEnterWait = false;
                });

                this.runAction(cc.sequence(cc.delayTime(0.5), move_end));
            }

            if (MJModel.isMyPlayer(seatid)) {
                MJModel.hasCardOutIng = false;
                if (isEnterWait == false) MJModel.isEnterWait = false;
                MJModel.final_listen_info = [];
                //检测出的牌是否在听牌里边 不在的话就清楚听牌信息
                for (var i = 0; i < MJModel.listen_info.length; i++) {
                    var lsi = MJModel.listen_info[i];
                    if (lsi.OutCard == card) {
                        MJModel.final_listen_info = lsi.HuInfo;
                        break;
                    }
                }

                MJModel.listen_info = [];

                //可以听牌  可以选择自动胡牌
                if (MJModel.final_listen_info.length > 0) {
                    if (this.room_Action) this.room_Action.checkAutoOutCardVis();
                    this.room_Card.setAutoOutCard(MJModel.isAutoOutCard);
                }
                else {
                    if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
                    this.room_Card.setAutoOutCard(false);
                    MJModel.isAutoOutCard = false;
                }

                this.myselfCloseOutCard();
            }

            var player = MJModel.players[seatid];
            if (player && canDelay) {
                var effect = "gang";
                this.handler_op_sound(pos, player.sex, OpType, OpType2, effect, card);
                this.room_Tip.showEffect1(pos, OpType, false);
            }
            return;
        }
        this._gang_nums[pos] = 0;
        this._super(data, canDelay);
    },

    _clearAllBei: function () {
        try {
            for (var i = 0; i < 4; i++) {
                this._allBeiShu[i].setVisible(false);
            }
        } catch (e) {

        }
    },
    handlerAutoUpTableReady: function (nums, selfIsReady) {

    },
    _handler_server_laizi_bc: function (data, canDelay) {
        var packet = parsePacket("proto.game.qibeimj.AckLaiziCard", data);
        var self = this;
        var curLaizi = packet.laizicard;
        var curLaizipi = packet.card;
        this._setLaizi(curLaizi, curLaizipi, -1, canDelay ? true : false);
        try {
            var publiccard = this.room_Card.getNextPublicCard(false);
            publiccard.setVisible(false);
        } catch (e) {

        }
        if (canDelay == false || true) {
            this._showHandcardFlag(false);
            var mo_card = null;
            if (this.room_Card.isDuoPai(0)) {
                mo_card = this.room_Card.hand_card[0][this.room_Card.hand_card[0].length - 1];
                this.room_Card.hand_card[0].splice(this.room_Card.hand_card[0].length - 1, 1);
            }
            this.room_Card.reflashHandCard(0, true);
            this.room_Card.reflashHandCard(1, true);
            this.room_Card.reflashHandCard(2, true);
            this.room_Card.reflashHandCard(3, true);
            if (mo_card) {
                mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                self.room_Card.hand_card[0].push(mo_card);
            }
            return;
        }
        MJModel.isEnterWait = true;

        var move_end = cc.callFunc(function () {
            self._showHandcardFlag(false);
            var allPreCars = [];
            var allLaiZi = [];
            for (var i = self.room_Card.hand_card[0].length - 1; i >= 0; i--) {
                var card = self.room_Card.hand_card[0][i];
                if (card.getValue() == curLaizi) {
                    allLaiZi.push(card);
                } else {
                    if (allLaiZi.length > 0) {
                        break;
                    }
                    allPreCars.push(card);
                }
            }

            if (allLaiZi.length > 0 && allPreCars.length > 0) {
                var allDelay = 0;
                for (var i = 0; i < allLaiZi.length; i++) {
                    var card = allLaiZi[i];
                    var begin_pos = card.getPosition();
                    var end_pos = MJConfig.getHandCardPos(0, self.room_Card.hand_card[0].length - 1 - i, self.room_Card.hand_card[0].length, self.room_Card.isDuoPai(0));
                    var allL = Math.abs(end_pos.x - begin_pos.x);

                    //if (MJModel.outCardEffect_style == 0 || true) {
                    var time = allL / 1000;
                    if (time < 0.17) time = 0.17;
                    if (time > 0.3) time = 0.3;
                    //    card.runAction(cc.sequence(cc.delayTime(allDelay), cc.spawn(cc.rotateTo(0.1, 15), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + 100))), cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y + 100)).easing(cc.easeSineOut()), cc.spawn(cc.rotateTo(0.1, 0), cc.moveTo(0.17, end_pos))));
                    //} else {
                    //    card.runAction(cc.sequence(cc.moveTo(0.0, cc.p(end_pos.x + 0, end_pos.y + 100)), cc.moveTo(0.3, end_pos)));
                    //}
                    card.runAction(cc.sequence(cc.spawn(cc.rotateTo(0.1, 15), cc.moveTo(0.17, cc.p(begin_pos.x + 0, begin_pos.y + 100))), cc.moveTo(time, cc.p(end_pos.x + 0, end_pos.y + 100)).easing(cc.easeSineOut()), cc.spawn(cc.rotateTo(0.1, 0), cc.moveTo(0.17, end_pos))));
                    allDelay += 1;
                }
                for (var i = 0; i < allPreCars.length; i++) {
                    var card = allPreCars[i];
                    //card.runAction(cc.sequence(cc.moveBy(0.3, cc.p(83, 0)), cc.delayTime(1 - 0.3)).repeat(allLaiZi.length));
                    card.runAction(cc.moveBy(0.3, cc.p(83 * allLaiZi.length, 0)));
                }

                var callback = cc.callFunc(function () {
                    MJModel.isEnterWait = false;
                    self.room_Card.reflashHandCard(0, true);
                    if (mo_card) {
                        mo_card.setMyPosition(MJConfig.getMoCardPos(0));
                        self.room_Card.hand_card[0].push(mo_card);
                    }
                });
                self.runAction(cc.sequence(cc.delayTime(allLaiZi.length * 1), callback));
            } else {
                MJModel.isEnterWait = false;
            }
        });
        this.runAction(cc.sequence(cc.delayTime(2.5), move_end));
    },

    _setGameScore: function () {
        this.removeChildByName("numberScore");
        this.removeChildByName("qizhuangScore");

        var size = cc.director.getWinSize();

        var p = this._gameType_sp.getPosition();

        var base_score = 1;

        //甩字胡不可炮胡
        if (MJModel.RoomConfigID.indexOf(1172001) != -1) {
            base_score = 1;
        }

        if (MJModel.RoomConfigID.indexOf(1172002) != -1) {
            base_score = 2;
        }

        if (MJModel.RoomConfigID.indexOf(1172007) != -1) {
            base_score = 3;
        }

        if (MJModel.RoomConfigID.indexOf(1172003) != -1) {
            base_score = 5;
        }

        if (MJModel.RoomConfigID.indexOf(1172004) != -1) {
            base_score = 10;
        }

        if (MJModel.RoomConfigID.indexOf(1172005) != -1) {
            base_score = 20;
        }

        if (MJModel.RoomConfigID.indexOf(1172006) != -1) {
            base_score = 50;
        }
        MJModel.base_money = base_score;

        var buf = "" + Math.abs(MJModel.base_money);
        var numberScore = new cc.LabelAtlas(buf, getResPath("RoomMJ/difen/number.png"), 192 / 12, 21, '.');
        //var numberScore = new cc.LabelAtlas(buf, getResPath("RoomMJ2/info2/time_num_2.png"), 20 , 30, '0');
        numberScore.setName("numberScore");
        numberScore.setAnchorPoint(cc.p(0.0, 0.0));
        this.addChild(numberScore);

        var qizhuangScore = new cc.Sprite(getResPath("RoomMJ/difen/icon.png"));
        qizhuangScore.setAnchorPoint(cc.p(0.0, 0.0));
        qizhuangScore.setName("qizhuangScore");
        this.addChild(qizhuangScore);

        //pos at icon right
        p.x += this._gameType_sp.getContentSize().width / 2;
        //p.y -= this._gameType_sp.getContentSize().height;
        numberScore.setPosition(cc.p(p.x, p.y + 2));
        qizhuangScore.setPosition(cc.p(numberScore.getPositionX() + numberScore.getContentSize().width, p.y - 2));
    },

    _setGameType: function () {
        if (this._gameType_sp == null) {
            var pkg_id = 1;
            MJModel.play_id_str = [];
            //甩字胡不可炮胡
            if (MJModel.RoomConfigID.indexOf(1173001) != -1) {
                //play_id.push(2);
                MJModel.play_id_str.push("杠上开花加番");
            }

            if (MJModel.RoomConfigID.indexOf(1173002) != -1) {
                //play_id.push(2);
                MJModel.play_id_str.push("海底捞月加番");
            }

            if (MJModel.RoomConfigID.indexOf(1173003) != -1) {
                MJModel.play_id_str.push("过手才可胡(才可碰)");
            }

            if (MJModel.RoomConfigID.indexOf(2000001) != -1 || MJModel.RoomConfigID.indexOf(2000002) != -1 || MJModel.RoomConfigID.indexOf(2000003) != -1) {
                MJModel.play_id_str.push("可少人开局");
            }

            this._gameType_sp = MJModel.mj_table.mjType;

            var gameDes = "";
            for (var i = 0; i < MJModel.play_id_str.length; i++) {
                gameDes += MJModel.play_id_str[i];
                if (i != MJModel.play_id_str.length - 1) {
                    gameDes += ",";
                }
            }

            MJModel.ConfigStr = gameDes;
            cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", gameDes);
        }
        this._setFastChat();
    },
    fastChat3: ["搏一搏，单车变摩托 ", "哎呀真是个屁股篓子，一点追求都冒得", "么走么走，今着搞通宵", "牌品好就是人品好", "么果慢，绣花社，搞快点", "哎呀，真是不好意思，又胡了", "伙计哎，嗯这牌打得，搞的没得味", "哎呀，真是太高了，硬是起不到嗯一张子"],
    _setFastChat: function () {
        var chatList = [];
        chatList = this.fastChat3;
        MJModel.mj_fastChat = this.fastChat3;
        var self = this;
        Utils.getFastChatSound = function (chat, sex) {
            for (var i = 0; i < chatList.length; i++) {
                if (chatList[i] == chat) {
                    return getResPath(__String.createWithFormat("qibei/sound/fast/%1/%2.mp3", sex == SEX_ID.SEX_MAN ? "m" : "w", i));
                    //return getResPath(__String.createWithFormat("qibei/sound/fast/%1/%2.mp3", "m", i));
                }
            }
            return "";
        };
    },

    _showLaizi_effect: function (name) {
        ccs.armatureDataManager.addArmatureFileInfo(getResPath("qibei/effect/laizi/effects_mjhunancx.ExportJson"));
        var size = cc.director.getWinSize();
        if (true) {
            var armature = new ccs.Armature("effects_mjhunancx");
            var animation = armature.getAnimation();
            if (animation) {
                if (typeof animation.playWithIndex === "function") {
                    animation.playWithIndex(0, -1, 0);
                    armature.setPosition(cc.p(size.width / 2, size.height / 2));
                    this.addChild(armature, 100);
                    armature.runAction(cc.sequence(cc.delayTime(1.0), cc.removeSelf()));
                }
            }
        }
        Sound.getInstance().playEffect(__String.createWithFormat(getResPath("qibei/sound/laizi.mp3")));
        return armature;
    },

    updateLaiziPos: function () {
        if (this._curLaizi_bg != null) {
            var card = this._curLaizi_bg.getChildByName("card");
            if (MJModel.mj_bg_use == 0) {
                this._curLaizi_bg.setPosition(cc.p(70, 580));
                if (card)card.setScale(1);
            } else {
                this._curLaizi_bg.setPosition(cc.p(70, 380 + 180));
                if (card)card.setScale(0.9);

            }
        }
    },

    _setLaizi: function (laizi, laizipi, laizipi2, gamestart) {
        if (laizi == null || laizi == undefined || laizi == -1 || laizi == 255) {
            if (this._curLaizi_bg) this._curLaizi_bg.setVisible(false);
            return;
        }
        if (gamestart == undefined) gamestart = false;

        if (this._curLaizi_bg == null) {
            this._curLaizi_bg = new cc.Sprite(getResPath("qibei/flag/laizi_bg.png"));
            this._curLaizi_bg.setPosition(cc.p(70, 560));
            this.addChild(this._curLaizi_bg, 200);

            this.updateLaiziPos();
        }
        this._curLaizi_bg.removeAllChildren();
        this._curLaizi_bg.setVisible(true);
        this._curLaizi = laizi;
        //this._curLaizipi = laizipi;
        //this._curLaizipi2 = laizipi2;
        var size = cc.director.getWinSize();
        if (this._curLaizi > 0) {
            var dy = 43;
            laizi_tip = new cc.LabelTTF("赖\n子", "Arial", 20);
            laizi_tip.setColor(cc.color(87, 207, 93));
            if (laizi_tip) {
                laizi_tip.setPosition(cc.p(40, dy));
                this._curLaizi_bg.addChild(laizi_tip);
            }

            var card = new MJCard();
            card.setValue(laizi, 0, CardType.Card_Out, 0);
            card.setPosition(cc.p(90, dy));
            card.setScale(MJModel.mj_bg_use == 0 ? 1 : 0.9);
            card.setName("card");
            //card.setStoreColor(cc.color(255, 249, 137));
            this._curLaizi_bg.addChild(card);
            this.room_Card.other_card.push(card);
            if (gamestart) {
                var dl = 0;
                laizi_tip.setVisible(false);
                laizi_tip.runAction(cc.sequence(cc.delayTime(1.3 + dl), cc.show()));
                card.setScale(0);
                card.setVisible(false);
                var self = this;
                var callFunc = cc.CallFunc(function () {
                    self._showLaizi_effect("赖子");
                });
                card.setPosition(cc.p(size.width / 2 - this._curLaizi_bg.getPositionX() + this._curLaizi_bg.getContentSize().width / 2, size.height / 2 - this._curLaizi_bg.getPositionY() + this._curLaizi_bg.getContentSize().height / 2));
                card.runAction(cc.sequence(cc.delayTime(0 + dl), cc.show(), callFunc, cc.scaleTo(0.1, 2), cc.delayTime(1.0), cc.spawn(cc.moveTo(0.17, cc.p(90, dy)), cc.scaleTo(0.17, MJModel.mj_bg_use == 0 ? 1 : 0.9))));
            }
        }
    },
    _showHandcardFlag: function (isEndShow) {
        if (MJModel.isOnVideo) {
            for (var j = 0; j < 4; j++) {
                var allcards = this.room_Card.hand_card[j];
                if (allcards) {
                    for (var i = 0; i < allcards.length; i++) {
                        var card = allcards[i];
                        this._checkAddCardFlag(card);
                    }
                }
            }
            return;
        }
        var allcards = this.room_Card.hand_card[0];
        if (allcards) {
            for (var i = 0; i < allcards.length; i++) {
                var card = allcards[i];
                this._checkAddCardFlag(card);
            }
        }
    },
    _checkAddCardFlag: function (card) {
        try {
            if (card.type == CardType.Card_Outing)return;
            if (card.type == CardType.Card_Peng)return;
            if (card.type == CardType.Card_Public)return;
            if (card.getValue() == 0)return;
            if (card.getValue() == HuBeiGangPai.HongZhong)card.setStoreColor(cc.color(255, 249, 137));
            if (MJModel.mj_bg_use == 1) {
                var flag_str = "";
                if (card.getValue() == this._curLaizi)flag_str = "qibei/flag/lai_flag2.png";
                if (flag_str != "") {
                    if (card.getValue() == this._curLaizi)card.setStoreColor(cc.color(255, 249, 137));
                    var p = card.getChildByName("sprite");
                    card.getChildByName("sprite").removeChildByName("laizi_flag");
                    card.removeChildByName("laizi_flag");
                    var flag = null;

                    flag = new cc.Sprite(getResPath(flag_str));

                    var m_size = p.getContentSize();
                    if (flag) {
                        flag.setPosition(cc.p(0, m_size.height));
                        flag.setAnchorPoint(cc.p(0, 1));
                        flag.setName("laizi_flag");
                        p.addChild(flag);
                        this._flagDirection(card.pos, flag, m_size);
                        if (card.type == CardType.Card_End) {
                            if (card.pos == 1 || card.pos == 3) {
                                flag.setScale(0.5);
                            } else {
                                flag.setScale(0.8);
                            }
                        }

                        if (card.type == CardType.Card_Out || card.type == CardType.Card_Hu) {
                            flag.setScale(0.82);
                            if (card.pos == 0) {
                                flag.setScale(0.9);
                            } else if(card.pos == 1){
                                flag.setScale(0.7);
                            }
                        }
                        if (card.type == CardType.Card_Hand || card.type == CardType.Card_Mo) {
                            flag.setScale(1.5);
                        }
                    }
                    return;
                }
            }
            else {
                try {
                    var p = card.getChildByName("sprite");
                    card.getChildByName("sprite").removeChildByName("laizi_flag");
                    card.removeChildByName("laizi_flag");
                    var m_size = p.getContentSize();
                    var flagName = this._getFlagName(card.pos, card.type);
                    if (flagName == "") {
                        return;
                    }
                    var flag_str = "";
                    if (card.getValue() == this._curLaizi)flag_str = "laizi";
                    if (flag_str == "") {
                        return;
                    }
                    if (card.getValue() == this._curLaizi) card.setStoreColor(cc.color(255, 249, 137));
                    var uiJson = ccs.load(getResPath("qibei/cardFlag/mjFlag.json"));
                    var flag = uiJson.node;
                    flag.setName("laizi_flag");
                    flag.setPosition(cc.p(m_size.width / 2, m_size.height / 2));
                    if (card.pos == 1) {
                        flag.setPosition(cc.p(m_size.width / 2 + 4, m_size.height / 2));
                    }
                    card.addChild(flag);
                    flag.getChildByName(flag_str).getChildByName(flagName).setVisible(true);
                } catch (e) {
                    Log(this, e);
                }
            }
        } catch (e) {
            Log(this, e);
        }
    },
    _getFlagName: function (pos, type) {
        if (type == CardType.Card_Out || type == CardType.Card_Hu) {
            return "out" + pos;
        }
        if (type == CardType.Card_Hand) {
            return "h" + pos;
        }
        if (type == CardType.Card_End) {
            return "end" + pos;
        }
        return "";
    },
    //每个方向角标对应
    _flagDirection: function (pos, flag, m_size) {
        if (pos == 1) {
            flag.setPosition(cc.p(0, 17));
            flag.setRotation(-90);
        } else if (pos == 2) {
            flag.setPosition(cc.p(0, m_size.height));
            flag.setRotation(0);
        } else if (pos == 3) {
            flag.setPosition(cc.p(m_size.width, m_size.height));
            flag.setRotation(90);
        }
    },
    resetGame: function (allClean) {
        this._super(allClean);
        this._setLaizi(-1, -1, -1);
        this._clearAllBeiShu();
        this._removeAllScoreEffect();
        this._bao_nums = [0, 0, 0, 0];
        this._hongzhong_nums = [0, 0, 0, 0];
        this.hideBaoPiUI();
    },
    handler_server_scene_info_uc: function (hubei_scene, canDelay) {
        this._clearAllFag("all");
        this.reflashSetting(true);
        var ackGameFree = hubei_scene.GameSence;
        MJModel.RoomConfigID = ackGameFree.RoomConfigID;
        var sceneStatus = ackGameFree.SceneStatus;
        if (hubei_scene) {
            if (sceneStatus != 0) {
                this._setLaizi(hubei_scene.laizicard, -1, -1);//还原赖子
            }
        }
        if (ackGameFree.RoomConfigID.indexOf(2000002) != -1)MJModel.changMode = 1;
        if (ackGameFree.RoomConfigID.indexOf(2000003) != -1)MJModel.changMode = 3;

        this._super(ackGameFree, canDelay);

        this._setGameType();
        this._setGameScore();
        this.updateBaoPiUI();
        //if (sceneStatus == 0) {
        //    this.resetGame(true);
        //}
        if (hubei_scene) {
            if (sceneStatus != 0) {
                if (hubei_scene.beishu) {
                    var scores = [0, 0, 0, 0];
                    for (var i = 0; i < hubei_scene.beishu.length; i++) {
                        scores[i] = hubei_scene.beishu[i];
                    }

                    this._setAllBeiShu(scores);
                }
            }
        }
    },
    handler_out_card_sound: function (sex, card) {
        if (card == this._curLaizi || card == this._curLaizipi || card == HuBeiGangPai.HongZhong) {
            //自己出赖子 会触发特效 不用播声音
            return;
        }
        this._gang_nums = [0, 0, 0, 0];
        if (MJModel.mj_suport_fangyan == 1 && MJModel.mj_sound_use == 1) {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("qibei/sound/chupai/%1/%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", Utils.toHex2(card)));
        } else {
            this._super(sex, card);
        }
    },
    handler_op_sound: function (pos, sex, OpType, OpType2, effect, card) {
        if (MJModel.mj_suport_fangyan == 1 && MJModel.mj_sound_use == 1) {
            if ((OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG) {
                effect = "gang";
            }
            else if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                var zimo = this.room_Card.isDuoPai(pos);
                effect = "hu";
                if (zimo) {
                    effect = "zimo";
                }
            } else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                effect = "peng";
            } else if ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI || (OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                effect = "chi";
            } else if (((OpType & LaiZiGangType.TYPE_LAIZI_GANG) == LaiZiGangType.TYPE_LAIZI_GANG) && card != HuBeiGangPai.HongZhong) {
                effect = "laizigang";
                //} else if ((OpType & LaiZiGangType.TYPE_HONGZHONG_GANG) == LaiZiGangType.TYPE_HONGZHONG_GANG){
            } else if (((OpType & LaiZiGangType.TYPE_LAIZI_GANG) == LaiZiGangType.TYPE_LAIZI_GANG) && card == HuBeiGangPai.HongZhong) {
                effect = "hongzhonggang";
            } else if ((OpType & LaiZiGangType.TYPE_LAIZIPI_GANG) == LaiZiGangType.TYPE_LAIZIPI_GANG) {
                effect = "pizigang";
            }
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("qibei/sound/operator/%1/%2.mp3"), sex == SEX_ID.SEX_FEMALE ? "w" : "m", effect));
        } else {
            this._super(pos, sex, OpType, OpType2, effect);
        }
    },

    _getBankerPos: function (pos) {
        var _size = cc.director.getWinSize();
        var _vec = cc.p(_size.width / 2, _size.height / 2);
        switch (pos) {
            case  0:
                _vec.y = _vec.y - 190;
                break;
            case  1:
                _vec.x = _vec.x + 450;
                break;
            case  2:
                _vec.y = _vec.y + 260;
                break;
            case  3:
                _vec.x = _vec.x - 450;
                break;
            default:
                break;
        }

        return _vec;

    },

    handler_server_up_table_bc: function (data, canDelay) {
        this._super(data, canDelay);
        if (MJModel.waitUpdate == false) Sound.getInstance().playEffect(getResPath("RoomMJ/sound/enter.mp3"));
    },

    _clearAllFag: function (state) {
        if (state == undefined)state = "all";
        if (state == "all" || state == "piao") {
            for (var i = 0; i < 4; i++) {
                this.players[i].removeChildByName("piao_tip");
            }
        }
        if (state == "all" || state == "jia") {
            for (var i = 0; i < 4; i++) {
                this.players[i].removeChildByName("jia_tip");
            }
        }
        if (state == "all" || state == "piao_layer") {
            this.removeChildByName("piao_layer");
        }
        if (state == "all" || state == "jia_layer") {
            this.removeChildByName("jia_layer");
        }
    },
});

var MJResult_QiBei = MJCommonResult.extend({
    updateContentView: function (ackGameEndJS) {
        this.ackGameEnd = ackGameEndJS.gameend;
        this.shanxiGameEnd = ackGameEndJS;
        //输赢标志
        var seatId = MJModel.seatid;
        var score = this.ackGameEnd.Score[seatId];
        var effectName = "lose";
        if (score > 0) {
            effectName = "win";
        }
        this._win_effect(effectName);

        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -2);

        var itemHeight = 120;

        var count = 0;
        for (var m = 0; m < 4; m++) {
            var pos = m - 1 < 0 ? 3 : m - 1;

            var countY = m;

            if (MJModel.mj_roomType == 1) {
                if (pos == 2) {
                    continue;
                }
            }

            if (MJModel.mj_roomType == 2) {
                if (pos == 1 || pos == 3) {
                    continue;
                }

                if (pos == 0) {
                    countY = 1;
                } else if (pos == 2) {
                    countY = 2;
                }
            }

            var seatid = MJModel.getSeatidByPos(pos);

            var startY = 495 - count * itemHeight;
            var startX = 40;

            //头像
            var headLayer = this.createAvatar(pos);
            headLayer.setPosition(cc.p(startX + 60, startY + 55));
            this.bgSpr.addChild(headLayer, 10);

            //上排牌 杠
            var ganghuLayer = this.createGangHuLayer(seatid);
            this.bgSpr.addChild(ganghuLayer, 10);
            ganghuLayer.setPosition(cc.p(startX + 230, startY + 65));

            //下排牌
            var handCardLayer = this.createHandCard(seatid);
            handCardLayer.setPosition(cc.p(startX + 0, startY));
            this.bgSpr.addChild(handCardLayer);

            // this.createSpecialHuTip(startX + 785, startY + 40, seatid);
            this.createSpecialHuTip(startX + 900, startY + 40, seatid);

            // 输赢分
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX + 1100, startY + 40));
            this.bgSpr.addChild(scoreLayer);

            //中马列表
            var maLayer = this.createMaLayer(seatid);
            if (maLayer) {
                maLayer.setPosition(cc.p(startX + 845, startY + 85));
                this.bgSpr.addChild(maLayer);
            }
            count++;
        }
    },

    createGangHuLayer: function (seatid) {
        var layer = new cc.Layer();
        var x = 0;
        var y = 0;
        var sxendInfo = this.shanxiGameEnd;
        if (this.ackGameEnd.EndGangInfo.length > seatid) {
            var gameEndInfo = this.ackGameEnd.EndGangInfo[seatid];
            var map = {};
            for (var i = 0; i < gameEndInfo.Gang.length; i++) {
                var gang = gameEndInfo.Gang[i];
                if (map[gang.GangType] == undefined) {
                    map[gang.GangType] = [];
                }
                map[gang.GangType].push(gang.GangCard);
            }
            for (var key in map) {
                if (!map.hasOwnProperty(key))continue;
                var a = key;
                var typeLabel = new cc.LabelTTF(this.getStringByType(a), "Arial", 20);
                typeLabel.setColor(this.leftColor);
                typeLabel.setAnchorPoint(cc.p(0, 0));
                typeLabel.setPosition(cc.p(x, y + 10));
                layer.addChild(typeLabel);

                x += typeLabel.getContentSize().width;

                var temp = map[key];
                for (var j = 0; j < temp.length; j++) {
                    var smallCard = null;
                    var c = Utils.toHex2(temp[j]);
                    var ccc = Utils.toHex2(MJModel.mj_table._curLaizi);
                    smallCard = new cc.Sprite(__String.createWithFormat(getResPath("qibei/smallCard/%1.png"), c));
                    if (smallCard != undefined) {
                        if(c == 41){
                            smallCard.setColor(cc.color(255, 249, 137));
                        }
                        if(c == ccc){
                            smallCard.setColor(cc.color(255, 249, 137));
                            var laizigangflag = new cc.Sprite(getResPath("qibei/flag/lai_flag2.png"));
                            var m_size = smallCard.getContentSize();
                            if (laizigangflag) {
                                laizigangflag.setPosition(cc.p(2, m_size.height-2));
                                laizigangflag.setAnchorPoint(cc.p(0, 1));
                                laizigangflag.setScale(0.5);
                                smallCard.addChild(laizigangflag);
                            }
                        }
                        smallCard.setAnchorPoint(cc.p(0.0, 0.0));
                        smallCard.setPosition(cc.p(x, y));
                        layer.addChild(smallCard);
                    }
                    x += 28;
                    if (j == temp.length - 1) {
                        x += 20;
                    }
                }
            }
        }
        x += 10;
        //杠分
        var gangScore = this.ackGameEnd.EndGangInfo[seatid].TotalGangScore;
        if (gangScore) {
            var txt = "杠分  +";
            if (gangScore < 0) {
                txt = "杠分  ";
            }
            var gangfen = new cc.LabelTTF(txt + gangScore, "Arial", 20);
            gangfen.setColor(this.leftColor);
            gangfen.setAnchorPoint(cc.p(0, 0));
            gangfen.setPosition(cc.p(x, y + 10));
            layer.addChild(gangfen);
            x += gangfen.getContentSize().width + 10;
        }

        x += 10;
        var addfan = this.ackGameEnd.faninfo[seatid].addfan;
        if (addfan) {
            for (var i = 0; i < addfan.length; i++) {
                if (DaHuType_HH[addfan[i].AddType]) {
                    var add_value = addfan[i].AddNum;
                    var fanType = new cc.LabelTTF(DaHuType_HH[addfan[i].AddType] + " " + add_value + "番", "Arial", 20);
                    fanType.setColor(this.leftColor);
                    fanType.setAnchorPoint(cc.p(0, 0));
                    fanType.setPosition(cc.p(x, y + 10));
                    layer.addChild(fanType);
                    x += fanType.getContentSize().width + 10;
                }
            }
        }

        var yinghu = sxendInfo.endinfo[seatid].yinghu_count;
        if (yinghu == 1) {
            var txt = "硬胡 ";
            if (this.ackGameEnd.faninfo[seatid].SpecialType == HuType.HU_PAOHU) {

            } else {
                var bbbyinghu = new cc.LabelTTF(txt + yinghu + "番", "Arial", 20);
                bbbyinghu.setColor(this.leftColor);
                bbbyinghu.setAnchorPoint(cc.p(0, 0));
                bbbyinghu.setPosition(cc.p(x, y + 10));
                layer.addChild(bbbyinghu);
                x += bbbyinghu.getContentSize().width + 10;
            }
        }

        x += 10;
        var specialType = this.ackGameEnd.faninfo[seatid].SpecialType;
        switch (specialType) {
            case HuType.HU_PAOHU:
            case HuType.HU_DIANPAO:
            case HuType.HU_QIANG_GANG:
            case HuType.HU_BEI_QIANG_GANG:
            case HuType.HU_YI_PAO_DUO_XIANG:
                var add_hongzhongnum = MJModel.mj_table._hongzhong_nums[MJModel.getPosBySeatid(seatid)];
                if (add_hongzhongnum) {
                    var r = 1;
                    for (var k = 0; k < add_hongzhongnum; ++k) {
                        r *= 2;
                    }
                    //x += " 红中杠" + " " + r/2 + "番" + 10;
                    var txt = " 红中杠 ";
                    var hongzhongnum = new cc.LabelTTF(txt + r / 2 + "番", "Arial", 20);
                    hongzhongnum.setColor(this.leftColor);
                    hongzhongnum.setAnchorPoint(cc.p(0, 0));
                    hongzhongnum.setPosition(cc.p(x, y + 10));
                    layer.addChild(hongzhongnum);
                    x += hongzhongnum.getContentSize().width + 10;
                }

                var add_baonum = MJModel.mj_table._bao_nums[MJModel.getPosBySeatid(seatid)];
                if (add_baonum) {
                    var h = 1;
                    for (var k = 0; k < add_baonum; ++k) {
                        h *= 4;
                    }
                    //x += " 赖子杠" + " " + h / 2 + "番" + 10;
                    var txt = " 赖子杠 ";
                    var baonum = new cc.LabelTTF(txt + h / 2 + "番", "Arial", 20);
                    baonum.setColor(this.leftColor);
                    baonum.setAnchorPoint(cc.p(0, 0));
                    baonum.setPosition(cc.p(x, y + 10));
                    layer.addChild(baonum);
                    x += baonum.getContentSize().width + 10;
                }
                break;
        }
        switch (specialType) {
            case HuType.HU_ZIMO:
            case HuType.HU_BEIZIMO:
            case HuType.HU_GANG_SHANG_HUA:
                var add_hongzhongnum = MJModel.mj_table._hongzhong_nums[MJModel.getPosBySeatid(seatid)];
                if (add_hongzhongnum) {
                    var r = 1;
                    for (var k = 0; k < add_hongzhongnum; ++k) {
                        r *= 2;
                    }
                    //x += " 红中杠" + "X" + r + 10;
                    var txt = " 红中杠 X";
                    var hongzhongnum = new cc.LabelTTF(txt + r, "Arial", 20);
                    hongzhongnum.setColor(this.leftColor);
                    hongzhongnum.setAnchorPoint(cc.p(0, 0));
                    hongzhongnum.setPosition(cc.p(x, y + 10));
                    layer.addChild(hongzhongnum);
                    x += hongzhongnum.getContentSize().width + 10;
                }

                var add_baonum = MJModel.mj_table._bao_nums[MJModel.getPosBySeatid(seatid)];
                if (add_baonum) {
                    var h = 1;
                    for (var k = 0; k < add_baonum; ++k) {
                        h *= 4;
                    }
                    //x += " 赖子杠" + "X" + h + 10;
                    var txt = " 赖子杠 X";
                    var baonum = new cc.LabelTTF(txt + h, "Arial", 20);
                    baonum.setColor(this.leftColor);
                    baonum.setAnchorPoint(cc.p(0, 0));
                    baonum.setPosition(cc.p(x, y + 10));
                    layer.addChild(baonum);
                    x += baonum.getContentSize().width + 10;
                }
                break;
        }

        var configStr = MJModel.base_money + "分底" + "  ";
        configStr += "  赖子";
        var size = cc.director.getWinSize();
        var configLabel = new cc.LabelTTF(configStr, "Thonburi", 22);
        configLabel.setColor(cc.color(0xf5, 0xb5, 0x40));
        configLabel.setAnchorPoint(cc.p(0.5, 0.5));
        configLabel.setPosition(cc.p(size.width / 7, 50));
        this.addChild(configLabel);

        var laiziCard = new MJCard();
        laiziCard.setValue(MJModel.mj_table._curLaizi, 0, CardType.Card_End, 0);
        laiziCard.setScale(0.35);
        laiziCard.setAnchorPoint(cc.p(0.5, 0.5));
        laiziCard.setPosition(cc.p(configLabel.getPositionX() + configLabel.getContentSize().width - 45, configLabel.getPositionY()));
        this.addChild(laiziCard);
        return layer;
    },

    createSpecialHuTip: function (startX, startY, seatid) {
        if (this.ackGameEnd.faninfo.length > seatid) {
            //胡牌类型
            var fanInfo = this.ackGameEnd.faninfo[seatid];
            var path = "";
            //1表示自摸，2表示点炮胡，3表示放炮,4 被自摸 5抢杠胡 6被抢杠 7一炮多响
            switch (fanInfo.SpecialType) {
                case 1:
                    path = "qibei/result-detail/result_detail_zimo.png";
                    break;
                case 2:
                    path = "qibei/result-detail/result_detail_paohu.png";
                    break;
                case 3:
                    path = "qibei/result-detail/result_detail_dianpao.png";
                    break;
                case 4:
                    path = "qibei/result-detail/result_detail_beizimo.png";
                    break;
                case 5:
                    path = "qibei/result-detail/result_detail_qiangganghu.png";
                    break;
                case 6:
                    path = "qibei/result-detail/result_detail_beiqianggang.png";
                    break;
                case 7:
                    path = "qibei/result-detail/result_detail_dianpao.png";
                    break;
                default:
                    break;
                //cc.log("SpecialTypeningjiebiao" + fanInfo.SpecialType);
            }
            if (path != "") {
                var typeSprite = new cc.Sprite(getResPath(path));
                typeSprite.setPosition(cc.p(startX + 20, startY + 20));
                this.bgSpr.addChild(typeSprite);

            }
        }
    },
    getStringByType: function (stype) {
        var type = Number(stype);
        var str = "";
        switch (type) {
            case 2:
                str = "点杠";
                break;
            case 4:
                str = "弯杠";
                break;
            case 8:
                str = "暗杠";
                break;
            case 16:
                str = "被弯杠";
                break;
            case 32:
                str = "被放杠";
                break;
            case 64:
                str = "放杠";
                break;
            case 128:
                str = "被暗杠";
                break;
            default:
                break;
        }
        return str;
    },
});