/**
 * Created by jesse on 2017/8/4.
 */
var ChengduType = {
    1: "九莲宝灯",
    2: "大四喜",
    3: "小四喜",
    4: "大三元",
    5: "四暗刻",
    6: "十八罗汉",
    7: "全幺九",
    8: "字一色",
    9: "小三元",
    10: "清幺九",
    11: "清对",
    12: "清碰",
    13: "混碰",
    14: "清一色",
    15: "混一色",
    16: "对对胡",
    17: "平胡",
    18: "鸡胡",
    19: "天胡",
    20: "地胡",
    21: "人胡",
    22: "抢杠胡",
    23: "海底捞月",
    24: "杠上花",
    25: "清七对",
    26: "清龙七对",
    27: "龙七对",
    28: "全求人",
    29: "杠上炮",
    30: "门前清",
    31: "风一色",
    32: "门前清+清一色",
    33: "清一色+四暗刻",
    34: "海底炮",
    35: "十三幺",
    36: "七对",
    37: "带幺九",
    38: "将对",
    39: "一条龙",			//一条龙
    40: "清一条龙",		//清一条龙
    41: "4鬼胡",				//4鬼胡
    42: "无鬼",				//无鬼
    43: "清全求人",		//清全求人
    44: "单吊",				//单吊
    45: "明四归",				//明四归
    46: "暗四归",				//暗四归
    47: "将七对",			//将七对
    48: "根",		     	//勾牌
    49: "中张",               //中张
    50: "门清",                  //门清
    51: "金钩胡",
    52: "夹心五",
    53: "双龙七对",
    54: "清双龙七对",
    55: "清一色金钩胡",
    56: "将对对金钩胡",
    57: "456卡",
    58: "炮中炮",
    59: "花中花",
    60: "金勾吊",
    61: "暗七对",

    512: "四喜",
    513: "板板胡",
    514: "缺一色",
    515: "六六顺",
    516: "将将胡",
    517: "四个红中胡",
    518: "抢杠全包",
    519: "杠爆全包",
    524: "花单钓",
    525: "花钓花",
    526: "双花钓花",
    527: "三花钓花",
    528: "双豪华七小对",
    529: "三豪华七小对",
    530: "清双龙七对",
    531: "清三龙七对",
    532: "报九全包",
};
loadProtoFile("proto/chengdugameproto.proto");
var ChengduPackgName = {
    chengduSan: 397,
};
var CHENGDU_CMD = {
    SERVER_CHENGDU_START_HUANZHANG: 5071,//开始换张
    SERVER_CHENGDU_USER_HUANZHANG_DONE: 5073,//用户选完要换的张广播
    SERVER_CHENGDU_ALL_HUANZHANG_DONE: 5075,//所有人换张完成

    SERVER_CHENGDU_START_DINGQUE: 5070,//开始定缺
    SERVER_CHENGDU_USER_DINGQUE_DONE: 5072,//用户选完定缺色广播
    SERVER_CHENGDU_ALL_DINGQUE_DONE: 5074,//所有人定缺完成
}
var MJTable_ChengDu = MJTable.extend({
    tag: "MJTable_ChengDu",
    _lock_card: 0,
    gameDes: "",
    _all_state_tip: [null, null, null, null],
    _all_huType_tip: [null, null, null, null],
    _all_DajiaoType_tip: [null, null, null, null],
    _lackDingque: [null, null, null, null],
    _changeCard: [null, null, null, null],
    _allPaoCard: [[], [], [], []],
    isRecordShow: false,
    mChangeBar: null,
    mPaiSeBar: null,
    _pkg_id: 0,
    _MJShaizi: 0,
    change_hand_card: [],
    _isDelay: false, //判断是否延迟定缺开始 与 给换三张的那张牌单独样式
    ctor: function () {
        this._super();
    },
    initRoom: function () {
        try {
            var roomData = JSON.parse(ZJHModel.getInstance().getRoomData());
            this._pkg_id = roomData["gameRoom"]["pkgId"];
            if (this._pkg_id == 397 || this._pkg_id == 421) {
                MJModel.mj_roomType = 1;
            } else if (this._pkg_id == 2050 || this._pkg_id == 1948) {
                MJModel.mj_roomType = 2;
            }

        } catch (e) {
            Log(this, e);
        }
        MJModel.mj_suport_fangyan = 0;
        MJModel.otherOutCardEffect = false;
        MJModel.outCardEffect_style = 1;
        MJModel.mj_suport_change_bg = 0;
        MJModel.toupiaoTipsType = 1;
        MJModel.needTipWhenPass = 0;
        MJModel.isOutCard = true;
        MJModel.mj_card_lib_type = 1;
        MJModel.Is_yipaoduoxiang = true;
        MJModel.mj_public_style = 1;
        MJModel.mj_chat_style = 5;
        MJModel.mj_hu_type = 1;
        //MJModel.mj_layout = 0;
        MJModel.scmjType = 1;
        MJModel.chi_layout = 0;
        MJModel.shareType = 1;
        MJModel.mj_gps_type = 1;
        MJModel.isSupportOnlineYaoqing = true;
        //MJModel.fangyan = "putonghua";
        var size = cc.director.getWinSize();
        this._init_extend();
        this._super();
        // if (!MJModel.isOnVideo) {
        //     var game_help = this.roomPublic.getChildByName("game_help");
        //     if (game_help !== null) {
        //         game_help.setVisible(false);
        //     }
        // }
        var self = this;
        this.mPaiSeBar = new CHENGDU_Paise();
        this.mPaiSeBar.setVisible(false);
        this.mPaiSeBar.addClickEventListener(function (node) {
            self.onPaiSeClick(node);
        });
        this.mChangeBar = new MJChange();
        this.mChangeBar.setVisible(false);
        this.mChangeBar.addClickEventListener(function (node) {
            self.onChangeClick(node);
        });
        this.addChild(this.mChangeBar, 2);
        this.addChild(this.mPaiSeBar, 2);
        this._setFastChat();
        this._createWaitLack();
        this._createWaitchange();
        var mjType = new cc.Sprite(this.getMjTypePath());
        if (mjType != null) {
            mjType.setPosition(cc.p(size.width / 2, 530));
            this.addChild(mjType, 0);
        }
        //this.schedule(this.test, 1.0);
    },
    test: function (d) {
        MJModel.testCount++;
        var tempCount = MJModel.testCount;
        if (tempCount == 5 && false) {
            this.room_Info.setVisible(true);
            if (this.room_Action.getChildByName("yaoqing")) {
                this.room_Action.getChildByName("yaoqing").setVisible(false);
            }
            var cardlist = [];
            for (var k = 1; k <= 14; k++) {
                var v = Utils.Random(0, 2) * 16 + Utils.Random(1, 9);
                cardlist.push(v);
            }

            this.room_Card.initHandCard(0, [1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 9, 9]);
            this.room_Card.reflashHandCard(0, true);

            cardlist = [];
            for (var k = 1; k <= 14; k++) {
                var v = Utils.Random(0, 2) * 16 + Utils.Random(1, 9);
                cardlist.push(0);
            }

            this.room_Card.initHandCard(1, cardlist);
            this.room_Card.reflashHandCard(1, true);

            this.room_Card.initHandCard(2, cardlist);
            this.room_Card.reflashHandCard(2, true);

            this.room_Card.initHandCard(3, cardlist);
            this.room_Card.reflashHandCard(3, true);

            //this.room_Card.initMoCard(0, 1, false);
            //this.room_Card.initMoCard(1, 0, false);
            //this.room_Card.initMoCard(2, 0, false);
            //this.room_Card.initMoCard(3, 0, false);

            //for (var i = 1; i < 4; i++) {
            //    this.room_Card.addPengCard(i, PengType.Peng_Peng, 1, 0, 0);
            //    this.room_Card.addPengCard(i, PengType.Peng_AnKang, 1, 0, 0);
            //    this.room_Card.addPengCard(i, PengType.Peng_Kang, 1, 0, 0);
            //    this.room_Card.addPengCard(i, PengType.Peng_Peng, 1, 0, 0);
            //}
            //
            //var list = [1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 9, 9,1, 2, 3, 4, 5, 6, 7, 8];
            //for (var i = 0; i < list.length; i++) {
            //    this.room_Card.addOutCard(0, v);
            //}
            //
            //for (var i = 0; i < 58; i++) {
            //    this.room_Card.addOutCard(2, v);
            //}

            for (var i = 0; i < 4; i++) {
                for (var j = 0; j < 15; j++) {
                    var v = Utils.Random(0, 2) * 16 + Utils.Random(1, 9);
                    this.room_Card.addOutCard(i, v);
                }
            }

            this._show_hu_tip(3, 2);
            this._show_hu_tip(2, 2);
            this._show_hu_tip(1, 2);
            this._show_hu_tip(0, 2);

            //this.handler_server_game_end_bc(packet, true);
        }
        else if (tempCount == 5 && true) {
            var packet = {
                "gameend": {
                    "UserCard": [{
                        "ChangeableCardsLen": 13,
                        "ChangeableCards": [2, 2, 5, 6, 7, 7, 8, 9, 18, 19, 20, 22, 23],
                        "FixedCardsLen": 0,
                        "stFixedCards": []
                    }, {
                        "ChangeableCardsLen": 7,
                        "ChangeableCards": [2, 2, 18, 19, 20, 21, 22],
                        "FixedCardsLen": 2,
                        "stFixedCards": [{"CardData": 17, "state": 2, "chairID": 0, "LaiziNum": null}, {
                            "CardData": 25,
                            "state": 1,
                            "chairID": 0,
                            "LaiziNum": null
                        }]
                    }, {
                        "ChangeableCardsLen": 13,
                        "ChangeableCards": [3, 4, 4, 4, 5, 7, 8, 9, 20, 22, 23, 24, 25],
                        "FixedCardsLen": 0,
                        "stFixedCards": []
                    }, {
                        "ChangeableCardsLen": 10,
                        "ChangeableCards": [6, 6, 6, 8, 8, 9, 9, 18, 19, 20],
                        "FixedCardsLen": 1,
                        "stFixedCards": [{"CardData": 1, "state": 1, "chairID": 1, "LaiziNum": null}]
                    }],
                    "Score": [-4, 4, -1, 1],
                    "EndState": 1,
                    "EndGangInfo": [{
                        "Gang": [{"GangType": 64, "GangCard": 17}],
                        "TotalGangScore": -2
                    }, {"Gang": [{"GangType": 2, "GangCard": 17}], "TotalGangScore": 2}, {
                        "Gang": [],
                        "TotalGangScore": 0
                    }, {"Gang": [], "TotalGangScore": 0}],
                    "faninfo": [{
                        "chairid": 0,
                        "SpecialType": 7,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 1,
                        "SpecialType": 2,
                        "FanNum": 1,
                        "addfan": [{"AddType": 17, "AddNum": 0, "AddType2": 1}, {
                            "AddType": 48,
                            "AddNum": 1,
                            "AddType2": 1
                        }],
                        "hucard": 23,
                        "DianPao": []
                    }, {
                        "chairid": 2,
                        "SpecialType": 0,
                        "FanNum": 0,
                        "addfan": [],
                        "hucard": 0,
                        "DianPao": []
                    }, {
                        "chairid": 3,
                        "SpecialType": 2,
                        "FanNum": 0,
                        "addfan": [{"AddType": 17, "AddNum": 0, "AddType2": 1}],
                        "hucard": 21,
                        "DianPao": []
                    }],
                    "money": [99996, 100004, 99999, 100001]
                },
                "husocore": [-4, 4, -1, 1],
                "hupaiinfo": [{
                    "seatid": 0,
                    "totalhufan": null,
                    "hutype": 3,
                    "hushunxu": null,
                    "hucard": null,
                    "dianpaoseatid": null,
                    "totalgangfen": -2,
                    "totalzhuanyufen": 0,
                    "hufanleixing": [],
                    "hufan": [],
                    "ganginfo": [],
                    "beihuseatid": []
                }, {
                    "seatid": 1,
                    "totalhufan": 1,
                    "hutype": 2,
                    "hushunxu": 2,
                    "hucard": 23,
                    "dianpaoseatid": 0,
                    "totalgangfen": 2,
                    "totalzhuanyufen": 0,
                    "hufanleixing": [17, 48],
                    "hufan": [0, 1],
                    "ganginfo": [{
                        "gangpai": 17,
                        "gangtype": 2,
                        "gangyingfen": 2,
                        "diangangid": 0,
                        "gangfeninfo": [{"seatid": 0, "gangfen": 2}]
                    }],
                    "beihuseatid": [0]
                }, {
                    "seatid": 2,
                    "totalhufan": null,
                    "hutype": 3,
                    "hushunxu": null,
                    "hucard": null,
                    "dianpaoseatid": null,
                    "totalgangfen": 0,
                    "totalzhuanyufen": 0,
                    "hufanleixing": [],
                    "hufan": [],
                    "ganginfo": [],
                    "beihuseatid": []
                }, {
                    "seatid": 3,
                    "totalhufan": 0,
                    "hutype": 2,
                    "hushunxu": 1,
                    "hucard": 21,
                    "dianpaoseatid": 2,
                    "totalgangfen": 0,
                    "totalzhuanyufen": 0,
                    "hufanleixing": [17],
                    "hufan": [0],
                    "ganginfo": [],
                    "beihuseatid": [2]
                }],
                "dajiaoinfo": []
            }
            this._show_hu_tip(3, 2);
            this._show_hu_tip(2, 2);
            this._show_hu_tip(1, 2);
            this._show_hu_tip(0, 2);

            this.handler_server_game_end_bc(packet, true);
        } else if (tempCount == 5 && false) {
            this.mChangeBar.setVisible(false);
        }
    },
    reflashSetting: function (isInit) {
        this._super(isInit);
        if (this.mChangeBar && this.mChangeBar.getChildByName("sureChoice") != undefined) {
            this.mChangeBar.getChildByName("sureChoice").setEnabled(false);
        }

        var pos = 0
        if (this.room_Card && this.room_Card.isDuoPai(pos)) {
            var card = this.room_Card.hand_card[pos][13];
            if (card) {
                card.setMyPosition(MJConfig.getMoCardPos(pos));
                this.room_Card.hand_card[pos].splice(13, 1);
                this.room_Card.reflashHandCard(pos);
                this.room_Card.hand_card[pos].push(card);
            }

            this.room_Card.openHuaZhuClickOnly();
        }


        if (this.room_Card) {
            //更新hu的坐标
            for (var i = 0; i < 4; i++) {
                var card = this.room_Card.other_card[i][0];
                if (card) {
                    card.reflashUI();
                    card.setPosition(MJConfig.getMoCardPos(i));
                }
            }
        }


        //更新坐标
        for (var i = 0; i < MJModel.players.length; i++) {
            var player = MJModel.players[i];
            var hu_tip = this._all_huType_tip[i];
            Log(this, "lin=player=" + player);
            if (hu_tip && player) {
                if (i != 2) {
                    hu_tip.setPosition(MJConfig.getPlayerPos(i).x, MJConfig.getPlayerPos(i).y + 70);
                }
            }
        }

        //this._all_huType_tip[pos];

    },
    updateBg: function (isInit) {
        if (isInit == undefined)isInit = false;
        this._super(isInit);
        if (isInit)return;
        if (this.pre_scene)this.pre_scene.bg.loadTexture(getResPath(this.getBgStr()));
    },
    getMjTypePath: function () {
        if (MJModel.mj_roomType == 1) {
            return getResPath("chengdumj/chengdu/play_2.png");
        } else if (MJModel.mj_roomType == 2) {
            return getResPath("chengdumj/chengdu/play_5.png");
        } else {
            return getResPath("chengdumj/chengdu/play_1.png");
        }
    },
    fastChat5: ["我等的花都谢了", "让我再想想", "我们交个朋友吧", "我有一百种办法胡你", "下次咱们再玩吧", "怎么又断线了", "我要离开一会儿"],
    _setFastChat: function () {
        MJModel.mj_fastChat = this.fastChat5;
    },
    resetGame: function (allClean) {
        this._super(allClean);
        this._hide_all_tip();
        this._isShowWaitLack(false);
        this._isShowWaitchange(false);
        if (this.mChangeBar.getChildByName("sureChoice") != undefined) {
            this.mChangeBar.getChildByName("sureChoice").setEnabled(false);
        }
        this._clearAllPaoCard();
        this._MJShaizi = 0;
        this.change_hand_card = [];
    }
    ,
    timeEnd: function (dt) {

        if (MJModel.isEnd)return;

        if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
            if (MJModel.isState(MJ_STATUS.MJ_GAME_FREE)) {
                sendGameEndRecordReq();
            }
        }
    },
    handler_cmd: function (cmd, jpacket, canDelay, svrid) {
        if (cmd == CMD.SERVER_GAME_SCENE) {
            this.handlerTableInfo(this.tableData);
            var ackGameFree = parsePacket("proto.game.chengdumj.tagCDGameScence", jpacket);
            this.handler_server_scene_info_uc(ackGameFree, canDelay);
            return;
        }
        if (cmd == CMD.SERVER_GAME_END) {
            var ackGameEnd = parsePacket("proto.game.chengdumj.AckCDGameEnd", jpacket);
            this.handler_server_game_end_bc(ackGameEnd, canDelay);
            return;
        }
        if (cmd == CHENGDU_CMD.SERVER_CHENGDU_START_HUANZHANG) {
            //开始换牌
            this._handler_server_change_start(jpacket, canDelay);
        } else if (cmd == CHENGDU_CMD.SERVER_CHENGDU_USER_HUANZHANG_DONE) {
            //换牌中
            this._handler_server_change(jpacket, canDelay);
        } else if (cmd == CHENGDU_CMD.SERVER_CHENGDU_ALL_HUANZHANG_DONE) {
            //换牌结束
            this._handler_server_change_end(jpacket, canDelay);
        } else if (cmd == CHENGDU_CMD.SERVER_CHENGDU_START_DINGQUE) {
            //定缺开始
            this._handler_server_lack_start(jpacket, canDelay);
        } else if (cmd == CHENGDU_CMD.SERVER_CHENGDU_USER_DINGQUE_DONE) {
            //定缺中
            this._handler_server_lack(jpacket, canDelay);
        } else if (cmd == CHENGDU_CMD.SERVER_CHENGDU_ALL_DINGQUE_DONE) {
            //定缺结束
            this._handler_server_lack_end(jpacket, canDelay);
        } else if (cmd == CMD.SERVER_GAME_RECORD) {
            this._handler_game_record(jpacket, canDelay);
        }
        this._super(cmd, jpacket, canDelay, svrid);
    },
    handler_server_game_start_bc: function (data, canDelay) {
        MJModel.roomState = 1;
        this.resetGame(false, true);
        this.room_Info.setVisible(true);
        MJModel.state = MJ_STATUS.MJ_GAME_PLAYING;
        var gameStart = parsePacket("proto.game.AckGameStart", data);
        MJModel.banker_seatid = gameStart.ChairID;

        var pos = MJModel.getPosBySeatid(MJModel.banker_seatid);
        var player = this.players[pos];
        if (player) {
            player.setBankerFlag(true);
        }
        cc.eventManager.dispatchCustomEvent("notify_game_check_end");
        if (this.room_Action.getChildByName("yaoqing")) {
            this.room_Action.getChildByName("yaoqing").setVisible(false);
        }
        this._super(data, canDelay);
    },
    startTimeEnd1: function () {
        // PlatformHelper.showToast("有人通知房间结束！");
        this.schedule(this.timeEnd, 0.2);
    },
    _handler_game_record: function (data, canDelay) {
        //-----新总结算界面
        if (this.isRecordShow) {
            return;
        }
        this.isRecordShow = true;
        var self = this;
        this.resetGame(false);
        var gameType = "血战到底 · 4人";
        if (MJModel.mj_roomType == 1) {
            gameType = "血战到底 · 3人";
        }
        if (MJModel.mj_roomType == 2) {
            gameType = "血战到底 · 2人";
        }

        var gameRecord = parsePacket("proto.game.GameEndRecord", data);
        var bigResult = new CommonTotalResult();
        this.addChild(bigResult, 100000);

        var time = Utils.getTime(gameRecord.DataTime * 1000);
        var startTime = Utils.getTime(MJModel.roomData["gameRoom"]["createTime"]);

        var roomId = "房间号:" + MJModel.roomData["gameRoom"]["code"];

        bigResult.initUI(gameType, roomId, time, startTime, MJModel.RoomCountSum, MJModel.currentCount);
        bigResult.back_btn.addClickEventListener(function (node) {
            self.exitRoom(true);
        });
        var _winSeatid = [0, 0, 0, 0];
        var _PaoSeatid = [0, 0, 0, 0];
        for (var i = 0; i < gameRecord.MostDianPaoUser.length; i++) {
            var seatId = gameRecord.MostDianPaoUser[i];
            if (seatId != 255) {
                _PaoSeatid[seatId] = 1;
            }
        }

        for (var i = 0; i < gameRecord.MostWinScoreUser.length; i++) {
            var seatId = gameRecord.MostWinScoreUser[i];
            if (seatId != 255) {
                _winSeatid[seatId] = 1;
            }
        }
        var addX = 0;
        var PlayerNumber = 0;
        var has_result = false;
        var houseOwner = false;
        for (var i = 0; i < gameRecord.UserRecoreInfo.length; i++) {
            var recoreInfo = gameRecord.UserRecoreInfo[i];
            var player = MJModel.players[i];
            var arrStr = ["自摸次数", "接炮次数", "点炮次数", "暗杠次数", "明杠次数", "查大叫"];
            var arrcount = [recoreInfo.banker_num, recoreInfo.hu_num, recoreInfo.outtime_num, recoreInfo.DianGangTimes, recoreInfo.WinCounts, recoreInfo.GangTimes];

            if (player && player.uid != -1) {
                addX = 39 + (i * 302);
                if (MJModel.roomData["gameRoom"]["userId"] == player.uid) {
                    houseOwner = true;
                } else {
                    houseOwner = false;
                }
                var Item = bigResult.addItem(player.avatar, player.name, player.uid, _winSeatid[i], _PaoSeatid[i], arrStr, arrcount, recoreInfo.totalscore, houseOwner);
                Item.setAnchorPoint(cc.p(0.5, 0.5));
                bigResult.player_records[i] = Item;
                PlayerNumber++;
            }

            if (recoreInfo.totalscore != 0) {
                has_result = true;
            }

        }
        bigResult.refresh(PlayerNumber);

        this.release();
    },
    _changeEffectNum: 0,
    _handler_server_change_start: function (data, canDelay) {
        var changeInfo = parsePacket("proto.game.chengdumj.AckUserChangeCardStart", data);
        cc.log("_handler_server_change_start");
        //初始化换牌数据
        this.change_hand_card = [];
        for (var i = 0; i < MJModel.Play_num; i++) {
            var a = [];
            this.change_hand_card.push(a);
        }

        var shaizi1 = 0;
        if (changeInfo.itouzinum) {
            shaizi1 = changeInfo.itouzinum;
            this._MJShaizi = shaizi1;
        }
        var self = this;
        if (changeInfo.isTimeOut == 0) {
            MJModel.canChoiceMore = true;
            MJModel.canTouchCard = true;
            this.room_Info.showTime(MJModel.changeTime);
            this.mChangeBar.setVisible(true);
            this._isShowWaitchange(true);
        }
    },

    _handler_server_change: function (data, canDelay) {
        cc.log("_handler_server_change");
        var ackLackOk = parsePacket("proto.game.chengdumj.AckChangeCardOk", data);
        var seatid = ackLackOk.chairID;
        var isOk = ackLackOk.isOk;

        if (isOk[0]) {
            var pos = MJModel.getPosBySeatid(seatid[0]);
            if (pos == 0) {
                this.mChangeBar.setVisible(false);
            }
            if (this._changeCard[pos]) {
                this._changeCard[pos].setTexture(getResPath("chengdumj/chengdu/ok.png"));
            }
        }
    },
    _handler_server_change_end: function (data, canDelay) {
        cc.log("_handler_server_change_end");
        var changeCard = parsePacket("proto.game.chengdumj.AckChangeCard", data);
        this._isDelay = true;
        var self = this;
        //录像时只播一次动画
        self._changeEffectNum++;
        var effect = 0; //默认顺时针
        if (this._MJShaizi == 2 || this._MJShaizi == 6) {
            //对家
            effect = 2;
        } else if (this._MJShaizi == 3 || this._MJShaizi == 4) {
            //逆时针
            effect = 1;
        }

        if (MJModel.seatid != -1 && canDelay) {

            if (changeCard.chairID == 0 || !MJModel.isOnVideo) {
                var callback1 = cc.CallFunc(function () {
                    self._showChangeEffect(effect);
                });
                var callback2 = cc.CallFunc(function () {
                    //在座位上
                    self.mChangeBar.setVisible(false);
                    MJModel.canChoiceMore = false;
                    MJModel.canTouchCard = false;
                    self.room_Card.setUp(false);
                    var pos = MJModel.getPosBySeatid(changeCard.chairID);
                    for (var i = 0; i < changeCard.oldCard.length; i++) {
                        cc.log("---oldCard--: " + changeCard.oldCard[i])
                        self.room_Card.removeHandCard(pos, changeCard.oldCard[i]);
                    }
                    for (var i = 0; i < changeCard.Card.length; i++) {
                        cc.log("new_Card:" + changeCard.Card[i]);
                        if (self.change_hand_card[pos] != undefined) {
                            self.change_hand_card[pos].push(changeCard.Card[i]);
                        }
                        self.room_Card.addHandCard(pos, changeCard.Card[i]);
                    }
                    self.room_Card.reflashHandCard(pos, true);
                    self.room_Card.setCurChoiceType(-1);
                    self.mPaiSeBar.setGoodPaiSe(self.room_Card.getGoodPaiSe());

                });

                this.runAction(cc.sequence(callback1, cc.delayTime(1.5), callback2));
            } else {
                //在座位上
                self.mChangeBar.setVisible(false);
                MJModel.canChoiceMore = false;
                MJModel.canTouchCard = false;
                self.room_Card.setUp(false);
                var pos = MJModel.getPosBySeatid(changeCard.chairID);
                for (var i = 0; i < changeCard.oldCard.length; i++) {
                    cc.log("---oldCard--: " + changeCard.oldCard[i])
                    self.room_Card.removeHandCard(pos, changeCard.oldCard[i]);
                }
                for (var i = 0; i < changeCard.Card.length; i++) {
                    cc.log("new_Card:" + changeCard.Card[i]);
                    if (self.change_hand_card[pos] != undefined) {
                        self.change_hand_card[pos].push(changeCard.Card[i]);
                    }
                    self.room_Card.addHandCard(pos, changeCard.Card[i]);
                }
                self.room_Card.reflashHandCard(pos, true);
                self.room_Card.setCurChoiceType(-1);
            }
        } else if (MJModel.seatid != -1) {
            //在座位上
            this.mChangeBar.setVisible(false);
            MJModel.canChoiceMore = false;
            MJModel.canTouchCard = false;
            var changeCard = parsePacket("proto.game.chengdumj.AckChangeCard", data);
            this.room_Card.setUp(false);
            var pos = MJModel.getPosBySeatid(changeCard.chairID);
            for (var i = 0; i < changeCard.oldCard.length; i++) {
                cc.log("---oldCard--: " + changeCard.oldCard[i])
                this.room_Card.removeHandCard(pos, changeCard.oldCard[i]);
            }
            for (var i = 0; i < changeCard.Card.length; i++) {
                cc.log("new_Card:" + changeCard.Card[i]);
                if (this.change_hand_card[pos] != undefined) {
                    this.change_hand_card[pos].push(changeCard.Card[i]);
                }
                this.room_Card.addHandCard(pos, changeCard.Card[i]);
            }
            this.room_Card.reflashHandCard(pos, true);
            this.room_Card.setCurChoiceType(-1);
        }
        this._isShowWaitchange(false);
    },
    _handler_server_lack_start: function (data, canDelay) {
        cc.log("_handler_server_lack_start");
        var lackInfo = parsePacket("proto.game.chengdumj.AckUserLackStart", data);
        if (MJModel.seatid != -1 && lackInfo.isTimeOut == 0) {
            this._isShowWaitLack(true);
            if (canDelay && MJModel.mj_roomType != 1) {
                this.room_Info.showTime(MJModel.lackTime);
                this.mPaiSeBar.setGoodPaiSe(this.room_Card.getGoodPaiSe());
                this.mPaiSeBar.setVisible(true);
            }
        }
    },
    _showChangeEffect: function (effect) {
        try {
            var size = cc.director.getWinSize();
            var self = this;
            {
                var bg = new cc.Sprite(getResPath("chengdumj/tip/changeBg.png"));
                bg.setName("huanpaiBg");
                bg.setPosition(cc.p(size.width / 2, size.height / 2));
                this.addChild(bg);

                var huanpaiTip = new cc.Sprite(getResPath("chengdumj/tip/changeText.png"));
                huanpaiTip.setPosition(cc.p(bg.getContentSize().width / 2, bg.getContentSize().height / 2 + 25));
                bg.addChild(huanpaiTip);

                var huanpaiText = new cc.Sprite(__String.createWithFormat(getResPath("chengdumj/tip/huanpai_%1.png"), effect));
                huanpaiText.setPosition(cc.p(bg.getContentSize().width / 2, bg.getContentSize().height / 2 - 40));
                bg.addChild(huanpaiText);

                var removeEffect = cc.CallFunc(function () {
                    self.removeChildByName("huanpaiBg");
                });
            }

            ccs.armatureDataManager.addArmatureFileInfo(getResPath("chengdumj/effect/change/effectsfszzmjxh.ExportJson"));
            var armature = new ccs.Armature("effectsfszzmjxh");
            if (armature != null) {
                var animation = armature.getAnimation();
                if (animation) {
                    if (typeof animation.playWithIndex === "function") {
                        animation.playWithIndex(effect);
                        // animation.play(effect);
                        armature.setPosition(cc.p(size.width / 2, size.height / 2));
                        this.addChild(armature, 10000);
                        armature.runAction(cc.sequence(cc.delayTime(1.5), removeEffect, cc.removeSelf()));
                    }
                }
            }
        } catch (e) {
            Log(this, e);
        }
    },
    _handler_server_lack: function (data, canDelay) {
        cc.log("_handler_server_lack");
        var ackLackOk = parsePacket("proto.game.chengdumj.AckUserLackTypeOk", data);
        var seatid = ackLackOk.chairID;
        var isOk = ackLackOk.isOk;
        for (var i = 0; i < seatid.length; i++) {
            if (isOk[seatid[i]]) {
                var pos = MJModel.getPosBySeatid(seatid[i]);
                if (pos == 0) {
                    this.mPaiSeBar.setVisible(false);
                }
                if (this._lackDingque[pos]) {
                    this._lackDingque[pos].setTexture(getResPath("chengdumj/chengdu/ok.png"));
                }
            }
        }
    },
    _handler_server_lack_end: function (data, canDelay) {
        cc.log("_handler_server_lack_end");
        this.mPaiSeBar.setVisible(false);
        var lackType = parsePacket("proto.game.chengdumj.AckUserLackType", data);
        for (var i = 0; i < lackType.LackType.length; i++) {
            var lack = lackType.LackType[i];
            var pos = MJModel.getPosBySeatid(i);
            this.players[pos].setLackType(lack);

            if (MJModel.seatid == i) {
                MJModel.lackType = lack;
                if (this.room_Card.isDuoPai(pos)) {
                    var card = this.room_Card.hand_card[pos][13];
                    card.setMyPosition(MJConfig.getMoCardPos(pos));
                    this.room_Card.hand_card[pos].splice(13, 1);
                    this.room_Card.reflashHandCard(pos);
                    this.room_Card.hand_card[pos].push(card);

                } else {
                    this.room_Card.reflashHandCard(pos);
                }
            }
        }
        this._isShowWaitLack(false);
    },
    handler_server_scene_info_uc: function (chengdu_scene, canDelay) {
        var ackGameFree = chengdu_scene.GameSence;
        var sceneStatus = ackGameFree.SceneStatus;
        this.mPaiSeBar.setVisible(false);
        this.mChangeBar.setVisible(false);
        MJModel.mj_hu_flag = [0, 0, 0, 0];

        //定缺
        var lack = chengdu_scene.dingquese;
        if (sceneStatus == 3) {
            for (var i = 0; i < lack.length; i++) {
                var lackType = lack[i];
                var pos = MJModel.getPosBySeatid(i);
                this.players[pos].setLackType(lackType);
                if (i == MJModel.seatid) {
                    MJModel.lackType = lack[i];
                }
            }
        }
        //恢复胡牌标志 （炮胡，自摸）
        if (chengdu_scene.nHuType) {
            for (var i = 0; i < chengdu_scene.nHuType.length; i++) {
                var pos = MJModel.getPosBySeatid(i);
                var type = chengdu_scene.nHuType[i];
                this._show_hu_tip(pos, type);
                if (type == 1) {
                    MJModel.mj_hu_flag[pos] = 1;
                }
            }
        }
        this._super(ackGameFree, canDelay);
        var isChange = chengdu_scene.bHuanSanZhang;
        var dianGang = chengdu_scene.bAllDianGangHua;
        var zimoFan = chengdu_scene.bZiMoJiaFanJiaDi;
        var Fengding = chengdu_scene.bHuFanFengDing;
        var fan1 = chengdu_scene.bYaoJiuJiangDui;
        var fan2 = chengdu_scene.bMenQingZhongZhang;
        var fan3 = chengdu_scene.bTianDiHu;
        var fan4 = chengdu_scene.bDianPaoKePingHu;
        var fan5 = chengdu_scene.bYiTiaoLong;
        var fan6 = chengdu_scene.bGuaCa;
        var fan7 = chengdu_scene.nDuiDuiHuFan;
        var fan8 = chengdu_scene.bJiaXinWu;
        var fan9 = chengdu_scene.bHaiDiHuaJiaFan;
        var fan10 = chengdu_scene.bHaiDiPaoJiaFan;
        var fan11 = chengdu_scene.bDiFen;
        if (isChange != null && dianGang != null && zimoFan != null && Fengding != null && fan1 != null && fan2 != null && fan3 != null && fan4 != null && fan5 != null && fan6 != null && fan7 != null && fan8 != null
            && fan9 != null && fan10 != null && fan11 != null) {
            this._gameInfoDes(isChange, dianGang, zimoFan, Fengding, fan1, fan2, fan3, fan4, fan5, fan6, fan7, fan8, fan9, fan10, fan11);
        }
        if (sceneStatus == 2) {
            this.mPaiSeBar.setGoodPaiSe(this.room_Card.getGoodPaiSe());
            this.mPaiSeBar.setVisible(true);
            var cont = 0;
            var lackOk = chengdu_scene.dingqueisok;
            for (var i = 0; i < lackOk.length; i++) {
                if (lackOk[i]) {
                    cont++;
                }
            }
            if (cont != 4) {
                this._isShowWaitLack(true);
                MJModel.canChoiceMore = false;
                MJModel.canTouchCard = false;
                for (var i = 0; i < lackOk.length; i++) {
                    if (lackOk[i]) {
                        var pos = MJModel.getPosBySeatid(i);
                        if (this._lackDingque[pos]) {
                            this._lackDingque[pos].setTexture(getResPath("chengdumj/chengdu/ok.png"));
                        }
                        //如果自己已定缺完成，隐藏定缺界面
                        if (i == MJModel.seatid) {
                            this.mPaiSeBar.setVisible(false);
                        }
                    }
                }
            }
        }
        if (this.mChangeBar.getChildByName("sureChoice") != undefined) {
            this.mChangeBar.getChildByName("sureChoice").setEnabled(false);
        }
        if (sceneStatus == 1) {
            this.mChangeBar.setVisible(true);
            MJModel.canTouchCard = true;
            MJModel.canChoiceMore = true;
            cont = 0
            var changeOk = chengdu_scene.huanzhangisok;
            for (var i = 0; i < changeOk.length; i++) {
                if (changeOk[i]) {
                    cont++;
                }
            }
            if (cont != 4) {
                this._isShowWaitchange(true);
                for (var i = 0; i < changeOk.length; i++) {
                    if (changeOk[i]) {
                        var pos = MJModel.getPosBySeatid(i);
                        if (this._changeCard[pos]) {
                            this._changeCard[pos].setTexture(getResPath("chengdumj/chengdu/ok.png"));
                        }
                        //如果自己换牌完成，隐藏换牌界面
                        if (i == MJModel.seatid) {
                            MJModel.canChoiceMore = false;
                            MJModel.canTouchCard = false;
                            this.mChangeBar.setVisible(false);
                        }
                    }
                }
            }
        }

        if (chengdu_scene.nDianPaoHuCard) {
            for (var i = 0; i < chengdu_scene.nDianPaoHuCard.length; i++) {
                if (chengdu_scene.nDianPaoHuCard[i] != 255) {
                    var paohuSeatId = MJModel.getPosBySeatid(i);
                    this._show_pahu_card(paohuSeatId, chengdu_scene.nDianPaoHuCard[i]);
                }
            }
        }
        //自摸牌倒出来
        if (chengdu_scene.nZiMoHuCard) {
            for (var i = 0; i < chengdu_scene.nZiMoHuCard.length; i++) {
                if (chengdu_scene.nZiMoHuCard[i] != 255) {
                    var huCard = chengdu_scene.nZiMoHuCard[i];
                    var pos = MJModel.getPosBySeatid(i);
                    this.room_Card.removeHandCard(pos, huCard);
                    this.room_Card.initMoCard(pos, huCard, true);
                    var length = this.room_Card.hand_card[pos].length;
                    this.room_Card.hand_card[pos][length - 1].setValue(huCard, pos, CardType.Card_End, length - 1);
                }
            }
        }
    },
    handler_server_player_wait_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.OperateWaite", data);
        var state = jpacket.state;
        var outPlayerTips = MJModel.getOutPlayerTips();
    },
    _gameInfoDes: function (ischange, diangang, zimo, fengding, fan1, fan2, fan3, fan4, fan5, fan6, fan7, fan8, fan9, fan10, fan11) {
        if (MJModel.mj_roomType == 2) {
            this.gameDes = "";
            if (MJModel.RoomConfigID.indexOf(1077001) != -1) this.gameDes += "点杠花(一家有),";
            if (MJModel.RoomConfigID.indexOf(1077002) != -1) this.gameDes += "点杠花(家家有),";
            if (MJModel.RoomConfigID.indexOf(1087001) != -1) this.gameDes += "自摸加1倍底分,";
            if (MJModel.RoomConfigID.indexOf(1087002) != -1) this.gameDes += "自摸胡牌分翻倍,";
            if (MJModel.RoomConfigID.indexOf(1248001) != -1) this.gameDes += "换三张,";
            if (MJModel.RoomConfigID.indexOf(1248002) != -1) this.gameDes += "带幺,";
            if (MJModel.RoomConfigID.indexOf(1248003) != -1) this.gameDes += "门清中张,";
            if (MJModel.RoomConfigID.indexOf(1248004) != -1) this.gameDes += "将对,";
            if (MJModel.RoomConfigID.indexOf(1248005) != -1) this.gameDes += "天地胡,";
            if (MJModel.RoomConfigID.indexOf(1248006) != -1) this.gameDes += "炮胡2番起,";
            if (MJModel.RoomConfigID.indexOf(1249001) != -1) this.gameDes += "3番封顶,";
            if (MJModel.RoomConfigID.indexOf(1249002) != -1) this.gameDes += "4番封顶幺,";
            if (MJModel.RoomConfigID.indexOf(1249003) != -1) this.gameDes += "5番封顶,";
        } else {
            var ischangeStr = ["", "换三张,"];
            var diangangStr = ["点杠花(一家有),", "点杠花(家家有),"];
            var zimoStr = ["自摸加番,", "自摸加底,"];
            var fanStr = fengding + "番封顶,";
            var fanStr1 = ["", "幺九将对,"];
            var fanStr2 = ["", "门清中张,"];
            var fanStr3 = ["", "天地胡,"];
            var fanStr4 = ["", "点炮可平胡,"];
            var fanStr5 = ["", "一条龙,"];
            var fanStr6 = ["", "擦挂,"];
            var fanStr7 = ["", "对对胡2番,"];
            var fanStr8 = ["", "夹心五,"];
            var fanStr9 = ["", "海底捞,"];
            var fanStr10 = ["", "海底炮,"];
            var fanStr11 = fan11 + "分底";
            this.gameDes = ischangeStr[ischange] + diangangStr[diangang] + zimoStr[zimo] + fanStr + fanStr1[fan1]
                + fanStr2[fan2] + fanStr3[fan3] + fanStr4[fan4] + fanStr5[fan5] + fanStr6[fan6] + fanStr7[fan7] + fanStr8[fan8]
                + fanStr9[fan9] + fanStr10[fan10];
        }


        cc.log("--this.gameDes---: " + this.gameDes);
        cc.eventManager.dispatchCustomEvent("notify_mjpublic_roomConfig", this.gameDes);

    },
    handler_server_end_room_result_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.AckDisbandResult", data);
        if (this.room_EndTouPiao) this.room_EndTouPiao.removeFromParent(true);
        this.room_EndTouPiao = null;
        MJModel.TouPiaoING = false;
        var result = jpacket.Result;
        if (result == 1) {
            MJModel.mj_end_room_type = 1;
        }
        else {
            PlatformHelper.showToast("解散失败，稍后游戏继续！");
        }
    },
    //胡tip
    _show_hu_tip: function (pos, type) {
        if (pos == -1 || type == 3 || type == 255) return;
        var tip_sp = this._all_huType_tip[pos];
        if (tip_sp == null) {
            tip_sp = new ccui.ImageView();
            this._all_huType_tip[pos] = tip_sp;
            this.addChild(tip_sp, 50);
        }
        if (tip_sp) {
            var tip_sp_name = "";
            if (type == 2) {
                tip_sp_name = "chengdumj/tip/ph.png";
            } else if (type == 1) {
                tip_sp_name = "chengdumj/tip/zm.png";
            }
            if (tip_sp_name != "") {
                tip_sp.loadTexture(getResPath(tip_sp_name));
                tip_sp.setVisible(true);
                var begin = MJConfig.getPlayerPos(pos);
                if (pos == 2) {
                    begin.y = 635;
                }
                if (pos == 2) {
                    begin.y += 50;
                    begin.x += 105;
                } else {
                    begin.y += 80;
                }
                if (pos == 1) {
                    begin.y -= 10;
                }
                tip_sp.setScale(0.7);
                tip_sp.setPosition(begin);
            }
        }
    }
    ,
    _hide_all_tip: function () {
        for (var i = 0; i < this._all_huType_tip.length; i++) {
            if (this._all_huType_tip[i]) this._all_huType_tip[i].setVisible(false);
        }
    }
    ,
    _init_extend: function () {
        var self_table = this;
        MJPreTable.prototype.setTableIcon = function () {
            var size = cc.director.getWinSize();
            var mjType = new cc.Sprite(MJModel.mj_table.getMjTypePath());
            if (mjType != null) {
                mjType.setPosition(cc.p(size.width / 2, size.height / 2 + 170));
                this.addChild(mjType, 0);
            }
        };

        var super_MJPreTable_ctor = MJPreTable.prototype.ctor;
        MJPreTable.prototype.ctor = function () {
            super_MJPreTable_ctor.call(this);
            var yaoqing = this.btns["yaoqing"];
            var copy = this.btns["copyshare"];
            var yaoqingpos = yaoqing.getPosition();
            var copypos = copy.getPosition();
            yaoqing.setPosition(copypos);
            copy.setPosition(yaoqingpos);

            this.bg.loadTexture(getResPath(self_table.getBgStr()));
        };

        BigFaceMenu.prototype.getIconsIndexArray = function (seatid) {
            var icons = [3, 7, 8, 1, 5];//需要显示的动画表情
            return icons;
        };
        var superSetting = Setting.prototype.gamesetting_reset;
        Setting.prototype.gamesetting_reset = function () {
            this.mj_font = "jianjie";
            this.mj_fontSize = "dahao";
            this.mj_light = "baitian";
            this.mj_style = "shishang";
            superSetting.call(this);
        };
        MJCards.prototype.setUp = function (isUp) {
            for (var i = 0; i < self_table.room_Card.hand_card[0].length; i++) {
                var fcard = self_table.room_Card.hand_card[0][i];
                if (fcard.isUp != isUp) {
                    fcard.setUp(isUp);
                }
            }
        };
        //Cards 碰杠去掉闪电
        MJCards.prototype.showLightAnim = function (position) {
        };
        //不要自动胡牌功能
        MJAction.prototype.setAutoOutCardVis = function (value) {
        };
        var supersetId = MJPlayer.prototype.setId;
        MJPlayer.prototype.setId = function (id) {
            supersetId.call(this, id);
            this.lack_flag = new cc.Sprite(getResPath("chengdumj/chengdu/tiao_icon.png"));
            this.lack_flag.setAnchorPoint(cc.p(0.5, 0.5));
            this.lack_flag.setPosition(cc.p(this.m_size.width + this.lack_flag.getContentSize().width / 2 - 35, this.lack_flag.getContentSize().height / 2 + 17));
            this.lack_flag.setVisible(false);
            this.addChild(this.lack_flag, 100);

            if (id == 2) {
                this.ready_flag.setPosition(cc.p(this.m_size.width / 2, -this.ready_flag.getContentSize().height / 2 - 20));
            } else {
                this.ready_flag.setPosition(cc.p(this.m_size.width / 2, this.m_size.height + this.ready_flag.getContentSize().height / 2));
            }
            var size = cc.director.getWinSize();

            if (id == 1 || id == 2) {
                if (id == 1) {
                    this.ready_flag.setPosition(cc.p(0, this.m_size.height - 10));
                } else {
                    this.ready_flag.setPosition(cc.p(0, this.m_size.height - 30));
                }
            }
            else {
                this.ready_flag.setPosition(cc.p(this.m_size.width - 10, this.m_size.height - 10));
            }

            if (id == 1 || id == 2) {
                if (id == 1) {
                    this.banker_flag.setPosition(cc.p(this.m_size.width - this.banker_flag.getContentSize().width / 2 + 10, this.m_size.height - this.banker_flag.getContentSize().height / 2 - 8));
                } else {
                    this.banker_flag.setPosition(cc.p(this.m_size.width - this.banker_flag.getContentSize().width / 2 + 10, this.m_size.height - this.banker_flag.getContentSize().height / 2 - 12));
                }
            }
            else {
                this.banker_flag.setPosition(cc.p(this.banker_flag.getContentSize().width / 2 - 10, this.m_size.height - this.banker_flag.getContentSize().height / 2 - 10));
            }
        };
        MJPlayer.prototype.setLackType = function (lack) {
            this.lack_flag.setVisible(true);
            if (lack == MJ_TYPE.MJ_TYPE_TIAO) {
                this.lack_flag.setTexture(getResPath("chengdumj/chengdu/tiao_icon.png"));
            }
            else if (lack == MJ_TYPE.MJ_TYPE_TONG) {
                this.lack_flag.setTexture(getResPath("chengdumj/chengdu/tong_icon.png"));
            }
            else if (lack == MJ_TYPE.MJ_TYPE_WAN) {
                this.lack_flag.setTexture(getResPath("chengdumj/chengdu/wan_icon.png"));
            }
            else {
                this.lack_flag.setVisible(false);

            }
        };
        var superreset = MJPlayer.prototype.reset;
        MJPlayer.prototype.reset = function () {
            superreset.call(this);
            this.setLackType(-1);
        };
        Setting.prototype.doSupportFangYan = function () {
            this.checkboxs_setting["fangyan_putonghua"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan1"].setVisible(true);
            this.checkboxs_setting["fangyan_fangyan2"].setVisible(false);

            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").setString("成都");
            this.checkboxs_setting["fangyan_fangyan1"].getChildByName("text").ignoreContentAdaptWithSize(true);

            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").setString("方言2");
            this.checkboxs_setting["fangyan_fangyan2"].getChildByName("text").ignoreContentAdaptWithSize(true);
        };

        var super_initSetting = Setting.prototype.initSetting;
        Setting.prototype.initSetting = function () {
            super_initSetting.call(this);
            this.checkboxs_setting["yinyue_jingdian"].setEnabled(false);
            this.checkboxs_setting["yinyue_jingdian"].setSelected(true);

            this.checkboxs_setting["yinyue_jingkuai"].setEnabled(false);
            this.checkboxs_setting["yinyue_jingkuai"].setSelected(false);

            this.checkboxs_setting["yinyue_suhuan"].setEnabled(false);
            this.checkboxs_setting["yinyue_suhuan"].setSelected(false);
        };

        //MJCard.
        MJCards.prototype.outMyCard = function (card) {
            this.curOutCard = null;
            this.resetLastOutCard();
            if (card) {
                cc.director.getRunningScene().removeChildByName("tingpai_layer");
                if (this.outCardBtn) this.outCardBtn.setVisible(false);
                card = removeCardByCard(card, this.hand_card[0]);
                var pos = 0;
                if (card) {
                    card.reset();
                    var self = this;
                    card.removeFromParent(true);
                    self.reflashHandCard(pos, true, true);
                    self.handler_out_card_sound(MJModel.players[MJModel.seatid].sex, card.value);
                }
            }
        };
        MJCards.prototype.outHandCard = function (pos, value) {
            this.resetLastOutCard();
            var size = cc.director.getWinSize();
            if (pos == 0 && MJModel.seatid != -1) {
                MJModel.hasCardOutIng = false;
                MJModel.isEnterWait = false;

                MJModel.mj_table.removeChildByName("tingpai_layer");
                if (this.outCardBtn) this.outCardBtn.setVisible(false);
                if (this.isDuoPai(pos)) {
                    var card = null;
                    if (MJModel.isMyPos(pos) && this.curOutCard && this.curOutCard.value == value) {
                        card = this.curOutCard;
                    }
                    if (card == null) card = findCardByValue(value, this.hand_card[pos]);

                    if (card) {
                        card = removeCardByCard(card, this.hand_card[pos]);

                        if (card) {
                            card.reset();
                            MJModel.isEnterWait = true;
                            var self = this;
                            var move_callbck = cc.callFunc(function () {
                                MJModel.isEnterWait = false;
                                card.removeFromParent(true);
                                self.reflashHandCard(pos, true, true);
                                self.addOutCard(pos, value);
                            });
                            card.runAction(cc.sequence(cc.moveTo(0.2, MJConfig.getOutCardPos(pos, this.out_card[pos].length)), move_callbck));
                        }
                        else {
                            self.addOutCard(pos, value);
                        }
                    }
                } else {
                    var card = null;
                    var isHaveZiero = true;
                    if (MJModel.getTangPaiFlag(pos)) {
                        isHaveZiero = false;
                        for (var i = 0; i < this.hand_card[pos].length; i++) {
                            if (this.hand_card[pos][i].value == 0) {
                                isHaveZiero = true;
                            }
                        }
                    }

                    card = removeCardByValue(MJModel.isOnVideo || !isHaveZiero ? value : 0, this.hand_card[pos]);
                    if (card) {
                        var begin_pos = card.getPosition();
                        card.removeFromParent(true);
                        this.outHandCardEffct(pos, value, begin_pos);
                    }
                    else {
                        this.outHandCardEffct(pos, value);
                    }
                }
            }
            else {
                var card = null;
                var isHaveZiero = true;
                if (MJModel.getTangPaiFlag(pos)) {
                    isHaveZiero = false;
                    for (var i = 0; i < this.hand_card[pos].length; i++) {
                        if (this.hand_card[pos][i].value == 0) {
                            isHaveZiero = true;
                        }
                    }
                }

                card = removeCardByValue(MJModel.isOnVideo || !isHaveZiero ? value : 0, this.hand_card[pos]);
                if (card) {
                    var begin_pos = card.getPosition();
                    card.removeFromParent(true);
                    this.outHandCardEffct(pos, value, begin_pos);
                }
                else {
                    this.outHandCardEffct(pos, value);
                }
            }
            this.curOutCard = null;
        };
        MJCards.prototype.outHandCardEffct = function (pos, value, out_card_pos) {
            this.outHandCardEffct2(pos, value);
        };
        MJCards.prototype.getGoodPaiSe = function () {
            var wanCount = 0;
            var tiaoCount = 0;
            var tongCount = 0;
            for (var i = 0; i < this.hand_card[0].length; i++) {
                var card = this.hand_card[0][i];
                var paiSe = parseInt(card.value / 16);
                switch (paiSe) {
                    case MJ_TYPE.MJ_TYPE_WAN:
                        wanCount++;
                        break;
                    case MJ_TYPE.MJ_TYPE_TIAO:
                        tiaoCount++;
                        break;
                    case MJ_TYPE.MJ_TYPE_TONG:
                        tongCount++;
                        break;
                    default:
                        break;
                }

            }
            cc.log("wanCount:" + wanCount + "tiaoCount:" + tiaoCount + "tongCount:" + tongCount);
            if (wanCount <= tiaoCount && wanCount <= tongCount) {
                return MJ_TYPE.MJ_TYPE_WAN;
            }
            else if (tiaoCount <= wanCount && tiaoCount <= tongCount) {
                return MJ_TYPE.MJ_TYPE_TIAO;
            }
            else {
                return MJ_TYPE.MJ_TYPE_TONG;
            }
        };

        MJCards.prototype.sortCard = function (a, b) {
            return self_table._sortCard(a, b);
        };
        var super_mjcards_reset = MJCards.prototype.reset;
        MJCards.prototype.reset = function () {
            super_mjcards_reset.call(this);
            this.other_card = [[], [], [], []];
        };
        MJCards.prototype.openHuaZhuClickOnly = function () {
            var lackType = MJModel.lackType;
            if (lackType == -1) {
                return;
            }
            var hasHuaZhu = false;
            for (var i = 0; i < this.hand_card[0].length; i++) {
                var card = this.hand_card[0][i];
                var paiSe = parseInt(card.value / 16);
                if (lackType != -1 && paiSe == lackType) {
                    hasHuaZhu = true;
                    break;
                }
            }

            if (hasHuaZhu) {
                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    var paiSe = parseInt(card.value / 16);
                    if (lackType != -1 && paiSe == lackType) {
                        card.setCardTouchEnable(true);
                        card.setBlackVis(false);
                    } else {
                        card.setCardTouchEnable(false);
                        card.setBlackVis(true);
                    }

                }
            } else {
                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var card = this.hand_card[0][i];
                    card.setCardTouchEnable(true);
                    card.setBlackVis(false);
                }
            }
        };
        MJCards.prototype.closeHuaZhuClickOnly = function () {
            if (MJModel.isAutoOutCard || MJModel.isBaoting || MJModel.lackType == -1) {
                return;
            }
            for (var i = 0; i < this.hand_card[0].length; i++) {
                var card = this.hand_card[0][i];
                card.setBlackVis(false);
            }
        };
        var super_MJCardCtor = MJCard.prototype.ctor;
        MJCard.prototype.ctor = function () {
            super_MJCardCtor.call(this);
            this.type2 = -1;
        };
        MJCards.prototype.setCurChoiceType = function (type) {
            this.curChoiceType = type;
            if (this.curChoiceType == -1) {
                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var handCard = this.hand_card[0][i];
                    if (handCard) {
                        handCard.setCardTouchEnable(true);
                        handCard.setBlackVis(false);
                    }
                }
            } else {
                for (var i = 0; i < this.hand_card[0].length; i++) {
                    var handCard = this.hand_card[0][i];
                    if (handCard && parseInt(handCard.value / 16) != this.curChoiceType) {
                        Log(this, "lin=update2=" + parseInt(handCard.value / 16));
                        handCard.setCardTouchEnable(false);
                        handCard.setBlackVis(true);
                    }
                }
            }

            //换回来的那三张给表示
            cc.log("----self_table._isDelay---1: " + self_table._isDelay);
            if (self_table._isDelay && !MJModel.isOnVideo) {
                for (var i = 0; i < self_table.change_hand_card.length; i++) {
                    for (var j = 0; j < self_table.change_hand_card[i].length; j++) {
                        var changeCard = self_table.change_hand_card[i][j];
                        for (var k = 0; k < this.hand_card[i].length; k++) {
                            var handCards = this.hand_card[i][k];
                            if (handCards.getValue() == changeCard && handCards.type2 == -1) {
                                handCards.setCardTouchEnable(false);
                                handCards.setBlackVis(true);
                                handCards.type2 = 1;
                                break;
                            }
                        }
                    }
                    break;
                }
            }
        };

        MJCards.prototype.getChoiceCards = function () {
            var cards = [];
            for (var i = 0; i < this.hand_card[0].length; i++) {
                var fcard = this.hand_card[0][i];
                if (fcard) {
                    if (fcard.isUp) {
                        cards.push(fcard.value);
                    }
                }
            }
            return cards;
        };
        MJCards.prototype.clickHandCardCallback = function (n) {
            if (MJModel.canTouchCard == false) {
                return;
            }
            var card = n;
            if (MJModel.canChoiceMore) {
                if (card.isUp) {
                    card.setUp(false);
                    var upCards = this.getChoiceCards();
                    if (upCards.length == 0) {
                        this.setCurChoiceType(-1);
                    }
                    if (self_table.mChangeBar.getChildByName("sureChoice") != undefined) {
                        if (upCards.length < 3) {
                            self_table.mChangeBar.getChildByName("sureChoice").setEnabled(false);
                        } else {
                            self_table.mChangeBar.getChildByName("sureChoice").setEnabled(true);
                        }
                    }
                }
                else {
                    var upCards = this.getChoiceCards();
                    if (upCards.length == 0) {
                        this.setCurChoiceType(parseInt(card.value / 16))
                    }
                    if (upCards.length < 3) {
                        card.setUp(true);
                    }
                    if (self_table.mChangeBar.getChildByName("sureChoice") != undefined) {
                        if (upCards.length < 2) {
                            self_table.mChangeBar.getChildByName("sureChoice").setEnabled(false);
                        } else {
                            self_table.mChangeBar.getChildByName("sureChoice").setEnabled(true);
                        }
                    }
                }
                return;
            }

            var preCard = null;

            for (var i = 0; i < this.hand_card[0].length; i++) {
                var fcard = this.hand_card[0][i];
                if (fcard) {
                    if (fcard.isUp) preCard = fcard;
                    fcard.setUp(false);
                }
            }

            if (this.outCardBtn) this.outCardBtn.setVisible(false);

            if (preCard && preCard == card) {
                if (MJModel.mj_double_click_style == 1) this.outHandCardCallback(n);
                return;
            }

            card.setUp(true);

            var hasTingPaiInfo = false;

            try {
                MJModel.mj_table.removeChildByName("tingpai_layer");
                for (var i = 0; i < MJModel.listen_info.length; i++) {
                    var tli = MJModel.listen_info[i];
                    if (card.value == tli.OutCard) {
                        if (tli.HuInfo.length >= 10) {
                            break;
                        }
                        var curTingPaiLayer = new TingPaiLayer();
                        curTingPaiLayer.show2(tli.HuInfo);

                        curTingPaiLayer.setName("tingpai_layer");
                        MJModel.mj_table.addChild(curTingPaiLayer, 100);
                        hasTingPaiInfo = true;
                        break;
                    }
                }
            } catch (e) {
                Log(this, e);
            }


            if (this.outCardBtn == null) {
                this.createOutCardBtn();
            }
            else {
                this.outCardBtn.setVisible(true);
            }

            if (this.outCardBtn) {
                var size = cc.director.getWinSize();
                this.outCardBtn.setPosition(cc.p(size.width - 120, 189));
            }
        }

        Utils.splitStr = function (str, max, maxL) {
            if (maxL == undefined)maxL = 2;
            if (str.length <= max) {
                var curStr = "";
                var str_array = str.split(",");
                var result = [];
                for (var i = 0; i < str_array.length; i++) {
                    var str_i = str_array[i];
                    curStr += str_i + " ";
                }
                result.push(curStr);
                return result;
            }
            var str_array = str.split(",");
            var result = [];
            var curStr = "";
            for (var i = 0; i < str_array.length; i++) {
                var str_i = str_array[i];
                if ((curStr.length + str_i.length) > max && result.length < (maxL - 1)) {
                    result.push(curStr);
                    curStr = "";
                }
                curStr += str_i + " ";
            }
            result.push(curStr);
            return result;
        };

        //暗雨，直雨，弯雨
        MJTips.prototype.showSCMJ_KangEffect = function (pos, type) {
            var size = cc.director.getWinSize();
            var begin;
            var begin2;
            if (pos == 0) {
                begin = cc.p(size.width / 2, 206);
                begin2 = cc.p(size.width / 2, 150);
            }
            else if (pos == 1) {
                begin = cc.p(size.width - 275, 383);
                begin2 = cc.p(size.width - 275, 383 - 50);
            }
            else if (pos == 2) {
                begin = cc.p(size.width / 2, 521);
                begin2 = cc.p(size.width / 2, 521 - 200);
            }
            else if (pos == 3) {
                begin = cc.p(275, 383);
                begin2 = cc.p(275, 383 - 50);
            }

            if (type == ActionType.TYPE_ANGANG) {
                try {
                    ccs.armatureDataManager.addArmatureFileInfo(getResPath("chengdu/effect/effects_mjxanyu/effects_mjxanyu.ExportJson"));
                    var armature = new ccs.Armature("effects_mjxanyu");
                    if (armature != null) {
                        var animation = armature.getAnimation();
                        if (animation) {
                            if (typeof animation.playWithIndex === "function") {
                                animation.playWithIndex(0, -1, 0);

                                armature.setPosition(MJConfig.getOperatorTipPos(pos));
                                this.addChild(armature, 10000);
                            }
                        }
                        armature.runAction(cc.sequence(cc.delayTime(2), cc.removeSelf()));
                    }
                } catch (e) {
                    Log(this, e);
                }
            }
            else if (type == ActionType.TYPE_WANGANG) {
                try {
                    ccs.armatureDataManager.addArmatureFileInfo(getResPath("chengdu/effect/effects_mjxwyu/effects_mjxwyu.ExportJson"));
                    var armature = new ccs.Armature("effects_mjxwyu");
                    if (armature != null) {
                        var animation = armature.getAnimation();
                        if (animation) {
                            if (typeof animation.playWithIndex === "function") {
                                animation.playWithIndex(0, -1, 0);

                                armature.setPosition(MJConfig.getOperatorTipPos(pos));
                                this.addChild(armature, 10000);
                            }
                        }
                        armature.runAction(cc.sequence(cc.delayTime(2), cc.removeSelf()));
                    }
                } catch (e) {
                    Log(this, e);
                }
            }
            else {
                try {
                    ccs.armatureDataManager.addArmatureFileInfo(getResPath("chengdu/effect/effects_mjxzhiyu/effects_mjxzhiyu.ExportJson"));
                    var armature = new ccs.Armature("effects_mjxzhiyu");
                    if (armature != null) {
                        var animation = armature.getAnimation();
                        if (animation) {
                            if (typeof animation.playWithIndex === "function") {
                                animation.playWithIndex(0, -1, 0);

                                armature.setPosition(MJConfig.getOperatorTipPos(pos));
                                this.addChild(armature, 10000);
                            }
                        }
                        armature.runAction(cc.sequence(cc.delayTime(2), cc.removeSelf()));
                    }
                } catch (e) {
                    Log(this, e);
                }
            }
        };
    }
    ,
    handler_server_end_room_bc: function (data, canDelay) {
        this._super(data, canDelay);
        //房间解散时，如果有结算界面，关闭結算界面
        // if (this.getChildByName("RoomMJResultDetail")) {
        //     this.removeChildByName("RoomMJResultDetail");
        // }
    },
    _sortCard: function (a, b) {
        try {
            var av = a;
            var bv = b;
            if (typeof a === "object") av = a.value;
            if (typeof b === "object") bv = b.value;
            //花猪放在最右边
            var lackType = MJModel.lackType;
            if (lackType != -1) {
                var paiSea = parseInt(av / 16);
                var paiSeb = parseInt(bv / 16);
                if (paiSea == lackType && paiSeb != lackType)return -1;
                if (paiSea != lackType && paiSeb == lackType)return 1;
            }
            return bv - av;
        } catch (e) {
            return 0;
        }
    },
    _createWaitLack: function () {
        for (var i = 0; i < 4; i++) {
            if (this._lackDingque[i] == null) {
                if (i == 0) {
                    this._lackDingque[i] = new cc.Sprite();
                } else {
                    this._lackDingque[i] = new cc.Sprite(getResPath("chengdumj/chengdu/waitDingque.png"));
                }
                this._lackDingque[i].setVisible(false);
                this._lackDingque[i].setPosition(this._showLackChangePos(i));
                this.addChild(this._lackDingque[i], 2);
            }
        }
    },
    _isShowWaitLack: function (flag) {
        if (flag) {
            for (var i = 0; i < 4; i++) {
                if (this._lackDingque[i]) {
                    this._lackDingque[i].setVisible(true);
                }
            }
        } else {
            for (var i = 0; i < 4; i++) {
                if (this._lackDingque[i]) {
                    if (i == 0) {
                        this._lackDingque[i].setTexture("");
                    } else {
                        this._lackDingque[i].setTexture(getResPath("chengdumj/chengdu/waitDingque.png"));
                    }
                    this._lackDingque[i].setVisible(false);
                }
            }
        }
        if (MJModel.mj_roomType == 1) {
            if (this._lackDingque[2]) {
                this._lackDingque[2].setVisible(false);
            }
        }
        if (MJModel.mj_roomType == 2) {
            if (this._lackDingque[1]) {
                this._lackDingque[1].setVisible(false);
            }
            if (this._lackDingque[3]) {
                this._lackDingque[3].setVisible(false);
            }
        }
    },
    _createWaitchange: function () {
        for (var i = 0; i < 4; i++) {
            if (this._changeCard[i] == null) {
                if (i == 0) {
                    this._changeCard[i] = new cc.Sprite();
                } else {
                    this._changeCard[i] = new cc.Sprite(getResPath("chengdumj/chengdu/waitXuanpai.png"));
                }
                this._changeCard[i].setVisible(false);
                this._changeCard[i].setPosition(this._showLackChangePos(i));
                this.addChild(this._changeCard[i], 2);
            }
        }
    },
    _isShowWaitchange: function (flag) {
        if (flag) {
            for (var i = 0; i < 4; i++) {
                if (this._changeCard[i]) {
                    this._changeCard[i].setVisible(true);
                }
            }
        } else {
            for (var i = 0; i < 4; i++) {
                if (this._changeCard[i]) {
                    if (i == 0) {
                        this._changeCard[i].setTexture("");
                    } else {
                        this._changeCard[i].setTexture(getResPath("chengdumj/chengdu/waitXuanpai.png"));
                    }
                    this._changeCard[i].setVisible(false);
                }
            }
        }
        if (MJModel.mj_roomType == 1) {
            if (this._changeCard[2]) {
                this._changeCard[2].setVisible(false);
            }
        }
        if (MJModel.mj_roomType == 2) {
            if (this._changeCard[1]) {
                this._changeCard[1].setVisible(false);
            }
            if (this._changeCard[3]) {
                this._changeCard[3].setVisible(false);
            }
        }
    },
    //等待定缺，等待换牌，坐标
    _showLackChangePos: function (pos) {
        var size = cc.director.getWinSize();
        var begin = cc.p(0, 0);
        if (MJModel.isOnVideo) {
            if (pos == 0) {
                begin.x = size.width / 2;
                begin.y = 195;
            } else if (pos == 1) {
                begin.x = size.width - 275;
                begin.y = 400;
            } else if (pos == 2) {
                begin.x = size.width / 2;
                begin.y = size.height - 170;
            } else {
                begin.x = 275;
                begin.y = 400;
            }
        } else {
            if (pos == 0) {
                begin.x = size.width / 2;
                begin.y = 195;
            } else if (pos == 1) {
                begin.x = size.width - 260;
                begin.y = 400;
            } else if (pos == 2) {
                begin.x = size.width / 2;
                begin.y = size.height - 145;
            } else {
                begin.x = 255;
                begin.y = 400;
            }
        }
        return begin;
    },

    handler_server_peng_kang_bc: function (data, canDelay) {
        var ackBcOpResult = parsePacket("proto.game.AckBcOpResult", data);

        var seatid = ackBcOpResult.ChairID;
        var out_seatid = ackBcOpResult.OutCardChairID;
        var OpType = ackBcOpResult.OpType;
        var OpType2 = ackBcOpResult.OpType2;
        var card = ackBcOpResult.Card;
        var scores = ackBcOpResult.Score;
        var pos = MJModel.getPosBySeatid(seatid);
        var out_pos = MJModel.getPosBySeatid(out_seatid);

        this._check_tip_operate_card(0, 0);

        if ((OpType & ActionType.TYPE_PASS) != ActionType.TYPE_PASS && (OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
            var pos = MJModel.getPosBySeatid(seatid);
            var zimo = this.room_Card.isDuoPai(pos);
            var player = MJModel.players[seatid];
            var type = 2;
            if (zimo) type = 1;
            this._show_hu_tip(pos, type);
            if (ackBcOpResult.IsQiangganghu == 1 || (OpType2 && OpType2 == 5)) {
                if (player && canDelay) {
                    this.room_Card.changeWanGang(out_pos, PengType.Peng_Peng, card);
                    this.room_Card.removeHandCard(out_pos, card, 1);//多删除一次手牌 防止出错 理乱上抢杠的时候 他的手牌上已经没有这个牌 所以多删除一次也没有bug
                    //避免双抢杠的时候 会出两次牌
                    if (this.room_Card.out_card[out_pos].length == 0 || this.room_Card.out_card[out_pos][this.room_Card.out_card[out_pos].length - 1].value != card) {
                        this.room_Card.addOutCard(out_pos, card);
                    }
                    var effect = "qianggang";
                    this._show_hu_effect(pos, effect);
                }
                if (zimo == 1) {
                    var length = this.room_Card.hand_card[pos].length;
                    if (this.room_Card.hand_card[pos][length - 1].value != ackBcOpResult.Card) {
                        //天胡情况下
                        this.room_Card.removeHandCard(pos, ackBcOpResult.Card, 1);
                        this.room_Card.reflashHandCard(pos, true);
                        this.room_Card.initMoCard(pos, ackBcOpResult.Card, true);
                        this.room_Card.hand_card[pos][length - 1].setValue(ackBcOpResult.Card, pos, CardType.Card_End, length - 1);
                    } else {
                        this.room_Card.hand_card[pos][length - 1].setValue(ackBcOpResult.Card, pos, CardType.Card_End, length - 1);
                    }
                } else {
                    MJModel.cur_seat = seatid;
                    if (this.room_Card.out_card[out_pos].length != 0 && this.room_Card.out_card[out_pos][this.room_Card.out_card[out_pos].length - 1].value == card) {
                        this.room_Card.removeOutCard(out_pos, card, false);
                        this.room_Card.setCurCardTip(false);
                    }
                    this._show_pahu_card(pos, card);
                }
                return;
            } else if (zimo == 1) {
                var length = this.room_Card.hand_card[pos].length;
                if (this.room_Card.hand_card[pos][length - 1].value != ackBcOpResult.Card) {
                    //天胡情况下
                    this.room_Card.removeHandCard(pos, ackBcOpResult.Card, 1);
                    this.room_Card.reflashHandCard(pos, true);
                    this.room_Card.initMoCard(pos, ackBcOpResult.Card, true);
                    this.room_Card.hand_card[pos][length - 1].setValue(ackBcOpResult.Card, pos, CardType.Card_End, length - 1);
                } else {
                    this.room_Card.hand_card[pos][length - 1].setValue(ackBcOpResult.Card, pos, CardType.Card_End, length - 1);
                }
            } else {
                MJModel.cur_seat = seatid;
                if (this.room_Card.out_card[out_pos].length != 0 && this.room_Card.out_card[out_pos][this.room_Card.out_card[out_pos].length - 1].value == card) {
                    this.room_Card.removeOutCard(out_pos, card, false);
                    this.room_Card.setCurCardTip(false);
                }
                this._show_pahu_card(pos, card);
            }
        }
        this._super(data, canDelay);
    }
    ,
    handler_op_sound: function (pos, sex, OpType, OpType2, effect) {
        if (MJModel.fangyan == "fangyan1") {
            cc.log("--effect---fangyan-: " + effect);
            var effect = "gang";
            if ((OpType & ActionType.TYPE_HU) == ActionType.TYPE_HU) {
                effect = "hu";
            }
            else if ((OpType & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                effect = "peng";
            }
            else if ((OpType & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI || (OpType & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI || (OpType & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                effect = "chi";
            }
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/give.mp3"));
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("chengdumj/sound/operator/sc_%1_%2.mp3"), sex == SEX_ID.SEX_MAN ? "man" : "woman", effect));
        } else {
            cc.log("--effect---putonghua-: " + effect);
            this._super(pos, sex, OpType, OpType2, effect);
        }
    },
    handler_op_sound_putonghua: function (pos, sex, OpType, OpType2, effect) {
        var name = "RoomMJ/sound/operator/%1_%2.mp3";
        if (effect == "qiangganghu" || effect == "zimo" || effect == "hu") {
            effect = "hu";
            name = "chengdumj/sound/operator/putonghua/%1_%2.mp3";
        }
        Sound.getInstance().playEffect(__String.createWithFormat(getResPath(name), sex == SEX_ID.SEX_MAN ? "m" : "w", effect));
    },
    _show_pahu_card: function (pos, cardValue) {
        var length = this.room_Card.hand_card[pos].length;
        var begin = this.room_Card.hand_card[pos][0].getPosition();
        if (pos == 0) {
            begin.x += 85;
        } else if (pos == 1) {
            begin.y += 65;
        } else if (pos == 2) {
            begin.x -= 60;
        } else {
            begin.y -= 65;
        }
        var card = new MJCard();
        card.setValue(cardValue, pos, CardType.Card_End, 0);
        card.setPosition(MJConfig.getMoCardPos(pos));
        card.setName("paohu_card");
        this.addChild(card, MJConfig.getHandCardOrder(pos, 13));
        this.room_Card.other_card[pos].push(card);
        MJModel.mj_mo_cards[pos] = -1;
        this._allPaoCard[pos].push(card);
    },
    _clearAllPaoCard: function () {
        try {
            for (var i = 0; i < 4; i++) {
                for (var j = 0; j < this._allPaoCard[i].length; j++) {
                    if (this._allPaoCard[i][j]) this._allPaoCard[i][j].removeFromParent(true);
                }
                this._allPaoCard[i] = [];
            }
        } catch (e) {

        }
    },
    _show_hu_effect: function (pos, name) {
        var effect_name = "";
        if (name == "qianggang") {
            effect_name = "effects_mjxqgh";
            ccs.armatureDataManager.addArmatureFileInfo(getResPath("RoomMJ/effect2/qghu/effects_mjxqgh.ExportJson"));
        }
        try {
            if (effect_name != "") {
                var armature = new ccs.Armature(effect_name);
                if (armature != null) {
                    var animation = armature.getAnimation();
                    if (animation) {
                        if (typeof animation.playWithIndex === "function") {
                            animation.playWithIndex(0, -1, 0);

                            var begin = MJConfig.getOperatorTipPos(pos);
                            armature.setPosition(begin);
                            armature.setName("hu_effect");
                            this.room_Tip.addChild(armature, 10000);
                        }
                    }
                }
            }
        } catch (e) {

        }
    },
    handler_gang_scores: function (scores, OpType, OpType2, canDelay) {
    },
    handler_server_operate_notify_bc: function (data, canDelay) {
        var ackOpNotify = parsePacket("proto.game.AckOpNotify", data);
        var seatid = ackOpNotify.ChairID;
        var operat = ackOpNotify.OpType;
        var card = ackOpNotify.Card;

        this._super(data, canDelay);

        if (MJModel.isMyPlayer(seatid)) {
            this._check_tip_operate_card(operat, card);
        }
    }
    ,
    handlerAutoUpTableReady: function (nums, selfIsReady) {
        if (MJModel.seatid == -1 && nums < 4) {
            this.actionCallBack("uptable");
        }
        else if (selfIsReady == false) {
            if (MJModel.canQuxiaoZhun()) {
                if (MJModel.roomState != 0) this.actionCallBack("ready");
            }
        }
    },
    handler_server_game_end_bc: function (chengduGameEnd, canDelay) {
        Log(this, "handler_server_game_end_bc");
        try {
            var ackGameEnd = chengduGameEnd.gameend;
            //this._super(ackGameEnd, canDelay);
            var self = this;
            this.room_Card.setAutoOutCard(false);
            if (this.room_Action) this.room_Action.setTingPaiVis(false);
            if (this.room_Action) this.room_Action.setAutoOutCardVis(false);
            if (this.room_Action) this.room_Action.setOperator(-1);
            this.room_Info.stopTime();

            var callback0 = cc.callFunc(function () {
                self.handler_game_end_info(ackGameEnd);
            });

            var state = ackGameEnd.EndState;
            var callback2 = cc.callFunc(function () {
                if (state == 1) {
                    //流局
                    self.room_Tip.ShowGameState(3);
                }
                else {
                }
            });
            var show_end_score = cc.callFunc(function () {
                self.gameend_showAllScoreEffect(ackGameEnd);
            });

            var update_all_money = cc.callFunc(function () {
                self.gameend_updatePlayersInfo(ackGameEnd);
            });

            var callback4 = cc.callFunc(function () {
                self.room_Tip.reset();
            });

            var callback3 = cc.callFunc(function () {
                self.room_Action.setReady2Visible(false);

                var result = new MJResult_CHENGDUMJ();
                result.setName("RoomMJResultDetail");
                self.addChild(result, 100000);
                result.updateContentView(self, chengduGameEnd);

            });

            if (MJModel.isOnVideo) {
                if (canDelay) {
                    this.runAction(cc.sequence(callback4, cc.delayTime(1), callback3));
                } else {
                    this.runAction(cc.sequence(cc.delayTime(2), callback3));
                }
                return;
            }

            this.runAction(cc.sequence(callback0, callback4, cc.delayTime(1), callback2, show_end_score, update_all_money, cc.delayTime(1), callback3));
        } catch (e) {
            ERROR(this, e);
        }
    },
    handler_game_end_info: function (ackGameEnd) {
        if (MJModel.isOnVideo) {
            return;
        }
        this._clearAllPaoCard();
        try {
            var usercard_size = ackGameEnd.UserCard.length;
            var IsShowHandCard = true;
            if (IsShowHandCard) {
                var cardData = [];
                for (var i = 0; i < usercard_size; i++) {
                    //结束玩家手牌数组
                    var changeable_Size = ackGameEnd.UserCard[i].ChangeableCards.length;
                    cardData = [];

                    for (var j = 0; j < changeable_Size; j++) {
                        var cardDataNum = ackGameEnd.UserCard[i].ChangeableCards[j];
                        cardData.push(cardDataNum);
                    }
                    var isDuopai = changeable_Size % 3;
                    if ((ackGameEnd.faninfo.length > i) && ( isDuopai != 2 )) {

                        if (ackGameEnd.faninfo[i].hucard && ackGameEnd.faninfo[i].hucard != 255) {
                            var tagHu = ackGameEnd.faninfo[i].hucard;
                            cardData.push(tagHu);
                        }

                    }

                    try {
                        cardData.sort(this.room_Card.sortCard);
                    } catch (e) {
                        Log(this, e);
                    }

                    var pos = MJModel.getPosBySeatid(i);
                    if (ackGameEnd.faninfo.length > i) {
                        this.room_Card.showEndCard(pos, cardData, ackGameEnd.faninfo[i].hucard, ackGameEnd.faninfo[i].SpecialType == 1);
                    }
                    else {
                        this.room_Card.showEndCard(pos, cardData, 0, false);
                    }

                    //找到暗杠的牌 需要把暗杠显示出来
                    if (ackGameEnd.UserCard[i].stFixedCards) {
                        var groupcard_size = ackGameEnd.UserCard[i].stFixedCards.length;
                        var allpenggangcards = ackGameEnd.UserCard[i].stFixedCards;
                        for (var j = 0; j < groupcard_size; j++) {
                            var cardData = allpenggangcards[j].CardData;
                            var state = allpenggangcards[j].state;
                            var chairId = allpenggangcards[j].chairID;
                            var out_pos = MJModel.getPosBySeatid(chairId);

                            if ((state & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                                this.room_Card.changeAnGang(pos, PengType.Peng_AnKang, cardData, out_pos);
                            }
                        }
                    }

                    Sound.getInstance().playEffect(getResPath("RoomMJ/sound/order_pai2.mp3"));
                }
            }
        } catch (e) {
            Log(this, e);
        }
    },
    handler_game_end_score: function (score) {
        try {
            for (var i = 0; i < score.length; i++) {
                var pos = MJModel.getPosBySeatid(i);
                var player = MJModel.players[i];
                var dm = score[i];
                if (player.uid > 0) {
                    var player = this.players[pos];
                    this.showScoreEffect(pos, dm, true);
                    if (pos == 0) {
                        if (dm > 0) {
                            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/win.mp3"));
                        } else if (dm < 0) {
                            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/loss.mp3"));
                        }
                    }
                }
            }
        } catch (e) {
            Log(this, e);
        }
    },
    _showScoreEffect: function (pos, value) {
        if (value == 0) {
            return;
        }

        var size = cc.director.getWinSize();

        var label = null;
        if (value > 0) {
            label = new cc.LabelAtlas(":" + value, getResPath("RoomMJ/dz_balance_num_win.png"), 28, 40, '0');
        } else {
            label = new cc.LabelAtlas(":" + Math.abs(value), getResPath("RoomMJ/dz_balance_num_lose.png"), 28, 40, '0');
        }
        label.setAnchorPoint(cc.p(0.5, 0.5));
        var bp;
        var ep;
        if (pos == 0) {
            bp = cc.p(size.width / 2, 30);
            ep = cc.p(size.width / 2, -50);
        } else if (pos == 1) {
            bp = cc.p(size.width - 150, size.height / 2);
            ep = cc.p(size.width + 100, size.height / 2);
        } else if (pos == 2) {
            bp = cc.p(size.width / 2, size.height - 100);
            ep = cc.p(size.width / 2, size.height + 50);
        } else if (pos == 3) {
            bp = cc.p(150, size.height / 2);
            ep = cc.p(-100, size.height / 2);
        }
        label.setScale(1.5);
        this.room_Tip.addChild(label, 10000);
        label.setPosition(bp);
        label.setName("hu_effect");
        label.setOpacity(0);
        try {

            label.runAction(cc.sequence(cc.delayTime(0.5), cc.spawn(cc.fadeIn(0.5), cc.moveBy(1, cc.p(0, 50))), cc.delayTime(0.5), cc.fadeOut(1), cc.removeSelf()));
            //label.runAction(cc.sequence(cc.fadeIn(0.3),cc.delayTime(1), cc.moveTo(0.5, ep).easing(cc.easeSineOut()),
            //    cc.removeSelf()));
        } catch (e) {
            label.runAction(cc.sequence(cc.delayTime(1), cc.removeSelf()));
        }
    }
    ,

    handler_out_card_sound: function (sex, card) {
        cc.log("--MJModel.fangyan---: " + MJModel.fangyan);
        if (MJModel.fangyan == "fangyan1") {
            Sound.getInstance().playEffect(getResPath("RoomMJ/sound/operator/luopai.mp3"));
            Sound.getInstance().playEffect(__String.createWithFormat(getResPath("chengdumj/sound/chupai/sc_%1_%2.mp3"), sex == SEX_ID.SEX_MAN ? "man" : "woman", Utils.toHex2(card)));
        } else {
            this._super(sex, card);
        }
    }
    ,

    // handler_op_sound: function (sex, OpType, action) {
    //     // if ((OpType & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (OpType & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG || (OpType & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
    //     //     return;
    //     // }
    //
    //     if (MJModel.fangyan == "fangyan1") {
    //         Sound.getInstance().playEffect(__String.createWithFormat(getResPath("chengdumj/sound/operator/sc_%1_%2.mp3"), sex == SEX_ID.SEX_MAN ? "man" : "woman", action));
    //     } else {
    //         this._super(sex, OpType, action);
    //     }
    // }
    // ,

    showFinalMJResult: function (data) {
    }
    ,
    handler_server_player_timeout_bc: function (data, canDelay) {
        var jpacket = parsePacket("proto.game.AckUserOvertimeState", data);
        var seatid = jpacket.chairid;
        var state = jpacket.state;

        if (state == 1) {
            var pos = MJModel.getPosBySeatid(seatid);
            if (this.players[pos]) this.players[pos].setTimeOut(true);
        }
    },

    _check_tip_operate_card: function (operat, value) {
        try {
            if ((operat & ActionType.TYPE_PENG) == ActionType.TYPE_PENG || (operat & ActionType.TYPE_ZHIGANG) == ActionType.TYPE_ZHIGANG) {
                for (var i = 0; i < this.room_Card.hand_card[0].length; i++) {
                    var card = this.room_Card.hand_card[0][i];
                    if (card.value == value) {
                        card.setChoiceTipShow(true);
                    }
                }
                return;
            }

            if ((operat & ActionType.TYPE_WANGANG) == ActionType.TYPE_WANGANG || (operat & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                for (var j = 0; j < MJModel.gang_info.length; j++) {
                    for (var i = 0; i < this.room_Card.hand_card[0].length; i++) {
                        var card = this.room_Card.hand_card[0][i];
                        if (card.value == MJModel.gang_info[j].curCard) {
                            card.setChoiceTipShow(true);
                        }
                    }
                }
                return;
            }

            for (var i = 0; i < this.room_Card.hand_card[0].length; i++) {
                var card = this.room_Card.hand_card[0][i];
                card.setChoiceTipShow(false);
            }
        } catch (e) {
            Log(this, e);
        }
    }
    ,
    //定花色点击事件回调
    onPaiSeClick: function (ref) {
        var name = ref.getName();

        var type;
        if (name == "tiaoChoice") {
            type = MJ_TYPE.MJ_TYPE_TIAO;
        } else if (name == "tongChoice") {
            type = MJ_TYPE.MJ_TYPE_TONG;
        } else if (name == "wanChoice") {
            type = MJ_TYPE.MJ_TYPE_WAN;
        }
        sendLackCard(type);
        this.mPaiSeBar.setVisible(false);

    },
    //换牌点击事件回调
    onChangeClick: function (ref) {
        var name = ref.getName();

        // if (name == "sureChoice") {
        var upCards = this.room_Card.getChoiceCards();
        sendChangeCard(1, upCards);
        // }
        // else if (name == "cancelChoice") {
        //     sendChangeCard(0, null);
        // }

        this.mChangeBar.setVisible(false);
        MJModel.canChoiceMore = false;
        MJModel.canTouchCard = false;
    },

    myselfOpenOutCard: function (IsMoCard) {
        this._super(IsMoCard);
        this.room_Card.openHuaZhuClickOnly();
    },
    myselfCloseOutCard: function () {
        this._super();
        this.room_Card.closeHuaZhuClickOnly();
    },

});
var CHENGDU_Paise = cc.Layer.extend(
    {
        tiaoBtn: null,
        tongBtn: null,
        wanBtn: null,
        goodPaiSe: -1,
        opAnim: null,
        ctor: function () {
            this._super();
            var wsize = cc.director.getWinSize();

            var csize = cc.size(630, 110);

            this.setIgnoreAnchorPointForPosition(false);
            this.setAnchorPoint(cc.p(0.5, 0));
            this.setContentSize(csize);
            this.setPosition(cc.p(wsize.width / 2, 158));

            ccs.armatureDataManager.addArmatureFileInfo(getResPath("chengdumj/effect/effectsmajtishilizi.ExportJson"));
            this.opAnim = new ccs.Armature("effectsmajtishilizi");
            var animation = this.opAnim.getAnimation();
            if (animation) {
                if (typeof animation.playWithIndex === "function") {
                    this.opAnim.setAnchorPoint(cc.p(0.5, 0.5));
                    animation.play("effectsmajtishilizi", 0, true);
                    this.addChild(this.opAnim);
                }
            }
            this.wanBtn = new ccui.Button(getResPath("chengdumj/chengdu/wan1.png"), getResPath("chengdumj/chengdu/wan2.png"));
            this.wanBtn.setName("wanChoice");
            this.wanBtn.setAnchorPoint(cc.p(0, 0));
            this.wanBtn.setPosition(cc.p(0, 0));
            this.addChild(this.wanBtn);

            this.tiaoBtn = new ccui.Button(getResPath("chengdumj/chengdu/tiao1.png"), getResPath("chengdumj/chengdu/tiao2.png"));
            this.tiaoBtn.setName("tiaoChoice");
            this.tiaoBtn.setAnchorPoint(cc.p(0, 0));
            this.tiaoBtn.setPosition(cc.p(csize.width / 2 - (this.tiaoBtn.getContentSize()).width / 2, 0));
            this.addChild(this.tiaoBtn);

            this.tongBtn = new ccui.Button(getResPath("chengdumj/chengdu/tong1.png"), getResPath("chengdumj/chengdu/tong2.png"));
            this.tongBtn.setName("tongChoice");
            this.tongBtn.setAnchorPoint(cc.p(0, 0));
            this.tongBtn.setPosition(cc.p(csize.width - (this.tongBtn.getContentSize()).width, 0));
            this.addChild(this.tongBtn);
        },
        setGoodPaiSe: function (goodPaiSe) {
            this.goodPaiSe = goodPaiSe;
            cc.log("goodPaiSe : " + goodPaiSe);

            var temp = null;

            if (goodPaiSe == MJ_TYPE.MJ_TYPE_TIAO) {
                temp = this.tiaoBtn;
            } else if (goodPaiSe == MJ_TYPE.MJ_TYPE_TONG) {
                temp = this.tongBtn;
            } else if (goodPaiSe == MJ_TYPE.MJ_TYPE_WAN) {
                temp = this.wanBtn;
            }

            if (temp) {
                var point = temp.getPosition();
                var size = temp.getContentSize();
                this.opAnim.setVisible(true);
                this.opAnim.setPosition(cc.p(point.x + size.width / 2 + 10, point.y + size.height / 2));
            } else {
                this.opAnim.setVisible(false);
            }

        },
        addClickEventListener: function (callback) {
            this.tiaoBtn.addClickEventListener(callback);
            this.tongBtn.addClickEventListener(callback);
            this.wanBtn.addClickEventListener(callback);
        },
    });

var MJChange = cc.Layer.extend(
    {
        cancelChoiceBtn: null,
        sureChoiceBtn: null,
        ctor: function () {
            this._super();
            var wsize = cc.director.getWinSize();

            var csize = cc.size(530, 140);

            this.setIgnoreAnchorPointForPosition(false);
            this.setAnchorPoint(cc.p(0.5, 0));
            this.setContentSize(csize);
            this.setPosition(cc.p(wsize.width / 2, 158));

            var tipIvSize = cc.size(450, 45);
            var tipIV = new ccui.ImageView();
            tipIV.loadTexture(getResPath("RoomMJ/text_bg.png"));
            tipIV.setAnchorPoint(cc.p(0.5, 1));
            tipIV.setContentSize(tipIvSize);
            tipIV.ignoreContentAdaptWithSize(false);
            tipIV.setPosition(cc.p(csize.width / 2, csize.height));
            this.addChild(tipIV);

            var tip = new ccui.Text("请选同花色的三张牌进行交换", "", 25);
            tip.setTextColor(cc.color(0xff, 0xff, 0xff, 255));
            tip.setAnchorPoint(cc.p(0.5, 0.5));
            tip.setPosition(cc.p(tipIvSize.width / 2, tipIvSize.height / 2));
            tipIV.addChild(tip);

            this.sureChoiceBtn = new ccui.Button(getResPath("chengdumj/chengdu/sure_choice1.png"), getResPath("chengdumj/chengdu/sure_choice2.png"), getResPath("chengdumj/chengdu/sure_choice3.png"));
            this.sureChoiceBtn.setEnabled(true);
            this.sureChoiceBtn.setName("sureChoice");
            this.sureChoiceBtn.setAnchorPoint(cc.p(1, 0));
            this.sureChoiceBtn.setPosition(cc.p(csize.width - 140, 0));
            this.addChild(this.sureChoiceBtn);
            cc.log("---this.sureChoiceBtn---: " + this.sureChoiceBtn);
        },
        addClickEventListener: function (callback) {
            //this.cancelChoiceBtn.addClickEventListener(callback);
            this.sureChoiceBtn.addClickEventListener(callback);
        },
    });


var sendLackCard = function (v) {
    var packet = createPacket("proto.game.chengdumj.ReqChooseLackType");
    packet.Type = v;
    sendPacket(packet, CMD.CLIENT_MJ_CHOOSE_LACKTYPE);
}

var sendChangeCard = function (v, cardlist) {
    var packet = createPacket("proto.game.chengdumj.ReqChangeCard");
    packet.ischange = v;
    packet.Card = [];
    if (v == 1) {
        for (var i in cardlist) {
            cc.log("---cardlist[i]---: " + cardlist[i]);
            packet.Card.push(cardlist[i]);
        }
    }
    sendPacket(packet, CMD.CLIENT_MJ_CHANGE_CARD);
}

var MJResult_CHENGDUMJ = MJCommonResult.extend({
    _winSeatid: [0, 0, 0, 0,],
    chegnduEndInfo: null,
    dianPaoRecord: [[], [], [], []],
    daGangRecord: [[], [], [], []],
    beizimo: [[], [], [], []],
    dianpao: [[], [], [], []],

    continueClick: function (ref) {
        if (MJModel.isOnVideo)return;

        if (MJModel.currentCount >= MJModel.RoomCountSum) {
            MJModel.mj_table.startTimeEnd1();
        } else {
            this.removeFromParent();
        }
        sendReady();
        MJModel.state = MJ_STATUS.MJ_GAME_FREE;
    }
    ,
    updateContentView: function (mjtable, chengduGame) {
        var size = cc.director.getWinSize();
        var LayerBg = new cc.LayerColor(cc.color(0, 0, 0, 200));
        LayerBg.setContentSize(cc.size(size.width, size.height));
        LayerBg.setAnchorPoint(cc.p(0, 0));
        LayerBg.setPosition(cc.p(0, 0));
        this.addChild(LayerBg, -1);

        this.ackGameEnd = chengduGame.gameend;
        this.chegnduEndInfo = chengduGame;
        //this.bgSpr.setTexture(getResPath("chengdumj/result/bg.png"));

        //this.bgSpr.getChildByName("continueBtn").loadTextures(getResPath("chengdumj/result/next_btn.png"), getResPath("chengdumj/result/next_btn2.png"), "");
        this.bgSpr.getChildByName("continueBtn").setScale(0.9);
        this.bgSpr.getChildByName("continueBtn").setPosition(cc.p(1090 + 20, 47));
        //this.bgSpr.setScale();
        //游戏配置描述
        // var gameDesStr = new cc.LabelTTF(mjtable.gameDes, "Arial", 20);
        // gameDesStr.setColor(this.leftColor);
        // gameDesStr.setDimensions(900, 50);
        // gameDesStr.setAnchorPoint(cc.p(0, 0.5));
        // gameDesStr.setPosition(cc.p(47, 60));
        // this.bgSpr.addChild(gameDesStr);

        var ss = Utils.splitStr(mjtable.gameDes, 35);
        var gameDesStr = new cc.LabelTTF(ss[0], "Arial", 20);
        gameDesStr.setColor(this.leftColor);
        gameDesStr.setAnchorPoint(cc.p(0, 0.5));
        gameDesStr.setPosition(cc.p(47, 55));
        this.bgSpr.addChild(gameDesStr);
        if (ss[1]) {
            cc.log("-----ss[1]: " + ss[1]);
            var gameDesStr2 = new cc.LabelTTF(ss[1], "Arial", 20);
            gameDesStr2.setColor(this.leftColor);
            gameDesStr2.setAnchorPoint(cc.p(0, 0.5));
            gameDesStr2.setPosition(cc.p(47, 30));
            this.bgSpr.addChild(gameDesStr2);
        }

        //输赢标志
        if (this.ackGameEnd.Score) {
            var length = this.ackGameEnd.Score.length;
            for (var i = 0; i < length; i++) {
                var pos = MJModel.getPosBySeatid(i);
                if (pos == 0) {
                    var effectName = "lose";
                    if (this.ackGameEnd.Score[i] >= 0) {
                        effectName = "win";
                    }
                    this._win_effect(effectName);
                    break;
                }
            }
        }
        if (this.ackGameEnd.Score) {
            //获得最大赢家
            var max = this.ackGameEnd.Score[0];
            var length = this.ackGameEnd.Score.length;
            for (var i = 0; i < length; i++) {

                if (this.ackGameEnd.Score[i] > max) {
                    max = this.ackGameEnd.Score[i];
                }
            }
            //可能出现两个一样分的
            for (i = 0; i < length; i++) {
                if (max == this.ackGameEnd.Score[i] && max != 0) {
                    this._winSeatid[i] = 1
                } else {
                    this._winSeatid[i] = 0;
                }

            }
        }
        this.dianPaoRecord = [[], [], [], []];
        for (var i = 0; i < chengduGame.hupaiinfo.length; i++) {
            if (chengduGame.hupaiinfo[i]) {
                var dianpaoId = chengduGame.hupaiinfo[i].dianpaoseatid;
                if (dianpaoId != 255 && dianpaoId != null) {
                    this.dianPaoRecord[dianpaoId].push(chengduGame.hupaiinfo[i].hucard);
                }
            }
        }
        if (chengduGame.ganginfo) {
            for (var i = 0; i < chengduGame.ganginfo.length; i++) {
                var gangpaiInfo = chengduGame.ganginfo[i];
                cc.log("------gangpaiInfo.gangpai---: " + gangpaiInfo.gangpai);
                if (gangpaiInfo.gangpai != 255 && gangpaiInfo.diangangid != 255) {
                    this.daGangRecord[gangpaiInfo.diangangid].push(gangpaiInfo.gangpai);
                }
            }
        }

        var poss = [3, 0, 1, 2];
        if (MJModel.mj_roomType == 1)var poss = [3, 0, 1];
        if (MJModel.mj_roomType == 2)var poss = [0, 2];
        for (var m = 0; m < poss.length; m++) {
            var pos = poss[m];
            var startY = 570 - m * 133;
            var seatid = MJModel.getSeatidByPos(pos);
            var startX = 90;
            //大赢家
            if (this._winSeatid[seatid]) {
                var DayingjiaLayer = this._result_effect(seatid);
                if (DayingjiaLayer) {
                    DayingjiaLayer.setPosition(cc.p(startX - 42, startY));
                    this.bgSpr.addChild(DayingjiaLayer, 1);
                }
            }
            //头像
            var headIcon = this.createAvatar(pos);
            headIcon.setPosition(cc.p(startX, startY + 10));
            headIcon.setAnchorPoint(cc.p(0.5, 0.5));
            this.bgSpr.addChild(headIcon);

            //上排杠胡牌
            startX = 180;

            var ganghuLayer = this.createGangHuLayer(seatid);
            this.bgSpr.addChild(ganghuLayer);
            ganghuLayer.setPosition(cc.p(startX, startY + 28));

            //下排所有牌
            var layer = this.createHandCard(seatid);
            layer.setPosition(cc.p(startX, startY - 62));
            this.bgSpr.addChild(layer);


            //花猪、大叫信息
            startX = 920;
            //总成绩、胡牌信息
            startX = 980;
            var scoreLayer = this.createScoreLayer(seatid);
            scoreLayer.setPosition(cc.p(startX, startY - 25));
            this.bgSpr.addChild(scoreLayer);

            startX = 1050;
            //胡牌顺序
            if (MJModel.mj_roomType != 2 && chengduGame.hupaiinfo.length > 0) {
                if (chengduGame.hupaiinfo[seatid].hushunxu != null) {
                    var str = "";
                    switch (chengduGame.hupaiinfo[seatid].hushunxu) {
                        case 1:
                            str = "1";
                            break;
                        case 2:
                            str = "2";
                            break;
                        case 3:
                            str = "3";
                            break;
                        default:
                            break;
                    }
                    var hupaiSX = new cc.LabelAtlas(str + ":;", getResPath("chengdumj/result/hu.png"), 27, 42, '0');
                    hupaiSX.setPosition(cc.p(startX + 70, startY - 40));
                    this.bgSpr.addChild(hupaiSX);
                }
            }
        }
    },

    createHandCard: function (seatid) {
        //胡的那张牌....
        var tagHu = 0;
        //占时注释掉，胡的那张牌
        var scGameEnd = this.chegnduEndInfo;

        if (this.ackGameEnd.faninfo.length > seatid) {
            if (this.ackGameEnd.faninfo[seatid].hucard && this.ackGameEnd.faninfo[seatid].hucard != 255) {
                tagHu = this.ackGameEnd.faninfo[seatid].hucard;
            }
        }
        var layer = new cc.Layer();
        var imageView = new ccui.ImageView(getResPath("chengdumj/result/bg9.png"));
        imageView.setScale9Enabled(true);
        imageView.setContentSize(cc.size(785, 133));
        imageView.setPosition(cc.p(-30, 0));
        imageView.setAnchorPoint(cc.p(0, 0));
        layer.addChild(imageView);

        var imageView2 = new ccui.ImageView(getResPath("chengdumj/result/bg9.png"));
        imageView2.setScale9Enabled(true);
        imageView2.setContentSize(cc.size(315, 133));
        imageView2.setPosition(cc.p(imageView.getContentSize().width - 10, 0));
        imageView2.setAnchorPoint(cc.p(0, 0));
        layer.addChild(imageView2);
        var pos = MJModel.getPosBySeatid(seatid);
        if (this.ackGameEnd.UserCard.length > seatid) {
            var x = 30;
            var y = 18;
            var paiSpace = 10;
            var penggangSize = cc.size(120, 80);
            for (var i = 0; i < this.ackGameEnd.UserCard[seatid].FixedCardsLen; i++) {

                var state = this.ackGameEnd.UserCard[seatid].stFixedCards[i].state;
                var card = this.ackGameEnd.UserCard[seatid].stFixedCards[i].CardData;
                var chairID = this.ackGameEnd.UserCard[seatid].stFixedCards[i].chairID;
                var out_pos = MJModel.getPosBySeatid(chairID);

                if (card == undefined || card == null || card == 0) {
                    continue;
                }
                //下排杠牌
                var gangCard = new MJPeng();
                gangCard.setAnchorPoint(cc.p(0.0, 0.0));

                if ((state & ActionType.TYPE_PENG) == ActionType.TYPE_PENG) {
                    gangCard.setValue(PengType.Peng_Peng, pos, card, 0, out_pos, true);
                }
                else if ((state & ActionType.TYPE_ANGANG) == ActionType.TYPE_ANGANG) {
                    gangCard.setValue(PengType.Peng_AnKang, pos, card, 0, out_pos, true);
                }
                else if ((state & ActionType.TYPE_LEFT_CHI) == ActionType.TYPE_LEFT_CHI) {
                    gangCard.setValue(PengType.Chi_L, pos, card, 0, out_pos, true);
                }
                else if ((state & ActionType.TYPE_CENTER_CHI) == ActionType.TYPE_CENTER_CHI) {
                    gangCard.setValue(PengType.Chi_M, pos, card, 0, out_pos, true);
                }
                else if ((state & ActionType.TYPE_RIGHT_CHI) == ActionType.TYPE_RIGHT_CHI) {
                    gangCard.setValue(PengType.Chi_R, pos, card, 0, out_pos, true);
                }
                else {
                    gangCard.setValue(PengType.Peng_Kang, pos, card, 0, out_pos, true);
                }

                gangCard.setPosition(cc.p(x + 16, y + 18));
                gangCard.setScale(0.5);

                x += paiSpace * 0.5 + penggangSize.width + 18;
                layer.addChild(gangCard);
            }

            var is_remove = 0;
            var dajiaoCard = 0;
            var need_remove = (parseInt(this.ackGameEnd.UserCard[seatid].ChangeableCardsLen % 3) == 2);
            this.hand_card[pos] = [];
            if (scGameEnd.dajiaoinfo && scGameEnd.dajiaoinfo[seatid] && scGameEnd.dajiaoinfo[seatid].dajiaopai && scGameEnd.dajiaoinfo[seatid].dajiaopai != 255) {
                dajiaoCard = scGameEnd.dajiaoinfo[seatid].dajiaopai;
            }
            //牌面信息
            for (var i = 0; i < this.ackGameEnd.UserCard[seatid].ChangeableCardsLen; i++) {

                //去掉type＝＝1的判断 有些游戏自摸不一定叫自摸 只判断玩家的手牌数量 只要多牌 而且有胡牌数据 就跳过
                if (is_remove == 0 && need_remove && scGameEnd.hupaiinfo.length > seatid && tagHu) {
                    if (this.ackGameEnd.UserCard[seatid].ChangeableCards[i] == tagHu) {
                        is_remove = 1;
                        continue;
                    }
                }
                var handCard = new MJCard();
                handCard.setValue(this.ackGameEnd.UserCard[seatid].ChangeableCards[i], 0, CardType.Card_Hand, 0);
                handCard.setScale(0.63);
                handCard.setAnchorPoint(cc.p(0.0, 0.0));
                handCard.setPosition(cc.p(x - 48, y - 12));
                x -= 5;
                x += handCard.getBoundingBox().width;
                layer.addChild(handCard);
                this.hand_card[pos].push(handCard);
            }

            this.hu_card[pos] = null;
            //胡的牌
            cc.log("----tagHu---: " + tagHu);
            if (tagHu) {
                //多加一个是否多牌的判断 防止前面又没有跳过 这里又多加的bug
                var huCard = new MJCard();
                huCard.setValue(tagHu, 0, CardType.Card_End, 0);
                huCard.setScale(0.63);
                huCard.setAnchorPoint(cc.p(0.0, 0.0));
                huCard.setPosition(cc.p(x - 40 + paiSpace, y - 12));
                layer.addChild(huCard);
                this.hu_card[pos] = huCard;
            }
            if (dajiaoCard) {
                //多加一个是否多牌的判断 防止前面又没有跳过 这里又多加的bug
                var djCard = new MJCard();
                djCard.setValue(dajiaoCard, 0, CardType.Card_End, 0);
                djCard.setStoreColor(cc.color(198, 232, 229));
                djCard.setScale(0.63);
                djCard.setAnchorPoint(cc.p(0.0, 0.0));
                djCard.setPosition(cc.p(x - 40 + paiSpace, y - 12));
                layer.addChild(djCard);
            }
        }
        this.handCradPos.x = x;
        this.handCradPos.y = y;
        return layer;
    }
    ,
    //杠胡列表
    createGangHuLayer: function (seatid) {
        var layer = new cc.Layer();
        var x = -7;
        var y = 0;
        var scGameEnd = this.chegnduEndInfo;

        //胡牌信息
        if (scGameEnd.hupaiinfo.length > seatid) {
            if (scGameEnd.hupaiinfo[seatid].hutype == 1) {
                var huPaiType = new cc.LabelTTF("自摸", "Arial", 20);
                huPaiType.setColor(this.leftColor);
                huPaiType.setAnchorPoint(cc.p(0, 0));
                huPaiType.setPosition(cc.p(x, y + 10));
                layer.addChild(huPaiType);
                x += huPaiType.getContentSize().width + 10;
            } else if (scGameEnd.hupaiinfo[seatid].hutype == 2) {
                var huPaiType = new cc.LabelTTF("炮胡", "Arial", 20);
                huPaiType.setColor(this.leftColor);
                huPaiType.setAnchorPoint(cc.p(0, 0));
                huPaiType.setPosition(cc.p(x, y + 10));
                layer.addChild(huPaiType);
                x += huPaiType.getContentSize().width + 10;
            }
        }

        //大叫 暂时注释
        if (scGameEnd.dajiaoinfo && scGameEnd.dajiaoinfo[seatid]) {
            var dajiaoinfos = scGameEnd.dajiaoinfo[seatid];
            if (dajiaoinfos.dajiaotype == 2) {
                var dajiao = new cc.LabelTTF(" 大叫", "Arial", 20);
                dajiao.setAnchorPoint(cc.p(0, 0));
                dajiao.setColor(this.leftColor);
                layer.addChild(dajiao);
                dajiao.setPosition(cc.p(x, y + 10));
                x += dajiao.getContentSize().width + 10;
            }

            //大叫类型
            for (var i = 0; i < dajiaoinfos.dajiaoleixing.length; i++) {
                var dajiaoType = new cc.LabelTTF(ChengduType[dajiaoinfos.dajiaoleixing[i]], "Arial", 20);
                dajiaoType.setColor(this.leftColor);
                dajiaoType.setAnchorPoint(cc.p(0, 0));
                dajiaoType.setPosition(cc.p(x, y + 10));
                layer.addChild(dajiaoType);
                x += dajiaoType.getContentSize().width + 10;
            }
        }
        // //胡番 + 加番
        if (scGameEnd.hupaiinfo[seatid].hufan) {
            for (var i = 0; i < scGameEnd.hupaiinfo[seatid].hufan.length; i++) {
                if (scGameEnd.hupaiinfo[seatid].hufan[i]) {
                    var fanType = new cc.LabelTTF(ChengduType[scGameEnd.hupaiinfo[seatid].hufanleixing[i]] + " X" + scGameEnd.hupaiinfo[seatid].hufan[i], "Arial", 20);
                    fanType.setColor(this.leftColor);
                    fanType.setAnchorPoint(cc.p(0, 0));
                    fanType.setPosition(cc.p(x, y + 10));
                    layer.addChild(fanType);
                    x += fanType.getContentSize().width + 10;
                }
            }
        }

        //for (var j = 0; j < this.beizimo[seatid].length; j ++){
        //    var hu_seatid = this.beizimo[seatid][j];
        //    var str = "被自摸(";
        //    for (var i = 0; i < scGameEnd.hupaiinfo[hu_seatid].hufan.length; i++) {
        //        if (scGameEnd.hupaiinfo[hu_seatid].hufan[i]) {
        //            str += ChengduType[scGameEnd.hupaiinfo[hu_seatid].hufanleixing[i]];
        //            if (i != scGameEnd.hupaiinfo[hu_seatid].hufan.length - 1) str += ",";
        //        }
        //    }
        //    str += ")";
        //    var fanType = new cc.LabelTTF(str, "Arial", 20);
        //    fanType.setColor(this.leftColor);
        //    fanType.setAnchorPoint(cc.p(0, 0));
        //    fanType.setPosition(cc.p(x, y + 10));
        //    layer.addChild(fanType);
        //    x += fanType.getContentSize().width + 10;
        //}

        //点炮
        var dianpaoCount = 0;
        for (var i = 0; i < this.dianPaoRecord[seatid].length; i++) {
            if (dianpaoCount == 0) {
                var dianPao = new cc.LabelTTF("点炮", "Arial", 20);
                dianPao.setColor(this.leftColor);
                dianPao.setAnchorPoint(cc.p(0, 0));
                dianPao.setPosition(cc.p(x, y + 10));
                layer.addChild(dianPao);
                x += dianPao.getContentSize().width + 10;
            } else {
                x -= 5;
            }
            var dianpaoCard = null;
            var c = Utils.toHex2(this.dianPaoRecord[seatid][i]);
            dianpaoCard = new cc.Sprite(__String.createWithFormat(getResPath("chengdumj/smallCard/%1.png"), c));
            if (dianpaoCard != undefined) {
                dianpaoCard.setAnchorPoint(cc.p(0.0, 0.0));
                dianpaoCard.setPosition(cc.p(x, y + 5));
                layer.addChild(dianpaoCard);
                x += dianpaoCard.getBoundingBox().width + 11;
            }
            dianpaoCount++;

        }
        //杠牌分
        if (scGameEnd.hupaiinfo[seatid].totalgangfen != 0) {
            var str = "杠牌 +";
            if (scGameEnd.hupaiinfo[seatid].totalgangfen < 0) {
                str = "杠牌 ";
            }

            var gangFenScore = new cc.LabelTTF(str + scGameEnd.hupaiinfo[seatid].totalgangfen, "Arial", 20);
            gangFenScore.setAnchorPoint(cc.p(0, 0));
            gangFenScore.setColor(this.leftColor);
            layer.addChild(gangFenScore);
            gangFenScore.setPosition(cc.p(x, y + 10));
            x += gangFenScore.getContentSize().width + 10;
        }
        if (scGameEnd.hupaiinfo[seatid].totalzhuanyufen != 0) {
            var zhuanyuScore = new cc.LabelTTF("转雨分 +" + scGameEnd.hupaiinfo[seatid].totalzhuanyufen, "Arial", 20);
            zhuanyuScore.setAnchorPoint(cc.p(0, 0));
            zhuanyuScore.setColor(this.leftColor);
            layer.addChild(zhuanyuScore);
            zhuanyuScore.setPosition(cc.p(x, y + 10));
            x += zhuanyuScore.getContentSize().width + 10;
        }
        return layer;
    },
    _win_effect: function (name) {
        try {
            if (name == "win") {
                ccs.armatureDataManager.addArmatureFileInfo(getResPath("chengdumj/result/effect/win/effectsfszzmjnll.ExportJson"));
            } else {
                ccs.armatureDataManager.addArmatureFileInfo(getResPath("chengdumj/result/effect/lose/effectsfszzmjzjzl.ExportJson"));
            }
            var armature = new ccs.Armature((name == "win") ? "effectsfszzmjnll" : "effectsfszzmjzjzl");
            if (armature != null) {
                var animation = armature.getAnimation();
                if (animation) {
                    if (typeof animation.playWithIndex === "function") {
                        animation.playWithIndex(0, -1, 0);
                        armature.setPosition(cc.p(this.bgSpr.getContentSize().width / 2, this.bgSpr.getContentSize().height + 5));
                        this.bgSpr.addChild(armature);
                    }
                }
                armature.runAction(cc.sequence(cc.delayTime(2), animation.repeatForever()));
            }
        } catch (e) {
            Log(this, e);
        }
    },
    createAvatar: function (pos) {
        var seatid = MJModel.getSeatidByPos(pos);
        var player = MJModel.players[seatid];
        var layer = new cc.Layer();

        var headPic = Utils.createCircleAvatar(player.avatar, "Avatars/user4_unlogin.png", "Avatars/user4_unlogin.png", cc.size(74, 74));
        layer.addChild(headPic);
        //    headPic.setPosition(cc.p(startX,startY));

        var framepath;
        var scale = 1;
        if (pos == 0) {
            framepath = getResPath("chengdumj/result/result_detail_frame_wo.png");
        } else {
            framepath = getResPath("chengdumj/result/result_detail_frame_others.png");
            scale = 1.1;
        }
        var headFrame = new cc.Sprite(framepath);
        headFrame.setAnchorPoint(cc.p(0.5, 0.5));
        headFrame.setScale(scale);
        headFrame.setPosition(cc.p(0, 0));
        layer.addChild(headFrame, -1);

        var headSize = cc.size(88, 88);

        //是否是庄家
        if (MJModel.banker_seatid == seatid) {
            var bankerPic = new cc.Sprite(getResPath("RoomMJ/banker.png"));
            bankerPic.setAnchorPoint(cc.p(0.5, 0));
            bankerPic.setPosition(cc.p(-headSize.width / 2, headSize.height / 2 - 30));
            layer.addChild(bankerPic);
        }

        //位置
        var posPic = new cc.Sprite(__String.createWithFormat(getResPath("chengdumj/result/result_detail_pos_%1.png"), pos));
        posPic.setAnchorPoint(cc.p(0.5, 0));
        posPic.setPosition(cc.p(0, headSize.height / 2 + 3));
        layer.addChild(posPic);

        //玩家名字
        var nameLabel = new cc.LabelTTF(Utils.parseName(6, player.name), "Arial", 20);
        nameLabel.setColor(this.leftColor);
        nameLabel.setAnchorPoint(cc.p(0.5, 0.5));
        nameLabel.setPosition(cc.p(0, -headSize.height / 2 - 10));
        layer.addChild(nameLabel);

        return layer;
    }
    ,

    //输赢分
    createScoreLayer: function (seatid) {
        var layer = null;
        layer = new cc.Layer();
        //胡牌番数
        var str = 0;
        var scGameEnd = this.chegnduEndInfo;
        var FanNum = scGameEnd.hupaiinfo[seatid].totalhufan;
        if (FanNum > 0) {
            str = FanNum;
            var Hufan = new cc.LabelAtlas(str + ":;", getResPath("chengdumj/result/fan.png"), 28, 29, '0');
            Hufan.setAnchorPoint(cc.p(0.0, 0.5));
            Hufan.setPosition(cc.p(0, 50));
            Hufan.setName("Hufan");
            layer.addChild(Hufan);
        }
        if (scGameEnd.dajiaoinfo && scGameEnd.dajiaoinfo[seatid]) {
            var dajiaoinfos = scGameEnd.dajiaoinfo[seatid]
            var FanNum2 = dajiaoinfos.dajiaofan;
            if (FanNum2 > 0) {
                str = FanNum2;
                var Djiaofan = new cc.LabelAtlas(str + ":;", getResPath("chengdumj/result/fan.png"), 28, 29, '0');
                Djiaofan.setAnchorPoint(cc.p(0.0, 0.5));
                Djiaofan.setPosition(cc.p(0, 50));
                Djiaofan.setName("DajiaoFan");
                layer.addChild(Djiaofan);
            }
        }

        //输赢分
        var score = 0;
        if (this.ackGameEnd.Score && this.ackGameEnd.Score.length > seatid) score = this.ackGameEnd.Score[seatid];
        var width = 0;
        var scorelabelpath = "";
        scorelabelpath = getResPath("chengdumj/result/result_small_label_lose.png");
        if (score > 0) {
            scorelabelpath = getResPath("chengdumj/result/result_small_label_win.png");
        }

        var scoredes = ":";
        if (score >= 0) scoredes = "";
        var scoreLabel = new cc.LabelAtlas(scoredes + Math.abs(score), scorelabelpath, 29, 37, '0');
        scoreLabel.setAnchorPoint(cc.p(0.0, 0.5));
        scoreLabel.setPosition(cc.p(width, 5));
        scoreLabel.setName("scoreLabel");
        layer.addChild(scoreLabel);
        return layer;
    },

    _result_effect: function (seatid) {
        var layer = new cc.Layer();
        cc.log("_result_effect");
        var dayingjiaSpr = new cc.Sprite(getResPath("chengdumj/result/dayingjia.png"));
        dayingjiaSpr.setAnchorPoint(cc.p(0.5, 0.5));
        dayingjiaSpr.setPosition(cc.p(0, 0));
        dayingjiaSpr.setScale(0.8);
        layer.addChild(dayingjiaSpr, 1000);
        return layer;
    },
});

var HUGANG =
{
    HUGANG_ZHIGANG: 2,				//直杠
    HUGANG_WANGANG: 4,				//弯杠
    HUGANG_ANGANG: 8,				//暗杠
    HUGANG_DIANPAO: 16,			//点炮
    HUGANG_PAOHU: 32,				//炮胡
    HUGANG_DIANGANG: 64,			//点杠
    HUGANG_BEIZIMO: 128,			//被自摸
    HUGANG_ZIMO: 256,				//自摸
    HUGANG_HUAZHU: 512,            //花猪
    HUGANG_DAJIAO: 1024,            //大叫
    HUGANG_BEIHUAZHU: 2048,            //被花猪赔付
    HUGANG_BEIDAJIAO: 4096,            //被大叫赔付

    //自定义部分
    HUGANG_HUAPAI: 250,                //广东麻将花牌
    HUGANG_PIAO: 260,                  //飘
    HUGANG_TINGPAI: 261,               //听牌
    HUGANG_TUIGANG: 270,               //退杠
    HUGANG_BEITUIGANG: 271,            //被退杠
    HUGANG_CHAOZHUANG: 280,            //抄庄
    HUGANG_BEICHAOZHUANG: 281,         //被抄庄

    HUGANG_BAOPAI: 500,            //包牌
    HUGANG_BEIBAOPAI: 501,            //被包牌
    HUGANG_SHABAO: 502,            //杀报
    HUGANG_BEISHABAO: 503,            //被杀报
}
